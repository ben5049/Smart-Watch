
gui_ltdc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bbdc  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dcc  0802be50  0802be50  0002ce50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0802fc1c  0802fc1c  00030c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802fdc4  0802fdc4  00030dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00017700  0802fddc  0802fddc  00030ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  080474dc  080474dc  000484dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080474ec  080474ec  000ca5b8  2**0
                  CONTENTS
  8 .ARM          00000008  080474ec  080474ec  000484ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080474f4  080474f4  000ca5b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080474f4  080474f4  000484f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .fini_array   00000008  08047508  08047508  00048508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .data         000001b8  20000000  08047510  00049000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_Framebuffer 0007ec00  200001b8  080476c8  000491b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 Nemagfx_Memory_Pool_Buffer 00002800  2007edb8  080c62c8  000c7db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00006350  200815b8  080c8ac8  000ca5b8  2**2
                  ALLOC
 16 ._user_heap_stack 00000600  20087908  080c8ac8  000ca908  2**0
                  ALLOC
 17 .ARM.attributes 00000036  00000000  00000000  000ca5b8  2**0
                  CONTENTS, READONLY
 18 .debug_info   0009c3e0  00000000  00000000  000ca5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000136c5  00000000  00000000  001669ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003f50  00000000  00000000  0017a098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002ea0  00000000  00000000  0017dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00053e92  00000000  00000000  00180e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0005b198  00000000  00000000  001d4d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001d5630  00000000  00000000  0022feb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000c2  00000000  00000000  004054e2  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00010aa0  00000000  00000000  004055a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 0000011b  00000000  00000000  00416044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	200815b8 	.word	0x200815b8
 8000290:	00000000 	.word	0x00000000
 8000294:	0802be38 	.word	0x0802be38

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	200815bc 	.word	0x200815bc
 80002b0:	0802be38 	.word	0x0802be38

080002b4 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 80002b4:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002b6:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002ba:	4917      	ldr	r1, [pc, #92]	@ (8000318 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002bc:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002c0:	4816      	ldr	r0, [pc, #88]	@ (800031c <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002c2:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002c4:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002c8:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002ca:	4815      	ldr	r0, [pc, #84]	@ (8000320 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002cc:	4912      	ldr	r1, [pc, #72]	@ (8000318 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002ce:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002d0:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002d2:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002d6:	4913      	ldr	r1, [pc, #76]	@ (8000324 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002d8:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002da:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002de:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002e0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002e4:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002e8:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ec:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002f0:	490d      	ldr	r1, [pc, #52]	@ (8000328 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002f2:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002f6:	4770      	bx	lr

080002f8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002f8:	f7ff bffe 	b.w	80002f8 <__tx_BadHandler>

080002fc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002fc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 8000302:	4770      	bx	lr

08000304 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 8000304:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000306:	f000 f897 	bl	8000438 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 800030a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 800030e:	4770      	bx	lr

08000310 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000310:	f7ff bffe 	b.w	8000310 <__tx_NMIHandler>

08000314 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000314:	f7ff bffe 	b.w	8000314 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000318:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800031c:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000320:	2008527c 	.word	0x2008527c
    LDR     r1, =SYSTICK_CYCLES
 8000324:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000328:	40ff0000 	.word	0x40ff0000

0800032c <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 800032c:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	4a2d      	ldr	r2, [pc, #180]	@ (80003e8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000332:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000334:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000338:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 800033c:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000340:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000342:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000346:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800034a:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800034e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000352:	f3bf 8f6f 	isb	sy

08000356 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000356:	e7fe      	b.n	8000356 <__tx_wait_here>

08000358 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000358:	4824      	ldr	r0, [pc, #144]	@ (80003ec <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800035a:	4a25      	ldr	r2, [pc, #148]	@ (80003f0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800035c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000360:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000362:	b191      	cbz	r1, 800038a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000364:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000366:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800036a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800036e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000372:	d101      	bne.n	8000378 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000374:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000378 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000378:	4c1e      	ldr	r4, [pc, #120]	@ (80003f4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800037a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800037e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000382:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000384:	b10d      	cbz	r5, 800038a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000386:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000388:	6023      	str	r3, [r4, #0]

0800038a <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800038c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800038e:	b1d1      	cbz	r1, 80003c6 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000390:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i

08000394 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000394:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000396:	4c17      	ldr	r4, [pc, #92]	@ (80003f4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000398:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800039a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800039e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003a0:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 80003a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 80003a6:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003aa:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003ae:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003b2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003b6:	d101      	bne.n	80003bc <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003b8:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003bc <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003bc:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003c0:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003c4:	4770      	bx	lr

080003c6 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003c6:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003c8:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003ca:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003cc:	b909      	cbnz	r1, 80003d2 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ce:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003d0:	e7f9      	b.n	80003c6 <__tx_ts_wait>

080003d2 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003d2:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003d6:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003da:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003de:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003e0:	e7d8      	b.n	8000394 <__tx_ts_restore>
 80003e2:	bf00      	nop

080003e4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003e4:	4770      	bx	lr
 80003e6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	20085318 	.word	0x20085318
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ec:	20085280 	.word	0x20085280
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f0:	20085284 	.word	0x20085284
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003f4:	20085884 	.word	0x20085884

080003f8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003f8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003fa:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003fe:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 8000402:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 8000406:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000408:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 800040c:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 800040e:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000410:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 8000412:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 8000414:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 8000416:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000418:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 800041a:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 800041c:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 800041e:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000420:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000424:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000426:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 800042a:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 800042c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800042e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000432:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000434:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000436:	4770      	bx	lr

08000438 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000438:	4922      	ldr	r1, [pc, #136]	@ (80004c4 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800043a:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 800043c:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000440:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000442:	4b21      	ldr	r3, [pc, #132]	@ (80004c8 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000444:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000446:	b13a      	cbz	r2, 8000458 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000448:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800044c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800044e:	b91a      	cbnz	r2, 8000458 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000450:	4b1e      	ldr	r3, [pc, #120]	@ (80004cc <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000452:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000456:	6018      	str	r0, [r3, #0]

08000458 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000458:	491d      	ldr	r1, [pc, #116]	@ (80004d0 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800045a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800045c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800045e:	b122      	cbz	r2, 800046a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000460:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000462:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000466:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000468:	e008      	b.n	800047c <__tx_timer_done>

0800046a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800046a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000470:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000472:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000474:	d101      	bne.n	800047a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000476:	4b19      	ldr	r3, [pc, #100]	@ (80004dc <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000478:	6818      	ldr	r0, [r3, #0]

0800047a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800047a:	6008      	str	r0, [r1, #0]

0800047c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800047c:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800047e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000480:	b912      	cbnz	r2, 8000488 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000482:	4914      	ldr	r1, [pc, #80]	@ (80004d4 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000484:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000486:	b1c8      	cbz	r0, 80004bc <__tx_timer_nothing_expired>

08000488 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000488:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800048a:	4912      	ldr	r1, [pc, #72]	@ (80004d4 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800048c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800048e:	b108      	cbz	r0, 8000494 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000490:	f00e f836 	bl	800e500 <_tx_timer_expiration_process>

08000494 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000494:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000496:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000498:	b172      	cbz	r2, 80004b8 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800049a:	f00d ffa3 	bl	800e3e4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800049e:	4810      	ldr	r0, [pc, #64]	@ (80004e0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004a0:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004a2:	b949      	cbnz	r1, 80004b8 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	480f      	ldr	r0, [pc, #60]	@ (80004e4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004a6:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004aa:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	480f      	ldr	r0, [pc, #60]	@ (80004ec <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004b2:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004b4:	d000      	beq.n	80004b8 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004b6:	6002      	str	r2, [r0, #0]

080004b8 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 80004b8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004bc <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004bc:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004c0:	4770      	bx	lr
 80004c2:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004c4:	20085324 	.word	0x20085324
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004c8:	20085884 	.word	0x20085884
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004cc:	20085328 	.word	0x20085328
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004d0:	200853b4 	.word	0x200853b4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004d4:	200853b8 	.word	0x200853b8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004d8:	200853b0 	.word	0x200853b0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004dc:	200853ac 	.word	0x200853ac
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004e0:	20085318 	.word	0x20085318
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004e4:	20085280 	.word	0x20085280
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004e8:	20085284 	.word	0x20085284
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ec:	e000ed04 	.word	0xe000ed04

080004f0 <__aeabi_uldivmod>:
 80004f0:	b953      	cbnz	r3, 8000508 <__aeabi_uldivmod+0x18>
 80004f2:	b94a      	cbnz	r2, 8000508 <__aeabi_uldivmod+0x18>
 80004f4:	2900      	cmp	r1, #0
 80004f6:	bf08      	it	eq
 80004f8:	2800      	cmpeq	r0, #0
 80004fa:	bf1c      	itt	ne
 80004fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000500:	f04f 30ff 	movne.w	r0, #4294967295
 8000504:	f000 b97e 	b.w	8000804 <__aeabi_idiv0>
 8000508:	f1ad 0c08 	sub.w	ip, sp, #8
 800050c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000510:	f000 f806 	bl	8000520 <__udivmoddi4>
 8000514:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800051c:	b004      	add	sp, #16
 800051e:	4770      	bx	lr

08000520 <__udivmoddi4>:
 8000520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000524:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000526:	460c      	mov	r4, r1
 8000528:	2b00      	cmp	r3, #0
 800052a:	d14d      	bne.n	80005c8 <__udivmoddi4+0xa8>
 800052c:	428a      	cmp	r2, r1
 800052e:	460f      	mov	r7, r1
 8000530:	4684      	mov	ip, r0
 8000532:	4696      	mov	lr, r2
 8000534:	fab2 f382 	clz	r3, r2
 8000538:	d960      	bls.n	80005fc <__udivmoddi4+0xdc>
 800053a:	b14b      	cbz	r3, 8000550 <__udivmoddi4+0x30>
 800053c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000540:	f1c3 0220 	rsb	r2, r3, #32
 8000544:	409f      	lsls	r7, r3
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f202 	lsr.w	r2, r0, r2
 800054e:	4317      	orrs	r7, r2
 8000550:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000554:	fa1f f48e 	uxth.w	r4, lr
 8000558:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800055c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000560:	fb06 7711 	mls	r7, r6, r1, r7
 8000564:	fb01 f004 	mul.w	r0, r1, r4
 8000568:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800056c:	4290      	cmp	r0, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x62>
 8000570:	eb1e 0202 	adds.w	r2, lr, r2
 8000574:	f101 37ff 	add.w	r7, r1, #4294967295
 8000578:	d202      	bcs.n	8000580 <__udivmoddi4+0x60>
 800057a:	4290      	cmp	r0, r2
 800057c:	f200 812d 	bhi.w	80007da <__udivmoddi4+0x2ba>
 8000580:	4639      	mov	r1, r7
 8000582:	1a12      	subs	r2, r2, r0
 8000584:	fa1f fc8c 	uxth.w	ip, ip
 8000588:	fbb2 f0f6 	udiv	r0, r2, r6
 800058c:	fb06 2210 	mls	r2, r6, r0, r2
 8000590:	fb00 f404 	mul.w	r4, r0, r4
 8000594:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000598:	4564      	cmp	r4, ip
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x8e>
 800059c:	eb1e 0c0c 	adds.w	ip, lr, ip
 80005a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005a4:	d202      	bcs.n	80005ac <__udivmoddi4+0x8c>
 80005a6:	4564      	cmp	r4, ip
 80005a8:	f200 811a 	bhi.w	80007e0 <__udivmoddi4+0x2c0>
 80005ac:	4610      	mov	r0, r2
 80005ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005b2:	ebac 0c04 	sub.w	ip, ip, r4
 80005b6:	2100      	movs	r1, #0
 80005b8:	b125      	cbz	r5, 80005c4 <__udivmoddi4+0xa4>
 80005ba:	fa2c f303 	lsr.w	r3, ip, r3
 80005be:	2200      	movs	r2, #0
 80005c0:	e9c5 3200 	strd	r3, r2, [r5]
 80005c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d905      	bls.n	80005d8 <__udivmoddi4+0xb8>
 80005cc:	b10d      	cbz	r5, 80005d2 <__udivmoddi4+0xb2>
 80005ce:	e9c5 0100 	strd	r0, r1, [r5]
 80005d2:	2100      	movs	r1, #0
 80005d4:	4608      	mov	r0, r1
 80005d6:	e7f5      	b.n	80005c4 <__udivmoddi4+0xa4>
 80005d8:	fab3 f183 	clz	r1, r3
 80005dc:	2900      	cmp	r1, #0
 80005de:	d14d      	bne.n	800067c <__udivmoddi4+0x15c>
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	f0c0 80f2 	bcc.w	80007ca <__udivmoddi4+0x2aa>
 80005e6:	4290      	cmp	r0, r2
 80005e8:	f080 80ef 	bcs.w	80007ca <__udivmoddi4+0x2aa>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d0e6      	beq.n	80005c4 <__udivmoddi4+0xa4>
 80005f6:	e9c5 6300 	strd	r6, r3, [r5]
 80005fa:	e7e3      	b.n	80005c4 <__udivmoddi4+0xa4>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	f040 80a2 	bne.w	8000746 <__udivmoddi4+0x226>
 8000602:	1a8a      	subs	r2, r1, r2
 8000604:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000608:	fa1f f68e 	uxth.w	r6, lr
 800060c:	2101      	movs	r1, #1
 800060e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000612:	fb07 2014 	mls	r0, r7, r4, r2
 8000616:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800061a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800061e:	fb06 f004 	mul.w	r0, r6, r4
 8000622:	4290      	cmp	r0, r2
 8000624:	d90f      	bls.n	8000646 <__udivmoddi4+0x126>
 8000626:	eb1e 0202 	adds.w	r2, lr, r2
 800062a:	f104 38ff 	add.w	r8, r4, #4294967295
 800062e:	bf2c      	ite	cs
 8000630:	f04f 0901 	movcs.w	r9, #1
 8000634:	f04f 0900 	movcc.w	r9, #0
 8000638:	4290      	cmp	r0, r2
 800063a:	d903      	bls.n	8000644 <__udivmoddi4+0x124>
 800063c:	f1b9 0f00 	cmp.w	r9, #0
 8000640:	f000 80c8 	beq.w	80007d4 <__udivmoddi4+0x2b4>
 8000644:	4644      	mov	r4, r8
 8000646:	1a12      	subs	r2, r2, r0
 8000648:	fa1f fc8c 	uxth.w	ip, ip
 800064c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000650:	fb07 2210 	mls	r2, r7, r0, r2
 8000654:	fb00 f606 	mul.w	r6, r0, r6
 8000658:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800065c:	4566      	cmp	r6, ip
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x152>
 8000660:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000664:	f100 32ff 	add.w	r2, r0, #4294967295
 8000668:	d202      	bcs.n	8000670 <__udivmoddi4+0x150>
 800066a:	4566      	cmp	r6, ip
 800066c:	f200 80bb 	bhi.w	80007e6 <__udivmoddi4+0x2c6>
 8000670:	4610      	mov	r0, r2
 8000672:	ebac 0c06 	sub.w	ip, ip, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	e79d      	b.n	80005b8 <__udivmoddi4+0x98>
 800067c:	f1c1 0620 	rsb	r6, r1, #32
 8000680:	408b      	lsls	r3, r1
 8000682:	fa04 fe01 	lsl.w	lr, r4, r1
 8000686:	fa22 f706 	lsr.w	r7, r2, r6
 800068a:	fa20 fc06 	lsr.w	ip, r0, r6
 800068e:	40f4      	lsrs	r4, r6
 8000690:	408a      	lsls	r2, r1
 8000692:	431f      	orrs	r7, r3
 8000694:	ea4e 030c 	orr.w	r3, lr, ip
 8000698:	fa00 fe01 	lsl.w	lr, r0, r1
 800069c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80006a4:	fa1f fc87 	uxth.w	ip, r7
 80006a8:	fbb4 f0f8 	udiv	r0, r4, r8
 80006ac:	fb08 4410 	mls	r4, r8, r0, r4
 80006b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006b4:	fb00 f90c 	mul.w	r9, r0, ip
 80006b8:	45a1      	cmp	r9, r4
 80006ba:	d90e      	bls.n	80006da <__udivmoddi4+0x1ba>
 80006bc:	193c      	adds	r4, r7, r4
 80006be:	f100 3aff 	add.w	sl, r0, #4294967295
 80006c2:	bf2c      	ite	cs
 80006c4:	f04f 0b01 	movcs.w	fp, #1
 80006c8:	f04f 0b00 	movcc.w	fp, #0
 80006cc:	45a1      	cmp	r9, r4
 80006ce:	d903      	bls.n	80006d8 <__udivmoddi4+0x1b8>
 80006d0:	f1bb 0f00 	cmp.w	fp, #0
 80006d4:	f000 8093 	beq.w	80007fe <__udivmoddi4+0x2de>
 80006d8:	4650      	mov	r0, sl
 80006da:	eba4 0409 	sub.w	r4, r4, r9
 80006de:	fa1f f983 	uxth.w	r9, r3
 80006e2:	fbb4 f3f8 	udiv	r3, r4, r8
 80006e6:	fb08 4413 	mls	r4, r8, r3, r4
 80006ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80006ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006f2:	45a4      	cmp	ip, r4
 80006f4:	d906      	bls.n	8000704 <__udivmoddi4+0x1e4>
 80006f6:	193c      	adds	r4, r7, r4
 80006f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80006fc:	d201      	bcs.n	8000702 <__udivmoddi4+0x1e2>
 80006fe:	45a4      	cmp	ip, r4
 8000700:	d87a      	bhi.n	80007f8 <__udivmoddi4+0x2d8>
 8000702:	4643      	mov	r3, r8
 8000704:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000708:	eba4 040c 	sub.w	r4, r4, ip
 800070c:	fba0 9802 	umull	r9, r8, r0, r2
 8000710:	4544      	cmp	r4, r8
 8000712:	46cc      	mov	ip, r9
 8000714:	4643      	mov	r3, r8
 8000716:	d302      	bcc.n	800071e <__udivmoddi4+0x1fe>
 8000718:	d106      	bne.n	8000728 <__udivmoddi4+0x208>
 800071a:	45ce      	cmp	lr, r9
 800071c:	d204      	bcs.n	8000728 <__udivmoddi4+0x208>
 800071e:	3801      	subs	r0, #1
 8000720:	ebb9 0c02 	subs.w	ip, r9, r2
 8000724:	eb68 0307 	sbc.w	r3, r8, r7
 8000728:	b15d      	cbz	r5, 8000742 <__udivmoddi4+0x222>
 800072a:	ebbe 020c 	subs.w	r2, lr, ip
 800072e:	eb64 0403 	sbc.w	r4, r4, r3
 8000732:	fa04 f606 	lsl.w	r6, r4, r6
 8000736:	fa22 f301 	lsr.w	r3, r2, r1
 800073a:	40cc      	lsrs	r4, r1
 800073c:	431e      	orrs	r6, r3
 800073e:	e9c5 6400 	strd	r6, r4, [r5]
 8000742:	2100      	movs	r1, #0
 8000744:	e73e      	b.n	80005c4 <__udivmoddi4+0xa4>
 8000746:	fa02 fe03 	lsl.w	lr, r2, r3
 800074a:	f1c3 0120 	rsb	r1, r3, #32
 800074e:	fa04 f203 	lsl.w	r2, r4, r3
 8000752:	fa00 fc03 	lsl.w	ip, r0, r3
 8000756:	40cc      	lsrs	r4, r1
 8000758:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800075c:	fa20 f101 	lsr.w	r1, r0, r1
 8000760:	fa1f f68e 	uxth.w	r6, lr
 8000764:	fbb4 f0f7 	udiv	r0, r4, r7
 8000768:	430a      	orrs	r2, r1
 800076a:	fb07 4410 	mls	r4, r7, r0, r4
 800076e:	0c11      	lsrs	r1, r2, #16
 8000770:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000774:	fb00 f406 	mul.w	r4, r0, r6
 8000778:	428c      	cmp	r4, r1
 800077a:	d90e      	bls.n	800079a <__udivmoddi4+0x27a>
 800077c:	eb1e 0101 	adds.w	r1, lr, r1
 8000780:	f100 38ff 	add.w	r8, r0, #4294967295
 8000784:	bf2c      	ite	cs
 8000786:	f04f 0901 	movcs.w	r9, #1
 800078a:	f04f 0900 	movcc.w	r9, #0
 800078e:	428c      	cmp	r4, r1
 8000790:	d902      	bls.n	8000798 <__udivmoddi4+0x278>
 8000792:	f1b9 0f00 	cmp.w	r9, #0
 8000796:	d02c      	beq.n	80007f2 <__udivmoddi4+0x2d2>
 8000798:	4640      	mov	r0, r8
 800079a:	1b09      	subs	r1, r1, r4
 800079c:	b292      	uxth	r2, r2
 800079e:	fbb1 f4f7 	udiv	r4, r1, r7
 80007a2:	fb07 1114 	mls	r1, r7, r4, r1
 80007a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007aa:	fb04 f106 	mul.w	r1, r4, r6
 80007ae:	4291      	cmp	r1, r2
 80007b0:	d907      	bls.n	80007c2 <__udivmoddi4+0x2a2>
 80007b2:	eb1e 0202 	adds.w	r2, lr, r2
 80007b6:	f104 38ff 	add.w	r8, r4, #4294967295
 80007ba:	d201      	bcs.n	80007c0 <__udivmoddi4+0x2a0>
 80007bc:	4291      	cmp	r1, r2
 80007be:	d815      	bhi.n	80007ec <__udivmoddi4+0x2cc>
 80007c0:	4644      	mov	r4, r8
 80007c2:	1a52      	subs	r2, r2, r1
 80007c4:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80007c8:	e721      	b.n	800060e <__udivmoddi4+0xee>
 80007ca:	1a86      	subs	r6, r0, r2
 80007cc:	eb64 0303 	sbc.w	r3, r4, r3
 80007d0:	2001      	movs	r0, #1
 80007d2:	e70e      	b.n	80005f2 <__udivmoddi4+0xd2>
 80007d4:	3c02      	subs	r4, #2
 80007d6:	4472      	add	r2, lr
 80007d8:	e735      	b.n	8000646 <__udivmoddi4+0x126>
 80007da:	3902      	subs	r1, #2
 80007dc:	4472      	add	r2, lr
 80007de:	e6d0      	b.n	8000582 <__udivmoddi4+0x62>
 80007e0:	44f4      	add	ip, lr
 80007e2:	3802      	subs	r0, #2
 80007e4:	e6e3      	b.n	80005ae <__udivmoddi4+0x8e>
 80007e6:	44f4      	add	ip, lr
 80007e8:	3802      	subs	r0, #2
 80007ea:	e742      	b.n	8000672 <__udivmoddi4+0x152>
 80007ec:	3c02      	subs	r4, #2
 80007ee:	4472      	add	r2, lr
 80007f0:	e7e7      	b.n	80007c2 <__udivmoddi4+0x2a2>
 80007f2:	3802      	subs	r0, #2
 80007f4:	4471      	add	r1, lr
 80007f6:	e7d0      	b.n	800079a <__udivmoddi4+0x27a>
 80007f8:	3b02      	subs	r3, #2
 80007fa:	443c      	add	r4, r7
 80007fc:	e782      	b.n	8000704 <__udivmoddi4+0x1e4>
 80007fe:	3802      	subs	r0, #2
 8000800:	443c      	add	r4, r7
 8000802:	e76a      	b.n	80006da <__udivmoddi4+0x1ba>

08000804 <__aeabi_idiv0>:
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000814:	2334      	movs	r3, #52	@ 0x34
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800081c:	4a13      	ldr	r2, [pc, #76]	@ (800086c <tx_application_define+0x64>)
 800081e:	4914      	ldr	r1, [pc, #80]	@ (8000870 <tx_application_define+0x68>)
 8000820:	4814      	ldr	r0, [pc, #80]	@ (8000874 <tx_application_define+0x6c>)
 8000822:	f00e f917 	bl	800ea54 <_txe_byte_pool_create>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10a      	bne.n	8000842 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <tx_application_define+0x6c>)
 800082e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000830:	68b8      	ldr	r0, [r7, #8]
 8000832:	f000 f827 	bl	8000884 <App_ThreadX_Init>
 8000836:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800083e:	bf00      	nop
 8000840:	e7fd      	b.n	800083e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

    if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000842:	2334      	movs	r3, #52	@ 0x34
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084a:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <tx_application_define+0x70>)
 800084c:	490b      	ldr	r1, [pc, #44]	@ (800087c <tx_application_define+0x74>)
 800084e:	480c      	ldr	r0, [pc, #48]	@ (8000880 <tx_application_define+0x78>)
 8000850:	f00e f900 	bl	800ea54 <_txe_byte_pool_create>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d104      	bne.n	8000864 <tx_application_define+0x5c>
    {
        /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

        /* USER CODE END TouchGFX_Byte_Pool_Success */

        memory_ptr = (VOID*)&touchgfx_app_byte_pool;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <tx_application_define+0x78>)
 800085c:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 800085e:	68b8      	ldr	r0, [r7, #8]
 8000860:	f00e fccc 	bl	800f1fc <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200815d4 	.word	0x200815d4
 8000870:	0802be50 	.word	0x0802be50
 8000874:	20083dd4 	.word	0x20083dd4
 8000878:	20083e08 	.word	0x20083e08
 800087c:	0802be64 	.word	0x0802be64
 8000880:	20084e08 	.word	0x20084e08

08000884 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	@ 0x38
 8000888:	af08      	add	r7, sp, #32
 800088a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	613b      	str	r3, [r7, #16]

  /* USER CODE END App_ThreadX_MEM_POOL */
  CHAR *pointer;

  /* Allocate the stack for tx app thread  */
  if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 8000894:	f107 010c 	add.w	r1, r7, #12
 8000898:	2300      	movs	r3, #0
 800089a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089e:	6938      	ldr	r0, [r7, #16]
 80008a0:	f00e f864 	bl	800e96c <_txe_byte_allocate>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <App_ThreadX_Init+0x2a>
                       TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 80008aa:	2302      	movs	r3, #2
 80008ac:	e01a      	b.n	80008e4 <App_ThreadX_Init+0x60>
  }
  /* Create tx app thread.  */
  if (tx_thread_create(&tx_app_thread, "tx app thread", tx_app_thread_entry, 0, pointer,
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	22b0      	movs	r2, #176	@ 0xb0
 80008b2:	9206      	str	r2, [sp, #24]
 80008b4:	2201      	movs	r2, #1
 80008b6:	9205      	str	r2, [sp, #20]
 80008b8:	2200      	movs	r2, #0
 80008ba:	9204      	str	r2, [sp, #16]
 80008bc:	220a      	movs	r2, #10
 80008be:	9203      	str	r2, [sp, #12]
 80008c0:	220a      	movs	r2, #10
 80008c2:	9202      	str	r2, [sp, #8]
 80008c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <App_ThreadX_Init+0x68>)
 80008d0:	4907      	ldr	r1, [pc, #28]	@ (80008f0 <App_ThreadX_Init+0x6c>)
 80008d2:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <App_ThreadX_Init+0x70>)
 80008d4:	f00e fb98 	bl	800f008 <_txe_thread_create>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <App_ThreadX_Init+0x5e>
                       TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 80008de:	230e      	movs	r3, #14
 80008e0:	e000      	b.n	80008e4 <App_ThreadX_Init+0x60>
  }

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008e2:	697b      	ldr	r3, [r7, #20]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	080008f9 	.word	0x080008f9
 80008f0:	0802be80 	.word	0x0802be80
 80008f4:	20084e3c 	.word	0x20084e3c

080008f8 <tx_app_thread_entry>:
  * @brief  Function implementing the tx_app_thread_entry thread.
  * @param  thread_input: Hardcoded to 0.
  * @retval None
  */
void tx_app_thread_entry(ULONG thread_input)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tx_app_thread_entry */
  /* USER CODE END tx_app_thread_entry */
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000910:	f00c fb4a 	bl	800cfa8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db12      	blt.n	8000950 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	490a      	ldr	r1, [pc, #40]	@ (800095c <__NVIC_DisableIRQ+0x44>)
 8000932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	3320      	adds	r3, #32
 8000940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000944:	f3bf 8f4f 	dsb	sy
}
 8000948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800094a:	f3bf 8f6f 	isb	sy
}
 800094e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000964:	f001 fe1e 	bl	80025a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000968:	f000 f81e 	bl	80009a8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800096c:	f000 f88e 	bl	8000a8c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 fcfe 	bl	8001370 <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000974:	f000 f968 	bl	8000c48 <MX_DSIHOST_DSI_Init>
  MX_ICACHE_Init();
 8000978:	f000 fac2 	bl	8000f00 <MX_ICACHE_Init>
  MX_LTDC_Init();
 800097c:	f000 facc 	bl	8000f18 <MX_LTDC_Init>
  MX_I2C5_Init();
 8000980:	f000 fa7e 	bl	8000e80 <MX_I2C5_Init>
  MX_RTC_Init();
 8000984:	f000 fc5a 	bl	800123c <MX_RTC_Init>
  MX_ADC1_Init();
 8000988:	f000 f88e 	bl	8000aa8 <MX_ADC1_Init>
  MX_UART4_Init();
 800098c:	f000 fca4 	bl	80012d8 <MX_UART4_Init>
  MX_CRC_Init();
 8000990:	f000 f8fa 	bl	8000b88 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000994:	f000 f91a 	bl	8000bcc <MX_DMA2D_Init>
  MX_GPU2D_Init();
 8000998:	f000 fa5e 	bl	8000e58 <MX_GPU2D_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800099c:	f00e fc26 	bl	800f1ec <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80009a0:	f7ff ffb4 	bl	800090c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <main+0x44>

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09e      	sub	sp, #120	@ 0x78
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	2260      	movs	r2, #96	@ 0x60
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f02a fc1f 	bl	802b1fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009cc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80009d0:	f006 f964 	bl	8006c9c <HAL_PWREx_ControlVoltageScaling>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x36>
  {
    Error_Handler();
 80009da:	f001 f833 	bl	8001a44 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009de:	f006 f94d 	bl	8006c7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 80009e2:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <SystemClock_Config+0xe0>)
 80009e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80009e8:	f023 0318 	bic.w	r3, r3, #24
 80009ec:	4a26      	ldr	r2, [pc, #152]	@ (8000a88 <SystemClock_Config+0xe0>)
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80009f6:	2307      	movs	r3, #7
 80009f8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a00:	2381      	movs	r3, #129	@ 0x81
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a12:	2303      	movs	r3, #3
 8000a14:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 5;
 8000a22:	2305      	movs	r3, #5
 8000a24:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 0318 	add.w	r3, r7, #24
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f006 fa2a 	bl	8006e94 <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a46:	f000 fffd 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	231f      	movs	r3, #31
 8000a4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	2104      	movs	r1, #4
 8000a66:	4618      	mov	r0, r3
 8000a68:	f007 f8f0 	bl	8007c4c <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a72:	f000 ffe7 	bl	8001a44 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a76:	f007 fc6b 	bl	8008350 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000a7a:	f00a fbe7 	bl	800b24c <HAL_RCCEx_EnableLSECSS>
}
 8000a7e:	bf00      	nop
 8000a80:	3778      	adds	r7, #120	@ 0x78
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	46020c00 	.word	0x46020c00

08000a8c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000a90:	f006 f9e0 	bl	8006e54 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000a94:	2002      	movs	r0, #2
 8000a96:	f006 f98d 	bl	8006db4 <HAL_PWREx_ConfigSupply>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000aa0:	f000 ffd0 	bl	8001a44 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	463b      	mov	r3, r7
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f02a fba0 	bl	802b1fa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aba:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000abc:	4a30      	ldr	r2, [pc, #192]	@ (8000b80 <MX_ADC1_Init+0xd8>)
 8000abe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000ac2:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 8000ac6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000ace:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad4:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ada:	4b28      	ldr	r3, [pc, #160]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae0:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000af4:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afa:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b36:	4811      	ldr	r0, [pc, #68]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b38:	f002 f91e 	bl	8002d78 <HAL_ADC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000b42:	f000 ff7f 	bl	8001a44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_ADC1_Init+0xdc>)
 8000b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_68CYCLES;
 8000b4e:	2305      	movs	r3, #5
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_ADC1_Init+0xd4>)
 8000b66:	f002 fee1 	bl	800392c <HAL_ADC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000b70:	f000 ff68 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20084eec 	.word	0x20084eec
 8000b80:	42028000 	.word	0x42028000
 8000b84:	20000100 	.word	0x20000100

08000b88 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <MX_CRC_Init+0x3c>)
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <MX_CRC_Init+0x40>)
 8000b90:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_CRC_Init+0x3c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <MX_CRC_Init+0x3c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_CRC_Init+0x3c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <MX_CRC_Init+0x3c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_CRC_Init+0x3c>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_CRC_Init+0x3c>)
 8000bb2:	f003 fe39 	bl	8004828 <HAL_CRC_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000bbc:	f000 ff42 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20084f78 	.word	0x20084f78
 8000bc8:	40023000 	.word	0x40023000

08000bcc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c44 <MX_DMA2D_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000c1a:	f003 fef7 	bl	8004a0c <HAL_DMA2D_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000c24:	f000 ff0e 	bl	8001a44 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_DMA2D_Init+0x74>)
 8000c2c:	f004 f860 	bl	8004cf0 <HAL_DMA2D_ConfigLayer>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f000 ff05 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20084f9c 	.word	0x20084f9c
 8000c44:	4002b000 	.word	0x4002b000

08000c48 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000c4e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c60:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c64:	2224      	movs	r2, #36	@ 0x24
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f02a fac6 	bl	802b1fa <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000c80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c84:	2234      	movs	r2, #52	@ 0x34
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f02a fab6 	bl	802b1fa <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	222c      	movs	r2, #44	@ 0x2c
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f02a fab0 	bl	802b1fa <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000c9c:	4a6d      	ldr	r2, [pc, #436]	@ (8000e54 <MX_DSIHOST_DSI_Init+0x20c>)
 8000c9e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000cac:	4b68      	ldr	r3, [pc, #416]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000cb2:	4b67      	ldr	r3, [pc, #412]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000cb4:	2208      	movs	r2, #8
 8000cb6:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000cb8:	4b65      	ldr	r3, [pc, #404]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000cbe:	237d      	movs	r3, #125	@ 0x7d
 8000cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000ce2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4859      	ldr	r0, [pc, #356]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000cea:	f004 fa01 	bl	80050f0 <HAL_DSI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000cf4:	f000 fea6 	bl	8001a44 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 20;
 8000cfc:	2314      	movs	r3, #20
 8000cfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 20;
 8000d02:	2314      	movs	r3, #20
 8000d04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 20;
 8000d08:	2314      	movs	r3, #20
 8000d0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 20;
 8000d0e:	2314      	movs	r3, #20
 8000d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 20;
 8000d14:	2314      	movs	r3, #20
 8000d16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 20;
 8000d20:	2314      	movs	r3, #20
 8000d22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 20;
 8000d26:	2314      	movs	r3, #20
 8000d28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d2c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d30:	4619      	mov	r1, r3
 8000d32:	4847      	ldr	r0, [pc, #284]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000d34:	f004 feda 	bl	8005aec <HAL_DSI_ConfigHostTimeouts>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000d3e:	f000 fe81 	bl	8001a44 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000d42:	230a      	movs	r3, #10
 8000d44:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 8000d56:	230a      	movs	r3, #10
 8000d58:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d5e:	4619      	mov	r1, r3
 8000d60:	483b      	ldr	r0, [pc, #236]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000d62:	f004 fe2d 	bl	80059c0 <HAL_DSI_ConfigPhyTimer>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000d6c:	f000 fe6a 	bl	8001a44 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d70:	2104      	movs	r1, #4
 8000d72:	4837      	ldr	r0, [pc, #220]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000d74:	f004 fdfc 	bl	8005970 <HAL_DSI_ConfigFlowControl>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000d7e:	f000 fe61 	bl	8001a44 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4832      	ldr	r0, [pc, #200]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000d86:	f004 fae9 	bl	800535c <HAL_DSI_ConfigErrorMonitor>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000d90:	f000 fe58 	bl	8001a44 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000d94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000da0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000da6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000dac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db0:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db6:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000db8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000dbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000dc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dc8:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000dca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000dce:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000dd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000dd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000de0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000de4:	4619      	mov	r1, r3
 8000de6:	481a      	ldr	r0, [pc, #104]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000de8:	f004 fd64 	bl	80058b4 <HAL_DSI_ConfigCommand>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_DSIHOST_DSI_Init+0x1ae>
  {
    Error_Handler();
 8000df2:	f000 fe27 	bl	8001a44 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000df6:	2305      	movs	r3, #5
 8000df8:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000dfa:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000dfe:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000e00:	2310      	movs	r3, #16
 8000e02:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	480a      	ldr	r0, [pc, #40]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000e26:	f004 fc6e 	bl	8005706 <HAL_DSI_ConfigAdaptedCommandMode>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_DSIHOST_DSI_Init+0x1ec>
  {
    Error_Handler();
 8000e30:	f000 fe08 	bl	8001a44 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e34:	2100      	movs	r1, #0
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <MX_DSIHOST_DSI_Init+0x208>)
 8000e38:	f004 fc3a 	bl	80056b0 <HAL_DSI_SetGenericVCID>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_DSIHOST_DSI_Init+0x1fe>
  {
    Error_Handler();
 8000e42:	f000 fdff 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	37b8      	adds	r7, #184	@ 0xb8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20085004 	.word	0x20085004
 8000e54:	40016c00 	.word	0x40016c00

08000e58 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_GPU2D_Init+0x20>)
 8000e5e:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <MX_GPU2D_Init+0x24>)
 8000e60:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_GPU2D_Init+0x20>)
 8000e64:	f005 fa0e 	bl	8006284 <HAL_GPU2D_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000e6e:	f000 fde9 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20085028 	.word	0x20085028
 8000e7c:	4002f000 	.word	0x4002f000

08000e80 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000e86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <MX_I2C5_Init+0x78>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x30909DEC;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <MX_I2C5_Init+0x7c>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000eba:	480e      	ldr	r0, [pc, #56]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000ebc:	f005 fa58 	bl	8006370 <HAL_I2C_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8000ec6:	f000 fdbd 	bl	8001a44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4809      	ldr	r0, [pc, #36]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000ece:	f005 faea 	bl	80064a6 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 fdb4 	bl	8001a44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_I2C5_Init+0x74>)
 8000ee0:	f005 fb2c 	bl	800653c <HAL_I2CEx_ConfigDigitalFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 fdab 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20085034 	.word	0x20085034
 8000ef8:	40009800 	.word	0x40009800
 8000efc:	30909dec 	.word	0x30909dec

08000f00 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000f04:	f005 fb66 	bl	80065d4 <HAL_ICACHE_Enable>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000f0e:	f000 fd99 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b09e      	sub	sp, #120	@ 0x78
 8000f1c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f22:	2234      	movs	r2, #52	@ 0x34
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f02a f967 	bl	802b1fa <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f2c:	4bbc      	ldr	r3, [pc, #752]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f2e:	4abd      	ldr	r2, [pc, #756]	@ (8001224 <MX_LTDC_Init+0x30c>)
 8000f30:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f32:	4bbb      	ldr	r3, [pc, #748]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f38:	4bb9      	ldr	r3, [pc, #740]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f3e:	4bb8      	ldr	r3, [pc, #736]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f44:	4bb6      	ldr	r3, [pc, #728]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000f4a:	4bb5      	ldr	r3, [pc, #724]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000f50:	4bb3      	ldr	r3, [pc, #716]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8000f56:	4bb2      	ldr	r3, [pc, #712]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8000f5c:	4bb0      	ldr	r3, [pc, #704]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8000f62:	4baf      	ldr	r3, [pc, #700]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f64:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8000f6a:	4bad      	ldr	r3, [pc, #692]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f6c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 416;
 8000f72:	4bab      	ldr	r3, [pc, #684]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f74:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 416;
 8000f7a:	4ba9      	ldr	r3, [pc, #676]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f7c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000f80:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f82:	4ba7      	ldr	r3, [pc, #668]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f8a:	4ba5      	ldr	r3, [pc, #660]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 255;
 8000f92:	4ba3      	ldr	r3, [pc, #652]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f94:	22ff      	movs	r2, #255	@ 0xff
 8000f96:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f9a:	48a1      	ldr	r0, [pc, #644]	@ (8001220 <MX_LTDC_Init+0x308>)
 8000f9c:	f005 fb2a 	bl	80065f4 <HAL_LTDC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000fa6:	f000 fd4d 	bl	8001a44 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowX1 = 416;
 8000fae:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY0 = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.WindowY1 = 416;
 8000fb8:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000fbc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha = 255;
 8000fc2:	23ff      	movs	r3, #255	@ 0xff
 8000fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.Alpha0 = 255;
 8000fc6:	23ff      	movs	r3, #255	@ 0xff
 8000fc8:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fce:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000fd4:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageWidth = 416;
 8000fda:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000fde:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.ImageHeight = 416;
 8000fe0:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000fe4:	667b      	str	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Blue = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
  pLayerCfg.Backcolor.Green = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
  pLayerCfg.Backcolor.Red = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ff8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4887      	ldr	r0, [pc, #540]	@ (8001220 <MX_LTDC_Init+0x308>)
 8001002:	f005 fc89 	bl	8006918 <HAL_LTDC_ConfigLayer>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 800100c:	f000 fd1a 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	__HAL_LTDC_DISABLE(&hltdc);
 8001010:	4b83      	ldr	r3, [pc, #524]	@ (8001220 <MX_LTDC_Init+0x308>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	4b82      	ldr	r3, [pc, #520]	@ (8001220 <MX_LTDC_Init+0x308>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0201 	bic.w	r2, r2, #1
 800101e:	619a      	str	r2, [r3, #24]
	HAL_DSI_Start(&hdsi);
 8001020:	4881      	ldr	r0, [pc, #516]	@ (8001228 <MX_LTDC_Init+0x310>)
 8001022:	f004 fe29 	bl	8005c78 <HAL_DSI_Start>

	NVIC_DisableIRQ(DSI_IRQn);
 8001026:	2089      	movs	r0, #137	@ 0x89
 8001028:	f7ff fc76 	bl	8000918 <__NVIC_DisableIRQ>

	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2140      	movs	r1, #64	@ 0x40
 8001030:	487e      	ldr	r0, [pc, #504]	@ (800122c <MX_LTDC_Init+0x314>)
 8001032:	f005 f90f 	bl	8006254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_EN_GPIO_Port,SD_EN_Pin, RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2180      	movs	r1, #128	@ 0x80
 800103a:	487c      	ldr	r0, [pc, #496]	@ (800122c <MX_LTDC_Init+0x314>)
 800103c:	f005 f90a 	bl	8006254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WL_BT_PWR_EN_GPIO_Port, WL_BT_PWR_EN_Pin, RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001046:	487a      	ldr	r0, [pc, #488]	@ (8001230 <MX_LTDC_Init+0x318>)
 8001048:	f005 f904 	bl	8006254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2108      	movs	r1, #8
 8001050:	4877      	ldr	r0, [pc, #476]	@ (8001230 <MX_LTDC_Init+0x318>)
 8001052:	f005 f8ff 	bl	8006254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800105c:	4875      	ldr	r0, [pc, #468]	@ (8001234 <MX_LTDC_Init+0x31c>)
 800105e:	f005 f8f9 	bl	8006254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2108      	movs	r1, #8
 8001066:	4871      	ldr	r0, [pc, #452]	@ (800122c <MX_LTDC_Init+0x314>)
 8001068:	f005 f8f4 	bl	8006254 <HAL_GPIO_WritePin>

	// Turn on display power AVDD
	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2140      	movs	r1, #64	@ 0x40
 8001070:	486e      	ldr	r0, [pc, #440]	@ (800122c <MX_LTDC_Init+0x314>)
 8001072:	f005 f8ef 	bl	8006254 <HAL_GPIO_WritePin>

	// Reset the display
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2108      	movs	r1, #8
 800107a:	486d      	ldr	r0, [pc, #436]	@ (8001230 <MX_LTDC_Init+0x318>)
 800107c:	f005 f8ea 	bl	8006254 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f001 fadf 	bl	8002644 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2108      	movs	r1, #8
 800108a:	4869      	ldr	r0, [pc, #420]	@ (8001230 <MX_LTDC_Init+0x318>)
 800108c:	f005 f8e2 	bl	8006254 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001090:	2001      	movs	r0, #1
 8001092:	f001 fad7 	bl	8002644 <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2108      	movs	r1, #8
 800109a:	4865      	ldr	r0, [pc, #404]	@ (8001230 <MX_LTDC_Init+0x318>)
 800109c:	f005 f8da 	bl	8006254 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80010a0:	2032      	movs	r0, #50	@ 0x32
 80010a2:	f001 facf 	bl	8002644 <HAL_Delay>

	HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	UNUSED(status);

	// Exit sleep
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80010ac:	2300      	movs	r3, #0
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2311      	movs	r3, #17
 80010b2:	2205      	movs	r2, #5
 80010b4:	2100      	movs	r1, #0
 80010b6:	485c      	ldr	r0, [pc, #368]	@ (8001228 <MX_LTDC_Init+0x310>)
 80010b8:	f004 fe3b 	bl	8005d32 <HAL_DSI_ShortWrite>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	@ 0x64
 80010c4:	f001 fabe 	bl	8002644 <HAL_Delay>

	uint8_t caset_data[4] = {0x00, 0x1E, 0x01, 0xBD};
 80010c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001238 <MX_LTDC_Init+0x320>)
 80010ca:	637b      	str	r3, [r7, #52]	@ 0x34
	status = HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0x2A, caset_data);
 80010cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	232a      	movs	r3, #42	@ 0x2a
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2304      	movs	r3, #4
 80010d8:	2239      	movs	r2, #57	@ 0x39
 80010da:	2100      	movs	r1, #0
 80010dc:	4852      	ldr	r0, [pc, #328]	@ (8001228 <MX_LTDC_Init+0x310>)
 80010de:	f004 fe4a 	bl	8005d76 <HAL_DSI_LongWrite>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2B, 0x00);
 80010e8:	2300      	movs	r3, #0
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	232b      	movs	r3, #43	@ 0x2b
 80010ee:	2215      	movs	r2, #21
 80010f0:	2100      	movs	r1, #0
 80010f2:	484d      	ldr	r0, [pc, #308]	@ (8001228 <MX_LTDC_Init+0x310>)
 80010f4:	f004 fe1d 	bl	8005d32 <HAL_DSI_ShortWrite>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_Delay(100);
 80010fe:	2064      	movs	r0, #100	@ 0x64
 8001100:	f001 faa0 	bl	8002644 <HAL_Delay>

	// Inversion on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x21, 0x00);
 8001104:	2300      	movs	r3, #0
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2321      	movs	r3, #33	@ 0x21
 800110a:	2205      	movs	r2, #5
 800110c:	2100      	movs	r1, #0
 800110e:	4846      	ldr	r0, [pc, #280]	@ (8001228 <MX_LTDC_Init+0x310>)
 8001110:	f004 fe0f 	bl	8005d32 <HAL_DSI_ShortWrite>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f001 fa92 	bl	8002644 <HAL_Delay>

	// Set normal display mode
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x13, 0x00);
 8001120:	2300      	movs	r3, #0
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2313      	movs	r3, #19
 8001126:	2205      	movs	r2, #5
 8001128:	2100      	movs	r1, #0
 800112a:	483f      	ldr	r0, [pc, #252]	@ (8001228 <MX_LTDC_Init+0x310>)
 800112c:	f004 fe01 	bl	8005d32 <HAL_DSI_ShortWrite>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f001 fa84 	bl	8002644 <HAL_Delay>

	// Set brightness to max
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x51, 0xFF);
 800113c:	23ff      	movs	r3, #255	@ 0xff
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2351      	movs	r3, #81	@ 0x51
 8001142:	2215      	movs	r2, #21
 8001144:	2100      	movs	r1, #0
 8001146:	4838      	ldr	r0, [pc, #224]	@ (8001228 <MX_LTDC_Init+0x310>)
 8001148:	f004 fdf3 	bl	8005d32 <HAL_DSI_ShortWrite>
 800114c:	4603      	mov	r3, r0
 800114e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_Delay(100);
 8001152:	2064      	movs	r0, #100	@ 0x64
 8001154:	f001 fa76 	bl	8002644 <HAL_Delay>

	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2B, 0x00);
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	232b      	movs	r3, #43	@ 0x2b
 800115e:	2215      	movs	r2, #21
 8001160:	2100      	movs	r1, #0
 8001162:	4831      	ldr	r0, [pc, #196]	@ (8001228 <MX_LTDC_Init+0x310>)
 8001164:	f004 fde5 	bl	8005d32 <HAL_DSI_ShortWrite>
 8001168:	4603      	mov	r3, r0
 800116a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_Delay(100);
 800116e:	2064      	movs	r0, #100	@ 0x64
 8001170:	f001 fa68 	bl	8002644 <HAL_Delay>

	// Inversion off
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x20, 0x00);
 8001174:	2300      	movs	r3, #0
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2320      	movs	r3, #32
 800117a:	2205      	movs	r2, #5
 800117c:	2100      	movs	r1, #0
 800117e:	482a      	ldr	r0, [pc, #168]	@ (8001228 <MX_LTDC_Init+0x310>)
 8001180:	f004 fdd7 	bl	8005d32 <HAL_DSI_ShortWrite>
 8001184:	4603      	mov	r3, r0
 8001186:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_Delay(1000);
 800118a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800118e:	f001 fa59 	bl	8002644 <HAL_Delay>

	// Tearing on
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x02);
 8001192:	2302      	movs	r3, #2
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2335      	movs	r3, #53	@ 0x35
 8001198:	2215      	movs	r2, #21
 800119a:	2100      	movs	r1, #0
 800119c:	4822      	ldr	r0, [pc, #136]	@ (8001228 <MX_LTDC_Init+0x310>)
 800119e:	f004 fdc8 	bl	8005d32 <HAL_DSI_ShortWrite>

	// Display on
    HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
 80011a2:	2300      	movs	r3, #0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2329      	movs	r3, #41	@ 0x29
 80011a8:	2215      	movs	r2, #21
 80011aa:	2100      	movs	r1, #0
 80011ac:	481e      	ldr	r0, [pc, #120]	@ (8001228 <MX_LTDC_Init+0x310>)
 80011ae:	f004 fdc0 	bl	8005d32 <HAL_DSI_ShortWrite>

    // Set to high speed mode. TODO: Make this work
    DSI_LPCmdTypeDef LPCmd = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2234      	movs	r2, #52	@ 0x34
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f02a f81e 	bl	802b1fa <memset>
    LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80011be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30

    LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	603b      	str	r3, [r7, #0]
    LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
    LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
    LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
    LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
    LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
    LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
    LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
//    LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
//    LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
//    LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
//    LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;

    if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	@ (8001228 <MX_LTDC_Init+0x310>)
 80011fa:	f004 fb5b 	bl	80058b4 <HAL_DSI_ConfigCommand>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_LTDC_Init+0x2f0>
    {
      Error_Handler();
 8001204:	f000 fc1e 	bl	8001a44 <Error_Handler>
    }

	__HAL_LTDC_ENABLE(&hltdc);
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <MX_LTDC_Init+0x308>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <MX_LTDC_Init+0x308>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	619a      	str	r2, [r3, #24]
  /* USER CODE END LTDC_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3770      	adds	r7, #112	@ 0x70
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20085088 	.word	0x20085088
 8001224:	40016800 	.word	0x40016800
 8001228:	20085004 	.word	0x20085004
 800122c:	42021000 	.word	0x42021000
 8001230:	42021c00 	.word	0x42021c00
 8001234:	42020c00 	.word	0x42020c00
 8001238:	bd011e00 	.word	0xbd011e00

0800123c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <MX_RTC_Init+0x94>)
 8001256:	4a1f      	ldr	r2, [pc, #124]	@ (80012d4 <MX_RTC_Init+0x98>)
 8001258:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_RTC_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_RTC_Init+0x94>)
 8001262:	227f      	movs	r2, #127	@ 0x7f
 8001264:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_RTC_Init+0x94>)
 8001268:	22ff      	movs	r2, #255	@ 0xff
 800126a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_RTC_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_RTC_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_RTC_Init+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800127e:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_RTC_Init+0x94>)
 8001280:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001284:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001286:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_RTC_Init+0x94>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <MX_RTC_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001292:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <MX_RTC_Init+0x94>)
 8001294:	f00a f91c 	bl	800b4d0 <HAL_RTC_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800129e:	f000 fbd1 	bl	8001a44 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <MX_RTC_Init+0x94>)
 80012b8:	f00a fa38 	bl	800b72c <HAL_RTCEx_PrivilegeModeSet>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80012c2:	f000 fbbf 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20085130 	.word	0x20085130
 80012d4:	46007800 	.word	0x46007800

080012d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <MX_UART4_Init+0x90>)
 80012de:	4a23      	ldr	r2, [pc, #140]	@ (800136c <MX_UART4_Init+0x94>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <MX_UART4_Init+0x90>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <MX_UART4_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <MX_UART4_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <MX_UART4_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_UART4_Init+0x90>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <MX_UART4_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_UART4_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <MX_UART4_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_UART4_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_UART4_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001320:	4811      	ldr	r0, [pc, #68]	@ (8001368 <MX_UART4_Init+0x90>)
 8001322:	f00a fdf7 	bl	800bf14 <HAL_UART_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800132c:	f000 fb8a 	bl	8001a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_UART4_Init+0x90>)
 8001334:	f00b fa44 	bl	800c7c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800133e:	f000 fb81 	bl	8001a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4808      	ldr	r0, [pc, #32]	@ (8001368 <MX_UART4_Init+0x90>)
 8001346:	f00b fa79 	bl	800c83c <HAL_UARTEx_SetRxFifoThreshold>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001350:	f000 fb78 	bl	8001a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_UART4_Init+0x90>)
 8001356:	f00b f9fa 	bl	800c74e <HAL_UARTEx_DisableFifoMode>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 fb70 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20085160 	.word	0x20085160
 800136c:	40004c00 	.word	0x40004c00

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08e      	sub	sp, #56	@ 0x38
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4bbf      	ldr	r3, [pc, #764]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800138c:	4abd      	ldr	r2, [pc, #756]	@ (8001684 <MX_GPIO_Init+0x314>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001396:	4bbb      	ldr	r3, [pc, #748]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
 80013a2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a4:	4bb7      	ldr	r3, [pc, #732]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013aa:	4ab6      	ldr	r2, [pc, #728]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013b4:	4bb3      	ldr	r3, [pc, #716]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c2:	4bb0      	ldr	r3, [pc, #704]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c8:	4aae      	ldr	r2, [pc, #696]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013d2:	4bac      	ldr	r3, [pc, #688]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4ba8      	ldr	r3, [pc, #672]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e6:	4aa7      	ldr	r2, [pc, #668]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f0:	4ba4      	ldr	r3, [pc, #656]	@ (8001684 <MX_GPIO_Init+0x314>)
 80013f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4ba1      	ldr	r3, [pc, #644]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001404:	4a9f      	ldr	r2, [pc, #636]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800140e:	4b9d      	ldr	r3, [pc, #628]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141c:	4b99      	ldr	r3, [pc, #612]	@ (8001684 <MX_GPIO_Init+0x314>)
 800141e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001422:	4a98      	ldr	r2, [pc, #608]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800142c:	4b95      	ldr	r3, [pc, #596]	@ (8001684 <MX_GPIO_Init+0x314>)
 800142e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b92      	ldr	r3, [pc, #584]	@ (8001684 <MX_GPIO_Init+0x314>)
 800143c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001440:	4a90      	ldr	r2, [pc, #576]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800144a:	4b8e      	ldr	r3, [pc, #568]	@ (8001684 <MX_GPIO_Init+0x314>)
 800144c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001458:	4b8a      	ldr	r3, [pc, #552]	@ (8001684 <MX_GPIO_Init+0x314>)
 800145a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145e:	4a89      	ldr	r2, [pc, #548]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001468:	4b86      	ldr	r3, [pc, #536]	@ (8001684 <MX_GPIO_Init+0x314>)
 800146a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001476:	4b83      	ldr	r3, [pc, #524]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147c:	4a81      	ldr	r2, [pc, #516]	@ (8001684 <MX_GPIO_Init+0x314>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001482:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001486:	4b7f      	ldr	r3, [pc, #508]	@ (8001684 <MX_GPIO_Init+0x314>)
 8001488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f24a 0108 	movw	r1, #40968	@ 0xa008
 800149a:	487b      	ldr	r0, [pc, #492]	@ (8001688 <MX_GPIO_Init+0x318>)
 800149c:	f004 feda 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80014a6:	4879      	ldr	r0, [pc, #484]	@ (800168c <MX_GPIO_Init+0x31c>)
 80014a8:	f004 fed4 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	21c8      	movs	r1, #200	@ 0xc8
 80014b0:	4877      	ldr	r0, [pc, #476]	@ (8001690 <MX_GPIO_Init+0x320>)
 80014b2:	f004 fecf 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2107      	movs	r1, #7
 80014ba:	4876      	ldr	r0, [pc, #472]	@ (8001694 <MX_GPIO_Init+0x324>)
 80014bc:	f004 feca 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2104      	movs	r1, #4
 80014c4:	4874      	ldr	r0, [pc, #464]	@ (8001698 <MX_GPIO_Init+0x328>)
 80014c6:	f004 fec5 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2104      	movs	r1, #4
 80014ce:	4873      	ldr	r0, [pc, #460]	@ (800169c <MX_GPIO_Init+0x32c>)
 80014d0:	f004 fec0 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOUCH_RST_Pin|LRA_EN_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4141 	mov.w	r1, #49408	@ 0xc100
 80014da:	4871      	ldr	r0, [pc, #452]	@ (80016a0 <MX_GPIO_Init+0x330>)
 80014dc:	f004 feba 	bl	8006254 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 80014e0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e6:	2312      	movs	r3, #18
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f2:	2304      	movs	r3, #4
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4869      	ldr	r0, [pc, #420]	@ (80016a4 <MX_GPIO_Init+0x334>)
 80014fe:	f004 fcd1 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_RST_Pin WL_BT_PWR_EN_Pin FLASH_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin;
 8001502:	f24a 0308 	movw	r3, #40968	@ 0xa008
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	485b      	ldr	r0, [pc, #364]	@ (8001688 <MX_GPIO_Init+0x318>)
 800151c:	f004 fcc2 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_14;
 8001520:	f244 0318 	movw	r3, #16408	@ 0x4018
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152e:	2302      	movs	r3, #2
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC2;
 8001532:	230c      	movs	r3, #12
 8001534:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	4859      	ldr	r0, [pc, #356]	@ (80016a4 <MX_GPIO_Init+0x334>)
 800153e:	f004 fcb1 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_WAKEUP_Pin GNSS_RST_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin;
 8001542:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	484c      	ldr	r0, [pc, #304]	@ (800168c <MX_GPIO_Init+0x31c>)
 800155c:	f004 fca2 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_PPS_Pin ALS_INT_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin|ALS_INT_Pin;
 8001560:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	4b50      	ldr	r3, [pc, #320]	@ (80016a8 <MX_GPIO_Init+0x338>)
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4845      	ldr	r0, [pc, #276]	@ (800168c <MX_GPIO_Init+0x31c>)
 8001576:	f004 fc95 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800157a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158c:	2307      	movs	r3, #7
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	483d      	ldr	r0, [pc, #244]	@ (800168c <MX_GPIO_Init+0x31c>)
 8001598:	f004 fc84 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800159c:	23c0      	movs	r3, #192	@ 0xc0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a8:	2302      	movs	r3, #2
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80015ac:	230b      	movs	r3, #11
 80015ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	483a      	ldr	r0, [pc, #232]	@ (80016a0 <MX_GPIO_Init+0x330>)
 80015b8:	f004 fc74 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 80015bc:	2338      	movs	r3, #56	@ 0x38
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015cc:	2307      	movs	r3, #7
 80015ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4832      	ldr	r0, [pc, #200]	@ (80016a0 <MX_GPIO_Init+0x330>)
 80015d8:	f004 fc64 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC10 PC11 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 80015dc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ea:	2302      	movs	r3, #2
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015ee:	230c      	movs	r3, #12
 80015f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	4828      	ldr	r0, [pc, #160]	@ (800169c <MX_GPIO_Init+0x32c>)
 80015fa:	f004 fc53 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_INT_Pin SWIRE_IN_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin|SWIRE_IN_Pin;
 80015fe:	2305      	movs	r3, #5
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	481f      	ldr	r0, [pc, #124]	@ (8001690 <MX_GPIO_Init+0x320>)
 8001612:	f004 fc47 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RST_Pin AVDDEN_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin;
 8001616:	23c8      	movs	r3, #200	@ 0xc8
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4818      	ldr	r0, [pc, #96]	@ (8001690 <MX_GPIO_Init+0x320>)
 800162e:	f004 fc39 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2302      	movs	r3, #2
 8001642:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001644:	2308      	movs	r3, #8
 8001646:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <MX_GPIO_Init+0x334>)
 8001650:	f004 fc28 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001654:	2320      	movs	r3, #32
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001664:	2303      	movs	r3, #3
 8001666:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <MX_GPIO_Init+0x334>)
 8001670:	f004 fc18 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001674:	2304      	movs	r3, #4
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001680:	e014      	b.n	80016ac <MX_GPIO_Init+0x33c>
 8001682:	bf00      	nop
 8001684:	46020c00 	.word	0x46020c00
 8001688:	42021c00 	.word	0x42021c00
 800168c:	42021800 	.word	0x42021800
 8001690:	42021000 	.word	0x42021000
 8001694:	42022000 	.word	0x42022000
 8001698:	42021400 	.word	0x42021400
 800169c:	42020800 	.word	0x42020800
 80016a0:	42020c00 	.word	0x42020c00
 80016a4:	42020400 	.word	0x42020400
 80016a8:	10110000 	.word	0x10110000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ac:	2302      	movs	r3, #2
 80016ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016b0:	230c      	movs	r3, #12
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	48ba      	ldr	r0, [pc, #744]	@ (80019a4 <MX_GPIO_Init+0x634>)
 80016bc:	f004 fbf2 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = SWIRE_OUT_Pin;
 80016c0:	2310      	movs	r3, #16
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016c8:	2302      	movs	r3, #2
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SWIRE_OUT_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	48b5      	ldr	r0, [pc, #724]	@ (80019a8 <MX_GPIO_Init+0x638>)
 80016d4:	f004 fbe6 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|MAG_INT_Pin;
 80016d8:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016de:	4bb3      	ldr	r3, [pc, #716]	@ (80019ac <MX_GPIO_Init+0x63c>)
 80016e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	48ae      	ldr	r0, [pc, #696]	@ (80019a8 <MX_GPIO_Init+0x638>)
 80016ee:	f004 fbd9 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001704:	2303      	movs	r3, #3
 8001706:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	48a8      	ldr	r0, [pc, #672]	@ (80019b0 <MX_GPIO_Init+0x640>)
 8001710:	f004 fbc8 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001714:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172a:	4619      	mov	r1, r3
 800172c:	48a0      	ldr	r0, [pc, #640]	@ (80019b0 <MX_GPIO_Init+0x640>)
 800172e:	f004 fbb9 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001732:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	2302      	movs	r3, #2
 8001742:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC2;
 8001744:	2308      	movs	r3, #8
 8001746:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	4898      	ldr	r0, [pc, #608]	@ (80019b0 <MX_GPIO_Init+0x640>)
 8001750:	f004 fba8 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin FLASH_RSTO_Pin FLASH_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|FLASH_RSTO_Pin|FLASH_INT_Pin;
 8001754:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175a:	4b94      	ldr	r3, [pc, #592]	@ (80019ac <MX_GPIO_Init+0x63c>)
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4892      	ldr	r0, [pc, #584]	@ (80019b4 <MX_GPIO_Init+0x644>)
 800176a:	f004 fb9b 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800176e:	2303      	movs	r3, #3
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001772:	2312      	movs	r3, #18
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 800177e:	2302      	movs	r3, #2
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	488b      	ldr	r0, [pc, #556]	@ (80019b8 <MX_GPIO_Init+0x648>)
 800178a:	f004 fb8b 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DEV_WAKE_Pin BT_EN_Pin WL_EN_Pin */
  GPIO_InitStruct.Pin = BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin;
 800178e:	2307      	movs	r3, #7
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4885      	ldr	r0, [pc, #532]	@ (80019bc <MX_GPIO_Init+0x64c>)
 80017a6:	f004 fb7d 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = BT_HOST_WAKE_Pin;
 80017aa:	2308      	movs	r3, #8
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ae:	4b7f      	ldr	r3, [pc, #508]	@ (80019ac <MX_GPIO_Init+0x63c>)
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BT_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	487f      	ldr	r0, [pc, #508]	@ (80019bc <MX_GPIO_Init+0x64c>)
 80017be:	f004 fb71 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 80017c2:	2304      	movs	r3, #4
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	4877      	ldr	r0, [pc, #476]	@ (80019b8 <MX_GPIO_Init+0x648>)
 80017da:	f004 fb63 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 80017de:	2304      	movs	r3, #4
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	486f      	ldr	r0, [pc, #444]	@ (80019b4 <MX_GPIO_Init+0x644>)
 80017f6:	f004 fb55 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = WL_HOST_WAKE_Pin;
 80017fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001800:	4b6a      	ldr	r3, [pc, #424]	@ (80019ac <MX_GPIO_Init+0x63c>)
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(WL_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180c:	4619      	mov	r1, r3
 800180e:	486c      	ldr	r0, [pc, #432]	@ (80019c0 <MX_GPIO_Init+0x650>)
 8001810:	f004 fb48 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001814:	f240 4304 	movw	r3, #1028	@ 0x404
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001826:	230a      	movs	r3, #10
 8001828:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4864      	ldr	r0, [pc, #400]	@ (80019c4 <MX_GPIO_Init+0x654>)
 8001832:	f004 fb37 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800183c:	2311      	movs	r3, #17
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	4855      	ldr	r0, [pc, #340]	@ (80019a4 <MX_GPIO_Init+0x634>)
 8001850:	f004 fb28 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9;
 8001854:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001866:	2305      	movs	r3, #5
 8001868:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	4853      	ldr	r0, [pc, #332]	@ (80019c0 <MX_GPIO_Init+0x650>)
 8001872:	f004 fb17 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001876:	2301      	movs	r3, #1
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001886:	2305      	movs	r3, #5
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188e:	4619      	mov	r1, r3
 8001890:	484c      	ldr	r0, [pc, #304]	@ (80019c4 <MX_GPIO_Init+0x654>)
 8001892:	f004 fb07 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001896:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80018a8:	2303      	movs	r3, #3
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	483d      	ldr	r0, [pc, #244]	@ (80019a8 <MX_GPIO_Init+0x638>)
 80018b4:	f004 faf6 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE13 PE11
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
 80018b8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80018ca:	230a      	movs	r3, #10
 80018cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4834      	ldr	r0, [pc, #208]	@ (80019a8 <MX_GPIO_Init+0x638>)
 80018d6:	f004 fae5 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80018da:	2303      	movs	r3, #3
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018de:	2312      	movs	r3, #18
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ea:	2304      	movs	r3, #4
 80018ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	482f      	ldr	r0, [pc, #188]	@ (80019b4 <MX_GPIO_Init+0x644>)
 80018f6:	f004 fad5 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 80018fa:	23e0      	movs	r3, #224	@ 0xe0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190a:	2305      	movs	r3, #5
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	4826      	ldr	r0, [pc, #152]	@ (80019b0 <MX_GPIO_Init+0x640>)
 8001916:	f004 fac5 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 800191a:	2301      	movs	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192a:	4619      	mov	r1, r3
 800192c:	4826      	ldr	r0, [pc, #152]	@ (80019c8 <MX_GPIO_Init+0x658>)
 800192e:	f004 fab9 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001932:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001938:	2312      	movs	r3, #18
 800193a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001944:	2304      	movs	r3, #4
 8001946:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194c:	4619      	mov	r1, r3
 800194e:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <MX_GPIO_Init+0x634>)
 8001950:	f004 faa8 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_INT_Pin TOUCH_INT_Pin HR_INT_Pin */
  GPIO_InitStruct.Pin = PWR_INT_Pin|TOUCH_INT_Pin|HR_INT_Pin;
 8001954:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_GPIO_Init+0x63c>)
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <MX_GPIO_Init+0x634>)
 800196a:	f004 fa9b 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800196e:	2304      	movs	r3, #4
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001972:	2303      	movs	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800197e:	4619      	mov	r1, r3
 8001980:	480b      	ldr	r0, [pc, #44]	@ (80019b0 <MX_GPIO_Init+0x640>)
 8001982:	f004 fa8f 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001986:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198c:	2312      	movs	r3, #18
 800198e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001998:	2304      	movs	r3, #4
 800199a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a0:	4619      	mov	r1, r3
 80019a2:	e013      	b.n	80019cc <MX_GPIO_Init+0x65c>
 80019a4:	42020c00 	.word	0x42020c00
 80019a8:	42021000 	.word	0x42021000
 80019ac:	10110000 	.word	0x10110000
 80019b0:	42020000 	.word	0x42020000
 80019b4:	42020800 	.word	0x42020800
 80019b8:	42021400 	.word	0x42021400
 80019bc:	42022000 	.word	0x42022000
 80019c0:	42021c00 	.word	0x42021c00
 80019c4:	42020400 	.word	0x42020400
 80019c8:	42021800 	.word	0x42021800
 80019cc:	4811      	ldr	r0, [pc, #68]	@ (8001a14 <MX_GPIO_Init+0x6a4>)
 80019ce:	f004 fa69 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LRA_EN_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin|PWR_ENCHG_Pin;
 80019d2:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e8:	4619      	mov	r1, r3
 80019ea:	480b      	ldr	r0, [pc, #44]	@ (8001a18 <MX_GPIO_Init+0x6a8>)
 80019ec:	f004 fa5a 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80019f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_GPIO_Init+0x6ac>)
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <MX_GPIO_Init+0x6a4>)
 8001a06:	f004 fa4d 	bl	8005ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0a:	bf00      	nop
 8001a0c:	3738      	adds	r7, #56	@ 0x38
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	42020400 	.word	0x42020400
 8001a18:	42020c00 	.word	0x42020c00
 8001a1c:	10110000 	.word	0x10110000

08001a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a32:	f000 fde7 	bl	8002604 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40001000 	.word	0x40001000

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <Error_Handler+0x8>

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <HAL_MspInit+0x70>)
 8001a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ac0 <HAL_MspInit+0x70>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a66:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <HAL_MspInit+0x70>)
 8001a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001a74:	f005 f9fe 	bl	8006e74 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2009      	movs	r0, #9
 8001a7e:	f002 fe53 	bl	8004728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a82:	2009      	movs	r0, #9
 8001a84:	f002 fe6a 	bl	800475c <HAL_NVIC_EnableIRQ>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_MspInit+0x70>)
 8001a8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac0 <HAL_MspInit+0x70>)
 8001a90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a94:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_MspInit+0x70>)
 8001a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f000 fdf0 	bl	800268c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001aac:	f000 fe16 	bl	80026dc <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f000 fdff 	bl	80026b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	46020c00 	.word	0x46020c00

08001ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0c4      	sub	sp, #272	@ 0x110
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ace:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ad2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	22e0      	movs	r2, #224	@ 0xe0
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f029 fb84 	bl	802b1fa <memset>
  if(hadc->Instance==ADC1)
 8001af2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001af6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a53      	ldr	r2, [pc, #332]	@ (8001c4c <HAL_ADC_MspInit+0x188>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	f040 809d 	bne.w	8001c40 <HAL_ADC_MspInit+0x17c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001b06:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001b12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b1a:	f107 0318 	add.w	r3, r7, #24
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f006 fcc8 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_ADC_MspInit+0x6a>
    {
      Error_Handler();
 8001b2a:	f7ff ff8b 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b2e:	4b48      	ldr	r3, [pc, #288]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b34:	4a46      	ldr	r2, [pc, #280]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b3e:	4b44      	ldr	r3, [pc, #272]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4c:	4b40      	ldr	r3, [pc, #256]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b52:	4a3f      	ldr	r2, [pc, #252]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b62:	f003 0204 	and.w	r2, r3, #4
 8001b66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b6a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b78:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	4b35      	ldr	r3, [pc, #212]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b80:	4a33      	ldr	r2, [pc, #204]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b8a:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b90:	f003 0201 	and.w	r2, r3, #1
 8001b94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ba6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba8:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bae:	4a28      	ldr	r2, [pc, #160]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_ADC_MspInit+0x18c>)
 8001bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bbe:	f003 0202 	and.w	r2, r3, #2
 8001bc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bd4:	681b      	ldr	r3, [r3, #0]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ELVSS_ADC_Pin;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ELVSS_ADC_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001bec:	4619      	mov	r1, r3
 8001bee:	4819      	ldr	r0, [pc, #100]	@ (8001c54 <HAL_ADC_MspInit+0x190>)
 8001bf0:	f004 f958 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ELVDD_ADC_Pin|AVDD_ADC_Pin;
 8001bf4:	2318      	movs	r3, #24
 8001bf6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4812      	ldr	r0, [pc, #72]	@ (8001c58 <HAL_ADC_MspInit+0x194>)
 8001c0e:	f004 f949 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISYS_ADC_Pin;
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ISYS_ADC_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <HAL_ADC_MspInit+0x198>)
 8001c2c:	f004 f93a 	bl	8005ea4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2025      	movs	r0, #37	@ 0x25
 8001c36:	f002 fd77 	bl	8004728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c3a:	2025      	movs	r0, #37	@ 0x25
 8001c3c:	f002 fd8e 	bl	800475c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	42028000 	.word	0x42028000
 8001c50:	46020c00 	.word	0x46020c00
 8001c54:	42020800 	.word	0x42020800
 8001c58:	42020000 	.word	0x42020000
 8001c5c:	42020400 	.word	0x42020400

08001c60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c9c <HAL_CRC_MspInit+0x3c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d10e      	bne.n	8001c90 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_CRC_MspInit+0x40>)
 8001c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c78:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <HAL_CRC_MspInit+0x40>)
 8001c7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001c82:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <HAL_CRC_MspInit+0x40>)
 8001c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40023000 	.word	0x40023000
 8001ca0:	46020c00 	.word	0x46020c00

08001ca4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8001cec <HAL_DMA2D_MspInit+0x48>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d116      	bne.n	8001ce4 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_DMA2D_MspInit+0x4c>)
 8001cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <HAL_DMA2D_MspInit+0x4c>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_DMA2D_MspInit+0x4c>)
 8001cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2076      	movs	r0, #118	@ 0x76
 8001cda:	f002 fd25 	bl	8004728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001cde:	2076      	movs	r0, #118	@ 0x76
 8001ce0:	f002 fd3c 	bl	800475c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	4002b000 	.word	0x4002b000
 8001cf0:	46020c00 	.word	0x46020c00

08001cf4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0c2      	sub	sp, #264	@ 0x108
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d02:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	22e0      	movs	r2, #224	@ 0xe0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f029 fa6c 	bl	802b1fa <memset>
  if(hdsi->Instance==DSI)
 8001d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a38      	ldr	r2, [pc, #224]	@ (8001e10 <HAL_DSI_MspInit+0x11c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d168      	bne.n	8001e06 <HAL_DSI_MspInit+0x112>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0304 	mov.w	r3, #4
 8001d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001d46:	2303      	movs	r3, #3
 8001d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLL3.PLL3N = 125;
 8001d4e:	237d      	movs	r3, #125	@ 0x7d
 8001d50:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLL3.PLL3P = 8;
 8001d52:	2308      	movs	r3, #8
 8001d54:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP;
 8001d66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4618      	mov	r0, r3
 8001d72:	f006 fb9f 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_DSI_MspInit+0x8c>
    {
      Error_Handler();
 8001d7c:	f7ff fe62 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001d80:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <HAL_DSI_MspInit+0x120>)
 8001d82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d86:	4a23      	ldr	r2, [pc, #140]	@ (8001e14 <HAL_DSI_MspInit+0x120>)
 8001d88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d8c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d90:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <HAL_DSI_MspInit+0x120>)
 8001d92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <HAL_DSI_MspInit+0x120>)
 8001da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <HAL_DSI_MspInit+0x120>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dae:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_DSI_MspInit+0x120>)
 8001db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db4:	f003 0202 	and.w	r2, r3, #2
 8001db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001dbc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001dc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dca:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_CKP     ------> DSIHOST_CKP
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001de4:	230b      	movs	r3, #11
 8001de6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4809      	ldr	r0, [pc, #36]	@ (8001e18 <HAL_DSI_MspInit+0x124>)
 8001df2:	f004 f857 	bl	8005ea4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2089      	movs	r0, #137	@ 0x89
 8001dfc:	f002 fc94 	bl	8004728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001e00:	2089      	movs	r0, #137	@ 0x89
 8001e02:	f002 fcab 	bl	800475c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40016c00 	.word	0x40016c00
 8001e14:	46020c00 	.word	0x46020c00
 8001e18:	42020400 	.word	0x42020400

08001e1c <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <HAL_GPU2D_MspInit+0x68>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d125      	bne.n	8001e7a <HAL_GPU2D_MspInit+0x5e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001e2e:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <HAL_GPU2D_MspInit+0x6c>)
 8001e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <HAL_GPU2D_MspInit+0x6c>)
 8001e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e3e:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_GPU2D_MspInit+0x6c>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_GPU2D_MspInit+0x6c>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e52:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <HAL_GPU2D_MspInit+0x6c>)
 8001e54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_GPU2D_MspInit+0x6c>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2084      	movs	r0, #132	@ 0x84
 8001e70:	f002 fc5a 	bl	8004728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001e74:	2084      	movs	r0, #132	@ 0x84
 8001e76:	f002 fc71 	bl	800475c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	4002f000 	.word	0x4002f000
 8001e88:	46020c00 	.word	0x46020c00

08001e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b0c2      	sub	sp, #264	@ 0x108
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e9a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	22e0      	movs	r2, #224	@ 0xe0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f029 f9a0 	bl	802b1fa <memset>
  if(hi2c->Instance==I2C5)
 8001eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f74 <HAL_I2C_MspInit+0xe8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d14d      	bne.n	8001f68 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8001ecc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c5ClockSelection = RCC_I2C5CLKSOURCE_PCLK1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f006 fae6 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001eee:	f7ff fda9 	bl	8001a44 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef2:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <HAL_I2C_MspInit+0xec>)
 8001ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_I2C_MspInit+0xec>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f02:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <HAL_I2C_MspInit+0xec>)
 8001f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PD0     ------> I2C5_SDA
    PD1     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f10:	2303      	movs	r3, #3
 8001f12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f16:	2312      	movs	r3, #18
 8001f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <HAL_I2C_MspInit+0xf0>)
 8001f36:	f003 ffb5 	bl	8005ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_I2C_MspInit+0xec>)
 8001f3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_I2C_MspInit+0xec>)
 8001f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f46:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_I2C_MspInit+0xec>)
 8001f4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001f50:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f58:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f62:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f66:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001f68:	bf00      	nop
 8001f6a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40009800 	.word	0x40009800
 8001f78:	46020c00 	.word	0x46020c00
 8001f7c:	42020c00 	.word	0x42020c00

08001f80 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0bc      	sub	sp, #240	@ 0xf0
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	22e0      	movs	r2, #224	@ 0xe0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f029 f932 	bl	802b1fa <memset>
  if(hltdc->Instance==LTDC)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a22      	ldr	r2, [pc, #136]	@ (8002024 <HAL_LTDC_MspInit+0xa4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d13d      	bne.n	800201c <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0302 	mov.w	r3, #2
 8001fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8001fac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 10;
 8001fbc:	230a      	movs	r3, #10
 8001fbe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 8;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001fcc:	230c      	movs	r3, #12
 8001fce:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8001fd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f006 fa68 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8001fea:	f7ff fd2b 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_LTDC_MspInit+0xa8>)
 8001ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8002028 <HAL_LTDC_MspInit+0xa8>)
 8001ff6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ffa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <HAL_LTDC_MspInit+0xa8>)
 8002000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002004:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2087      	movs	r0, #135	@ 0x87
 8002012:	f002 fb89 	bl	8004728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002016:	2087      	movs	r0, #135	@ 0x87
 8002018:	f002 fba0 	bl	800475c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800201c:	bf00      	nop
 800201e:	37f0      	adds	r7, #240	@ 0xf0
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40016800 	.word	0x40016800
 8002028:	46020c00 	.word	0x46020c00

0800202c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0bc      	sub	sp, #240	@ 0xf0
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	22e0      	movs	r2, #224	@ 0xe0
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f029 f8dc 	bl	802b1fa <memset>
  if(hrtc->Instance==RTC)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <HAL_RTC_MspInit+0x90>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d132      	bne.n	80020b2 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800204c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002058:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800205c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4618      	mov	r0, r3
 8002066:	f006 fa25 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002070:	f7ff fce8 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_RTC_MspInit+0x94>)
 8002076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800207a:	4a11      	ldr	r2, [pc, #68]	@ (80020c0 <HAL_RTC_MspInit+0x94>)
 800207c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002080:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002084:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <HAL_RTC_MspInit+0x94>)
 8002086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800208a:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <HAL_RTC_MspInit+0x94>)
 800208c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002090:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_RTC_MspInit+0x94>)
 8002096:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800209a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <HAL_RTC_MspInit+0x94>)
 80020a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80020a8:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <HAL_RTC_MspInit+0x94>)
 80020aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	37f0      	adds	r7, #240	@ 0xf0
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	46007800 	.word	0x46007800
 80020c0:	46020c00 	.word	0x46020c00

080020c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0c2      	sub	sp, #264	@ 0x108
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020d2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	22e0      	movs	r2, #224	@ 0xe0
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f029 f884 	bl	802b1fa <memset>
  if(huart->Instance==UART4)
 80020f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a2a      	ldr	r2, [pc, #168]	@ (80021a8 <HAL_UART_MspInit+0xe4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d14c      	bne.n	800219e <HAL_UART_MspInit+0xda>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002104:	f04f 0208 	mov.w	r2, #8
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002110:	2300      	movs	r3, #0
 8002112:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4618      	mov	r0, r3
 800211a:	f006 f9cb 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002124:	f7ff fc8e 	bl	8001a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002128:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_UART_MspInit+0xe8>)
 800212a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800212e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ac <HAL_UART_MspInit+0xe8>)
 8002130:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002134:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002138:	4b1c      	ldr	r3, [pc, #112]	@ (80021ac <HAL_UART_MspInit+0xe8>)
 800213a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800213e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_UART_MspInit+0xe8>)
 8002148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800214c:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <HAL_UART_MspInit+0xe8>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_UART_MspInit+0xe8>)
 8002158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800215c:	f003 0201 	and.w	r2, r3, #1
 8002160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002164:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800216e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002172:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002174:	2303      	movs	r3, #3
 8002176:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800218c:	2308      	movs	r3, #8
 800218e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <HAL_UART_MspInit+0xec>)
 800219a:	f003 fe83 	bl	8005ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800219e:	bf00      	nop
 80021a0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40004c00 	.word	0x40004c00
 80021ac:	46020c00 	.word	0x46020c00
 80021b0:	42020000 	.word	0x42020000

080021b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	@ 0x38
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002280 <HAL_InitTick+0xcc>)
 80021c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002280 <HAL_InitTick+0xcc>)
 80021cc:	f043 0310 	orr.w	r3, r3, #16
 80021d0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80021d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <HAL_InitTick+0xcc>)
 80021d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021e2:	f107 0210 	add.w	r2, r7, #16
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f006 f877 	bl	80082e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021f2:	f006 f839 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 80021f6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fa:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <HAL_InitTick+0xd0>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	3b01      	subs	r3, #1
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_InitTick+0xd4>)
 8002208:	4a20      	ldr	r2, [pc, #128]	@ (800228c <HAL_InitTick+0xd8>)
 800220a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800220c:	4b1e      	ldr	r3, [pc, #120]	@ (8002288 <HAL_InitTick+0xd4>)
 800220e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002212:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002214:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <HAL_InitTick+0xd4>)
 8002216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002218:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_InitTick+0xd4>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_InitTick+0xd4>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002226:	4818      	ldr	r0, [pc, #96]	@ (8002288 <HAL_InitTick+0xd4>)
 8002228:	f009 faae 	bl	800b788 <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8002232:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002236:	2b00      	cmp	r3, #0
 8002238:	d118      	bne.n	800226c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800223a:	4813      	ldr	r0, [pc, #76]	@ (8002288 <HAL_InitTick+0xd4>)
 800223c:	f009 fb06 	bl	800b84c <HAL_TIM_Base_Start_IT>
 8002240:	4603      	mov	r3, r0
 8002242:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8002246:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10e      	bne.n	800226c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	d808      	bhi.n	8002266 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	2031      	movs	r0, #49	@ 0x31
 800225a:	f002 fa65 	bl	8004728 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225e:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <HAL_InitTick+0xdc>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e002      	b.n	800226c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800226c:	2031      	movs	r0, #49	@ 0x31
 800226e:	f002 fa75 	bl	800475c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002272:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002276:	4618      	mov	r0, r3
 8002278:	3738      	adds	r7, #56	@ 0x38
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	46020c00 	.word	0x46020c00
 8002284:	431bde83 	.word	0x431bde83
 8002288:	200851f4 	.word	0x200851f4
 800228c:	40001000 	.word	0x40001000
 8002290:	20000008 	.word	0x20000008

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002298:	f006 f86a 	bl	8008370 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <NMI_Handler+0x8>

080022a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <HardFault_Handler+0x4>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <MemManage_Handler+0x4>

080022b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <UsageFault_Handler+0x4>

080022c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <RCC_IRQHandler>:

/**
  * @brief This function handles RCC non-secure global interrupt.
  */
void RCC_IRQHandler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022e0:	4802      	ldr	r0, [pc, #8]	@ (80022ec <ADC1_2_IRQHandler+0x10>)
 80022e2:	f001 f831 	bl	8003348 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20084eec 	.word	0x20084eec

080022f0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022f4:	4802      	ldr	r0, [pc, #8]	@ (8002300 <TIM6_IRQHandler+0x10>)
 80022f6:	f009 fb49 	bl	800b98c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200851f4 	.word	0x200851f4

08002304 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <DMA2D_IRQHandler+0x10>)
 800230a:	f002 fbe0 	bl	8004ace <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20084f9c 	.word	0x20084f9c

08002318 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <GPU2D_IRQHandler+0x10>)
 800231e:	f004 f801 	bl	8006324 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20085028 	.word	0x20085028

0800232c <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <LTDC_IRQHandler+0x10>)
 8002332:	f004 fa2f 	bl	8006794 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20085088 	.word	0x20085088

08002340 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <DSI_IRQHandler+0x10>)
 8002346:	f003 f8d5 	bl	80054f4 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20085004 	.word	0x20085004

08002354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return 1;
 8002358:	2301      	movs	r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_kill>:

int _kill(int pid, int sig)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800236e:	f028 ffe7 	bl	802b340 <__errno>
 8002372:	4603      	mov	r3, r0
 8002374:	2216      	movs	r2, #22
 8002376:	601a      	str	r2, [r3, #0]
  return -1;
 8002378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_exit>:

void _exit (int status)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ffe7 	bl	8002364 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002396:	bf00      	nop
 8002398:	e7fd      	b.n	8002396 <_exit+0x12>

0800239a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e00a      	b.n	80023c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ac:	f3af 8000 	nop.w
 80023b0:	4601      	mov	r1, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	60ba      	str	r2, [r7, #8]
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3301      	adds	r3, #1
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbf0      	blt.n	80023ac <_read+0x12>
  }

  return len;
 80023ca:	687b      	ldr	r3, [r7, #4]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e009      	b.n	80023fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	60ba      	str	r2, [r7, #8]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf1      	blt.n	80023e6 <_write+0x12>
  }
  return len;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_close>:

int _close(int file)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002434:	605a      	str	r2, [r3, #4]
  return 0;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_isatty>:

int _isatty(int file)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <_sbrk+0x5c>)
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <_sbrk+0x60>)
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002488:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <_sbrk+0x64>)
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <_sbrk+0x68>)
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <_sbrk+0x64>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d207      	bcs.n	80024b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a4:	f028 ff4c 	bl	802b340 <__errno>
 80024a8:	4603      	mov	r3, r0
 80024aa:	220c      	movs	r2, #12
 80024ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e009      	b.n	80024c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b4:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ba:	4b07      	ldr	r3, [pc, #28]	@ (80024d8 <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <_sbrk+0x64>)
 80024c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	202f0000 	.word	0x202f0000
 80024d4:	00000400 	.word	0x00000400
 80024d8:	20085240 	.word	0x20085240
 80024dc:	20087908 	.word	0x20087908

080024e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024e4:	4b18      	ldr	r3, [pc, #96]	@ (8002548 <SystemInit+0x68>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	4a17      	ldr	r2, [pc, #92]	@ (8002548 <SystemInit+0x68>)
 80024ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80024f4:	4b15      	ldr	r3, [pc, #84]	@ (800254c <SystemInit+0x6c>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <SystemInit+0x6c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <SystemInit+0x6c>)
 8002502:	2200      	movs	r2, #0
 8002504:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <SystemInit+0x6c>)
 8002508:	2200      	movs	r2, #0
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <SystemInit+0x6c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0e      	ldr	r2, [pc, #56]	@ (800254c <SystemInit+0x6c>)
 8002512:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002516:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800251a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <SystemInit+0x6c>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <SystemInit+0x6c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <SystemInit+0x6c>)
 8002528:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800252e:	4b07      	ldr	r3, [pc, #28]	@ (800254c <SystemInit+0x6c>)
 8002530:	2200      	movs	r2, #0
 8002532:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <SystemInit+0x68>)
 8002536:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800253a:	609a      	str	r2, [r3, #8]
  #endif
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	46020c00 	.word	0x46020c00

08002550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002588 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002554:	f7ff ffc4 	bl	80024e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002558:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800255a:	e003      	b.n	8002564 <LoopCopyDataInit>

0800255c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800255e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002560:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002562:	3104      	adds	r1, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002564:	480a      	ldr	r0, [pc, #40]	@ (8002590 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002566:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002568:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800256a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800256c:	d3f6      	bcc.n	800255c <CopyDataInit>
	ldr	r2, =_sbss
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002570:	e002      	b.n	8002578 <LoopFillZerobss>

08002572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002572:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002574:	f842 3b04 	str.w	r3, [r2], #4

08002578 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <LoopForever+0x16>)
	cmp	r2, r3
 800257a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800257c:	d3f9      	bcc.n	8002572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800257e:	f028 fee5 	bl	802b34c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002582:	f7fe f9ed 	bl	8000960 <main>

08002586 <LoopForever>:

LoopForever:
    b LoopForever
 8002586:	e7fe      	b.n	8002586 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002588:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 800258c:	08047510 	.word	0x08047510
	ldr	r0, =_sdata
 8002590:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002594:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 8002598:	200815b8 	.word	0x200815b8
	ldr	r3, = _ebss
 800259c:	20087908 	.word	0x20087908

080025a0 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025a0:	e7fe      	b.n	80025a0 <ADC4_IRQHandler>
	...

080025a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_Init+0x50>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a11      	ldr	r2, [pc, #68]	@ (80025f4 <HAL_Init+0x50>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f002 f8ac 	bl	8004712 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025ba:	f005 fd39 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <HAL_Init+0x54>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	490c      	ldr	r1, [pc, #48]	@ (80025fc <HAL_Init+0x58>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002600 <HAL_Init+0x5c>)
 80025d2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80025d4:	2004      	movs	r0, #4
 80025d6:	f002 f8cf 	bl	8004778 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025da:	200f      	movs	r0, #15
 80025dc:	f7ff fdea 	bl	80021b4 <HAL_InitTick>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e002      	b.n	80025f0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025ea:	f7ff fa31 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40022000 	.word	0x40022000
 80025f8:	46020c00 	.word	0x46020c00
 80025fc:	0802cb40 	.word	0x0802cb40
 8002600:	20000004 	.word	0x20000004

08002604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_IncTick+0x20>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_IncTick+0x24>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4413      	add	r3, r2
 8002614:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <HAL_IncTick+0x24>)
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	2000000c 	.word	0x2000000c
 8002628:	20085244 	.word	0x20085244

0800262c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return uwTick;
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <HAL_GetTick+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20085244 	.word	0x20085244

08002644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff ffee 	bl	800262c <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d005      	beq.n	800266a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <HAL_Delay+0x44>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800266a:	bf00      	nop
 800266c:	f7ff ffde 	bl	800262c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	429a      	cmp	r2, r3
 800267a:	d8f7      	bhi.n	800266c <HAL_Delay+0x28>
  {
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000000c 	.word	0x2000000c

0800268c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800269c:	4904      	ldr	r1, [pc, #16]	@ (80026b0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	46007400 	.word	0x46007400

080026b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 0202 	bic.w	r2, r3, #2
 80026c4:	4904      	ldr	r1, [pc, #16]	@ (80026d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	46007400 	.word	0x46007400

080026dc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002720 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026ee:	f7ff ff9d 	bl	800262c <HAL_GetTick>
 80026f2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80026f4:	e008      	b.n	8002708 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80026f6:	f7ff ff99 	bl	800262c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b0a      	cmp	r3, #10
 8002702:	d901      	bls.n	8002708 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e006      	b.n	8002716 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	46007400 	.word	0x46007400

08002724 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	609a      	str	r2, [r3, #8]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <LL_ADC_SetResolution+0x3c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d104      	bne.n	80027ac <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f023 020c 	bic.w	r2, r3, #12
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60da      	str	r2, [r3, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	46021000 	.word	0x46021000

080027cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3360      	adds	r3, #96	@ 0x60
 80027de:	461a      	mov	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	430b      	orrs	r3, r1
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3360      	adds	r3, #96	@ 0x60
 800281c:	461a      	mov	r2, r3
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800283a:	b480      	push	{r7}
 800283c:	b087      	sub	sp, #28
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3360      	adds	r3, #96	@ 0x60
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	431a      	orrs	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3360      	adds	r3, #96	@ 0x60
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b087      	sub	sp, #28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3360      	adds	r3, #96	@ 0x60
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	bf00      	nop
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	2a00      	cmp	r2, #0
 8002906:	d002      	beq.n	800290e <LL_ADC_SetGainCompensation+0x32>
 8002908:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800290c:	e000      	b.n	8002910 <LL_ADC_SetGainCompensation+0x34>
 800290e:	2200      	movs	r2, #0
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2107      	movs	r1, #7
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	401a      	ands	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	431a      	orrs	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	@ 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a2b      	ldr	r2, [pc, #172]	@ (8002a44 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d020      	beq.n	80029de <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3330      	adds	r3, #48	@ 0x30
 80029a0:	461a      	mov	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	4413      	add	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	211f      	movs	r1, #31
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	401a      	ands	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 011f 	and.w	r1, r3, #31
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	431a      	orrs	r2, r3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80029dc:	e02b      	b.n	8002a36 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	210f      	movs	r1, #15
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <LL_ADC_REG_SetSequencerRanks+0x7e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	e010      	b.n	8002a28 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	613b      	str	r3, [r7, #16]
  return result;
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e003      	b.n	8002a28 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	f001 011f 	and.w	r1, r1, #31
 8002a2e:	408b      	lsls	r3, r1
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a36:	bf00      	nop
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	46021000 	.word	0x46021000

08002a48 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	2201      	movs	r2, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	e015      	b.n	8002a98 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	60fb      	str	r3, [r7, #12]
  return result;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002a82:	2320      	movs	r3, #32
 8002a84:	e003      	b.n	8002a8e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2201      	movs	r2, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	0e9b      	lsrs	r3, r3, #26
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	401a      	ands	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0303 	and.w	r3, r3, #3
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b08b      	sub	sp, #44	@ 0x2c
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8002be4 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d042      	beq.n	8002bba <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d104      	bne.n	8002b48 <LL_ADC_SetChannelSamplingTime+0x28>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	f003 021f 	and.w	r2, r3, #31
 8002b46:	e011      	b.n	8002b6c <LL_ADC_SetChannelSamplingTime+0x4c>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	617b      	str	r3, [r7, #20]
  return result;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e003      	b.n	8002b6a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	0e5b      	lsrs	r3, r3, #25
 8002b70:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	1ad2      	subs	r2, r2, r3
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0e5b      	lsrs	r3, r3, #25
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	4413      	add	r3, r2
 8002b98:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	2107      	movs	r1, #7
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	401a      	ands	r2, r3
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002bb8:	e00e      	b.n	8002bd8 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	0219      	lsls	r1, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	400b      	ands	r3, r1
 8002bce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	615a      	str	r2, [r3, #20]
}
 8002bd8:	bf00      	nop
 8002bda:	372c      	adds	r7, #44	@ 0x2c
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	46021000 	.word	0x46021000

08002be8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c00:	43db      	mvns	r3, r3
 8002c02:	401a      	ands	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0318 	and.w	r3, r3, #24
 8002c0a:	4908      	ldr	r1, [pc, #32]	@ (8002c2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c0c:	40d9      	lsrs	r1, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	400b      	ands	r3, r1
 8002c12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	000fffff 	.word	0x000fffff

08002c30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 031f 	and.w	r3, r3, #31
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6093      	str	r3, [r2, #8]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca0:	d101      	bne.n	8002ca6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002cc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cf0:	d101      	bne.n	8002cf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <LL_ADC_IsEnabled+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_ADC_IsEnabled+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d101      	bne.n	8002d68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b08b      	sub	sp, #44	@ 0x2c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e2ce      	b.n	8003336 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a95      	ldr	r2, [pc, #596]	@ (8002ffc <HAL_ADC_Init+0x284>)
 8002da6:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7fe fe87 	bl	8001ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff5f 	bl	8002c8c <LL_ADC_IsDeepPowerDownEnabled>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff45 	bl	8002c68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff7a 	bl	8002cdc <LL_ADC_IsInternalRegulatorEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d115      	bne.n	8002e1a <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff5e 	bl	8002cb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df8:	4b81      	ldr	r3, [pc, #516]	@ (8003000 <HAL_ADC_Init+0x288>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	4a81      	ldr	r2, [pc, #516]	@ (8003004 <HAL_ADC_Init+0x28c>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e0c:	e002      	b.n	8002e14 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f9      	bne.n	8002e0e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff5c 	bl	8002cdc <LL_ADC_IsInternalRegulatorEnabled>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10e      	bne.n	8002e48 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff6c 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 8002e52:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 825f 	bne.w	8003320 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 825b 	bne.w	8003320 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e6e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff40 	bl	8002d04 <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d14f      	bne.n	8002f2a <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ffc <HAL_ADC_Init+0x284>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d037      	beq.n	8002f04 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5b      	ldr	r2, [pc, #364]	@ (8003008 <HAL_ADC_Init+0x290>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_ADC_Init+0x130>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a5a      	ldr	r2, [pc, #360]	@ (800300c <HAL_ADC_Init+0x294>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_ADC_Init+0x14e>
 8002ea8:	4857      	ldr	r0, [pc, #348]	@ (8003008 <HAL_ADC_Init+0x290>)
 8002eaa:	f7ff ff2b 	bl	8002d04 <LL_ADC_IsEnabled>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	4856      	ldr	r0, [pc, #344]	@ (800300c <HAL_ADC_Init+0x294>)
 8002eb2:	f7ff ff27 	bl	8002d04 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4323      	orrs	r3, r4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	e008      	b.n	8002ed8 <HAL_ADC_Init+0x160>
 8002ec6:	484d      	ldr	r0, [pc, #308]	@ (8002ffc <HAL_ADC_Init+0x284>)
 8002ec8:	f7ff ff1c 	bl	8002d04 <LL_ADC_IsEnabled>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d026      	beq.n	8002f2a <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a49      	ldr	r2, [pc, #292]	@ (8003008 <HAL_ADC_Init+0x290>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_ADC_Init+0x178>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a48      	ldr	r2, [pc, #288]	@ (800300c <HAL_ADC_Init+0x294>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_Init+0x17c>
 8002ef0:	4a47      	ldr	r2, [pc, #284]	@ (8003010 <HAL_ADC_Init+0x298>)
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADC_Init+0x17e>
 8002ef4:	4a47      	ldr	r2, [pc, #284]	@ (8003014 <HAL_ADC_Init+0x29c>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f7ff fc11 	bl	8002724 <LL_ADC_SetCommonClock>
 8002f02:	e012      	b.n	8002f2a <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f7ff fc3c 	bl	800278c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002f14:	4b3f      	ldr	r3, [pc, #252]	@ (8003014 <HAL_ADC_Init+0x29c>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002f24:	493b      	ldr	r1, [pc, #236]	@ (8003014 <HAL_ADC_Init+0x29c>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a33      	ldr	r2, [pc, #204]	@ (8002ffc <HAL_ADC_Init+0x284>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d010      	beq.n	8002f56 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f3a:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002f40:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002f46:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002f4e:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002f50:	4313      	orrs	r3, r2
 8002f52:	623b      	str	r3, [r7, #32]
 8002f54:	e035      	b.n	8002fc2 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7f1b      	ldrb	r3, [r3, #28]
 8002f5a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f62:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f64:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_ADC_Init+0x1fc>
 8002f6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f72:	e000      	b.n	8002f76 <HAL_ADC_Init+0x1fe>
 8002f74:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f76:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002f7c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da04      	bge.n	8002f90 <HAL_ADC_Init+0x218>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f8e:	e001      	b.n	8002f94 <HAL_ADC_Init+0x21c>
 8002f90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002f94:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	491b      	ldr	r1, [pc, #108]	@ (8003008 <HAL_ADC_Init+0x290>)
 8002f9c:	428b      	cmp	r3, r1
 8002f9e:	d004      	beq.n	8002faa <HAL_ADC_Init+0x232>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4919      	ldr	r1, [pc, #100]	@ (800300c <HAL_ADC_Init+0x294>)
 8002fa6:	428b      	cmp	r3, r1
 8002fa8:	d103      	bne.n	8002fb2 <HAL_ADC_Init+0x23a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fb0:	e003      	b.n	8002fba <HAL_ADC_Init+0x242>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fb8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002fba:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d131      	bne.n	8003030 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ffc <HAL_ADC_Init+0x284>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	045b      	lsls	r3, r3, #17
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	e024      	b.n	8003030 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d113      	bne.n	8003018 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff6:	623b      	str	r3, [r7, #32]
 8002ff8:	e01a      	b.n	8003030 <HAL_ADC_Init+0x2b8>
 8002ffa:	bf00      	nop
 8002ffc:	46021000 	.word	0x46021000
 8003000:	20000004 	.word	0x20000004
 8003004:	053e2d63 	.word	0x053e2d63
 8003008:	42028000 	.word	0x42028000
 800300c:	42028100 	.word	0x42028100
 8003010:	42028300 	.word	0x42028300
 8003014:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a75      	ldr	r2, [pc, #468]	@ (800320c <HAL_ADC_Init+0x494>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d018      	beq.n	800306c <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003046:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304e:	4313      	orrs	r3, r2
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	4313      	orrs	r3, r2
 8003054:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4b6c      	ldr	r3, [pc, #432]	@ (8003210 <HAL_ADC_Init+0x498>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	6a39      	ldr	r1, [r7, #32]
 8003066:	430b      	orrs	r3, r1
 8003068:	60d3      	str	r3, [r2, #12]
 800306a:	e031      	b.n	80030d0 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003078:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003080:	4313      	orrs	r3, r2
 8003082:	6a3a      	ldr	r2, [r7, #32]
 8003084:	4313      	orrs	r3, r2
 8003086:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	4b61      	ldr	r3, [pc, #388]	@ (8003214 <HAL_ADC_Init+0x49c>)
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	6a39      	ldr	r1, [r7, #32]
 8003098:	430b      	orrs	r3, r1
 800309a:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4d      	ldr	r2, [pc, #308]	@ (800320c <HAL_ADC_Init+0x494>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	f000 80a4 	beq.w	8003224 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fe22 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 80030e6:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fe2f 	bl	8002d50 <LL_ADC_INJ_IsConversionOngoing>
 80030f2:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d166      	bne.n	80031c8 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d163      	bne.n	80031c8 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7f1b      	ldrb	r3, [r3, #28]
 8003104:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4943      	ldr	r1, [pc, #268]	@ (8003218 <HAL_ADC_Init+0x4a0>)
 800310c:	428b      	cmp	r3, r1
 800310e:	d004      	beq.n	800311a <HAL_ADC_Init+0x3a2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4941      	ldr	r1, [pc, #260]	@ (800321c <HAL_ADC_Init+0x4a4>)
 8003116:	428b      	cmp	r3, r1
 8003118:	d102      	bne.n	8003120 <HAL_ADC_Init+0x3a8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311e:	e002      	b.n	8003126 <HAL_ADC_Init+0x3ae>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003126:	4313      	orrs	r3, r2
 8003128:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003134:	f023 0303 	bic.w	r3, r3, #3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	6a39      	ldr	r1, [r7, #32]
 800313e:	430b      	orrs	r3, r1
 8003140:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7ff fbc1 	bl	80028dc <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003160:	2b01      	cmp	r3, #1
 8003162:	d11e      	bne.n	80031a2 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003168:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	4b2b      	ldr	r3, [pc, #172]	@ (8003220 <HAL_ADC_Init+0x4a8>)
 8003172:	4013      	ands	r3, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003178:	0411      	lsls	r1, r2, #16
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003184:	4311      	orrs	r1, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800318a:	4311      	orrs	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003190:	0892      	lsrs	r2, r2, #2
 8003192:	430a      	orrs	r2, r1
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	611a      	str	r2, [r3, #16]
 80031a0:	e007      	b.n	80031b2 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10c      	bne.n	80031ea <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	f023 010f 	bic.w	r1, r3, #15
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	1e5a      	subs	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80031e8:	e007      	b.n	80031fa <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 020f 	bic.w	r2, r2, #15
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031fe:	f023 0303 	bic.w	r3, r3, #3
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800320a:	e092      	b.n	8003332 <HAL_ADC_Init+0x5ba>
 800320c:	46021000 	.word	0x46021000
 8003210:	fff0c013 	.word	0xfff0c013
 8003214:	ffde800d 	.word	0xffde800d
 8003218:	42028000 	.word	0x42028000
 800321c:	42028100 	.word	0x42028100
 8003220:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800322a:	2b01      	cmp	r3, #1
 800322c:	d111      	bne.n	8003252 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003236:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800323c:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003242:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	4313      	orrs	r3, r2
 8003248:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	4b39      	ldr	r3, [pc, #228]	@ (8003340 <HAL_ADC_Init+0x5c8>)
 800325a:	4013      	ands	r3, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	69f9      	ldr	r1, [r7, #28]
 8003262:	430b      	orrs	r3, r1
 8003264:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	461a      	mov	r2, r3
 8003270:	2100      	movs	r1, #0
 8003272:	f7ff fb56 	bl	8002922 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	461a      	mov	r2, r3
 8003280:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003284:	f7ff fb4d 	bl	8002922 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d108      	bne.n	80032a2 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f062 020f 	orn	r2, r2, #15
 800329e:	629a      	str	r2, [r3, #40]	@ 0x28
 80032a0:	e018      	b.n	80032d4 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032aa:	d113      	bne.n	80032d4 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	f003 031c 	and.w	r3, r3, #28
 80032be:	f06f 020f 	mvn.w	r2, #15
 80032c2:	fa02 f103 	lsl.w	r1, r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	4b1a      	ldr	r3, [pc, #104]	@ (8003344 <HAL_ADC_Init+0x5cc>)
 80032dc:	4013      	ands	r3, r2
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d10b      	bne.n	80032fc <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032fa:	e01a      	b.n	8003332 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003300:	f023 0312 	bic.w	r3, r3, #18
 8003304:	f043 0210 	orr.w	r2, r3, #16
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800331e:	e008      	b.n	8003332 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003324:	f043 0210 	orr.w	r2, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003332:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003336:	4618      	mov	r0, r3
 8003338:	372c      	adds	r7, #44	@ 0x2c
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}
 800333e:	bf00      	nop
 8003340:	f7fffc02 	.word	0xf7fffc02
 8003344:	833ffff3 	.word	0x833ffff3

08003348 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a77      	ldr	r2, [pc, #476]	@ (8003548 <HAL_ADC_IRQHandler+0x200>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_ADC_IRQHandler+0x30>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a76      	ldr	r2, [pc, #472]	@ (800354c <HAL_ADC_IRQHandler+0x204>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_ADC_IRQHandler+0x34>
 8003378:	4b75      	ldr	r3, [pc, #468]	@ (8003550 <HAL_ADC_IRQHandler+0x208>)
 800337a:	e000      	b.n	800337e <HAL_ADC_IRQHandler+0x36>
 800337c:	4b75      	ldr	r3, [pc, #468]	@ (8003554 <HAL_ADC_IRQHandler+0x20c>)
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fc56 	bl	8002c30 <LL_ADC_GetMultimode>
 8003384:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d017      	beq.n	80033c0 <HAL_ADC_IRQHandler+0x78>
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d012      	beq.n	80033c0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d105      	bne.n	80033b2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033aa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f001 f8f6 	bl	80045a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2202      	movs	r2, #2
 80033be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <HAL_ADC_IRQHandler+0x8c>
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80d1 	beq.w	8003582 <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80cb 	beq.w	8003582 <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a53      	ldr	r2, [pc, #332]	@ (8003558 <HAL_ADC_IRQHandler+0x210>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d06c      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff faa4 	bl	8002960 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80aa 	beq.w	8003574 <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a49      	ldr	r2, [pc, #292]	@ (800354c <HAL_ADC_IRQHandler+0x204>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d002      	beq.n	8003430 <HAL_ADC_IRQHandler+0xe8>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	e000      	b.n	8003432 <HAL_ADC_IRQHandler+0xea>
 8003430:	4b45      	ldr	r3, [pc, #276]	@ (8003548 <HAL_ADC_IRQHandler+0x200>)
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	4293      	cmp	r3, r2
 8003438:	d008      	beq.n	800344c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2b05      	cmp	r3, #5
 8003444:	d002      	beq.n	800344c <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b09      	cmp	r3, #9
 800344a:	d104      	bne.n	8003456 <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	e00c      	b.n	8003470 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a3c      	ldr	r2, [pc, #240]	@ (800354c <HAL_ADC_IRQHandler+0x204>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d002      	beq.n	8003466 <HAL_ADC_IRQHandler+0x11e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	e000      	b.n	8003468 <HAL_ADC_IRQHandler+0x120>
 8003466:	4b38      	ldr	r3, [pc, #224]	@ (8003548 <HAL_ADC_IRQHandler+0x200>)
 8003468:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d17c      	bne.n	8003574 <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b08      	cmp	r3, #8
 8003486:	d175      	bne.n	8003574 <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fc4c 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d11a      	bne.n	80034ce <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 020c 	bic.w	r2, r2, #12
 80034a6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d159      	bne.n	8003574 <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034c4:	f043 0201 	orr.w	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	679a      	str	r2, [r3, #120]	@ 0x78
 80034cc:	e052      	b.n	8003574 <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034e6:	e045      	b.n	8003574 <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fa37 	bl	8002960 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03d      	beq.n	8003574 <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d138      	bne.n	8003574 <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b08      	cmp	r3, #8
 800350e:	d131      	bne.n	8003574 <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fc08 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11d      	bne.n	800355c <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 020c 	bic.w	r2, r2, #12
 800352e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f043 0201 	orr.w	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	679a      	str	r2, [r3, #120]	@ 0x78
 8003544:	e016      	b.n	8003574 <HAL_ADC_IRQHandler+0x22c>
 8003546:	bf00      	nop
 8003548:	42028000 	.word	0x42028000
 800354c:	42028100 	.word	0x42028100
 8003550:	42028300 	.word	0x42028300
 8003554:	46021300 	.word	0x46021300
 8003558:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f99d 	bl	80038b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	220c      	movs	r2, #12
 8003580:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a8c      	ldr	r2, [pc, #560]	@ (80037b8 <HAL_ADC_IRQHandler+0x470>)
 8003588:	4293      	cmp	r3, r2
 800358a:	f000 8095 	beq.w	80036b8 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x25a>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8085 	beq.w	80036b8 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d07f      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fa90 	bl	8002afa <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035da:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff f9bd 	bl	8002960 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035e6:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a73      	ldr	r2, [pc, #460]	@ (80037bc <HAL_ADC_IRQHandler+0x474>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d002      	beq.n	80035f8 <HAL_ADC_IRQHandler+0x2b0>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	e000      	b.n	80035fa <HAL_ADC_IRQHandler+0x2b2>
 80035f8:	4b71      	ldr	r3, [pc, #452]	@ (80037c0 <HAL_ADC_IRQHandler+0x478>)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	4293      	cmp	r3, r2
 8003600:	d008      	beq.n	8003614 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d002      	beq.n	8003614 <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b07      	cmp	r3, #7
 8003612:	d104      	bne.n	800361e <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	e00c      	b.n	8003638 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a66      	ldr	r2, [pc, #408]	@ (80037bc <HAL_ADC_IRQHandler+0x474>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d002      	beq.n	800362e <HAL_ADC_IRQHandler+0x2e6>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	e000      	b.n	8003630 <HAL_ADC_IRQHandler+0x2e8>
 800362e:	4b64      	ldr	r3, [pc, #400]	@ (80037c0 <HAL_ADC_IRQHandler+0x478>)
 8003630:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d035      	beq.n	80036aa <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_ADC_IRQHandler+0x310>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d02d      	beq.n	80036aa <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003654:	2b00      	cmp	r3, #0
 8003656:	d128      	bne.n	80036aa <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b40      	cmp	r3, #64	@ 0x40
 8003664:	d121      	bne.n	80036aa <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fb70 	bl	8002d50 <LL_ADC_INJ_IsConversionOngoing>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d119      	bne.n	80036aa <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003684:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800368a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 ff5c 	bl	8004568 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2260      	movs	r2, #96	@ 0x60
 80036b6:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d011      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x39e>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8f5 	bl	80038c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2280      	movs	r2, #128	@ 0x80
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d012      	beq.n	8003716 <HAL_ADC_IRQHandler+0x3ce>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff38 	bl	800457c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <HAL_ADC_IRQHandler+0x3fe>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800372e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 ff2a 	bl	8004590 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	d05d      	beq.n	800380c <HAL_ADC_IRQHandler+0x4c4>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d058      	beq.n	800380c <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 8003762:	2301      	movs	r3, #1
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
 8003766:	e03b      	b.n	80037e0 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a12      	ldr	r2, [pc, #72]	@ (80037b8 <HAL_ADC_IRQHandler+0x470>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d02c      	beq.n	80037cc <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d015      	beq.n	80037a4 <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <HAL_ADC_IRQHandler+0x478>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_ADC_IRQHandler+0x444>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a0d      	ldr	r2, [pc, #52]	@ (80037bc <HAL_ADC_IRQHandler+0x474>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_ADC_IRQHandler+0x448>
 800378c:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <HAL_ADC_IRQHandler+0x47c>)
 800378e:	e000      	b.n	8003792 <HAL_ADC_IRQHandler+0x44a>
 8003790:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <HAL_ADC_IRQHandler+0x480>)
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fa5a 	bl	8002c4c <LL_ADC_GetMultiDMATransfer>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d020      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800379e:	2301      	movs	r3, #1
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a2:	e01d      	b.n	80037e0 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 80037b2:	2301      	movs	r3, #1
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b6:	e013      	b.n	80037e0 <HAL_ADC_IRQHandler+0x498>
 80037b8:	46021000 	.word	0x46021000
 80037bc:	42028100 	.word	0x42028100
 80037c0:	42028000 	.word	0x42028000
 80037c4:	42028300 	.word	0x42028300
 80037c8:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff f984 	bl	8002ade <LL_ADC_REG_GetDMATransfer>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 80037dc:	2301      	movs	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d10e      	bne.n	8003804 <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ea:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037f6:	f043 0202 	orr.w	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f86c 	bl	80038dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2210      	movs	r2, #16
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01b      	beq.n	800384e <HAL_ADC_IRQHandler+0x506>
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003830:	f043 0201 	orr.w	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f86d 	bl	8003918 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a17      	ldr	r2, [pc, #92]	@ (80038b0 <HAL_ADC_IRQHandler+0x568>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d126      	bne.n	80038a6 <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_ADC_IRQHandler+0x534>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f83f 	bl	80038f0 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800387a:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00f      	beq.n	80038a6 <HAL_ADC_IRQHandler+0x55e>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f837 	bl	8003904 <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038a4:	605a      	str	r2, [r3, #4]
    }
  }
}
 80038a6:	bf00      	nop
 80038a8:	3728      	adds	r7, #40	@ 0x28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	46021000 	.word	0x46021000

080038b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b0b7      	sub	sp, #220	@ 0xdc
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4aa8      	ldr	r2, [pc, #672]	@ (8003be8 <HAL_ADC_ConfigChannel+0x2bc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d103      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003958:	2b01      	cmp	r3, #1
 800395a:	d102      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x36>
 800395c:	2302      	movs	r3, #2
 800395e:	f000 bdfe 	b.w	800455e <HAL_ADC_ConfigChannel+0xc32>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f9db 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 85c1 	bne.w	80044fe <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a99      	ldr	r2, [pc, #612]	@ (8003be8 <HAL_ADC_ConfigChannel+0x2bc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	f000 8409 	beq.w	800419a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d108      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x7a>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	0e9b      	lsrs	r3, r3, #26
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2201      	movs	r2, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	e01d      	b.n	80039e2 <HAL_ADC_ConfigChannel+0xb6>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80039ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80039c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80039ca:	2320      	movs	r3, #32
 80039cc:	e004      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80039ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2201      	movs	r2, #1
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	69d1      	ldr	r1, [r2, #28]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f7fe ffc3 	bl	8002988 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f98f 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 8003a0c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff f99b 	bl	8002d50 <LL_ADC_INJ_IsConversionOngoing>
 8003a1a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 81df 	bne.w	8003de6 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 81da 	bne.w	8003de6 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f7ff f86e 	bl	8002b20 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d046      	beq.n	8003af4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6919      	ldr	r1, [r3, #16]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a76:	f7fe fea9 	bl	80027cc <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6919      	ldr	r1, [r3, #16]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f7fe fed7 	bl	800283a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	7e9b      	ldrb	r3, [r3, #26]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d11e      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x17e>
 8003aa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aa8:	e000      	b.n	8003aac <HAL_ADC_ConfigChannel+0x180>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	461a      	mov	r2, r3
 8003aae:	f7fe fefa 	bl	80028a6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d102      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x19c>
 8003ac2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003ac6:	e000      	b.n	8003aca <HAL_ADC_ConfigChannel+0x19e>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	461a      	mov	r2, r3
 8003acc:	f7fe fed0 	bl	8002870 <LL_ADC_SetOffsetSignedSaturation>
 8003ad0:	e189      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2200      	movs	r2, #0
 8003adc:	4619      	mov	r1, r3
 8003ade:	f7fe fee2 	bl	80028a6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2200      	movs	r2, #0
 8003aec:	4619      	mov	r1, r3
 8003aee:	f7fe febf 	bl	8002870 <LL_ADC_SetOffsetSignedSaturation>
 8003af2:	e178      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fe87 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x1f4>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fe7c 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003b16:	4603      	mov	r3, r0
 8003b18:	0e9b      	lsrs	r3, r3, #26
 8003b1a:	f003 021f 	and.w	r2, r3, #31
 8003b1e:	e01e      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x232>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fe71 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003b3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003b46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8003b4e:	2320      	movs	r3, #32
 8003b50:	e004      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8003b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x24a>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	0e9b      	lsrs	r3, r3, #26
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	e018      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x27c>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	e004      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d107      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f7fe fe08 	bl	80027cc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fe23 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x2c0>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fe18 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003bde:	4603      	mov	r3, r0
 8003be0:	0e9b      	lsrs	r3, r3, #26
 8003be2:	f003 021f 	and.w	r2, r3, #31
 8003be6:	e020      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x2fe>
 8003be8:	46021000 	.word	0x46021000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fe0b 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003c0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8003c1a:	2320      	movs	r3, #32
 8003c1c:	e004      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8003c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d105      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x316>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0e9b      	lsrs	r3, r3, #26
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	e018      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x348>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e004      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d107      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2300      	movs	r3, #0
 8003c82:	2101      	movs	r1, #1
 8003c84:	f7fe fda2 	bl	80027cc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fdbd 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x388>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fdb2 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	0e9b      	lsrs	r3, r3, #26
 8003cae:	f003 021f 	and.w	r2, r3, #31
 8003cb2:	e01a      	b.n	8003cea <HAL_ADC_ConfigChannel+0x3be>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fda7 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ccc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003cd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003cda:	2320      	movs	r3, #32
 8003cdc:	e004      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8003cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x3d6>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	0e9b      	lsrs	r3, r3, #26
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	e011      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x3fa>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d12:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003d14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	e003      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003d1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d107      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	2300      	movs	r3, #0
 8003d34:	2102      	movs	r1, #2
 8003d36:	f7fe fd49 	bl	80027cc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2103      	movs	r1, #3
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fd64 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x43a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2103      	movs	r1, #3
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fd59 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	0e9b      	lsrs	r3, r3, #26
 8003d60:	f003 021f 	and.w	r2, r3, #31
 8003d64:	e017      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x46a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2103      	movs	r1, #3
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fd4e 	bl	800280e <LL_ADC_GetOffsetChannel>
 8003d72:	4603      	mov	r3, r0
 8003d74:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003d7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d80:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003d82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	e003      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8003d8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x482>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	0e9b      	lsrs	r3, r3, #26
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	e011      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x4a6>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003dc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	e003      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003dca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d107      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	2103      	movs	r1, #3
 8003de2:	f7fe fcf3 	bl	80027cc <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe ff8a 	bl	8002d04 <LL_ADC_IsEnabled>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f040 83ad 	bne.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	461a      	mov	r2, r3
 8003e06:	f7fe feef 	bl	8002be8 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e12:	f040 80d6 	bne.w	8003fc2 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x50e>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2b09      	cmp	r3, #9
 8003e30:	bf94      	ite	ls
 8003e32:	2301      	movls	r3, #1
 8003e34:	2300      	movhi	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e019      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x542>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e4a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003e52:	2320      	movs	r3, #32
 8003e54:	e003      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003e56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e58:	fab3 f383 	clz	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	bf94      	ite	ls
 8003e68:	2301      	movls	r3, #1
 8003e6a:	2300      	movhi	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04d      	beq.n	8003f0e <HAL_ADC_ConfigChannel+0x5e2>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d107      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x562>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	0e9b      	lsrs	r3, r3, #26
 8003e84:	3301      	adds	r3, #1
 8003e86:	069b      	lsls	r3, r3, #26
 8003e88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e8c:	e015      	b.n	8003eba <HAL_ADC_ConfigChannel+0x58e>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	e003      	b.n	8003eb2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eac:	fab3 f383 	clz	r3, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	069b      	lsls	r3, r3, #26
 8003eb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_ADC_ConfigChannel+0x5ae>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	0e9b      	lsrs	r3, r3, #26
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	e017      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x5de>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	e003      	b.n	8003efe <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef8:	fab3 f383 	clz	r3, r3
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2101      	movs	r1, #1
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	e04e      	b.n	8003fac <HAL_ADC_ConfigChannel+0x680>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d107      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x5fe>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	0e9b      	lsrs	r3, r3, #26
 8003f20:	3301      	adds	r3, #1
 8003f22:	069b      	lsls	r3, r3, #26
 8003f24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f28:	e015      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x62a>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e003      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	069b      	lsls	r3, r3, #26
 8003f52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x64a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	0e9b      	lsrs	r3, r3, #26
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	e017      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x67a>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	61bb      	str	r3, [r7, #24]
  return result;
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8003f8e:	2320      	movs	r3, #32
 8003f90:	e003      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	fab3 f383 	clz	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003fbe:	f7fe fdaf 	bl	8002b20 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f280 82c3 	bge.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a92      	ldr	r2, [pc, #584]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x6b4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a91      	ldr	r2, [pc, #580]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x6b8>
 8003fe0:	4b90      	ldr	r3, [pc, #576]	@ (8004224 <HAL_ADC_ConfigChannel+0x8f8>)
 8003fe2:	e000      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x6ba>
 8003fe4:	4b90      	ldr	r3, [pc, #576]	@ (8004228 <HAL_ADC_ConfigChannel+0x8fc>)
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fbc2 	bl	8002770 <LL_ADC_GetCommonPathInternalCh>
 8003fec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a89      	ldr	r2, [pc, #548]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x6d8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a88      	ldr	r2, [pc, #544]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d10e      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x6f6>
 8004004:	4885      	ldr	r0, [pc, #532]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 8004006:	f7fe fe7d 	bl	8002d04 <LL_ADC_IsEnabled>
 800400a:	4604      	mov	r4, r0
 800400c:	4884      	ldr	r0, [pc, #528]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 800400e:	f7fe fe79 	bl	8002d04 <LL_ADC_IsEnabled>
 8004012:	4603      	mov	r3, r0
 8004014:	4323      	orrs	r3, r4
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e008      	b.n	8004034 <HAL_ADC_ConfigChannel+0x708>
 8004022:	4882      	ldr	r0, [pc, #520]	@ (800422c <HAL_ADC_ConfigChannel+0x900>)
 8004024:	f7fe fe6e 	bl	8002d04 <LL_ADC_IsEnabled>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80a6 	beq.w	8004186 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a7c      	ldr	r2, [pc, #496]	@ (8004230 <HAL_ADC_ConfigChannel+0x904>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d13c      	bne.n	80040be <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004044:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d136      	bne.n	80040be <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a71      	ldr	r2, [pc, #452]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00a      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x744>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a70      	ldr	r2, [pc, #448]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d005      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x744>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a70      	ldr	r2, [pc, #448]	@ (800422c <HAL_ADC_ConfigChannel+0x900>)
 800406a:	4293      	cmp	r3, r2
 800406c:	f040 826e 	bne.w	800454c <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a69      	ldr	r2, [pc, #420]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_ADC_ConfigChannel+0x758>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a68      	ldr	r2, [pc, #416]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x75c>
 8004084:	4a67      	ldr	r2, [pc, #412]	@ (8004224 <HAL_ADC_ConfigChannel+0x8f8>)
 8004086:	e000      	b.n	800408a <HAL_ADC_ConfigChannel+0x75e>
 8004088:	4a67      	ldr	r2, [pc, #412]	@ (8004228 <HAL_ADC_ConfigChannel+0x8fc>)
 800408a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800408e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7fe fb58 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800409a:	4b66      	ldr	r3, [pc, #408]	@ (8004234 <HAL_ADC_ConfigChannel+0x908>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	099b      	lsrs	r3, r3, #6
 80040a0:	4a65      	ldr	r2, [pc, #404]	@ (8004238 <HAL_ADC_ConfigChannel+0x90c>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	3301      	adds	r3, #1
 80040aa:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80040ac:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80040ae:	e002      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f9      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040bc:	e246      	b.n	800454c <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a5e      	ldr	r2, [pc, #376]	@ (800423c <HAL_ADC_ConfigChannel+0x910>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d12b      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d125      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a50      	ldr	r2, [pc, #320]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00a      	beq.n	80040f4 <HAL_ADC_ConfigChannel+0x7c8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a4f      	ldr	r2, [pc, #316]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d005      	beq.n	80040f4 <HAL_ADC_ConfigChannel+0x7c8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a4f      	ldr	r2, [pc, #316]	@ (800422c <HAL_ADC_ConfigChannel+0x900>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f040 822e 	bne.w	8004550 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a48      	ldr	r2, [pc, #288]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_ADC_ConfigChannel+0x7dc>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a47      	ldr	r2, [pc, #284]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d101      	bne.n	800410c <HAL_ADC_ConfigChannel+0x7e0>
 8004108:	4a46      	ldr	r2, [pc, #280]	@ (8004224 <HAL_ADC_ConfigChannel+0x8f8>)
 800410a:	e000      	b.n	800410e <HAL_ADC_ConfigChannel+0x7e2>
 800410c:	4a46      	ldr	r2, [pc, #280]	@ (8004228 <HAL_ADC_ConfigChannel+0x8fc>)
 800410e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f7fe fb16 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800411e:	e217      	b.n	8004550 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a46      	ldr	r2, [pc, #280]	@ (8004240 <HAL_ADC_ConfigChannel+0x914>)
 8004126:	4293      	cmp	r3, r2
 8004128:	f040 8213 	bne.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800412c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 820c 	bne.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a37      	ldr	r2, [pc, #220]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00a      	beq.n	800415a <HAL_ADC_ConfigChannel+0x82e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a35      	ldr	r2, [pc, #212]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d005      	beq.n	800415a <HAL_ADC_ConfigChannel+0x82e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a36      	ldr	r2, [pc, #216]	@ (800422c <HAL_ADC_ConfigChannel+0x900>)
 8004154:	4293      	cmp	r3, r2
 8004156:	f040 81fc 	bne.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2f      	ldr	r2, [pc, #188]	@ (800421c <HAL_ADC_ConfigChannel+0x8f0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_ADC_ConfigChannel+0x842>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a2d      	ldr	r2, [pc, #180]	@ (8004220 <HAL_ADC_ConfigChannel+0x8f4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x846>
 800416e:	4a2d      	ldr	r2, [pc, #180]	@ (8004224 <HAL_ADC_ConfigChannel+0x8f8>)
 8004170:	e000      	b.n	8004174 <HAL_ADC_ConfigChannel+0x848>
 8004172:	4a2d      	ldr	r2, [pc, #180]	@ (8004228 <HAL_ADC_ConfigChannel+0x8fc>)
 8004174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7fe fae3 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
 8004184:	e1e5      	b.n	8004552 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004198:	e1db      	b.n	8004552 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	f000 811b 	beq.w	80043e2 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041b4:	d004      	beq.n	80041c0 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80041ba:	4a22      	ldr	r2, [pc, #136]	@ (8004244 <HAL_ADC_ConfigChannel+0x918>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d107      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fc3d 	bl	8002a48 <LL_ADC_REG_SetSequencerChAdd>
 80041ce:	e059      	b.n	8004284 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	210f      	movs	r1, #15
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	401a      	ands	r2, r3
 80041e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80041ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x8d4>
 80041f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80041f8:	0e9b      	lsrs	r3, r3, #26
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	e027      	b.n	8004250 <HAL_ADC_ConfigChannel+0x924>
 8004200:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004204:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	60fb      	str	r3, [r7, #12]
  return result;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d117      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004218:	2320      	movs	r3, #32
 800421a:	e019      	b.n	8004250 <HAL_ADC_ConfigChannel+0x924>
 800421c:	42028000 	.word	0x42028000
 8004220:	42028100 	.word	0x42028100
 8004224:	42028300 	.word	0x42028300
 8004228:	46021300 	.word	0x46021300
 800422c:	46021000 	.word	0x46021000
 8004230:	ce080000 	.word	0xce080000
 8004234:	20000004 	.word	0x20000004
 8004238:	053e2d63 	.word	0x053e2d63
 800423c:	ca040000 	.word	0xca040000
 8004240:	80000001 	.word	0x80000001
 8004244:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	6849      	ldr	r1, [r1, #4]
 8004254:	f001 011f 	and.w	r1, r1, #31
 8004258:	408b      	lsls	r3, r1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	089b      	lsrs	r3, r3, #2
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	429a      	cmp	r2, r3
 8004270:	d808      	bhi.n	8004284 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800427e:	4619      	mov	r1, r3
 8004280:	f7fe fb82 	bl	8002988 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	461a      	mov	r2, r3
 800428e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004292:	f7fe fc45 	bl	8002b20 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f280 8159 	bge.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a9b      	ldr	r2, [pc, #620]	@ (8004514 <HAL_ADC_ConfigChannel+0xbe8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_ADC_ConfigChannel+0x988>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a9a      	ldr	r2, [pc, #616]	@ (8004518 <HAL_ADC_ConfigChannel+0xbec>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x98c>
 80042b4:	4b99      	ldr	r3, [pc, #612]	@ (800451c <HAL_ADC_ConfigChannel+0xbf0>)
 80042b6:	e000      	b.n	80042ba <HAL_ADC_ConfigChannel+0x98e>
 80042b8:	4b99      	ldr	r3, [pc, #612]	@ (8004520 <HAL_ADC_ConfigChannel+0xbf4>)
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fa58 	bl	8002770 <LL_ADC_GetCommonPathInternalCh>
 80042c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a96      	ldr	r2, [pc, #600]	@ (8004524 <HAL_ADC_ConfigChannel+0xbf8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d12b      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d125      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a8d      	ldr	r2, [pc, #564]	@ (8004514 <HAL_ADC_ConfigChannel+0xbe8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_ADC_ConfigChannel+0x9c2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a8b      	ldr	r2, [pc, #556]	@ (8004518 <HAL_ADC_ConfigChannel+0xbec>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x9c6>
 80042ee:	4a8b      	ldr	r2, [pc, #556]	@ (800451c <HAL_ADC_ConfigChannel+0xbf0>)
 80042f0:	e000      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x9c8>
 80042f2:	4a8b      	ldr	r2, [pc, #556]	@ (8004520 <HAL_ADC_ConfigChannel+0xbf4>)
 80042f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f7fe fa23 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004304:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <HAL_ADC_ConfigChannel+0xbfc>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	099b      	lsrs	r3, r3, #6
 800430a:	4a88      	ldr	r2, [pc, #544]	@ (800452c <HAL_ADC_ConfigChannel+0xc00>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004316:	e002      	b.n	800431e <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3b01      	subs	r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f9      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004324:	e045      	b.n	80043b2 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a81      	ldr	r2, [pc, #516]	@ (8004530 <HAL_ADC_ConfigChannel+0xc04>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d11b      	bne.n	8004368 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004338:	2b00      	cmp	r3, #0
 800433a:	d115      	bne.n	8004368 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a74      	ldr	r2, [pc, #464]	@ (8004514 <HAL_ADC_ConfigChannel+0xbe8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_ADC_ConfigChannel+0xa24>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a73      	ldr	r2, [pc, #460]	@ (8004518 <HAL_ADC_ConfigChannel+0xbec>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0xa28>
 8004350:	4a72      	ldr	r2, [pc, #456]	@ (800451c <HAL_ADC_ConfigChannel+0xbf0>)
 8004352:	e000      	b.n	8004356 <HAL_ADC_ConfigChannel+0xa2a>
 8004354:	4a72      	ldr	r2, [pc, #456]	@ (8004520 <HAL_ADC_ConfigChannel+0xbf4>)
 8004356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800435a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe f9f2 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
 8004366:	e024      	b.n	80043b2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a71      	ldr	r2, [pc, #452]	@ (8004534 <HAL_ADC_ConfigChannel+0xc08>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d11f      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004372:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d115      	bne.n	80043aa <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a64      	ldr	r2, [pc, #400]	@ (8004514 <HAL_ADC_ConfigChannel+0xbe8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_ADC_ConfigChannel+0xa66>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a62      	ldr	r2, [pc, #392]	@ (8004518 <HAL_ADC_ConfigChannel+0xbec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_ADC_ConfigChannel+0xa6a>
 8004392:	4a62      	ldr	r2, [pc, #392]	@ (800451c <HAL_ADC_ConfigChannel+0xbf0>)
 8004394:	e000      	b.n	8004398 <HAL_ADC_ConfigChannel+0xa6c>
 8004396:	4a62      	ldr	r2, [pc, #392]	@ (8004520 <HAL_ADC_ConfigChannel+0xbf4>)
 8004398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800439c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7fe f9d1 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
 80043a8:	e003      	b.n	80043b2 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a62      	ldr	r2, [pc, #392]	@ (8004538 <HAL_ADC_ConfigChannel+0xc0c>)
 80043b0:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a61      	ldr	r2, [pc, #388]	@ (800453c <HAL_ADC_ConfigChannel+0xc10>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	f040 80ca 	bne.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 80c3 	bne.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80043e0:	e0b7      	b.n	8004552 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043ea:	d004      	beq.n	80043f6 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80043f0:	4a53      	ldr	r2, [pc, #332]	@ (8004540 <HAL_ADC_ConfigChannel+0xc14>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d106      	bne.n	8004404 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fb55 	bl	8002aae <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f280 80a2 	bge.w	8004552 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a40      	ldr	r2, [pc, #256]	@ (8004514 <HAL_ADC_ConfigChannel+0xbe8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_ADC_ConfigChannel+0xaf6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3e      	ldr	r2, [pc, #248]	@ (8004518 <HAL_ADC_ConfigChannel+0xbec>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <HAL_ADC_ConfigChannel+0xafa>
 8004422:	4b3e      	ldr	r3, [pc, #248]	@ (800451c <HAL_ADC_ConfigChannel+0xbf0>)
 8004424:	e000      	b.n	8004428 <HAL_ADC_ConfigChannel+0xafc>
 8004426:	4b3e      	ldr	r3, [pc, #248]	@ (8004520 <HAL_ADC_ConfigChannel+0xbf4>)
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe f9a1 	bl	8002770 <LL_ADC_GetCommonPathInternalCh>
 800442e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a43      	ldr	r2, [pc, #268]	@ (8004544 <HAL_ADC_ConfigChannel+0xc18>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d115      	bne.n	8004468 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a34      	ldr	r2, [pc, #208]	@ (8004514 <HAL_ADC_ConfigChannel+0xbe8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_ADC_ConfigChannel+0xb24>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a33      	ldr	r2, [pc, #204]	@ (8004518 <HAL_ADC_ConfigChannel+0xbec>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_ADC_ConfigChannel+0xb28>
 8004450:	4a32      	ldr	r2, [pc, #200]	@ (800451c <HAL_ADC_ConfigChannel+0xbf0>)
 8004452:	e000      	b.n	8004456 <HAL_ADC_ConfigChannel+0xb2a>
 8004454:	4a32      	ldr	r2, [pc, #200]	@ (8004520 <HAL_ADC_ConfigChannel+0xbf4>)
 8004456:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800445a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f7fe f972 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
 8004466:	e034      	b.n	80044d2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a36      	ldr	r2, [pc, #216]	@ (8004548 <HAL_ADC_ConfigChannel+0xc1c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d115      	bne.n	800449e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a27      	ldr	r2, [pc, #156]	@ (8004514 <HAL_ADC_ConfigChannel+0xbe8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_ADC_ConfigChannel+0xb5a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a25      	ldr	r2, [pc, #148]	@ (8004518 <HAL_ADC_ConfigChannel+0xbec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_ADC_ConfigChannel+0xb5e>
 8004486:	4a25      	ldr	r2, [pc, #148]	@ (800451c <HAL_ADC_ConfigChannel+0xbf0>)
 8004488:	e000      	b.n	800448c <HAL_ADC_ConfigChannel+0xb60>
 800448a:	4a25      	ldr	r2, [pc, #148]	@ (8004520 <HAL_ADC_ConfigChannel+0xbf4>)
 800448c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004490:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7fe f957 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
 800449c:	e019      	b.n	80044d2 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a24      	ldr	r2, [pc, #144]	@ (8004534 <HAL_ADC_ConfigChannel+0xc08>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d114      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a19      	ldr	r2, [pc, #100]	@ (8004514 <HAL_ADC_ConfigChannel+0xbe8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_ADC_ConfigChannel+0xb90>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	@ (8004518 <HAL_ADC_ConfigChannel+0xbec>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0xb94>
 80044bc:	4a17      	ldr	r2, [pc, #92]	@ (800451c <HAL_ADC_ConfigChannel+0xbf0>)
 80044be:	e000      	b.n	80044c2 <HAL_ADC_ConfigChannel+0xb96>
 80044c0:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <HAL_ADC_ConfigChannel+0xbf4>)
 80044c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044c6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7fe f93c 	bl	800274a <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a19      	ldr	r2, [pc, #100]	@ (800453c <HAL_ADC_ConfigChannel+0xc10>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d13a      	bne.n	8004552 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d134      	bne.n	8004552 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80044fc:	e029      	b.n	8004552 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004510:	e01f      	b.n	8004552 <HAL_ADC_ConfigChannel+0xc26>
 8004512:	bf00      	nop
 8004514:	42028000 	.word	0x42028000
 8004518:	42028100 	.word	0x42028100
 800451c:	42028300 	.word	0x42028300
 8004520:	46021300 	.word	0x46021300
 8004524:	b6002000 	.word	0xb6002000
 8004528:	20000004 	.word	0x20000004
 800452c:	053e2d63 	.word	0x053e2d63
 8004530:	ba004000 	.word	0xba004000
 8004534:	80000001 	.word	0x80000001
 8004538:	b2001000 	.word	0xb2001000
 800453c:	d7200000 	.word	0xd7200000
 8004540:	80000010 	.word	0x80000010
 8004544:	ce080000 	.word	0xce080000
 8004548:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004550:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 800455a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800455e:	4618      	mov	r0, r3
 8004560:	37dc      	adds	r7, #220	@ 0xdc
 8004562:	46bd      	mov	sp, r7
 8004564:	bd90      	pop	{r4, r7, pc}
 8004566:	bf00      	nop

08004568 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <__NVIC_SetPriorityGrouping>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c8:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <__NVIC_SetPriorityGrouping+0x44>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045d4:	4013      	ands	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ea:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <__NVIC_SetPriorityGrouping+0x44>)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	60d3      	str	r3, [r2, #12]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <__NVIC_GetPriorityGrouping>:
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004604:	4b04      	ldr	r3, [pc, #16]	@ (8004618 <__NVIC_GetPriorityGrouping+0x18>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	f003 0307 	and.w	r3, r3, #7
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00

0800461c <__NVIC_EnableIRQ>:
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800462a:	2b00      	cmp	r3, #0
 800462c:	db0b      	blt.n	8004646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	4907      	ldr	r1, [pc, #28]	@ (8004654 <__NVIC_EnableIRQ+0x38>)
 8004636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2001      	movs	r0, #1
 800463e:	fa00 f202 	lsl.w	r2, r0, r2
 8004642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000e100 	.word	0xe000e100

08004658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	6039      	str	r1, [r7, #0]
 8004662:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004668:	2b00      	cmp	r3, #0
 800466a:	db0a      	blt.n	8004682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	490c      	ldr	r1, [pc, #48]	@ (80046a4 <__NVIC_SetPriority+0x4c>)
 8004672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	440b      	add	r3, r1
 800467c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004680:	e00a      	b.n	8004698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4908      	ldr	r1, [pc, #32]	@ (80046a8 <__NVIC_SetPriority+0x50>)
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	3b04      	subs	r3, #4
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	440b      	add	r3, r1
 8004696:	761a      	strb	r2, [r3, #24]
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	e000e100 	.word	0xe000e100
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	@ 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f1c3 0307 	rsb	r3, r3, #7
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	bf28      	it	cs
 80046ca:	2304      	movcs	r3, #4
 80046cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3304      	adds	r3, #4
 80046d2:	2b06      	cmp	r3, #6
 80046d4:	d902      	bls.n	80046dc <NVIC_EncodePriority+0x30>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3b03      	subs	r3, #3
 80046da:	e000      	b.n	80046de <NVIC_EncodePriority+0x32>
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43da      	mvns	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	401a      	ands	r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046f4:	f04f 31ff 	mov.w	r1, #4294967295
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	43d9      	mvns	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004704:	4313      	orrs	r3, r2
         );
}
 8004706:	4618      	mov	r0, r3
 8004708:	3724      	adds	r7, #36	@ 0x24
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ff4c 	bl	80045b8 <__NVIC_SetPriorityGrouping>
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004736:	f7ff ff63 	bl	8004600 <__NVIC_GetPriorityGrouping>
 800473a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	6978      	ldr	r0, [r7, #20]
 8004742:	f7ff ffb3 	bl	80046ac <NVIC_EncodePriority>
 8004746:	4602      	mov	r2, r0
 8004748:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff ff82 	bl	8004658 <__NVIC_SetPriority>
}
 8004754:	bf00      	nop
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff ff56 	bl	800461c <__NVIC_EnableIRQ>
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b04      	cmp	r3, #4
 8004784:	d844      	bhi.n	8004810 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004786:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047af 	.word	0x080047af
 8004790:	080047cd 	.word	0x080047cd
 8004794:	080047ef 	.word	0x080047ef
 8004798:	08004811 	.word	0x08004811
 800479c:	080047a1 	.word	0x080047a1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80047a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004820 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004820 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	6013      	str	r3, [r2, #0]
      break;
 80047ac:	e031      	b.n	8004812 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80047ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004820 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80047b4:	f023 0304 	bic.w	r3, r3, #4
 80047b8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80047ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80047bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047c0:	4a18      	ldr	r2, [pc, #96]	@ (8004824 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80047c2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80047c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80047ca:	e022      	b.n	8004812 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80047cc:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a13      	ldr	r2, [pc, #76]	@ (8004820 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80047d2:	f023 0304 	bic.w	r3, r3, #4
 80047d6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80047da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047de:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80047e2:	4a10      	ldr	r2, [pc, #64]	@ (8004824 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80047e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80047ec:	e011      	b.n	8004812 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80047ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a0b      	ldr	r2, [pc, #44]	@ (8004820 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80047fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80047fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004800:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004804:	4a07      	ldr	r2, [pc, #28]	@ (8004824 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004806:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800480a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800480e:	e000      	b.n	8004812 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004810:	bf00      	nop
  }
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e010 	.word	0xe000e010
 8004824:	46020c00 	.word	0x46020c00

08004828 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e054      	b.n	80048e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7f5b      	ldrb	r3, [r3, #29]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd fa08 	bl	8001c60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	791b      	ldrb	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10c      	bne.n	8004878 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a22      	ldr	r2, [pc, #136]	@ (80048ec <HAL_CRC_Init+0xc4>)
 8004864:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0218 	bic.w	r2, r2, #24
 8004874:	609a      	str	r2, [r3, #8]
 8004876:	e00c      	b.n	8004892 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6899      	ldr	r1, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	461a      	mov	r2, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f834 	bl	80048f0 <HAL_CRCEx_Polynomial_Set>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e028      	b.n	80048e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	795b      	ldrb	r3, [r3, #5]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f04f 32ff 	mov.w	r2, #4294967295
 80048a2:	611a      	str	r2, [r3, #16]
 80048a4:	e004      	b.n	80048b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6912      	ldr	r2, [r2, #16]
 80048ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	04c11db7 	.word	0x04c11db7

080048f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004900:	231f      	movs	r3, #31
 8004902:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	75fb      	strb	r3, [r7, #23]
 8004912:	e063      	b.n	80049dc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004914:	bf00      	nop
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1e5a      	subs	r2, r3, #1
 800491a:	613a      	str	r2, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HAL_CRCEx_Polynomial_Set+0x44>
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b18      	cmp	r3, #24
 8004938:	d846      	bhi.n	80049c8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800493a:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <HAL_CRCEx_Polynomial_Set+0x50>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	080049cf 	.word	0x080049cf
 8004944:	080049c9 	.word	0x080049c9
 8004948:	080049c9 	.word	0x080049c9
 800494c:	080049c9 	.word	0x080049c9
 8004950:	080049c9 	.word	0x080049c9
 8004954:	080049c9 	.word	0x080049c9
 8004958:	080049c9 	.word	0x080049c9
 800495c:	080049c9 	.word	0x080049c9
 8004960:	080049bd 	.word	0x080049bd
 8004964:	080049c9 	.word	0x080049c9
 8004968:	080049c9 	.word	0x080049c9
 800496c:	080049c9 	.word	0x080049c9
 8004970:	080049c9 	.word	0x080049c9
 8004974:	080049c9 	.word	0x080049c9
 8004978:	080049c9 	.word	0x080049c9
 800497c:	080049c9 	.word	0x080049c9
 8004980:	080049b1 	.word	0x080049b1
 8004984:	080049c9 	.word	0x080049c9
 8004988:	080049c9 	.word	0x080049c9
 800498c:	080049c9 	.word	0x080049c9
 8004990:	080049c9 	.word	0x080049c9
 8004994:	080049c9 	.word	0x080049c9
 8004998:	080049c9 	.word	0x080049c9
 800499c:	080049c9 	.word	0x080049c9
 80049a0:	080049a5 	.word	0x080049a5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d913      	bls.n	80049d2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80049ae:	e010      	b.n	80049d2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b07      	cmp	r3, #7
 80049b4:	d90f      	bls.n	80049d6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80049ba:	e00c      	b.n	80049d6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b0f      	cmp	r3, #15
 80049c0:	d90b      	bls.n	80049da <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80049c6:	e008      	b.n	80049da <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
        break;
 80049cc:	e006      	b.n	80049dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80049ce:	bf00      	nop
 80049d0:	e004      	b.n	80049dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80049da:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f023 0118 	bic.w	r1, r3, #24
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e053      	b.n	8004ac6 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fd f936 	bl	8001ca4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6851      	ldr	r1, [r2, #4]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	69d2      	ldr	r2, [r2, #28]
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a66:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6891      	ldr	r1, [r2, #8]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6992      	ldr	r2, [r2, #24]
 8004a76:	4311      	orrs	r1, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	0c1b      	lsrs	r3, r3, #16
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68d1      	ldr	r1, [r2, #12]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	430b      	orrs	r3, r1
 8004a94:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a9c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	051a      	lsls	r2, r3, #20
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	055b      	lsls	r3, r3, #21
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d026      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d021      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b08:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b0e:	f043 0201 	orr.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2204      	movs	r2, #4
 8004b22:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d026      	beq.n	8004b96 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d021      	beq.n	8004b96 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b60:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2220      	movs	r2, #32
 8004b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b6e:	f043 0202 	orr.w	r2, r3, #2
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2204      	movs	r2, #4
 8004b7a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d026      	beq.n	8004bee <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d021      	beq.n	8004bee <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bc6:	f043 0204 	orr.w	r2, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d013      	beq.n	8004c20 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00e      	beq.n	8004c20 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2204      	movs	r2, #4
 8004c18:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f853 	bl	8004cc6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d024      	beq.n	8004c74 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01f      	beq.n	8004c74 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c42:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01f      	beq.n	8004cbe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01a      	beq.n	8004cbe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c96:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f80e 	bl	8004cda <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_DMA2D_ConfigLayer+0x24>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e092      	b.n	8004e3a <HAL_DMA2D_ConfigLayer+0x14a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	3328      	adds	r3, #40	@ 0x28
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4413      	add	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004d48:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004d54:	4b3c      	ldr	r3, [pc, #240]	@ (8004e48 <HAL_DMA2D_ConfigLayer+0x158>)
 8004d56:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b0a      	cmp	r3, #10
 8004d5e:	d003      	beq.n	8004d68 <HAL_DMA2D_ConfigLayer+0x78>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b09      	cmp	r3, #9
 8004d66:	d107      	bne.n	8004d78 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	e005      	b.n	8004d84 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d120      	bne.n	8004dcc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	43db      	mvns	r3, r3
 8004d94:	ea02 0103 	and.w	r1, r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b0a      	cmp	r3, #10
 8004db2:	d003      	beq.n	8004dbc <HAL_DMA2D_ConfigLayer+0xcc>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b09      	cmp	r3, #9
 8004dba:	d135      	bne.n	8004e28 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004dc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dca:	e02d      	b.n	8004e28 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b0b      	cmp	r3, #11
 8004dd2:	d109      	bne.n	8004de8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	049b      	lsls	r3, r3, #18
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8004de6:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	ea02 0103 	and.w	r1, r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b0a      	cmp	r3, #10
 8004e10:	d003      	beq.n	8004e1a <HAL_DMA2D_ConfigLayer+0x12a>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b09      	cmp	r3, #9
 8004e18:	d106      	bne.n	8004e28 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004e26:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	ff33000f 	.word	0xff33000f

08004e4c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	019a      	lsls	r2, r3, #6
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	431a      	orrs	r2, r3
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e8c:	f7fd fbce 	bl	800262c <HAL_GetTick>
 8004e90:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e92:	e008      	b.n	8004ea6 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004e94:	f7fd fbca 	bl	800262c <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ea0:	d901      	bls.n	8004ea6 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e015      	b.n	8004ed2 <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ef      	beq.n	8004e94 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	019a      	lsls	r2, r3, #6
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	ea42 0103 	orr.w	r1, r2, r3
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	041a      	lsls	r2, r3, #16
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8004ef2:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	00da      	lsls	r2, r3, #3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	220e      	movs	r2, #14
 8004f14:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 021f 	bic.w	r2, r2, #31
 8004f28:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6912      	ldr	r2, [r2, #16]
 8004f34:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	220e      	movs	r2, #14
 8004f3e:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 021f 	bic.w	r2, r2, #31
 8004f52:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6912      	ldr	r2, [r2, #16]
 8004f5e:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	220e      	movs	r2, #14
 8004f68:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004f7c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004f90:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d007      	beq.n	8004fac <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d003      	beq.n	8004fac <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	d10a      	bne.n	8004fc2 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8004fc0:	e02c      	b.n	800501c <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d007      	beq.n	8004fe2 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d003      	beq.n	8004fe2 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d10a      	bne.n	8004ff8 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 8004ff6:	e011      	b.n	800501c <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b07      	cmp	r3, #7
 8004ffe:	d003      	beq.n	8005008 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8005004:	2b08      	cmp	r3, #8
 8005006:	d109      	bne.n	800501c <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2220      	movs	r2, #32
 800500e:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2220      	movs	r2, #32
 8005018:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 020f 	bic.w	r2, r2, #15
 800502c:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 020f 	bic.w	r2, r2, #15
 8005040:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6952      	ldr	r2, [r2, #20]
 800504c:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6952      	ldr	r2, [r2, #20]
 8005058:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8005082:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	075a      	lsls	r2, r3, #29
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80050ae:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	031a      	lsls	r2, r3, #12
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	021a      	lsls	r2, r3, #8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e124      	b.n	800534e <HAL_DSI_Init+0x25e>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	7e5b      	ldrb	r3, [r3, #25]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fc fdf0 	bl	8001cf4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2203      	movs	r2, #3
 8005118:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800512a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 800512e:	2002      	movs	r0, #2
 8005130:	f7fd fa88 	bl	8002644 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b85      	ldr	r3, [pc, #532]	@ (8005358 <HAL_DSI_Init+0x268>)
 8005142:	400b      	ands	r3, r1
 8005144:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800515c:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005164:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005170:	2300      	movs	r3, #0
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	693b      	ldr	r3, [r7, #16]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8005198:	2001      	movs	r0, #1
 800519a:	f7fd fa53 	bl	8002644 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800519e:	f7fd fa45 	bl	800262c <HAL_GetTick>
 80051a2:	6178      	str	r0, [r7, #20]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_DSI_Init+0xc8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80051a6:	f7fd fa41 	bl	800262c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b64      	cmp	r3, #100	@ 0x64
 80051b2:	d901      	bls.n	80051b8 <HAL_DSI_Init+0xc8>
    {
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0ca      	b.n	800534e <HAL_DSI_Init+0x25e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80051c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0ee      	beq.n	80051a6 <HAL_DSI_Init+0xb6>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80051f8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6899      	ldr	r1, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0202 	orr.w	r2, r2, #2
 800521c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff fe5a 	bl	8004eda <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8005226:	6839      	ldr	r1, [r7, #0]
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ff1d 	bl	8005068 <DSI_SetWrapperPLLTuning>

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0204 	orr.w	r2, r2, #4
 800523e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0203 	bic.w	r2, r2, #3
 8005252:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 800526c:	f7fd f9de 	bl	800262c <HAL_GetTick>
 8005270:	6178      	str	r0, [r7, #20]
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d121      	bne.n	80052c6 <HAL_DSI_Init+0x1d6>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8005282:	e00b      	b.n	800529c <HAL_DSI_Init+0x1ac>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005284:	f7fd f9d2 	bl	800262c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	@ 0x64
 8005290:	d904      	bls.n	800529c <HAL_DSI_Init+0x1ac>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e058      	b.n	800534e <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052a4:	f003 0314 	and.w	r3, r3, #20
 80052a8:	2b14      	cmp	r3, #20
 80052aa:	d1eb      	bne.n	8005284 <HAL_DSI_Init+0x194>
 80052ac:	e013      	b.n	80052d6 <HAL_DSI_Init+0x1e6>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80052ae:	f7fd f9bd 	bl	800262c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	@ 0x64
 80052ba:	d904      	bls.n	80052c6 <HAL_DSI_Init+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e043      	b.n	800534e <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052ce:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80052d2:	2b94      	cmp	r3, #148	@ 0x94
 80052d4:	d1eb      	bne.n	80052ae <HAL_DSI_Init+0x1be>


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	621a      	str	r2, [r3, #32]

  __HAL_DSI_DISABLE(hdsi);
 80052f0:	2300      	movs	r3, #0
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	605a      	str	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0203 	bic.w	r2, r2, #3
 8005322:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e0000003 	.word	0xe0000003

0800535c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	7e1b      	ldrb	r3, [r3, #24]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_DSI_ConfigErrorMonitor+0x16>
 800536e:	2302      	movs	r3, #2
 8005370:	e0ba      	b.n	80054e8 <HAL_DSI_ConfigErrorMonitor+0x18c>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2200      	movs	r2, #0
 800537e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80053ac:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80053b0:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80053ce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0202 	orr.w	r2, r2, #2
 800540a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d009      	beq.n	800542c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 020c 	orr.w	r2, r2, #12
 8005428:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0210 	orr.w	r2, r2, #16
 8005446:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0220 	orr.w	r2, r2, #32
 8005464:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005482:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 80054be:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80054dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00f      	beq.n	800552c <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2201      	movs	r2, #1
 8005522:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f00c fac2 	bl	8011ab0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00f      	beq.n	800555c <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2202      	movs	r2, #2
 8005552:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f00c fac0 	bl	8011adc <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8097 	beq.w	8005694 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800556e:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005586:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f043 0202 	orr.w	r2, r3, #2
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f043 0208 	orr.w	r2, r3, #8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f043 0210 	orr.w	r2, r3, #16
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f804 	bl	800569c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	7e1b      	ldrb	r3, [r3, #24]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_DSI_SetGenericVCID+0x16>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e019      	b.n	80056fa <HAL_DSI_SetGenericVCID+0x4a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 80056da:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	7e1b      	ldrb	r3, [r3, #24]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8005718:	2302      	movs	r3, #2
 800571a:	e0c5      	b.n	80058a8 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0203 	bic.w	r2, r2, #3
 8005768:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68d9      	ldr	r1, [r3, #12]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0207 	bic.w	r2, r2, #7
 800578a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6959      	ldr	r1, [r3, #20]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	69da      	ldr	r2, [r3, #28]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	431a      	orrs	r2, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 020f 	bic.w	r2, r2, #15
 80057b8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6919      	ldr	r1, [r3, #16]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 020e 	bic.w	r2, r2, #14
 80057dc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	005a      	lsls	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	041b      	lsls	r3, r3, #16
 8005806:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800582a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	431a      	orrs	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0202 	orr.w	r2, r2, #2
 800589c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7e1b      	ldrb	r3, [r3, #24]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_DSI_ConfigCommand+0x16>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e049      	b.n	800595e <HAL_DSI_ConfigCommand+0xaa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b24      	ldr	r3, [pc, #144]	@ (800596c <HAL_DSI_ConfigCommand+0xb8>)
 80058dc:	400b      	ands	r3, r1
 80058de:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80058ee:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80058f4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80058fa:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8005900:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8005906:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800590c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8005912:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8005918:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800591e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8005924:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800592a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0202 	bic.w	r2, r2, #2
 8005942:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	fef080ff 	.word	0xfef080ff

08005970 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	7e1b      	ldrb	r3, [r3, #24]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_DSI_ConfigFlowControl+0x16>
 8005982:	2302      	movs	r3, #2
 8005984:	e016      	b.n	80059b4 <HAL_DSI_ConfigFlowControl+0x44>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800599a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7e1b      	ldrb	r3, [r3, #24]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_DSI_ConfigPhyTimer+0x16>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e084      	b.n	8005ae0 <HAL_DSI_ConfigPhyTimer+0x120>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	441a      	add	r2, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6859      	ldr	r1, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	18ca      	adds	r2, r1, r3
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	441a      	add	r2, r3
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4293      	cmp	r3, r2
 8005a18:	bf38      	it	cc
 8005a1a:	4613      	movcc	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8005a2e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	041a      	lsls	r2, r3, #16
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8005a5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005a8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005a92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005abc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	021a      	lsls	r2, r3, #8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	7e1b      	ldrb	r3, [r3, #24]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_DSI_ConfigHostTimeouts+0x16>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e0b4      	b.n	8005c6c <HAL_DSI_ConfigHostTimeouts+0x180>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005b16:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6899      	ldr	r1, [r3, #8]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	021a      	lsls	r2, r3, #8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	b292      	uxth	r2, r2
 8005b38:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	041a      	lsls	r2, r3, #16
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	0c1b      	lsrs	r3, r3, #16
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	0c1b      	lsrs	r3, r3, #16
 8005ba0:	041b      	lsls	r3, r3, #16
 8005ba2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	0c1b      	lsrs	r3, r3, #16
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6a1a      	ldr	r2, [r3, #32]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	7e1b      	ldrb	r3, [r3, #24]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_DSI_Start+0x14>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e02b      	b.n	8005ce4 <HAL_DSI_Start+0x6c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0208 	orr.w	r2, r2, #8
 8005cc8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	7e1b      	ldrb	r3, [r3, #24]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_DSI_Refresh+0x14>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e010      	b.n	8005d26 <HAL_DSI_Refresh+0x36>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	761a      	strb	r2, [r3, #24]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0204 	orr.w	r2, r2, #4
 8005d1a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b088      	sub	sp, #32
 8005d36:	af02      	add	r7, sp, #8
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	7e1b      	ldrb	r3, [r3, #24]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_DSI_ShortWrite+0x1a>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e010      	b.n	8005d6e <HAL_DSI_ShortWrite+0x3c>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7ff f88e 	bl	8004e7e <DSI_ShortWrite>
 8005d62:	4603      	mov	r3, r0
 8005d64:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	761a      	strb	r2, [r3, #24]

  return status;
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b08c      	sub	sp, #48	@ 0x30
 8005d7a:	af02      	add	r7, sp, #8
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8005d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d86:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	7e1b      	ldrb	r3, [r3, #24]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_DSI_LongWrite+0x1e>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e083      	b.n	8005e9c <HAL_DSI_LongWrite+0x126>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d9a:	f7fc fc47 	bl	800262c <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005da0:	e00b      	b.n	8005dba <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005da2:	f7fc fc43 	bl	800262c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b64      	cmp	r3, #100	@ 0x64
 8005dae:	d904      	bls.n	8005dba <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e070      	b.n	8005e9c <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0ec      	beq.n	8005da2 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	bf28      	it	cs
 8005dd2:	2303      	movcs	r3, #3
 8005dd4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	623b      	str	r3, [r7, #32]
 8005dda:	e00f      	b.n	8005dfc <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	4413      	add	r3, r2
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	3301      	adds	r3, #1
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	623b      	str	r3, [r7, #32]
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3eb      	bcc.n	8005ddc <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	4413      	add	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005e1c:	e028      	b.n	8005e70 <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	bf28      	it	cs
 8005e24:	2304      	movcs	r3, #4
 8005e26:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	e00e      	b.n	8005e50 <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	4413      	add	r3, r2
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	623b      	str	r3, [r7, #32]
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d3ec      	bcc.n	8005e32 <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 8005e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1d3      	bne.n	8005e1e <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005e7e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	f7fe ffdc 	bl	8004e4c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3728      	adds	r7, #40	@ 0x28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	@ 0x24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005eb6:	e1ba      	b.n	800622e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 81aa 	beq.w	8006228 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a55      	ldr	r2, [pc, #340]	@ (800602c <HAL_GPIO_Init+0x188>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d15d      	bne.n	8005f98 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f003 0201 	and.w	r2, r3, #1
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005f0c:	4a48      	ldr	r2, [pc, #288]	@ (8006030 <HAL_GPIO_Init+0x18c>)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f14:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005f16:	4a46      	ldr	r2, [pc, #280]	@ (8006030 <HAL_GPIO_Init+0x18c>)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	08da      	lsrs	r2, r3, #3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3208      	adds	r2, #8
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	220f      	movs	r2, #15
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	4013      	ands	r3, r2
 8005f44:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	220b      	movs	r2, #11
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	08da      	lsrs	r2, r3, #3
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3208      	adds	r2, #8
 8005f62:	69f9      	ldr	r1, [r7, #28]
 8005f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	2203      	movs	r2, #3
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	2202      	movs	r2, #2
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	e067      	b.n	8006068 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d003      	beq.n	8005fa8 <HAL_GPIO_Init+0x104>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b12      	cmp	r3, #18
 8005fa6:	d145      	bne.n	8006034 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	08da      	lsrs	r2, r3, #3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3208      	adds	r2, #8
 8005fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	220f      	movs	r2, #15
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 020f 	and.w	r2, r3, #15
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	08da      	lsrs	r2, r3, #3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3208      	adds	r2, #8
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	2203      	movs	r2, #3
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	4013      	ands	r3, r2
 800600a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 0203 	and.w	r2, r3, #3
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	005b      	lsls	r3, r3, #1
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	4313      	orrs	r3, r2
 8006020:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e01e      	b.n	8006068 <HAL_GPIO_Init+0x1c4>
 800602a:	bf00      	nop
 800602c:	46020000 	.word	0x46020000
 8006030:	0802cb98 	.word	0x0802cb98
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	2203      	movs	r2, #3
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	4013      	ands	r3, r2
 800604a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 0203 	and.w	r2, r3, #3
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	4313      	orrs	r3, r2
 8006060:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d00b      	beq.n	8006088 <HAL_GPIO_Init+0x1e4>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d007      	beq.n	8006088 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800607c:	2b11      	cmp	r3, #17
 800607e:	d003      	beq.n	8006088 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b12      	cmp	r3, #18
 8006086:	d130      	bne.n	80060ea <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	2203      	movs	r2, #3
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	4013      	ands	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80060be:	2201      	movs	r2, #1
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	43db      	mvns	r3, r3
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 0201 	and.w	r2, r3, #1
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d017      	beq.n	8006122 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	2203      	movs	r2, #3
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	43db      	mvns	r3, r3
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	4013      	ands	r3, r2
 8006108:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	4313      	orrs	r3, r2
 800611a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d07c      	beq.n	8006228 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800612e:	4a47      	ldr	r2, [pc, #284]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	089b      	lsrs	r3, r3, #2
 8006134:	3318      	adds	r3, #24
 8006136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	220f      	movs	r2, #15
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43db      	mvns	r3, r3
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	4013      	ands	r3, r2
 8006150:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	0a9a      	lsrs	r2, r3, #10
 8006156:	4b3e      	ldr	r3, [pc, #248]	@ (8006250 <HAL_GPIO_Init+0x3ac>)
 8006158:	4013      	ands	r3, r2
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	f002 0203 	and.w	r2, r2, #3
 8006160:	00d2      	lsls	r2, r2, #3
 8006162:	4093      	lsls	r3, r2
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	4313      	orrs	r3, r2
 8006168:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800616a:	4938      	ldr	r1, [pc, #224]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	089b      	lsrs	r3, r3, #2
 8006170:	3318      	adds	r3, #24
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006178:	4b34      	ldr	r3, [pc, #208]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	43db      	mvns	r3, r3
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	4013      	ands	r3, r2
 8006186:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800619c:	4a2b      	ldr	r2, [pc, #172]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80061a2:	4b2a      	ldr	r3, [pc, #168]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	43db      	mvns	r3, r3
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	4013      	ands	r3, r2
 80061b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80061c6:	4a21      	ldr	r2, [pc, #132]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80061cc:	4b1f      	ldr	r3, [pc, #124]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 80061ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	4013      	ands	r3, r2
 80061dc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80061f2:	4a16      	ldr	r2, [pc, #88]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80061fa:	4b14      	ldr	r3, [pc, #80]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 80061fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006200:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	43db      	mvns	r3, r3
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	4013      	ands	r3, r2
 800620a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8006220:	4a0a      	ldr	r2, [pc, #40]	@ (800624c <HAL_GPIO_Init+0x3a8>)
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	3301      	adds	r3, #1
 800622c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	f47f ae3d 	bne.w	8005eb8 <HAL_GPIO_Init+0x14>
  }
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	3724      	adds	r7, #36	@ 0x24
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	46022000 	.word	0x46022000
 8006250:	002f7f7f 	.word	0x002f7f7f

08006254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	807b      	strh	r3, [r7, #2]
 8006260:	4613      	mov	r3, r2
 8006262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006264:	787b      	ldrb	r3, [r7, #1]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800626a:	887a      	ldrh	r2, [r7, #2]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8006270:	e002      	b.n	8006278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8006272:	887a      	ldrh	r2, [r7, #2]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e01c      	b.n	80062d0 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	795b      	ldrb	r3, [r3, #5]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fb fdbc 	bl	8001e1c <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_GPU2D_Init+0x32>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e00c      	b.n	80062d0 <HAL_GPU2D_Init+0x4c>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	4413      	add	r3, r2
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]

  return value;
 80062ee:	68fb      	ldr	r3, [r7, #12]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4413      	add	r3, r2
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	33f8      	adds	r3, #248	@ 0xf8
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d013      	beq.n	8006368 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	33f8      	adds	r3, #248	@ 0xf8
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f023 0201 	bic.w	r2, r3, #1
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8006360:	68f9      	ldr	r1, [r7, #12]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f00c ff0a 	bl	801317c <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8006368:	bf00      	nop
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e08d      	b.n	800649e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fb fd78 	bl	8001e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2224      	movs	r2, #36	@ 0x24
 80063a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d107      	bne.n	80063ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063e6:	609a      	str	r2, [r3, #8]
 80063e8:	e006      	b.n	80063f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d108      	bne.n	8006412 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	e007      	b.n	8006422 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006420:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006434:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006444:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69d9      	ldr	r1, [r3, #28]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d138      	bne.n	800652e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e032      	b.n	8006530 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2224      	movs	r2, #36	@ 0x24
 80064d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0201 	bic.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e000      	b.n	8006530 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800652e:	2302      	movs	r3, #2
  }
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b20      	cmp	r3, #32
 8006550:	d139      	bne.n	80065c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800655c:	2302      	movs	r3, #2
 800655e:	e033      	b.n	80065c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	@ 0x24
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800658e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0201 	orr.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e000      	b.n	80065c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065c6:	2302      	movs	r3, #2
  }
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <HAL_ICACHE_Enable+0x1c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a04      	ldr	r2, [pc, #16]	@ (80065f0 <HAL_ICACHE_Enable+0x1c>)
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	40030400 	.word	0x40030400

080065f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e0bf      	b.n	8006786 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fcb0 	bl	8001f80 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006636:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800664c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6899      	ldr	r1, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b4a      	ldr	r3, [pc, #296]	@ (8006790 <HAL_LTDC_Init+0x19c>)
 8006668:	400b      	ands	r3, r1
 800666a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6899      	ldr	r1, [r3, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68d9      	ldr	r1, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	4b3e      	ldr	r3, [pc, #248]	@ (8006790 <HAL_LTDC_Init+0x19c>)
 8006696:	400b      	ands	r3, r1
 8006698:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	041b      	lsls	r3, r3, #16
 80066a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68d9      	ldr	r1, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1a      	ldr	r2, [r3, #32]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6919      	ldr	r1, [r3, #16]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b33      	ldr	r3, [pc, #204]	@ (8006790 <HAL_LTDC_Init+0x19c>)
 80066c4:	400b      	ands	r3, r1
 80066c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6919      	ldr	r1, [r3, #16]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6959      	ldr	r1, [r3, #20]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b27      	ldr	r3, [pc, #156]	@ (8006790 <HAL_LTDC_Init+0x19c>)
 80066f2:	400b      	ands	r3, r1
 80066f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	041b      	lsls	r3, r3, #16
 80066fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6959      	ldr	r1, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006724:	041b      	lsls	r3, r3, #16
 8006726:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0206 	orr.w	r2, r2, #6
 8006762:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	f000f800 	.word	0xf000f800

08006794 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d023      	beq.n	80067fe <HAL_LTDC_IRQHandler+0x6a>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01e      	beq.n	80067fe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0204 	bic.w	r2, r2, #4
 80067ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2204      	movs	r2, #4
 80067d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80067de:	f043 0201 	orr.w	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2204      	movs	r2, #4
 80067ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f86f 	bl	80068dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d023      	beq.n	8006850 <HAL_LTDC_IRQHandler+0xbc>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01e      	beq.n	8006850 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0202 	bic.w	r2, r2, #2
 8006820:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2202      	movs	r2, #2
 8006828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006830:	f043 0202 	orr.w	r2, r3, #2
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2204      	movs	r2, #4
 800683e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f846 	bl	80068dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01b      	beq.n	8006892 <HAL_LTDC_IRQHandler+0xfe>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d016      	beq.n	8006892 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2201      	movs	r2, #1
 800687a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f82f 	bl	80068f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01b      	beq.n	80068d4 <HAL_LTDC_IRQHandler+0x140>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d016      	beq.n	80068d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0208 	bic.w	r2, r2, #8
 80068b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2208      	movs	r2, #8
 80068bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f818 	bl	8006904 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006918:	b5b0      	push	{r4, r5, r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_LTDC_ConfigLayer+0x1a>
 800692e:	2302      	movs	r3, #2
 8006930:	e02c      	b.n	800698c <HAL_LTDC_ConfigLayer+0x74>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2134      	movs	r1, #52	@ 0x34
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4614      	mov	r4, r2
 8006956:	461d      	mov	r5, r3
 8006958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800695c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f811 	bl	8006994 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2201      	movs	r2, #1
 8006978:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bdb0      	pop	{r4, r5, r7, pc}

08006994 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006994:	b480      	push	{r7}
 8006996:	b089      	sub	sp, #36	@ 0x24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	0c1b      	lsrs	r3, r3, #16
 80069ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b0:	4413      	add	r3, r2
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	01db      	lsls	r3, r3, #7
 80069c0:	4413      	add	r3, r2
 80069c2:	3384      	adds	r3, #132	@ 0x84
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	4611      	mov	r1, r2
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	01d2      	lsls	r2, r2, #7
 80069d0:	440a      	add	r2, r1
 80069d2:	3284      	adds	r2, #132	@ 0x84
 80069d4:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80069d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	0c1b      	lsrs	r3, r3, #16
 80069e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80069ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4619      	mov	r1, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	01db      	lsls	r3, r3, #7
 80069f8:	440b      	add	r3, r1
 80069fa:	3384      	adds	r3, #132	@ 0x84
 80069fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a02:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a12:	4413      	add	r3, r2
 8006a14:	041b      	lsls	r3, r3, #16
 8006a16:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	01db      	lsls	r3, r3, #7
 8006a22:	4413      	add	r3, r2
 8006a24:	3384      	adds	r3, #132	@ 0x84
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	01d2      	lsls	r2, r2, #7
 8006a32:	440a      	add	r2, r1
 8006a34:	3284      	adds	r2, #132	@ 0x84
 8006a36:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8006a3a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a4a:	4413      	add	r3, r2
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4619      	mov	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	01db      	lsls	r3, r3, #7
 8006a58:	440b      	add	r3, r1
 8006a5a:	3384      	adds	r3, #132	@ 0x84
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	01db      	lsls	r3, r3, #7
 8006a6e:	4413      	add	r3, r2
 8006a70:	3384      	adds	r3, #132	@ 0x84
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	4611      	mov	r1, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	01d2      	lsls	r2, r2, #7
 8006a7e:	440a      	add	r2, r1
 8006a80:	3284      	adds	r2, #132	@ 0x84
 8006a82:	f023 0307 	bic.w	r3, r3, #7
 8006a86:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	01db      	lsls	r3, r3, #7
 8006a92:	4413      	add	r3, r2
 8006a94:	3384      	adds	r3, #132	@ 0x84
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	061b      	lsls	r3, r3, #24
 8006ab8:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	01db      	lsls	r3, r3, #7
 8006ad4:	440b      	add	r3, r1
 8006ad6:	3384      	adds	r3, #132	@ 0x84
 8006ad8:	4619      	mov	r1, r3
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	01db      	lsls	r3, r3, #7
 8006aea:	4413      	add	r3, r2
 8006aec:	3384      	adds	r3, #132	@ 0x84
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	6812      	ldr	r2, [r2, #0]
 8006af4:	4611      	mov	r1, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	01d2      	lsls	r2, r2, #7
 8006afa:	440a      	add	r2, r1
 8006afc:	3284      	adds	r2, #132	@ 0x84
 8006afe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b02:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	01db      	lsls	r3, r3, #7
 8006b0e:	4413      	add	r3, r2
 8006b10:	3384      	adds	r3, #132	@ 0x84
 8006b12:	461a      	mov	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	01db      	lsls	r3, r3, #7
 8006b24:	4413      	add	r3, r2
 8006b26:	3384      	adds	r3, #132	@ 0x84
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	6812      	ldr	r2, [r2, #0]
 8006b2e:	4611      	mov	r1, r2
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	01d2      	lsls	r2, r2, #7
 8006b34:	440a      	add	r2, r1
 8006b36:	3284      	adds	r2, #132	@ 0x84
 8006b38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	69da      	ldr	r2, [r3, #28]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	68f9      	ldr	r1, [r7, #12]
 8006b4c:	6809      	ldr	r1, [r1, #0]
 8006b4e:	4608      	mov	r0, r1
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	01c9      	lsls	r1, r1, #7
 8006b54:	4401      	add	r1, r0
 8006b56:	3184      	adds	r1, #132	@ 0x84
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	01db      	lsls	r3, r3, #7
 8006b66:	4413      	add	r3, r2
 8006b68:	3384      	adds	r3, #132	@ 0x84
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b70:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8006b7a:	2304      	movs	r3, #4
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	e01b      	b.n	8006bb8 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d102      	bne.n	8006b8e <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	61fb      	str	r3, [r7, #28]
 8006b8c:	e014      	b.n	8006bb8 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d00b      	beq.n	8006bae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d007      	beq.n	8006bae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d003      	beq.n	8006bae <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006baa:	2b07      	cmp	r3, #7
 8006bac:	d102      	bne.n	8006bb4 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e001      	b.n	8006bb8 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	01db      	lsls	r3, r3, #7
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3384      	adds	r3, #132	@ 0x84
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	4611      	mov	r1, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	01d2      	lsls	r2, r2, #7
 8006bd2:	440a      	add	r2, r1
 8006bd4:	3284      	adds	r2, #132	@ 0x84
 8006bd6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006bda:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6859      	ldr	r1, [r3, #4]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	1acb      	subs	r3, r1, r3
 8006bf2:	69f9      	ldr	r1, [r7, #28]
 8006bf4:	fb01 f303 	mul.w	r3, r1, r3
 8006bf8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006bfa:	68f9      	ldr	r1, [r7, #12]
 8006bfc:	6809      	ldr	r1, [r1, #0]
 8006bfe:	4608      	mov	r0, r1
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	01c9      	lsls	r1, r1, #7
 8006c04:	4401      	add	r1, r0
 8006c06:	3184      	adds	r1, #132	@ 0x84
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	01db      	lsls	r3, r3, #7
 8006c16:	4413      	add	r3, r2
 8006c18:	3384      	adds	r3, #132	@ 0x84
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	4611      	mov	r1, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	01d2      	lsls	r2, r2, #7
 8006c26:	440a      	add	r2, r1
 8006c28:	3284      	adds	r2, #132	@ 0x84
 8006c2a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c2e:	f023 0307 	bic.w	r3, r3, #7
 8006c32:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	01db      	lsls	r3, r3, #7
 8006c3e:	4413      	add	r3, r2
 8006c40:	3384      	adds	r3, #132	@ 0x84
 8006c42:	461a      	mov	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c48:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	01db      	lsls	r3, r3, #7
 8006c54:	4413      	add	r3, r2
 8006c56:	3384      	adds	r3, #132	@ 0x84
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	01d2      	lsls	r2, r2, #7
 8006c64:	440a      	add	r2, r1
 8006c66:	3284      	adds	r2, #132	@ 0x84
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	6013      	str	r3, [r2, #0]
}
 8006c6e:	bf00      	nop
 8006c70:	3724      	adds	r7, #36	@ 0x24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	4a04      	ldr	r2, [pc, #16]	@ (8006c98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8006c8c:	bf00      	nop
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	46020800 	.word	0x46020800

08006c9c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006ca4:	4b39      	ldr	r3, [pc, #228]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d10b      	bne.n	8006cce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cbc:	d905      	bls.n	8006cca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006cbe:	4b33      	ldr	r3, [pc, #204]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	4a32      	ldr	r2, [pc, #200]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cc8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e057      	b.n	8006d7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd4:	d90a      	bls.n	8006cec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ce8:	60d3      	str	r3, [r2, #12]
 8006cea:	e007      	b.n	8006cfc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006cec:	4b27      	ldr	r3, [pc, #156]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006cf4:	4925      	ldr	r1, [pc, #148]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006cfc:	4b24      	ldr	r3, [pc, #144]	@ (8006d90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a24      	ldr	r2, [pc, #144]	@ (8006d94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	2232      	movs	r2, #50	@ 0x32
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	4a21      	ldr	r2, [pc, #132]	@ (8006d94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006d10:	fba2 2303 	umull	r2, r3, r2, r3
 8006d14:	099b      	lsrs	r3, r3, #6
 8006d16:	3301      	adds	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006d1a:	e002      	b.n	8006d22 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006d22:	4b1a      	ldr	r3, [pc, #104]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d102      	bne.n	8006d34 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1f3      	bne.n	8006d1c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01b      	beq.n	8006d72 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006d3a:	4b15      	ldr	r3, [pc, #84]	@ (8006d90 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a15      	ldr	r2, [pc, #84]	@ (8006d94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	099b      	lsrs	r3, r3, #6
 8006d46:	2232      	movs	r2, #50	@ 0x32
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
 8006d4c:	4a11      	ldr	r2, [pc, #68]	@ (8006d94 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	099b      	lsrs	r3, r3, #6
 8006d54:	3301      	adds	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006d58:	e002      	b.n	8006d60 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006d60:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d102      	bne.n	8006d72 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f3      	bne.n	8006d5a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e000      	b.n	8006d7e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	46020800 	.word	0x46020800
 8006d90:	20000004 	.word	0x20000004
 8006d94:	10624dd3 	.word	0x10624dd3

08006d98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006d9c:	4b04      	ldr	r3, [pc, #16]	@ (8006db0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	46020800 	.word	0x46020800

08006db4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006dbc:	4b22      	ldr	r3, [pc, #136]	@ (8006e48 <HAL_PWREx_ConfigSupply+0x94>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a22      	ldr	r2, [pc, #136]	@ (8006e4c <HAL_PWREx_ConfigSupply+0x98>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	099b      	lsrs	r3, r3, #6
 8006dc8:	2232      	movs	r2, #50	@ 0x32
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	4a1f      	ldr	r2, [pc, #124]	@ (8006e4c <HAL_PWREx_ConfigSupply+0x98>)
 8006dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd4:	099b      	lsrs	r3, r3, #6
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d113      	bne.n	8006e08 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006de0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <HAL_PWREx_ConfigSupply+0x9c>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e50 <HAL_PWREx_ConfigSupply+0x9c>)
 8006de6:	f023 0302 	bic.w	r3, r3, #2
 8006dea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006dec:	e002      	b.n	8006df4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006df4:	4b16      	ldr	r3, [pc, #88]	@ (8006e50 <HAL_PWREx_ConfigSupply+0x9c>)
 8006df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d116      	bne.n	8006e2e <HAL_PWREx_ConfigSupply+0x7a>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f3      	bne.n	8006dee <HAL_PWREx_ConfigSupply+0x3a>
 8006e06:	e012      	b.n	8006e2e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006e08:	4b11      	ldr	r3, [pc, #68]	@ (8006e50 <HAL_PWREx_ConfigSupply+0x9c>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4a10      	ldr	r2, [pc, #64]	@ (8006e50 <HAL_PWREx_ConfigSupply+0x9c>)
 8006e0e:	f043 0302 	orr.w	r3, r3, #2
 8006e12:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006e14:	e002      	b.n	8006e1c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <HAL_PWREx_ConfigSupply+0x9c>)
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <HAL_PWREx_ConfigSupply+0x7a>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f3      	bne.n	8006e16 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e000      	b.n	8006e3a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000004 	.word	0x20000004
 8006e4c:	10624dd3 	.word	0x10624dd3
 8006e50:	46020800 	.word	0x46020800

08006e54 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006e58:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	4a04      	ldr	r2, [pc, #16]	@ (8006e70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006e5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e62:	6113      	str	r3, [r2, #16]
}
 8006e64:	bf00      	nop
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	46020800 	.word	0x46020800

08006e74 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <HAL_PWREx_EnableVddA+0x1c>)
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	4a04      	ldr	r2, [pc, #16]	@ (8006e90 <HAL_PWREx_EnableVddA+0x1c>)
 8006e7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e82:	6113      	str	r3, [r2, #16]
}
 8006e84:	bf00      	nop
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	46020800 	.word	0x46020800

08006e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08e      	sub	sp, #56	@ 0x38
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f000 bec8 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eae:	4b99      	ldr	r3, [pc, #612]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eb8:	4b96      	ldr	r3, [pc, #600]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 816c 	beq.w	80071a8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x52>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	f040 80de 	bne.w	800709a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	f040 80da 	bne.w	800709a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f000 bea5 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ef8:	4b86      	ldr	r3, [pc, #536]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <HAL_RCC_OscConfig+0x7a>
 8006f04:	4b83      	ldr	r3, [pc, #524]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006f0c:	e005      	b.n	8006f1a <HAL_RCC_OscConfig+0x86>
 8006f0e:	4b81      	ldr	r3, [pc, #516]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f14:	041b      	lsls	r3, r3, #16
 8006f16:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d255      	bcs.n	8006fca <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10a      	bne.n	8006f3a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fa3d 	bl	80083a8 <RCC_SetFlashLatencyFromMSIRange>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f000 be82 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006f3a:	4b76      	ldr	r3, [pc, #472]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	4a75      	ldr	r2, [pc, #468]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f44:	6093      	str	r3, [r2, #8]
 8006f46:	4b73      	ldr	r3, [pc, #460]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	4970      	ldr	r1, [pc, #448]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006f60:	d309      	bcc.n	8006f76 <HAL_RCC_OscConfig+0xe2>
 8006f62:	4b6c      	ldr	r3, [pc, #432]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f023 021f 	bic.w	r2, r3, #31
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	4969      	ldr	r1, [pc, #420]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60cb      	str	r3, [r1, #12]
 8006f74:	e07e      	b.n	8007074 <HAL_RCC_OscConfig+0x1e0>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da0a      	bge.n	8006f94 <HAL_RCC_OscConfig+0x100>
 8006f7e:	4b65      	ldr	r3, [pc, #404]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	015b      	lsls	r3, r3, #5
 8006f8c:	4961      	ldr	r1, [pc, #388]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60cb      	str	r3, [r1, #12]
 8006f92:	e06f      	b.n	8007074 <HAL_RCC_OscConfig+0x1e0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9c:	d30a      	bcc.n	8006fb4 <HAL_RCC_OscConfig+0x120>
 8006f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	029b      	lsls	r3, r3, #10
 8006fac:	4959      	ldr	r1, [pc, #356]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60cb      	str	r3, [r1, #12]
 8006fb2:	e05f      	b.n	8007074 <HAL_RCC_OscConfig+0x1e0>
 8006fb4:	4b57      	ldr	r3, [pc, #348]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	03db      	lsls	r3, r3, #15
 8006fc2:	4954      	ldr	r1, [pc, #336]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60cb      	str	r3, [r1, #12]
 8006fc8:	e054      	b.n	8007074 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006fca:	4b52      	ldr	r3, [pc, #328]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	4a51      	ldr	r2, [pc, #324]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fd4:	6093      	str	r3, [r2, #8]
 8006fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	494c      	ldr	r1, [pc, #304]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006ff0:	d309      	bcc.n	8007006 <HAL_RCC_OscConfig+0x172>
 8006ff2:	4b48      	ldr	r3, [pc, #288]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f023 021f 	bic.w	r2, r3, #31
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	4945      	ldr	r1, [pc, #276]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8007000:	4313      	orrs	r3, r2
 8007002:	60cb      	str	r3, [r1, #12]
 8007004:	e028      	b.n	8007058 <HAL_RCC_OscConfig+0x1c4>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700a:	2b00      	cmp	r3, #0
 800700c:	da0a      	bge.n	8007024 <HAL_RCC_OscConfig+0x190>
 800700e:	4b41      	ldr	r3, [pc, #260]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	015b      	lsls	r3, r3, #5
 800701c:	493d      	ldr	r1, [pc, #244]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 800701e:	4313      	orrs	r3, r2
 8007020:	60cb      	str	r3, [r1, #12]
 8007022:	e019      	b.n	8007058 <HAL_RCC_OscConfig+0x1c4>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702c:	d30a      	bcc.n	8007044 <HAL_RCC_OscConfig+0x1b0>
 800702e:	4b39      	ldr	r3, [pc, #228]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	4935      	ldr	r1, [pc, #212]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 800703e:	4313      	orrs	r3, r2
 8007040:	60cb      	str	r3, [r1, #12]
 8007042:	e009      	b.n	8007058 <HAL_RCC_OscConfig+0x1c4>
 8007044:	4b33      	ldr	r3, [pc, #204]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	03db      	lsls	r3, r3, #15
 8007052:	4930      	ldr	r1, [pc, #192]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8007054:	4313      	orrs	r3, r2
 8007056:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f9a0 	bl	80083a8 <RCC_SetFlashLatencyFromMSIRange>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f000 bde5 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007074:	f001 f8de 	bl	8008234 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007078:	4b27      	ldr	r3, [pc, #156]	@ (8007118 <HAL_RCC_OscConfig+0x284>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f7fb f899 	bl	80021b4 <HAL_InitTick>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8007088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 808a 	beq.w	80071a6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8007092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007096:	f000 bdd2 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d066      	beq.n	8007170 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80070a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 80070a8:	f043 0301 	orr.w	r3, r3, #1
 80070ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070ae:	f7fb fabd 	bl	800262c <HAL_GetTick>
 80070b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80070b4:	e009      	b.n	80070ca <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070b6:	f7fb fab9 	bl	800262c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d902      	bls.n	80070ca <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	f000 bdba 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80070ca:	4b12      	ldr	r3, [pc, #72]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0ef      	beq.n	80070b6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80070d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4a0e      	ldr	r2, [pc, #56]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 80070dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070e0:	6093      	str	r3, [r2, #8]
 80070e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	4909      	ldr	r1, [pc, #36]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80070fc:	d30e      	bcc.n	800711c <HAL_RCC_OscConfig+0x288>
 80070fe:	4b05      	ldr	r3, [pc, #20]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f023 021f 	bic.w	r2, r3, #31
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	4902      	ldr	r1, [pc, #8]	@ (8007114 <HAL_RCC_OscConfig+0x280>)
 800710c:	4313      	orrs	r3, r2
 800710e:	60cb      	str	r3, [r1, #12]
 8007110:	e04a      	b.n	80071a8 <HAL_RCC_OscConfig+0x314>
 8007112:	bf00      	nop
 8007114:	46020c00 	.word	0x46020c00
 8007118:	20000008 	.word	0x20000008
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	2b00      	cmp	r3, #0
 8007122:	da0a      	bge.n	800713a <HAL_RCC_OscConfig+0x2a6>
 8007124:	4b98      	ldr	r3, [pc, #608]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	015b      	lsls	r3, r3, #5
 8007132:	4995      	ldr	r1, [pc, #596]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007134:	4313      	orrs	r3, r2
 8007136:	60cb      	str	r3, [r1, #12]
 8007138:	e036      	b.n	80071a8 <HAL_RCC_OscConfig+0x314>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007142:	d30a      	bcc.n	800715a <HAL_RCC_OscConfig+0x2c6>
 8007144:	4b90      	ldr	r3, [pc, #576]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	029b      	lsls	r3, r3, #10
 8007152:	498d      	ldr	r1, [pc, #564]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007154:	4313      	orrs	r3, r2
 8007156:	60cb      	str	r3, [r1, #12]
 8007158:	e026      	b.n	80071a8 <HAL_RCC_OscConfig+0x314>
 800715a:	4b8b      	ldr	r3, [pc, #556]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	03db      	lsls	r3, r3, #15
 8007168:	4987      	ldr	r1, [pc, #540]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800716a:	4313      	orrs	r3, r2
 800716c:	60cb      	str	r3, [r1, #12]
 800716e:	e01b      	b.n	80071a8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007170:	4b85      	ldr	r3, [pc, #532]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a84      	ldr	r2, [pc, #528]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800717c:	f7fb fa56 	bl	800262c <HAL_GetTick>
 8007180:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007182:	e009      	b.n	8007198 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007184:	f7fb fa52 	bl	800262c <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d902      	bls.n	8007198 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	f000 bd53 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007198:	4b7b      	ldr	r3, [pc, #492]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1ef      	bne.n	8007184 <HAL_RCC_OscConfig+0x2f0>
 80071a4:	e000      	b.n	80071a8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80071a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 808b 	beq.w	80072cc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d005      	beq.n	80071c8 <HAL_RCC_OscConfig+0x334>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	2b0c      	cmp	r3, #12
 80071c0:	d109      	bne.n	80071d6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d106      	bne.n	80071d6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d17d      	bne.n	80072cc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f000 bd34 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071de:	d106      	bne.n	80071ee <HAL_RCC_OscConfig+0x35a>
 80071e0:	4b69      	ldr	r3, [pc, #420]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a68      	ldr	r2, [pc, #416]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 80071e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e041      	b.n	8007272 <HAL_RCC_OscConfig+0x3de>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071f6:	d112      	bne.n	800721e <HAL_RCC_OscConfig+0x38a>
 80071f8:	4b63      	ldr	r3, [pc, #396]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a62      	ldr	r2, [pc, #392]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 80071fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	4b60      	ldr	r3, [pc, #384]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a5f      	ldr	r2, [pc, #380]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800720a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	4b5d      	ldr	r3, [pc, #372]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a5c      	ldr	r2, [pc, #368]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e029      	b.n	8007272 <HAL_RCC_OscConfig+0x3de>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007226:	d112      	bne.n	800724e <HAL_RCC_OscConfig+0x3ba>
 8007228:	4b57      	ldr	r3, [pc, #348]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a56      	ldr	r2, [pc, #344]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800722e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b54      	ldr	r3, [pc, #336]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a53      	ldr	r2, [pc, #332]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800723a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	4b51      	ldr	r3, [pc, #324]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a50      	ldr	r2, [pc, #320]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	e011      	b.n	8007272 <HAL_RCC_OscConfig+0x3de>
 800724e:	4b4e      	ldr	r3, [pc, #312]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a4d      	ldr	r2, [pc, #308]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4b4b      	ldr	r3, [pc, #300]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a4a      	ldr	r2, [pc, #296]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	4b48      	ldr	r3, [pc, #288]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a47      	ldr	r2, [pc, #284]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800726c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007270:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d014      	beq.n	80072a4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800727a:	f7fb f9d7 	bl	800262c <HAL_GetTick>
 800727e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007280:	e009      	b.n	8007296 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007282:	f7fb f9d3 	bl	800262c <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b64      	cmp	r3, #100	@ 0x64
 800728e:	d902      	bls.n	8007296 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	f000 bcd4 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007296:	4b3c      	ldr	r3, [pc, #240]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0ef      	beq.n	8007282 <HAL_RCC_OscConfig+0x3ee>
 80072a2:	e013      	b.n	80072cc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80072a4:	f7fb f9c2 	bl	800262c <HAL_GetTick>
 80072a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072aa:	e009      	b.n	80072c0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072ac:	f7fb f9be 	bl	800262c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b64      	cmp	r3, #100	@ 0x64
 80072b8:	d902      	bls.n	80072c0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	f000 bcbf 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072c0:	4b31      	ldr	r3, [pc, #196]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1ef      	bne.n	80072ac <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d05f      	beq.n	8007398 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d005      	beq.n	80072ea <HAL_RCC_OscConfig+0x456>
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	2b0c      	cmp	r3, #12
 80072e2:	d114      	bne.n	800730e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80072e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d111      	bne.n	800730e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f000 bca3 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80072f8:	4b23      	ldr	r3, [pc, #140]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	041b      	lsls	r3, r3, #16
 8007306:	4920      	ldr	r1, [pc, #128]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007308:	4313      	orrs	r3, r2
 800730a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800730c:	e044      	b.n	8007398 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d024      	beq.n	8007360 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007316:	4b1c      	ldr	r3, [pc, #112]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1b      	ldr	r2, [pc, #108]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800731c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007320:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007322:	f7fb f983 	bl	800262c <HAL_GetTick>
 8007326:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007328:	e009      	b.n	800733e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800732a:	f7fb f97f 	bl	800262c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d902      	bls.n	800733e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	f000 bc80 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800733e:	4b12      	ldr	r3, [pc, #72]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0ef      	beq.n	800732a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800734a:	4b0f      	ldr	r3, [pc, #60]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	490b      	ldr	r1, [pc, #44]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 800735a:	4313      	orrs	r3, r2
 800735c:	610b      	str	r3, [r1, #16]
 800735e:	e01b      	b.n	8007398 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007360:	4b09      	ldr	r3, [pc, #36]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a08      	ldr	r2, [pc, #32]	@ (8007388 <HAL_RCC_OscConfig+0x4f4>)
 8007366:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800736a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800736c:	f7fb f95e 	bl	800262c <HAL_GetTick>
 8007370:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007372:	e00b      	b.n	800738c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007374:	f7fb f95a 	bl	800262c <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d904      	bls.n	800738c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	f000 bc5b 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
 8007388:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800738c:	4baf      	ldr	r3, [pc, #700]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1ed      	bne.n	8007374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80c8 	beq.w	8007536 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80073a6:	2300      	movs	r3, #0
 80073a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ac:	4ba7      	ldr	r3, [pc, #668]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80073ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d111      	bne.n	80073de <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ba:	4ba4      	ldr	r3, [pc, #656]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80073bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073c0:	4aa2      	ldr	r2, [pc, #648]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80073c2:	f043 0304 	orr.w	r3, r3, #4
 80073c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80073ca:	4ba0      	ldr	r3, [pc, #640]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80073cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073de:	4b9c      	ldr	r3, [pc, #624]	@ (8007650 <HAL_RCC_OscConfig+0x7bc>)
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d119      	bne.n	800741e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80073ea:	4b99      	ldr	r3, [pc, #612]	@ (8007650 <HAL_RCC_OscConfig+0x7bc>)
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	4a98      	ldr	r2, [pc, #608]	@ (8007650 <HAL_RCC_OscConfig+0x7bc>)
 80073f0:	f043 0301 	orr.w	r3, r3, #1
 80073f4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073f6:	f7fb f919 	bl	800262c <HAL_GetTick>
 80073fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80073fc:	e009      	b.n	8007412 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fe:	f7fb f915 	bl	800262c <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d902      	bls.n	8007412 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	f000 bc16 	b.w	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007412:	4b8f      	ldr	r3, [pc, #572]	@ (8007650 <HAL_RCC_OscConfig+0x7bc>)
 8007414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0ef      	beq.n	80073fe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d05f      	beq.n	80074e6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007426:	4b89      	ldr	r3, [pc, #548]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800742c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007438:	429a      	cmp	r2, r3
 800743a:	d037      	beq.n	80074ac <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d006      	beq.n	8007454 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e3f4      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d01b      	beq.n	8007496 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800745e:	4b7b      	ldr	r3, [pc, #492]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007464:	4a79      	ldr	r2, [pc, #484]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007466:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800746a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800746e:	f7fb f8dd 	bl	800262c <HAL_GetTick>
 8007472:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007474:	e008      	b.n	8007488 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007476:	f7fb f8d9 	bl	800262c <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b05      	cmp	r3, #5
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e3da      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007488:	4b70      	ldr	r3, [pc, #448]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 800748a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800748e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1ef      	bne.n	8007476 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007496:	4b6d      	ldr	r3, [pc, #436]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800749c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	4969      	ldr	r1, [pc, #420]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80074ac:	4b67      	ldr	r3, [pc, #412]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80074ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074b2:	4a66      	ldr	r2, [pc, #408]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80074b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80074bc:	f7fb f8b6 	bl	800262c <HAL_GetTick>
 80074c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074c4:	f7fb f8b2 	bl	800262c <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e3b3      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80074d6:	4b5d      	ldr	r3, [pc, #372]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80074d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ef      	beq.n	80074c4 <HAL_RCC_OscConfig+0x630>
 80074e4:	e01b      	b.n	800751e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80074e6:	4b59      	ldr	r3, [pc, #356]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80074e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ec:	4a57      	ldr	r2, [pc, #348]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80074ee:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80074f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80074f6:	f7fb f899 	bl	800262c <HAL_GetTick>
 80074fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074fe:	f7fb f895 	bl	800262c <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b05      	cmp	r3, #5
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e396      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007510:	4b4e      	ldr	r3, [pc, #312]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1ef      	bne.n	80074fe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800751e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007522:	2b01      	cmp	r3, #1
 8007524:	d107      	bne.n	8007536 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007526:	4b49      	ldr	r3, [pc, #292]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800752c:	4a47      	ldr	r2, [pc, #284]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 800752e:	f023 0304 	bic.w	r3, r3, #4
 8007532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8111 	beq.w	8007766 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007544:	2300      	movs	r3, #0
 8007546:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800754a:	4b40      	ldr	r3, [pc, #256]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 800754c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d111      	bne.n	800757c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007558:	4b3c      	ldr	r3, [pc, #240]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 800755a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800755e:	4a3b      	ldr	r2, [pc, #236]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007560:	f043 0304 	orr.w	r3, r3, #4
 8007564:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007568:	4b38      	ldr	r3, [pc, #224]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 800756a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800757c:	4b34      	ldr	r3, [pc, #208]	@ (8007650 <HAL_RCC_OscConfig+0x7bc>)
 800757e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d118      	bne.n	80075ba <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007588:	4b31      	ldr	r3, [pc, #196]	@ (8007650 <HAL_RCC_OscConfig+0x7bc>)
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	4a30      	ldr	r2, [pc, #192]	@ (8007650 <HAL_RCC_OscConfig+0x7bc>)
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007594:	f7fb f84a 	bl	800262c <HAL_GetTick>
 8007598:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800759a:	e008      	b.n	80075ae <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800759c:	f7fb f846 	bl	800262c <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e347      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80075ae:	4b28      	ldr	r3, [pc, #160]	@ (8007650 <HAL_RCC_OscConfig+0x7bc>)
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f0      	beq.n	800759c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01f      	beq.n	8007606 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d010      	beq.n	80075f4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80075d2:	4b1e      	ldr	r3, [pc, #120]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80075d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075d8:	4a1c      	ldr	r2, [pc, #112]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80075da:	f043 0304 	orr.w	r3, r3, #4
 80075de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80075e2:	4b1a      	ldr	r3, [pc, #104]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80075e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075e8:	4a18      	ldr	r2, [pc, #96]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80075f2:	e018      	b.n	8007626 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80075f4:	4b15      	ldr	r3, [pc, #84]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80075f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075fa:	4a14      	ldr	r2, [pc, #80]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 80075fc:	f043 0301 	orr.w	r3, r3, #1
 8007600:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007604:	e00f      	b.n	8007626 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007606:	4b11      	ldr	r3, [pc, #68]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800760c:	4a0f      	ldr	r2, [pc, #60]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007616:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 8007618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800761c:	4a0b      	ldr	r2, [pc, #44]	@ (800764c <HAL_RCC_OscConfig+0x7b8>)
 800761e:	f023 0304 	bic.w	r3, r3, #4
 8007622:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d057      	beq.n	80076de <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800762e:	f7fa fffd 	bl	800262c <HAL_GetTick>
 8007632:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007634:	e00e      	b.n	8007654 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007636:	f7fa fff9 	bl	800262c <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007644:	4293      	cmp	r3, r2
 8007646:	d905      	bls.n	8007654 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e2f8      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
 800764c:	46020c00 	.word	0x46020c00
 8007650:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007654:	4b9c      	ldr	r3, [pc, #624]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0e9      	beq.n	8007636 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01b      	beq.n	80076a6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800766e:	4b96      	ldr	r3, [pc, #600]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007674:	4a94      	ldr	r2, [pc, #592]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800767e:	e00a      	b.n	8007696 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007680:	f7fa ffd4 	bl	800262c <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800768e:	4293      	cmp	r3, r2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e2d3      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007696:	4b8c      	ldr	r3, [pc, #560]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800769c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0ed      	beq.n	8007680 <HAL_RCC_OscConfig+0x7ec>
 80076a4:	e053      	b.n	800774e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80076a6:	4b88      	ldr	r3, [pc, #544]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80076a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ac:	4a86      	ldr	r2, [pc, #536]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80076ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80076b6:	e00a      	b.n	80076ce <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b8:	f7fa ffb8 	bl	800262c <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e2b7      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80076ce:	4b7e      	ldr	r3, [pc, #504]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80076d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1ed      	bne.n	80076b8 <HAL_RCC_OscConfig+0x824>
 80076dc:	e037      	b.n	800774e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80076de:	f7fa ffa5 	bl	800262c <HAL_GetTick>
 80076e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076e4:	e00a      	b.n	80076fc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e6:	f7fa ffa1 	bl	800262c <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e2a0      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076fc:	4b72      	ldr	r3, [pc, #456]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80076fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1ed      	bne.n	80076e6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800770a:	4b6f      	ldr	r3, [pc, #444]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 800770c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007718:	4b6b      	ldr	r3, [pc, #428]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 800771a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800771e:	4a6a      	ldr	r2, [pc, #424]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007724:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007728:	e00a      	b.n	8007740 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772a:	f7fa ff7f 	bl	800262c <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007738:	4293      	cmp	r3, r2
 800773a:	d901      	bls.n	8007740 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e27e      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007740:	4b61      	ldr	r3, [pc, #388]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1ed      	bne.n	800772a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800774e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007752:	2b01      	cmp	r3, #1
 8007754:	d107      	bne.n	8007766 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007756:	4b5c      	ldr	r3, [pc, #368]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800775c:	4a5a      	ldr	r2, [pc, #360]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 800775e:	f023 0304 	bic.w	r3, r3, #4
 8007762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d036      	beq.n	80077e0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d019      	beq.n	80077ae <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800777a:	4b53      	ldr	r3, [pc, #332]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a52      	ldr	r2, [pc, #328]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007784:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007786:	f7fa ff51 	bl	800262c <HAL_GetTick>
 800778a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800778e:	f7fa ff4d 	bl	800262c <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e24e      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80077a0:	4b49      	ldr	r3, [pc, #292]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0f0      	beq.n	800778e <HAL_RCC_OscConfig+0x8fa>
 80077ac:	e018      	b.n	80077e0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80077ae:	4b46      	ldr	r3, [pc, #280]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a45      	ldr	r2, [pc, #276]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80077b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80077ba:	f7fa ff37 	bl	800262c <HAL_GetTick>
 80077be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077c2:	f7fa ff33 	bl	800262c <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e234      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80077d4:	4b3c      	ldr	r3, [pc, #240]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f0      	bne.n	80077c2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d036      	beq.n	800785a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d019      	beq.n	8007828 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80077f4:	4b34      	ldr	r3, [pc, #208]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a33      	ldr	r2, [pc, #204]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80077fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007800:	f7fa ff14 	bl	800262c <HAL_GetTick>
 8007804:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007808:	f7fa ff10 	bl	800262c <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e211      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800781a:	4b2b      	ldr	r3, [pc, #172]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f0      	beq.n	8007808 <HAL_RCC_OscConfig+0x974>
 8007826:	e018      	b.n	800785a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007828:	4b27      	ldr	r3, [pc, #156]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a26      	ldr	r2, [pc, #152]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 800782e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007832:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007834:	f7fa fefa 	bl	800262c <HAL_GetTick>
 8007838:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800783a:	e008      	b.n	800784e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800783c:	f7fa fef6 	bl	800262c <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e1f7      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800784e:	4b1e      	ldr	r3, [pc, #120]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1f0      	bne.n	800783c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d07f      	beq.n	8007966 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800786a:	2b00      	cmp	r3, #0
 800786c:	d062      	beq.n	8007934 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800786e:	4b16      	ldr	r3, [pc, #88]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	4a15      	ldr	r2, [pc, #84]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007874:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007878:	6093      	str	r3, [r2, #8]
 800787a:	4b13      	ldr	r3, [pc, #76]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	4910      	ldr	r1, [pc, #64]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007888:	4313      	orrs	r3, r2
 800788a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007890:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007894:	d309      	bcc.n	80078aa <HAL_RCC_OscConfig+0xa16>
 8007896:	4b0c      	ldr	r3, [pc, #48]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f023 021f 	bic.w	r2, r3, #31
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	4909      	ldr	r1, [pc, #36]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60cb      	str	r3, [r1, #12]
 80078a8:	e02a      	b.n	8007900 <HAL_RCC_OscConfig+0xa6c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	da0c      	bge.n	80078cc <HAL_RCC_OscConfig+0xa38>
 80078b2:	4b05      	ldr	r3, [pc, #20]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	015b      	lsls	r3, r3, #5
 80078c0:	4901      	ldr	r1, [pc, #4]	@ (80078c8 <HAL_RCC_OscConfig+0xa34>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60cb      	str	r3, [r1, #12]
 80078c6:	e01b      	b.n	8007900 <HAL_RCC_OscConfig+0xa6c>
 80078c8:	46020c00 	.word	0x46020c00
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d4:	d30a      	bcc.n	80078ec <HAL_RCC_OscConfig+0xa58>
 80078d6:	4ba1      	ldr	r3, [pc, #644]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	029b      	lsls	r3, r3, #10
 80078e4:	499d      	ldr	r1, [pc, #628]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60cb      	str	r3, [r1, #12]
 80078ea:	e009      	b.n	8007900 <HAL_RCC_OscConfig+0xa6c>
 80078ec:	4b9b      	ldr	r3, [pc, #620]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	03db      	lsls	r3, r3, #15
 80078fa:	4998      	ldr	r1, [pc, #608]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007900:	4b96      	ldr	r3, [pc, #600]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a95      	ldr	r2, [pc, #596]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007906:	f043 0310 	orr.w	r3, r3, #16
 800790a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800790c:	f7fa fe8e 	bl	800262c <HAL_GetTick>
 8007910:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007914:	f7fa fe8a 	bl	800262c <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e18b      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007926:	4b8d      	ldr	r3, [pc, #564]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0f0      	beq.n	8007914 <HAL_RCC_OscConfig+0xa80>
 8007932:	e018      	b.n	8007966 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007934:	4b89      	ldr	r3, [pc, #548]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a88      	ldr	r2, [pc, #544]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 800793a:	f023 0310 	bic.w	r3, r3, #16
 800793e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007940:	f7fa fe74 	bl	800262c <HAL_GetTick>
 8007944:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007948:	f7fa fe70 	bl	800262c <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e171      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800795a:	4b80      	ldr	r3, [pc, #512]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f0      	bne.n	8007948 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 8166 	beq.w	8007c3c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007970:	2300      	movs	r3, #0
 8007972:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007976:	4b79      	ldr	r3, [pc, #484]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f003 030c 	and.w	r3, r3, #12
 800797e:	2b0c      	cmp	r3, #12
 8007980:	f000 80f2 	beq.w	8007b68 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007988:	2b02      	cmp	r3, #2
 800798a:	f040 80c5 	bne.w	8007b18 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800798e:	4b73      	ldr	r3, [pc, #460]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a72      	ldr	r2, [pc, #456]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007998:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800799a:	f7fa fe47 	bl	800262c <HAL_GetTick>
 800799e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80079a0:	e008      	b.n	80079b4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a2:	f7fa fe43 	bl	800262c <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e144      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80079b4:	4b69      	ldr	r3, [pc, #420]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1f0      	bne.n	80079a2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079c0:	4b66      	ldr	r3, [pc, #408]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80079c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d111      	bne.n	80079f2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80079ce:	4b63      	ldr	r3, [pc, #396]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80079d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079d4:	4a61      	ldr	r2, [pc, #388]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80079d6:	f043 0304 	orr.w	r3, r3, #4
 80079da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80079de:	4b5f      	ldr	r3, [pc, #380]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 80079e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079e4:	f003 0304 	and.w	r3, r3, #4
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80079f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007b60 <HAL_RCC_OscConfig+0xccc>)
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079fe:	d102      	bne.n	8007a06 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007a00:	2301      	movs	r3, #1
 8007a02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007a06:	4b56      	ldr	r3, [pc, #344]	@ (8007b60 <HAL_RCC_OscConfig+0xccc>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	4a55      	ldr	r2, [pc, #340]	@ (8007b60 <HAL_RCC_OscConfig+0xccc>)
 8007a0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a10:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007a12:	4b52      	ldr	r3, [pc, #328]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007a26:	3a01      	subs	r2, #1
 8007a28:	0212      	lsls	r2, r2, #8
 8007a2a:	4311      	orrs	r1, r2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007a30:	430a      	orrs	r2, r1
 8007a32:	494a      	ldr	r1, [pc, #296]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a38:	4b48      	ldr	r3, [pc, #288]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a3c:	4b49      	ldr	r3, [pc, #292]	@ (8007b64 <HAL_RCC_OscConfig+0xcd0>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a44:	3a01      	subs	r2, #1
 8007a46:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007a4e:	3a01      	subs	r2, #1
 8007a50:	0252      	lsls	r2, r2, #9
 8007a52:	b292      	uxth	r2, r2
 8007a54:	4311      	orrs	r1, r2
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a5a:	3a01      	subs	r2, #1
 8007a5c:	0412      	lsls	r2, r2, #16
 8007a5e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007a62:	4311      	orrs	r1, r2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007a68:	3a01      	subs	r2, #1
 8007a6a:	0612      	lsls	r2, r2, #24
 8007a6c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007a70:	430a      	orrs	r2, r1
 8007a72:	493a      	ldr	r1, [pc, #232]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007a78:	4b38      	ldr	r3, [pc, #224]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7c:	4a37      	ldr	r2, [pc, #220]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a7e:	f023 0310 	bic.w	r3, r3, #16
 8007a82:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a88:	4a34      	ldr	r2, [pc, #208]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007a8e:	4b33      	ldr	r3, [pc, #204]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a92:	4a32      	ldr	r2, [pc, #200]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a94:	f043 0310 	orr.w	r3, r3, #16
 8007a98:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8007a9a:	4b30      	ldr	r3, [pc, #192]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	f023 020c 	bic.w	r2, r3, #12
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa6:	492d      	ldr	r1, [pc, #180]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007aac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d105      	bne.n	8007ac0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8007b60 <HAL_RCC_OscConfig+0xccc>)
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4a29      	ldr	r2, [pc, #164]	@ (8007b60 <HAL_RCC_OscConfig+0xccc>)
 8007aba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007abe:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007ac0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007ac8:	4b24      	ldr	r3, [pc, #144]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ace:	4a23      	ldr	r2, [pc, #140]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007ad0:	f023 0304 	bic.w	r3, r3, #4
 8007ad4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007ad8:	4b20      	ldr	r3, [pc, #128]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1f      	ldr	r2, [pc, #124]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ae2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007ae4:	f7fa fda2 	bl	800262c <HAL_GetTick>
 8007ae8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aec:	f7fa fd9e 	bl	800262c <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e09f      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007afe:	4b17      	ldr	r3, [pc, #92]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f0      	beq.n	8007aec <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b0a:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0e:	4a13      	ldr	r2, [pc, #76]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b14:	6293      	str	r3, [r2, #40]	@ 0x28
 8007b16:	e091      	b.n	8007c3c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007b18:	4b10      	ldr	r3, [pc, #64]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007b24:	f7fa fd82 	bl	800262c <HAL_GetTick>
 8007b28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b2c:	f7fa fd7e 	bl	800262c <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e07f      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007b3e:	4b07      	ldr	r3, [pc, #28]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1f0      	bne.n	8007b2c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007b4a:	4b04      	ldr	r3, [pc, #16]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4e:	4a03      	ldr	r2, [pc, #12]	@ (8007b5c <HAL_RCC_OscConfig+0xcc8>)
 8007b50:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	6293      	str	r3, [r2, #40]	@ 0x28
 8007b5a:	e06f      	b.n	8007c3c <HAL_RCC_OscConfig+0xda8>
 8007b5c:	46020c00 	.word	0x46020c00
 8007b60:	46020800 	.word	0x46020800
 8007b64:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007b68:	4b37      	ldr	r3, [pc, #220]	@ (8007c48 <HAL_RCC_OscConfig+0xdb4>)
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b6e:	4b36      	ldr	r3, [pc, #216]	@ (8007c48 <HAL_RCC_OscConfig+0xdb4>)
 8007b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b72:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d039      	beq.n	8007bf0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f003 0203 	and.w	r2, r3, #3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d132      	bne.n	8007bf0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	0a1b      	lsrs	r3, r3, #8
 8007b8e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d129      	bne.n	8007bf0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d122      	bne.n	8007bf0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d11a      	bne.n	8007bf0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	0a5b      	lsrs	r3, r3, #9
 8007bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d111      	bne.n	8007bf0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	0c1b      	lsrs	r3, r3, #16
 8007bd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d108      	bne.n	8007bf0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	0e1b      	lsrs	r3, r3, #24
 8007be2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d001      	beq.n	8007bf4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e024      	b.n	8007c3e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007bf4:	4b14      	ldr	r3, [pc, #80]	@ (8007c48 <HAL_RCC_OscConfig+0xdb4>)
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	08db      	lsrs	r3, r3, #3
 8007bfa:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d01a      	beq.n	8007c3c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007c06:	4b10      	ldr	r3, [pc, #64]	@ (8007c48 <HAL_RCC_OscConfig+0xdb4>)
 8007c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8007c48 <HAL_RCC_OscConfig+0xdb4>)
 8007c0c:	f023 0310 	bic.w	r3, r3, #16
 8007c10:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c12:	f7fa fd0b 	bl	800262c <HAL_GetTick>
 8007c16:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007c18:	bf00      	nop
 8007c1a:	f7fa fd07 	bl	800262c <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d0f9      	beq.n	8007c1a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c2a:	4a07      	ldr	r2, [pc, #28]	@ (8007c48 <HAL_RCC_OscConfig+0xdb4>)
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007c30:	4b05      	ldr	r3, [pc, #20]	@ (8007c48 <HAL_RCC_OscConfig+0xdb4>)
 8007c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c34:	4a04      	ldr	r2, [pc, #16]	@ (8007c48 <HAL_RCC_OscConfig+0xdb4>)
 8007c36:	f043 0310 	orr.w	r3, r3, #16
 8007c3a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3738      	adds	r7, #56	@ 0x38
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	46020c00 	.word	0x46020c00

08007c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e1d9      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c60:	4b9b      	ldr	r3, [pc, #620]	@ (8007ed0 <HAL_RCC_ClockConfig+0x284>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 030f 	and.w	r3, r3, #15
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d910      	bls.n	8007c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6e:	4b98      	ldr	r3, [pc, #608]	@ (8007ed0 <HAL_RCC_ClockConfig+0x284>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f023 020f 	bic.w	r2, r3, #15
 8007c76:	4996      	ldr	r1, [pc, #600]	@ (8007ed0 <HAL_RCC_ClockConfig+0x284>)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7e:	4b94      	ldr	r3, [pc, #592]	@ (8007ed0 <HAL_RCC_ClockConfig+0x284>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e1c1      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d010      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	695a      	ldr	r2, [r3, #20]
 8007ca0:	4b8c      	ldr	r3, [pc, #560]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d908      	bls.n	8007cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007cac:	4b89      	ldr	r3, [pc, #548]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	4986      	ldr	r1, [pc, #536]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d012      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	4b81      	ldr	r3, [pc, #516]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	091b      	lsrs	r3, r3, #4
 8007cd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d909      	bls.n	8007cf0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	497a      	ldr	r1, [pc, #488]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d010      	beq.n	8007d1e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	4b74      	ldr	r3, [pc, #464]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d908      	bls.n	8007d1e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007d0c:	4b71      	ldr	r3, [pc, #452]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	496e      	ldr	r1, [pc, #440]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d010      	beq.n	8007d4c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	4b69      	ldr	r3, [pc, #420]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d908      	bls.n	8007d4c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007d3a:	4b66      	ldr	r3, [pc, #408]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f023 020f 	bic.w	r2, r3, #15
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	4963      	ldr	r1, [pc, #396]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 80d2 	beq.w	8007efe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d143      	bne.n	8007dee <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d66:	4b5b      	ldr	r3, [pc, #364]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d110      	bne.n	8007d96 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007d74:	4b57      	ldr	r3, [pc, #348]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d7a:	4a56      	ldr	r2, [pc, #344]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d7c:	f043 0304 	orr.w	r3, r3, #4
 8007d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007d84:	4b53      	ldr	r3, [pc, #332]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	60bb      	str	r3, [r7, #8]
 8007d90:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007d92:	2301      	movs	r3, #1
 8007d94:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007d96:	f7fa fc49 	bl	800262c <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8007ed8 <HAL_RCC_ClockConfig+0x28c>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00f      	beq.n	8007dc8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007daa:	f7fa fc3f 	bl	800262c <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e12b      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007dbc:	4b46      	ldr	r3, [pc, #280]	@ (8007ed8 <HAL_RCC_ClockConfig+0x28c>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d107      	bne.n	8007dde <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007dce:	4b41      	ldr	r3, [pc, #260]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dd4:	4a3f      	ldr	r2, [pc, #252]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007dd6:	f023 0304 	bic.w	r3, r3, #4
 8007dda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007dde:	4b3d      	ldr	r3, [pc, #244]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d121      	bne.n	8007e2e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e112      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d107      	bne.n	8007e06 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007df6:	4b37      	ldr	r3, [pc, #220]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d115      	bne.n	8007e2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e106      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d107      	bne.n	8007e1e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007e0e:	4b31      	ldr	r3, [pc, #196]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d109      	bne.n	8007e2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e0fa      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e0f2      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007e2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	f023 0203 	bic.w	r2, r3, #3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	4926      	ldr	r1, [pc, #152]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007e40:	f7fa fbf4 	bl	800262c <HAL_GetTick>
 8007e44:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d112      	bne.n	8007e74 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e4e:	e00a      	b.n	8007e66 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e50:	f7fa fbec 	bl	800262c <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e0d6      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e66:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	f003 030c 	and.w	r3, r3, #12
 8007e6e:	2b0c      	cmp	r3, #12
 8007e70:	d1ee      	bne.n	8007e50 <HAL_RCC_ClockConfig+0x204>
 8007e72:	e044      	b.n	8007efe <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d112      	bne.n	8007ea2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e7c:	e00a      	b.n	8007e94 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e7e:	f7fa fbd5 	bl	800262c <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d901      	bls.n	8007e94 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e0bf      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e94:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	f003 030c 	and.w	r3, r3, #12
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d1ee      	bne.n	8007e7e <HAL_RCC_ClockConfig+0x232>
 8007ea0:	e02d      	b.n	8007efe <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d123      	bne.n	8007ef2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007eaa:	e00a      	b.n	8007ec2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eac:	f7fa fbbe 	bl	800262c <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e0a8      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007ec2:	4b04      	ldr	r3, [pc, #16]	@ (8007ed4 <HAL_RCC_ClockConfig+0x288>)
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f003 030c 	and.w	r3, r3, #12
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1ee      	bne.n	8007eac <HAL_RCC_ClockConfig+0x260>
 8007ece:	e016      	b.n	8007efe <HAL_RCC_ClockConfig+0x2b2>
 8007ed0:	40022000 	.word	0x40022000
 8007ed4:	46020c00 	.word	0x46020c00
 8007ed8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007edc:	f7fa fba6 	bl	800262c <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e090      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f003 030c 	and.w	r3, r3, #12
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d1ee      	bne.n	8007edc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d010      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689a      	ldr	r2, [r3, #8]
 8007f0e:	4b43      	ldr	r3, [pc, #268]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f003 030f 	and.w	r3, r3, #15
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d208      	bcs.n	8007f2c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007f1a:	4b40      	ldr	r3, [pc, #256]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f023 020f 	bic.w	r2, r3, #15
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	493d      	ldr	r1, [pc, #244]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8008020 <HAL_RCC_ClockConfig+0x3d4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d210      	bcs.n	8007f5c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3a:	4b39      	ldr	r3, [pc, #228]	@ (8008020 <HAL_RCC_ClockConfig+0x3d4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f023 020f 	bic.w	r2, r3, #15
 8007f42:	4937      	ldr	r1, [pc, #220]	@ (8008020 <HAL_RCC_ClockConfig+0x3d4>)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f4a:	4b35      	ldr	r3, [pc, #212]	@ (8008020 <HAL_RCC_ClockConfig+0x3d4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d001      	beq.n	8007f5c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e05b      	b.n	8008014 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d010      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d208      	bcs.n	8007f8a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007f78:	4b28      	ldr	r3, [pc, #160]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	4925      	ldr	r1, [pc, #148]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0308 	and.w	r3, r3, #8
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d012      	beq.n	8007fbc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691a      	ldr	r2, [r3, #16]
 8007f9a:	4b20      	ldr	r3, [pc, #128]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	091b      	lsrs	r3, r3, #4
 8007fa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d209      	bcs.n	8007fbc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	4919      	ldr	r1, [pc, #100]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d010      	beq.n	8007fea <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	4b13      	ldr	r3, [pc, #76]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d208      	bcs.n	8007fea <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007fd8:	4b10      	ldr	r3, [pc, #64]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fdc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	490d      	ldr	r1, [pc, #52]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007fea:	f000 f821 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800801c <HAL_RCC_ClockConfig+0x3d0>)
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	490a      	ldr	r1, [pc, #40]	@ (8008024 <HAL_RCC_ClockConfig+0x3d8>)
 8007ffa:	5ccb      	ldrb	r3, [r1, r3]
 8007ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8008000:	4a09      	ldr	r2, [pc, #36]	@ (8008028 <HAL_RCC_ClockConfig+0x3dc>)
 8008002:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008004:	4b09      	ldr	r3, [pc, #36]	@ (800802c <HAL_RCC_ClockConfig+0x3e0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f7fa f8d3 	bl	80021b4 <HAL_InitTick>
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]

  return status;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	46020c00 	.word	0x46020c00
 8008020:	40022000 	.word	0x40022000
 8008024:	0802cb40 	.word	0x0802cb40
 8008028:	20000004 	.word	0x20000004
 800802c:	20000008 	.word	0x20000008

08008030 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008030:	b480      	push	{r7}
 8008032:	b08b      	sub	sp, #44	@ 0x2c
 8008034:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800803e:	4b78      	ldr	r3, [pc, #480]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008048:	4b75      	ldr	r3, [pc, #468]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800804a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d005      	beq.n	8008064 <HAL_RCC_GetSysClockFreq+0x34>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b0c      	cmp	r3, #12
 800805c:	d121      	bne.n	80080a2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d11e      	bne.n	80080a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008064:	4b6e      	ldr	r3, [pc, #440]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d107      	bne.n	8008080 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008070:	4b6b      	ldr	r3, [pc, #428]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008076:	0b1b      	lsrs	r3, r3, #12
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24
 800807e:	e005      	b.n	800808c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008080:	4b67      	ldr	r3, [pc, #412]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	0f1b      	lsrs	r3, r3, #28
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800808c:	4a65      	ldr	r2, [pc, #404]	@ (8008224 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d110      	bne.n	80080be <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80080a0:	e00d      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80080a2:	4b5f      	ldr	r3, [pc, #380]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f003 030c 	and.w	r3, r3, #12
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d102      	bne.n	80080b4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80080ae:	4b5e      	ldr	r3, [pc, #376]	@ (8008228 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80080b0:	623b      	str	r3, [r7, #32]
 80080b2:	e004      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d101      	bne.n	80080be <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80080ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008228 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80080bc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b0c      	cmp	r3, #12
 80080c2:	f040 80a5 	bne.w	8008210 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80080c6:	4b56      	ldr	r3, [pc, #344]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80080d0:	4b53      	ldr	r3, [pc, #332]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d4:	0a1b      	lsrs	r3, r3, #8
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	3301      	adds	r3, #1
 80080dc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80080de:	4b50      	ldr	r3, [pc, #320]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e2:	091b      	lsrs	r3, r3, #4
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80080ea:	4b4d      	ldr	r3, [pc, #308]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ee:	08db      	lsrs	r3, r3, #3
 80080f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	fb02 f303 	mul.w	r3, r2, r3
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008102:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d003      	beq.n	8008114 <HAL_RCC_GetSysClockFreq+0xe4>
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b03      	cmp	r3, #3
 8008110:	d022      	beq.n	8008158 <HAL_RCC_GetSysClockFreq+0x128>
 8008112:	e043      	b.n	800819c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800822c <HAL_RCC_GetSysClockFreq+0x1fc>
 8008122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008126:	4b3e      	ldr	r3, [pc, #248]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008136:	ed97 6a01 	vldr	s12, [r7, #4]
 800813a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008230 <HAL_RCC_GetSysClockFreq+0x200>
 800813e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008142:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800814a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800814e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008156:	e046      	b.n	80081e6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008162:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800822c <HAL_RCC_GetSysClockFreq+0x1fc>
 8008166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816a:	4b2d      	ldr	r3, [pc, #180]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800816c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800817a:	ed97 6a01 	vldr	s12, [r7, #4]
 800817e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008230 <HAL_RCC_GetSysClockFreq+0x200>
 8008182:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008186:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800818a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800818e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800819a:	e024      	b.n	80081e6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80081b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081bc:	ee07 3a90 	vmov	s15, r3
 80081c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80081c4:	ed97 6a01 	vldr	s12, [r7, #4]
 80081c8:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8008230 <HAL_RCC_GetSysClockFreq+0x200>
 80081cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80081d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081e4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80081e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008220 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80081e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ea:	0e1b      	lsrs	r3, r3, #24
 80081ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081f0:	3301      	adds	r3, #1
 80081f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800820a:	ee17 3a90 	vmov	r3, s15
 800820e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008210:	6a3b      	ldr	r3, [r7, #32]
}
 8008212:	4618      	mov	r0, r3
 8008214:	372c      	adds	r7, #44	@ 0x2c
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	46020c00 	.word	0x46020c00
 8008224:	0802cb58 	.word	0x0802cb58
 8008228:	00f42400 	.word	0x00f42400
 800822c:	4b742400 	.word	0x4b742400
 8008230:	46000000 	.word	0x46000000

08008234 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008238:	f7ff fefa 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800823c:	4602      	mov	r2, r0
 800823e:	4b07      	ldr	r3, [pc, #28]	@ (800825c <HAL_RCC_GetHCLKFreq+0x28>)
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	4906      	ldr	r1, [pc, #24]	@ (8008260 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008248:	5ccb      	ldrb	r3, [r1, r3]
 800824a:	fa22 f303 	lsr.w	r3, r2, r3
 800824e:	4a05      	ldr	r2, [pc, #20]	@ (8008264 <HAL_RCC_GetHCLKFreq+0x30>)
 8008250:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008252:	4b04      	ldr	r3, [pc, #16]	@ (8008264 <HAL_RCC_GetHCLKFreq+0x30>)
 8008254:	681b      	ldr	r3, [r3, #0]
}
 8008256:	4618      	mov	r0, r3
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	46020c00 	.word	0x46020c00
 8008260:	0802cb40 	.word	0x0802cb40
 8008264:	20000004 	.word	0x20000004

08008268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800826c:	f7ff ffe2 	bl	8008234 <HAL_RCC_GetHCLKFreq>
 8008270:	4602      	mov	r2, r0
 8008272:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	091b      	lsrs	r3, r3, #4
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	4903      	ldr	r1, [pc, #12]	@ (800828c <HAL_RCC_GetPCLK1Freq+0x24>)
 800827e:	5ccb      	ldrb	r3, [r1, r3]
 8008280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008284:	4618      	mov	r0, r3
 8008286:	bd80      	pop	{r7, pc}
 8008288:	46020c00 	.word	0x46020c00
 800828c:	0802cb50 	.word	0x0802cb50

08008290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008294:	f7ff ffce 	bl	8008234 <HAL_RCC_GetHCLKFreq>
 8008298:	4602      	mov	r2, r0
 800829a:	4b05      	ldr	r3, [pc, #20]	@ (80082b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	4903      	ldr	r1, [pc, #12]	@ (80082b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082a6:	5ccb      	ldrb	r3, [r1, r3]
 80082a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	46020c00 	.word	0x46020c00
 80082b4:	0802cb50 	.word	0x0802cb50

080082b8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80082bc:	f7ff ffba 	bl	8008234 <HAL_RCC_GetHCLKFreq>
 80082c0:	4602      	mov	r2, r0
 80082c2:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <HAL_RCC_GetPCLK3Freq+0x20>)
 80082c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c6:	091b      	lsrs	r3, r3, #4
 80082c8:	f003 0307 	and.w	r3, r3, #7
 80082cc:	4903      	ldr	r1, [pc, #12]	@ (80082dc <HAL_RCC_GetPCLK3Freq+0x24>)
 80082ce:	5ccb      	ldrb	r3, [r1, r3]
 80082d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	46020c00 	.word	0x46020c00
 80082dc:	0802cb50 	.word	0x0802cb50

080082e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	221f      	movs	r2, #31
 80082ee:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80082f0:	4b15      	ldr	r3, [pc, #84]	@ (8008348 <HAL_RCC_GetClockConfig+0x68>)
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	f003 0203 	and.w	r2, r3, #3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80082fc:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <HAL_RCC_GetClockConfig+0x68>)
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	f003 020f 	and.w	r2, r3, #15
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008308:	4b0f      	ldr	r3, [pc, #60]	@ (8008348 <HAL_RCC_GetClockConfig+0x68>)
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8008314:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <HAL_RCC_GetClockConfig+0x68>)
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	091b      	lsrs	r3, r3, #4
 800831a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8008322:	4b09      	ldr	r3, [pc, #36]	@ (8008348 <HAL_RCC_GetClockConfig+0x68>)
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800832e:	4b07      	ldr	r3, [pc, #28]	@ (800834c <HAL_RCC_GetClockConfig+0x6c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 020f 	and.w	r2, r3, #15
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	601a      	str	r2, [r3, #0]
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	46020c00 	.word	0x46020c00
 800834c:	40022000 	.word	0x40022000

08008350 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8008354:	4b05      	ldr	r3, [pc, #20]	@ (800836c <HAL_RCC_EnableCSS+0x1c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a04      	ldr	r2, [pc, #16]	@ (800836c <HAL_RCC_EnableCSS+0x1c>)
 800835a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800835e:	6013      	str	r3, [r2, #0]
}
 8008360:	bf00      	nop
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	46020c00 	.word	0x46020c00

08008370 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008374:	4b07      	ldr	r3, [pc, #28]	@ (8008394 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800837c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008380:	d105      	bne.n	800838e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008382:	4b04      	ldr	r3, [pc, #16]	@ (8008394 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008384:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008388:	659a      	str	r2, [r3, #88]	@ 0x58

    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800838a:	f000 f805 	bl	8008398 <HAL_RCC_CSSCallback>
  }
}
 800838e:	bf00      	nop
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	46020c00 	.word	0x46020c00

08008398 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80083b0:	4b3e      	ldr	r3, [pc, #248]	@ (80084ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80083b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80083be:	f7fe fceb 	bl	8006d98 <HAL_PWREx_GetVoltageRange>
 80083c2:	6178      	str	r0, [r7, #20]
 80083c4:	e019      	b.n	80083fa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80083c6:	4b39      	ldr	r3, [pc, #228]	@ (80084ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80083c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083cc:	4a37      	ldr	r2, [pc, #220]	@ (80084ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80083ce:	f043 0304 	orr.w	r3, r3, #4
 80083d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80083d6:	4b35      	ldr	r3, [pc, #212]	@ (80084ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80083d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80083e4:	f7fe fcd8 	bl	8006d98 <HAL_PWREx_GetVoltageRange>
 80083e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80083ea:	4b30      	ldr	r3, [pc, #192]	@ (80084ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80083ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083f0:	4a2e      	ldr	r2, [pc, #184]	@ (80084ac <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80083f2:	f023 0304 	bic.w	r3, r3, #4
 80083f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008400:	d003      	beq.n	800840a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008408:	d109      	bne.n	800841e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008410:	d202      	bcs.n	8008418 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008412:	2301      	movs	r3, #1
 8008414:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008416:	e033      	b.n	8008480 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800841c:	e030      	b.n	8008480 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008424:	d208      	bcs.n	8008438 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800842c:	d102      	bne.n	8008434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800842e:	2303      	movs	r3, #3
 8008430:	613b      	str	r3, [r7, #16]
 8008432:	e025      	b.n	8008480 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e035      	b.n	80084a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800843e:	d90f      	bls.n	8008460 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d109      	bne.n	800845a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800844c:	d902      	bls.n	8008454 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800844e:	2300      	movs	r3, #0
 8008450:	613b      	str	r3, [r7, #16]
 8008452:	e015      	b.n	8008480 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008454:	2301      	movs	r3, #1
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	e012      	b.n	8008480 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800845a:	2300      	movs	r3, #0
 800845c:	613b      	str	r3, [r7, #16]
 800845e:	e00f      	b.n	8008480 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008466:	d109      	bne.n	800847c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800846e:	d102      	bne.n	8008476 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008470:	2301      	movs	r3, #1
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	e004      	b.n	8008480 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008476:	2302      	movs	r3, #2
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	e001      	b.n	8008480 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800847c:	2301      	movs	r3, #1
 800847e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008480:	4b0b      	ldr	r3, [pc, #44]	@ (80084b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f023 020f 	bic.w	r2, r3, #15
 8008488:	4909      	ldr	r1, [pc, #36]	@ (80084b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008490:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	429a      	cmp	r2, r3
 800849c:	d001      	beq.n	80084a2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	46020c00 	.word	0x46020c00
 80084b0:	40022000 	.word	0x40022000

080084b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80084b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b8:	b0c8      	sub	sp, #288	@ 0x120
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80084c0:	2300      	movs	r3, #0
 80084c2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084c6:	2300      	movs	r3, #0
 80084c8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f002 0401 	and.w	r4, r2, #1
 80084d8:	2500      	movs	r5, #0
 80084da:	ea54 0305 	orrs.w	r3, r4, r5
 80084de:	d00b      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80084e0:	4bd5      	ldr	r3, [pc, #852]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084e6:	f023 0103 	bic.w	r1, r3, #3
 80084ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f0:	4ad1      	ldr	r2, [pc, #836]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084f2:	430b      	orrs	r3, r1
 80084f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	f002 0802 	and.w	r8, r2, #2
 8008504:	f04f 0900 	mov.w	r9, #0
 8008508:	ea58 0309 	orrs.w	r3, r8, r9
 800850c:	d00b      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800850e:	4bca      	ldr	r3, [pc, #808]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008514:	f023 010c 	bic.w	r1, r3, #12
 8008518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851e:	4ac6      	ldr	r2, [pc, #792]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008520:	430b      	orrs	r3, r1
 8008522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f002 0a04 	and.w	sl, r2, #4
 8008532:	f04f 0b00 	mov.w	fp, #0
 8008536:	ea5a 030b 	orrs.w	r3, sl, fp
 800853a:	d00b      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800853c:	4bbe      	ldr	r3, [pc, #760]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800853e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008542:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800854a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854c:	4aba      	ldr	r2, [pc, #744]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800854e:	430b      	orrs	r3, r1
 8008550:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f002 0308 	and.w	r3, r2, #8
 8008560:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008564:	2300      	movs	r3, #0
 8008566:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800856a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800856e:	460b      	mov	r3, r1
 8008570:	4313      	orrs	r3, r2
 8008572:	d00b      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008574:	4bb0      	ldr	r3, [pc, #704]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800857a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800857e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008584:	4aac      	ldr	r2, [pc, #688]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008586:	430b      	orrs	r3, r1
 8008588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800858c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f002 0310 	and.w	r3, r2, #16
 8008598:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800859c:	2300      	movs	r3, #0
 800859e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80085a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80085a6:	460b      	mov	r3, r1
 80085a8:	4313      	orrs	r3, r2
 80085aa:	d00b      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80085ac:	4ba2      	ldr	r3, [pc, #648]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80085b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085bc:	4a9e      	ldr	r2, [pc, #632]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085be:	430b      	orrs	r3, r1
 80085c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80085d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80085d4:	2300      	movs	r3, #0
 80085d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80085da:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80085de:	460b      	mov	r3, r1
 80085e0:	4313      	orrs	r3, r2
 80085e2:	d00b      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80085e4:	4b94      	ldr	r3, [pc, #592]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80085ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085f4:	4a90      	ldr	r2, [pc, #576]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085f6:	430b      	orrs	r3, r1
 80085f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f002 0320 	and.w	r3, r2, #32
 8008608:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008612:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d00b      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800861c:	4b86      	ldr	r3, [pc, #536]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800861e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008622:	f023 0107 	bic.w	r1, r3, #7
 8008626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800862a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800862c:	4a82      	ldr	r2, [pc, #520]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800862e:	430b      	orrs	r3, r1
 8008630:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008644:	2300      	movs	r3, #0
 8008646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800864a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800864e:	460b      	mov	r3, r1
 8008650:	4313      	orrs	r3, r2
 8008652:	d00b      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008654:	4b78      	ldr	r3, [pc, #480]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800865a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800865e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008664:	4a74      	ldr	r2, [pc, #464]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008666:	430b      	orrs	r3, r1
 8008668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800866c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008674:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800867c:	2300      	movs	r3, #0
 800867e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008686:	460b      	mov	r3, r1
 8008688:	4313      	orrs	r3, r2
 800868a:	d00b      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800868c:	4b6a      	ldr	r3, [pc, #424]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800868e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008692:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800869a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869c:	4a66      	ldr	r2, [pc, #408]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800869e:	430b      	orrs	r3, r1
 80086a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80086b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80086ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80086be:	460b      	mov	r3, r1
 80086c0:	4313      	orrs	r3, r2
 80086c2:	d00b      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80086c4:	4b5c      	ldr	r3, [pc, #368]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80086c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80086ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086d4:	4a58      	ldr	r2, [pc, #352]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80086d6:	430b      	orrs	r3, r1
 80086d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80086e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086ec:	2300      	movs	r3, #0
 80086ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80086f6:	460b      	mov	r3, r1
 80086f8:	4313      	orrs	r3, r2
 80086fa:	d00b      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80086fc:	4b4e      	ldr	r3, [pc, #312]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80086fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008702:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8008706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800870a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800870c:	4a4a      	ldr	r2, [pc, #296]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800870e:	430b      	orrs	r3, r1
 8008710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8008714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008724:	2300      	movs	r3, #0
 8008726:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800872a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800872e:	460b      	mov	r3, r1
 8008730:	4313      	orrs	r3, r2
 8008732:	d00b      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8008734:	4b40      	ldr	r3, [pc, #256]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008736:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800873a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800873e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008744:	4a3c      	ldr	r2, [pc, #240]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008746:	430b      	orrs	r3, r1
 8008748:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800874c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008762:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008766:	460b      	mov	r3, r1
 8008768:	4313      	orrs	r3, r2
 800876a:	d00c      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800876c:	4b32      	ldr	r3, [pc, #200]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800876e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008772:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800877a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877e:	4a2e      	ldr	r2, [pc, #184]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008780:	430b      	orrs	r3, r1
 8008782:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008796:	2300      	movs	r3, #0
 8008798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800879c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4313      	orrs	r3, r2
 80087a4:	d00c      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80087a6:	4b24      	ldr	r3, [pc, #144]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80087a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087ac:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80087b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80087ba:	430b      	orrs	r3, r1
 80087bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80087c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80087cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087d0:	2300      	movs	r3, #0
 80087d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087da:	460b      	mov	r3, r1
 80087dc:	4313      	orrs	r3, r2
 80087de:	d00c      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80087e0:	4b15      	ldr	r3, [pc, #84]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80087e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087e6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80087ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f2:	4a11      	ldr	r2, [pc, #68]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80087f4:	430b      	orrs	r3, r1
 80087f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80087fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800880a:	2300      	movs	r3, #0
 800880c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008810:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008814:	460b      	mov	r3, r1
 8008816:	4313      	orrs	r3, r2
 8008818:	d010      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800881a:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800881c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008820:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800882c:	4a02      	ldr	r2, [pc, #8]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800882e:	430b      	orrs	r3, r1
 8008830:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008834:	e002      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8008836:	bf00      	nop
 8008838:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800883c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800884c:	2300      	movs	r3, #0
 800884e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008852:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008856:	460b      	mov	r3, r1
 8008858:	4313      	orrs	r3, r2
 800885a:	d04c      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800885c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008860:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008864:	2b80      	cmp	r3, #128	@ 0x80
 8008866:	d02d      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008868:	2b80      	cmp	r3, #128	@ 0x80
 800886a:	d827      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x408>
 800886c:	2b60      	cmp	r3, #96	@ 0x60
 800886e:	d02b      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008870:	2b60      	cmp	r3, #96	@ 0x60
 8008872:	d823      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008874:	2b40      	cmp	r3, #64	@ 0x40
 8008876:	d006      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	d81f      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x408>
 800887c:	2b00      	cmp	r3, #0
 800887e:	d009      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008880:	2b20      	cmp	r3, #32
 8008882:	d011      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008884:	e01a      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008886:	4bc0      	ldr	r3, [pc, #768]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888a:	4abf      	ldr	r2, [pc, #764]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800888c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008890:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008892:	e01a      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008898:	3308      	adds	r3, #8
 800889a:	4618      	mov	r0, r3
 800889c:	f002 fce8 	bl	800b270 <RCCEx_PLL2_Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80088a6:	e010      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80088a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ac:	332c      	adds	r3, #44	@ 0x2c
 80088ae:	4618      	mov	r0, r3
 80088b0:	f002 fd76 	bl	800b3a0 <RCCEx_PLL3_Config>
 80088b4:	4603      	mov	r3, r0
 80088b6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80088ba:	e006      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80088c2:	e002      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80088c4:	bf00      	nop
 80088c6:	e000      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80088c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ca:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10d      	bne.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80088d2:	4bad      	ldr	r3, [pc, #692]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80088d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088d8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80088dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088e4:	4aa8      	ldr	r2, [pc, #672]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80088e6:	430b      	orrs	r3, r1
 80088e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80088ec:	e003      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80088f2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80088f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008906:	2300      	movs	r3, #0
 8008908:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800890c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008910:	460b      	mov	r3, r1
 8008912:	4313      	orrs	r3, r2
 8008914:	d053      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800891a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800891e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008922:	d033      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8008924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008928:	d82c      	bhi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800892a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800892e:	d02f      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8008930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008934:	d826      	bhi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800893a:	d008      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800893c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008940:	d820      	bhi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800894a:	d011      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800894c:	e01a      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800894e:	4b8e      	ldr	r3, [pc, #568]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	4a8d      	ldr	r2, [pc, #564]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008958:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800895a:	e01a      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800895c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008960:	3308      	adds	r3, #8
 8008962:	4618      	mov	r0, r3
 8008964:	f002 fc84 	bl	800b270 <RCCEx_PLL2_Config>
 8008968:	4603      	mov	r3, r0
 800896a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800896e:	e010      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008974:	332c      	adds	r3, #44	@ 0x2c
 8008976:	4618      	mov	r0, r3
 8008978:	f002 fd12 	bl	800b3a0 <RCCEx_PLL3_Config>
 800897c:	4603      	mov	r3, r0
 800897e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008982:	e006      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800898a:	e002      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800898c:	bf00      	nop
 800898e:	e000      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008992:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10d      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800899a:	4b7b      	ldr	r3, [pc, #492]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800899c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089a0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80089a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80089ac:	4a76      	ldr	r2, [pc, #472]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80089ae:	430b      	orrs	r3, r1
 80089b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80089b4:	e003      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80089ba:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80089be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80089ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80089ce:	2300      	movs	r3, #0
 80089d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80089d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80089d8:	460b      	mov	r3, r1
 80089da:	4313      	orrs	r3, r2
 80089dc:	d046      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80089de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089e6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80089ea:	d028      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80089ec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80089f0:	d821      	bhi.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80089f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089f6:	d022      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80089f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089fc:	d81b      	bhi.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80089fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a02:	d01c      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008a04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a08:	d815      	bhi.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a0e:	d008      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8008a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a14:	d80f      	bhi.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d011      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a1e:	d00e      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008a20:	e009      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a26:	3308      	adds	r3, #8
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f002 fc21 	bl	800b270 <RCCEx_PLL2_Config>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008a34:	e004      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008a3c:	e000      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8008a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a40:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10d      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008a48:	4b4f      	ldr	r3, [pc, #316]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008a4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a4e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a5a:	4a4b      	ldr	r2, [pc, #300]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008a62:	e003      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008a68:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008a86:	460b      	mov	r3, r1
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	d03f      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d81e      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8008a98:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008adf 	.word	0x08008adf
 8008aa4:	08008ab5 	.word	0x08008ab5
 8008aa8:	08008ac3 	.word	0x08008ac3
 8008aac:	08008adf 	.word	0x08008adf
 8008ab0:	08008adf 	.word	0x08008adf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ab4:	4b34      	ldr	r3, [pc, #208]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab8:	4a33      	ldr	r2, [pc, #204]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008abe:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008ac0:	e00e      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac6:	332c      	adds	r3, #44	@ 0x2c
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f002 fc69 	bl	800b3a0 <RCCEx_PLL3_Config>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008ad4:	e004      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008adc:	e000      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8008ade:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008ae0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008ae8:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008aea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008aee:	f023 0107 	bic.w	r1, r3, #7
 8008af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008afa:	4a23      	ldr	r2, [pc, #140]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008afc:	430b      	orrs	r3, r1
 8008afe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008b02:	e003      	b.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b04:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008b08:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008b18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b1e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008b22:	460b      	mov	r3, r1
 8008b24:	4313      	orrs	r3, r2
 8008b26:	d04c      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b34:	d02a      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8008b36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b3a:	d821      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008b3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b40:	d026      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8008b42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b46:	d81b      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b4c:	d00e      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8008b4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b52:	d815      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d01d      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8008b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b5c:	d110      	bne.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b62:	4a09      	ldr	r2, [pc, #36]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b68:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008b6a:	e014      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b70:	332c      	adds	r3, #44	@ 0x2c
 8008b72:	4618      	mov	r0, r3
 8008b74:	f002 fc14 	bl	800b3a0 <RCCEx_PLL3_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008b7e:	e00a      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008b86:	e006      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008b88:	46020c00 	.word	0x46020c00
        break;
 8008b8c:	bf00      	nop
 8008b8e:	e002      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8008b90:	bf00      	nop
 8008b92:	e000      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8008b94:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008b96:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10d      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008b9e:	4baf      	ldr	r3, [pc, #700]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008ba0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ba4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bb0:	4aaa      	ldr	r2, [pc, #680]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008bb8:	e003      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008bbe:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008bce:	673b      	str	r3, [r7, #112]	@ 0x70
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008bd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f000 80b5 	beq.w	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008be0:	2300      	movs	r3, #0
 8008be2:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008be6:	4b9d      	ldr	r3, [pc, #628]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d113      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bf4:	4b99      	ldr	r3, [pc, #612]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bfa:	4a98      	ldr	r2, [pc, #608]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bfc:	f043 0304 	orr.w	r3, r3, #4
 8008c00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008c04:	4b95      	ldr	r3, [pc, #596]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8008c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008c1c:	4b90      	ldr	r3, [pc, #576]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c20:	4a8f      	ldr	r2, [pc, #572]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c28:	f7f9 fd00 	bl	800262c <HAL_GetTick>
 8008c2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008c30:	e00b      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c32:	f7f9 fcfb 	bl	800262c <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d903      	bls.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008c48:	e005      	b.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008c4a:	4b85      	ldr	r3, [pc, #532]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0ed      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8008c56:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d165      	bne.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c68:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d023      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x808>
 8008c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c78:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d01b      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c84:	4b75      	ldr	r3, [pc, #468]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c92:	4b72      	ldr	r3, [pc, #456]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c98:	4a70      	ldr	r2, [pc, #448]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ca8:	4a6c      	ldr	r2, [pc, #432]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008cb2:	4a6a      	ldr	r2, [pc, #424]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008cb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d019      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc8:	f7f9 fcb0 	bl	800262c <HAL_GetTick>
 8008ccc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cd0:	e00d      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cd2:	f7f9 fcab 	bl	800262c <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cdc:	1ad2      	subs	r2, r2, r3
 8008cde:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d903      	bls.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8008cec:	e006      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cee:	4b5b      	ldr	r3, [pc, #364]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0ea      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8008cfc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10d      	bne.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008d04:	4b55      	ldr	r3, [pc, #340]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d12:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008d16:	4a51      	ldr	r2, [pc, #324]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008d1e:	e008      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d20:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008d24:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8008d28:	e003      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008d2e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d32:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d107      	bne.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d3a:	4b48      	ldr	r3, [pc, #288]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d40:	4a46      	ldr	r2, [pc, #280]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008d42:	f023 0304 	bic.w	r3, r3, #4
 8008d46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008d56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d58:	2300      	movs	r3, #0
 8008d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008d60:	460b      	mov	r3, r1
 8008d62:	4313      	orrs	r3, r2
 8008d64:	d042      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d6e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d72:	d022      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x906>
 8008d74:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d78:	d81b      	bhi.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d7e:	d011      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008d80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d84:	d815      	bhi.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d019      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008d8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d8e:	d110      	bne.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d94:	3308      	adds	r3, #8
 8008d96:	4618      	mov	r0, r3
 8008d98:	f002 fa6a 	bl	800b270 <RCCEx_PLL2_Config>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008da2:	e00d      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da4:	4b2d      	ldr	r3, [pc, #180]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	4a2c      	ldr	r2, [pc, #176]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dae:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008db0:	e006      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008db8:	e002      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8008dba:	bf00      	nop
 8008dbc:	e000      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8008dbe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008dc0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10d      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008dc8:	4b24      	ldr	r3, [pc, #144]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dce:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008dda:	4a20      	ldr	r2, [pc, #128]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008de2:	e003      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008de8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008df8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008dfe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e02:	460b      	mov	r3, r1
 8008e04:	4313      	orrs	r3, r2
 8008e06:	d031      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e14:	d00b      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e1a:	d804      	bhi.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d008      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e24:	d007      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008e2c:	e004      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008e2e:	bf00      	nop
 8008e30:	e002      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008e36:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008e38:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d111      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008e40:	4b06      	ldr	r3, [pc, #24]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008e42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e52:	4a02      	ldr	r2, [pc, #8]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008e54:	430b      	orrs	r3, r1
 8008e56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008e5a:	e007      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8008e5c:	46020c00 	.word	0x46020c00
 8008e60:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e64:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008e68:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008e78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008e82:	460b      	mov	r3, r1
 8008e84:	4313      	orrs	r3, r2
 8008e86:	d00c      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008e88:	4bb2      	ldr	r3, [pc, #712]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e8e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8008e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e9a:	4aae      	ldr	r2, [pc, #696]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008eb4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	d019      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eca:	d105      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ecc:	4ba1      	ldr	r3, [pc, #644]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed0:	4aa0      	ldr	r2, [pc, #640]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ed6:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008ed8:	4b9e      	ldr	r3, [pc, #632]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008eda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ede:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008eea:	4a9a      	ldr	r2, [pc, #616]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008eec:	430b      	orrs	r3, r1
 8008eee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f00:	2300      	movs	r3, #0
 8008f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	d00c      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008f0e:	4b91      	ldr	r3, [pc, #580]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f14:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008f20:	4a8c      	ldr	r2, [pc, #560]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f22:	430b      	orrs	r3, r1
 8008f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f36:	2300      	movs	r3, #0
 8008f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4313      	orrs	r3, r2
 8008f42:	d00c      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008f44:	4b83      	ldr	r3, [pc, #524]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008f56:	4a7f      	ldr	r2, [pc, #508]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f70:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008f74:	460b      	mov	r3, r1
 8008f76:	4313      	orrs	r3, r2
 8008f78:	d00c      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008f7a:	4b76      	ldr	r3, [pc, #472]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f80:	f023 0118 	bic.w	r1, r3, #24
 8008f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f88:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008f8c:	4a71      	ldr	r2, [pc, #452]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f8e:	430b      	orrs	r3, r1
 8008f90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008faa:	460b      	mov	r3, r1
 8008fac:	4313      	orrs	r3, r2
 8008fae:	d032      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008fb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fbc:	d105      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fbe:	4b65      	ldr	r3, [pc, #404]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc2:	4a64      	ldr	r2, [pc, #400]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fc8:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008fd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fd6:	d108      	bne.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fdc:	3308      	adds	r3, #8
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f002 f946 	bl	800b270 <RCCEx_PLL2_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 8008fea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10d      	bne.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008ff2:	4b58      	ldr	r3, [pc, #352]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ff8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009000:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009004:	4a53      	ldr	r2, [pc, #332]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009006:	430b      	orrs	r3, r1
 8009008:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800900c:	e003      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009012:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8009016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	2100      	movs	r1, #0
 8009020:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009028:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800902c:	460b      	mov	r3, r1
 800902e:	4313      	orrs	r3, r2
 8009030:	d04a      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8009032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009036:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800903a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800903e:	d01e      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009040:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009044:	d825      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009046:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800904a:	d00e      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800904c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009050:	d81f      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d021      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8009056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800905a:	d11a      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905c:	4b3d      	ldr	r3, [pc, #244]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800905e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009060:	4a3c      	ldr	r2, [pc, #240]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009066:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009068:	e018      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800906a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906e:	3308      	adds	r3, #8
 8009070:	4618      	mov	r0, r3
 8009072:	f002 f8fd 	bl	800b270 <RCCEx_PLL2_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800907c:	e00e      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800907e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009082:	332c      	adds	r3, #44	@ 0x2c
 8009084:	4618      	mov	r0, r3
 8009086:	f002 f98b 	bl	800b3a0 <RCCEx_PLL3_Config>
 800908a:	4603      	mov	r3, r0
 800908c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009090:	e004      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009098:	e000      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800909a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800909c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10d      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80090a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80090a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80090ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80090b6:	4927      	ldr	r1, [pc, #156]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80090be:	e003      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80090c4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80090c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80090d4:	623b      	str	r3, [r7, #32]
 80090d6:	2300      	movs	r3, #0
 80090d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80090de:	460b      	mov	r3, r1
 80090e0:	4313      	orrs	r3, r2
 80090e2:	d03d      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80090e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090f0:	d00e      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80090f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090f6:	d815      	bhi.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d017      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80090fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009100:	d110      	bne.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009102:	4b14      	ldr	r3, [pc, #80]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009106:	4a13      	ldr	r2, [pc, #76]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800910c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800910e:	e00e      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009114:	3308      	adds	r3, #8
 8009116:	4618      	mov	r0, r3
 8009118:	f002 f8aa 	bl	800b270 <RCCEx_PLL2_Config>
 800911c:	4603      	mov	r3, r0
 800911e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009122:	e004      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800912a:	e000      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800912c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800912e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009132:	2b00      	cmp	r3, #0
 8009134:	d110      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009136:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800913c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009148:	4902      	ldr	r1, [pc, #8]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800914a:	4313      	orrs	r3, r2
 800914c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009150:	e006      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009152:	bf00      	nop
 8009154:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009158:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800915c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800916c:	61bb      	str	r3, [r7, #24]
 800916e:	2300      	movs	r3, #0
 8009170:	61fb      	str	r3, [r7, #28]
 8009172:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009176:	460b      	mov	r3, r1
 8009178:	4313      	orrs	r3, r2
 800917a:	d00c      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800917c:	4b68      	ldr	r3, [pc, #416]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800917e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009182:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800918a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800918e:	4964      	ldr	r1, [pc, #400]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009190:	4313      	orrs	r3, r2
 8009192:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009196:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	2100      	movs	r1, #0
 80091a0:	6139      	str	r1, [r7, #16]
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091ac:	460b      	mov	r3, r1
 80091ae:	4313      	orrs	r3, r2
 80091b0:	d036      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 80091b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00c      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80091be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091c2:	d113      	bne.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80091c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c8:	3308      	adds	r3, #8
 80091ca:	4618      	mov	r0, r3
 80091cc:	f002 f850 	bl	800b270 <RCCEx_PLL2_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80091d6:	e00d      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091dc:	332c      	adds	r3, #44	@ 0x2c
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 f8de 	bl	800b3a0 <RCCEx_PLL3_Config>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80091ea:	e003      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80091f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091f4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10d      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 80091fc:	4b48      	ldr	r3, [pc, #288]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80091fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009202:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800920a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800920e:	4944      	ldr	r1, [pc, #272]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009210:	4313      	orrs	r3, r2
 8009212:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009216:	e003      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009218:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800921c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	2100      	movs	r1, #0
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009236:	460b      	mov	r3, r1
 8009238:	4313      	orrs	r3, r2
 800923a:	d024      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800923c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009244:	2b00      	cmp	r3, #0
 8009246:	d108      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800924c:	332c      	adds	r3, #44	@ 0x2c
 800924e:	4618      	mov	r0, r3
 8009250:	f002 f8a6 	bl	800b3a0 <RCCEx_PLL3_Config>
 8009254:	4603      	mov	r3, r0
 8009256:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800925a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10d      	bne.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8009262:	4b2f      	ldr	r3, [pc, #188]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009264:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009268:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800926c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009274:	492a      	ldr	r1, [pc, #168]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009276:	4313      	orrs	r3, r2
 8009278:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800927c:	e003      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009282:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8009286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	2100      	movs	r1, #0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	f003 0308 	and.w	r3, r3, #8
 8009296:	607b      	str	r3, [r7, #4]
 8009298:	e9d7 1200 	ldrd	r1, r2, [r7]
 800929c:	460b      	mov	r3, r1
 800929e:	4313      	orrs	r3, r2
 80092a0:	d036      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80092a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80092aa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80092ae:	d00d      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80092b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80092b4:	d811      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80092b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092ba:	d012      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80092bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092c0:	d80b      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00d      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80092c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092ca:	d106      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092cc:	4b14      	ldr	r3, [pc, #80]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80092ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d0:	4a13      	ldr	r2, [pc, #76]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80092d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092d6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80092d8:	e004      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80092e0:	e000      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 80092e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092e4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10d      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80092ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80092ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80092f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80092fe:	4908      	ldr	r1, [pc, #32]	@ (8009320 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009300:	4313      	orrs	r3, r2
 8009302:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009306:	e003      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009308:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800930c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009310:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8009314:	4618      	mov	r0, r3
 8009316:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800931a:	46bd      	mov	sp, r7
 800931c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009320:	46020c00 	.word	0x46020c00

08009324 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009324:	b480      	push	{r7}
 8009326:	b089      	sub	sp, #36	@ 0x24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800932c:	4ba6      	ldr	r3, [pc, #664]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800932e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009334:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009336:	4ba4      	ldr	r3, [pc, #656]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009340:	4ba1      	ldr	r3, [pc, #644]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009344:	0a1b      	lsrs	r3, r3, #8
 8009346:	f003 030f 	and.w	r3, r3, #15
 800934a:	3301      	adds	r3, #1
 800934c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800934e:	4b9e      	ldr	r3, [pc, #632]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009352:	091b      	lsrs	r3, r3, #4
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800935a:	4b9b      	ldr	r3, [pc, #620]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	08db      	lsrs	r3, r3, #3
 8009360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	fb02 f303 	mul.w	r3, r2, r3
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009372:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b03      	cmp	r3, #3
 800937a:	d062      	beq.n	8009442 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2b03      	cmp	r3, #3
 8009380:	f200 8081 	bhi.w	8009486 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d024      	beq.n	80093d4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d17a      	bne.n	8009486 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	ee07 3a90 	vmov	s15, r3
 8009396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80095cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800939e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a2:	4b89      	ldr	r3, [pc, #548]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80093b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80093b6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80095d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80093ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80093be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80093c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80093ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093d2:	e08f      	b.n	80094f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80093d4:	4b7c      	ldr	r3, [pc, #496]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80093e0:	4b79      	ldr	r3, [pc, #484]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	0f1b      	lsrs	r3, r3, #28
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	e006      	b.n	80093fa <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80093ec:	4b76      	ldr	r3, [pc, #472]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093f2:	041b      	lsls	r3, r3, #16
 80093f4:	0f1b      	lsrs	r3, r3, #28
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	4a76      	ldr	r2, [pc, #472]	@ (80095d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80093fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	ee07 3a90 	vmov	s15, r3
 800941c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009420:	ed97 6a02 	vldr	s12, [r7, #8]
 8009424:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80095d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009430:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009434:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009440:	e058      	b.n	80094f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	ee07 3a90 	vmov	s15, r3
 8009448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80095cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009454:	4b5c      	ldr	r3, [pc, #368]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945c:	ee07 3a90 	vmov	s15, r3
 8009460:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009464:	ed97 6a02 	vldr	s12, [r7, #8]
 8009468:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80095d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800946c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009470:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009474:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009478:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800947c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009480:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009484:	e036      	b.n	80094f4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009486:	4b50      	ldr	r3, [pc, #320]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009492:	4b4d      	ldr	r3, [pc, #308]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	0f1b      	lsrs	r3, r3, #28
 8009498:	f003 030f 	and.w	r3, r3, #15
 800949c:	e006      	b.n	80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800949e:	4b4a      	ldr	r3, [pc, #296]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80094a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094a4:	041b      	lsls	r3, r3, #16
 80094a6:	0f1b      	lsrs	r3, r3, #28
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	4a49      	ldr	r2, [pc, #292]	@ (80095d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80094ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	ee07 3a90 	vmov	s15, r3
 80094c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80094d6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80095d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80094da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80094ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094f2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80094f4:	4b34      	ldr	r3, [pc, #208]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80094f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d017      	beq.n	8009530 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009500:	4b31      	ldr	r3, [pc, #196]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009504:	0a5b      	lsrs	r3, r3, #9
 8009506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009516:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800951a:	edd7 6a07 	vldr	s13, [r7, #28]
 800951e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009526:	ee17 2a90 	vmov	r2, s15
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	e002      	b.n	8009536 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009536:	4b24      	ldr	r3, [pc, #144]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d017      	beq.n	8009572 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009542:	4b21      	ldr	r3, [pc, #132]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009546:	0c1b      	lsrs	r3, r3, #16
 8009548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009558:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800955c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009568:	ee17 2a90 	vmov	r2, s15
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	605a      	str	r2, [r3, #4]
 8009570:	e002      	b.n	8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009578:	4b13      	ldr	r3, [pc, #76]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800957a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d017      	beq.n	80095b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009584:	4b10      	ldr	r3, [pc, #64]	@ (80095c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009588:	0e1b      	lsrs	r3, r3, #24
 800958a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009596:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800959a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800959e:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095aa:	ee17 2a90 	vmov	r2, s15
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80095b2:	e002      	b.n	80095ba <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	609a      	str	r2, [r3, #8]
}
 80095ba:	bf00      	nop
 80095bc:	3724      	adds	r7, #36	@ 0x24
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	46020c00 	.word	0x46020c00
 80095cc:	4b742400 	.word	0x4b742400
 80095d0:	46000000 	.word	0x46000000
 80095d4:	0802cb58 	.word	0x0802cb58

080095d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80095d8:	b480      	push	{r7}
 80095da:	b089      	sub	sp, #36	@ 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80095e0:	4ba6      	ldr	r3, [pc, #664]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80095ea:	4ba4      	ldr	r3, [pc, #656]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ee:	f003 0303 	and.w	r3, r3, #3
 80095f2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80095f4:	4ba1      	ldr	r3, [pc, #644]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f8:	0a1b      	lsrs	r3, r3, #8
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	3301      	adds	r3, #1
 8009600:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009602:	4b9e      	ldr	r3, [pc, #632]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009606:	091b      	lsrs	r3, r3, #4
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800960e:	4b9b      	ldr	r3, [pc, #620]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009612:	08db      	lsrs	r3, r3, #3
 8009614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	fb02 f303 	mul.w	r3, r2, r3
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009626:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b03      	cmp	r3, #3
 800962e:	d062      	beq.n	80096f6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	2b03      	cmp	r3, #3
 8009634:	f200 8081 	bhi.w	800973a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d024      	beq.n	8009688 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b02      	cmp	r3, #2
 8009642:	d17a      	bne.n	800973a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009656:	4b89      	ldr	r3, [pc, #548]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965e:	ee07 3a90 	vmov	s15, r3
 8009662:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009666:	ed97 6a02 	vldr	s12, [r7, #8]
 800966a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800966e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009672:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800967a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800967e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009682:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009686:	e08f      	b.n	80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009688:	4b7c      	ldr	r3, [pc, #496]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009694:	4b79      	ldr	r3, [pc, #484]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	0f1b      	lsrs	r3, r3, #28
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	e006      	b.n	80096ae <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80096a0:	4b76      	ldr	r3, [pc, #472]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80096a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096a6:	041b      	lsls	r3, r3, #16
 80096a8:	0f1b      	lsrs	r3, r3, #28
 80096aa:	f003 030f 	and.w	r3, r3, #15
 80096ae:	4a76      	ldr	r2, [pc, #472]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80096b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b4:	ee07 3a90 	vmov	s15, r3
 80096b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80096d8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80096dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80096ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096f4:	e058      	b.n	80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	ee07 3a90 	vmov	s15, r3
 80096fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009700:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009708:	4b5c      	ldr	r3, [pc, #368]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800970a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800970c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009710:	ee07 3a90 	vmov	s15, r3
 8009714:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009718:	ed97 6a02 	vldr	s12, [r7, #8]
 800971c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009720:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009724:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009728:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800972c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009734:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009738:	e036      	b.n	80097a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800973a:	4b50      	ldr	r3, [pc, #320]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009746:	4b4d      	ldr	r3, [pc, #308]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	0f1b      	lsrs	r3, r3, #28
 800974c:	f003 030f 	and.w	r3, r3, #15
 8009750:	e006      	b.n	8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8009752:	4b4a      	ldr	r3, [pc, #296]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009758:	041b      	lsls	r3, r3, #16
 800975a:	0f1b      	lsrs	r3, r3, #28
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	4a49      	ldr	r2, [pc, #292]	@ (8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009786:	ed97 6a02 	vldr	s12, [r7, #8]
 800978a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009884 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800978e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800979a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800979e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097a6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80097a8:	4b34      	ldr	r3, [pc, #208]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80097aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d017      	beq.n	80097e4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80097b4:	4b31      	ldr	r3, [pc, #196]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80097b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b8:	0a5b      	lsrs	r3, r3, #9
 80097ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80097c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80097ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097da:	ee17 2a90 	vmov	r2, s15
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	e002      	b.n	80097ea <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80097ea:	4b24      	ldr	r3, [pc, #144]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80097ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d017      	beq.n	8009826 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80097f6:	4b21      	ldr	r3, [pc, #132]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80097f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fa:	0c1b      	lsrs	r3, r3, #16
 80097fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009800:	ee07 3a90 	vmov	s15, r3
 8009804:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009808:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800980c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009810:	edd7 6a07 	vldr	s13, [r7, #28]
 8009814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800981c:	ee17 2a90 	vmov	r2, s15
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	605a      	str	r2, [r3, #4]
 8009824:	e002      	b.n	800982c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800982c:	4b13      	ldr	r3, [pc, #76]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800982e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d017      	beq.n	8009868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009838:	4b10      	ldr	r3, [pc, #64]	@ (800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800983a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800983c:	0e1b      	lsrs	r3, r3, #24
 800983e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800984a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800984e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009852:	edd7 6a07 	vldr	s13, [r7, #28]
 8009856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800985a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800985e:	ee17 2a90 	vmov	r2, s15
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009866:	e002      	b.n	800986e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	609a      	str	r2, [r3, #8]
}
 800986e:	bf00      	nop
 8009870:	3724      	adds	r7, #36	@ 0x24
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	46020c00 	.word	0x46020c00
 8009880:	4b742400 	.word	0x4b742400
 8009884:	46000000 	.word	0x46000000
 8009888:	0802cb58 	.word	0x0802cb58

0800988c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800988c:	b480      	push	{r7}
 800988e:	b089      	sub	sp, #36	@ 0x24
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009894:	4ba6      	ldr	r3, [pc, #664]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800989e:	4ba4      	ldr	r3, [pc, #656]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80098a8:	4ba1      	ldr	r3, [pc, #644]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ac:	0a1b      	lsrs	r3, r3, #8
 80098ae:	f003 030f 	and.w	r3, r3, #15
 80098b2:	3301      	adds	r3, #1
 80098b4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80098b6:	4b9e      	ldr	r3, [pc, #632]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ba:	091b      	lsrs	r3, r3, #4
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80098c2:	4b9b      	ldr	r3, [pc, #620]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098c6:	08db      	lsrs	r3, r3, #3
 80098c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	fb02 f303 	mul.w	r3, r2, r3
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d062      	beq.n	80099aa <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	f200 8081 	bhi.w	80099ee <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d024      	beq.n	800993c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d17a      	bne.n	80099ee <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990a:	4b89      	ldr	r3, [pc, #548]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800990c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800990e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800991a:	ed97 6a02 	vldr	s12, [r7, #8]
 800991e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009922:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009926:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800992a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800992e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009936:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800993a:	e08f      	b.n	8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800993c:	4b7c      	ldr	r3, [pc, #496]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009948:	4b79      	ldr	r3, [pc, #484]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	0f1b      	lsrs	r3, r3, #28
 800994e:	f003 030f 	and.w	r3, r3, #15
 8009952:	e006      	b.n	8009962 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8009954:	4b76      	ldr	r3, [pc, #472]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800995a:	041b      	lsls	r3, r3, #16
 800995c:	0f1b      	lsrs	r3, r3, #28
 800995e:	f003 030f 	and.w	r3, r3, #15
 8009962:	4a76      	ldr	r2, [pc, #472]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009968:	ee07 3a90 	vmov	s15, r3
 800996c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	ee07 3a90 	vmov	s15, r3
 8009984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009988:	ed97 6a02 	vldr	s12, [r7, #8]
 800998c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009998:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800999c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80099a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a8:	e058      	b.n	8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	ee07 3a90 	vmov	s15, r3
 80099b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80099b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099bc:	4b5c      	ldr	r3, [pc, #368]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80099be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80099cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80099d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80099d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80099d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80099dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80099e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ec:	e036      	b.n	8009a5c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80099ee:	4b50      	ldr	r3, [pc, #320]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d005      	beq.n	8009a06 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80099fa:	4b4d      	ldr	r3, [pc, #308]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	0f1b      	lsrs	r3, r3, #28
 8009a00:	f003 030f 	and.w	r3, r3, #15
 8009a04:	e006      	b.n	8009a14 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8009a06:	4b4a      	ldr	r3, [pc, #296]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a0c:	041b      	lsls	r3, r3, #16
 8009a0e:	0f1b      	lsrs	r3, r3, #28
 8009a10:	f003 030f 	and.w	r3, r3, #15
 8009a14:	4a49      	ldr	r2, [pc, #292]	@ (8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	ee07 3a90 	vmov	s15, r3
 8009a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a3e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009b38 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a5a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009a5c:	4b34      	ldr	r3, [pc, #208]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d017      	beq.n	8009a98 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009a68:	4b31      	ldr	r3, [pc, #196]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a6c:	0a5b      	lsrs	r3, r3, #9
 8009a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8009a7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a8e:	ee17 2a90 	vmov	r2, s15
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	e002      	b.n	8009a9e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009a9e:	4b24      	ldr	r3, [pc, #144]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d017      	beq.n	8009ada <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009aaa:	4b21      	ldr	r3, [pc, #132]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aae:	0c1b      	lsrs	r3, r3, #16
 8009ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad0:	ee17 2a90 	vmov	r2, s15
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	605a      	str	r2, [r3, #4]
 8009ad8:	e002      	b.n	8009ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009ae0:	4b13      	ldr	r3, [pc, #76]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d017      	beq.n	8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009aec:	4b10      	ldr	r3, [pc, #64]	@ (8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009af0:	0e1b      	lsrs	r3, r3, #24
 8009af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8009afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b02:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b12:	ee17 2a90 	vmov	r2, s15
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b1a:	e002      	b.n	8009b22 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	609a      	str	r2, [r3, #8]
}
 8009b22:	bf00      	nop
 8009b24:	3724      	adds	r7, #36	@ 0x24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	46020c00 	.word	0x46020c00
 8009b34:	4b742400 	.word	0x4b742400
 8009b38:	46000000 	.word	0x46000000
 8009b3c:	0802cb58 	.word	0x0802cb58

08009b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08e      	sub	sp, #56	@ 0x38
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b4e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8009b52:	430b      	orrs	r3, r1
 8009b54:	d145      	bne.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009b56:	4ba7      	ldr	r3, [pc, #668]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b60:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009b62:	4ba4      	ldr	r3, [pc, #656]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b68:	f003 0302 	and.w	r3, r3, #2
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d108      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b76:	d104      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009b78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b7e:	f001 bb5a 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009b82:	4b9c      	ldr	r3, [pc, #624]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b90:	d114      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b98:	d110      	bne.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b9a:	4b96      	ldr	r3, [pc, #600]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ba8:	d103      	bne.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009baa:	23fa      	movs	r3, #250	@ 0xfa
 8009bac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bae:	f001 bb42 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8009bb2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009bb6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009bb8:	f001 bb3d 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bc8:	d107      	bne.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bd0:	d103      	bne.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009bd2:	4b89      	ldr	r3, [pc, #548]	@ (8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bd6:	f001 bb2e 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bde:	f001 bb2a 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009bea:	430b      	orrs	r3, r1
 8009bec:	d151      	bne.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009bee:	4b81      	ldr	r3, [pc, #516]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bf4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009bf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	2b80      	cmp	r3, #128	@ 0x80
 8009bfe:	d035      	beq.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c02:	2b80      	cmp	r3, #128	@ 0x80
 8009c04:	d841      	bhi.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c08:	2b60      	cmp	r3, #96	@ 0x60
 8009c0a:	d02a      	beq.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0e:	2b60      	cmp	r3, #96	@ 0x60
 8009c10:	d83b      	bhi.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	2b40      	cmp	r3, #64	@ 0x40
 8009c16:	d009      	beq.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	2b40      	cmp	r3, #64	@ 0x40
 8009c1c:	d835      	bhi.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00c      	beq.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	2b20      	cmp	r3, #32
 8009c28:	d012      	beq.n	8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009c2a:	e02e      	b.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff fb77 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c3a:	f001 bafc 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3e:	f107 0318 	add.w	r3, r7, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff fcc8 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c4c:	f001 baf3 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c50:	f107 030c 	add.w	r3, r7, #12
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff fe19 	bl	800988c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c5e:	f001 baea 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009c62:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009c66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c68:	f001 bae5 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c6c:	4b61      	ldr	r3, [pc, #388]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c78:	d103      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009c7a:	4b60      	ldr	r3, [pc, #384]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009c7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c7e:	f001 bada 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c86:	f001 bad6 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c8e:	f001 bad2 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c96:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	d158      	bne.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009c9e:	4b55      	ldr	r3, [pc, #340]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009ca0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ca4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ca8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cb0:	d03b      	beq.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cb8:	d846      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cc0:	d02e      	beq.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cc8:	d83e      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd0:	d00b      	beq.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd8:	d836      	bhi.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00d      	beq.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce6:	d012      	beq.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009ce8:	e02e      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fb18 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cf8:	f001 ba9d 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cfc:	f107 0318 	add.w	r3, r7, #24
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff fc69 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d0a:	f001 ba94 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d0e:	f107 030c 	add.w	r3, r7, #12
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff fdba 	bl	800988c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d1c:	f001 ba8b 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009d20:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009d24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d26:	f001 ba86 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d2a:	4b32      	ldr	r3, [pc, #200]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d36:	d103      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009d38:	4b30      	ldr	r3, [pc, #192]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009d3a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009d3c:	f001 ba7b 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d44:	f001 ba77 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d4c:	f001 ba73 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d54:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009d58:	430b      	orrs	r3, r1
 8009d5a:	d126      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009d5c:	4b25      	ldr	r3, [pc, #148]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009d5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d66:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009d68:	4b22      	ldr	r3, [pc, #136]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d74:	d106      	bne.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d103      	bne.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8009d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d80:	f001 ba59 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8009d84:	4b1b      	ldr	r3, [pc, #108]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d90:	d107      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8009d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d98:	d103      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8009d9a:	4b19      	ldr	r3, [pc, #100]	@ (8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9e:	f001 ba4a 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da6:	f001 ba46 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dae:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8009db2:	430b      	orrs	r3, r1
 8009db4:	d16e      	bne.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009db6:	4b0f      	ldr	r3, [pc, #60]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dbc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009dc0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009dc8:	d03d      	beq.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009dd0:	d85c      	bhi.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dd8:	d014      	beq.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8009dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ddc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009de0:	d854      	bhi.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d01f      	beq.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8009de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009dee:	d012      	beq.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009df0:	e04c      	b.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009df2:	bf00      	nop
 8009df4:	46020c00 	.word	0x46020c00
 8009df8:	0007a120 	.word	0x0007a120
 8009dfc:	00f42400 	.word	0x00f42400
 8009e00:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff fa8b 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e12:	f001 ba10 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e16:	f107 0318 	add.w	r3, r7, #24
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff fbdc 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e24:	f001 ba07 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009e28:	4ba7      	ldr	r3, [pc, #668]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e34:	d103      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8009e36:	4ba5      	ldr	r3, [pc, #660]	@ (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009e38:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e3a:	f001 b9fc 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e42:	f001 b9f8 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009e46:	4ba0      	ldr	r3, [pc, #640]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	d118      	bne.n	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e52:	4b9d      	ldr	r3, [pc, #628]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009e5e:	4b9a      	ldr	r3, [pc, #616]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	0e1b      	lsrs	r3, r3, #24
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	e006      	b.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009e6a:	4b97      	ldr	r3, [pc, #604]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e70:	041b      	lsls	r3, r3, #16
 8009e72:	0e1b      	lsrs	r3, r3, #24
 8009e74:	f003 030f 	and.w	r3, r3, #15
 8009e78:	4a95      	ldr	r2, [pc, #596]	@ (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e80:	f001 b9d9 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e88:	f001 b9d5 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e90:	f001 b9d1 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e98:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	d17f      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009ea0:	4b89      	ldr	r3, [pc, #548]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ea2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d165      	bne.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009eb2:	4b85      	ldr	r3, [pc, #532]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009eb8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009ebc:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009ec4:	d034      	beq.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009ecc:	d853      	bhi.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ed4:	d00b      	beq.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009edc:	d84b      	bhi.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d016      	beq.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009eea:	d009      	beq.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009eec:	e043      	b.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff fa16 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efa:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009efc:	f001 b99b 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f00:	f107 0318 	add.w	r3, r7, #24
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7ff fb67 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009f0e:	f001 b992 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009f12:	4b6d      	ldr	r3, [pc, #436]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f1e:	d103      	bne.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8009f20:	4b6a      	ldr	r3, [pc, #424]	@ (800a0cc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009f22:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009f24:	f001 b987 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009f2c:	f001 b983 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009f30:	4b65      	ldr	r3, [pc, #404]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b20      	cmp	r3, #32
 8009f3a:	d118      	bne.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f3c:	4b62      	ldr	r3, [pc, #392]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8009f48:	4b5f      	ldr	r3, [pc, #380]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	0e1b      	lsrs	r3, r3, #24
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	e006      	b.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009f54:	4b5c      	ldr	r3, [pc, #368]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f5a:	041b      	lsls	r3, r3, #16
 8009f5c:	0e1b      	lsrs	r3, r3, #24
 8009f5e:	f003 030f 	and.w	r3, r3, #15
 8009f62:	4a5b      	ldr	r2, [pc, #364]	@ (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f68:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009f6a:	f001 b964 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009f72:	f001 b960 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009f7a:	f001 b95c 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f84:	d108      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7ff f9ca 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f94:	f001 b94f 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f9c:	f001 b94b 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fa4:	1e51      	subs	r1, r2, #1
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	d136      	bne.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009faa:	4b47      	ldr	r3, [pc, #284]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fb0:	f003 0303 	and.w	r3, r3, #3
 8009fb4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d104      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009fbc:	f7fe f968 	bl	8008290 <HAL_RCC_GetPCLK2Freq>
 8009fc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8009fc2:	f001 b938 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d104      	bne.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009fcc:	f7fe f830 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 8009fd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8009fd2:	f001 b930 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009fd6:	4b3c      	ldr	r3, [pc, #240]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fe2:	d106      	bne.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d103      	bne.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8009fea:	4b3a      	ldr	r3, [pc, #232]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fee:	f001 b922 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009ff2:	4b35      	ldr	r3, [pc, #212]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d107      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	2b03      	cmp	r3, #3
 800a004:	d104      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a00a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a00c:	f001 b913 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a010:	2300      	movs	r3, #0
 800a012:	637b      	str	r3, [r7, #52]	@ 0x34
 800a014:	f001 b90f 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a01c:	1e91      	subs	r1, r2, #2
 800a01e:	430b      	orrs	r3, r1
 800a020:	d136      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a022:	4b29      	ldr	r3, [pc, #164]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a028:	f003 030c 	and.w	r3, r3, #12
 800a02c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a034:	f7fe f918 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a038:	6378      	str	r0, [r7, #52]	@ 0x34
 800a03a:	f001 b8fc 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	2b04      	cmp	r3, #4
 800a042:	d104      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a044:	f7fd fff4 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a048:	6378      	str	r0, [r7, #52]	@ 0x34
 800a04a:	f001 b8f4 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a04e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a05a:	d106      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05e:	2b08      	cmp	r3, #8
 800a060:	d103      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a062:	4b1c      	ldr	r3, [pc, #112]	@ (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a064:	637b      	str	r3, [r7, #52]	@ 0x34
 800a066:	f001 b8e6 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a06a:	4b17      	ldr	r3, [pc, #92]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a06c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b02      	cmp	r3, #2
 800a076:	d107      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07a:	2b0c      	cmp	r3, #12
 800a07c:	d104      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a07e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a082:	637b      	str	r3, [r7, #52]	@ 0x34
 800a084:	f001 b8d7 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a08c:	f001 b8d3 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a090:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a094:	1f11      	subs	r1, r2, #4
 800a096:	430b      	orrs	r3, r1
 800a098:	d13f      	bne.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a09a:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a09c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a0a4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d104      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a0ac:	f7fe f8dc 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a0b0:	6378      	str	r0, [r7, #52]	@ 0x34
 800a0b2:	f001 b8c0 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b8:	2b10      	cmp	r3, #16
 800a0ba:	d10d      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a0bc:	f7fd ffb8 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a0c0:	6378      	str	r0, [r7, #52]	@ 0x34
 800a0c2:	f001 b8b8 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a0c6:	bf00      	nop
 800a0c8:	46020c00 	.word	0x46020c00
 800a0cc:	02dc6c00 	.word	0x02dc6c00
 800a0d0:	0802cb58 	.word	0x0802cb58
 800a0d4:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a0d8:	4ba8      	ldr	r3, [pc, #672]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0e4:	d106      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	d103      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800a0ec:	4ba4      	ldr	r3, [pc, #656]	@ (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f0:	f001 b8a1 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a0f4:	4ba1      	ldr	r3, [pc, #644]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d107      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	2b30      	cmp	r3, #48	@ 0x30
 800a106:	d104      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800a108:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a10c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a10e:	f001 b892 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
 800a116:	f001 b88e 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a11e:	f1a2 0108 	sub.w	r1, r2, #8
 800a122:	430b      	orrs	r3, r1
 800a124:	d136      	bne.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a126:	4b95      	ldr	r3, [pc, #596]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a12c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a130:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a134:	2b00      	cmp	r3, #0
 800a136:	d104      	bne.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a138:	f7fe f896 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a13c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a13e:	f001 b87a 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a144:	2b40      	cmp	r3, #64	@ 0x40
 800a146:	d104      	bne.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a148:	f7fd ff72 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a14c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a14e:	f001 b872 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a152:	4b8a      	ldr	r3, [pc, #552]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a15a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a15e:	d106      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	2b80      	cmp	r3, #128	@ 0x80
 800a164:	d103      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800a166:	4b86      	ldr	r3, [pc, #536]	@ (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a168:	637b      	str	r3, [r7, #52]	@ 0x34
 800a16a:	f001 b864 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a16e:	4b83      	ldr	r3, [pc, #524]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a174:	f003 0302 	and.w	r3, r3, #2
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d107      	bne.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a180:	d104      	bne.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a186:	637b      	str	r3, [r7, #52]	@ 0x34
 800a188:	f001 b855 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a190:	f001 b851 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a194:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a198:	f1a2 0110 	sub.w	r1, r2, #16
 800a19c:	430b      	orrs	r3, r1
 800a19e:	d139      	bne.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a1a0:	4b76      	ldr	r3, [pc, #472]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d104      	bne.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a1b2:	f7fe f859 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a1b6:	6378      	str	r0, [r7, #52]	@ 0x34
 800a1b8:	f001 b83d 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1c2:	d104      	bne.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a1c4:	f7fd ff34 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a1c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a1ca:	f001 b834 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a1ce:	4b6b      	ldr	r3, [pc, #428]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1da:	d107      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1e2:	d103      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a1e4:	4b66      	ldr	r3, [pc, #408]	@ (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a1e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1e8:	f001 b825 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a1ec:	4b63      	ldr	r3, [pc, #396]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d108      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a200:	d104      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a206:	637b      	str	r3, [r7, #52]	@ 0x34
 800a208:	f001 b815 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a210:	f001 b811 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a214:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a218:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800a21c:	430b      	orrs	r3, r1
 800a21e:	d139      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a220:	4b56      	ldr	r3, [pc, #344]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a222:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a226:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a22a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d104      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a232:	f7fe f819 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a236:	6378      	str	r0, [r7, #52]	@ 0x34
 800a238:	f000 bffd 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a242:	d104      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a244:	f7fd fef4 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a248:	6378      	str	r0, [r7, #52]	@ 0x34
 800a24a:	f000 bff4 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a24e:	4b4b      	ldr	r3, [pc, #300]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a25a:	d107      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a262:	d103      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a264:	4b46      	ldr	r3, [pc, #280]	@ (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a266:	637b      	str	r3, [r7, #52]	@ 0x34
 800a268:	f000 bfe5 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a26c:	4b43      	ldr	r3, [pc, #268]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a26e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a272:	f003 0302 	and.w	r3, r3, #2
 800a276:	2b02      	cmp	r3, #2
 800a278:	d108      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a280:	d104      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a286:	637b      	str	r3, [r7, #52]	@ 0x34
 800a288:	f000 bfd5 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a290:	f000 bfd1 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a298:	f1a2 0120 	sub.w	r1, r2, #32
 800a29c:	430b      	orrs	r3, r1
 800a29e:	d158      	bne.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a2a0:	4b36      	ldr	r3, [pc, #216]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a2a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d104      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a2b2:	f7fe f801 	bl	80082b8 <HAL_RCC_GetPCLK3Freq>
 800a2b6:	6378      	str	r0, [r7, #52]	@ 0x34
 800a2b8:	f000 bfbd 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d104      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a2c2:	f7fd feb5 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a2c6:	6378      	str	r0, [r7, #52]	@ 0x34
 800a2c8:	f000 bfb5 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a2cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2d8:	d106      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d103      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a2e0:	4b27      	ldr	r3, [pc, #156]	@ (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a2e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e4:	f000 bfa7 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a2e8:	4b24      	ldr	r3, [pc, #144]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a2ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d107      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d104      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a2fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34
 800a302:	f000 bf98 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a306:	4b1d      	ldr	r3, [pc, #116]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0320 	and.w	r3, r3, #32
 800a30e:	2b20      	cmp	r3, #32
 800a310:	d11b      	bne.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	2b04      	cmp	r3, #4
 800a316:	d118      	bne.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a318:	4b18      	ldr	r3, [pc, #96]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d005      	beq.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800a324:	4b15      	ldr	r3, [pc, #84]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	0e1b      	lsrs	r3, r3, #24
 800a32a:	f003 030f 	and.w	r3, r3, #15
 800a32e:	e006      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800a330:	4b12      	ldr	r3, [pc, #72]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a336:	041b      	lsls	r3, r3, #16
 800a338:	0e1b      	lsrs	r3, r3, #24
 800a33a:	f003 030f 	and.w	r3, r3, #15
 800a33e:	4a11      	ldr	r2, [pc, #68]	@ (800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a344:	637b      	str	r3, [r7, #52]	@ 0x34
 800a346:	f000 bf76 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a34e:	f000 bf72 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a352:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a356:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a35a:	430b      	orrs	r3, r1
 800a35c:	d172      	bne.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a35e:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a364:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a368:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a370:	d10a      	bne.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a372:	f7fd fe5d 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a376:	6378      	str	r0, [r7, #52]	@ 0x34
 800a378:	f000 bf5d 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a37c:	46020c00 	.word	0x46020c00
 800a380:	00f42400 	.word	0x00f42400
 800a384:	0802cb58 	.word	0x0802cb58
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a38e:	d108      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a390:	f107 0318 	add.w	r3, r7, #24
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff f91f 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a39e:	f000 bf4a 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d104      	bne.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a3a8:	f7fd ff44 	bl	8008234 <HAL_RCC_GetHCLKFreq>
 800a3ac:	6378      	str	r0, [r7, #52]	@ 0x34
 800a3ae:	f000 bf42 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a3b8:	d122      	bne.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a3ba:	4bb0      	ldr	r3, [pc, #704]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0320 	and.w	r3, r3, #32
 800a3c2:	2b20      	cmp	r3, #32
 800a3c4:	d118      	bne.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a3c6:	4bad      	ldr	r3, [pc, #692]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d005      	beq.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800a3d2:	4baa      	ldr	r3, [pc, #680]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	0e1b      	lsrs	r3, r3, #24
 800a3d8:	f003 030f 	and.w	r3, r3, #15
 800a3dc:	e006      	b.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800a3de:	4ba7      	ldr	r3, [pc, #668]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a3e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a3e4:	041b      	lsls	r3, r3, #16
 800a3e6:	0e1b      	lsrs	r3, r3, #24
 800a3e8:	f003 030f 	and.w	r3, r3, #15
 800a3ec:	4aa4      	ldr	r2, [pc, #656]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f4:	f000 bf1f 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3fc:	f000 bf1b 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a400:	4b9e      	ldr	r3, [pc, #632]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a40c:	d107      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a410:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a414:	d103      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800a416:	4b9b      	ldr	r3, [pc, #620]	@ (800a684 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
 800a41a:	f000 bf0c 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a41e:	4b97      	ldr	r3, [pc, #604]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a42a:	d107      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800a42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a432:	d103      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800a434:	4b93      	ldr	r3, [pc, #588]	@ (800a684 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
 800a438:	f000 befd 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a440:	f000 bef9 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a444:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a448:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a44c:	430b      	orrs	r3, r1
 800a44e:	d158      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a450:	4b8a      	ldr	r3, [pc, #552]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a452:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a456:	f003 0307 	and.w	r3, r3, #7
 800a45a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d84b      	bhi.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800a462:	a201      	add	r2, pc, #4	@ (adr r2, 800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a4a1 	.word	0x0800a4a1
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a48f 	.word	0x0800a48f
 800a474:	0800a4ab 	.word	0x0800a4ab
 800a478:	0800a4b5 	.word	0x0800a4b5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a47c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe ff4f 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a48a:	f000 bed4 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a48e:	f107 030c 	add.w	r3, r7, #12
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff f9fa 	bl	800988c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a49c:	f000 becb 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a4a0:	f7fd fec8 	bl	8008234 <HAL_RCC_GetHCLKFreq>
 800a4a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a4a6:	f000 bec6 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a4aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a4ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4b0:	f000 bec1 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a4b4:	4b71      	ldr	r3, [pc, #452]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	d118      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a4c0:	4b6e      	ldr	r3, [pc, #440]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d005      	beq.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800a4cc:	4b6b      	ldr	r3, [pc, #428]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	0e1b      	lsrs	r3, r3, #24
 800a4d2:	f003 030f 	and.w	r3, r3, #15
 800a4d6:	e006      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800a4d8:	4b68      	ldr	r3, [pc, #416]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4de:	041b      	lsls	r3, r3, #16
 800a4e0:	0e1b      	lsrs	r3, r3, #24
 800a4e2:	f003 030f 	and.w	r3, r3, #15
 800a4e6:	4a66      	ldr	r2, [pc, #408]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a4ee:	f000 bea2 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4f6:	f000 be9e 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4fe:	f000 be9a 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a502:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a506:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800a50a:	430b      	orrs	r3, r1
 800a50c:	d167      	bne.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a50e:	4b5b      	ldr	r3, [pc, #364]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a514:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a518:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a520:	d036      	beq.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a528:	d855      	bhi.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a530:	d029      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a538:	d84d      	bhi.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a540:	d013      	beq.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a548:	d845      	bhi.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d015      	beq.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800a550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a556:	d13e      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe fee1 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a564:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a566:	f000 be66 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a56a:	f107 030c 	add.w	r3, r7, #12
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff f98c 	bl	800988c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a578:	f000 be5d 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a57c:	f7fd fe5a 	bl	8008234 <HAL_RCC_GetHCLKFreq>
 800a580:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a582:	f000 be58 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a586:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a58a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a58c:	f000 be53 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a590:	4b3a      	ldr	r3, [pc, #232]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b20      	cmp	r3, #32
 800a59a:	d118      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a59c:	4b37      	ldr	r3, [pc, #220]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800a5a8:	4b34      	ldr	r3, [pc, #208]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	0e1b      	lsrs	r3, r3, #24
 800a5ae:	f003 030f 	and.w	r3, r3, #15
 800a5b2:	e006      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a5b4:	4b31      	ldr	r3, [pc, #196]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a5b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a5ba:	041b      	lsls	r3, r3, #16
 800a5bc:	0e1b      	lsrs	r3, r3, #24
 800a5be:	f003 030f 	and.w	r3, r3, #15
 800a5c2:	4a2f      	ldr	r2, [pc, #188]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a5ca:	f000 be34 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5d2:	f000 be30 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5da:	f000 be2c 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a5de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	d152      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a5ea:	4b24      	ldr	r3, [pc, #144]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a5ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a5f4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d104      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a5fc:	f7fd fe34 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a600:	6378      	str	r0, [r7, #52]	@ 0x34
 800a602:	f000 be18 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a60c:	d104      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a60e:	f7fd fd0f 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a612:	6378      	str	r0, [r7, #52]	@ 0x34
 800a614:	f000 be0f 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a618:	4b18      	ldr	r3, [pc, #96]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a624:	d107      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800a626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a62c:	d103      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800a62e:	4b15      	ldr	r3, [pc, #84]	@ (800a684 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a630:	637b      	str	r3, [r7, #52]	@ 0x34
 800a632:	f000 be00 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800a636:	4b11      	ldr	r3, [pc, #68]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b20      	cmp	r3, #32
 800a640:	d122      	bne.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800a642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a648:	d11e      	bne.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a64a:	4b0c      	ldr	r3, [pc, #48]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800a656:	4b09      	ldr	r3, [pc, #36]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	0e1b      	lsrs	r3, r3, #24
 800a65c:	f003 030f 	and.w	r3, r3, #15
 800a660:	e006      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800a662:	4b06      	ldr	r3, [pc, #24]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a668:	041b      	lsls	r3, r3, #16
 800a66a:	0e1b      	lsrs	r3, r3, #24
 800a66c:	f003 030f 	and.w	r3, r3, #15
 800a670:	4a03      	ldr	r2, [pc, #12]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a676:	637b      	str	r3, [r7, #52]	@ 0x34
 800a678:	f000 bddd 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a67c:	46020c00 	.word	0x46020c00
 800a680:	0802cb58 	.word	0x0802cb58
 800a684:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a68c:	f000 bdd3 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800a690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a694:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800a698:	430b      	orrs	r3, r1
 800a69a:	d14c      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a69c:	4ba8      	ldr	r3, [pc, #672]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a69e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a6a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d104      	bne.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a6ae:	f7fd fddb 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a6b2:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6b4:	f000 bdbf 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6be:	d104      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6c0:	f7fd fcb6 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a6c4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6c6:	f000 bdb6 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a6ca:	4b9d      	ldr	r3, [pc, #628]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6d6:	d107      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6de:	d103      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800a6e0:	4b98      	ldr	r3, [pc, #608]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a6e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6e4:	f000 bda7 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a6e8:	4b95      	ldr	r3, [pc, #596]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0320 	and.w	r3, r3, #32
 800a6f0:	2b20      	cmp	r3, #32
 800a6f2:	d11c      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6fa:	d118      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a6fc:	4b90      	ldr	r3, [pc, #576]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a708:	4b8d      	ldr	r3, [pc, #564]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	0e1b      	lsrs	r3, r3, #24
 800a70e:	f003 030f 	and.w	r3, r3, #15
 800a712:	e006      	b.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800a714:	4b8a      	ldr	r3, [pc, #552]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	0e1b      	lsrs	r3, r3, #24
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	4a89      	ldr	r2, [pc, #548]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a728:	637b      	str	r3, [r7, #52]	@ 0x34
 800a72a:	f000 bd84 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	637b      	str	r3, [r7, #52]	@ 0x34
 800a732:	f000 bd80 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a73e:	430b      	orrs	r3, r1
 800a740:	d158      	bne.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a742:	4b7f      	ldr	r3, [pc, #508]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a748:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a74c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a750:	2bc0      	cmp	r3, #192	@ 0xc0
 800a752:	d028      	beq.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800a754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a756:	2bc0      	cmp	r3, #192	@ 0xc0
 800a758:	d848      	bhi.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	2b80      	cmp	r3, #128	@ 0x80
 800a75e:	d00e      	beq.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a762:	2b80      	cmp	r3, #128	@ 0x80
 800a764:	d842      	bhi.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	2b40      	cmp	r3, #64	@ 0x40
 800a770:	d014      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a772:	e03b      	b.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800a774:	f7fd fda0 	bl	80082b8 <HAL_RCC_GetPCLK3Freq>
 800a778:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a77a:	f000 bd5c 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a77e:	4b70      	ldr	r3, [pc, #448]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a78a:	d103      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800a78c:	4b6d      	ldr	r3, [pc, #436]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a78e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a790:	f000 bd51 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a794:	2300      	movs	r3, #0
 800a796:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a798:	f000 bd4d 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800a79c:	f7fd fc48 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a7a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a7a2:	f000 bd48 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a7a6:	4b66      	ldr	r3, [pc, #408]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	d118      	bne.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a7b2:	4b63      	ldr	r3, [pc, #396]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d005      	beq.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800a7be:	4b60      	ldr	r3, [pc, #384]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	0e1b      	lsrs	r3, r3, #24
 800a7c4:	f003 030f 	and.w	r3, r3, #15
 800a7c8:	e006      	b.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800a7ca:	4b5d      	ldr	r3, [pc, #372]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a7cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a7d0:	041b      	lsls	r3, r3, #16
 800a7d2:	0e1b      	lsrs	r3, r3, #24
 800a7d4:	f003 030f 	and.w	r3, r3, #15
 800a7d8:	4a5b      	ldr	r2, [pc, #364]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a7e0:	f000 bd29 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7e8:	f000 bd25 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7f0:	f000 bd21 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800a7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7f8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800a7fc:	430b      	orrs	r3, r1
 800a7fe:	d14c      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a800:	4b4f      	ldr	r3, [pc, #316]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a806:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a80a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800a80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d104      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a812:	f7fd fd29 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a816:	6378      	str	r0, [r7, #52]	@ 0x34
 800a818:	f000 bd0d 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a822:	d104      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a824:	f7fd fc04 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a828:	6378      	str	r0, [r7, #52]	@ 0x34
 800a82a:	f000 bd04 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a82e:	4b44      	ldr	r3, [pc, #272]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a83a:	d107      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a842:	d103      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800a844:	4b3f      	ldr	r3, [pc, #252]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a846:	637b      	str	r3, [r7, #52]	@ 0x34
 800a848:	f000 bcf5 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800a84c:	4b3c      	ldr	r3, [pc, #240]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0320 	and.w	r3, r3, #32
 800a854:	2b20      	cmp	r3, #32
 800a856:	d11c      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800a858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a85e:	d118      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a860:	4b37      	ldr	r3, [pc, #220]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800a86c:	4b34      	ldr	r3, [pc, #208]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	0e1b      	lsrs	r3, r3, #24
 800a872:	f003 030f 	and.w	r3, r3, #15
 800a876:	e006      	b.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a878:	4b31      	ldr	r3, [pc, #196]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a87a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	0e1b      	lsrs	r3, r3, #24
 800a882:	f003 030f 	and.w	r3, r3, #15
 800a886:	4a30      	ldr	r2, [pc, #192]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a88c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a88e:	f000 bcd2 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
 800a896:	f000 bcce 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800a89a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a89e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800a8a2:	430b      	orrs	r3, r1
 800a8a4:	d152      	bne.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800a8a6:	4b26      	ldr	r3, [pc, #152]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a8a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8ac:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a8b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d104      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a8b8:	f7fd fcd6 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a8bc:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8be:	f000 bcba 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8c8:	d104      	bne.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a8ca:	f7fd fbb1 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a8ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8d0:	f000 bcb1 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800a8d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8e0:	d107      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8e8:	d103      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800a8ea:	4b16      	ldr	r3, [pc, #88]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a8ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ee:	f000 bca2 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800a8f2:	4b13      	ldr	r3, [pc, #76]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b20      	cmp	r3, #32
 800a8fc:	d11c      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a900:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a904:	d118      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a906:	4b0e      	ldr	r3, [pc, #56]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800a912:	4b0b      	ldr	r3, [pc, #44]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	0e1b      	lsrs	r3, r3, #24
 800a918:	f003 030f 	and.w	r3, r3, #15
 800a91c:	e006      	b.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800a91e:	4b08      	ldr	r3, [pc, #32]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a924:	041b      	lsls	r3, r3, #16
 800a926:	0e1b      	lsrs	r3, r3, #24
 800a928:	f003 030f 	and.w	r3, r3, #15
 800a92c:	4a06      	ldr	r2, [pc, #24]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a932:	637b      	str	r3, [r7, #52]	@ 0x34
 800a934:	f000 bc7f 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a93c:	f000 bc7b 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a940:	46020c00 	.word	0x46020c00
 800a944:	00f42400 	.word	0x00f42400
 800a948:	0802cb58 	.word	0x0802cb58
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800a94c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a950:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800a954:	430b      	orrs	r3, r1
 800a956:	d14c      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800a958:	4ba6      	ldr	r3, [pc, #664]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a95a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a95e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a962:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800a964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a966:	2b00      	cmp	r3, #0
 800a968:	d104      	bne.n	800a974 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a96a:	f7fd fc7d 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800a96e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a970:	f000 bc61 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a97a:	d104      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a97c:	f7fd fb58 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800a980:	6378      	str	r0, [r7, #52]	@ 0x34
 800a982:	f000 bc58 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800a986:	4b9b      	ldr	r3, [pc, #620]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a98e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a992:	d107      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a99a:	d103      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800a99c:	4b96      	ldr	r3, [pc, #600]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a99e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9a0:	f000 bc49 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800a9a4:	4b93      	ldr	r3, [pc, #588]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0320 	and.w	r3, r3, #32
 800a9ac:	2b20      	cmp	r3, #32
 800a9ae:	d11c      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a9b6:	d118      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a9b8:	4b8e      	ldr	r3, [pc, #568]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d005      	beq.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800a9c4:	4b8b      	ldr	r3, [pc, #556]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	0e1b      	lsrs	r3, r3, #24
 800a9ca:	f003 030f 	and.w	r3, r3, #15
 800a9ce:	e006      	b.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800a9d0:	4b88      	ldr	r3, [pc, #544]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a9d6:	041b      	lsls	r3, r3, #16
 800a9d8:	0e1b      	lsrs	r3, r3, #24
 800a9da:	f003 030f 	and.w	r3, r3, #15
 800a9de:	4a87      	ldr	r2, [pc, #540]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9e6:	f000 bc26 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9ee:	f000 bc22 	b.w	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800a9f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9f6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	d164      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800a9fe:	4b7d      	ldr	r3, [pc, #500]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d120      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aa10:	4b78      	ldr	r3, [pc, #480]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0320 	and.w	r3, r3, #32
 800aa18:	2b20      	cmp	r3, #32
 800aa1a:	d117      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa1c:	4b75      	ldr	r3, [pc, #468]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d005      	beq.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800aa28:	4b72      	ldr	r3, [pc, #456]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	0e1b      	lsrs	r3, r3, #24
 800aa2e:	f003 030f 	and.w	r3, r3, #15
 800aa32:	e006      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800aa34:	4b6f      	ldr	r3, [pc, #444]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa3a:	041b      	lsls	r3, r3, #16
 800aa3c:	0e1b      	lsrs	r3, r3, #24
 800aa3e:	f003 030f 	and.w	r3, r3, #15
 800aa42:	4a6e      	ldr	r2, [pc, #440]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800aa44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa48:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa4a:	e3f4      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa50:	e3f1      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800aa52:	4b68      	ldr	r3, [pc, #416]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa60:	d112      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800aa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa68:	d10e      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa6a:	4b62      	ldr	r3, [pc, #392]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa78:	d102      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800aa7a:	23fa      	movs	r3, #250	@ 0xfa
 800aa7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa7e:	e3da      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800aa80:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aa84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa86:	e3d6      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800aa88:	4b5a      	ldr	r3, [pc, #360]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa94:	d106      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa9c:	d102      	bne.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800aa9e:	4b56      	ldr	r3, [pc, #344]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800aaa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa2:	e3c8      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800aaa4:	4b53      	ldr	r3, [pc, #332]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aaa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d107      	bne.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800aab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aab8:	d103      	bne.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800aaba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aabe:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac0:	e3b9      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac6:	e3b6      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800aac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aacc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800aad0:	430b      	orrs	r3, r1
 800aad2:	d164      	bne.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800aad4:	4b47      	ldr	r3, [pc, #284]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aada:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aade:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800aae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d120      	bne.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aae6:	4b43      	ldr	r3, [pc, #268]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0320 	and.w	r3, r3, #32
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	d117      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aaf2:	4b40      	ldr	r3, [pc, #256]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d005      	beq.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800aafe:	4b3d      	ldr	r3, [pc, #244]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	0e1b      	lsrs	r3, r3, #24
 800ab04:	f003 030f 	and.w	r3, r3, #15
 800ab08:	e006      	b.n	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800ab0a:	4b3a      	ldr	r3, [pc, #232]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ab0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab10:	041b      	lsls	r3, r3, #16
 800ab12:	0e1b      	lsrs	r3, r3, #24
 800ab14:	f003 030f 	and.w	r3, r3, #15
 800ab18:	4a38      	ldr	r2, [pc, #224]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ab1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab20:	e389      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab26:	e386      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800ab28:	4b32      	ldr	r3, [pc, #200]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ab2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab36:	d112      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800ab38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab3e:	d10e      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab40:	4b2c      	ldr	r3, [pc, #176]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ab42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab4e:	d102      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800ab50:	23fa      	movs	r3, #250	@ 0xfa
 800ab52:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab54:	e36f      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ab56:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ab5a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ab5c:	e36b      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ab5e:	4b25      	ldr	r3, [pc, #148]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab6a:	d106      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab72:	d102      	bne.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800ab74:	4b20      	ldr	r3, [pc, #128]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ab76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab78:	e35d      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800ab7a:	4b1e      	ldr	r3, [pc, #120]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ab7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab80:	f003 0302 	and.w	r3, r3, #2
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d107      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab8e:	d103      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800ab90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab96:	e34e      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab9c:	e34b      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800ab9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aba2:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800aba6:	430b      	orrs	r3, r1
 800aba8:	d14e      	bne.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800abaa:	4b12      	ldr	r3, [pc, #72]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800abac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abb0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800abb4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d103      	bne.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800abbc:	f7fd fb54 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800abc0:	6378      	str	r0, [r7, #52]	@ 0x34
 800abc2:	e338      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800abc4:	4b0b      	ldr	r3, [pc, #44]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800abc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abd2:	d119      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800abda:	d115      	bne.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800abdc:	4b05      	ldr	r3, [pc, #20]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800abde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abea:	d109      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800abec:	23fa      	movs	r3, #250	@ 0xfa
 800abee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800abf0:	e321      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800abf2:	bf00      	nop
 800abf4:	46020c00 	.word	0x46020c00
 800abf8:	00f42400 	.word	0x00f42400
 800abfc:	0802cb58 	.word	0x0802cb58
      }
      else
      {
        frequency = LSI_VALUE;
 800ac00:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac04:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ac06:	e316      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800ac08:	4ba8      	ldr	r3, [pc, #672]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac14:	d106      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ac1c:	d102      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800ac1e:	4ba4      	ldr	r3, [pc, #656]	@ (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ac20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac22:	e308      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800ac24:	4ba1      	ldr	r3, [pc, #644]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d107      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ac38:	d103      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800ac3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac40:	e2f9      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800ac42:	2300      	movs	r3, #0
 800ac44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac46:	e2f6      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800ac48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac4c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800ac50:	430b      	orrs	r3, r1
 800ac52:	d12d      	bne.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800ac54:	4b95      	ldr	r3, [pc, #596]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac5a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800ac5e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800ac60:	4b92      	ldr	r3, [pc, #584]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac6c:	d105      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800ac74:	4b8e      	ldr	r3, [pc, #568]	@ (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ac76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac78:	e2dd      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac80:	d107      	bne.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fe fb4c 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac90:	e2d1      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac98:	d107      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9a:	f107 0318 	add.w	r3, r7, #24
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe fc9a 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca8:	e2c5      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	637b      	str	r3, [r7, #52]	@ 0x34
 800acae:	e2c2      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800acb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acb4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800acb8:	430b      	orrs	r3, r1
 800acba:	d156      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800acbc:	4b7b      	ldr	r3, [pc, #492]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800acbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acc2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800acc6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800acc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acce:	d028      	beq.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800acd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acd6:	d845      	bhi.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800acd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800acde:	d013      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ace6:	d83d      	bhi.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ace8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acea:	2b00      	cmp	r3, #0
 800acec:	d004      	beq.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800acee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acf4:	d004      	beq.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800acf6:	e035      	b.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800acf8:	f7fd faca 	bl	8008290 <HAL_RCC_GetPCLK2Freq>
 800acfc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800acfe:	e29a      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ad00:	f7fd f996 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800ad04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ad06:	e296      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad08:	4b68      	ldr	r3, [pc, #416]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad14:	d102      	bne.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800ad16:	4b66      	ldr	r3, [pc, #408]	@ (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ad18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad1a:	e28c      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad20:	e289      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad22:	4b62      	ldr	r3, [pc, #392]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b20      	cmp	r3, #32
 800ad2c:	d117      	bne.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad2e:	4b5f      	ldr	r3, [pc, #380]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800ad3a:	4b5c      	ldr	r3, [pc, #368]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	0e1b      	lsrs	r3, r3, #24
 800ad40:	f003 030f 	and.w	r3, r3, #15
 800ad44:	e006      	b.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800ad46:	4b59      	ldr	r3, [pc, #356]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ad48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad4c:	041b      	lsls	r3, r3, #16
 800ad4e:	0e1b      	lsrs	r3, r3, #24
 800ad50:	f003 030f 	and.w	r3, r3, #15
 800ad54:	4a57      	ldr	r2, [pc, #348]	@ (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ad56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad5a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad5c:	e26b      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad62:	e268      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ad64:	2300      	movs	r3, #0
 800ad66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad68:	e265      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800ad6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800ad72:	430b      	orrs	r3, r1
 800ad74:	d156      	bne.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ad76:	4b4d      	ldr	r3, [pc, #308]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ad78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ad80:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800ad82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad88:	d028      	beq.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad90:	d845      	bhi.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800ad92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad98:	d013      	beq.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ada0:	d83d      	bhi.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800ada2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800ada8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adae:	d004      	beq.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800adb0:	e035      	b.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800adb2:	f7fd fa59 	bl	8008268 <HAL_RCC_GetPCLK1Freq>
 800adb6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800adb8:	e23d      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800adba:	f7fd f939 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800adbe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800adc0:	e239      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adc2:	4b3a      	ldr	r3, [pc, #232]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adce:	d102      	bne.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800add0:	4b37      	ldr	r3, [pc, #220]	@ (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800add2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800add4:	e22f      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adda:	e22c      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800addc:	4b33      	ldr	r3, [pc, #204]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0320 	and.w	r3, r3, #32
 800ade4:	2b20      	cmp	r3, #32
 800ade6:	d117      	bne.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ade8:	4b30      	ldr	r3, [pc, #192]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800adf4:	4b2d      	ldr	r3, [pc, #180]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	0e1b      	lsrs	r3, r3, #24
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	e006      	b.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ae00:	4b2a      	ldr	r3, [pc, #168]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ae02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	0e1b      	lsrs	r3, r3, #24
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	4a29      	ldr	r2, [pc, #164]	@ (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ae10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae14:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae16:	e20e      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae1c:	e20b      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae22:	e208      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800ae24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae28:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800ae2c:	430b      	orrs	r3, r1
 800ae2e:	d17c      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ae30:	4b1e      	ldr	r3, [pc, #120]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ae32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae36:	f003 0318 	and.w	r3, r3, #24
 800ae3a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3e:	2b18      	cmp	r3, #24
 800ae40:	d870      	bhi.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800ae42:	a201      	add	r2, pc, #4	@ (adr r2, 800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800aeb9 	.word	0x0800aeb9
 800ae4c:	0800af25 	.word	0x0800af25
 800ae50:	0800af25 	.word	0x0800af25
 800ae54:	0800af25 	.word	0x0800af25
 800ae58:	0800af25 	.word	0x0800af25
 800ae5c:	0800af25 	.word	0x0800af25
 800ae60:	0800af25 	.word	0x0800af25
 800ae64:	0800af25 	.word	0x0800af25
 800ae68:	0800aec1 	.word	0x0800aec1
 800ae6c:	0800af25 	.word	0x0800af25
 800ae70:	0800af25 	.word	0x0800af25
 800ae74:	0800af25 	.word	0x0800af25
 800ae78:	0800af25 	.word	0x0800af25
 800ae7c:	0800af25 	.word	0x0800af25
 800ae80:	0800af25 	.word	0x0800af25
 800ae84:	0800af25 	.word	0x0800af25
 800ae88:	0800aec9 	.word	0x0800aec9
 800ae8c:	0800af25 	.word	0x0800af25
 800ae90:	0800af25 	.word	0x0800af25
 800ae94:	0800af25 	.word	0x0800af25
 800ae98:	0800af25 	.word	0x0800af25
 800ae9c:	0800af25 	.word	0x0800af25
 800aea0:	0800af25 	.word	0x0800af25
 800aea4:	0800af25 	.word	0x0800af25
 800aea8:	0800aee3 	.word	0x0800aee3
 800aeac:	46020c00 	.word	0x46020c00
 800aeb0:	00f42400 	.word	0x00f42400
 800aeb4:	0802cb58 	.word	0x0802cb58
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800aeb8:	f7fd f9fe 	bl	80082b8 <HAL_RCC_GetPCLK3Freq>
 800aebc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aebe:	e1ba      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800aec0:	f7fd f8b6 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800aec4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aec6:	e1b6      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aec8:	4b9f      	ldr	r3, [pc, #636]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aed4:	d102      	bne.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800aed6:	4b9d      	ldr	r3, [pc, #628]	@ (800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800aed8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aeda:	e1ac      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aee0:	e1a9      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aee2:	4b99      	ldr	r3, [pc, #612]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0320 	and.w	r3, r3, #32
 800aeea:	2b20      	cmp	r3, #32
 800aeec:	d117      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aeee:	4b96      	ldr	r3, [pc, #600]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d005      	beq.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800aefa:	4b93      	ldr	r3, [pc, #588]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	0e1b      	lsrs	r3, r3, #24
 800af00:	f003 030f 	and.w	r3, r3, #15
 800af04:	e006      	b.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800af06:	4b90      	ldr	r3, [pc, #576]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af0c:	041b      	lsls	r3, r3, #16
 800af0e:	0e1b      	lsrs	r3, r3, #24
 800af10:	f003 030f 	and.w	r3, r3, #15
 800af14:	4a8e      	ldr	r2, [pc, #568]	@ (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800af16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800af1c:	e18b      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af22:	e188      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af28:	e185      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800af2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af2e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800af32:	430b      	orrs	r3, r1
 800af34:	d155      	bne.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800af36:	4b84      	ldr	r3, [pc, #528]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af3c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800af40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af48:	d013      	beq.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800af4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800af50:	d844      	bhi.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af58:	d013      	beq.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800af5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af60:	d83c      	bhi.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	2b00      	cmp	r3, #0
 800af66:	d014      	beq.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af6e:	d014      	beq.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800af70:	e034      	b.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af72:	f107 0318 	add.w	r3, r7, #24
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe fb2e 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af80:	e159      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe f9cc 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800af8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af90:	e151      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800af92:	f7fd f84d 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800af96:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800af98:	e14d      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800af9a:	4b6b      	ldr	r3, [pc, #428]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 0320 	and.w	r3, r3, #32
 800afa2:	2b20      	cmp	r3, #32
 800afa4:	d117      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800afa6:	4b68      	ldr	r3, [pc, #416]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d005      	beq.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800afb2:	4b65      	ldr	r3, [pc, #404]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	0e1b      	lsrs	r3, r3, #24
 800afb8:	f003 030f 	and.w	r3, r3, #15
 800afbc:	e006      	b.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800afbe:	4b62      	ldr	r3, [pc, #392]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800afc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800afc4:	041b      	lsls	r3, r3, #16
 800afc6:	0e1b      	lsrs	r3, r3, #24
 800afc8:	f003 030f 	and.w	r3, r3, #15
 800afcc:	4a60      	ldr	r2, [pc, #384]	@ (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800afce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800afd4:	e12f      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800afd6:	2300      	movs	r3, #0
 800afd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afda:	e12c      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afe0:	e129      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800afe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe6:	1e59      	subs	r1, r3, #1
 800afe8:	ea52 0301 	orrs.w	r3, r2, r1
 800afec:	d13c      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800afee:	4b56      	ldr	r3, [pc, #344]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aff0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aff4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800aff8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b000:	d027      	beq.n	800b052 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800b002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b004:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b008:	d82b      	bhi.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b010:	d017      	beq.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b018:	d823      	bhi.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d004      	beq.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800b020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b026:	d004      	beq.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800b028:	e01b      	b.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b02a:	f7fd f801 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800b02e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b030:	e101      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe f974 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b040:	e0f9      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b042:	f107 0318 	add.w	r3, r7, #24
 800b046:	4618      	mov	r0, r3
 800b048:	f7fe fac6 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b050:	e0f1      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b052:	f107 030c 	add.w	r3, r7, #12
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fc18 	bl	800988c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b060:	e0e9      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b062:	2300      	movs	r3, #0
 800b064:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b066:	e0e6      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b06c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800b070:	430b      	orrs	r3, r1
 800b072:	d131      	bne.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b074:	4b34      	ldr	r3, [pc, #208]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b07a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b07e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b080:	4b31      	ldr	r3, [pc, #196]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b086:	f003 0302 	and.w	r3, r3, #2
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d106      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800b08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b090:	2b00      	cmp	r3, #0
 800b092:	d103      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800b094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b098:	637b      	str	r3, [r7, #52]	@ 0x34
 800b09a:	e0cc      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b09c:	4b2a      	ldr	r3, [pc, #168]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b09e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0aa:	d112      	bne.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0b2:	d10e      	bne.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b0b4:	4b24      	ldr	r3, [pc, #144]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b0b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0c2:	d102      	bne.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800b0c4:	23fa      	movs	r3, #250	@ 0xfa
 800b0c6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b0c8:	e0b5      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b0ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b0ce:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b0d0:	e0b1      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d6:	e0ae      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0dc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b0e0:	430b      	orrs	r3, r1
 800b0e2:	d13b      	bne.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b0e4:	4b18      	ldr	r3, [pc, #96]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b0e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b0ee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b0f0:	4b15      	ldr	r3, [pc, #84]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0fc:	d105      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800b104:	4b13      	ldr	r3, [pc, #76]	@ (800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800b106:	637b      	str	r3, [r7, #52]	@ 0x34
 800b108:	e095      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b10a:	4b0f      	ldr	r3, [pc, #60]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b116:	d106      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800b118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b11e:	d102      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b120:	4b0d      	ldr	r3, [pc, #52]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800b122:	637b      	str	r3, [r7, #52]	@ 0x34
 800b124:	e087      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b126:	4b08      	ldr	r3, [pc, #32]	@ (800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b12e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b132:	d106      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800b134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b13a:	d102      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800b13c:	4b03      	ldr	r3, [pc, #12]	@ (800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b13e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b140:	e079      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	637b      	str	r3, [r7, #52]	@ 0x34
 800b146:	e076      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b148:	46020c00 	.word	0x46020c00
 800b14c:	00f42400 	.word	0x00f42400
 800b150:	0802cb58 	.word	0x0802cb58
 800b154:	02dc6c00 	.word	0x02dc6c00
 800b158:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800b15c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b160:	1e99      	subs	r1, r3, #2
 800b162:	ea52 0301 	orrs.w	r3, r2, r1
 800b166:	d120      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800b168:	4b35      	ldr	r3, [pc, #212]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b16a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b16e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b172:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b180:	d008      	beq.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800b182:	e00f      	b.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b184:	f107 030c 	add.w	r3, r7, #12
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fb7f 	bl	800988c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b192:	e050      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b194:	f107 0318 	add.w	r3, r7, #24
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fe fa1d 	bl	80095d8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1a2:	e048      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1a8:	e045      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1ae:	f1a3 0108 	sub.w	r1, r3, #8
 800b1b2:	ea52 0301 	orrs.w	r3, r2, r1
 800b1b6:	d13c      	bne.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b1b8:	4b21      	ldr	r3, [pc, #132]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b1ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1be:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b1c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b1c4:	4b1e      	ldr	r3, [pc, #120]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1d0:	d105      	bne.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d102      	bne.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800b1d8:	4b1a      	ldr	r3, [pc, #104]	@ (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800b1da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1dc:	e02b      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b1de:	4b18      	ldr	r3, [pc, #96]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1ea:	d106      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1f2:	d102      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800b1f4:	4b14      	ldr	r3, [pc, #80]	@ (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800b1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1f8:	e01d      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b200:	d107      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b206:	4618      	mov	r0, r3
 800b208:	f7fe f88c 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b210:	e011      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b214:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b218:	d108      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b21a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe f880 	bl	8009324 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b226:	085b      	lsrs	r3, r3, #1
 800b228:	637b      	str	r3, [r7, #52]	@ 0x34
 800b22a:	e004      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b22c:	2300      	movs	r3, #0
 800b22e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b230:	e001      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800b236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3738      	adds	r7, #56	@ 0x38
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	46020c00 	.word	0x46020c00
 800b244:	00f42400 	.word	0x00f42400
 800b248:	007a1200 	.word	0x007a1200

0800b24c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800b250:	4b06      	ldr	r3, [pc, #24]	@ (800b26c <HAL_RCCEx_EnableLSECSS+0x20>)
 800b252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b256:	4a05      	ldr	r2, [pc, #20]	@ (800b26c <HAL_RCCEx_EnableLSECSS+0x20>)
 800b258:	f043 0320 	orr.w	r3, r3, #32
 800b25c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800b260:	bf00      	nop
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	46020c00 	.word	0x46020c00

0800b270 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b278:	4b47      	ldr	r3, [pc, #284]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a46      	ldr	r2, [pc, #280]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b27e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b282:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b284:	f7f7 f9d2 	bl	800262c <HAL_GetTick>
 800b288:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b28a:	e008      	b.n	800b29e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b28c:	f7f7 f9ce 	bl	800262c <HAL_GetTick>
 800b290:	4602      	mov	r2, r0
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	2b02      	cmp	r3, #2
 800b298:	d901      	bls.n	800b29e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e077      	b.n	800b38e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b29e:	4b3e      	ldr	r3, [pc, #248]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1f0      	bne.n	800b28c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b2aa:	4b3b      	ldr	r3, [pc, #236]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	6811      	ldr	r1, [r2, #0]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	6852      	ldr	r2, [r2, #4]
 800b2be:	3a01      	subs	r2, #1
 800b2c0:	0212      	lsls	r2, r2, #8
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	4934      	ldr	r1, [pc, #208]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b2ca:	4b33      	ldr	r3, [pc, #204]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b2cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2ce:	4b33      	ldr	r3, [pc, #204]	@ (800b39c <RCCEx_PLL2_Config+0x12c>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	6892      	ldr	r2, [r2, #8]
 800b2d6:	3a01      	subs	r2, #1
 800b2d8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	68d2      	ldr	r2, [r2, #12]
 800b2e0:	3a01      	subs	r2, #1
 800b2e2:	0252      	lsls	r2, r2, #9
 800b2e4:	b292      	uxth	r2, r2
 800b2e6:	4311      	orrs	r1, r2
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	6912      	ldr	r2, [r2, #16]
 800b2ec:	3a01      	subs	r2, #1
 800b2ee:	0412      	lsls	r2, r2, #16
 800b2f0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b2f4:	4311      	orrs	r1, r2
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	6952      	ldr	r2, [r2, #20]
 800b2fa:	3a01      	subs	r2, #1
 800b2fc:	0612      	lsls	r2, r2, #24
 800b2fe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b302:	430a      	orrs	r2, r1
 800b304:	4924      	ldr	r1, [pc, #144]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b306:	4313      	orrs	r3, r2
 800b308:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b30a:	4b23      	ldr	r3, [pc, #140]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30e:	f023 020c 	bic.w	r2, r3, #12
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	4920      	ldr	r1, [pc, #128]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b31c:	4b1e      	ldr	r3, [pc, #120]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b31e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	491c      	ldr	r1, [pc, #112]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b326:	4313      	orrs	r3, r2
 800b328:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b32a:	4b1b      	ldr	r3, [pc, #108]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32e:	4a1a      	ldr	r2, [pc, #104]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b330:	f023 0310 	bic.w	r3, r3, #16
 800b334:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b336:	4b18      	ldr	r3, [pc, #96]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b33a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b33e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	69d2      	ldr	r2, [r2, #28]
 800b346:	00d2      	lsls	r2, r2, #3
 800b348:	4913      	ldr	r1, [pc, #76]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b34e:	4b12      	ldr	r3, [pc, #72]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b352:	4a11      	ldr	r2, [pc, #68]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b354:	f043 0310 	orr.w	r3, r3, #16
 800b358:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b35a:	4b0f      	ldr	r3, [pc, #60]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a0e      	ldr	r2, [pc, #56]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b360:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b364:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b366:	f7f7 f961 	bl	800262c <HAL_GetTick>
 800b36a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b36c:	e008      	b.n	800b380 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b36e:	f7f7 f95d 	bl	800262c <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d901      	bls.n	800b380 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e006      	b.n	800b38e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b380:	4b05      	ldr	r3, [pc, #20]	@ (800b398 <RCCEx_PLL2_Config+0x128>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0f0      	beq.n	800b36e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b38c:	2300      	movs	r3, #0

}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	46020c00 	.word	0x46020c00
 800b39c:	80800000 	.word	0x80800000

0800b3a0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b3a8:	4b47      	ldr	r3, [pc, #284]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a46      	ldr	r2, [pc, #280]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b3ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b3b4:	f7f7 f93a 	bl	800262c <HAL_GetTick>
 800b3b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3ba:	e008      	b.n	800b3ce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3bc:	f7f7 f936 	bl	800262c <HAL_GetTick>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	1ad3      	subs	r3, r2, r3
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d901      	bls.n	800b3ce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e077      	b.n	800b4be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3ce:	4b3e      	ldr	r3, [pc, #248]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1f0      	bne.n	800b3bc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b3da:	4b3b      	ldr	r3, [pc, #236]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b3e2:	f023 0303 	bic.w	r3, r3, #3
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6811      	ldr	r1, [r2, #0]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	6852      	ldr	r2, [r2, #4]
 800b3ee:	3a01      	subs	r2, #1
 800b3f0:	0212      	lsls	r2, r2, #8
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	4934      	ldr	r1, [pc, #208]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	630b      	str	r3, [r1, #48]	@ 0x30
 800b3fa:	4b33      	ldr	r3, [pc, #204]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b3fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3fe:	4b33      	ldr	r3, [pc, #204]	@ (800b4cc <RCCEx_PLL3_Config+0x12c>)
 800b400:	4013      	ands	r3, r2
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	6892      	ldr	r2, [r2, #8]
 800b406:	3a01      	subs	r2, #1
 800b408:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	68d2      	ldr	r2, [r2, #12]
 800b410:	3a01      	subs	r2, #1
 800b412:	0252      	lsls	r2, r2, #9
 800b414:	b292      	uxth	r2, r2
 800b416:	4311      	orrs	r1, r2
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	6912      	ldr	r2, [r2, #16]
 800b41c:	3a01      	subs	r2, #1
 800b41e:	0412      	lsls	r2, r2, #16
 800b420:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b424:	4311      	orrs	r1, r2
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	6952      	ldr	r2, [r2, #20]
 800b42a:	3a01      	subs	r2, #1
 800b42c:	0612      	lsls	r2, r2, #24
 800b42e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b432:	430a      	orrs	r2, r1
 800b434:	4924      	ldr	r1, [pc, #144]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b436:	4313      	orrs	r3, r2
 800b438:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b43a:	4b23      	ldr	r3, [pc, #140]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b43e:	f023 020c 	bic.w	r2, r3, #12
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	4920      	ldr	r1, [pc, #128]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b448:	4313      	orrs	r3, r2
 800b44a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b44c:	4b1e      	ldr	r3, [pc, #120]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b44e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	491c      	ldr	r1, [pc, #112]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b456:	4313      	orrs	r3, r2
 800b458:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b45a:	4b1b      	ldr	r3, [pc, #108]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b45c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b45e:	4a1a      	ldr	r2, [pc, #104]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b460:	f023 0310 	bic.w	r3, r3, #16
 800b464:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b466:	4b18      	ldr	r3, [pc, #96]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b46a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b46e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	69d2      	ldr	r2, [r2, #28]
 800b476:	00d2      	lsls	r2, r2, #3
 800b478:	4913      	ldr	r1, [pc, #76]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b47a:	4313      	orrs	r3, r2
 800b47c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b47e:	4b12      	ldr	r3, [pc, #72]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b482:	4a11      	ldr	r2, [pc, #68]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b484:	f043 0310 	orr.w	r3, r3, #16
 800b488:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b48a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a0e      	ldr	r2, [pc, #56]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b494:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b496:	f7f7 f8c9 	bl	800262c <HAL_GetTick>
 800b49a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b49c:	e008      	b.n	800b4b0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b49e:	f7f7 f8c5 	bl	800262c <HAL_GetTick>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d901      	bls.n	800b4b0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e006      	b.n	800b4be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4b0:	4b05      	ldr	r3, [pc, #20]	@ (800b4c8 <RCCEx_PLL3_Config+0x128>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d0f0      	beq.n	800b49e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	46020c00 	.word	0x46020c00
 800b4cc:	80800000 	.word	0x80800000

0800b4d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d071      	beq.n	800b5c6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7f6 fd98 	bl	800202c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2202      	movs	r2, #2
 800b500:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b504:	4b32      	ldr	r3, [pc, #200]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f003 0310 	and.w	r3, r3, #16
 800b50c:	2b10      	cmp	r3, #16
 800b50e:	d051      	beq.n	800b5b4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b510:	4b2f      	ldr	r3, [pc, #188]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b512:	22ca      	movs	r2, #202	@ 0xca
 800b514:	625a      	str	r2, [r3, #36]	@ 0x24
 800b516:	4b2e      	ldr	r3, [pc, #184]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b518:	2253      	movs	r2, #83	@ 0x53
 800b51a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f88b 	bl	800b638 <RTC_EnterInitMode>
 800b522:	4603      	mov	r3, r0
 800b524:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d13f      	bne.n	800b5ac <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800b52c:	4b28      	ldr	r3, [pc, #160]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	4a27      	ldr	r2, [pc, #156]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b532:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800b536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b53a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800b53c:	4b24      	ldr	r3, [pc, #144]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b53e:	699a      	ldr	r2, [r3, #24]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6859      	ldr	r1, [r3, #4]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	4319      	orrs	r1, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	430b      	orrs	r3, r1
 800b550:	491f      	ldr	r1, [pc, #124]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b552:	4313      	orrs	r3, r2
 800b554:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68da      	ldr	r2, [r3, #12]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	041b      	lsls	r3, r3, #16
 800b560:	491b      	ldr	r1, [pc, #108]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b562:	4313      	orrs	r3, r2
 800b564:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b566:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b576:	430b      	orrs	r3, r1
 800b578:	4915      	ldr	r1, [pc, #84]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f896 	bl	800b6b0 <RTC_ExitInitMode>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10e      	bne.n	800b5ac <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800b58e:	4b10      	ldr	r3, [pc, #64]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b590:	699b      	ldr	r3, [r3, #24]
 800b592:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a19      	ldr	r1, [r3, #32]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	4319      	orrs	r1, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	430b      	orrs	r3, r1
 800b5a6:	490a      	ldr	r1, [pc, #40]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5ac:	4b08      	ldr	r3, [pc, #32]	@ (800b5d0 <HAL_RTC_Init+0x100>)
 800b5ae:	22ff      	movs	r2, #255	@ 0xff
 800b5b0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5b2:	e001      	b.n	800b5b8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d103      	bne.n	800b5c6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	46007800 	.word	0x46007800

0800b5d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800b5dc:	4b15      	ldr	r3, [pc, #84]	@ (800b634 <HAL_RTC_WaitForSynchro+0x60>)
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	4a14      	ldr	r2, [pc, #80]	@ (800b634 <HAL_RTC_WaitForSynchro+0x60>)
 800b5e2:	f023 0320 	bic.w	r3, r3, #32
 800b5e6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800b5e8:	f7f7 f820 	bl	800262c <HAL_GetTick>
 800b5ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b5ee:	e013      	b.n	800b618 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b5f0:	f7f7 f81c 	bl	800262c <HAL_GetTick>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b5fe:	d90b      	bls.n	800b618 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b600:	4b0c      	ldr	r3, [pc, #48]	@ (800b634 <HAL_RTC_WaitForSynchro+0x60>)
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	f003 0320 	and.w	r3, r3, #32
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10c      	bne.n	800b626 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2203      	movs	r2, #3
 800b610:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e008      	b.n	800b62a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b618:	4b06      	ldr	r3, [pc, #24]	@ (800b634 <HAL_RTC_WaitForSynchro+0x60>)
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	f003 0320 	and.w	r3, r3, #32
 800b620:	2b00      	cmp	r3, #0
 800b622:	d0e5      	beq.n	800b5f0 <HAL_RTC_WaitForSynchro+0x1c>
 800b624:	e000      	b.n	800b628 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800b626:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	46007800 	.word	0x46007800

0800b638 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b644:	4b19      	ldr	r3, [pc, #100]	@ (800b6ac <RTC_EnterInitMode+0x74>)
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d128      	bne.n	800b6a2 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b650:	4b16      	ldr	r3, [pc, #88]	@ (800b6ac <RTC_EnterInitMode+0x74>)
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	4a15      	ldr	r2, [pc, #84]	@ (800b6ac <RTC_EnterInitMode+0x74>)
 800b656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b65a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800b65c:	f7f6 ffe6 	bl	800262c <HAL_GetTick>
 800b660:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b662:	e013      	b.n	800b68c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b664:	f7f6 ffe2 	bl	800262c <HAL_GetTick>
 800b668:	4602      	mov	r2, r0
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b672:	d90b      	bls.n	800b68c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b674:	4b0d      	ldr	r3, [pc, #52]	@ (800b6ac <RTC_EnterInitMode+0x74>)
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10f      	bne.n	800b6a0 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2203      	movs	r2, #3
 800b688:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b68c:	4b07      	ldr	r3, [pc, #28]	@ (800b6ac <RTC_EnterInitMode+0x74>)
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b694:	2b00      	cmp	r3, #0
 800b696:	d104      	bne.n	800b6a2 <RTC_EnterInitMode+0x6a>
 800b698:	7bfb      	ldrb	r3, [r7, #15]
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d1e2      	bne.n	800b664 <RTC_EnterInitMode+0x2c>
 800b69e:	e000      	b.n	800b6a2 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800b6a0:	bf00      	nop
        }
      }
    }
  }

  return status;
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	46007800 	.word	0x46007800

0800b6b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b6bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b728 <RTC_ExitInitMode+0x78>)
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	4a19      	ldr	r2, [pc, #100]	@ (800b728 <RTC_ExitInitMode+0x78>)
 800b6c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6c6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b6c8:	4b17      	ldr	r3, [pc, #92]	@ (800b728 <RTC_ExitInitMode+0x78>)
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	f003 0320 	and.w	r3, r3, #32
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10c      	bne.n	800b6ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff ff7d 	bl	800b5d4 <HAL_RTC_WaitForSynchro>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d01e      	beq.n	800b71e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2203      	movs	r2, #3
 800b6e4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	73fb      	strb	r3, [r7, #15]
 800b6ec:	e017      	b.n	800b71e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b728 <RTC_ExitInitMode+0x78>)
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	4a0d      	ldr	r2, [pc, #52]	@ (800b728 <RTC_ExitInitMode+0x78>)
 800b6f4:	f023 0320 	bic.w	r3, r3, #32
 800b6f8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff ff6a 	bl	800b5d4 <HAL_RTC_WaitForSynchro>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d005      	beq.n	800b712 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2203      	movs	r2, #3
 800b70a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800b70e:	2303      	movs	r3, #3
 800b710:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b712:	4b05      	ldr	r3, [pc, #20]	@ (800b728 <RTC_ExitInitMode+0x78>)
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	4a04      	ldr	r2, [pc, #16]	@ (800b728 <RTC_ExitInitMode+0x78>)
 800b718:	f043 0320 	orr.w	r3, r3, #32
 800b71c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	46007800 	.word	0x46007800

0800b72c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	4910      	ldr	r1, [pc, #64]	@ (800b780 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800b740:	4313      	orrs	r3, r2
 800b742:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	431a      	orrs	r2, r3
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	490c      	ldr	r1, [pc, #48]	@ (800b784 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b754:	4313      	orrs	r3, r2
 800b756:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800b758:	4b0a      	ldr	r3, [pc, #40]	@ (800b784 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	6919      	ldr	r1, [r3, #16]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	041b      	lsls	r3, r3, #16
 800b76a:	430b      	orrs	r3, r1
 800b76c:	4905      	ldr	r1, [pc, #20]	@ (800b784 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	46007800 	.word	0x46007800
 800b784:	46007c00 	.word	0x46007c00

0800b788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d101      	bne.n	800b79a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e049      	b.n	800b82e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d106      	bne.n	800b7b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f841 	bl	800b836 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2202      	movs	r2, #2
 800b7b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	f000 fa58 	bl	800bc7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b836:	b480      	push	{r7}
 800b838:	b083      	sub	sp, #12
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b83e:	bf00      	nop
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
	...

0800b84c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d001      	beq.n	800b864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e072      	b.n	800b94a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f042 0201 	orr.w	r2, r2, #1
 800b87a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a35      	ldr	r2, [pc, #212]	@ (800b958 <HAL_TIM_Base_Start_IT+0x10c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d040      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a34      	ldr	r2, [pc, #208]	@ (800b95c <HAL_TIM_Base_Start_IT+0x110>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d03b      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b898:	d036      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8a2:	d031      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a2d      	ldr	r2, [pc, #180]	@ (800b960 <HAL_TIM_Base_Start_IT+0x114>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d02c      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a2c      	ldr	r2, [pc, #176]	@ (800b964 <HAL_TIM_Base_Start_IT+0x118>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d027      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a2a      	ldr	r2, [pc, #168]	@ (800b968 <HAL_TIM_Base_Start_IT+0x11c>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d022      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a29      	ldr	r2, [pc, #164]	@ (800b96c <HAL_TIM_Base_Start_IT+0x120>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d01d      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a27      	ldr	r2, [pc, #156]	@ (800b970 <HAL_TIM_Base_Start_IT+0x124>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d018      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a26      	ldr	r2, [pc, #152]	@ (800b974 <HAL_TIM_Base_Start_IT+0x128>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d013      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a24      	ldr	r2, [pc, #144]	@ (800b978 <HAL_TIM_Base_Start_IT+0x12c>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d00e      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a23      	ldr	r2, [pc, #140]	@ (800b97c <HAL_TIM_Base_Start_IT+0x130>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d009      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a21      	ldr	r2, [pc, #132]	@ (800b980 <HAL_TIM_Base_Start_IT+0x134>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d004      	beq.n	800b908 <HAL_TIM_Base_Start_IT+0xbc>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a20      	ldr	r2, [pc, #128]	@ (800b984 <HAL_TIM_Base_Start_IT+0x138>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d115      	bne.n	800b934 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	689a      	ldr	r2, [r3, #8]
 800b90e:	4b1e      	ldr	r3, [pc, #120]	@ (800b988 <HAL_TIM_Base_Start_IT+0x13c>)
 800b910:	4013      	ands	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b06      	cmp	r3, #6
 800b918:	d015      	beq.n	800b946 <HAL_TIM_Base_Start_IT+0xfa>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b920:	d011      	beq.n	800b946 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f042 0201 	orr.w	r2, r2, #1
 800b930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b932:	e008      	b.n	800b946 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681a      	ldr	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f042 0201 	orr.w	r2, r2, #1
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	e000      	b.n	800b948 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b946:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	40012c00 	.word	0x40012c00
 800b95c:	50012c00 	.word	0x50012c00
 800b960:	40000400 	.word	0x40000400
 800b964:	50000400 	.word	0x50000400
 800b968:	40000800 	.word	0x40000800
 800b96c:	50000800 	.word	0x50000800
 800b970:	40000c00 	.word	0x40000c00
 800b974:	50000c00 	.word	0x50000c00
 800b978:	40013400 	.word	0x40013400
 800b97c:	50013400 	.word	0x50013400
 800b980:	40014000 	.word	0x40014000
 800b984:	50014000 	.word	0x50014000
 800b988:	00010007 	.word	0x00010007

0800b98c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f003 0302 	and.w	r3, r3, #2
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d020      	beq.n	800b9f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01b      	beq.n	800b9f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f06f 0202 	mvn.w	r2, #2
 800b9c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	f003 0303 	and.w	r3, r3, #3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f931 	bl	800bc3e <HAL_TIM_IC_CaptureCallback>
 800b9dc:	e005      	b.n	800b9ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f923 	bl	800bc2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f934 	bl	800bc52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f003 0304 	and.w	r3, r3, #4
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d020      	beq.n	800ba3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f003 0304 	and.w	r3, r3, #4
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d01b      	beq.n	800ba3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f06f 0204 	mvn.w	r2, #4
 800ba0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2202      	movs	r2, #2
 800ba12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f90b 	bl	800bc3e <HAL_TIM_IC_CaptureCallback>
 800ba28:	e005      	b.n	800ba36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f8fd 	bl	800bc2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f90e 	bl	800bc52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f003 0308 	and.w	r3, r3, #8
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d020      	beq.n	800ba88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f003 0308 	and.w	r3, r3, #8
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d01b      	beq.n	800ba88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f06f 0208 	mvn.w	r2, #8
 800ba58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2204      	movs	r2, #4
 800ba5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	f003 0303 	and.w	r3, r3, #3
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d003      	beq.n	800ba76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 f8e5 	bl	800bc3e <HAL_TIM_IC_CaptureCallback>
 800ba74:	e005      	b.n	800ba82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f8d7 	bl	800bc2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 f8e8 	bl	800bc52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f003 0310 	and.w	r3, r3, #16
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d020      	beq.n	800bad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f003 0310 	and.w	r3, r3, #16
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d01b      	beq.n	800bad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f06f 0210 	mvn.w	r2, #16
 800baa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2208      	movs	r2, #8
 800baaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	69db      	ldr	r3, [r3, #28]
 800bab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f8bf 	bl	800bc3e <HAL_TIM_IC_CaptureCallback>
 800bac0:	e005      	b.n	800bace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f8b1 	bl	800bc2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f8c2 	bl	800bc52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00c      	beq.n	800baf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f06f 0201 	mvn.w	r2, #1
 800baf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7f5 ff94 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d104      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00c      	beq.n	800bb26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d007      	beq.n	800bb26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bb1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f9bb 	bl	800be9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00c      	beq.n	800bb4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d007      	beq.n	800bb4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bb42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f9b3 	bl	800beb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00c      	beq.n	800bb6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d007      	beq.n	800bb6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f87c 	bl	800bc66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	f003 0320 	and.w	r3, r3, #32
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00c      	beq.n	800bb92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f003 0320 	and.w	r3, r3, #32
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d007      	beq.n	800bb92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f06f 0220 	mvn.w	r2, #32
 800bb8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 f97b 	bl	800be88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00c      	beq.n	800bbb6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d007      	beq.n	800bbb6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800bbae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f987 	bl	800bec4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00c      	beq.n	800bbda <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800bbd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f97f 	bl	800bed8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00c      	beq.n	800bbfe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d007      	beq.n	800bbfe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800bbf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f977 	bl	800beec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00c      	beq.n	800bc22 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d007      	beq.n	800bc22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800bc1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f96f 	bl	800bf00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc32:	bf00      	nop
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b083      	sub	sp, #12
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc5a:	bf00      	nop
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc6e:	bf00      	nop
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
	...

0800bc7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a6e      	ldr	r2, [pc, #440]	@ (800be48 <TIM_Base_SetConfig+0x1cc>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d02b      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a6d      	ldr	r2, [pc, #436]	@ (800be4c <TIM_Base_SetConfig+0x1d0>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d027      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bca2:	d023      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcaa:	d01f      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a68      	ldr	r2, [pc, #416]	@ (800be50 <TIM_Base_SetConfig+0x1d4>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d01b      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a67      	ldr	r2, [pc, #412]	@ (800be54 <TIM_Base_SetConfig+0x1d8>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d017      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a66      	ldr	r2, [pc, #408]	@ (800be58 <TIM_Base_SetConfig+0x1dc>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d013      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a65      	ldr	r2, [pc, #404]	@ (800be5c <TIM_Base_SetConfig+0x1e0>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d00f      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a64      	ldr	r2, [pc, #400]	@ (800be60 <TIM_Base_SetConfig+0x1e4>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d00b      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a63      	ldr	r2, [pc, #396]	@ (800be64 <TIM_Base_SetConfig+0x1e8>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d007      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a62      	ldr	r2, [pc, #392]	@ (800be68 <TIM_Base_SetConfig+0x1ec>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d003      	beq.n	800bcec <TIM_Base_SetConfig+0x70>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a61      	ldr	r2, [pc, #388]	@ (800be6c <TIM_Base_SetConfig+0x1f0>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d108      	bne.n	800bcfe <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a51      	ldr	r2, [pc, #324]	@ (800be48 <TIM_Base_SetConfig+0x1cc>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d043      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a50      	ldr	r2, [pc, #320]	@ (800be4c <TIM_Base_SetConfig+0x1d0>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d03f      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd14:	d03b      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd1c:	d037      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a4b      	ldr	r2, [pc, #300]	@ (800be50 <TIM_Base_SetConfig+0x1d4>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d033      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a4a      	ldr	r2, [pc, #296]	@ (800be54 <TIM_Base_SetConfig+0x1d8>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d02f      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a49      	ldr	r2, [pc, #292]	@ (800be58 <TIM_Base_SetConfig+0x1dc>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d02b      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a48      	ldr	r2, [pc, #288]	@ (800be5c <TIM_Base_SetConfig+0x1e0>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d027      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a47      	ldr	r2, [pc, #284]	@ (800be60 <TIM_Base_SetConfig+0x1e4>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d023      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a46      	ldr	r2, [pc, #280]	@ (800be64 <TIM_Base_SetConfig+0x1e8>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d01f      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a45      	ldr	r2, [pc, #276]	@ (800be68 <TIM_Base_SetConfig+0x1ec>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d01b      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a44      	ldr	r2, [pc, #272]	@ (800be6c <TIM_Base_SetConfig+0x1f0>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d017      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a43      	ldr	r2, [pc, #268]	@ (800be70 <TIM_Base_SetConfig+0x1f4>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d013      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a42      	ldr	r2, [pc, #264]	@ (800be74 <TIM_Base_SetConfig+0x1f8>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d00f      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a41      	ldr	r2, [pc, #260]	@ (800be78 <TIM_Base_SetConfig+0x1fc>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d00b      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a40      	ldr	r2, [pc, #256]	@ (800be7c <TIM_Base_SetConfig+0x200>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d007      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a3f      	ldr	r2, [pc, #252]	@ (800be80 <TIM_Base_SetConfig+0x204>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d003      	beq.n	800bd8e <TIM_Base_SetConfig+0x112>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a3e      	ldr	r2, [pc, #248]	@ (800be84 <TIM_Base_SetConfig+0x208>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d108      	bne.n	800bda0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a20      	ldr	r2, [pc, #128]	@ (800be48 <TIM_Base_SetConfig+0x1cc>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d023      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a1f      	ldr	r2, [pc, #124]	@ (800be4c <TIM_Base_SetConfig+0x1d0>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d01f      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a24      	ldr	r2, [pc, #144]	@ (800be68 <TIM_Base_SetConfig+0x1ec>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d01b      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a23      	ldr	r2, [pc, #140]	@ (800be6c <TIM_Base_SetConfig+0x1f0>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d017      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a22      	ldr	r2, [pc, #136]	@ (800be70 <TIM_Base_SetConfig+0x1f4>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d013      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a21      	ldr	r2, [pc, #132]	@ (800be74 <TIM_Base_SetConfig+0x1f8>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d00f      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a20      	ldr	r2, [pc, #128]	@ (800be78 <TIM_Base_SetConfig+0x1fc>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d00b      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a1f      	ldr	r2, [pc, #124]	@ (800be7c <TIM_Base_SetConfig+0x200>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d007      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a1e      	ldr	r2, [pc, #120]	@ (800be80 <TIM_Base_SetConfig+0x204>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d003      	beq.n	800be14 <TIM_Base_SetConfig+0x198>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a1d      	ldr	r2, [pc, #116]	@ (800be84 <TIM_Base_SetConfig+0x208>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d103      	bne.n	800be1c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	691a      	ldr	r2, [r3, #16]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	f003 0301 	and.w	r3, r3, #1
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d105      	bne.n	800be3a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	f023 0201 	bic.w	r2, r3, #1
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	611a      	str	r2, [r3, #16]
  }
}
 800be3a:	bf00      	nop
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	40012c00 	.word	0x40012c00
 800be4c:	50012c00 	.word	0x50012c00
 800be50:	40000400 	.word	0x40000400
 800be54:	50000400 	.word	0x50000400
 800be58:	40000800 	.word	0x40000800
 800be5c:	50000800 	.word	0x50000800
 800be60:	40000c00 	.word	0x40000c00
 800be64:	50000c00 	.word	0x50000c00
 800be68:	40013400 	.word	0x40013400
 800be6c:	50013400 	.word	0x50013400
 800be70:	40014000 	.word	0x40014000
 800be74:	50014000 	.word	0x50014000
 800be78:	40014400 	.word	0x40014400
 800be7c:	50014400 	.word	0x50014400
 800be80:	40014800 	.word	0x40014800
 800be84:	50014800 	.word	0x50014800

0800be88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d101      	bne.n	800bf26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e042      	b.n	800bfac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d106      	bne.n	800bf3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7f6 f8c3 	bl	80020c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2224      	movs	r2, #36	@ 0x24
 800bf42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f022 0201 	bic.w	r2, r2, #1
 800bf54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f9d6 	bl	800c310 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 f825 	bl	800bfb4 <UART_SetConfig>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d101      	bne.n	800bf74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e01b      	b.n	800bfac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685a      	ldr	r2, [r3, #4]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bf82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	689a      	ldr	r2, [r3, #8]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bf92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f042 0201 	orr.w	r2, r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa55 	bl	800c454 <UART_CheckIdleState>
 800bfaa:	4603      	mov	r3, r0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfb8:	b094      	sub	sp, #80	@ 0x50
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	4b83      	ldr	r3, [pc, #524]	@ (800c1d8 <UART_SetConfig+0x224>)
 800bfca:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfce:	689a      	ldr	r2, [r3, #8]
 800bfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	431a      	orrs	r2, r3
 800bfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	431a      	orrs	r2, r3
 800bfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfde:	69db      	ldr	r3, [r3, #28]
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	497c      	ldr	r1, [pc, #496]	@ (800c1dc <UART_SetConfig+0x228>)
 800bfec:	4019      	ands	r1, r3
 800bfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bff4:	430b      	orrs	r3, r1
 800bff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c004:	68d9      	ldr	r1, [r3, #12]
 800c006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	ea40 0301 	orr.w	r3, r0, r1
 800c00e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	4b6f      	ldr	r3, [pc, #444]	@ (800c1d8 <UART_SetConfig+0x224>)
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d009      	beq.n	800c034 <UART_SetConfig+0x80>
 800c020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	4b6e      	ldr	r3, [pc, #440]	@ (800c1e0 <UART_SetConfig+0x22c>)
 800c026:	429a      	cmp	r2, r3
 800c028:	d004      	beq.n	800c034 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c02c:	6a1a      	ldr	r2, [r3, #32]
 800c02e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c030:	4313      	orrs	r3, r2
 800c032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c03e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c048:	430b      	orrs	r3, r1
 800c04a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c052:	f023 000f 	bic.w	r0, r3, #15
 800c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c058:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	ea40 0301 	orr.w	r3, r0, r1
 800c062:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	4b5e      	ldr	r3, [pc, #376]	@ (800c1e4 <UART_SetConfig+0x230>)
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d102      	bne.n	800c074 <UART_SetConfig+0xc0>
 800c06e:	2301      	movs	r3, #1
 800c070:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c072:	e032      	b.n	800c0da <UART_SetConfig+0x126>
 800c074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	4b5b      	ldr	r3, [pc, #364]	@ (800c1e8 <UART_SetConfig+0x234>)
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d102      	bne.n	800c084 <UART_SetConfig+0xd0>
 800c07e:	2302      	movs	r3, #2
 800c080:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c082:	e02a      	b.n	800c0da <UART_SetConfig+0x126>
 800c084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	4b58      	ldr	r3, [pc, #352]	@ (800c1ec <UART_SetConfig+0x238>)
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d102      	bne.n	800c094 <UART_SetConfig+0xe0>
 800c08e:	2304      	movs	r3, #4
 800c090:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c092:	e022      	b.n	800c0da <UART_SetConfig+0x126>
 800c094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	4b55      	ldr	r3, [pc, #340]	@ (800c1f0 <UART_SetConfig+0x23c>)
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d102      	bne.n	800c0a4 <UART_SetConfig+0xf0>
 800c09e:	2308      	movs	r3, #8
 800c0a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0a2:	e01a      	b.n	800c0da <UART_SetConfig+0x126>
 800c0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	4b52      	ldr	r3, [pc, #328]	@ (800c1f4 <UART_SetConfig+0x240>)
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d102      	bne.n	800c0b4 <UART_SetConfig+0x100>
 800c0ae:	2310      	movs	r3, #16
 800c0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0b2:	e012      	b.n	800c0da <UART_SetConfig+0x126>
 800c0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	4b4f      	ldr	r3, [pc, #316]	@ (800c1f8 <UART_SetConfig+0x244>)
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d103      	bne.n	800c0c6 <UART_SetConfig+0x112>
 800c0be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800c0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0c4:	e009      	b.n	800c0da <UART_SetConfig+0x126>
 800c0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	4b43      	ldr	r3, [pc, #268]	@ (800c1d8 <UART_SetConfig+0x224>)
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d102      	bne.n	800c0d6 <UART_SetConfig+0x122>
 800c0d0:	2320      	movs	r3, #32
 800c0d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0d4:	e001      	b.n	800c0da <UART_SetConfig+0x126>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	4b3e      	ldr	r3, [pc, #248]	@ (800c1d8 <UART_SetConfig+0x224>)
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d005      	beq.n	800c0f0 <UART_SetConfig+0x13c>
 800c0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	4b3d      	ldr	r3, [pc, #244]	@ (800c1e0 <UART_SetConfig+0x22c>)
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	f040 8088 	bne.w	800c200 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c0f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	623b      	str	r3, [r7, #32]
 800c0f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c0f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c0fc:	f7fd fd20 	bl	8009b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800c100:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c104:	2b00      	cmp	r3, #0
 800c106:	f000 80eb 	beq.w	800c2e0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10e:	4a3b      	ldr	r2, [pc, #236]	@ (800c1fc <UART_SetConfig+0x248>)
 800c110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c114:	461a      	mov	r2, r3
 800c116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c118:	fbb3 f3f2 	udiv	r3, r3, r2
 800c11c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	4613      	mov	r3, r2
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	4413      	add	r3, r2
 800c128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d305      	bcc.n	800c13a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c136:	429a      	cmp	r2, r3
 800c138:	d903      	bls.n	800c142 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c140:	e048      	b.n	800c1d4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c144:	2200      	movs	r2, #0
 800c146:	61bb      	str	r3, [r7, #24]
 800c148:	61fa      	str	r2, [r7, #28]
 800c14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14e:	4a2b      	ldr	r2, [pc, #172]	@ (800c1fc <UART_SetConfig+0x248>)
 800c150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c154:	b29b      	uxth	r3, r3
 800c156:	2200      	movs	r2, #0
 800c158:	613b      	str	r3, [r7, #16]
 800c15a:	617a      	str	r2, [r7, #20]
 800c15c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c160:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c164:	f7f4 f9c4 	bl	80004f0 <__aeabi_uldivmod>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4610      	mov	r0, r2
 800c16e:	4619      	mov	r1, r3
 800c170:	f04f 0200 	mov.w	r2, #0
 800c174:	f04f 0300 	mov.w	r3, #0
 800c178:	020b      	lsls	r3, r1, #8
 800c17a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c17e:	0202      	lsls	r2, r0, #8
 800c180:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c182:	6849      	ldr	r1, [r1, #4]
 800c184:	0849      	lsrs	r1, r1, #1
 800c186:	2000      	movs	r0, #0
 800c188:	460c      	mov	r4, r1
 800c18a:	4605      	mov	r5, r0
 800c18c:	eb12 0804 	adds.w	r8, r2, r4
 800c190:	eb43 0905 	adc.w	r9, r3, r5
 800c194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	60bb      	str	r3, [r7, #8]
 800c19c:	60fa      	str	r2, [r7, #12]
 800c19e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c1a2:	4640      	mov	r0, r8
 800c1a4:	4649      	mov	r1, r9
 800c1a6:	f7f4 f9a3 	bl	80004f0 <__aeabi_uldivmod>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c1b8:	d308      	bcc.n	800c1cc <UART_SetConfig+0x218>
 800c1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1c0:	d204      	bcs.n	800c1cc <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c1c8:	60da      	str	r2, [r3, #12]
 800c1ca:	e003      	b.n	800c1d4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c1d2:	e085      	b.n	800c2e0 <UART_SetConfig+0x32c>
 800c1d4:	e084      	b.n	800c2e0 <UART_SetConfig+0x32c>
 800c1d6:	bf00      	nop
 800c1d8:	46002400 	.word	0x46002400
 800c1dc:	cfff69f3 	.word	0xcfff69f3
 800c1e0:	56002400 	.word	0x56002400
 800c1e4:	40013800 	.word	0x40013800
 800c1e8:	40004400 	.word	0x40004400
 800c1ec:	40004800 	.word	0x40004800
 800c1f0:	40004c00 	.word	0x40004c00
 800c1f4:	40005000 	.word	0x40005000
 800c1f8:	40006400 	.word	0x40006400
 800c1fc:	0802cc18 	.word	0x0802cc18
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c202:	69db      	ldr	r3, [r3, #28]
 800c204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c208:	d13c      	bne.n	800c284 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c20c:	2200      	movs	r2, #0
 800c20e:	603b      	str	r3, [r7, #0]
 800c210:	607a      	str	r2, [r7, #4]
 800c212:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c216:	f7fd fc93 	bl	8009b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800c21a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d05e      	beq.n	800c2e0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c226:	4a39      	ldr	r2, [pc, #228]	@ (800c30c <UART_SetConfig+0x358>)
 800c228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c22c:	461a      	mov	r2, r3
 800c22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c230:	fbb3 f3f2 	udiv	r3, r3, r2
 800c234:	005a      	lsls	r2, r3, #1
 800c236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	085b      	lsrs	r3, r3, #1
 800c23c:	441a      	add	r2, r3
 800c23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	fbb2 f3f3 	udiv	r3, r2, r3
 800c246:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c24a:	2b0f      	cmp	r3, #15
 800c24c:	d916      	bls.n	800c27c <UART_SetConfig+0x2c8>
 800c24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c254:	d212      	bcs.n	800c27c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c258:	b29b      	uxth	r3, r3
 800c25a:	f023 030f 	bic.w	r3, r3, #15
 800c25e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c262:	085b      	lsrs	r3, r3, #1
 800c264:	b29b      	uxth	r3, r3
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c26e:	4313      	orrs	r3, r2
 800c270:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c278:	60da      	str	r2, [r3, #12]
 800c27a:	e031      	b.n	800c2e0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c282:	e02d      	b.n	800c2e0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c286:	2200      	movs	r2, #0
 800c288:	469a      	mov	sl, r3
 800c28a:	4693      	mov	fp, r2
 800c28c:	4650      	mov	r0, sl
 800c28e:	4659      	mov	r1, fp
 800c290:	f7fd fc56 	bl	8009b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800c294:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d021      	beq.n	800c2e0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a0:	4a1a      	ldr	r2, [pc, #104]	@ (800c30c <UART_SetConfig+0x358>)
 800c2a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	085b      	lsrs	r3, r3, #1
 800c2b4:	441a      	add	r2, r3
 800c2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c2:	2b0f      	cmp	r3, #15
 800c2c4:	d909      	bls.n	800c2da <UART_SetConfig+0x326>
 800c2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2cc:	d205      	bcs.n	800c2da <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	60da      	str	r2, [r3, #12]
 800c2d8:	e002      	b.n	800c2e0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c2fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c300:	4618      	mov	r0, r3
 800c302:	3750      	adds	r7, #80	@ 0x50
 800c304:	46bd      	mov	sp, r7
 800c306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c30a:	bf00      	nop
 800c30c:	0802cc18 	.word	0x0802cc18

0800c310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c31c:	f003 0308 	and.w	r3, r3, #8
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00a      	beq.n	800c33a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	430a      	orrs	r2, r1
 800c338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00a      	beq.n	800c35c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	430a      	orrs	r2, r1
 800c35a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c360:	f003 0302 	and.w	r3, r3, #2
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00a      	beq.n	800c37e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	430a      	orrs	r2, r1
 800c37c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c382:	f003 0304 	and.w	r3, r3, #4
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	430a      	orrs	r2, r1
 800c39e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a4:	f003 0310 	and.w	r3, r3, #16
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00a      	beq.n	800c3c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c6:	f003 0320 	and.w	r3, r3, #32
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00a      	beq.n	800c3e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01a      	beq.n	800c426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	430a      	orrs	r2, r1
 800c404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c40a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c40e:	d10a      	bne.n	800c426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	430a      	orrs	r2, r1
 800c424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c42a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00a      	beq.n	800c448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	430a      	orrs	r2, r1
 800c446:	605a      	str	r2, [r3, #4]
  }
}
 800c448:	bf00      	nop
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b098      	sub	sp, #96	@ 0x60
 800c458:	af02      	add	r7, sp, #8
 800c45a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c464:	f7f6 f8e2 	bl	800262c <HAL_GetTick>
 800c468:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f003 0308 	and.w	r3, r3, #8
 800c474:	2b08      	cmp	r3, #8
 800c476:	d12f      	bne.n	800c4d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c478:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c480:	2200      	movs	r2, #0
 800c482:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f88e 	bl	800c5a8 <UART_WaitOnFlagUntilTimeout>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d022      	beq.n	800c4d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49a:	e853 3f00 	ldrex	r3, [r3]
 800c49e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c4b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4b8:	e841 2300 	strex	r3, r2, [r1]
 800c4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1e6      	bne.n	800c492 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e063      	b.n	800c5a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 0304 	and.w	r3, r3, #4
 800c4e2:	2b04      	cmp	r3, #4
 800c4e4:	d149      	bne.n	800c57a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 f857 	bl	800c5a8 <UART_WaitOnFlagUntilTimeout>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d03c      	beq.n	800c57a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	e853 3f00 	ldrex	r3, [r3]
 800c50c:	623b      	str	r3, [r7, #32]
   return(result);
 800c50e:	6a3b      	ldr	r3, [r7, #32]
 800c510:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c51e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c520:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e6      	bne.n	800c500 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	60fb      	str	r3, [r7, #12]
   return(result);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f023 0301 	bic.w	r3, r3, #1
 800c548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3308      	adds	r3, #8
 800c550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c552:	61fa      	str	r2, [r7, #28]
 800c554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	69b9      	ldr	r1, [r7, #24]
 800c558:	69fa      	ldr	r2, [r7, #28]
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	617b      	str	r3, [r7, #20]
   return(result);
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e5      	bne.n	800c532 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2220      	movs	r2, #32
 800c56a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	e012      	b.n	800c5a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2220      	movs	r2, #32
 800c57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2220      	movs	r2, #32
 800c586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3758      	adds	r7, #88	@ 0x58
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5b8:	e04f      	b.n	800c65a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c0:	d04b      	beq.n	800c65a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5c2:	f7f6 f833 	bl	800262c <HAL_GetTick>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	69ba      	ldr	r2, [r7, #24]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d302      	bcc.n	800c5d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d101      	bne.n	800c5dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e04e      	b.n	800c67a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 0304 	and.w	r3, r3, #4
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d037      	beq.n	800c65a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	2b80      	cmp	r3, #128	@ 0x80
 800c5ee:	d034      	beq.n	800c65a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	2b40      	cmp	r3, #64	@ 0x40
 800c5f4:	d031      	beq.n	800c65a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	f003 0308 	and.w	r3, r3, #8
 800c600:	2b08      	cmp	r3, #8
 800c602:	d110      	bne.n	800c626 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2208      	movs	r2, #8
 800c60a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f000 f838 	bl	800c682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2208      	movs	r2, #8
 800c616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e029      	b.n	800c67a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c634:	d111      	bne.n	800c65a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c63e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 f81e 	bl	800c682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2220      	movs	r2, #32
 800c64a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2200      	movs	r2, #0
 800c652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	e00f      	b.n	800c67a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	69da      	ldr	r2, [r3, #28]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	4013      	ands	r3, r2
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	429a      	cmp	r2, r3
 800c668:	bf0c      	ite	eq
 800c66a:	2301      	moveq	r3, #1
 800c66c:	2300      	movne	r3, #0
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	461a      	mov	r2, r3
 800c672:	79fb      	ldrb	r3, [r7, #7]
 800c674:	429a      	cmp	r2, r3
 800c676:	d0a0      	beq.n	800c5ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c682:	b480      	push	{r7}
 800c684:	b095      	sub	sp, #84	@ 0x54
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c692:	e853 3f00 	ldrex	r3, [r3]
 800c696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c69e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c6ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c6b0:	e841 2300 	strex	r3, r2, [r1]
 800c6b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1e6      	bne.n	800c68a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	e853 3f00 	ldrex	r3, [r3]
 800c6ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c6d2:	f023 0301 	bic.w	r3, r3, #1
 800c6d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3308      	adds	r3, #8
 800c6de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6e8:	e841 2300 	strex	r3, r2, [r1]
 800c6ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1e3      	bne.n	800c6bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d118      	bne.n	800c72e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	e853 3f00 	ldrex	r3, [r3]
 800c708:	60bb      	str	r3, [r7, #8]
   return(result);
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	f023 0310 	bic.w	r3, r3, #16
 800c710:	647b      	str	r3, [r7, #68]	@ 0x44
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	461a      	mov	r2, r3
 800c718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c71a:	61bb      	str	r3, [r7, #24]
 800c71c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	6979      	ldr	r1, [r7, #20]
 800c720:	69ba      	ldr	r2, [r7, #24]
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	613b      	str	r3, [r7, #16]
   return(result);
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1e6      	bne.n	800c6fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2220      	movs	r2, #32
 800c732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c742:	bf00      	nop
 800c744:	3754      	adds	r7, #84	@ 0x54
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c74e:	b480      	push	{r7}
 800c750:	b085      	sub	sp, #20
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <HAL_UARTEx_DisableFifoMode+0x16>
 800c760:	2302      	movs	r3, #2
 800c762:	e027      	b.n	800c7b4 <HAL_UARTEx_DisableFifoMode+0x66>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2224      	movs	r2, #36	@ 0x24
 800c770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f022 0201 	bic.w	r2, r2, #1
 800c78a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c792:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2220      	movs	r2, #32
 800c7a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d101      	bne.n	800c7d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	e02d      	b.n	800c834 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2224      	movs	r2, #36	@ 0x24
 800c7e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f022 0201 	bic.w	r2, r2, #1
 800c7fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	430a      	orrs	r2, r1
 800c812:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f84f 	bl	800c8b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2220      	movs	r2, #32
 800c826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d101      	bne.n	800c854 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c850:	2302      	movs	r3, #2
 800c852:	e02d      	b.n	800c8b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2224      	movs	r2, #36	@ 0x24
 800c860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f022 0201 	bic.w	r2, r2, #1
 800c87a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	683a      	ldr	r2, [r7, #0]
 800c88c:	430a      	orrs	r2, r1
 800c88e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f811 	bl	800c8b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68fa      	ldr	r2, [r7, #12]
 800c89c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2220      	movs	r2, #32
 800c8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d108      	bne.n	800c8da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8d8:	e031      	b.n	800c93e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8da:	2308      	movs	r3, #8
 800c8dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8de:	2308      	movs	r3, #8
 800c8e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	0e5b      	lsrs	r3, r3, #25
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	f003 0307 	and.w	r3, r3, #7
 800c8f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	0f5b      	lsrs	r3, r3, #29
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	f003 0307 	and.w	r3, r3, #7
 800c900:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c902:	7bbb      	ldrb	r3, [r7, #14]
 800c904:	7b3a      	ldrb	r2, [r7, #12]
 800c906:	4911      	ldr	r1, [pc, #68]	@ (800c94c <UARTEx_SetNbDataToProcess+0x94>)
 800c908:	5c8a      	ldrb	r2, [r1, r2]
 800c90a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c90e:	7b3a      	ldrb	r2, [r7, #12]
 800c910:	490f      	ldr	r1, [pc, #60]	@ (800c950 <UARTEx_SetNbDataToProcess+0x98>)
 800c912:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c914:	fb93 f3f2 	sdiv	r3, r3, r2
 800c918:	b29a      	uxth	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	7b7a      	ldrb	r2, [r7, #13]
 800c924:	4909      	ldr	r1, [pc, #36]	@ (800c94c <UARTEx_SetNbDataToProcess+0x94>)
 800c926:	5c8a      	ldrb	r2, [r1, r2]
 800c928:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c92c:	7b7a      	ldrb	r2, [r7, #13]
 800c92e:	4908      	ldr	r1, [pc, #32]	@ (800c950 <UARTEx_SetNbDataToProcess+0x98>)
 800c930:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c932:	fb93 f3f2 	sdiv	r3, r3, r2
 800c936:	b29a      	uxth	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c93e:	bf00      	nop
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	0802cc30 	.word	0x0802cc30
 800c950:	0802cc38 	.word	0x0802cc38

0800c954 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b096      	sub	sp, #88	@ 0x58
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3303      	adds	r3, #3
 800c966:	f023 0303 	bic.w	r3, r3, #3
 800c96a:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c96c:	f3ef 8310 	mrs	r3, PRIMASK
 800c970:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800c972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800c974:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800c976:	b672      	cpsid	i
#endif
    return(int_posture);
 800c978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800c97a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c97c:	4b55      	ldr	r3, [pc, #340]	@ (800cad4 <_tx_byte_allocate+0x180>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800c982:	2300      	movs	r3, #0
 800c984:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c98a:	621a      	str	r2, [r3, #32]
 800c98c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c98e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c992:	f383 8810 	msr	PRIMASK, r3
}
 800c996:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800c998:	6879      	ldr	r1, [r7, #4]
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f000 f9b2 	bl	800cd04 <_tx_byte_pool_search>
 800c9a0:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9ac:	b672      	cpsid	i
    return(int_posture);
 800c9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800c9b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800c9b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9bc:	e006      	b.n	800c9cc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d101      	bne.n	800c9cc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800c9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0d9      	beq.n	800c986 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9d6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800c9d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d008      	beq.n	800c9f0 <_tx_byte_allocate+0x9c>
 800c9de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9e0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	f383 8810 	msr	PRIMASK, r3
}
 800c9e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9ee:	e06c      	b.n	800caca <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d061      	beq.n	800caba <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800c9f6:	4b38      	ldr	r3, [pc, #224]	@ (800cad8 <_tx_byte_allocate+0x184>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d007      	beq.n	800ca0e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800c9fe:	2310      	movs	r3, #16
 800ca00:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca04:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	f383 8810 	msr	PRIMASK, r3
}
 800ca0c:	e05d      	b.n	800caca <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800ca0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca10:	4a32      	ldr	r2, [pc, #200]	@ (800cadc <_tx_byte_allocate+0x188>)
 800ca12:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800ca14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800ca1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800ca20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ca26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ca2c:	1c5a      	adds	r2, r3, #1
 800ca2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca30:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca38:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ca44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d109      	bne.n	800ca5e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca4e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800ca50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca54:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800ca56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca5a:	675a      	str	r2, [r3, #116]	@ 0x74
 800ca5c:	e011      	b.n	800ca82 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca62:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ca64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca68:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ca6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca6e:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ca70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca74:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ca76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca7a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ca7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca80:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800ca82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca84:	2209      	movs	r2, #9
 800ca86:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ca88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ca8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ca94:	4b10      	ldr	r3, [pc, #64]	@ (800cad8 <_tx_byte_allocate+0x184>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	4a0f      	ldr	r2, [pc, #60]	@ (800cad8 <_tx_byte_allocate+0x184>)
 800ca9c:	6013      	str	r3, [r2, #0]
 800ca9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caa0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	f383 8810 	msr	PRIMASK, r3
}
 800caa8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800caaa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800caac:	f001 fb82 	bl	800e1b4 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800cab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cab6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cab8:	e007      	b.n	800caca <_tx_byte_allocate+0x176>
 800caba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cabc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	f383 8810 	msr	PRIMASK, r3
}
 800cac4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800cac6:	2310      	movs	r3, #16
 800cac8:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800caca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3758      	adds	r7, #88	@ 0x58
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	20085280 	.word	0x20085280
 800cad8:	20085318 	.word	0x20085318
 800cadc:	0800cae1 	.word	0x0800cae1

0800cae0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b08e      	sub	sp, #56	@ 0x38
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800caea:	f3ef 8310 	mrs	r3, PRIMASK
 800caee:	623b      	str	r3, [r7, #32]
    return(posture);
 800caf0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800caf2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800caf4:	b672      	cpsid	i
    return(int_posture);
 800caf6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800caf8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cafe:	4a33      	ldr	r2, [pc, #204]	@ (800cbcc <_tx_byte_pool_cleanup+0xec>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d158      	bne.n	800cbb6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d152      	bne.n	800cbb6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb14:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800cb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d04c      	beq.n	800cbb6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a2b      	ldr	r2, [pc, #172]	@ (800cbd0 <_tx_byte_pool_cleanup+0xf0>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d147      	bne.n	800cbb6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d043      	beq.n	800cbb6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800cb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb38:	1e5a      	subs	r2, r3, #1
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3c:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb42:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800cb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d103      	bne.n	800cb52 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb50:	e013      	b.n	800cb7a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb56:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb5c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800cb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb62:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb68:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d102      	bne.n	800cb7a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800cb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb78:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb7e:	2b09      	cmp	r3, #9
 800cb80:	d119      	bne.n	800cbb6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2210      	movs	r2, #16
 800cb86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800cb8a:	4b12      	ldr	r3, [pc, #72]	@ (800cbd4 <_tx_byte_pool_cleanup+0xf4>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	4a10      	ldr	r2, [pc, #64]	@ (800cbd4 <_tx_byte_pool_cleanup+0xf4>)
 800cb92:	6013      	str	r3, [r2, #0]
 800cb94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb96:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	f383 8810 	msr	PRIMASK, r3
}
 800cb9e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f001 fa07 	bl	800dfb4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cba6:	f3ef 8310 	mrs	r3, PRIMASK
 800cbaa:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cbac:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cbae:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbb0:	b672      	cpsid	i
    return(int_posture);
 800cbb2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800cbb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f383 8810 	msr	PRIMASK, r3
}
 800cbc0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800cbc2:	bf00      	nop
 800cbc4:	3738      	adds	r7, #56	@ 0x38
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	0800cae1 	.word	0x0800cae1
 800cbd0:	42595445 	.word	0x42595445
 800cbd4:	20085318 	.word	0x20085318

0800cbd8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08e      	sub	sp, #56	@ 0x38
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800cbe6:	2234      	movs	r2, #52	@ 0x34
 800cbe8:	2100      	movs	r1, #0
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f01e fb05 	bl	802b1fa <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	f023 0303 	bic.w	r3, r3, #3
 800cbf6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	f1a3 0208 	sub.w	r2, r3, #8
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2202      	movs	r2, #2
 800cc24:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800cc2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	4413      	add	r3, r2
 800cc30:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800cc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc34:	3b04      	subs	r3, #4
 800cc36:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800cc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc44:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800cc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc48:	3b04      	subs	r3, #4
 800cc4a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800cc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800cc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800cc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc62:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800cc68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc70:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800cc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc74:	4a1f      	ldr	r2, [pc, #124]	@ (800ccf4 <_tx_byte_pool_create+0x11c>)
 800cc76:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc7e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc82:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cc84:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cc86:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc88:	b672      	cpsid	i
    return(int_posture);
 800cc8a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800cc8c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4a19      	ldr	r2, [pc, #100]	@ (800ccf8 <_tx_byte_pool_create+0x120>)
 800cc92:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800cc94:	4b19      	ldr	r3, [pc, #100]	@ (800ccfc <_tx_byte_pool_create+0x124>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d109      	bne.n	800ccb0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800cc9c:	4a18      	ldr	r2, [pc, #96]	@ (800cd00 <_tx_byte_pool_create+0x128>)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	631a      	str	r2, [r3, #48]	@ 0x30
 800ccae:	e011      	b.n	800ccd4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800ccb0:	4b13      	ldr	r3, [pc, #76]	@ (800cd00 <_tx_byte_pool_create+0x128>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ccb6:	6a3b      	ldr	r3, [r7, #32]
 800ccb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccba:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	69fa      	ldr	r2, [r7, #28]
 800cccc:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6a3a      	ldr	r2, [r7, #32]
 800ccd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ccd4:	4b09      	ldr	r3, [pc, #36]	@ (800ccfc <_tx_byte_pool_create+0x124>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	4a08      	ldr	r2, [pc, #32]	@ (800ccfc <_tx_byte_pool_create+0x124>)
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	f383 8810 	msr	PRIMASK, r3
}
 800cce8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3738      	adds	r7, #56	@ 0x38
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	ffffeeee 	.word	0xffffeeee
 800ccf8:	42595445 	.word	0x42595445
 800ccfc:	20085274 	.word	0x20085274
 800cd00:	20085270 	.word	0x20085270

0800cd04 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b097      	sub	sp, #92	@ 0x5c
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd12:	f3ef 8310 	mrs	r3, PRIMASK
 800cd16:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800cd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800cd1a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd1c:	b672      	cpsid	i
    return(int_posture);
 800cd1e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800cd20:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	689a      	ldr	r2, [r3, #8]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	3b02      	subs	r3, #2
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	4413      	add	r3, r2
 800cd30:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d308      	bcc.n	800cd4c <_tx_byte_pool_search+0x48>
 800cd3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd3c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	f383 8810 	msr	PRIMASK, r3
}
 800cd44:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd4a:	e0dd      	b.n	800cf08 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800cd4c:	4b72      	ldr	r3, [pc, #456]	@ (800cf18 <_tx_byte_pool_search+0x214>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd56:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	695b      	ldr	r3, [r3, #20]
 800cd5c:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	3301      	adds	r3, #1
 800cd64:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800cd66:	2300      	movs	r3, #0
 800cd68:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800cd6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800cd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd72:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800cd74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a68      	ldr	r2, [pc, #416]	@ (800cf1c <_tx_byte_pool_search+0x218>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d143      	bne.n	800ce06 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800cd7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d104      	bne.n	800cd8e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd88:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800cd8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd90:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800cd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800cd98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800cda0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cda2:	3b08      	subs	r3, #8
 800cda4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800cda6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d257      	bcs.n	800ce5e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800cdae:	2300      	movs	r3, #0
 800cdb0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800cdb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdba:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800cdbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a56      	ldr	r2, [pc, #344]	@ (800cf1c <_tx_byte_pool_search+0x218>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d113      	bne.n	800cdee <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800cdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc8:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800cdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	1e5a      	subs	r2, r3, #1
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d114      	bne.n	800ce10 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdea:	615a      	str	r2, [r3, #20]
 800cdec:	e010      	b.n	800ce10 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800cdf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d008      	beq.n	800ce10 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800cdfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce00:	3b01      	subs	r3, #1
 800ce02:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce04:	e004      	b.n	800ce10 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ce06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce08:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800ce10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d002      	beq.n	800ce1c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800ce16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce1e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	f383 8810 	msr	PRIMASK, r3
}
 800ce26:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce28:	f3ef 8310 	mrs	r3, PRIMASK
 800ce2c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ce2e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ce30:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce32:	b672      	cpsid	i
    return(int_posture);
 800ce34:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800ce36:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a1b      	ldr	r3, [r3, #32]
 800ce3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d009      	beq.n	800ce56 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	695b      	ldr	r3, [r3, #20]
 800ce46:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ce54:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800ce56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d186      	bne.n	800cd6a <_tx_byte_pool_search+0x66>
 800ce5c:	e000      	b.n	800ce60 <_tx_byte_pool_search+0x15c>
                    break;
 800ce5e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800ce60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d048      	beq.n	800cef8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800ce66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	2b13      	cmp	r3, #19
 800ce6e:	d91e      	bls.n	800ceae <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	3308      	adds	r3, #8
 800ce74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce76:	4413      	add	r3, r2
 800ce78:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ce7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7c:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ce7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce80:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ce8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ce90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce92:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ce94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce96:	4a21      	ldr	r2, [pc, #132]	@ (800cf1c <_tx_byte_pool_search+0x218>)
 800ce98:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	1c5a      	adds	r2, r3, #1
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800cea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cea8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ceae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb6:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	689a      	ldr	r2, [r3, #8]
 800cec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	f1a3 0208 	sub.w	r2, r3, #8
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d105      	bne.n	800cee4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ced8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceda:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800cedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	615a      	str	r2, [r3, #20]
 800cee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cee6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f383 8810 	msr	PRIMASK, r3
}
 800ceee:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800cef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cef2:	3308      	adds	r3, #8
 800cef4:	653b      	str	r3, [r7, #80]	@ 0x50
 800cef6:	e007      	b.n	800cf08 <_tx_byte_pool_search+0x204>
 800cef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cefa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	f383 8810 	msr	PRIMASK, r3
}
 800cf02:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800cf04:	2300      	movs	r3, #0
 800cf06:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800cf08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	375c      	adds	r7, #92	@ 0x5c
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	20085280 	.word	0x20085280
 800cf1c:	ffffeeee 	.word	0xffffeeee

0800cf20 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800cf24:	f000 ff04 	bl	800dd30 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800cf28:	f001 fb0c 	bl	800e544 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800cf2c:	4b12      	ldr	r3, [pc, #72]	@ (800cf78 <_tx_initialize_high_level+0x58>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	601a      	str	r2, [r3, #0]
 800cf32:	4b12      	ldr	r3, [pc, #72]	@ (800cf7c <_tx_initialize_high_level+0x5c>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800cf38:	4b11      	ldr	r3, [pc, #68]	@ (800cf80 <_tx_initialize_high_level+0x60>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	4b11      	ldr	r3, [pc, #68]	@ (800cf84 <_tx_initialize_high_level+0x64>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800cf44:	4b10      	ldr	r3, [pc, #64]	@ (800cf88 <_tx_initialize_high_level+0x68>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	601a      	str	r2, [r3, #0]
 800cf4a:	4b10      	ldr	r3, [pc, #64]	@ (800cf8c <_tx_initialize_high_level+0x6c>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800cf50:	4b0f      	ldr	r3, [pc, #60]	@ (800cf90 <_tx_initialize_high_level+0x70>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	4b0f      	ldr	r3, [pc, #60]	@ (800cf94 <_tx_initialize_high_level+0x74>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800cf5c:	4b0e      	ldr	r3, [pc, #56]	@ (800cf98 <_tx_initialize_high_level+0x78>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	4b0e      	ldr	r3, [pc, #56]	@ (800cf9c <_tx_initialize_high_level+0x7c>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800cf68:	4b0d      	ldr	r3, [pc, #52]	@ (800cfa0 <_tx_initialize_high_level+0x80>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cfa4 <_tx_initialize_high_level+0x84>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]
#endif
}
 800cf74:	bf00      	nop
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	20085248 	.word	0x20085248
 800cf7c:	2008524c 	.word	0x2008524c
 800cf80:	20085250 	.word	0x20085250
 800cf84:	20085254 	.word	0x20085254
 800cf88:	20085258 	.word	0x20085258
 800cf8c:	2008525c 	.word	0x2008525c
 800cf90:	20085268 	.word	0x20085268
 800cf94:	2008526c 	.word	0x2008526c
 800cf98:	20085270 	.word	0x20085270
 800cf9c:	20085274 	.word	0x20085274
 800cfa0:	20085260 	.word	0x20085260
 800cfa4:	20085264 	.word	0x20085264

0800cfa8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800cfac:	4b10      	ldr	r3, [pc, #64]	@ (800cff0 <_tx_initialize_kernel_enter+0x48>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800cfb4:	d00c      	beq.n	800cfd0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800cfb6:	4b0e      	ldr	r3, [pc, #56]	@ (800cff0 <_tx_initialize_kernel_enter+0x48>)
 800cfb8:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800cfbc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800cfbe:	f7f3 f979 	bl	80002b4 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800cfc2:	f7ff ffad 	bl	800cf20 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800cfc6:	4b0b      	ldr	r3, [pc, #44]	@ (800cff4 <_tx_initialize_kernel_enter+0x4c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	4a09      	ldr	r2, [pc, #36]	@ (800cff4 <_tx_initialize_kernel_enter+0x4c>)
 800cfce:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800cfd0:	4b07      	ldr	r3, [pc, #28]	@ (800cff0 <_tx_initialize_kernel_enter+0x48>)
 800cfd2:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800cfd6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800cfd8:	4b07      	ldr	r3, [pc, #28]	@ (800cff8 <_tx_initialize_kernel_enter+0x50>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7f3 fc13 	bl	8000808 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800cfe2:	4b03      	ldr	r3, [pc, #12]	@ (800cff0 <_tx_initialize_kernel_enter+0x48>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800cfe8:	f7f3 f9a0 	bl	800032c <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800cfec:	bf00      	nop
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	20000010 	.word	0x20000010
 800cff4:	20085318 	.word	0x20085318
 800cff8:	20085278 	.word	0x20085278

0800cffc <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b08e      	sub	sp, #56	@ 0x38
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d006:	f3ef 8310 	mrs	r3, PRIMASK
 800d00a:	623b      	str	r3, [r7, #32]
    return(posture);
 800d00c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d00e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d010:	b672      	cpsid	i
    return(int_posture);
 800d012:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800d014:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d01a:	4a37      	ldr	r2, [pc, #220]	@ (800d0f8 <_tx_queue_cleanup+0xfc>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d161      	bne.n	800d0e4 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d026:	683a      	ldr	r2, [r7, #0]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d15b      	bne.n	800d0e4 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d030:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800d032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d034:	2b00      	cmp	r3, #0
 800d036:	d055      	beq.n	800d0e4 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800d038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a2f      	ldr	r2, [pc, #188]	@ (800d0fc <_tx_queue_cleanup+0x100>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d150      	bne.n	800d0e4 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800d042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d04c      	beq.n	800d0e4 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800d050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d054:	1e5a      	subs	r2, r3, #1
 800d056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d058:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800d05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d05e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800d060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d062:	2b00      	cmp	r3, #0
 800d064:	d103      	bne.n	800d06e <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800d066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d068:	2200      	movs	r2, #0
 800d06a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d06c:	e013      	b.n	800d096 <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d072:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d078:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800d07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d07e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800d080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d084:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800d086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d102      	bne.n	800d096 <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800d090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d094:	629a      	str	r2, [r3, #40]	@ 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d09a:	2b05      	cmp	r3, #5
 800d09c:	d122      	bne.n	800d0e4 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800d09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a0:	691b      	ldr	r3, [r3, #16]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d004      	beq.n	800d0b0 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	220b      	movs	r2, #11
 800d0aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800d0ae:	e003      	b.n	800d0b8 <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	220a      	movs	r2, #10
 800d0b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800d0b8:	4b11      	ldr	r3, [pc, #68]	@ (800d100 <_tx_queue_cleanup+0x104>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	4a10      	ldr	r2, [pc, #64]	@ (800d100 <_tx_queue_cleanup+0x104>)
 800d0c0:	6013      	str	r3, [r2, #0]
 800d0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	f383 8810 	msr	PRIMASK, r3
}
 800d0cc:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 ff70 	bl	800dfb4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0d4:	f3ef 8310 	mrs	r3, PRIMASK
 800d0d8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d0da:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d0dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0de:	b672      	cpsid	i
    return(int_posture);
 800d0e0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800d0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f383 8810 	msr	PRIMASK, r3
}
 800d0ee:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d0f0:	bf00      	nop
 800d0f2:	3738      	adds	r7, #56	@ 0x38
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	0800cffd 	.word	0x0800cffd
 800d0fc:	51554555 	.word	0x51554555
 800d100:	20085318 	.word	0x20085318

0800d104 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b08c      	sub	sp, #48	@ 0x30
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
 800d110:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800d112:	2238      	movs	r2, #56	@ 0x38
 800d114:	2100      	movs	r1, #0
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f01e f86f 	bl	802b1fa <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    used_words =  capacity * message_size;
 800d134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	fb02 f303 	mul.w	r3, r2, r3
 800d13c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	683a      	ldr	r2, [r7, #0]
 800d142:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	699a      	ldr	r2, [r3, #24]
 800d148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	441a      	add	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d162:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d168:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d16a:	f3ef 8310 	mrs	r3, PRIMASK
 800d16e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d170:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d172:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d174:	b672      	cpsid	i
    return(int_posture);
 800d176:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800d178:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	4a18      	ldr	r2, [pc, #96]	@ (800d1e0 <_tx_queue_create+0xdc>)
 800d17e:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800d180:	4b18      	ldr	r3, [pc, #96]	@ (800d1e4 <_tx_queue_create+0xe0>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d109      	bne.n	800d19c <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800d188:	4a17      	ldr	r2, [pc, #92]	@ (800d1e8 <_tx_queue_create+0xe4>)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	631a      	str	r2, [r3, #48]	@ 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	635a      	str	r2, [r3, #52]	@ 0x34
 800d19a:	e011      	b.n	800d1c0 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800d19c:	4b12      	ldr	r3, [pc, #72]	@ (800d1e8 <_tx_queue_create+0xe4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1a6:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	635a      	str	r2, [r3, #52]	@ 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	69fa      	ldr	r2, [r7, #28]
 800d1b8:	635a      	str	r2, [r3, #52]	@ 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6a3a      	ldr	r2, [r7, #32]
 800d1be:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800d1c0:	4b08      	ldr	r3, [pc, #32]	@ (800d1e4 <_tx_queue_create+0xe0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	4a07      	ldr	r2, [pc, #28]	@ (800d1e4 <_tx_queue_create+0xe0>)
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f383 8810 	msr	PRIMASK, r3
}
 800d1d4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3730      	adds	r7, #48	@ 0x30
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	51554555 	.word	0x51554555
 800d1e4:	20085254 	.word	0x20085254
 800d1e8:	20085250 	.word	0x20085250

0800d1ec <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b096      	sub	sp, #88	@ 0x58
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d1fc:	f3ef 8310 	mrs	r3, PRIMASK
 800d200:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 800d202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 800d204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d206:	b672      	cpsid	i
    return(int_posture);
 800d208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800d20a:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d210:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	f000 8136 	beq.w	800d488 <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800d21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d13c      	bne.n	800d29c <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	657b      	str	r3, [r7, #84]	@ 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	653b      	str	r3, [r7, #80]	@ 0x50
            size =         queue_ptr -> tx_queue_message_size;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800d232:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d234:	1d13      	adds	r3, r2, #4
 800d236:	657b      	str	r3, [r7, #84]	@ 0x54
 800d238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d23a:	1d19      	adds	r1, r3, #4
 800d23c:	6539      	str	r1, [r7, #80]	@ 0x50
 800d23e:	6812      	ldr	r2, [r2, #0]
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d244:	2b01      	cmp	r3, #1
 800d246:	d90e      	bls.n	800d266 <_tx_queue_receive+0x7a>
 800d248:	e007      	b.n	800d25a <_tx_queue_receive+0x6e>
 800d24a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d24c:	1d13      	adds	r3, r2, #4
 800d24e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d252:	1d19      	adds	r1, r3, #4
 800d254:	6539      	str	r1, [r7, #80]	@ 0x50
 800d256:	6812      	ldr	r2, [r2, #0]
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d25c:	3b01      	subs	r3, #1
 800d25e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1f1      	bne.n	800d24a <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	69db      	ldr	r3, [r3, #28]
 800d26a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d102      	bne.n	800d276 <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	657b      	str	r3, [r7, #84]	@ 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d27a:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	695b      	ldr	r3, [r3, #20]
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	1e5a      	subs	r2, r3, #1
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	611a      	str	r2, [r3, #16]
 800d290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d292:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d296:	f383 8810 	msr	PRIMASK, r3
}
 800d29a:	e163      	b.n	800d564 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800d2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d153      	bne.n	800d354 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800d2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2b0:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800d2bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2be:	1d13      	adds	r3, r2, #4
 800d2c0:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2c4:	1d19      	adds	r1, r3, #4
 800d2c6:	6539      	str	r1, [r7, #80]	@ 0x50
 800d2c8:	6812      	ldr	r2, [r2, #0]
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d90e      	bls.n	800d2f0 <_tx_queue_receive+0x104>
 800d2d2:	e007      	b.n	800d2e4 <_tx_queue_receive+0xf8>
 800d2d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2d6:	1d13      	adds	r3, r2, #4
 800d2d8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2dc:	1d19      	adds	r1, r3, #4
 800d2de:	6539      	str	r1, [r7, #80]	@ 0x50
 800d2e0:	6812      	ldr	r2, [r2, #0]
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1f1      	bne.n	800d2d4 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800d2f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	643b      	str	r3, [r7, #64]	@ 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800d2f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d103      	bne.n	800d304 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	629a      	str	r2, [r3, #40]	@ 0x28
 800d302:	e00e      	b.n	800d322 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800d304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d308:	63bb      	str	r3, [r7, #56]	@ 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d30e:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800d310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d314:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800d316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d31a:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800d31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d31e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d320:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d326:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d32a:	2200      	movs	r2, #0
 800d32c:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d330:	2200      	movs	r2, #0
 800d332:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800d336:	4b8e      	ldr	r3, [pc, #568]	@ (800d570 <_tx_queue_receive+0x384>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3301      	adds	r3, #1
 800d33c:	4a8c      	ldr	r2, [pc, #560]	@ (800d570 <_tx_queue_receive+0x384>)
 800d33e:	6013      	str	r3, [r2, #0]
 800d340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d342:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d346:	f383 8810 	msr	PRIMASK, r3
}
 800d34a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800d34c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d34e:	f000 fe31 	bl	800dfb4 <_tx_thread_system_resume>
 800d352:	e107      	b.n	800d564 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800d364:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d366:	1d13      	adds	r3, r2, #4
 800d368:	657b      	str	r3, [r7, #84]	@ 0x54
 800d36a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d36c:	1d19      	adds	r1, r3, #4
 800d36e:	6539      	str	r1, [r7, #80]	@ 0x50
 800d370:	6812      	ldr	r2, [r2, #0]
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d376:	2b01      	cmp	r3, #1
 800d378:	d90e      	bls.n	800d398 <_tx_queue_receive+0x1ac>
 800d37a:	e007      	b.n	800d38c <_tx_queue_receive+0x1a0>
 800d37c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d37e:	1d13      	adds	r3, r2, #4
 800d380:	657b      	str	r3, [r7, #84]	@ 0x54
 800d382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d384:	1d19      	adds	r1, r3, #4
 800d386:	6539      	str	r1, [r7, #80]	@ 0x50
 800d388:	6812      	ldr	r2, [r2, #0]
 800d38a:	601a      	str	r2, [r3, #0]
 800d38c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d38e:	3b01      	subs	r3, #1
 800d390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1f1      	bne.n	800d37c <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	69db      	ldr	r3, [r3, #28]
 800d39c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d102      	bne.n	800d3a8 <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	699b      	ldr	r3, [r3, #24]
 800d3a6:	657b      	str	r3, [r7, #84]	@ 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d3ac:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800d3ae:	4b70      	ldr	r3, [pc, #448]	@ (800d570 <_tx_queue_receive+0x384>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	4a6e      	ldr	r2, [pc, #440]	@ (800d570 <_tx_queue_receive+0x384>)
 800d3b6:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800d3b8:	4b6d      	ldr	r3, [pc, #436]	@ (800d570 <_tx_queue_receive+0x384>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	4a6c      	ldr	r2, [pc, #432]	@ (800d570 <_tx_queue_receive+0x384>)
 800d3c0:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800d3c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d3c6:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  queue_ptr -> tx_queue_write;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3cc:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800d3d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d3d6:	1d13      	adds	r3, r2, #4
 800d3d8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3dc:	1d19      	adds	r1, r3, #4
 800d3de:	6539      	str	r1, [r7, #80]	@ 0x50
 800d3e0:	6812      	ldr	r2, [r2, #0]
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d90e      	bls.n	800d408 <_tx_queue_receive+0x21c>
 800d3ea:	e007      	b.n	800d3fc <_tx_queue_receive+0x210>
 800d3ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d3ee:	1d13      	adds	r3, r2, #4
 800d3f0:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3f4:	1d19      	adds	r1, r3, #4
 800d3f6:	6539      	str	r1, [r7, #80]	@ 0x50
 800d3f8:	6812      	ldr	r2, [r2, #0]
 800d3fa:	601a      	str	r2, [r3, #0]
 800d3fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3fe:	3b01      	subs	r3, #1
 800d400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d404:	2b00      	cmp	r3, #0
 800d406:	d1f1      	bne.n	800d3ec <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	69db      	ldr	r3, [r3, #28]
 800d40c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d40e:	429a      	cmp	r2, r3
 800d410:	d102      	bne.n	800d418 <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	653b      	str	r3, [r7, #80]	@ 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d41c:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d422:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800d424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d426:	3b01      	subs	r3, #1
 800d428:	643b      	str	r3, [r7, #64]	@ 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800d42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d103      	bne.n	800d438 <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	629a      	str	r2, [r3, #40]	@ 0x28
 800d436:	e00e      	b.n	800d456 <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800d438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d43a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d43c:	63bb      	str	r3, [r7, #56]	@ 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d442:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800d444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d448:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800d44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d44c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d44e:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800d450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d454:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d45a:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d45e:	2200      	movs	r2, #0
 800d460:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d464:	2200      	movs	r2, #0
 800d466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800d46a:	4b41      	ldr	r3, [pc, #260]	@ (800d570 <_tx_queue_receive+0x384>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3301      	adds	r3, #1
 800d470:	4a3f      	ldr	r2, [pc, #252]	@ (800d570 <_tx_queue_receive+0x384>)
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d476:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	f383 8810 	msr	PRIMASK, r3
}
 800d47e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800d480:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d482:	f000 fd97 	bl	800dfb4 <_tx_thread_system_resume>
 800d486:	e06d      	b.n	800d564 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d062      	beq.n	800d554 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d48e:	4b38      	ldr	r3, [pc, #224]	@ (800d570 <_tx_queue_receive+0x384>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d008      	beq.n	800d4a8 <_tx_queue_receive+0x2bc>
 800d496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d498:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	f383 8810 	msr	PRIMASK, r3
}
 800d4a0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800d4a2:	230a      	movs	r3, #10
 800d4a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4a6:	e05d      	b.n	800d564 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d4a8:	4b32      	ldr	r3, [pc, #200]	@ (800d574 <_tx_queue_receive+0x388>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800d4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b0:	4a31      	ldr	r2, [pc, #196]	@ (800d578 <_tx_queue_receive+0x38c>)
 800d4b2:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800d4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b6:	68fa      	ldr	r2, [r7, #12]
 800d4b8:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800d4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800d4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800d4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d4ce:	1c5a      	adds	r2, r3, #1
 800d4d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800d4d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d109      	bne.n	800d4f0 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d4e0:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800d4e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d4e6:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800d4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d4ec:	675a      	str	r2, [r3, #116]	@ 0x74
 800d4ee:	e011      	b.n	800d514 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4f4:	63bb      	str	r3, [r7, #56]	@ 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800d4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4fa:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d500:	637b      	str	r3, [r7, #52]	@ 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800d502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d504:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d506:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800d508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d50a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d50c:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800d50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d512:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800d514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d516:	1c5a      	adds	r2, r3, #1
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800d51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d51e:	2205      	movs	r2, #5
 800d520:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d524:	2201      	movs	r2, #1
 800d526:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d52e:	4b10      	ldr	r3, [pc, #64]	@ (800d570 <_tx_queue_receive+0x384>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	3301      	adds	r3, #1
 800d534:	4a0e      	ldr	r2, [pc, #56]	@ (800d570 <_tx_queue_receive+0x384>)
 800d536:	6013      	str	r3, [r2, #0]
 800d538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d53a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	f383 8810 	msr	PRIMASK, r3
}
 800d542:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d544:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d546:	f000 fe35 	bl	800e1b4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d550:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d552:	e007      	b.n	800d564 <_tx_queue_receive+0x378>
 800d554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d556:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	f383 8810 	msr	PRIMASK, r3
}
 800d55e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800d560:	230a      	movs	r3, #10
 800d562:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    /* Return completion status.  */
    return(status);
 800d564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800d566:	4618      	mov	r0, r3
 800d568:	3758      	adds	r7, #88	@ 0x58
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	20085318 	.word	0x20085318
 800d574:	20085280 	.word	0x20085280
 800d578:	0800cffd 	.word	0x0800cffd

0800d57c <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b094      	sub	sp, #80	@ 0x50
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800d588:	2300      	movs	r3, #0
 800d58a:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d58c:	f3ef 8310 	mrs	r3, PRIMASK
 800d590:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800d592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800d594:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d596:	b672      	cpsid	i
    return(int_posture);
 800d598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800d59a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 809b 	beq.w	800d6e2 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d13c      	bne.n	800d62c <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	695b      	ldr	r3, [r3, #20]
 800d5b6:	1e5a      	subs	r2, r3, #1
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  queue_ptr -> tx_queue_write;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ce:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800d5d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d5d8:	1d13      	adds	r3, r2, #4
 800d5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5de:	1d19      	adds	r1, r3, #4
 800d5e0:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d5e2:	6812      	ldr	r2, [r2, #0]
 800d5e4:	601a      	str	r2, [r3, #0]
 800d5e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d90e      	bls.n	800d60a <_tx_queue_send+0x8e>
 800d5ec:	e007      	b.n	800d5fe <_tx_queue_send+0x82>
 800d5ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d5f0:	1d13      	adds	r3, r2, #4
 800d5f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f6:	1d19      	adds	r1, r3, #4
 800d5f8:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d5fa:	6812      	ldr	r2, [r2, #0]
 800d5fc:	601a      	str	r2, [r3, #0]
 800d5fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d600:	3b01      	subs	r3, #1
 800d602:	647b      	str	r3, [r7, #68]	@ 0x44
 800d604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1f1      	bne.n	800d5ee <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	69db      	ldr	r3, [r3, #28]
 800d60e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d610:	429a      	cmp	r2, r3
 800d612:	d102      	bne.n	800d61a <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d61e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d622:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	f383 8810 	msr	PRIMASK, r3
}
 800d62a:	e0c8      	b.n	800d7be <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d630:	637b      	str	r3, [r7, #52]	@ 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800d632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d634:	3b01      	subs	r3, #1
 800d636:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 800d638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d103      	bne.n	800d646 <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2200      	movs	r2, #0
 800d642:	629a      	str	r2, [r3, #40]	@ 0x28
 800d644:	e012      	b.n	800d66c <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d648:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800d64e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d652:	633b      	str	r3, [r7, #48]	@ 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d658:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800d65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800d660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d664:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800d666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d66a:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d670:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d674:	2200      	movs	r2, #0
 800d676:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800d67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d67e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d680:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800d688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d68a:	1d13      	adds	r3, r2, #4
 800d68c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d68e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d690:	1d19      	adds	r1, r3, #4
 800d692:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d694:	6812      	ldr	r2, [r2, #0]
 800d696:	601a      	str	r2, [r3, #0]
 800d698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d90e      	bls.n	800d6bc <_tx_queue_send+0x140>
 800d69e:	e007      	b.n	800d6b0 <_tx_queue_send+0x134>
 800d6a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d6a2:	1d13      	adds	r3, r2, #4
 800d6a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6a8:	1d19      	adds	r1, r3, #4
 800d6aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d6ac:	6812      	ldr	r2, [r2, #0]
 800d6ae:	601a      	str	r2, [r3, #0]
 800d6b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1f1      	bne.n	800d6a0 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d6c4:	4b40      	ldr	r3, [pc, #256]	@ (800d7c8 <_tx_queue_send+0x24c>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	4a3f      	ldr	r2, [pc, #252]	@ (800d7c8 <_tx_queue_send+0x24c>)
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	f383 8810 	msr	PRIMASK, r3
}
 800d6d8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800d6da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d6dc:	f000 fc6a 	bl	800dfb4 <_tx_thread_system_resume>
 800d6e0:	e06d      	b.n	800d7be <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d062      	beq.n	800d7ae <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d6e8:	4b37      	ldr	r3, [pc, #220]	@ (800d7c8 <_tx_queue_send+0x24c>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d008      	beq.n	800d702 <_tx_queue_send+0x186>
 800d6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	f383 8810 	msr	PRIMASK, r3
}
 800d6fa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800d6fc:	230b      	movs	r3, #11
 800d6fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800d700:	e05d      	b.n	800d7be <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d702:	4b32      	ldr	r3, [pc, #200]	@ (800d7cc <_tx_queue_send+0x250>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800d708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d70a:	4a31      	ldr	r2, [pc, #196]	@ (800d7d0 <_tx_queue_send+0x254>)
 800d70c:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800d70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800d714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800d71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d71c:	2200      	movs	r2, #0
 800d71e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800d722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d724:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d72c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800d730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d732:	2b00      	cmp	r3, #0
 800d734:	d109      	bne.n	800d74a <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d73a:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800d73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d73e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d740:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800d742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d744:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d746:	675a      	str	r2, [r3, #116]	@ 0x74
 800d748:	e011      	b.n	800d76e <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d74e:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800d750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d754:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800d756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d75a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800d75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d75e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d760:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800d762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d764:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d766:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d76c:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800d76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d770:	1c5a      	adds	r2, r3, #1
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800d776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d778:	2205      	movs	r2, #5
 800d77a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d77e:	2201      	movs	r2, #1
 800d780:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800d782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d788:	4b0f      	ldr	r3, [pc, #60]	@ (800d7c8 <_tx_queue_send+0x24c>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3301      	adds	r3, #1
 800d78e:	4a0e      	ldr	r2, [pc, #56]	@ (800d7c8 <_tx_queue_send+0x24c>)
 800d790:	6013      	str	r3, [r2, #0]
 800d792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d794:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	f383 8810 	msr	PRIMASK, r3
}
 800d79c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d79e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d7a0:	f000 fd08 	bl	800e1b4 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7ac:	e007      	b.n	800d7be <_tx_queue_send+0x242>
 800d7ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f383 8810 	msr	PRIMASK, r3
}
 800d7b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800d7ba:	230b      	movs	r3, #11
 800d7bc:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 800d7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3750      	adds	r7, #80	@ 0x50
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	20085318 	.word	0x20085318
 800d7cc:	20085280 	.word	0x20085280
 800d7d0:	0800cffd 	.word	0x0800cffd

0800d7d4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08e      	sub	sp, #56	@ 0x38
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7de:	f3ef 8310 	mrs	r3, PRIMASK
 800d7e2:	623b      	str	r3, [r7, #32]
    return(posture);
 800d7e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d7e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d7e8:	b672      	cpsid	i
    return(int_posture);
 800d7ea:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800d7ec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7f2:	4a33      	ldr	r2, [pc, #204]	@ (800d8c0 <_tx_semaphore_cleanup+0xec>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d158      	bne.n	800d8aa <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	429a      	cmp	r2, r3
 800d802:	d152      	bne.n	800d8aa <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d808:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800d80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d04c      	beq.n	800d8aa <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a2b      	ldr	r2, [pc, #172]	@ (800d8c4 <_tx_semaphore_cleanup+0xf0>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d147      	bne.n	800d8aa <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800d81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d043      	beq.n	800d8aa <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800d828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	1e5a      	subs	r2, r3, #1
 800d82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d830:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800d838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d103      	bne.n	800d846 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	2200      	movs	r2, #0
 800d842:	60da      	str	r2, [r3, #12]
 800d844:	e013      	b.n	800d86e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d84a:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d850:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800d852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d856:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800d858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d85c:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800d85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	429a      	cmp	r2, r3
 800d866:	d102      	bne.n	800d86e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800d868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d86c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d872:	2b06      	cmp	r3, #6
 800d874:	d119      	bne.n	800d8aa <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	220d      	movs	r2, #13
 800d87a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800d87e:	4b12      	ldr	r3, [pc, #72]	@ (800d8c8 <_tx_semaphore_cleanup+0xf4>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3301      	adds	r3, #1
 800d884:	4a10      	ldr	r2, [pc, #64]	@ (800d8c8 <_tx_semaphore_cleanup+0xf4>)
 800d886:	6013      	str	r3, [r2, #0]
 800d888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d88a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	f383 8810 	msr	PRIMASK, r3
}
 800d892:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fb8d 	bl	800dfb4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d89a:	f3ef 8310 	mrs	r3, PRIMASK
 800d89e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d8a0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d8a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8a4:	b672      	cpsid	i
    return(int_posture);
 800d8a6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800d8a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f383 8810 	msr	PRIMASK, r3
}
 800d8b4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d8b6:	bf00      	nop
 800d8b8:	3738      	adds	r7, #56	@ 0x38
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	0800d7d5 	.word	0x0800d7d5
 800d8c4:	53454d41 	.word	0x53454d41
 800d8c8:	20085318 	.word	0x20085318

0800d8cc <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08a      	sub	sp, #40	@ 0x28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800d8d8:	221c      	movs	r2, #28
 800d8da:	2100      	movs	r1, #0
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f01d fc8c 	bl	802b1fa <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	68ba      	ldr	r2, [r7, #8]
 800d8e6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d8f2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d8f4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d8f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8f8:	b672      	cpsid	i
    return(int_posture);
 800d8fa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800d8fc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	4a18      	ldr	r2, [pc, #96]	@ (800d964 <_tx_semaphore_create+0x98>)
 800d902:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800d904:	4b18      	ldr	r3, [pc, #96]	@ (800d968 <_tx_semaphore_create+0x9c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d109      	bne.n	800d920 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800d90c:	4a17      	ldr	r2, [pc, #92]	@ (800d96c <_tx_semaphore_create+0xa0>)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	619a      	str	r2, [r3, #24]
 800d91e:	e011      	b.n	800d944 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800d920:	4b12      	ldr	r3, [pc, #72]	@ (800d96c <_tx_semaphore_create+0xa0>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800d926:	6a3b      	ldr	r3, [r7, #32]
 800d928:	699b      	ldr	r3, [r3, #24]
 800d92a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	69fa      	ldr	r2, [r7, #28]
 800d93c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6a3a      	ldr	r2, [r7, #32]
 800d942:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800d944:	4b08      	ldr	r3, [pc, #32]	@ (800d968 <_tx_semaphore_create+0x9c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	3301      	adds	r3, #1
 800d94a:	4a07      	ldr	r2, [pc, #28]	@ (800d968 <_tx_semaphore_create+0x9c>)
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d950:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f383 8810 	msr	PRIMASK, r3
}
 800d958:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3728      	adds	r7, #40	@ 0x28
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	53454d41 	.word	0x53454d41
 800d968:	2008524c 	.word	0x2008524c
 800d96c:	20085248 	.word	0x20085248

0800d970 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b08e      	sub	sp, #56	@ 0x38
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800d97a:	2300      	movs	r3, #0
 800d97c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d97e:	f3ef 8310 	mrs	r3, PRIMASK
 800d982:	623b      	str	r3, [r7, #32]
    return(posture);
 800d984:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d986:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d988:	b672      	cpsid	i
    return(int_posture);
 800d98a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800d98c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00a      	beq.n	800d9ac <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	1e5a      	subs	r2, r3, #1
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	609a      	str	r2, [r3, #8]
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	f383 8810 	msr	PRIMASK, r3
}
 800d9aa:	e068      	b.n	800da7e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d05d      	beq.n	800da6e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d9b2:	4b35      	ldr	r3, [pc, #212]	@ (800da88 <_tx_semaphore_get+0x118>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d008      	beq.n	800d9cc <_tx_semaphore_get+0x5c>
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	f383 8810 	msr	PRIMASK, r3
}
 800d9c4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800d9c6:	230d      	movs	r3, #13
 800d9c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9ca:	e058      	b.n	800da7e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d9cc:	4b2f      	ldr	r3, [pc, #188]	@ (800da8c <_tx_semaphore_get+0x11c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800d9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d4:	4a2e      	ldr	r2, [pc, #184]	@ (800da90 <_tx_semaphore_get+0x120>)
 800d9d6:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800d9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800d9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d9e4:	1c5a      	adds	r2, r3, #1
 800d9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d109      	bne.n	800da08 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9f8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800d9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9fe:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800da00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da04:	675a      	str	r2, [r3, #116]	@ 0x74
 800da06:	e011      	b.n	800da2c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800da0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da12:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800da14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da18:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800da1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da1e:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800da20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da24:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800da26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da2a:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	1c5a      	adds	r2, r3, #1
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800da36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da38:	2206      	movs	r2, #6
 800da3a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800da3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3e:	2201      	movs	r2, #1
 800da40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800da42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da44:	683a      	ldr	r2, [r7, #0]
 800da46:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800da48:	4b0f      	ldr	r3, [pc, #60]	@ (800da88 <_tx_semaphore_get+0x118>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3301      	adds	r3, #1
 800da4e:	4a0e      	ldr	r2, [pc, #56]	@ (800da88 <_tx_semaphore_get+0x118>)
 800da50:	6013      	str	r3, [r2, #0]
 800da52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	f383 8810 	msr	PRIMASK, r3
}
 800da5c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800da5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da60:	f000 fba8 	bl	800e1b4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800da64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800da6c:	e007      	b.n	800da7e <_tx_semaphore_get+0x10e>
 800da6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da70:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f383 8810 	msr	PRIMASK, r3
}
 800da78:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800da7a:	230d      	movs	r3, #13
 800da7c:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800da7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800da80:	4618      	mov	r0, r3
 800da82:	3738      	adds	r7, #56	@ 0x38
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	20085318 	.word	0x20085318
 800da8c:	20085280 	.word	0x20085280
 800da90:	0800d7d5 	.word	0x0800d7d5

0800da94 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08c      	sub	sp, #48	@ 0x30
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da9c:	f3ef 8310 	mrs	r3, PRIMASK
 800daa0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800daa2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800daa4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800daa6:	b672      	cpsid	i
    return(int_posture);
 800daa8:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800daaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800dab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10a      	bne.n	800dace <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	1c5a      	adds	r2, r3, #1
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	609a      	str	r2, [r3, #8]
 800dac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	f383 8810 	msr	PRIMASK, r3
}
 800dacc:	e033      	b.n	800db36 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800dad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad6:	3b01      	subs	r3, #1
 800dad8:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800dada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d103      	bne.n	800dae8 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	60da      	str	r2, [r3, #12]
 800dae6:	e00e      	b.n	800db06 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800dae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daec:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a3a      	ldr	r2, [r7, #32]
 800daf2:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800daf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daf8:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800dafa:	6a3b      	ldr	r3, [r7, #32]
 800dafc:	69fa      	ldr	r2, [r7, #28]
 800dafe:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	6a3a      	ldr	r2, [r7, #32]
 800db04:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db0a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800db0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0e:	2200      	movs	r2, #0
 800db10:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800db12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db14:	2200      	movs	r2, #0
 800db16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800db1a:	4b09      	ldr	r3, [pc, #36]	@ (800db40 <_tx_semaphore_put+0xac>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3301      	adds	r3, #1
 800db20:	4a07      	ldr	r2, [pc, #28]	@ (800db40 <_tx_semaphore_put+0xac>)
 800db22:	6013      	str	r3, [r2, #0]
 800db24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db26:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f383 8810 	msr	PRIMASK, r3
}
 800db2e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800db30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db32:	f000 fa3f 	bl	800dfb4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3730      	adds	r7, #48	@ 0x30
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	20085318 	.word	0x20085318

0800db44 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b092      	sub	sp, #72	@ 0x48
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
 800db50:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800db52:	2300      	movs	r3, #0
 800db54:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800db56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db58:	21ef      	movs	r1, #239	@ 0xef
 800db5a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800db5c:	f01d fb4d 	bl	802b1fa <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800db60:	22b0      	movs	r2, #176	@ 0xb0
 800db62:	2100      	movs	r1, #0
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f01d fb48 	bl	802b1fa <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db80:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db86:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db9a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dba0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2220      	movs	r2, #32
 800dba6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800dbaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800dbae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dbb4:	4413      	add	r3, r2
 800dbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dbbc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800dbbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dbc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d007      	beq.n	800dbd6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800dbd4:	e006      	b.n	800dbe4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dbda:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dbe0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2203      	movs	r2, #3
 800dbe8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	4a48      	ldr	r2, [pc, #288]	@ (800dd10 <_tx_thread_create+0x1cc>)
 800dbee:	655a      	str	r2, [r3, #84]	@ 0x54
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800dbf6:	4947      	ldr	r1, [pc, #284]	@ (800dd14 <_tx_thread_create+0x1d0>)
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f7f2 fbfd 	bl	80003f8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dbfe:	f3ef 8310 	mrs	r3, PRIMASK
 800dc02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800dc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800dc06:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc08:	b672      	cpsid	i
    return(int_posture);
 800dc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800dc0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	4a41      	ldr	r2, [pc, #260]	@ (800dd18 <_tx_thread_create+0x1d4>)
 800dc12:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800dc14:	4b41      	ldr	r3, [pc, #260]	@ (800dd1c <_tx_thread_create+0x1d8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10b      	bne.n	800dc34 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800dc1c:	4a40      	ldr	r2, [pc, #256]	@ (800dd20 <_tx_thread_create+0x1dc>)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800dc32:	e016      	b.n	800dc62 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800dc34:	4b3a      	ldr	r3, [pc, #232]	@ (800dd20 <_tx_thread_create+0x1dc>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800dc3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc40:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800dc42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc44:	68fa      	ldr	r2, [r7, #12]
 800dc46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800dc62:	4b2e      	ldr	r3, [pc, #184]	@ (800dd1c <_tx_thread_create+0x1d8>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	3301      	adds	r3, #1
 800dc68:	4a2c      	ldr	r2, [pc, #176]	@ (800dd1c <_tx_thread_create+0x1d8>)
 800dc6a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800dc6c:	4b2d      	ldr	r3, [pc, #180]	@ (800dd24 <_tx_thread_create+0x1e0>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	3301      	adds	r3, #1
 800dc72:	4a2c      	ldr	r2, [pc, #176]	@ (800dd24 <_tx_thread_create+0x1e0>)
 800dc74:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800dc76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d129      	bne.n	800dcd0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc7c:	f3ef 8305 	mrs	r3, IPSR
 800dc80:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800dc82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800dc84:	4b28      	ldr	r3, [pc, #160]	@ (800dd28 <_tx_thread_create+0x1e4>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800dc8e:	d30d      	bcc.n	800dcac <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800dc90:	4b26      	ldr	r3, [pc, #152]	@ (800dd2c <_tx_thread_create+0x1e8>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800dc96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d009      	beq.n	800dcb0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800dc9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dca0:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800dca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dca8:	63da      	str	r2, [r3, #60]	@ 0x3c
 800dcaa:	e001      	b.n	800dcb0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800dcac:	2300      	movs	r3, #0
 800dcae:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	f383 8810 	msr	PRIMASK, r3
}
 800dcba:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f000 f979 	bl	800dfb4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800dcc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d01e      	beq.n	800dd06 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800dcc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dccc:	63da      	str	r2, [r3, #60]	@ 0x3c
 800dcce:	e01a      	b.n	800dd06 <_tx_thread_create+0x1c2>
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	f383 8810 	msr	PRIMASK, r3
}
 800dcda:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcdc:	f3ef 8310 	mrs	r3, PRIMASK
 800dce0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800dce2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800dce4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dce6:	b672      	cpsid	i
    return(int_posture);
 800dce8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800dcea:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800dcec:	4b0d      	ldr	r3, [pc, #52]	@ (800dd24 <_tx_thread_create+0x1e0>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	4a0c      	ldr	r2, [pc, #48]	@ (800dd24 <_tx_thread_create+0x1e0>)
 800dcf4:	6013      	str	r3, [r2, #0]
 800dcf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	f383 8810 	msr	PRIMASK, r3
}
 800dd00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800dd02:	f000 f91d 	bl	800df40 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3748      	adds	r7, #72	@ 0x48
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	0800e489 	.word	0x0800e489
 800dd14:	0800dda9 	.word	0x0800dda9
 800dd18:	54485244 	.word	0x54485244
 800dd1c:	2008528c 	.word	0x2008528c
 800dd20:	20085288 	.word	0x20085288
 800dd24:	20085318 	.word	0x20085318
 800dd28:	20000010 	.word	0x20000010
 800dd2c:	20085284 	.word	0x20085284

0800dd30 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800dd34:	4b12      	ldr	r3, [pc, #72]	@ (800dd80 <_tx_thread_initialize+0x50>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800dd3a:	4b12      	ldr	r3, [pc, #72]	@ (800dd84 <_tx_thread_initialize+0x54>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800dd40:	4b11      	ldr	r3, [pc, #68]	@ (800dd88 <_tx_thread_initialize+0x58>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800dd46:	4b11      	ldr	r3, [pc, #68]	@ (800dd8c <_tx_thread_initialize+0x5c>)
 800dd48:	2220      	movs	r2, #32
 800dd4a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800dd4c:	2280      	movs	r2, #128	@ 0x80
 800dd4e:	2100      	movs	r1, #0
 800dd50:	480f      	ldr	r0, [pc, #60]	@ (800dd90 <_tx_thread_initialize+0x60>)
 800dd52:	f01d fa52 	bl	802b1fa <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800dd56:	4b0f      	ldr	r3, [pc, #60]	@ (800dd94 <_tx_thread_initialize+0x64>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800dd5c:	4b0e      	ldr	r3, [pc, #56]	@ (800dd98 <_tx_thread_initialize+0x68>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800dd62:	4b0e      	ldr	r3, [pc, #56]	@ (800dd9c <_tx_thread_initialize+0x6c>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800dd68:	4b0d      	ldr	r3, [pc, #52]	@ (800dda0 <_tx_thread_initialize+0x70>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800dd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dda4 <_tx_thread_initialize+0x74>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800dd76:	4a0b      	ldr	r2, [pc, #44]	@ (800dda4 <_tx_thread_initialize+0x74>)
 800dd78:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800dd7a:	bf00      	nop
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	20085280 	.word	0x20085280
 800dd84:	20085284 	.word	0x20085284
 800dd88:	20085290 	.word	0x20085290
 800dd8c:	20085294 	.word	0x20085294
 800dd90:	20085298 	.word	0x20085298
 800dd94:	20085288 	.word	0x20085288
 800dd98:	2008528c 	.word	0x2008528c
 800dd9c:	20085318 	.word	0x20085318
 800dda0:	2008531c 	.word	0x2008531c
 800dda4:	20085320 	.word	0x20085320

0800dda8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b088      	sub	sp, #32
 800ddac:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ddae:	4b21      	ldr	r3, [pc, #132]	@ (800de34 <_tx_thread_shell_entry+0x8c>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddb8:	69fa      	ldr	r2, [r7, #28]
 800ddba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ddc0:	4b1d      	ldr	r3, [pc, #116]	@ (800de38 <_tx_thread_shell_entry+0x90>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d003      	beq.n	800ddd0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ddc8:	4b1b      	ldr	r3, [pc, #108]	@ (800de38 <_tx_thread_shell_entry+0x90>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	69f8      	ldr	r0, [r7, #28]
 800ddce:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddd0:	f3ef 8310 	mrs	r3, PRIMASK
 800ddd4:	607b      	str	r3, [r7, #4]
    return(posture);
 800ddd6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ddd8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ddda:	b672      	cpsid	i
    return(int_posture);
 800dddc:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800ddde:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	2201      	movs	r2, #1
 800dde4:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	2201      	movs	r2, #1
 800ddea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ddf2:	4b12      	ldr	r3, [pc, #72]	@ (800de3c <_tx_thread_shell_entry+0x94>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	4a10      	ldr	r2, [pc, #64]	@ (800de3c <_tx_thread_shell_entry+0x94>)
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	f383 8810 	msr	PRIMASK, r3
}
 800de06:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800de08:	f3ef 8314 	mrs	r3, CONTROL
 800de0c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800de0e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800de10:	617b      	str	r3, [r7, #20]
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	f023 0304 	bic.w	r3, r3, #4
 800de18:	617b      	str	r3, [r7, #20]
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	f383 8814 	msr	CONTROL, r3
}
 800de24:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800de26:	69f8      	ldr	r0, [r7, #28]
 800de28:	f000 f9c4 	bl	800e1b4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800de2c:	bf00      	nop
 800de2e:	3720      	adds	r7, #32
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	20085280 	.word	0x20085280
 800de38:	2008531c 	.word	0x2008531c
 800de3c:	20085318 	.word	0x20085318

0800de40 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b08e      	sub	sp, #56	@ 0x38
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de48:	f3ef 8310 	mrs	r3, PRIMASK
 800de4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800de4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800de50:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800de52:	b672      	cpsid	i
    return(int_posture);
 800de54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800de56:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800de58:	4b35      	ldr	r3, [pc, #212]	@ (800df30 <_tx_thread_sleep+0xf0>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800de5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d108      	bne.n	800de76 <_tx_thread_sleep+0x36>
 800de64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de66:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de68:	6a3b      	ldr	r3, [r7, #32]
 800de6a:	f383 8810 	msr	PRIMASK, r3
}
 800de6e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800de70:	2313      	movs	r3, #19
 800de72:	637b      	str	r3, [r7, #52]	@ 0x34
 800de74:	e056      	b.n	800df24 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de76:	f3ef 8305 	mrs	r3, IPSR
 800de7a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800de7c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800de7e:	4b2d      	ldr	r3, [pc, #180]	@ (800df34 <_tx_thread_sleep+0xf4>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4313      	orrs	r3, r2
 800de84:	2b00      	cmp	r3, #0
 800de86:	d008      	beq.n	800de9a <_tx_thread_sleep+0x5a>
 800de88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de8a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	f383 8810 	msr	PRIMASK, r3
}
 800de92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800de94:	2313      	movs	r3, #19
 800de96:	637b      	str	r3, [r7, #52]	@ 0x34
 800de98:	e044      	b.n	800df24 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800de9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de9c:	4a26      	ldr	r2, [pc, #152]	@ (800df38 <_tx_thread_sleep+0xf8>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d108      	bne.n	800deb4 <_tx_thread_sleep+0x74>
 800dea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f383 8810 	msr	PRIMASK, r3
}
 800deac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800deae:	2313      	movs	r3, #19
 800deb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800deb2:	e037      	b.n	800df24 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d108      	bne.n	800decc <_tx_thread_sleep+0x8c>
 800deba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	f383 8810 	msr	PRIMASK, r3
}
 800dec4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800dec6:	2300      	movs	r3, #0
 800dec8:	637b      	str	r3, [r7, #52]	@ 0x34
 800deca:	e02b      	b.n	800df24 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800decc:	4b1b      	ldr	r3, [pc, #108]	@ (800df3c <_tx_thread_sleep+0xfc>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d008      	beq.n	800dee6 <_tx_thread_sleep+0xa6>
 800ded4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f383 8810 	msr	PRIMASK, r3
}
 800dede:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800dee0:	2313      	movs	r3, #19
 800dee2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dee4:	e01e      	b.n	800df24 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800dee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee8:	2204      	movs	r2, #4
 800deea:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800deec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deee:	2201      	movs	r2, #1
 800def0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800def2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def4:	2200      	movs	r2, #0
 800def6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800defa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800df00:	4b0e      	ldr	r3, [pc, #56]	@ (800df3c <_tx_thread_sleep+0xfc>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3301      	adds	r3, #1
 800df06:	4a0d      	ldr	r2, [pc, #52]	@ (800df3c <_tx_thread_sleep+0xfc>)
 800df08:	6013      	str	r3, [r2, #0]
 800df0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	f383 8810 	msr	PRIMASK, r3
}
 800df14:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800df16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df18:	f000 f94c 	bl	800e1b4 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800df1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800df24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800df26:	4618      	mov	r0, r3
 800df28:	3738      	adds	r7, #56	@ 0x38
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	20085280 	.word	0x20085280
 800df34:	20000010 	.word	0x20000010
 800df38:	200853c8 	.word	0x200853c8
 800df3c:	20085318 	.word	0x20085318

0800df40 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800df40:	b480      	push	{r7}
 800df42:	b089      	sub	sp, #36	@ 0x24
 800df44:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800df46:	4b17      	ldr	r3, [pc, #92]	@ (800dfa4 <_tx_thread_system_preempt_check+0x64>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d121      	bne.n	800df96 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800df52:	4b15      	ldr	r3, [pc, #84]	@ (800dfa8 <_tx_thread_system_preempt_check+0x68>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800df58:	4b14      	ldr	r3, [pc, #80]	@ (800dfac <_tx_thread_system_preempt_check+0x6c>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800df5e:	69ba      	ldr	r2, [r7, #24]
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	429a      	cmp	r2, r3
 800df64:	d017      	beq.n	800df96 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800df66:	4b12      	ldr	r3, [pc, #72]	@ (800dfb0 <_tx_thread_system_preempt_check+0x70>)
 800df68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df6c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df6e:	f3ef 8305 	mrs	r3, IPSR
 800df72:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800df74:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10c      	bne.n	800df94 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df7a:	f3ef 8310 	mrs	r3, PRIMASK
 800df7e:	60fb      	str	r3, [r7, #12]
    return(posture);
 800df80:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800df82:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800df84:	b662      	cpsie	i
}
 800df86:	bf00      	nop
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f383 8810 	msr	PRIMASK, r3
}
 800df92:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800df94:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800df96:	bf00      	nop
 800df98:	3724      	adds	r7, #36	@ 0x24
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	20085318 	.word	0x20085318
 800dfa8:	20085280 	.word	0x20085280
 800dfac:	20085284 	.word	0x20085284
 800dfb0:	e000ed04 	.word	0xe000ed04

0800dfb4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b096      	sub	sp, #88	@ 0x58
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfbc:	f3ef 8310 	mrs	r3, PRIMASK
 800dfc0:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800dfc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800dfc4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800dfc6:	b672      	cpsid	i
    return(int_posture);
 800dfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800dfca:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d005      	beq.n	800dfe0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	334c      	adds	r3, #76	@ 0x4c
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f000 fb91 	bl	800e700 <_tx_timer_system_deactivate>
 800dfde:	e002      	b.n	800dfe6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800dfe6:	4b6c      	ldr	r3, [pc, #432]	@ (800e198 <_tx_thread_system_resume+0x1e4>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	3b01      	subs	r3, #1
 800dfec:	4a6a      	ldr	r2, [pc, #424]	@ (800e198 <_tx_thread_system_resume+0x1e4>)
 800dfee:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f040 8083 	bne.w	800e100 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f000 8097 	beq.w	800e132 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d172      	bne.n	800e0f2 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e016:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800e018:	4a60      	ldr	r2, [pc, #384]	@ (800e19c <_tx_thread_system_resume+0x1e8>)
 800e01a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e020:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800e022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e024:	2b00      	cmp	r3, #0
 800e026:	d154      	bne.n	800e0d2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800e028:	495c      	ldr	r1, [pc, #368]	@ (800e19c <_tx_thread_system_resume+0x1e8>)
 800e02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800e03e:	2201      	movs	r2, #1
 800e040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e042:	fa02 f303 	lsl.w	r3, r2, r3
 800e046:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800e048:	4b55      	ldr	r3, [pc, #340]	@ (800e1a0 <_tx_thread_system_resume+0x1ec>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e04e:	4313      	orrs	r3, r2
 800e050:	4a53      	ldr	r2, [pc, #332]	@ (800e1a0 <_tx_thread_system_resume+0x1ec>)
 800e052:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800e054:	4b53      	ldr	r3, [pc, #332]	@ (800e1a4 <_tx_thread_system_resume+0x1f0>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d269      	bcs.n	800e132 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800e05e:	4a51      	ldr	r2, [pc, #324]	@ (800e1a4 <_tx_thread_system_resume+0x1f0>)
 800e060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e062:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800e064:	4b50      	ldr	r3, [pc, #320]	@ (800e1a8 <_tx_thread_system_resume+0x1f4>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800e06a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d103      	bne.n	800e078 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800e070:	4a4d      	ldr	r2, [pc, #308]	@ (800e1a8 <_tx_thread_system_resume+0x1f4>)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6013      	str	r3, [r2, #0]
 800e076:	e05c      	b.n	800e132 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800e078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e07c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e07e:	429a      	cmp	r2, r3
 800e080:	d257      	bcs.n	800e132 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800e082:	4a49      	ldr	r2, [pc, #292]	@ (800e1a8 <_tx_thread_system_resume+0x1f4>)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e08a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08e:	f383 8810 	msr	PRIMASK, r3
}
 800e092:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e094:	4b40      	ldr	r3, [pc, #256]	@ (800e198 <_tx_thread_system_resume+0x1e4>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800e09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d174      	bne.n	800e18a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e0a0:	4b42      	ldr	r3, [pc, #264]	@ (800e1ac <_tx_thread_system_resume+0x1f8>)
 800e0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0a6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e0a8:	f3ef 8305 	mrs	r3, IPSR
 800e0ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800e0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10c      	bne.n	800e0ce <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e0b4:	f3ef 8310 	mrs	r3, PRIMASK
 800e0b8:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800e0bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e0be:	b662      	cpsie	i
}
 800e0c0:	bf00      	nop
 800e0c2:	6a3b      	ldr	r3, [r7, #32]
 800e0c4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	f383 8810 	msr	PRIMASK, r3
}
 800e0cc:	bf00      	nop
}
 800e0ce:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800e0d0:	e05b      	b.n	800e18a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800e0d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0d6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800e0d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800e0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0e8:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e0ee:	621a      	str	r2, [r3, #32]
 800e0f0:	e01f      	b.n	800e132 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2203      	movs	r2, #3
 800e0fc:	631a      	str	r2, [r3, #48]	@ 0x30
 800e0fe:	e018      	b.n	800e132 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e104:	2b01      	cmp	r3, #1
 800e106:	d014      	beq.n	800e132 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	d010      	beq.n	800e132 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	631a      	str	r2, [r3, #48]	@ 0x30
 800e124:	e005      	b.n	800e132 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2203      	movs	r2, #3
 800e130:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e132:	4b1f      	ldr	r3, [pc, #124]	@ (800e1b0 <_tx_thread_system_resume+0x1fc>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e13a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	f383 8810 	msr	PRIMASK, r3
}
 800e142:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800e144:	4b18      	ldr	r3, [pc, #96]	@ (800e1a8 <_tx_thread_system_resume+0x1f4>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d020      	beq.n	800e190 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e14e:	4b12      	ldr	r3, [pc, #72]	@ (800e198 <_tx_thread_system_resume+0x1e4>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800e154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e156:	2b00      	cmp	r3, #0
 800e158:	d11a      	bne.n	800e190 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e15a:	4b14      	ldr	r3, [pc, #80]	@ (800e1ac <_tx_thread_system_resume+0x1f8>)
 800e15c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e160:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e162:	f3ef 8305 	mrs	r3, IPSR
 800e166:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e168:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10f      	bne.n	800e18e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e16e:	f3ef 8310 	mrs	r3, PRIMASK
 800e172:	613b      	str	r3, [r7, #16]
    return(posture);
 800e174:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800e176:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e178:	b662      	cpsie	i
}
 800e17a:	bf00      	nop
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	f383 8810 	msr	PRIMASK, r3
}
 800e186:	bf00      	nop
}
 800e188:	e001      	b.n	800e18e <_tx_thread_system_resume+0x1da>
                                return;
 800e18a:	bf00      	nop
 800e18c:	e000      	b.n	800e190 <_tx_thread_system_resume+0x1dc>
 800e18e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800e190:	3758      	adds	r7, #88	@ 0x58
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20085318 	.word	0x20085318
 800e19c:	20085298 	.word	0x20085298
 800e1a0:	20085290 	.word	0x20085290
 800e1a4:	20085294 	.word	0x20085294
 800e1a8:	20085284 	.word	0x20085284
 800e1ac:	e000ed04 	.word	0xe000ed04
 800e1b0:	20085280 	.word	0x20085280

0800e1b4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b09e      	sub	sp, #120	@ 0x78
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e1bc:	4b81      	ldr	r3, [pc, #516]	@ (800e3c4 <_tx_thread_system_suspend+0x210>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e1c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800e1c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800e1ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1cc:	b672      	cpsid	i
    return(int_posture);
 800e1ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800e1d0:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d112      	bne.n	800e200 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1de:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800e1e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d008      	beq.n	800e1f8 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800e1e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ec:	d004      	beq.n	800e1f8 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	334c      	adds	r3, #76	@ 0x4c
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f000 fa22 	bl	800e63c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	69db      	ldr	r3, [r3, #28]
 800e1fc:	4a72      	ldr	r2, [pc, #456]	@ (800e3c8 <_tx_thread_system_suspend+0x214>)
 800e1fe:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800e200:	4b72      	ldr	r3, [pc, #456]	@ (800e3cc <_tx_thread_system_suspend+0x218>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	3b01      	subs	r3, #1
 800e206:	4a71      	ldr	r2, [pc, #452]	@ (800e3cc <_tx_thread_system_suspend+0x218>)
 800e208:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e20e:	2b01      	cmp	r3, #1
 800e210:	f040 80a6 	bne.w	800e360 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21e:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a1b      	ldr	r3, [r3, #32]
 800e224:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800e226:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d015      	beq.n	800e25a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e232:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800e234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e236:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e238:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800e23a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e23c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e23e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800e240:	4a63      	ldr	r2, [pc, #396]	@ (800e3d0 <_tx_thread_system_suspend+0x21c>)
 800e242:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d157      	bne.n	800e2fe <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800e24e:	4960      	ldr	r1, [pc, #384]	@ (800e3d0 <_tx_thread_system_suspend+0x21c>)
 800e250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e252:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e258:	e051      	b.n	800e2fe <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800e25a:	4a5d      	ldr	r2, [pc, #372]	@ (800e3d0 <_tx_thread_system_suspend+0x21c>)
 800e25c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e25e:	2100      	movs	r1, #0
 800e260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800e264:	2201      	movs	r2, #1
 800e266:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e268:	fa02 f303 	lsl.w	r3, r2, r3
 800e26c:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800e26e:	4b59      	ldr	r3, [pc, #356]	@ (800e3d4 <_tx_thread_system_suspend+0x220>)
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e274:	43db      	mvns	r3, r3
 800e276:	4013      	ands	r3, r2
 800e278:	4a56      	ldr	r2, [pc, #344]	@ (800e3d4 <_tx_thread_system_suspend+0x220>)
 800e27a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800e27c:	2300      	movs	r3, #0
 800e27e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800e280:	4b54      	ldr	r3, [pc, #336]	@ (800e3d4 <_tx_thread_system_suspend+0x220>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800e286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d12b      	bne.n	800e2e4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800e28c:	4b52      	ldr	r3, [pc, #328]	@ (800e3d8 <_tx_thread_system_suspend+0x224>)
 800e28e:	2220      	movs	r2, #32
 800e290:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800e292:	4b52      	ldr	r3, [pc, #328]	@ (800e3dc <_tx_thread_system_suspend+0x228>)
 800e294:	2200      	movs	r2, #0
 800e296:	601a      	str	r2, [r3, #0]
 800e298:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e29a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e29c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e29e:	f383 8810 	msr	PRIMASK, r3
}
 800e2a2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e2a4:	4b49      	ldr	r3, [pc, #292]	@ (800e3cc <_tx_thread_system_suspend+0x218>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800e2aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f040 8081 	bne.w	800e3b4 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e2b2:	4b4b      	ldr	r3, [pc, #300]	@ (800e3e0 <_tx_thread_system_suspend+0x22c>)
 800e2b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2b8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2ba:	f3ef 8305 	mrs	r3, IPSR
 800e2be:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800e2c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d10c      	bne.n	800e2e0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e2c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800e2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800e2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e2d0:	b662      	cpsie	i
}
 800e2d2:	bf00      	nop
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d6:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2da:	f383 8810 	msr	PRIMASK, r3
}
 800e2de:	bf00      	nop
}
 800e2e0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800e2e2:	e067      	b.n	800e3b4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800e2e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2e6:	fa93 f3a3 	rbit	r3, r3
 800e2ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2ee:	fab3 f383 	clz	r3, r3
 800e2f2:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800e2f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e2f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2f8:	4413      	add	r3, r2
 800e2fa:	4a37      	ldr	r2, [pc, #220]	@ (800e3d8 <_tx_thread_system_suspend+0x224>)
 800e2fc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800e2fe:	4b37      	ldr	r3, [pc, #220]	@ (800e3dc <_tx_thread_system_suspend+0x228>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	429a      	cmp	r2, r3
 800e306:	d12b      	bne.n	800e360 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800e308:	4b33      	ldr	r3, [pc, #204]	@ (800e3d8 <_tx_thread_system_suspend+0x224>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a30      	ldr	r2, [pc, #192]	@ (800e3d0 <_tx_thread_system_suspend+0x21c>)
 800e30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e312:	4a32      	ldr	r2, [pc, #200]	@ (800e3dc <_tx_thread_system_suspend+0x228>)
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e318:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31c:	f383 8810 	msr	PRIMASK, r3
}
 800e320:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e322:	4b2a      	ldr	r3, [pc, #168]	@ (800e3cc <_tx_thread_system_suspend+0x218>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800e328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d144      	bne.n	800e3b8 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e32e:	4b2c      	ldr	r3, [pc, #176]	@ (800e3e0 <_tx_thread_system_suspend+0x22c>)
 800e330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e334:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e336:	f3ef 8305 	mrs	r3, IPSR
 800e33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800e33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10c      	bne.n	800e35c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e342:	f3ef 8310 	mrs	r3, PRIMASK
 800e346:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800e348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800e34a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e34c:	b662      	cpsie	i
}
 800e34e:	bf00      	nop
 800e350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e352:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e354:	6a3b      	ldr	r3, [r7, #32]
 800e356:	f383 8810 	msr	PRIMASK, r3
}
 800e35a:	bf00      	nop
}
 800e35c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800e35e:	e02b      	b.n	800e3b8 <_tx_thread_system_suspend+0x204>
 800e360:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e362:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	f383 8810 	msr	PRIMASK, r3
}
 800e36a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800e36c:	4b1b      	ldr	r3, [pc, #108]	@ (800e3dc <_tx_thread_system_suspend+0x228>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e372:	429a      	cmp	r2, r3
 800e374:	d022      	beq.n	800e3bc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800e376:	4b15      	ldr	r3, [pc, #84]	@ (800e3cc <_tx_thread_system_suspend+0x218>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800e37c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d11c      	bne.n	800e3bc <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800e382:	4b17      	ldr	r3, [pc, #92]	@ (800e3e0 <_tx_thread_system_suspend+0x22c>)
 800e384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e388:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e38a:	f3ef 8305 	mrs	r3, IPSR
 800e38e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e390:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800e392:	2b00      	cmp	r3, #0
 800e394:	d10c      	bne.n	800e3b0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e396:	f3ef 8310 	mrs	r3, PRIMASK
 800e39a:	617b      	str	r3, [r7, #20]
    return(posture);
 800e39c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800e39e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800e3a0:	b662      	cpsie	i
}
 800e3a2:	bf00      	nop
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f383 8810 	msr	PRIMASK, r3
}
 800e3ae:	bf00      	nop
}
 800e3b0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800e3b2:	e003      	b.n	800e3bc <_tx_thread_system_suspend+0x208>
                return;
 800e3b4:	bf00      	nop
 800e3b6:	e002      	b.n	800e3be <_tx_thread_system_suspend+0x20a>
            return;
 800e3b8:	bf00      	nop
 800e3ba:	e000      	b.n	800e3be <_tx_thread_system_suspend+0x20a>
    return;
 800e3bc:	bf00      	nop
}
 800e3be:	3778      	adds	r7, #120	@ 0x78
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	20085280 	.word	0x20085280
 800e3c8:	20085884 	.word	0x20085884
 800e3cc:	20085318 	.word	0x20085318
 800e3d0:	20085298 	.word	0x20085298
 800e3d4:	20085290 	.word	0x20085290
 800e3d8:	20085294 	.word	0x20085294
 800e3dc:	20085284 	.word	0x20085284
 800e3e0:	e000ed04 	.word	0xe000ed04

0800e3e4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b087      	sub	sp, #28
 800e3e8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e3ea:	4b21      	ldr	r3, [pc, #132]	@ (800e470 <_tx_thread_time_slice+0x8c>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3f0:	f3ef 8310 	mrs	r3, PRIMASK
 800e3f4:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e3f8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3fa:	b672      	cpsid	i
    return(int_posture);
 800e3fc:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800e3fe:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800e400:	4b1c      	ldr	r3, [pc, #112]	@ (800e474 <_tx_thread_time_slice+0x90>)
 800e402:	2200      	movs	r2, #0
 800e404:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d024      	beq.n	800e456 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e410:	2b00      	cmp	r3, #0
 800e412:	d120      	bne.n	800e456 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	69da      	ldr	r2, [r3, #28]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	699b      	ldr	r3, [r3, #24]
 800e420:	4a15      	ldr	r2, [pc, #84]	@ (800e478 <_tx_thread_time_slice+0x94>)
 800e422:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	6a1b      	ldr	r3, [r3, #32]
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d013      	beq.n	800e456 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e436:	429a      	cmp	r2, r3
 800e438:	d10d      	bne.n	800e456 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	6a12      	ldr	r2, [r2, #32]
 800e442:	490e      	ldr	r1, [pc, #56]	@ (800e47c <_tx_thread_time_slice+0x98>)
 800e444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800e448:	4b0d      	ldr	r3, [pc, #52]	@ (800e480 <_tx_thread_time_slice+0x9c>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a0b      	ldr	r2, [pc, #44]	@ (800e47c <_tx_thread_time_slice+0x98>)
 800e44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e452:	4a0c      	ldr	r2, [pc, #48]	@ (800e484 <_tx_thread_time_slice+0xa0>)
 800e454:	6013      	str	r3, [r2, #0]
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f383 8810 	msr	PRIMASK, r3
}
 800e460:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800e462:	bf00      	nop
 800e464:	371c      	adds	r7, #28
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	20085280 	.word	0x20085280
 800e474:	20085328 	.word	0x20085328
 800e478:	20085884 	.word	0x20085884
 800e47c:	20085298 	.word	0x20085298
 800e480:	20085294 	.word	0x20085294
 800e484:	20085284 	.word	0x20085284

0800e488 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b08a      	sub	sp, #40	@ 0x28
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e494:	f3ef 8310 	mrs	r3, PRIMASK
 800e498:	617b      	str	r3, [r7, #20]
    return(posture);
 800e49a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e49c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e49e:	b672      	cpsid	i
    return(int_posture);
 800e4a0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800e4a2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4a8:	2b04      	cmp	r3, #4
 800e4aa:	d10e      	bne.n	800e4ca <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800e4ac:	4b13      	ldr	r3, [pc, #76]	@ (800e4fc <_tx_thread_timeout+0x74>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	4a12      	ldr	r2, [pc, #72]	@ (800e4fc <_tx_thread_timeout+0x74>)
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f383 8810 	msr	PRIMASK, r3
}
 800e4c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800e4c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e4c4:	f7ff fd76 	bl	800dfb4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800e4c8:	e013      	b.n	800e4f2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4ce:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e4d6:	61bb      	str	r3, [r7, #24]
 800e4d8:	6a3b      	ldr	r3, [r7, #32]
 800e4da:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	f383 8810 	msr	PRIMASK, r3
}
 800e4e2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d003      	beq.n	800e4f2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	69b9      	ldr	r1, [r7, #24]
 800e4ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e4f0:	4798      	blx	r3
}
 800e4f2:	bf00      	nop
 800e4f4:	3728      	adds	r7, #40	@ 0x28
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	20085318 	.word	0x20085318

0800e500 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e506:	f3ef 8310 	mrs	r3, PRIMASK
 800e50a:	607b      	str	r3, [r7, #4]
    return(posture);
 800e50c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800e50e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e510:	b672      	cpsid	i
    return(int_posture);
 800e512:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800e514:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800e516:	4b09      	ldr	r3, [pc, #36]	@ (800e53c <_tx_timer_expiration_process+0x3c>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3301      	adds	r3, #1
 800e51c:	4a07      	ldr	r2, [pc, #28]	@ (800e53c <_tx_timer_expiration_process+0x3c>)
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	f383 8810 	msr	PRIMASK, r3
}
 800e52a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800e52c:	4804      	ldr	r0, [pc, #16]	@ (800e540 <_tx_timer_expiration_process+0x40>)
 800e52e:	f7ff fd41 	bl	800dfb4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e532:	bf00      	nop
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	20085318 	.word	0x20085318
 800e540:	200853c8 	.word	0x200853c8

0800e544 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800e544:	b590      	push	{r4, r7, lr}
 800e546:	b089      	sub	sp, #36	@ 0x24
 800e548:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800e54a:	4b28      	ldr	r3, [pc, #160]	@ (800e5ec <_tx_timer_initialize+0xa8>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800e550:	4b27      	ldr	r3, [pc, #156]	@ (800e5f0 <_tx_timer_initialize+0xac>)
 800e552:	2200      	movs	r2, #0
 800e554:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800e556:	4b27      	ldr	r3, [pc, #156]	@ (800e5f4 <_tx_timer_initialize+0xb0>)
 800e558:	2200      	movs	r2, #0
 800e55a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800e55c:	4b26      	ldr	r3, [pc, #152]	@ (800e5f8 <_tx_timer_initialize+0xb4>)
 800e55e:	2200      	movs	r2, #0
 800e560:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800e562:	4b26      	ldr	r3, [pc, #152]	@ (800e5fc <_tx_timer_initialize+0xb8>)
 800e564:	2200      	movs	r2, #0
 800e566:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800e568:	2280      	movs	r2, #128	@ 0x80
 800e56a:	2100      	movs	r1, #0
 800e56c:	4824      	ldr	r0, [pc, #144]	@ (800e600 <_tx_timer_initialize+0xbc>)
 800e56e:	f01c fe44 	bl	802b1fa <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800e572:	4b24      	ldr	r3, [pc, #144]	@ (800e604 <_tx_timer_initialize+0xc0>)
 800e574:	4a22      	ldr	r2, [pc, #136]	@ (800e600 <_tx_timer_initialize+0xbc>)
 800e576:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800e578:	4b23      	ldr	r3, [pc, #140]	@ (800e608 <_tx_timer_initialize+0xc4>)
 800e57a:	4a21      	ldr	r2, [pc, #132]	@ (800e600 <_tx_timer_initialize+0xbc>)
 800e57c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800e57e:	4b23      	ldr	r3, [pc, #140]	@ (800e60c <_tx_timer_initialize+0xc8>)
 800e580:	4a23      	ldr	r2, [pc, #140]	@ (800e610 <_tx_timer_initialize+0xcc>)
 800e582:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800e584:	4b21      	ldr	r3, [pc, #132]	@ (800e60c <_tx_timer_initialize+0xc8>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3304      	adds	r3, #4
 800e58a:	4a20      	ldr	r2, [pc, #128]	@ (800e60c <_tx_timer_initialize+0xc8>)
 800e58c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800e58e:	4b21      	ldr	r3, [pc, #132]	@ (800e614 <_tx_timer_initialize+0xd0>)
 800e590:	4a21      	ldr	r2, [pc, #132]	@ (800e618 <_tx_timer_initialize+0xd4>)
 800e592:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800e594:	4b21      	ldr	r3, [pc, #132]	@ (800e61c <_tx_timer_initialize+0xd8>)
 800e596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e59a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800e59c:	4b20      	ldr	r3, [pc, #128]	@ (800e620 <_tx_timer_initialize+0xdc>)
 800e59e:	2200      	movs	r2, #0
 800e5a0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800e5a2:	4b1c      	ldr	r3, [pc, #112]	@ (800e614 <_tx_timer_initialize+0xd0>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a1d      	ldr	r2, [pc, #116]	@ (800e61c <_tx_timer_initialize+0xd8>)
 800e5a8:	6812      	ldr	r2, [r2, #0]
 800e5aa:	491d      	ldr	r1, [pc, #116]	@ (800e620 <_tx_timer_initialize+0xdc>)
 800e5ac:	6809      	ldr	r1, [r1, #0]
 800e5ae:	481c      	ldr	r0, [pc, #112]	@ (800e620 <_tx_timer_initialize+0xdc>)
 800e5b0:	6800      	ldr	r0, [r0, #0]
 800e5b2:	2400      	movs	r4, #0
 800e5b4:	9405      	str	r4, [sp, #20]
 800e5b6:	2400      	movs	r4, #0
 800e5b8:	9404      	str	r4, [sp, #16]
 800e5ba:	9003      	str	r0, [sp, #12]
 800e5bc:	9102      	str	r1, [sp, #8]
 800e5be:	9201      	str	r2, [sp, #4]
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	4b18      	ldr	r3, [pc, #96]	@ (800e624 <_tx_timer_initialize+0xe0>)
 800e5c4:	4a18      	ldr	r2, [pc, #96]	@ (800e628 <_tx_timer_initialize+0xe4>)
 800e5c6:	4919      	ldr	r1, [pc, #100]	@ (800e62c <_tx_timer_initialize+0xe8>)
 800e5c8:	4819      	ldr	r0, [pc, #100]	@ (800e630 <_tx_timer_initialize+0xec>)
 800e5ca:	f7ff fabb 	bl	800db44 <_tx_thread_create>
 800e5ce:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1e5      	bne.n	800e5a2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800e5d6:	4b17      	ldr	r3, [pc, #92]	@ (800e634 <_tx_timer_initialize+0xf0>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800e5dc:	4b16      	ldr	r3, [pc, #88]	@ (800e638 <_tx_timer_initialize+0xf4>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800e5e2:	bf00      	nop
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd90      	pop	{r4, r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20085324 	.word	0x20085324
 800e5f0:	20085884 	.word	0x20085884
 800e5f4:	20085328 	.word	0x20085328
 800e5f8:	200853b8 	.word	0x200853b8
 800e5fc:	200853c4 	.word	0x200853c4
 800e600:	2008532c 	.word	0x2008532c
 800e604:	200853ac 	.word	0x200853ac
 800e608:	200853b4 	.word	0x200853b4
 800e60c:	200853b0 	.word	0x200853b0
 800e610:	200853a8 	.word	0x200853a8
 800e614:	20085478 	.word	0x20085478
 800e618:	20085484 	.word	0x20085484
 800e61c:	2008547c 	.word	0x2008547c
 800e620:	20085480 	.word	0x20085480
 800e624:	4154494d 	.word	0x4154494d
 800e628:	0800e771 	.word	0x0800e771
 800e62c:	0802be90 	.word	0x0802be90
 800e630:	200853c8 	.word	0x200853c8
 800e634:	200853bc 	.word	0x200853bc
 800e638:	200853c0 	.word	0x200853c0

0800e63c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b089      	sub	sp, #36	@ 0x24
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d04a      	beq.n	800e6e6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e656:	d046      	beq.n	800e6e6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d142      	bne.n	800e6e6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	2b20      	cmp	r3, #32
 800e664:	d902      	bls.n	800e66c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800e666:	231f      	movs	r3, #31
 800e668:	61bb      	str	r3, [r7, #24]
 800e66a:	e002      	b.n	800e672 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	3b01      	subs	r3, #1
 800e670:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800e672:	4b20      	ldr	r3, [pc, #128]	@ (800e6f4 <_tx_timer_system_activate+0xb8>)
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4413      	add	r3, r2
 800e67c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800e67e:	4b1e      	ldr	r3, [pc, #120]	@ (800e6f8 <_tx_timer_system_activate+0xbc>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	69fa      	ldr	r2, [r7, #28]
 800e684:	429a      	cmp	r2, r3
 800e686:	d30b      	bcc.n	800e6a0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800e688:	4b1b      	ldr	r3, [pc, #108]	@ (800e6f8 <_tx_timer_system_activate+0xbc>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	69fa      	ldr	r2, [r7, #28]
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	109b      	asrs	r3, r3, #2
 800e692:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800e694:	4b19      	ldr	r3, [pc, #100]	@ (800e6fc <_tx_timer_system_activate+0xc0>)
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4413      	add	r3, r2
 800e69e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d109      	bne.n	800e6bc <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	601a      	str	r2, [r3, #0]
 800e6ba:	e011      	b.n	800e6e0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	695b      	ldr	r3, [r3, #20]
 800e6c6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	68ba      	ldr	r2, [r7, #8]
 800e6de:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	69fa      	ldr	r2, [r7, #28]
 800e6e4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800e6e6:	bf00      	nop
 800e6e8:	3724      	adds	r7, #36	@ 0x24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	200853b4 	.word	0x200853b4
 800e6f8:	200853b0 	.word	0x200853b0
 800e6fc:	200853ac 	.word	0x200853ac

0800e700 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800e700:	b480      	push	{r7}
 800e702:	b087      	sub	sp, #28
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d026      	beq.n	800e762 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	691b      	ldr	r3, [r3, #16]
 800e718:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d108      	bne.n	800e734 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d117      	bne.n	800e75c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	2200      	movs	r2, #0
 800e730:	601a      	str	r2, [r3, #0]
 800e732:	e013      	b.n	800e75c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	695b      	ldr	r3, [r3, #20]
 800e738:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	68fa      	ldr	r2, [r7, #12]
 800e73e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	693a      	ldr	r2, [r7, #16]
 800e744:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d105      	bne.n	800e75c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	697a      	ldr	r2, [r7, #20]
 800e754:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	693a      	ldr	r2, [r7, #16]
 800e75a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	619a      	str	r2, [r3, #24]
    }
}
 800e762:	bf00      	nop
 800e764:	371c      	adds	r7, #28
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr
	...

0800e770 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b098      	sub	sp, #96	@ 0x60
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800e778:	2300      	movs	r3, #0
 800e77a:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a73      	ldr	r2, [pc, #460]	@ (800e94c <_tx_timer_thread_entry+0x1dc>)
 800e780:	4293      	cmp	r3, r2
 800e782:	f040 80de 	bne.w	800e942 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e786:	f3ef 8310 	mrs	r3, PRIMASK
 800e78a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800e78c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800e78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800e790:	b672      	cpsid	i
    return(int_posture);
 800e792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800e794:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800e796:	4b6e      	ldr	r3, [pc, #440]	@ (800e950 <_tx_timer_thread_entry+0x1e0>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d003      	beq.n	800e7ac <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f107 020c 	add.w	r2, r7, #12
 800e7aa:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800e7ac:	4b68      	ldr	r3, [pc, #416]	@ (800e950 <_tx_timer_thread_entry+0x1e0>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800e7b4:	4b66      	ldr	r3, [pc, #408]	@ (800e950 <_tx_timer_thread_entry+0x1e0>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	4a65      	ldr	r2, [pc, #404]	@ (800e950 <_tx_timer_thread_entry+0x1e0>)
 800e7bc:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800e7be:	4b64      	ldr	r3, [pc, #400]	@ (800e950 <_tx_timer_thread_entry+0x1e0>)
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	4b64      	ldr	r3, [pc, #400]	@ (800e954 <_tx_timer_thread_entry+0x1e4>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d103      	bne.n	800e7d2 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800e7ca:	4b63      	ldr	r3, [pc, #396]	@ (800e958 <_tx_timer_thread_entry+0x1e8>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a60      	ldr	r2, [pc, #384]	@ (800e950 <_tx_timer_thread_entry+0x1e0>)
 800e7d0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800e7d2:	4b62      	ldr	r3, [pc, #392]	@ (800e95c <_tx_timer_thread_entry+0x1ec>)
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	601a      	str	r2, [r3, #0]
 800e7d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7da:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7de:	f383 8810 	msr	PRIMASK, r3
}
 800e7e2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e7e4:	f3ef 8310 	mrs	r3, PRIMASK
 800e7e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800e7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800e7ec:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800e7ee:	b672      	cpsid	i
    return(int_posture);
 800e7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800e7f2:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800e7f4:	e07f      	b.n	800e8f6 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800e800:	2300      	movs	r3, #0
 800e802:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800e804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e808:	429a      	cmp	r2, r3
 800e80a:	d102      	bne.n	800e812 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800e80c:	2300      	movs	r3, #0
 800e80e:	60fb      	str	r3, [r7, #12]
 800e810:	e00e      	b.n	800e830 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800e812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800e818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e81a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e81c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800e81e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e822:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800e824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e826:	f107 020c 	add.w	r2, r7, #12
 800e82a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800e82c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e82e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b20      	cmp	r3, #32
 800e836:	d911      	bls.n	800e85c <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800e838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800e840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e842:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800e844:	2300      	movs	r3, #0
 800e846:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e84a:	f107 0208 	add.w	r2, r7, #8
 800e84e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800e850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e852:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e854:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800e856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e858:	60bb      	str	r3, [r7, #8]
 800e85a:	e01a      	b.n	800e892 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800e85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e85e:	689b      	ldr	r3, [r3, #8]
 800e860:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800e862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800e868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e86e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800e870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d009      	beq.n	800e88c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800e878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e87a:	f107 0208 	add.w	r2, r7, #8
 800e87e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800e880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e882:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e884:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800e886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e888:	60bb      	str	r3, [r7, #8]
 800e88a:	e002      	b.n	800e892 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e88c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e88e:	2200      	movs	r2, #0
 800e890:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800e892:	4a33      	ldr	r2, [pc, #204]	@ (800e960 <_tx_timer_thread_entry+0x1f0>)
 800e894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e896:	6013      	str	r3, [r2, #0]
 800e898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e89a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89e:	f383 8810 	msr	PRIMASK, r3
}
 800e8a2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800e8a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d002      	beq.n	800e8b0 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800e8aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e8ac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800e8ae:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8b0:	f3ef 8310 	mrs	r3, PRIMASK
 800e8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800e8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800e8b8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8ba:	b672      	cpsid	i
    return(int_posture);
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e8be:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800e8c0:	4b27      	ldr	r3, [pc, #156]	@ (800e960 <_tx_timer_thread_entry+0x1f0>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d105      	bne.n	800e8da <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800e8ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800e8d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e8d6:	f7ff feb1 	bl	800e63c <_tx_timer_system_activate>
 800e8da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8dc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	f383 8810 	msr	PRIMASK, r3
}
 800e8e4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e8e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e8ea:	623b      	str	r3, [r7, #32]
    return(posture);
 800e8ec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e8ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e8f0:	b672      	cpsid	i
    return(int_posture);
 800e8f2:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800e8f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f47f af7c 	bne.w	800e7f6 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800e8fe:	4b17      	ldr	r3, [pc, #92]	@ (800e95c <_tx_timer_thread_entry+0x1ec>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d116      	bne.n	800e934 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800e906:	4b17      	ldr	r3, [pc, #92]	@ (800e964 <_tx_timer_thread_entry+0x1f4>)
 800e908:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800e90a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e90c:	2203      	movs	r2, #3
 800e90e:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e912:	2201      	movs	r2, #1
 800e914:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800e916:	4b14      	ldr	r3, [pc, #80]	@ (800e968 <_tx_timer_thread_entry+0x1f8>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	3301      	adds	r3, #1
 800e91c:	4a12      	ldr	r2, [pc, #72]	@ (800e968 <_tx_timer_thread_entry+0x1f8>)
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e922:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	f383 8810 	msr	PRIMASK, r3
}
 800e92a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e92c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800e92e:	f7ff fc41 	bl	800e1b4 <_tx_thread_system_suspend>
 800e932:	e728      	b.n	800e786 <_tx_timer_thread_entry+0x16>
 800e934:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e936:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	f383 8810 	msr	PRIMASK, r3
}
 800e93e:	bf00      	nop
            TX_DISABLE
 800e940:	e721      	b.n	800e786 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800e942:	bf00      	nop
 800e944:	3760      	adds	r7, #96	@ 0x60
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	4154494d 	.word	0x4154494d
 800e950:	200853b4 	.word	0x200853b4
 800e954:	200853b0 	.word	0x200853b0
 800e958:	200853ac 	.word	0x200853ac
 800e95c:	200853b8 	.word	0x200853b8
 800e960:	200853c4 	.word	0x200853c4
 800e964:	200853c8 	.word	0x200853c8
 800e968:	20085318 	.word	0x20085318

0800e96c <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08a      	sub	sp, #40	@ 0x28
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e97a:	2300      	movs	r3, #0
 800e97c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d102      	bne.n	800e98a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e984:	2302      	movs	r3, #2
 800e986:	627b      	str	r3, [r7, #36]	@ 0x24
 800e988:	e029      	b.n	800e9de <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a2d      	ldr	r2, [pc, #180]	@ (800ea44 <_txe_byte_allocate+0xd8>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d002      	beq.n	800e99a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800e994:	2302      	movs	r3, #2
 800e996:	627b      	str	r3, [r7, #36]	@ 0x24
 800e998:	e021      	b.n	800e9de <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d102      	bne.n	800e9a6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800e9a0:	2303      	movs	r3, #3
 800e9a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9a4:	e01b      	b.n	800e9de <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d102      	bne.n	800e9b2 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800e9ac:	2305      	movs	r3, #5
 800e9ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9b0:	e015      	b.n	800e9de <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	69db      	ldr	r3, [r3, #28]
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d902      	bls.n	800e9c2 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800e9bc:	2305      	movs	r3, #5
 800e9be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9c0:	e00d      	b.n	800e9de <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00a      	beq.n	800e9de <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e9c8:	f3ef 8305 	mrs	r3, IPSR
 800e9cc:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800e9ce:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800ea48 <_txe_byte_allocate+0xdc>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d001      	beq.n	800e9de <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800e9da:	2304      	movs	r3, #4
 800e9dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800e9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d108      	bne.n	800e9f6 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e9e4:	4b19      	ldr	r3, [pc, #100]	@ (800ea4c <_txe_byte_allocate+0xe0>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800e9ea:	6a3b      	ldr	r3, [r7, #32]
 800e9ec:	4a18      	ldr	r2, [pc, #96]	@ (800ea50 <_txe_byte_allocate+0xe4>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d101      	bne.n	800e9f6 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800e9f2:	2313      	movs	r3, #19
 800e9f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800e9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d114      	bne.n	800ea26 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e9fc:	f3ef 8305 	mrs	r3, IPSR
 800ea00:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ea02:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ea04:	4b10      	ldr	r3, [pc, #64]	@ (800ea48 <_txe_byte_allocate+0xdc>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00b      	beq.n	800ea26 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ea0e:	f3ef 8305 	mrs	r3, IPSR
 800ea12:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ea14:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ea16:	4b0c      	ldr	r3, [pc, #48]	@ (800ea48 <_txe_byte_allocate+0xdc>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ea20:	d201      	bcs.n	800ea26 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ea22:	2313      	movs	r3, #19
 800ea24:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d106      	bne.n	800ea3a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	68b9      	ldr	r1, [r7, #8]
 800ea32:	68f8      	ldr	r0, [r7, #12]
 800ea34:	f7fd ff8e 	bl	800c954 <_tx_byte_allocate>
 800ea38:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3728      	adds	r7, #40	@ 0x28
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	42595445 	.word	0x42595445
 800ea48:	20000010 	.word	0x20000010
 800ea4c:	20085280 	.word	0x20085280
 800ea50:	200853c8 	.word	0x200853c8

0800ea54 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b092      	sub	sp, #72	@ 0x48
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
 800ea60:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ea62:	2300      	movs	r3, #0
 800ea64:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d102      	bne.n	800ea72 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea70:	e075      	b.n	800eb5e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800ea72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea74:	2b34      	cmp	r3, #52	@ 0x34
 800ea76:	d002      	beq.n	800ea7e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800ea78:	2302      	movs	r3, #2
 800ea7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea7c:	e06f      	b.n	800eb5e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ea82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ea84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ea86:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea88:	b672      	cpsid	i
    return(int_posture);
 800ea8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ea8c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ea8e:	4b3b      	ldr	r3, [pc, #236]	@ (800eb7c <_txe_byte_pool_create+0x128>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	3301      	adds	r3, #1
 800ea94:	4a39      	ldr	r2, [pc, #228]	@ (800eb7c <_txe_byte_pool_create+0x128>)
 800ea96:	6013      	str	r3, [r2, #0]
 800ea98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea9a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9e:	f383 8810 	msr	PRIMASK, r3
}
 800eaa2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800eaa4:	4b36      	ldr	r3, [pc, #216]	@ (800eb80 <_txe_byte_pool_create+0x12c>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800eaaa:	2300      	movs	r3, #0
 800eaac:	643b      	str	r3, [r7, #64]	@ 0x40
 800eaae:	e009      	b.n	800eac4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d00b      	beq.n	800ead0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800eab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eabc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800eabe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eac0:	3301      	adds	r3, #1
 800eac2:	643b      	str	r3, [r7, #64]	@ 0x40
 800eac4:	4b2f      	ldr	r3, [pc, #188]	@ (800eb84 <_txe_byte_pool_create+0x130>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d3f0      	bcc.n	800eab0 <_txe_byte_pool_create+0x5c>
 800eace:	e000      	b.n	800ead2 <_txe_byte_pool_create+0x7e>
                break;
 800ead0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ead2:	f3ef 8310 	mrs	r3, PRIMASK
 800ead6:	623b      	str	r3, [r7, #32]
    return(posture);
 800ead8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800eada:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eadc:	b672      	cpsid	i
    return(int_posture);
 800eade:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800eae0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800eae2:	4b26      	ldr	r3, [pc, #152]	@ (800eb7c <_txe_byte_pool_create+0x128>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	3b01      	subs	r3, #1
 800eae8:	4a24      	ldr	r2, [pc, #144]	@ (800eb7c <_txe_byte_pool_create+0x128>)
 800eaea:	6013      	str	r3, [r2, #0]
 800eaec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaee:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf2:	f383 8810 	msr	PRIMASK, r3
}
 800eaf6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800eaf8:	f7ff fa22 	bl	800df40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d102      	bne.n	800eb0a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800eb04:	2302      	movs	r3, #2
 800eb06:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb08:	e029      	b.n	800eb5e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d102      	bne.n	800eb16 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800eb10:	2303      	movs	r3, #3
 800eb12:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb14:	e023      	b.n	800eb5e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	2b63      	cmp	r3, #99	@ 0x63
 800eb1a:	d802      	bhi.n	800eb22 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800eb1c:	2305      	movs	r3, #5
 800eb1e:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb20:	e01d      	b.n	800eb5e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800eb22:	4b19      	ldr	r3, [pc, #100]	@ (800eb88 <_txe_byte_pool_create+0x134>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800eb28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb2a:	4a18      	ldr	r2, [pc, #96]	@ (800eb8c <_txe_byte_pool_create+0x138>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d101      	bne.n	800eb34 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800eb30:	2313      	movs	r3, #19
 800eb32:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eb34:	f3ef 8305 	mrs	r3, IPSR
 800eb38:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800eb3a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800eb3c:	4b14      	ldr	r3, [pc, #80]	@ (800eb90 <_txe_byte_pool_create+0x13c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4313      	orrs	r3, r2
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00b      	beq.n	800eb5e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eb46:	f3ef 8305 	mrs	r3, IPSR
 800eb4a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800eb4c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800eb4e:	4b10      	ldr	r3, [pc, #64]	@ (800eb90 <_txe_byte_pool_create+0x13c>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	4313      	orrs	r3, r2
 800eb54:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800eb58:	d201      	bcs.n	800eb5e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800eb5a:	2313      	movs	r3, #19
 800eb5c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800eb5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d106      	bne.n	800eb72 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	68b9      	ldr	r1, [r7, #8]
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f7fe f834 	bl	800cbd8 <_tx_byte_pool_create>
 800eb70:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800eb72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3748      	adds	r7, #72	@ 0x48
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	20085318 	.word	0x20085318
 800eb80:	20085270 	.word	0x20085270
 800eb84:	20085274 	.word	0x20085274
 800eb88:	20085280 	.word	0x20085280
 800eb8c:	200853c8 	.word	0x200853c8
 800eb90:	20000010 	.word	0x20000010

0800eb94 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b094      	sub	sp, #80	@ 0x50
 800eb98:	af02      	add	r7, sp, #8
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
 800eba0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800eba2:	2300      	movs	r3, #0
 800eba4:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d102      	bne.n	800ebb2 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ebac:	2309      	movs	r3, #9
 800ebae:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebb0:	e083      	b.n	800ecba <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800ebb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb4:	2b38      	cmp	r3, #56	@ 0x38
 800ebb6:	d002      	beq.n	800ebbe <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ebb8:	2309      	movs	r3, #9
 800ebba:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebbc:	e07d      	b.n	800ecba <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ebbe:	f3ef 8310 	mrs	r3, PRIMASK
 800ebc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ebc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ebc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ebc8:	b672      	cpsid	i
    return(int_posture);
 800ebca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ebcc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ebce:	4b43      	ldr	r3, [pc, #268]	@ (800ecdc <_txe_queue_create+0x148>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	4a41      	ldr	r2, [pc, #260]	@ (800ecdc <_txe_queue_create+0x148>)
 800ebd6:	6013      	str	r3, [r2, #0]
 800ebd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebda:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebde:	f383 8810 	msr	PRIMASK, r3
}
 800ebe2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800ebe4:	4b3e      	ldr	r3, [pc, #248]	@ (800ece0 <_txe_queue_create+0x14c>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800ebea:	2300      	movs	r3, #0
 800ebec:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebee:	e009      	b.n	800ec04 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d00b      	beq.n	800ec10 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800ebf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800ebfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec00:	3301      	adds	r3, #1
 800ec02:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec04:	4b37      	ldr	r3, [pc, #220]	@ (800ece4 <_txe_queue_create+0x150>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d3f0      	bcc.n	800ebf0 <_txe_queue_create+0x5c>
 800ec0e:	e000      	b.n	800ec12 <_txe_queue_create+0x7e>
                break;
 800ec10:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec12:	f3ef 8310 	mrs	r3, PRIMASK
 800ec16:	623b      	str	r3, [r7, #32]
    return(posture);
 800ec18:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ec1a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec1c:	b672      	cpsid	i
    return(int_posture);
 800ec1e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800ec20:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ec22:	4b2e      	ldr	r3, [pc, #184]	@ (800ecdc <_txe_queue_create+0x148>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3b01      	subs	r3, #1
 800ec28:	4a2c      	ldr	r2, [pc, #176]	@ (800ecdc <_txe_queue_create+0x148>)
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec2e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec32:	f383 8810 	msr	PRIMASK, r3
}
 800ec36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ec38:	f7ff f982 	bl	800df40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d102      	bne.n	800ec4a <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800ec44:	2309      	movs	r3, #9
 800ec46:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec48:	e037      	b.n	800ecba <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800ec50:	2303      	movs	r3, #3
 800ec52:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec54:	e031      	b.n	800ecba <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d102      	bne.n	800ec62 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800ec5c:	2305      	movs	r3, #5
 800ec5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec60:	e02b      	b.n	800ecba <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2b10      	cmp	r3, #16
 800ec66:	d902      	bls.n	800ec6e <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800ec68:	2305      	movs	r3, #5
 800ec6a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec6c:	e025      	b.n	800ecba <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800ec6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec70:	089b      	lsrs	r3, r3, #2
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d902      	bls.n	800ec7e <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800ec78:	2305      	movs	r3, #5
 800ec7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec7c:	e01d      	b.n	800ecba <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ec7e:	4b1a      	ldr	r3, [pc, #104]	@ (800ece8 <_txe_queue_create+0x154>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ec84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec86:	4a19      	ldr	r2, [pc, #100]	@ (800ecec <_txe_queue_create+0x158>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d101      	bne.n	800ec90 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ec8c:	2313      	movs	r3, #19
 800ec8e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ec90:	f3ef 8305 	mrs	r3, IPSR
 800ec94:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ec96:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ec98:	4b15      	ldr	r3, [pc, #84]	@ (800ecf0 <_txe_queue_create+0x15c>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d00b      	beq.n	800ecba <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eca2:	f3ef 8305 	mrs	r3, IPSR
 800eca6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800eca8:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ecaa:	4b11      	ldr	r3, [pc, #68]	@ (800ecf0 <_txe_queue_create+0x15c>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ecb4:	d201      	bcs.n	800ecba <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ecb6:	2313      	movs	r3, #19
 800ecb8:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ecba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d108      	bne.n	800ecd2 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800ecc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	68b9      	ldr	r1, [r7, #8]
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f7fe fa1a 	bl	800d104 <_tx_queue_create>
 800ecd0:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800ecd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3748      	adds	r7, #72	@ 0x48
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	20085318 	.word	0x20085318
 800ece0:	20085250 	.word	0x20085250
 800ece4:	20085254 	.word	0x20085254
 800ece8:	20085280 	.word	0x20085280
 800ecec:	200853c8 	.word	0x200853c8
 800ecf0:	20000010 	.word	0x20000010

0800ecf4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b088      	sub	sp, #32
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ed00:	2300      	movs	r3, #0
 800ed02:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d102      	bne.n	800ed10 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ed0a:	2309      	movs	r3, #9
 800ed0c:	61fb      	str	r3, [r7, #28]
 800ed0e:	e025      	b.n	800ed5c <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4a18      	ldr	r2, [pc, #96]	@ (800ed78 <_txe_queue_receive+0x84>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d002      	beq.n	800ed20 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ed1a:	2309      	movs	r3, #9
 800ed1c:	61fb      	str	r3, [r7, #28]
 800ed1e:	e01d      	b.n	800ed5c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d102      	bne.n	800ed2c <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ed26:	2303      	movs	r3, #3
 800ed28:	61fb      	str	r3, [r7, #28]
 800ed2a:	e017      	b.n	800ed5c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d014      	beq.n	800ed5c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ed32:	f3ef 8305 	mrs	r3, IPSR
 800ed36:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ed38:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ed3a:	4b10      	ldr	r3, [pc, #64]	@ (800ed7c <_txe_queue_receive+0x88>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ed44:	2304      	movs	r3, #4
 800ed46:	61fb      	str	r3, [r7, #28]
 800ed48:	e008      	b.n	800ed5c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ed4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed80 <_txe_queue_receive+0x8c>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	4a0c      	ldr	r2, [pc, #48]	@ (800ed84 <_txe_queue_receive+0x90>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d101      	bne.n	800ed5c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ed58:	2304      	movs	r3, #4
 800ed5a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d105      	bne.n	800ed6e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	68b9      	ldr	r1, [r7, #8]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f7fe fa40 	bl	800d1ec <_tx_queue_receive>
 800ed6c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ed6e:	69fb      	ldr	r3, [r7, #28]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3720      	adds	r7, #32
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	51554555 	.word	0x51554555
 800ed7c:	20000010 	.word	0x20000010
 800ed80:	20085280 	.word	0x20085280
 800ed84:	200853c8 	.word	0x200853c8

0800ed88 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ed94:	2300      	movs	r3, #0
 800ed96:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d102      	bne.n	800eda4 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ed9e:	2309      	movs	r3, #9
 800eda0:	61fb      	str	r3, [r7, #28]
 800eda2:	e025      	b.n	800edf0 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a18      	ldr	r2, [pc, #96]	@ (800ee0c <_txe_queue_send+0x84>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d002      	beq.n	800edb4 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800edae:	2309      	movs	r3, #9
 800edb0:	61fb      	str	r3, [r7, #28]
 800edb2:	e01d      	b.n	800edf0 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d102      	bne.n	800edc0 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800edba:	2303      	movs	r3, #3
 800edbc:	61fb      	str	r3, [r7, #28]
 800edbe:	e017      	b.n	800edf0 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d014      	beq.n	800edf0 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800edc6:	f3ef 8305 	mrs	r3, IPSR
 800edca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800edcc:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800edce:	4b10      	ldr	r3, [pc, #64]	@ (800ee10 <_txe_queue_send+0x88>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4313      	orrs	r3, r2
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d002      	beq.n	800edde <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800edd8:	2304      	movs	r3, #4
 800edda:	61fb      	str	r3, [r7, #28]
 800eddc:	e008      	b.n	800edf0 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800edde:	4b0d      	ldr	r3, [pc, #52]	@ (800ee14 <_txe_queue_send+0x8c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	4a0c      	ldr	r2, [pc, #48]	@ (800ee18 <_txe_queue_send+0x90>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d101      	bne.n	800edf0 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800edec:	2304      	movs	r3, #4
 800edee:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d105      	bne.n	800ee02 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	68b9      	ldr	r1, [r7, #8]
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f7fe fbbe 	bl	800d57c <_tx_queue_send>
 800ee00:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ee02:	69fb      	ldr	r3, [r7, #28]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3720      	adds	r7, #32
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	51554555 	.word	0x51554555
 800ee10:	20000010 	.word	0x20000010
 800ee14:	20085280 	.word	0x20085280
 800ee18:	200853c8 	.word	0x200853c8

0800ee1c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b092      	sub	sp, #72	@ 0x48
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
 800ee28:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d102      	bne.n	800ee3a <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ee34:	230c      	movs	r3, #12
 800ee36:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee38:	e054      	b.n	800eee4 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2b1c      	cmp	r3, #28
 800ee3e:	d002      	beq.n	800ee46 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ee40:	230c      	movs	r3, #12
 800ee42:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee44:	e04e      	b.n	800eee4 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee46:	f3ef 8310 	mrs	r3, PRIMASK
 800ee4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ee4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ee4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ee50:	b672      	cpsid	i
    return(int_posture);
 800ee52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ee54:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ee56:	4b36      	ldr	r3, [pc, #216]	@ (800ef30 <_txe_semaphore_create+0x114>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	4a34      	ldr	r2, [pc, #208]	@ (800ef30 <_txe_semaphore_create+0x114>)
 800ee5e:	6013      	str	r3, [r2, #0]
 800ee60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee62:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee66:	f383 8810 	msr	PRIMASK, r3
}
 800ee6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800ee6c:	4b31      	ldr	r3, [pc, #196]	@ (800ef34 <_txe_semaphore_create+0x118>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800ee72:	2300      	movs	r3, #0
 800ee74:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee76:	e009      	b.n	800ee8c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d00b      	beq.n	800ee98 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800ee80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee82:	695b      	ldr	r3, [r3, #20]
 800ee84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800ee86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee88:	3301      	adds	r3, #1
 800ee8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee8c:	4b2a      	ldr	r3, [pc, #168]	@ (800ef38 <_txe_semaphore_create+0x11c>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d3f0      	bcc.n	800ee78 <_txe_semaphore_create+0x5c>
 800ee96:	e000      	b.n	800ee9a <_txe_semaphore_create+0x7e>
                break;
 800ee98:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ee9e:	623b      	str	r3, [r7, #32]
    return(posture);
 800eea0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800eea2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eea4:	b672      	cpsid	i
    return(int_posture);
 800eea6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800eea8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800eeaa:	4b21      	ldr	r3, [pc, #132]	@ (800ef30 <_txe_semaphore_create+0x114>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	4a1f      	ldr	r2, [pc, #124]	@ (800ef30 <_txe_semaphore_create+0x114>)
 800eeb2:	6013      	str	r3, [r2, #0]
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	f383 8810 	msr	PRIMASK, r3
}
 800eebe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800eec0:	f7ff f83e 	bl	800df40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d102      	bne.n	800eed2 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800eecc:	230c      	movs	r3, #12
 800eece:	647b      	str	r3, [r7, #68]	@ 0x44
 800eed0:	e008      	b.n	800eee4 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800eed2:	4b1a      	ldr	r3, [pc, #104]	@ (800ef3c <_txe_semaphore_create+0x120>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800eed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeda:	4a19      	ldr	r2, [pc, #100]	@ (800ef40 <_txe_semaphore_create+0x124>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d101      	bne.n	800eee4 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800eee0:	2313      	movs	r3, #19
 800eee2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800eee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d114      	bne.n	800ef14 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eeea:	f3ef 8305 	mrs	r3, IPSR
 800eeee:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800eef0:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800eef2:	4b14      	ldr	r3, [pc, #80]	@ (800ef44 <_txe_semaphore_create+0x128>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00b      	beq.n	800ef14 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eefc:	f3ef 8305 	mrs	r3, IPSR
 800ef00:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ef02:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ef04:	4b0f      	ldr	r3, [pc, #60]	@ (800ef44 <_txe_semaphore_create+0x128>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ef0e:	d201      	bcs.n	800ef14 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ef10:	2313      	movs	r3, #19
 800ef12:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ef14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d105      	bne.n	800ef26 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	68b9      	ldr	r1, [r7, #8]
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f7fe fcd4 	bl	800d8cc <_tx_semaphore_create>
 800ef24:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800ef26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3748      	adds	r7, #72	@ 0x48
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20085318 	.word	0x20085318
 800ef34:	20085248 	.word	0x20085248
 800ef38:	2008524c 	.word	0x2008524c
 800ef3c:	20085280 	.word	0x20085280
 800ef40:	200853c8 	.word	0x200853c8
 800ef44:	20000010 	.word	0x20000010

0800ef48 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ef52:	2300      	movs	r3, #0
 800ef54:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ef5c:	230c      	movs	r3, #12
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	e01f      	b.n	800efa2 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a15      	ldr	r2, [pc, #84]	@ (800efbc <_txe_semaphore_get+0x74>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d002      	beq.n	800ef72 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ef6c:	230c      	movs	r3, #12
 800ef6e:	617b      	str	r3, [r7, #20]
 800ef70:	e017      	b.n	800efa2 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d014      	beq.n	800efa2 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ef78:	f3ef 8305 	mrs	r3, IPSR
 800ef7c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ef7e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ef80:	4b0f      	ldr	r3, [pc, #60]	@ (800efc0 <_txe_semaphore_get+0x78>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4313      	orrs	r3, r2
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d002      	beq.n	800ef90 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ef8a:	2304      	movs	r3, #4
 800ef8c:	617b      	str	r3, [r7, #20]
 800ef8e:	e008      	b.n	800efa2 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ef90:	4b0c      	ldr	r3, [pc, #48]	@ (800efc4 <_txe_semaphore_get+0x7c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	4a0b      	ldr	r2, [pc, #44]	@ (800efc8 <_txe_semaphore_get+0x80>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d101      	bne.n	800efa2 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ef9e:	2304      	movs	r3, #4
 800efa0:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d104      	bne.n	800efb2 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7fe fce0 	bl	800d970 <_tx_semaphore_get>
 800efb0:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800efb2:	697b      	ldr	r3, [r7, #20]
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3718      	adds	r7, #24
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	53454d41 	.word	0x53454d41
 800efc0:	20000010 	.word	0x20000010
 800efc4:	20085280 	.word	0x20085280
 800efc8:	200853c8 	.word	0x200853c8

0800efcc <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d102      	bne.n	800efe0 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800efda:	230c      	movs	r3, #12
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	e00b      	b.n	800eff8 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a07      	ldr	r2, [pc, #28]	@ (800f004 <_txe_semaphore_put+0x38>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d002      	beq.n	800eff0 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800efea:	230c      	movs	r3, #12
 800efec:	60fb      	str	r3, [r7, #12]
 800efee:	e003      	b.n	800eff8 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7fe fd4f 	bl	800da94 <_tx_semaphore_put>
 800eff6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800eff8:	68fb      	ldr	r3, [r7, #12]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	53454d41 	.word	0x53454d41

0800f008 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b09a      	sub	sp, #104	@ 0x68
 800f00c:	af06      	add	r7, sp, #24
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800f016:	2300      	movs	r3, #0
 800f018:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d102      	bne.n	800f026 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f020:	230e      	movs	r3, #14
 800f022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f024:	e0bb      	b.n	800f19e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800f026:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f028:	2bb0      	cmp	r3, #176	@ 0xb0
 800f02a:	d002      	beq.n	800f032 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800f02c:	230e      	movs	r3, #14
 800f02e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f030:	e0b5      	b.n	800f19e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f032:	f3ef 8310 	mrs	r3, PRIMASK
 800f036:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800f038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800f03a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800f03c:	b672      	cpsid	i
    return(int_posture);
 800f03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800f040:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800f042:	4b64      	ldr	r3, [pc, #400]	@ (800f1d4 <_txe_thread_create+0x1cc>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	3301      	adds	r3, #1
 800f048:	4a62      	ldr	r2, [pc, #392]	@ (800f1d4 <_txe_thread_create+0x1cc>)
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f04e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f052:	f383 8810 	msr	PRIMASK, r3
}
 800f056:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800f058:	2300      	movs	r3, #0
 800f05a:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800f05c:	4b5e      	ldr	r3, [pc, #376]	@ (800f1d8 <_txe_thread_create+0x1d0>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800f062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f064:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800f066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f068:	3b01      	subs	r3, #1
 800f06a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f06c:	4413      	add	r3, r2
 800f06e:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800f070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f072:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800f074:	2300      	movs	r3, #0
 800f076:	647b      	str	r3, [r7, #68]	@ 0x44
 800f078:	e02b      	b.n	800f0d2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800f07a:	68fa      	ldr	r2, [r7, #12]
 800f07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f07e:	429a      	cmp	r2, r3
 800f080:	d101      	bne.n	800f086 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800f082:	2301      	movs	r3, #1
 800f084:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800f086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d028      	beq.n	800f0de <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800f08c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f092:	429a      	cmp	r2, r3
 800f094:	d308      	bcc.n	800f0a8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800f096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d203      	bcs.n	800f0a8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800f0a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d308      	bcc.n	800f0c4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800f0b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d203      	bcs.n	800f0c4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800f0c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f0ca:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800f0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0d2:	4b42      	ldr	r3, [pc, #264]	@ (800f1dc <_txe_thread_create+0x1d4>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d3ce      	bcc.n	800f07a <_txe_thread_create+0x72>
 800f0dc:	e000      	b.n	800f0e0 <_txe_thread_create+0xd8>
                break;
 800f0de:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800f0e4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f0e6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f0e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f0ea:	b672      	cpsid	i
    return(int_posture);
 800f0ec:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800f0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800f0f0:	4b38      	ldr	r3, [pc, #224]	@ (800f1d4 <_txe_thread_create+0x1cc>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	3b01      	subs	r3, #1
 800f0f6:	4a37      	ldr	r2, [pc, #220]	@ (800f1d4 <_txe_thread_create+0x1cc>)
 800f0f8:	6013      	str	r3, [r2, #0]
 800f0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f0fe:	6a3b      	ldr	r3, [r7, #32]
 800f100:	f383 8810 	msr	PRIMASK, r3
}
 800f104:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f106:	f7fe ff1b 	bl	800df40 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f10e:	429a      	cmp	r2, r3
 800f110:	d102      	bne.n	800f118 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800f112:	230e      	movs	r3, #14
 800f114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f116:	e042      	b.n	800f19e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800f118:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d102      	bne.n	800f124 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800f11e:	2303      	movs	r3, #3
 800f120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f122:	e03c      	b.n	800f19e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d102      	bne.n	800f130 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800f12a:	2303      	movs	r3, #3
 800f12c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f12e:	e036      	b.n	800f19e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800f130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f132:	2bc7      	cmp	r3, #199	@ 0xc7
 800f134:	d802      	bhi.n	800f13c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800f136:	2305      	movs	r3, #5
 800f138:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f13a:	e030      	b.n	800f19e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800f13c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f13e:	2b1f      	cmp	r3, #31
 800f140:	d902      	bls.n	800f148 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800f142:	230f      	movs	r3, #15
 800f144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f146:	e02a      	b.n	800f19e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800f148:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f14a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d902      	bls.n	800f156 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800f150:	2318      	movs	r3, #24
 800f152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f154:	e023      	b.n	800f19e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800f156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d902      	bls.n	800f162 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800f15c:	2310      	movs	r3, #16
 800f15e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f160:	e01d      	b.n	800f19e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800f162:	4b1f      	ldr	r3, [pc, #124]	@ (800f1e0 <_txe_thread_create+0x1d8>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800f168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f16a:	4a1e      	ldr	r2, [pc, #120]	@ (800f1e4 <_txe_thread_create+0x1dc>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d101      	bne.n	800f174 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800f170:	2313      	movs	r3, #19
 800f172:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f174:	f3ef 8305 	mrs	r3, IPSR
 800f178:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f17a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800f17c:	4b1a      	ldr	r3, [pc, #104]	@ (800f1e8 <_txe_thread_create+0x1e0>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4313      	orrs	r3, r2
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00b      	beq.n	800f19e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f186:	f3ef 8305 	mrs	r3, IPSR
 800f18a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f18c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800f18e:	4b16      	ldr	r3, [pc, #88]	@ (800f1e8 <_txe_thread_create+0x1e0>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	4313      	orrs	r3, r2
 800f194:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800f198:	d201      	bcs.n	800f19e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800f19a:	2313      	movs	r3, #19
 800f19c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800f19e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d112      	bne.n	800f1ca <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800f1a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f1a6:	9305      	str	r3, [sp, #20]
 800f1a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f1aa:	9304      	str	r3, [sp, #16]
 800f1ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1ae:	9303      	str	r3, [sp, #12]
 800f1b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1b2:	9302      	str	r3, [sp, #8]
 800f1b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1b6:	9301      	str	r3, [sp, #4]
 800f1b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f1ba:	9300      	str	r3, [sp, #0]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	687a      	ldr	r2, [r7, #4]
 800f1c0:	68b9      	ldr	r1, [r7, #8]
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	f7fe fcbe 	bl	800db44 <_tx_thread_create>
 800f1c8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800f1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3750      	adds	r7, #80	@ 0x50
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	20085318 	.word	0x20085318
 800f1d8:	20085288 	.word	0x20085288
 800f1dc:	2008528c 	.word	0x2008528c
 800f1e0:	20085280 	.word	0x20085280
 800f1e4:	200853c8 	.word	0x200853c8
 800f1e8:	20000010 	.word	0x20000010

0800f1ec <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800f1f0:	f003 fc38 	bl	8012a64 <touchgfx_components_init>
    touchgfx_init();
 800f1f4:	f003 fc06 	bl	8012a04 <touchgfx_init>
}
 800f1f8:	bf00      	nop
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID* memory_ptr)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b08c      	sub	sp, #48	@ 0x30
 800f200:	af08      	add	r7, sp, #32
 800f202:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 800f204:	2300      	movs	r3, #0
 800f206:	60fb      	str	r3, [r7, #12]
    CHAR* pointer = 0;
 800f208:	2300      	movs	r3, #0
 800f20a:	60bb      	str	r3, [r7, #8]

    /* Allocate the stack for TouchGFX Thread.  */
    if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID**) &pointer,
 800f20c:	f107 0108 	add.w	r1, r7, #8
 800f210:	2300      	movs	r3, #0
 800f212:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7ff fba8 	bl	800e96c <_txe_byte_allocate>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d002      	beq.n	800f228 <MX_TouchGFX_Init+0x2c>
                         TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
    {
        ret = TX_POOL_ERROR;
 800f222:	2302      	movs	r3, #2
 800f224:	60fb      	str	r3, [r7, #12]
 800f226:	e019      	b.n	800f25c <MX_TouchGFX_Init+0x60>
    }

    /* Create TouchGFX Thread */
    else if (tx_thread_create(&TouchGFXThread, (CHAR*)"TouchGFX", TouchGFX_Task, 0,
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	22b0      	movs	r2, #176	@ 0xb0
 800f22c:	9206      	str	r2, [sp, #24]
 800f22e:	2201      	movs	r2, #1
 800f230:	9205      	str	r2, [sp, #20]
 800f232:	2200      	movs	r2, #0
 800f234:	9204      	str	r2, [sp, #16]
 800f236:	2205      	movs	r2, #5
 800f238:	9203      	str	r2, [sp, #12]
 800f23a:	2205      	movs	r2, #5
 800f23c:	9202      	str	r2, [sp, #8]
 800f23e:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 800f242:	9201      	str	r2, [sp, #4]
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	2300      	movs	r3, #0
 800f248:	4a07      	ldr	r2, [pc, #28]	@ (800f268 <MX_TouchGFX_Init+0x6c>)
 800f24a:	4908      	ldr	r1, [pc, #32]	@ (800f26c <MX_TouchGFX_Init+0x70>)
 800f24c:	4808      	ldr	r0, [pc, #32]	@ (800f270 <MX_TouchGFX_Init+0x74>)
 800f24e:	f7ff fedb 	bl	800f008 <_txe_thread_create>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d001      	beq.n	800f25c <MX_TouchGFX_Init+0x60>
                              pointer, TOUCHGFX_STACK_SIZE,
                              5, 5,
                              TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
    {
        ret = TX_THREAD_ERROR;
 800f258:	230e      	movs	r3, #14
 800f25a:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 800f25c:	68fb      	ldr	r3, [r7, #12]
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	0800f275 	.word	0x0800f275
 800f26c:	0802bea4 	.word	0x0802bea4
 800f270:	20085888 	.word	0x20085888

0800f274 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800f27c:	f003 fbf8 	bl	8012a70 <touchgfx_taskEntry>
}
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
    {
 800f290:	4a04      	ldr	r2, [pc, #16]	@ (800f2a4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	601a      	str	r2, [r3, #0]
    }
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4618      	mov	r0, r3
 800f29a:	370c      	adds	r7, #12
 800f29c:	46bd      	mov	sp, r7
 800f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a2:	4770      	bx	lr
 800f2a4:	0802cc5c 	.word	0x0802cc5c

0800f2a8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
    }
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7ff ffe9 	bl	800f288 <_ZN8touchgfx12FontProviderD1Ev>
 800f2b6:	2104      	movs	r1, #4
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f01b fd6a 	bl	802ad92 <_ZdlPvj>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f2d4:	887b      	ldrh	r3, [r7, #2]
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	d010      	beq.n	800f2fc <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	dc13      	bgt.n	800f306 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d005      	beq.n	800f2f2 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f2e6:	e00e      	b.n	800f306 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f2e8:	f001 feb2 	bl	8011050 <_ZN17TypedTextDatabase8getFontsEv>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	e00a      	b.n	800f308 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f2f2:	f001 fead 	bl	8011050 <_ZN17TypedTextDatabase8getFontsEv>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	e005      	b.n	800f308 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f2fc:	f001 fea8 	bl	8011050 <_ZN17TypedTextDatabase8getFontsEv>
 800f300:	4603      	mov	r3, r0
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	e000      	b.n	800f308 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f306:	2300      	movs	r3, #0
    }
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	4a05      	ldr	r2, [pc, #20]	@ (800f330 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4618      	mov	r0, r3
 800f322:	f7ff ffb1 	bl	800f288 <_ZN8touchgfx12FontProviderD1Ev>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	0802cc48 	.word	0x0802cc48

0800f334 <_ZN23ApplicationFontProviderD0Ev>:
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7ff ffe7 	bl	800f310 <_ZN23ApplicationFontProviderD1Ev>
 800f342:	2104      	movs	r1, #4
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f01b fd24 	bl	802ad92 <_ZdlPvj>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4618      	mov	r0, r3
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
    {
 800f35c:	4a04      	ldr	r2, [pc, #16]	@ (800f370 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	601a      	str	r2, [r3, #0]
    }
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4618      	mov	r0, r3
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr
 800f370:	0802cf18 	.word	0x0802cf18

0800f374 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
    }
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff ffe9 	bl	800f354 <_ZN8touchgfx4FontD1Ev>
 800f382:	2114      	movs	r1, #20
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f01b fd04 	bl	802ad92 <_ZdlPvj>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f394:	b590      	push	{r4, r7, lr}
 800f396:	b087      	sub	sp, #28
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	460b      	mov	r3, r1
 800f39e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f3a0:	887b      	ldrh	r3, [r7, #2]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d101      	bne.n	800f3aa <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	e010      	b.n	800f3cc <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	3308      	adds	r3, #8
 800f3b8:	681c      	ldr	r4, [r3, #0]
 800f3ba:	f107 030f 	add.w	r3, r7, #15
 800f3be:	f107 0210 	add.w	r2, r7, #16
 800f3c2:	8879      	ldrh	r1, [r7, #2]
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	47a0      	blx	r4
 800f3c8:	6178      	str	r0, [r7, #20]
        return glyph;
 800f3ca:	697b      	ldr	r3, [r7, #20]
    }
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	371c      	adds	r7, #28
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd90      	pop	{r4, r7, pc}

0800f3d4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	89db      	ldrh	r3, [r3, #14]
    }
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	8a1b      	ldrh	r3, [r3, #16]
    }
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	88db      	ldrh	r3, [r3, #6]
    }
 800f410:	4618      	mov	r0, r3
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	889b      	ldrh	r3, [r3, #4]
    }
 800f428:	4618      	mov	r0, r3
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	7a9b      	ldrb	r3, [r3, #10]
 800f440:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f444:	b2db      	uxtb	r3, r3
    }
 800f446:	4618      	mov	r0, r3
 800f448:	370c      	adds	r7, #12
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr

0800f452 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f452:	b480      	push	{r7}
 800f454:	b083      	sub	sp, #12
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	7a9b      	ldrb	r3, [r3, #10]
 800f45e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f462:	b2db      	uxtb	r3, r3
    }
 800f464:	4618      	mov	r0, r3
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
    {
        return false;
 800f478:	2300      	movs	r3, #0
    }
 800f47a:	4618      	mov	r0, r3
 800f47c:	370c      	adds	r7, #12
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800f486:	b480      	push	{r7}
 800f488:	b083      	sub	sp, #12
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f48e:	f04f 0300 	mov.w	r3, #0
 800f492:	ee07 3a90 	vmov	s15, r3
    }
 800f496:	eeb0 0a67 	vmov.f32	s0, s15
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	4a05      	ldr	r2, [pc, #20]	@ (800f4c4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	601a      	str	r2, [r3, #0]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7ff ff4d 	bl	800f354 <_ZN8touchgfx4FontD1Ev>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	0802d81c 	.word	0x0802d81c

0800f4c8 <_ZN8touchgfx9ConstFontD0Ev>:
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff ffe7 	bl	800f4a4 <_ZN8touchgfx9ConstFontD1Ev>
 800f4d6:	211c      	movs	r1, #28
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f01b fc5a 	bl	802ad92 <_ZdlPvj>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	4a05      	ldr	r2, [pc, #20]	@ (800f508 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	601a      	str	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7ff ffd3 	bl	800f4a4 <_ZN8touchgfx9ConstFontD1Ev>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4618      	mov	r0, r3
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	0802cc70 	.word	0x0802cc70

0800f50c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7ff ffe7 	bl	800f4e8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f51a:	212c      	movs	r1, #44	@ 0x2c
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f01b fc38 	bl	802ad92 <_ZdlPvj>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4618      	mov	r0, r3
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800f538:	4618      	mov	r0, r3
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800f550:	4618      	mov	r0, r3
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b08e      	sub	sp, #56	@ 0x38
 800f560:	af0a      	add	r7, sp, #40	@ 0x28
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	4611      	mov	r1, r2
 800f568:	461a      	mov	r2, r3
 800f56a:	460b      	mov	r3, r1
 800f56c:	80fb      	strh	r3, [r7, #6]
 800f56e:	4613      	mov	r3, r2
 800f570:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800f572:	68f8      	ldr	r0, [r7, #12]
 800f574:	88b9      	ldrh	r1, [r7, #4]
 800f576:	88fa      	ldrh	r2, [r7, #6]
 800f578:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f57c:	9308      	str	r3, [sp, #32]
 800f57e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f580:	9307      	str	r3, [sp, #28]
 800f582:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800f586:	9306      	str	r3, [sp, #24]
 800f588:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f58c:	9305      	str	r3, [sp, #20]
 800f58e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f592:	9304      	str	r3, [sp, #16]
 800f594:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f598:	9303      	str	r3, [sp, #12]
 800f59a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f59e:	9302      	str	r3, [sp, #8]
 800f5a0:	7f3b      	ldrb	r3, [r7, #28]
 800f5a2:	9301      	str	r3, [sp, #4]
 800f5a4:	8b3b      	ldrh	r3, [r7, #24]
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	68b9      	ldr	r1, [r7, #8]
 800f5ac:	f007 fb56 	bl	8016c5c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800f5b0:	4a09      	ldr	r2, [pc, #36]	@ (800f5d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5ba:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5c0:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5c6:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5cc:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	0802cc70 	.word	0x0802cc70

0800f5dc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	69db      	ldr	r3, [r3, #28]
 800f5ea:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	889b      	ldrh	r3, [r3, #4]
 800f5f0:	0adb      	lsrs	r3, r3, #11
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4413      	add	r3, r2
}
 800f602:	4618      	mov	r0, r3
 800f604:	3714      	adds	r7, #20
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f60e:	b480      	push	{r7}
 800f610:	b089      	sub	sp, #36	@ 0x24
 800f612:	af00      	add	r7, sp, #0
 800f614:	60f8      	str	r0, [r7, #12]
 800f616:	460b      	mov	r3, r1
 800f618:	607a      	str	r2, [r7, #4]
 800f61a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d003      	beq.n	800f62a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	7b1b      	ldrb	r3, [r3, #12]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f62a:	2300      	movs	r3, #0
 800f62c:	e031      	b.n	800f692 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6a1a      	ldr	r2, [r3, #32]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	7b5b      	ldrb	r3, [r3, #13]
 800f63a:	021b      	lsls	r3, r3, #8
 800f63c:	b21b      	sxth	r3, r3
 800f63e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f642:	b219      	sxth	r1, r3
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	7adb      	ldrb	r3, [r3, #11]
 800f648:	b21b      	sxth	r3, r3
 800f64a:	430b      	orrs	r3, r1
 800f64c:	b21b      	sxth	r3, r3
 800f64e:	b29b      	uxth	r3, r3
 800f650:	009b      	lsls	r3, r3, #2
 800f652:	4413      	add	r3, r2
 800f654:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	7b1b      	ldrb	r3, [r3, #12]
 800f65a:	837b      	strh	r3, [r7, #26]
 800f65c:	e013      	b.n	800f686 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	881b      	ldrh	r3, [r3, #0]
 800f662:	897a      	ldrh	r2, [r7, #10]
 800f664:	429a      	cmp	r2, r3
 800f666:	d103      	bne.n	800f670 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f66e:	e010      	b.n	800f692 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	881b      	ldrh	r3, [r3, #0]
 800f674:	897a      	ldrh	r2, [r7, #10]
 800f676:	429a      	cmp	r2, r3
 800f678:	d309      	bcc.n	800f68e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f67a:	8b7b      	ldrh	r3, [r7, #26]
 800f67c:	3b01      	subs	r3, #1
 800f67e:	837b      	strh	r3, [r7, #26]
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	3304      	adds	r3, #4
 800f684:	61fb      	str	r3, [r7, #28]
 800f686:	8b7b      	ldrh	r3, [r7, #26]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1e8      	bne.n	800f65e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800f68c:	e000      	b.n	800f690 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800f68e:	bf00      	nop
        }
    }
    return 0;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3724      	adds	r7, #36	@ 0x24
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
	...

0800f6a0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	4801      	ldr	r0, [pc, #4]	@ (800f6ac <__tcf_0+0xc>)
 800f6a6:	f7ff ff1f 	bl	800f4e8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	20085938 	.word	0x20085938

0800f6b0 <_Z23getFont_verdana_10_4bppv>:
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b08e      	sub	sp, #56	@ 0x38
 800f6b4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800f6b6:	4b20      	ldr	r3, [pc, #128]	@ (800f738 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f6b8:	e8d3 3faf 	lda	r3, [r3]
 800f6bc:	f003 0301 	and.w	r3, r3, #1
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	bf0c      	ite	eq
 800f6c4:	2301      	moveq	r3, #1
 800f6c6:	2300      	movne	r3, #0
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d030      	beq.n	800f730 <_Z23getFont_verdana_10_4bppv+0x80>
 800f6ce:	481a      	ldr	r0, [pc, #104]	@ (800f738 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f6d0:	f01b fb61 	bl	802ad96 <__cxa_guard_acquire>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	bf14      	ite	ne
 800f6da:	2301      	movne	r3, #1
 800f6dc:	2300      	moveq	r3, #0
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d025      	beq.n	800f730 <_Z23getFont_verdana_10_4bppv+0x80>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6f0:	233f      	movs	r3, #63	@ 0x3f
 800f6f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6f4:	4b11      	ldr	r3, [pc, #68]	@ (800f73c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800f6f6:	9308      	str	r3, [sp, #32]
 800f6f8:	4b11      	ldr	r3, [pc, #68]	@ (800f740 <_Z23getFont_verdana_10_4bppv+0x90>)
 800f6fa:	9307      	str	r3, [sp, #28]
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	9306      	str	r3, [sp, #24]
 800f700:	2300      	movs	r3, #0
 800f702:	9305      	str	r3, [sp, #20]
 800f704:	2301      	movs	r3, #1
 800f706:	9304      	str	r3, [sp, #16]
 800f708:	2304      	movs	r3, #4
 800f70a:	9303      	str	r3, [sp, #12]
 800f70c:	2300      	movs	r3, #0
 800f70e:	9302      	str	r3, [sp, #8]
 800f710:	2300      	movs	r3, #0
 800f712:	9301      	str	r3, [sp, #4]
 800f714:	230a      	movs	r3, #10
 800f716:	9300      	str	r3, [sp, #0]
 800f718:	230a      	movs	r3, #10
 800f71a:	2201      	movs	r2, #1
 800f71c:	4909      	ldr	r1, [pc, #36]	@ (800f744 <_Z23getFont_verdana_10_4bppv+0x94>)
 800f71e:	480a      	ldr	r0, [pc, #40]	@ (800f748 <_Z23getFont_verdana_10_4bppv+0x98>)
 800f720:	f7ff ff1c 	bl	800f55c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f724:	4809      	ldr	r0, [pc, #36]	@ (800f74c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800f726:	f01b fb7f 	bl	802ae28 <atexit>
 800f72a:	4803      	ldr	r0, [pc, #12]	@ (800f738 <_Z23getFont_verdana_10_4bppv+0x88>)
 800f72c:	f01b fb3f 	bl	802adae <__cxa_guard_release>
    return verdana_10_4bpp;
 800f730:	4b05      	ldr	r3, [pc, #20]	@ (800f748 <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800f732:	4618      	mov	r0, r3
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	20085964 	.word	0x20085964
 800f73c:	0802fdc4 	.word	0x0802fdc4
 800f740:	0802fdd0 	.word	0x0802fdd0
 800f744:	0802fd94 	.word	0x0802fd94
 800f748:	20085938 	.word	0x20085938
 800f74c:	0800f6a1 	.word	0x0800f6a1

0800f750 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f750:	b580      	push	{r7, lr}
 800f752:	af00      	add	r7, sp, #0
 800f754:	4801      	ldr	r0, [pc, #4]	@ (800f75c <__tcf_0+0xc>)
 800f756:	f7ff fec7 	bl	800f4e8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	20085968 	.word	0x20085968

0800f760 <_Z23getFont_verdana_20_4bppv>:
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08e      	sub	sp, #56	@ 0x38
 800f764:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800f766:	4b20      	ldr	r3, [pc, #128]	@ (800f7e8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f768:	e8d3 3faf 	lda	r3, [r3]
 800f76c:	f003 0301 	and.w	r3, r3, #1
 800f770:	2b00      	cmp	r3, #0
 800f772:	bf0c      	ite	eq
 800f774:	2301      	moveq	r3, #1
 800f776:	2300      	movne	r3, #0
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d030      	beq.n	800f7e0 <_Z23getFont_verdana_20_4bppv+0x80>
 800f77e:	481a      	ldr	r0, [pc, #104]	@ (800f7e8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f780:	f01b fb09 	bl	802ad96 <__cxa_guard_acquire>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	bf14      	ite	ne
 800f78a:	2301      	movne	r3, #1
 800f78c:	2300      	moveq	r3, #0
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	2b00      	cmp	r3, #0
 800f792:	d025      	beq.n	800f7e0 <_Z23getFont_verdana_20_4bppv+0x80>
 800f794:	2300      	movs	r3, #0
 800f796:	930c      	str	r3, [sp, #48]	@ 0x30
 800f798:	2300      	movs	r3, #0
 800f79a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f79c:	2300      	movs	r3, #0
 800f79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7a0:	233f      	movs	r3, #63	@ 0x3f
 800f7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7a4:	4b11      	ldr	r3, [pc, #68]	@ (800f7ec <_Z23getFont_verdana_20_4bppv+0x8c>)
 800f7a6:	9308      	str	r3, [sp, #32]
 800f7a8:	4b11      	ldr	r3, [pc, #68]	@ (800f7f0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800f7aa:	9307      	str	r3, [sp, #28]
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	9306      	str	r3, [sp, #24]
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	9305      	str	r3, [sp, #20]
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	9304      	str	r3, [sp, #16]
 800f7b8:	2304      	movs	r3, #4
 800f7ba:	9303      	str	r3, [sp, #12]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	9302      	str	r3, [sp, #8]
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	9301      	str	r3, [sp, #4]
 800f7c4:	2314      	movs	r3, #20
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	2314      	movs	r3, #20
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	4909      	ldr	r1, [pc, #36]	@ (800f7f4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800f7ce:	480a      	ldr	r0, [pc, #40]	@ (800f7f8 <_Z23getFont_verdana_20_4bppv+0x98>)
 800f7d0:	f7ff fec4 	bl	800f55c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f7d4:	4809      	ldr	r0, [pc, #36]	@ (800f7fc <_Z23getFont_verdana_20_4bppv+0x9c>)
 800f7d6:	f01b fb27 	bl	802ae28 <atexit>
 800f7da:	4803      	ldr	r0, [pc, #12]	@ (800f7e8 <_Z23getFont_verdana_20_4bppv+0x88>)
 800f7dc:	f01b fae7 	bl	802adae <__cxa_guard_release>
    return verdana_20_4bpp;
 800f7e0:	4b05      	ldr	r3, [pc, #20]	@ (800f7f8 <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	20085994 	.word	0x20085994
 800f7ec:	0802fdc8 	.word	0x0802fdc8
 800f7f0:	0802fdd4 	.word	0x0802fdd4
 800f7f4:	0802fda4 	.word	0x0802fda4
 800f7f8:	20085968 	.word	0x20085968
 800f7fc:	0800f751 	.word	0x0800f751

0800f800 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f800:	b580      	push	{r7, lr}
 800f802:	af00      	add	r7, sp, #0
 800f804:	4801      	ldr	r0, [pc, #4]	@ (800f80c <__tcf_0+0xc>)
 800f806:	f7ff fe6f 	bl	800f4e8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	20085998 	.word	0x20085998

0800f810 <_Z23getFont_verdana_40_4bppv>:
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b08e      	sub	sp, #56	@ 0x38
 800f814:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800f816:	4b20      	ldr	r3, [pc, #128]	@ (800f898 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f818:	e8d3 3faf 	lda	r3, [r3]
 800f81c:	f003 0301 	and.w	r3, r3, #1
 800f820:	2b00      	cmp	r3, #0
 800f822:	bf0c      	ite	eq
 800f824:	2301      	moveq	r3, #1
 800f826:	2300      	movne	r3, #0
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d030      	beq.n	800f890 <_Z23getFont_verdana_40_4bppv+0x80>
 800f82e:	481a      	ldr	r0, [pc, #104]	@ (800f898 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f830:	f01b fab1 	bl	802ad96 <__cxa_guard_acquire>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	bf14      	ite	ne
 800f83a:	2301      	movne	r3, #1
 800f83c:	2300      	moveq	r3, #0
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d025      	beq.n	800f890 <_Z23getFont_verdana_40_4bppv+0x80>
 800f844:	2300      	movs	r3, #0
 800f846:	930c      	str	r3, [sp, #48]	@ 0x30
 800f848:	2300      	movs	r3, #0
 800f84a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f84c:	2300      	movs	r3, #0
 800f84e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f850:	233f      	movs	r3, #63	@ 0x3f
 800f852:	9309      	str	r3, [sp, #36]	@ 0x24
 800f854:	4b11      	ldr	r3, [pc, #68]	@ (800f89c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800f856:	9308      	str	r3, [sp, #32]
 800f858:	4b11      	ldr	r3, [pc, #68]	@ (800f8a0 <_Z23getFont_verdana_40_4bppv+0x90>)
 800f85a:	9307      	str	r3, [sp, #28]
 800f85c:	2300      	movs	r3, #0
 800f85e:	9306      	str	r3, [sp, #24]
 800f860:	2300      	movs	r3, #0
 800f862:	9305      	str	r3, [sp, #20]
 800f864:	2301      	movs	r3, #1
 800f866:	9304      	str	r3, [sp, #16]
 800f868:	2304      	movs	r3, #4
 800f86a:	9303      	str	r3, [sp, #12]
 800f86c:	2300      	movs	r3, #0
 800f86e:	9302      	str	r3, [sp, #8]
 800f870:	2300      	movs	r3, #0
 800f872:	9301      	str	r3, [sp, #4]
 800f874:	2328      	movs	r3, #40	@ 0x28
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	2328      	movs	r3, #40	@ 0x28
 800f87a:	2201      	movs	r2, #1
 800f87c:	4909      	ldr	r1, [pc, #36]	@ (800f8a4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800f87e:	480a      	ldr	r0, [pc, #40]	@ (800f8a8 <_Z23getFont_verdana_40_4bppv+0x98>)
 800f880:	f7ff fe6c 	bl	800f55c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f884:	4809      	ldr	r0, [pc, #36]	@ (800f8ac <_Z23getFont_verdana_40_4bppv+0x9c>)
 800f886:	f01b facf 	bl	802ae28 <atexit>
 800f88a:	4803      	ldr	r0, [pc, #12]	@ (800f898 <_Z23getFont_verdana_40_4bppv+0x88>)
 800f88c:	f01b fa8f 	bl	802adae <__cxa_guard_release>
    return verdana_40_4bpp;
 800f890:	4b05      	ldr	r3, [pc, #20]	@ (800f8a8 <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800f892:	4618      	mov	r0, r3
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	200859c4 	.word	0x200859c4
 800f89c:	0802fdcc 	.word	0x0802fdcc
 800f8a0:	0802fdd8 	.word	0x0802fdd8
 800f8a4:	0802fdb4 	.word	0x0802fdb4
 800f8a8:	20085998 	.word	0x20085998
 800f8ac:	0800f801 	.word	0x0800f801

0800f8b0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f8b0:	b480      	push	{r7}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	370c      	adds	r7, #12
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f8d2:	bf00      	nop
 800f8d4:	370c      	adds	r7, #12
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr

0800f8de <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f8de:	b480      	push	{r7}
 800f8e0:	b083      	sub	sp, #12
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
 800f8e6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f8e8:	bf00      	nop
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f8fe:	bf00      	nop
 800f900:	370c      	adds	r7, #12
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f90a:	b480      	push	{r7}
 800f90c:	b083      	sub	sp, #12
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	460b      	mov	r3, r1
 800f914:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800f916:	bf00      	nop
 800f918:	370c      	adds	r7, #12
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr

0800f922 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f922:	b480      	push	{r7}
 800f924:	b083      	sub	sp, #12
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
    {
    }
 800f92a:	bf00      	nop
 800f92c:	370c      	adds	r7, #12
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr

0800f936 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f936:	b480      	push	{r7}
 800f938:	b083      	sub	sp, #12
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
    {
    }
 800f93e:	bf00      	nop
 800f940:	370c      	adds	r7, #12
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr
	...

0800f94c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
    {
 800f954:	4a04      	ldr	r2, [pc, #16]	@ (800f968 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	601a      	str	r2, [r3, #0]
    }
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4618      	mov	r0, r3
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr
 800f968:	0802cdf8 	.word	0x0802cdf8

0800f96c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
    }
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff ffe9 	bl	800f94c <_ZN8touchgfx15UIEventListenerD1Ev>
 800f97a:	2104      	movs	r1, #4
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f01b fa08 	bl	802ad92 <_ZdlPvj>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	4618      	mov	r0, r3
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
    {
    }
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800f9ca:	6810      	ldr	r0, [r2, #0]
 800f9cc:	6851      	ldr	r1, [r2, #4]
 800f9ce:	c303      	stmia	r3!, {r0, r1}
    }
 800f9d0:	bf00      	nop
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f006 f838 	bl	8015a5e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800f9ee:	bf00      	nop
 800f9f0:	3708      	adds	r7, #8
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
	...

0800f9f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
    {
 800fa00:	4a04      	ldr	r2, [pc, #16]	@ (800fa14 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	601a      	str	r2, [r3, #0]
    }
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	0802cde0 	.word	0x0802cde0

0800fa18 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
    }
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f7ff ffe9 	bl	800f9f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa26:	2104      	movs	r1, #4
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f01b f9b2 	bl	802ad92 <_ZdlPvj>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4618      	mov	r0, r3
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fa38:	b480      	push	{r7}
 800fa3a:	af00      	add	r7, sp, #0
    {
        return instance;
 800fa3c:	4b03      	ldr	r3, [pc, #12]	@ (800fa4c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
    }
 800fa40:	4618      	mov	r0, r3
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
 800fa4a:	bf00      	nop
 800fa4c:	2008745c 	.word	0x2008745c

0800fa50 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800fa58:	4a07      	ldr	r2, [pc, #28]	@ (800fa78 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	601a      	str	r2, [r3, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	605a      	str	r2, [r3, #4]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	721a      	strb	r2, [r3, #8]
    {
    }
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr
 800fa78:	0802cdbc 	.word	0x0802cdbc

0800fa7c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800fa7c:	b480      	push	{r7}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
    {
 800fa84:	4a04      	ldr	r2, [pc, #16]	@ (800fa98 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	601a      	str	r2, [r3, #0]
    }
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	0802cdbc 	.word	0x0802cdbc

0800fa9c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
    }
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f7ff ffe9 	bl	800fa7c <_ZN8touchgfx10TransitionD1Ev>
 800faaa:	210c      	movs	r1, #12
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f01b f970 	bl	802ad92 <_ZdlPvj>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4618      	mov	r0, r3
 800fab6:	3708      	adds	r7, #8
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
    {
    }
 800fac4:	bf00      	nop
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
    {
    }
 800fad8:	bf00      	nop
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
    {
    }
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800fb00:	f005 ff88 	bl	8015a14 <_ZN8touchgfx11Application11getInstanceEv>
 800fb04:	4603      	mov	r3, r0
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	323c      	adds	r2, #60	@ 0x3c
 800fb0a:	6812      	ldr	r2, [r2, #0]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	4790      	blx	r2
    }
 800fb10:	bf00      	nop
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	683a      	ldr	r2, [r7, #0]
 800fb26:	605a      	str	r2, [r3, #4]
    }
 800fb28:	bf00      	nop
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	4a05      	ldr	r2, [pc, #20]	@ (800fb54 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7ff ff01 	bl	800f94c <_ZN8touchgfx15UIEventListenerD1Ev>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	0802d760 	.word	0x0802d760

0800fb58 <_ZN8touchgfx11ApplicationD0Ev>:
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7ff ffe7 	bl	800fb34 <_ZN8touchgfx11ApplicationD1Ev>
 800fb66:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f01b f911 	bl	802ad92 <_ZdlPvj>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4618      	mov	r0, r3
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
	...

0800fb7c <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f006 f806 	bl	8015b98 <_ZN8touchgfx11ApplicationC1Ev>
 800fb8c:	4a09      	ldr	r2, [pc, #36]	@ (800fbb4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2200      	movs	r2, #0
 800fb96:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4a04      	ldr	r2, [pc, #16]	@ (800fbb8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fba6:	6013      	str	r3, [r2, #0]
    }
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	0802cd68 	.word	0x0802cd68
 800fbb8:	200874a8 	.word	0x200874a8

0800fbbc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 f804 	bl	800fbd2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fbca:	bf00      	nop
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00f      	beq.n	800fc04 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	330c      	adds	r3, #12
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4610      	mov	r0, r2
 800fbf8:	4798      	blx	r3
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d001      	beq.n	800fc04 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc00:	2301      	movs	r3, #1
 800fc02:	e000      	b.n	800fc06 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fc04:	2300      	movs	r3, #0
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00e      	beq.n	800fc28 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	3308      	adds	r3, #8
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800fc28:	bf00      	nop
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	683a      	ldr	r2, [r7, #0]
 800fc3e:	601a      	str	r2, [r3, #0]
    }
 800fc40:	bf00      	nop
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	4a05      	ldr	r2, [pc, #20]	@ (800fc6c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	601a      	str	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7ff ff69 	bl	800fb34 <_ZN8touchgfx11ApplicationD1Ev>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4618      	mov	r0, r3
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	0802cd68 	.word	0x0802cd68

0800fc70 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f7ff ffe7 	bl	800fc4c <_ZN8touchgfx14MVPApplicationD1Ev>
 800fc7e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f01b f885 	bl	802ad92 <_ZdlPvj>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
	...

0800fc94 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	4a08      	ldr	r2, [pc, #32]	@ (800fcc0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	601a      	str	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f000 fabd 	bl	8010228 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff ffcb 	bl	800fc4c <_ZN8touchgfx14MVPApplicationD1Ev>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	0802ccfc 	.word	0x0802ccfc

0800fcc4 <_ZN23FrontendApplicationBaseD0Ev>:
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f7ff ffe1 	bl	800fc94 <_ZN23FrontendApplicationBaseD1Ev>
 800fcd2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f01b f85b 	bl	802ad92 <_ZdlPvj>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4618      	mov	r0, r3
 800fce0:	3708      	adds	r7, #8
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b082      	sub	sp, #8
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 f874 	bl	800fddc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800fcf4:	bf00      	nop
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800fcfc:	b480      	push	{r7}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2201      	movs	r2, #1
 800fd08:	721a      	strb	r2, [r3, #8]
    }
 800fd0a:	bf00      	nop
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fd16:	b480      	push	{r7}
 800fd18:	b083      	sub	sp, #12
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
 800fd1e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	683a      	ldr	r2, [r7, #0]
 800fd24:	605a      	str	r2, [r3, #4]
    }
 800fd26:	bf00      	nop
 800fd28:	370c      	adds	r7, #12
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
	...

0800fd34 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7ff ff1a 	bl	800fb7c <_ZN8touchgfx14MVPApplicationC1Ev>
 800fd48:	4a0f      	ldr	r2, [pc, #60]	@ (800fd88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800fd54:	4618      	mov	r0, r3
 800fd56:	f000 f897 	bl	800fe88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	68ba      	ldr	r2, [r7, #8]
 800fd66:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fd6a:	f7ff fe65 	bl	800fa38 <_ZN8touchgfx3HAL11getInstanceEv>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	3208      	adds	r2, #8
 800fd74:	6812      	ldr	r2, [r2, #0]
 800fd76:	2100      	movs	r1, #0
 800fd78:	4618      	mov	r0, r3
 800fd7a:	4790      	blx	r2
#ifdef SIMULATOR
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
#endif
}
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	0802ccfc 	.word	0x0802ccfc

0800fd8c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	370c      	adds	r7, #12
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	683a      	ldr	r2, [r7, #0]
 800fdb2:	4611      	mov	r1, r2
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7ff ffe9 	bl	800fd8c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	685a      	ldr	r2, [r3, #4]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	605a      	str	r2, [r3, #4]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	3308      	adds	r3, #8
 800fdc8:	3208      	adds	r2, #8
 800fdca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdce:	e883 0003 	stmia.w	r3, {r0, r1}
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800fddc:	b590      	push	{r4, r7, lr}
 800fdde:	b089      	sub	sp, #36	@ 0x24
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800fdea:	4b10      	ldr	r3, [pc, #64]	@ (800fe2c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800fdec:	61bb      	str	r3, [r7, #24]
 800fdee:	2300      	movs	r3, #0
 800fdf0:	61fb      	str	r3, [r7, #28]
 800fdf2:	f107 0008 	add.w	r0, r7, #8
 800fdf6:	f107 0318 	add.w	r3, r7, #24
 800fdfa:	cb0c      	ldmia	r3, {r2, r3}
 800fdfc:	6879      	ldr	r1, [r7, #4]
 800fdfe:	f000 f85f 	bl	800fec0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fe02:	f107 0308 	add.w	r3, r7, #8
 800fe06:	4619      	mov	r1, r3
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f7ff ffcb 	bl	800fda4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fe0e:	f107 0308 	add.w	r3, r7, #8
 800fe12:	4618      	mov	r0, r3
 800fe14:	f000 fa08 	bl	8010228 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800fe24:	bf00      	nop
 800fe26:	3724      	adds	r7, #36	@ 0x24
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd90      	pop	{r4, r7, pc}
 800fe2c:	0800fe31 	.word	0x0800fe31

0800fe30 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af02      	add	r7, sp, #8
 800fe36:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800fe44:	461a      	mov	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	4b04      	ldr	r3, [pc, #16]	@ (800fe60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800fe50:	4804      	ldr	r0, [pc, #16]	@ (800fe64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800fe52:	f000 f867 	bl	800ff24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fe56:	bf00      	nop
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	2008749c 	.word	0x2008749c
 800fe64:	20087498 	.word	0x20087498

0800fe68 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	4a04      	ldr	r2, [pc, #16]	@ (800fe84 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	601a      	str	r2, [r3, #0]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr
 800fe84:	0802cde0 	.word	0x0802cde0

0800fe88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7ff ffe8 	bl	800fe68 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fe98:	4a08      	ldr	r2, [pc, #32]	@ (800febc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	601a      	str	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	605a      	str	r2, [r3, #4]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	609a      	str	r2, [r3, #8]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	60da      	str	r2, [r3, #12]
    {
    }
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4618      	mov	r0, r3
 800feb4:	3708      	adds	r7, #8
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	0802cd50 	.word	0x0802cd50

0800fec0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	4639      	mov	r1, r7
 800fecc:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7ff ffc8 	bl	800fe68 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fed8:	4a08      	ldr	r2, [pc, #32]	@ (800fefc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	68ba      	ldr	r2, [r7, #8]
 800fee2:	605a      	str	r2, [r3, #4]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	3308      	adds	r3, #8
 800fee8:	463a      	mov	r2, r7
 800feea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800feee:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	4618      	mov	r0, r3
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	0802cd50 	.word	0x0802cd50

0800ff00 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7ff fda0 	bl	800fa50 <_ZN8touchgfx10TransitionC1Ev>
 800ff10:	4a03      	ldr	r2, [pc, #12]	@ (800ff20 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	601a      	str	r2, [r3, #0]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	0802ccd8 	.word	0x0802ccd8

0800ff24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ff24:	b590      	push	{r4, r7, lr}
 800ff26:	b08f      	sub	sp, #60	@ 0x3c
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
 800ff30:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	689a      	ldr	r2, [r3, #8]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	3320      	adds	r3, #32
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4610      	mov	r0, r2
 800ff42:	4798      	blx	r3
 800ff44:	4603      	mov	r3, r0
 800ff46:	2bf7      	cmp	r3, #247	@ 0xf7
 800ff48:	d805      	bhi.n	800ff56 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800ff4a:	4b7d      	ldr	r3, [pc, #500]	@ (8010140 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 800ff4c:	4a7d      	ldr	r2, [pc, #500]	@ (8010144 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800ff4e:	21a3      	movs	r1, #163	@ 0xa3
 800ff50:	487d      	ldr	r0, [pc, #500]	@ (8010148 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ff52:	f01a ff4b 	bl	802adec <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	685a      	ldr	r2, [r3, #4]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	3320      	adds	r3, #32
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4610      	mov	r0, r2
 800ff66:	4798      	blx	r3
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b0f      	cmp	r3, #15
 800ff6c:	d805      	bhi.n	800ff7a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 800ff6e:	4b77      	ldr	r3, [pc, #476]	@ (801014c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ff70:	4a74      	ldr	r2, [pc, #464]	@ (8010144 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800ff72:	21a4      	movs	r1, #164	@ 0xa4
 800ff74:	4874      	ldr	r0, [pc, #464]	@ (8010148 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ff76:	f01a ff39 	bl	802adec <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	68da      	ldr	r2, [r3, #12]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	3320      	adds	r3, #32
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4610      	mov	r0, r2
 800ff8a:	4798      	blx	r3
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b0b      	cmp	r3, #11
 800ff90:	d805      	bhi.n	800ff9e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 800ff92:	4b6f      	ldr	r3, [pc, #444]	@ (8010150 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ff94:	4a6b      	ldr	r2, [pc, #428]	@ (8010144 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800ff96:	21a5      	movs	r1, #165	@ 0xa5
 800ff98:	486b      	ldr	r0, [pc, #428]	@ (8010148 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800ff9a:	f01a ff27 	bl	802adec <__assert_func>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ffaa:	f005 fd33 	bl	8015a14 <_ZN8touchgfx11Application11getInstanceEv>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7ff fd13 	bl	800f9dc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ffb6:	6a3b      	ldr	r3, [r7, #32]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d008      	beq.n	800ffd0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 800ffbe:	6a3b      	ldr	r3, [r7, #32]
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	6a3b      	ldr	r3, [r7, #32]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	330c      	adds	r3, #12
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4610      	mov	r0, r2
 800ffce:	4798      	blx	r3
    if (*currentTrans)
 800ffd0:	6a3b      	ldr	r3, [r7, #32]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d007      	beq.n	800ffe8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 800ffd8:	6a3b      	ldr	r3, [r7, #32]
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	6a3b      	ldr	r3, [r7, #32]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	4798      	blx	r3
    if (*currentScreen)
 800ffe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d008      	beq.n	8010002 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 800fff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	3314      	adds	r3, #20
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4610      	mov	r0, r2
 8010000:	4798      	blx	r3
    if (*currentPresenter)
 8010002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d008      	beq.n	801001c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 801000a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	3304      	adds	r3, #4
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4610      	mov	r0, r2
 801001a:	4798      	blx	r3
    if (*currentScreen)
 801001c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d007      	beq.n	8010034 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8010024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4610      	mov	r0, r2
 8010032:	4798      	blx	r3
    if (*currentPresenter)
 8010034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d008      	beq.n	801004e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 801003c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	3308      	adds	r3, #8
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4610      	mov	r0, r2
 801004c:	4798      	blx	r3
}
 801004e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	2100      	movs	r1, #0
 8010056:	4618      	mov	r0, r3
 8010058:	f000 f87c 	bl	8010154 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801005c:	4603      	mov	r3, r0
 801005e:	4619      	mov	r1, r3
 8010060:	200c      	movs	r0, #12
 8010062:	f7ff fc25 	bl	800f8b0 <_ZnwjPv>
 8010066:	4604      	mov	r4, r0
 8010068:	4620      	mov	r0, r4
 801006a:	f7ff ff49 	bl	800ff00 <_ZN8touchgfx12NoTransitionC1Ev>
 801006e:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	2100      	movs	r1, #0
 8010076:	4618      	mov	r0, r3
 8010078:	f000 f87f 	bl	801017a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801007c:	4603      	mov	r3, r0
 801007e:	4619      	mov	r1, r3
 8010080:	20f8      	movs	r0, #248	@ 0xf8
 8010082:	f7ff fc15 	bl	800f8b0 <_ZnwjPv>
 8010086:	4604      	mov	r4, r0
 8010088:	4620      	mov	r0, r4
 801008a:	f001 f97b 	bl	8011384 <_ZN11Screen1ViewC1Ev>
 801008e:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	2100      	movs	r1, #0
 8010096:	4618      	mov	r0, r3
 8010098:	f000 f882 	bl	80101a0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801009c:	4603      	mov	r3, r0
 801009e:	4619      	mov	r1, r3
 80100a0:	2010      	movs	r0, #16
 80100a2:	f7ff fc05 	bl	800f8b0 <_ZnwjPv>
 80100a6:	4604      	mov	r4, r0
 80100a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80100aa:	4620      	mov	r0, r4
 80100ac:	f001 f914 	bl	80112d8 <_ZN16Screen1PresenterC1ER11Screen1View>
 80100b0:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100b6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100bc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100c2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80100c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d002      	beq.n	80100d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 80100ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100cc:	3304      	adds	r3, #4
 80100ce:	e000      	b.n	80100d2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 80100d0:	2300      	movs	r3, #0
 80100d2:	4619      	mov	r1, r3
 80100d4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80100d6:	f7ff fdab 	bl	800fc30 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80100da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100dc:	3304      	adds	r3, #4
 80100de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7ff fe18 	bl	800fd16 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80100e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100ea:	4618      	mov	r0, r3
 80100ec:	f000 f86b 	bl	80101c6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80100f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f2:	61fb      	str	r3, [r7, #28]
 80100f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f6:	61bb      	str	r3, [r7, #24]
 80100f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100fa:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	330c      	adds	r3, #12
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	69f8      	ldr	r0, [r7, #28]
 8010106:	4798      	blx	r3
    newPresenter->activate();
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	69b8      	ldr	r0, [r7, #24]
 8010110:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010112:	6979      	ldr	r1, [r7, #20]
 8010114:	69f8      	ldr	r0, [r7, #28]
 8010116:	f007 f93f 	bl	8017398 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	3310      	adds	r3, #16
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	6978      	ldr	r0, [r7, #20]
 8010124:	4798      	blx	r3
    newTransition->invalidate();
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	3314      	adds	r3, #20
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	6978      	ldr	r0, [r7, #20]
 8010130:	4798      	blx	r3
}
 8010132:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010136:	4618      	mov	r0, r3
 8010138:	373c      	adds	r7, #60	@ 0x3c
 801013a:	46bd      	mov	sp, r7
 801013c:	bd90      	pop	{r4, r7, pc}
 801013e:	bf00      	nop
 8010140:	0802beb0 	.word	0x0802beb0
 8010144:	0802bf40 	.word	0x0802bf40
 8010148:	0802c014 	.word	0x0802c014
 801014c:	0802c058 	.word	0x0802c058
 8010150:	0802c0fc 	.word	0x0802c0fc

08010154 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	460b      	mov	r3, r1
 801015e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	3324      	adds	r3, #36	@ 0x24
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	887a      	ldrh	r2, [r7, #2]
 801016a:	4611      	mov	r1, r2
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	4798      	blx	r3
 8010170:	4603      	mov	r3, r0
    }
 8010172:	4618      	mov	r0, r3
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 801017a:	b580      	push	{r7, lr}
 801017c:	b082      	sub	sp, #8
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	460b      	mov	r3, r1
 8010184:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3324      	adds	r3, #36	@ 0x24
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	887a      	ldrh	r2, [r7, #2]
 8010190:	4611      	mov	r1, r2
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	4798      	blx	r3
 8010196:	4603      	mov	r3, r0
    }
 8010198:	4618      	mov	r0, r3
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	460b      	mov	r3, r1
 80101aa:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3324      	adds	r3, #36	@ 0x24
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	887a      	ldrh	r2, [r7, #2]
 80101b6:	4611      	mov	r1, r2
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	4798      	blx	r3
 80101bc:	4603      	mov	r3, r0
    }
 80101be:	4618      	mov	r0, r3
 80101c0:	3708      	adds	r7, #8
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}

080101c6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80101c6:	b480      	push	{r7}
 80101c8:	b083      	sub	sp, #12
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	6078      	str	r0, [r7, #4]
 80101ce:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	683a      	ldr	r2, [r7, #0]
 80101d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80101d6:	bf00      	nop
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
	...

080101e4 <_ZN8touchgfx12NoTransitionD1Ev>:
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	4a05      	ldr	r2, [pc, #20]	@ (8010204 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7ff fc41 	bl	800fa7c <_ZN8touchgfx10TransitionD1Ev>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4618      	mov	r0, r3
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	0802ccd8 	.word	0x0802ccd8

08010208 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7ff ffe7 	bl	80101e4 <_ZN8touchgfx12NoTransitionD1Ev>
 8010216:	210c      	movs	r1, #12
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f01a fdba 	bl	802ad92 <_ZdlPvj>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4618      	mov	r0, r3
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	4a05      	ldr	r2, [pc, #20]	@ (8010248 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	601a      	str	r2, [r3, #0]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	f7ff fbdd 	bl	800f9f8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4618      	mov	r0, r3
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	0802cd50 	.word	0x0802cd50

0801024c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7ff ffe7 	bl	8010228 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801025a:	2110      	movs	r1, #16
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f01a fd98 	bl	802ad92 <_ZdlPvj>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4618      	mov	r0, r3
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	68d2      	ldr	r2, [r2, #12]
 801027c:	1052      	asrs	r2, r2, #1
 801027e:	1899      	adds	r1, r3, r2
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	f003 0301 	and.w	r3, r3, #1
 8010288:	2b00      	cmp	r3, #0
 801028a:	d102      	bne.n	8010292 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	e00a      	b.n	80102a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	68d2      	ldr	r2, [r2, #12]
 801029a:	1052      	asrs	r2, r2, #1
 801029c:	4413      	add	r3, r2
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	6892      	ldr	r2, [r2, #8]
 80102a4:	4413      	add	r3, r2
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	4608      	mov	r0, r1
 80102aa:	4798      	blx	r3
    }
 80102ac:	bf00      	nop
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d010      	beq.n	80102e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d107      	bne.n	80102dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	f003 0301 	and.w	r3, r3, #1
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d101      	bne.n	80102dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80102d8:	2301      	movs	r3, #1
 80102da:	e000      	b.n	80102de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80102dc:	2300      	movs	r3, #0
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d001      	beq.n	80102e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80102e2:	2301      	movs	r3, #1
 80102e4:	e000      	b.n	80102e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80102e6:	2300      	movs	r3, #0
    }
 80102e8:	4618      	mov	r0, r3
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
        : color(col)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	601a      	str	r2, [r3, #0]
    {
    }
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	4618      	mov	r0, r3
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr

08010312 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8010312:	b480      	push	{r7}
 8010314:	b083      	sub	sp, #12
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	801a      	strh	r2, [r3, #0]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2200      	movs	r2, #0
 8010324:	805a      	strh	r2, [r3, #2]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	809a      	strh	r2, [r3, #4]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	80da      	strh	r2, [r3, #6]
    {
    }
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	370c      	adds	r7, #12
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr

08010340 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8010348:	4a14      	ldr	r2, [pc, #80]	@ (801039c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	601a      	str	r2, [r3, #0]
        : rect(),
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	3304      	adds	r3, #4
 8010352:	4618      	mov	r0, r3
 8010354:	f7ff ffdd 	bl	8010312 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	330c      	adds	r3, #12
 801035c:	4618      	mov	r0, r3
 801035e:	f7ff ffd8 	bl	8010312 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2200      	movs	r2, #0
 801037e:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4618      	mov	r0, r3
 8010394:	3708      	adds	r7, #8
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	0802d7b4 	.word	0x0802d7b4

080103a0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
    {
 80103a8:	4a04      	ldr	r2, [pc, #16]	@ (80103bc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	601a      	str	r2, [r3, #0]
    }
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4618      	mov	r0, r3
 80103b2:	370c      	adds	r7, #12
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr
 80103bc:	0802d7b4 	.word	0x0802d7b4

080103c0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
    }
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7ff ffe9 	bl	80103a0 <_ZN8touchgfx8DrawableD1Ev>
 80103ce:	2128      	movs	r1, #40	@ 0x28
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f01a fcde 	bl	802ad92 <_ZdlPvj>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4618      	mov	r0, r3
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d005      	beq.n	80103fe <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3314      	adds	r3, #20
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	4798      	blx	r3
        }
    }
 80103fe:	bf00      	nop
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8010406:	b480      	push	{r7}
 8010408:	b083      	sub	sp, #12
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801040e:	2300      	movs	r3, #0
    }
 8010410:	4618      	mov	r0, r3
 8010412:	370c      	adds	r7, #12
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	4608      	mov	r0, r1
 8010426:	4611      	mov	r1, r2
 8010428:	461a      	mov	r2, r3
 801042a:	4603      	mov	r3, r0
 801042c:	817b      	strh	r3, [r7, #10]
 801042e:	460b      	mov	r3, r1
 8010430:	813b      	strh	r3, [r7, #8]
 8010432:	4613      	mov	r3, r2
 8010434:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010436:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801043a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801043e:	4619      	mov	r1, r3
 8010440:	68f8      	ldr	r0, [r7, #12]
 8010442:	f000 f82a 	bl	801049a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8010446:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801044a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801044e:	4619      	mov	r1, r3
 8010450:	68f8      	ldr	r0, [r7, #12]
 8010452:	f000 f87e 	bl	8010552 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8010456:	bf00      	nop
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 801045e:	b480      	push	{r7}
 8010460:	b083      	sub	sp, #12
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	460b      	mov	r3, r1
 8010468:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	887a      	ldrh	r2, [r7, #2]
 801046e:	809a      	strh	r2, [r3, #4]
    }
 8010470:	bf00      	nop
 8010472:	370c      	adds	r7, #12
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 801047c:	b480      	push	{r7}
 801047e:	b083      	sub	sp, #12
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	460b      	mov	r3, r1
 8010486:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	887a      	ldrh	r2, [r7, #2]
 801048c:	80da      	strh	r2, [r3, #6]
    }
 801048e:	bf00      	nop
 8010490:	370c      	adds	r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr

0801049a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 801049a:	b580      	push	{r7, lr}
 801049c:	b082      	sub	sp, #8
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
 80104a2:	460b      	mov	r3, r1
 80104a4:	807b      	strh	r3, [r7, #2]
 80104a6:	4613      	mov	r3, r2
 80104a8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3330      	adds	r3, #48	@ 0x30
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80104b6:	4611      	mov	r1, r2
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	4798      	blx	r3
        setY(y);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	3334      	adds	r3, #52	@ 0x34
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80104c8:	4611      	mov	r1, r2
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	4798      	blx	r3
    }
 80104ce:	bf00      	nop
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80104d6:	b480      	push	{r7}
 80104d8:	b083      	sub	sp, #12
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
 80104de:	460b      	mov	r3, r1
 80104e0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	887a      	ldrh	r2, [r7, #2]
 80104e6:	811a      	strh	r2, [r3, #8]
    }
 80104e8:	bf00      	nop
 80104ea:	370c      	adds	r7, #12
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr

080104f4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	460b      	mov	r3, r1
 80104fe:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	887a      	ldrh	r2, [r7, #2]
 8010504:	815a      	strh	r2, [r3, #10]
    }
 8010506:	bf00      	nop
 8010508:	370c      	adds	r7, #12
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010512:	b480      	push	{r7}
 8010514:	b083      	sub	sp, #12
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
    {
    }
 801051a:	bf00      	nop
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr

08010526 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010526:	b480      	push	{r7}
 8010528:	b083      	sub	sp, #12
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010530:	bf00      	nop
 8010532:	370c      	adds	r7, #12
 8010534:	46bd      	mov	sp, r7
 8010536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053a:	4770      	bx	lr

0801053c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010546:	bf00      	nop
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8010552:	b580      	push	{r7, lr}
 8010554:	b082      	sub	sp, #8
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	460b      	mov	r3, r1
 801055c:	807b      	strh	r3, [r7, #2]
 801055e:	4613      	mov	r3, r2
 8010560:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	3338      	adds	r3, #56	@ 0x38
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801056e:	4611      	mov	r1, r2
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	4798      	blx	r3
        setHeight(height);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	333c      	adds	r3, #60	@ 0x3c
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010580:	4611      	mov	r1, r2
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	4798      	blx	r3
    }
 8010586:	bf00      	nop
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801058e:	b480      	push	{r7}
 8010590:	b083      	sub	sp, #12
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
 8010596:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010598:	bf00      	nop
 801059a:	370c      	adds	r7, #12
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
    {
    }
 80105ac:	bf00      	nop
 80105ae:	370c      	adds	r7, #12
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr

080105b8 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 80105c6:	4618      	mov	r0, r3
 80105c8:	370c      	adds	r7, #12
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80105d2:	b480      	push	{r7}
 80105d4:	b083      	sub	sp, #12
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 80105e0:	4618      	mov	r0, r3
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr

080105ec <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	460b      	mov	r3, r1
 80105f6:	807b      	strh	r3, [r7, #2]
 80105f8:	4613      	mov	r3, r2
 80105fa:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	3354      	adds	r3, #84	@ 0x54
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	8879      	ldrh	r1, [r7, #2]
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801060c:	b292      	uxth	r2, r2
 801060e:	1a8a      	subs	r2, r1, r2
 8010610:	b292      	uxth	r2, r2
 8010612:	b210      	sxth	r0, r2
 8010614:	8839      	ldrh	r1, [r7, #0]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801061c:	b292      	uxth	r2, r2
 801061e:	1a8a      	subs	r2, r1, r2
 8010620:	b292      	uxth	r2, r2
 8010622:	b212      	sxth	r2, r2
 8010624:	4601      	mov	r1, r0
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	4798      	blx	r3
    }
 801062a:	bf00      	nop
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010632:	b480      	push	{r7}
 8010634:	b083      	sub	sp, #12
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010640:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010648:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010650:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 8010652:	bf00      	nop
 8010654:	370c      	adds	r7, #12
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr

0801065e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801065e:	b580      	push	{r7, lr}
 8010660:	b084      	sub	sp, #16
 8010662:	af00      	add	r7, sp, #0
 8010664:	60f8      	str	r0, [r7, #12]
 8010666:	60b9      	str	r1, [r7, #8]
 8010668:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f7ff ffe1 	bl	8010632 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	601a      	str	r2, [r3, #0]
    }
 801067e:	bf00      	nop
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8010686:	b580      	push	{r7, lr}
 8010688:	b084      	sub	sp, #16
 801068a:	af00      	add	r7, sp, #0
 801068c:	60f8      	str	r0, [r7, #12]
 801068e:	607b      	str	r3, [r7, #4]
 8010690:	460b      	mov	r3, r1
 8010692:	817b      	strh	r3, [r7, #10]
 8010694:	4613      	mov	r3, r2
 8010696:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	4618      	mov	r0, r3
 801069c:	f7ff ff8c 	bl	80105b8 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d008      	beq.n	80106b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff ff92 	bl	80105d2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d001      	beq.n	80106b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80106b4:	2301      	movs	r3, #1
 80106b6:	e000      	b.n	80106ba <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80106b8:	2300      	movs	r3, #0
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d002      	beq.n	80106c4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	601a      	str	r2, [r3, #0]
        }
    }
 80106c4:	bf00      	nop
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 80106d8:	4618      	mov	r0, r3
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7ff fe26 	bl	8010340 <_ZN8touchgfx8DrawableC1Ev>
 80106f4:	4a03      	ldr	r2, [pc, #12]	@ (8010704 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	601a      	str	r2, [r3, #0]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4618      	mov	r0, r3
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	0802ce20 	.word	0x0802ce20

08010708 <_ZN8touchgfx6WidgetD1Ev>:
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	4a05      	ldr	r2, [pc, #20]	@ (8010728 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	601a      	str	r2, [r3, #0]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4618      	mov	r0, r3
 801071a:	f7ff fe41 	bl	80103a0 <_ZN8touchgfx8DrawableD1Ev>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4618      	mov	r0, r3
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}
 8010728:	0802ce20 	.word	0x0802ce20

0801072c <_ZN8touchgfx6WidgetD0Ev>:
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7ff ffe7 	bl	8010708 <_ZN8touchgfx6WidgetD1Ev>
 801073a:	2128      	movs	r1, #40	@ 0x28
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f01a fb28 	bl	802ad92 <_ZdlPvj>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	4618      	mov	r0, r3
 8010746:	3708      	adds	r7, #8
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	4618      	mov	r0, r3
 8010758:	2326      	movs	r3, #38	@ 0x26
 801075a:	461a      	mov	r2, r3
 801075c:	2100      	movs	r1, #0
 801075e:	f01a fd4c 	bl	802b1fa <memset>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	4618      	mov	r0, r3
 8010766:	f7ff ffbd 	bl	80106e4 <_ZN8touchgfx6WidgetC1Ev>
 801076a:	4a09      	ldr	r2, [pc, #36]	@ (8010790 <_ZN8touchgfx3BoxC1Ev+0x44>)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	601a      	str	r2, [r3, #0]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	22ff      	movs	r2, #255	@ 0xff
 8010774:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	3328      	adds	r3, #40	@ 0x28
 801077c:	2100      	movs	r1, #0
 801077e:	4618      	mov	r0, r3
 8010780:	f7ff fdb8 	bl	80102f4 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	4618      	mov	r0, r3
 8010788:	3708      	adds	r7, #8
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	0802d62c 	.word	0x0802d62c

08010794 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	683a      	ldr	r2, [r7, #0]
 80107a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 80107a4:	bf00      	nop
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr

080107b0 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	4a05      	ldr	r2, [pc, #20]	@ (80107d0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	601a      	str	r2, [r3, #0]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff fded 	bl	80103a0 <_ZN8touchgfx8DrawableD1Ev>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4618      	mov	r0, r3
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	0802d3d4 	.word	0x0802d3d4

080107d4 <_ZN8touchgfx9ContainerD0Ev>:
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff ffe7 	bl	80107b0 <_ZN8touchgfx9ContainerD1Ev>
 80107e2:	212c      	movs	r1, #44	@ 0x2c
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f01a fad4 	bl	802ad92 <_ZdlPvj>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	4a05      	ldr	r2, [pc, #20]	@ (8010814 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	601a      	str	r2, [r3, #0]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	4618      	mov	r0, r3
 8010806:	f7ff ff7f 	bl	8010708 <_ZN8touchgfx6WidgetD1Ev>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	0802d62c 	.word	0x0802d62c

08010818 <_ZN8touchgfx3BoxD0Ev>:
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f7ff ffe7 	bl	80107f4 <_ZN8touchgfx3BoxD1Ev>
 8010826:	212c      	movs	r1, #44	@ 0x2c
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f01a fab2 	bl	802ad92 <_ZdlPvj>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	4618      	mov	r0, r3
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	460b      	mov	r3, r1
 8010842:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	887a      	ldrh	r2, [r7, #2]
 8010848:	801a      	strh	r2, [r3, #0]
    {
    }
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4618      	mov	r0, r3
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	460b      	mov	r3, r1
 8010862:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	78fa      	ldrb	r2, [r7, #3]
 8010868:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 801086c:	bf00      	nop
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
    {
 8010880:	4a06      	ldr	r2, [pc, #24]	@ (801089c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	601a      	str	r2, [r3, #0]
    }
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	3304      	adds	r3, #4
 801088a:	4618      	mov	r0, r3
 801088c:	f7ff ff90 	bl	80107b0 <_ZN8touchgfx9ContainerD1Ev>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4618      	mov	r0, r3
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	0802d8c0 	.word	0x0802d8c0

080108a0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
    }
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7ff ffe5 	bl	8010878 <_ZN8touchgfx6ScreenD1Ev>
 80108ae:	213c      	movs	r1, #60	@ 0x3c
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f01a fa6e 	bl	802ad92 <_ZdlPvj>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	4618      	mov	r0, r3
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
    {
    }
 80108c8:	bf00      	nop
 80108ca:	370c      	adds	r7, #12
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
    {
    }
 80108dc:	bf00      	nop
 80108de:	370c      	adds	r7, #12
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80108e8:	b480      	push	{r7}
 80108ea:	b083      	sub	sp, #12
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
    {
    }
 80108f0:	bf00      	nop
 80108f2:	370c      	adds	r7, #12
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80108fc:	b480      	push	{r7}
 80108fe:	b083      	sub	sp, #12
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
    {
    }
 8010904:	bf00      	nop
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	460b      	mov	r3, r1
 801091a:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	3304      	adds	r3, #4
 8010936:	6839      	ldr	r1, [r7, #0]
 8010938:	4618      	mov	r0, r3
 801093a:	f002 fd99 	bl	8013470 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801093e:	bf00      	nop
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
	...

08010948 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	4618      	mov	r0, r3
 8010954:	2326      	movs	r3, #38	@ 0x26
 8010956:	461a      	mov	r2, r3
 8010958:	2100      	movs	r1, #0
 801095a:	f01a fc4e 	bl	802b1fa <memset>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4618      	mov	r0, r3
 8010962:	f7ff febf 	bl	80106e4 <_ZN8touchgfx6WidgetC1Ev>
 8010966:	4a0a      	ldr	r2, [pc, #40]	@ (8010990 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	601a      	str	r2, [r3, #0]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	629a      	str	r2, [r3, #40]	@ 0x28
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2101      	movs	r1, #1
 801097e:	4618      	mov	r0, r3
 8010980:	f7ff ff6a 	bl	8010858 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	4618      	mov	r0, r3
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	0802d5bc 	.word	0x0802d5bc

08010994 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	4a05      	ldr	r2, [pc, #20]	@ (80109b4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	601a      	str	r2, [r3, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7ff feaf 	bl	8010708 <_ZN8touchgfx6WidgetD1Ev>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4618      	mov	r0, r3
 80109ae:	3708      	adds	r7, #8
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	0802d5bc 	.word	0x0802d5bc

080109b8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f7ff ffe7 	bl	8010994 <_ZN8touchgfx14AbstractButtonD1Ev>
 80109c6:	2130      	movs	r1, #48	@ 0x30
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f01a f9e2 	bl	802ad92 <_ZdlPvj>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4618      	mov	r0, r3
 80109d2:	3708      	adds	r7, #8
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}

080109d8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7ff ffb0 	bl	8010948 <_ZN8touchgfx14AbstractButtonC1Ev>
 80109e8:	4a0c      	ldr	r2, [pc, #48]	@ (8010a1c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	601a      	str	r2, [r3, #0]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	332e      	adds	r3, #46	@ 0x2e
 80109f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7ff ff1e 	bl	8010838 <_ZN8touchgfx6BitmapC1Et>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	3330      	adds	r3, #48	@ 0x30
 8010a00:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7ff ff17 	bl	8010838 <_ZN8touchgfx6BitmapC1Et>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	22ff      	movs	r2, #255	@ 0xff
 8010a0e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	0802d694 	.word	0x0802d694

08010a20 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	4a05      	ldr	r2, [pc, #20]	@ (8010a40 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	601a      	str	r2, [r3, #0]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7ff ff21 	bl	8010878 <_ZN8touchgfx6ScreenD1Ev>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	0802cebc 	.word	0x0802cebc

08010a44 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7ff ffe7 	bl	8010a20 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8010a52:	2140      	movs	r1, #64	@ 0x40
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f01a f99c 	bl	802ad92 <_ZdlPvj>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase()
 8010a64:	b590      	push	{r4, r7, lr}
 8010a66:	b08d      	sub	sp, #52	@ 0x34
 8010a68:	af02      	add	r7, sp, #8
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f000 f922 	bl	8010cb8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8010a74:	4a6f      	ldr	r2, [pc, #444]	@ (8010c34 <_ZN15Screen1ViewBaseC1Ev+0x1d0>)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	3340      	adds	r3, #64	@ 0x40
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7ff fe64 	bl	801074c <_ZN8touchgfx3BoxC1Ev>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	336c      	adds	r3, #108	@ 0x6c
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7ff fe5f 	bl	801074c <_ZN8touchgfx3BoxC1Ev>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	3398      	adds	r3, #152	@ 0x98
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7ff fe5a 	bl	801074c <_ZN8touchgfx3BoxC1Ev>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	33c4      	adds	r3, #196	@ 0xc4
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff ff9b 	bl	80109d8 <_ZN8touchgfx6ButtonC1Ev>
{
    __background.setPosition(0, 0, 416, 416);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8010aa8:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8010aac:	9300      	str	r3, [sp, #0]
 8010aae:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	f7ff fcb1 	bl	801041c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	f887 3020 	strb.w	r3, [r7, #32]
 8010acc:	2300      	movs	r3, #0
 8010ace:	77fb      	strb	r3, [r7, #31]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010ad0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010ad4:	041a      	lsls	r2, r3, #16
 8010ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010ada:	021b      	lsls	r3, r3, #8
 8010adc:	431a      	orrs	r2, r3
 8010ade:	7ffb      	ldrb	r3, [r7, #31]
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010ae6:	f107 0318 	add.w	r3, r7, #24
 8010aea:	4611      	mov	r1, r2
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ff fc01 	bl	80102f4 <_ZN8touchgfx9colortypeC1Em>
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	4619      	mov	r1, r3
 8010af6:	4620      	mov	r0, r4
 8010af8:	f7ff fe4c 	bl	8010794 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3340      	adds	r3, #64	@ 0x40
 8010b02:	4619      	mov	r1, r3
 8010b04:	4610      	mov	r0, r2
 8010b06:	f7ff ff0f 	bl	8010928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 416, 416);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8010b10:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	2100      	movs	r1, #0
 8010b1e:	f7ff fc7d 	bl	801041c <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(130, 77, 184));
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8010b28:	2382      	movs	r3, #130	@ 0x82
 8010b2a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8010b2e:	234d      	movs	r3, #77	@ 0x4d
 8010b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010b34:	23b8      	movs	r3, #184	@ 0xb8
 8010b36:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8010b3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010b3e:	041a      	lsls	r2, r3, #16
 8010b40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010b44:	021b      	lsls	r3, r3, #8
 8010b46:	431a      	orrs	r2, r3
 8010b48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010b52:	f107 0314 	add.w	r3, r7, #20
 8010b56:	4611      	mov	r1, r2
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff fbcb 	bl	80102f4 <_ZN8touchgfx9colortypeC1Em>
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	4619      	mov	r1, r3
 8010b62:	4620      	mov	r0, r4
 8010b64:	f7ff fe16 	bl	8010794 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	336c      	adds	r3, #108	@ 0x6c
 8010b6e:	4619      	mov	r1, r3
 8010b70:	4610      	mov	r0, r2
 8010b72:	f7ff fed9 	bl	8010928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box2.setPosition(0, 0, 253, 241);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8010b7c:	23f1      	movs	r3, #241	@ 0xf1
 8010b7e:	9300      	str	r3, [sp, #0]
 8010b80:	23fd      	movs	r3, #253	@ 0xfd
 8010b82:	2200      	movs	r2, #0
 8010b84:	2100      	movs	r1, #0
 8010b86:	f7ff fc49 	bl	801041c <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(34, 70, 117));
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8010b90:	2322      	movs	r3, #34	@ 0x22
 8010b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010b96:	2346      	movs	r3, #70	@ 0x46
 8010b98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010b9c:	2375      	movs	r3, #117	@ 0x75
 8010b9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8010ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ba6:	041a      	lsls	r2, r3, #16
 8010ba8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010bac:	021b      	lsls	r3, r3, #8
 8010bae:	431a      	orrs	r2, r3
 8010bb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8010bba:	f107 0310 	add.w	r3, r7, #16
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7ff fb97 	bl	80102f4 <_ZN8touchgfx9colortypeC1Em>
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	4619      	mov	r1, r3
 8010bca:	4620      	mov	r0, r4
 8010bcc:	f7ff fde2 	bl	8010794 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box2);
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	3398      	adds	r3, #152	@ 0x98
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	4610      	mov	r0, r2
 8010bda:	f7ff fea5 	bl	8010928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    button1.setXY(133, 216);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	33c4      	adds	r3, #196	@ 0xc4
 8010be2:	22d8      	movs	r2, #216	@ 0xd8
 8010be4:	2185      	movs	r1, #133	@ 0x85
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7ff fc57 	bl	801049a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8010bf2:	f107 0308 	add.w	r3, r7, #8
 8010bf6:	2100      	movs	r1, #0
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7ff fe1d 	bl	8010838 <_ZN8touchgfx6BitmapC1Et>
 8010bfe:	f107 030c 	add.w	r3, r7, #12
 8010c02:	2101      	movs	r1, #1
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7ff fe17 	bl	8010838 <_ZN8touchgfx6BitmapC1Et>
 8010c0a:	f107 020c 	add.w	r2, r7, #12
 8010c0e:	f107 0308 	add.w	r3, r7, #8
 8010c12:	4619      	mov	r1, r3
 8010c14:	4620      	mov	r0, r4
 8010c16:	f003 fe19 	bl	801484c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    add(button1);
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	33c4      	adds	r3, #196	@ 0xc4
 8010c20:	4619      	mov	r1, r3
 8010c22:	4610      	mov	r0, r2
 8010c24:	f7ff fe80 	bl	8010928 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	372c      	adds	r7, #44	@ 0x2c
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd90      	pop	{r4, r7, pc}
 8010c32:	bf00      	nop
 8010c34:	0802ce88 	.word	0x0802ce88

08010c38 <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	4a0f      	ldr	r2, [pc, #60]	@ (8010c80 <_ZN15Screen1ViewBaseD1Ev+0x48>)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	601a      	str	r2, [r3, #0]
{

}
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	33c4      	adds	r3, #196	@ 0xc4
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f000 f84a 	bl	8010ce4 <_ZN8touchgfx6ButtonD1Ev>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	3398      	adds	r3, #152	@ 0x98
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7ff fdcd 	bl	80107f4 <_ZN8touchgfx3BoxD1Ev>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	336c      	adds	r3, #108	@ 0x6c
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7ff fdc8 	bl	80107f4 <_ZN8touchgfx3BoxD1Ev>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	3340      	adds	r3, #64	@ 0x40
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7ff fdc3 	bl	80107f4 <_ZN8touchgfx3BoxD1Ev>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7ff fed5 	bl	8010a20 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	0802ce88 	.word	0x0802ce88

08010c84 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
}
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7ff ffd3 	bl	8010c38 <_ZN15Screen1ViewBaseD1Ev>
 8010c92:	21f8      	movs	r1, #248	@ 0xf8
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f01a f87c 	bl	802ad92 <_ZdlPvj>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3708      	adds	r7, #8
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}

08010ca4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]

}
 8010cac:	bf00      	nop
 8010cae:	370c      	adds	r7, #12
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f006 f9bc 	bl	8017040 <_ZN8touchgfx6ScreenC1Ev>
 8010cc8:	4a05      	ldr	r2, [pc, #20]	@ (8010ce0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	601a      	str	r2, [r3, #0]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3708      	adds	r7, #8
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	0802cebc 	.word	0x0802cebc

08010ce4 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	4a05      	ldr	r2, [pc, #20]	@ (8010d04 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	601a      	str	r2, [r3, #0]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7ff fe4d 	bl	8010994 <_ZN8touchgfx14AbstractButtonD1Ev>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	0802d694 	.word	0x0802d694

08010d08 <_ZN8touchgfx6ButtonD0Ev>:
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7ff ffe7 	bl	8010ce4 <_ZN8touchgfx6ButtonD1Ev>
 8010d16:	2134      	movs	r1, #52	@ 0x34
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f01a f83a 	bl	802ad92 <_ZdlPvj>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	4618      	mov	r0, r3
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010d28:	b480      	push	{r7}
 8010d2a:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010d2c:	4b02      	ldr	r3, [pc, #8]	@ (8010d38 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr
 8010d38:	0802cee8 	.word	0x0802cee8

08010d3c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010d40:	2302      	movs	r3, #2
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr

08010d4c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	460b      	mov	r3, r1
 8010d56:	607a      	str	r2, [r7, #4]
 8010d58:	817b      	strh	r3, [r7, #10]
        return 0;
 8010d5a:	2300      	movs	r3, #0
    }
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3714      	adds	r7, #20
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
        return 0;
 8010d70:	2300      	movs	r3, #0
    }
 8010d72:	4618      	mov	r0, r3
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr

08010d7e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010d7e:	b480      	push	{r7}
 8010d80:	b083      	sub	sp, #12
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
        return 0;
 8010d86:	2300      	movs	r3, #0
    }
 8010d88:	4618      	mov	r0, r3
 8010d8a:	370c      	adds	r7, #12
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr

08010d94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010d94:	b480      	push	{r7}
 8010d96:	b085      	sub	sp, #20
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	4613      	mov	r3, r2
 8010da0:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010da2:	4a07      	ldr	r2, [pc, #28]	@ (8010dc0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010da8:	4a06      	ldr	r2, [pc, #24]	@ (8010dc4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010dae:	4a06      	ldr	r2, [pc, #24]	@ (8010dc8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010db0:	88fb      	ldrh	r3, [r7, #6]
 8010db2:	8013      	strh	r3, [r2, #0]
    }
 8010db4:	bf00      	nop
 8010db6:	3714      	adds	r7, #20
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr
 8010dc0:	200874ac 	.word	0x200874ac
 8010dc4:	200874b4 	.word	0x200874b4
 8010dc8:	200874b0 	.word	0x200874b0

08010dcc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010dcc:	b40e      	push	{r1, r2, r3}
 8010dce:	b580      	push	{r7, lr}
 8010dd0:	b085      	sub	sp, #20
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010dd6:	f107 0320 	add.w	r3, r7, #32
 8010dda:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	69fa      	ldr	r2, [r7, #28]
 8010de0:	2100      	movs	r1, #0
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f005 fd62 	bl	80168ac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010de8:	4603      	mov	r3, r0
 8010dea:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010dec:	89fb      	ldrh	r3, [r7, #14]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3714      	adds	r7, #20
 8010df2:	46bd      	mov	sp, r7
 8010df4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010df8:	b003      	add	sp, #12
 8010dfa:	4770      	bx	lr

08010dfc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010dfc:	b40c      	push	{r2, r3}
 8010dfe:	b580      	push	{r7, lr}
 8010e00:	b084      	sub	sp, #16
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6078      	str	r0, [r7, #4]
 8010e06:	460b      	mov	r3, r1
 8010e08:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010e0a:	f107 031c 	add.w	r3, r7, #28
 8010e0e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010e10:	78f9      	ldrb	r1, [r7, #3]
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	69ba      	ldr	r2, [r7, #24]
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f005 fd48 	bl	80168ac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010e20:	89fb      	ldrh	r3, [r7, #14]
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e2c:	b002      	add	sp, #8
 8010e2e:	4770      	bx	lr

08010e30 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b08a      	sub	sp, #40	@ 0x28
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	460b      	mov	r3, r1
 8010e3a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d016      	beq.n	8010e72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	3322      	adds	r3, #34	@ 0x22
 8010e48:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e4c:	8adb      	ldrh	r3, [r3, #22]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d105      	bne.n	8010e5e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010e52:	4b43      	ldr	r3, [pc, #268]	@ (8010f60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010e54:	4a43      	ldr	r2, [pc, #268]	@ (8010f64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010e56:	21c5      	movs	r1, #197	@ 0xc5
 8010e58:	4843      	ldr	r0, [pc, #268]	@ (8010f68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010e5a:	f019 ffc7 	bl	802adec <__assert_func>
            return buffer[pos];
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e60:	8a9b      	ldrh	r3, [r3, #20]
 8010e62:	461a      	mov	r2, r3
 8010e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d001      	beq.n	8010e72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	e000      	b.n	8010e74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010e72:	2300      	movs	r3, #0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d06a      	beq.n	8010f4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f006 ff54 	bl	8017d26 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	3322      	adds	r3, #34	@ 0x22
 8010e82:	623b      	str	r3, [r7, #32]
 8010e84:	2301      	movs	r3, #1
 8010e86:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010e88:	6a3b      	ldr	r3, [r7, #32]
 8010e8a:	8adb      	ldrh	r3, [r3, #22]
 8010e8c:	8bfa      	ldrh	r2, [r7, #30]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d305      	bcc.n	8010e9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010e92:	4b36      	ldr	r3, [pc, #216]	@ (8010f6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010e94:	4a36      	ldr	r2, [pc, #216]	@ (8010f70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010e96:	21cb      	movs	r1, #203	@ 0xcb
 8010e98:	4833      	ldr	r0, [pc, #204]	@ (8010f68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010e9a:	f019 ffa7 	bl	802adec <__assert_func>
            const uint16_t index = pos + offset;
 8010e9e:	6a3b      	ldr	r3, [r7, #32]
 8010ea0:	8a9a      	ldrh	r2, [r3, #20]
 8010ea2:	8bfb      	ldrh	r3, [r7, #30]
 8010ea4:	4413      	add	r3, r2
 8010ea6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010ea8:	8bbb      	ldrh	r3, [r7, #28]
 8010eaa:	2b09      	cmp	r3, #9
 8010eac:	d801      	bhi.n	8010eb2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010eae:	8bbb      	ldrh	r3, [r7, #28]
 8010eb0:	e001      	b.n	8010eb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010eb2:	8bbb      	ldrh	r3, [r7, #28]
 8010eb4:	3b0a      	subs	r3, #10
 8010eb6:	6a3a      	ldr	r2, [r7, #32]
 8010eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ebc:	f640 123f 	movw	r2, #2367	@ 0x93f
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	bf0c      	ite	eq
 8010ec4:	2301      	moveq	r3, #1
 8010ec6:	2300      	movne	r3, #0
 8010ec8:	b2db      	uxtb	r3, r3
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d03f      	beq.n	8010f4e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	3322      	adds	r3, #34	@ 0x22
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	3222      	adds	r2, #34	@ 0x22
 8010ed6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	8ad2      	ldrh	r2, [r2, #22]
 8010edc:	2a00      	cmp	r2, #0
 8010ede:	d105      	bne.n	8010eec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8010f60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010ee2:	4a20      	ldr	r2, [pc, #128]	@ (8010f64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010ee4:	21c5      	movs	r1, #197	@ 0xc5
 8010ee6:	4820      	ldr	r0, [pc, #128]	@ (8010f68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010ee8:	f019 ff80 	bl	802adec <__assert_func>
            return buffer[pos];
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	8a92      	ldrh	r2, [r2, #20]
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010ef8:	613b      	str	r3, [r7, #16]
 8010efa:	4613      	mov	r3, r2
 8010efc:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	8adb      	ldrh	r3, [r3, #22]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d806      	bhi.n	8010f14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8010f06:	4b1b      	ldr	r3, [pc, #108]	@ (8010f74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010f08:	4a1b      	ldr	r2, [pc, #108]	@ (8010f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010f0a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8010f0e:	4816      	ldr	r0, [pc, #88]	@ (8010f68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010f10:	f019 ff6c 	bl	802adec <__assert_func>
            const uint16_t index = pos + 1;
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	8a9b      	ldrh	r3, [r3, #20]
 8010f18:	3301      	adds	r3, #1
 8010f1a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010f1c:	89bb      	ldrh	r3, [r7, #12]
 8010f1e:	2b09      	cmp	r3, #9
 8010f20:	d801      	bhi.n	8010f26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010f22:	89bb      	ldrh	r3, [r7, #12]
 8010f24:	e000      	b.n	8010f28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8010f26:	2300      	movs	r3, #0
 8010f28:	693a      	ldr	r2, [r7, #16]
 8010f2a:	89f9      	ldrh	r1, [r7, #14]
 8010f2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010f30:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	3322      	adds	r3, #34	@ 0x22
 8010f36:	61bb      	str	r3, [r7, #24]
 8010f38:	f640 133f 	movw	r3, #2367	@ 0x93f
 8010f3c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010f3e:	69bb      	ldr	r3, [r7, #24]
 8010f40:	8a9b      	ldrh	r3, [r3, #20]
 8010f42:	4619      	mov	r1, r3
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	8afa      	ldrh	r2, [r7, #22]
 8010f48:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010f4c:	bf00      	nop
        }
    }
    return getNextChar();
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f006 fdec 	bl	8017b2c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010f54:	4603      	mov	r3, r0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3728      	adds	r7, #40	@ 0x28
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	0802c1a0 	.word	0x0802c1a0
 8010f64:	0802c1ac 	.word	0x0802c1ac
 8010f68:	0802c258 	.word	0x0802c258
 8010f6c:	0802c2a0 	.word	0x0802c2a0
 8010f70:	0802c2b0 	.word	0x0802c2b0
 8010f74:	0802c384 	.word	0x0802c384
 8010f78:	0802c390 	.word	0x0802c390

08010f7c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b082      	sub	sp, #8
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f006 fd98 	bl	8017aba <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8010f8a:	bf00      	nop
 8010f8c:	3708      	adds	r7, #8
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
	...

08010f94 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010f94:	b590      	push	{r4, r7, lr}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010fa2:	88fb      	ldrh	r3, [r7, #6]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d127      	bne.n	8010ff8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010fa8:	88fb      	ldrh	r3, [r7, #6]
 8010faa:	4a1e      	ldr	r2, [pc, #120]	@ (8011024 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d016      	beq.n	8010fe2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010fb4:	88fb      	ldrh	r3, [r7, #6]
 8010fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8011024 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fbc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	4a18      	ldr	r2, [pc, #96]	@ (8011028 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010fc8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	68ba      	ldr	r2, [r7, #8]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	4a16      	ldr	r2, [pc, #88]	@ (801102c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010fd4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	689b      	ldr	r3, [r3, #8]
 8010fda:	68ba      	ldr	r2, [r7, #8]
 8010fdc:	4413      	add	r3, r2
 8010fde:	60fb      	str	r3, [r7, #12]
 8010fe0:	e00a      	b.n	8010ff8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010fe2:	4b11      	ldr	r3, [pc, #68]	@ (8011028 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010fe4:	4a12      	ldr	r2, [pc, #72]	@ (8011030 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010fe6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010fe8:	4a12      	ldr	r2, [pc, #72]	@ (8011034 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010fea:	4b10      	ldr	r3, [pc, #64]	@ (801102c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010fec:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010fee:	88fb      	ldrh	r3, [r7, #6]
 8010ff0:	4a11      	ldr	r2, [pc, #68]	@ (8011038 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ff6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00d      	beq.n	801101a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010ffe:	4a0f      	ldr	r2, [pc, #60]	@ (801103c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011000:	88fb      	ldrh	r3, [r7, #6]
 8011002:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011004:	f000 f824 	bl	8011050 <_ZN17TypedTextDatabase8getFontsEv>
 8011008:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801100a:	f000 f819 	bl	8011040 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801100e:	4603      	mov	r3, r0
 8011010:	461a      	mov	r2, r3
 8011012:	4621      	mov	r1, r4
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f7ff febd 	bl	8010d94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801101a:	bf00      	nop
 801101c:	3714      	adds	r7, #20
 801101e:	46bd      	mov	sp, r7
 8011020:	bd90      	pop	{r4, r7, pc}
 8011022:	bf00      	nop
 8011024:	200859c8 	.word	0x200859c8
 8011028:	200859d0 	.word	0x200859d0
 801102c:	200859d4 	.word	0x200859d4
 8011030:	080474e0 	.word	0x080474e0
 8011034:	080474dc 	.word	0x080474dc
 8011038:	080474e8 	.word	0x080474e8
 801103c:	200859cc 	.word	0x200859cc

08011040 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011040:	b480      	push	{r7}
 8011042:	af00      	add	r7, sp, #0
    return 0;
 8011044:	2300      	movs	r3, #0
}
 8011046:	4618      	mov	r0, r3
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011050:	b480      	push	{r7}
 8011052:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011054:	4b02      	ldr	r3, [pc, #8]	@ (8011060 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011056:	4618      	mov	r0, r3
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr
 8011060:	200859d8 	.word	0x200859d8

08011064 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d113      	bne.n	801109c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801107a:	4293      	cmp	r3, r2
 801107c:	d10e      	bne.n	801109c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801107e:	f7fe fb6f 	bl	800f760 <_Z23getFont_verdana_20_4bppv>
 8011082:	4603      	mov	r3, r0
};
 8011084:	4a07      	ldr	r2, [pc, #28]	@ (80110a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011086:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011088:	f7fe fbc2 	bl	800f810 <_Z23getFont_verdana_40_4bppv>
 801108c:	4603      	mov	r3, r0
};
 801108e:	4a05      	ldr	r2, [pc, #20]	@ (80110a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011090:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8011092:	f7fe fb0d 	bl	800f6b0 <_Z23getFont_verdana_10_4bppv>
 8011096:	4603      	mov	r3, r0
};
 8011098:	4a02      	ldr	r2, [pc, #8]	@ (80110a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801109a:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	200859d8 	.word	0x200859d8

080110a8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80110a8:	b580      	push	{r7, lr}
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80110b0:	2001      	movs	r0, #1
 80110b2:	f7ff ffd7 	bl	8011064 <_Z41__static_initialization_and_destruction_0ii>
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	4a05      	ldr	r2, [pc, #20]	@ (80110d8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	601a      	str	r2, [r3, #0]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7fe fde3 	bl	800fc94 <_ZN23FrontendApplicationBaseD1Ev>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	0802cf7c 	.word	0x0802cf7c

080110dc <_ZN19FrontendApplicationD0Ev>:
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f7ff ffe7 	bl	80110b8 <_ZN19FrontendApplicationD1Ev>
 80110ea:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f019 fe4f 	bl	802ad92 <_ZdlPvj>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80110fe:	b580      	push	{r7, lr}
 8011100:	b082      	sub	sp, #8
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801110c:	4618      	mov	r0, r3
 801110e:	f000 f82d 	bl	801116c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	4618      	mov	r0, r3
 8011116:	f004 fcff 	bl	8015b18 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801111a:	bf00      	nop
 801111c:	3708      	adds	r7, #8
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
	...

08011124 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	687a      	ldr	r2, [r7, #4]
 8011134:	68b9      	ldr	r1, [r7, #8]
 8011136:	4618      	mov	r0, r3
 8011138:	f7fe fdfc 	bl	800fd34 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801113c:	4a03      	ldr	r2, [pc, #12]	@ (801114c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	601a      	str	r2, [r3, #0]
{

}
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	4618      	mov	r0, r3
 8011146:	3710      	adds	r7, #16
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	0802cf7c 	.word	0x0802cf7c

08011150 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011150:	b480      	push	{r7}
 8011152:	b083      	sub	sp, #12
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2200      	movs	r2, #0
 801115c:	601a      	str	r2, [r3, #0]
{

}
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr

0801116c <_ZN5Model4tickEv>:

void Model::tick()
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]

}
 8011174:	bf00      	nop
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
    {
    }
 8011188:	bf00      	nop
 801118a:	370c      	adds	r7, #12
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
    {
    }
 801119c:	bf00      	nop
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr

080111a8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
    {
 80111b0:	4a04      	ldr	r2, [pc, #16]	@ (80111c4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	601a      	str	r2, [r3, #0]
    }
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4618      	mov	r0, r3
 80111ba:	370c      	adds	r7, #12
 80111bc:	46bd      	mov	sp, r7
 80111be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c2:	4770      	bx	lr
 80111c4:	0802d008 	.word	0x0802d008

080111c8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
    }
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7ff ffe9 	bl	80111a8 <_ZN8touchgfx9PresenterD1Ev>
 80111d6:	2104      	movs	r1, #4
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f019 fdda 	bl	802ad92 <_ZdlPvj>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	4618      	mov	r0, r3
 80111e2:	3708      	adds	r7, #8
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}

080111e8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
    {
 80111f0:	4a04      	ldr	r2, [pc, #16]	@ (8011204 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	601a      	str	r2, [r3, #0]
    }
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	4618      	mov	r0, r3
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	0802d008 	.word	0x0802d008

08011208 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	4a06      	ldr	r2, [pc, #24]	@ (801122c <_ZN13ModelListenerC1Ev+0x24>)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	601a      	str	r2, [r3, #0]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	605a      	str	r2, [r3, #4]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4618      	mov	r0, r3
 8011220:	370c      	adds	r7, #12
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	0802cff8 	.word	0x0802cff8

08011230 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8011230:	b480      	push	{r7}
 8011232:	b083      	sub	sp, #12
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	4a04      	ldr	r2, [pc, #16]	@ (801124c <_ZN13ModelListenerD1Ev+0x1c>)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	601a      	str	r2, [r3, #0]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4618      	mov	r0, r3
 8011242:	370c      	adds	r7, #12
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr
 801124c:	0802cff8 	.word	0x0802cff8

08011250 <_ZN13ModelListenerD0Ev>:
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7ff ffe9 	bl	8011230 <_ZN13ModelListenerD1Ev>
 801125e:	2108      	movs	r1, #8
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f019 fd96 	bl	802ad92 <_ZdlPvj>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4618      	mov	r0, r3
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	4a09      	ldr	r2, [pc, #36]	@ (80112a0 <_ZN16Screen1PresenterD1Ev+0x30>)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	4a09      	ldr	r2, [pc, #36]	@ (80112a4 <_ZN16Screen1PresenterD1Ev+0x34>)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	605a      	str	r2, [r3, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	3304      	adds	r3, #4
 8011288:	4618      	mov	r0, r3
 801128a:	f7ff ffd1 	bl	8011230 <_ZN13ModelListenerD1Ev>
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	4618      	mov	r0, r3
 8011292:	f7ff ff89 	bl	80111a8 <_ZN8touchgfx9PresenterD1Ev>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	4618      	mov	r0, r3
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}
 80112a0:	0802cfd0 	.word	0x0802cfd0
 80112a4:	0802cfe8 	.word	0x0802cfe8

080112a8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80112a8:	f1a0 0004 	sub.w	r0, r0, #4
 80112ac:	e7e0      	b.n	8011270 <_ZN16Screen1PresenterD1Ev>
 80112ae:	bf00      	nop

080112b0 <_ZN16Screen1PresenterD0Ev>:
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f7ff ffd9 	bl	8011270 <_ZN16Screen1PresenterD1Ev>
 80112be:	2110      	movs	r1, #16
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f019 fd66 	bl	802ad92 <_ZdlPvj>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4618      	mov	r0, r3
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80112d0:	f1a0 0004 	sub.w	r0, r0, #4
 80112d4:	e7ec      	b.n	80112b0 <_ZN16Screen1PresenterD0Ev>
	...

080112d8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
    : view(v)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7ff ff7f 	bl	80111e8 <_ZN8touchgfx9PresenterC1Ev>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3304      	adds	r3, #4
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7ff ff8a 	bl	8011208 <_ZN13ModelListenerC1Ev>
 80112f4:	4a06      	ldr	r2, [pc, #24]	@ (8011310 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	601a      	str	r2, [r3, #0]
 80112fa:	4a06      	ldr	r2, [pc, #24]	@ (8011314 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	605a      	str	r2, [r3, #4]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	683a      	ldr	r2, [r7, #0]
 8011304:	60da      	str	r2, [r3, #12]
{

}
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4618      	mov	r0, r3
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	0802cfd0 	.word	0x0802cfd0
 8011314:	0802cfe8 	.word	0x0802cfe8

08011318 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]

}
 8011320:	bf00      	nop
 8011322:	370c      	adds	r7, #12
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr

0801132c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]

}
 8011334:	bf00      	nop
 8011336:	370c      	adds	r7, #12
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr

08011340 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	4a05      	ldr	r2, [pc, #20]	@ (8011360 <_ZN11Screen1ViewD1Ev+0x20>)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	601a      	str	r2, [r3, #0]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4618      	mov	r0, r3
 8011352:	f7ff fc71 	bl	8010c38 <_ZN15Screen1ViewBaseD1Ev>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	4618      	mov	r0, r3
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	0802d020 	.word	0x0802d020

08011364 <_ZN11Screen1ViewD0Ev>:
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7ff ffe7 	bl	8011340 <_ZN11Screen1ViewD1Ev>
 8011372:	21f8      	movs	r1, #248	@ 0xf8
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f019 fd0c 	bl	802ad92 <_ZdlPvj>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4618      	mov	r0, r3
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff fb68 	bl	8010a64 <_ZN15Screen1ViewBaseC1Ev>
 8011394:	4a03      	ldr	r2, [pc, #12]	@ (80113a4 <_ZN11Screen1ViewC1Ev+0x20>)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	601a      	str	r2, [r3, #0]
{

}
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4618      	mov	r0, r3
 801139e:	3708      	adds	r7, #8
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	0802d020 	.word	0x0802d020

080113a8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7ff fc76 	bl	8010ca4 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80113b8:	bf00      	nop
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff fa8c 	bl	80108e8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80113d0:	bf00      	nop
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
    {
 80113e0:	4a04      	ldr	r2, [pc, #16]	@ (80113f4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	601a      	str	r2, [r3, #0]
    }
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr
 80113f4:	0802d06c 	.word	0x0802d06c

080113f8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
    }
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7ff ffe9 	bl	80113d8 <_ZN8touchgfx15TouchControllerD1Ev>
 8011406:	2104      	movs	r1, #4
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f019 fcc2 	bl	802ad92 <_ZdlPvj>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4618      	mov	r0, r3
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8011418:	b480      	push	{r7}
 801141a:	b083      	sub	sp, #12
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8011420:	bf00      	nop
 8011422:	370c      	adds	r7, #12
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr

0801142c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801142c:	b480      	push	{r7}
 801142e:	b085      	sub	sp, #20
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8011438:	2300      	movs	r3, #0
}
 801143a:	4618      	mov	r0, r3
 801143c:	3714      	adds	r7, #20
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr
	...

08011448 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	4a05      	ldr	r2, [pc, #20]	@ (8011468 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	601a      	str	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4618      	mov	r0, r3
 801145a:	f7ff ffbd 	bl	80113d8 <_ZN8touchgfx15TouchControllerD1Ev>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4618      	mov	r0, r3
 8011462:	3708      	adds	r7, #8
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	0802d054 	.word	0x0802d054

0801146c <_ZN20STM32TouchControllerD0Ev>:
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff ffe7 	bl	8011448 <_ZN20STM32TouchControllerD1Ev>
 801147a:	2104      	movs	r1, #4
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f019 fc88 	bl	802ad92 <_ZdlPvj>
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4618      	mov	r0, r3
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 801148c:	b480      	push	{r7}
 801148e:	af00      	add	r7, sp, #0

}
 8011490:	bf00      	nop
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
	...

0801149c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	4603      	mov	r3, r0
 80114a4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80114a6:	79fb      	ldrb	r3, [r7, #7]
 80114a8:	2b03      	cmp	r3, #3
 80114aa:	d80c      	bhi.n	80114c6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80114ac:	a201      	add	r2, pc, #4	@ (adr r2, 80114b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80114ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114b2:	bf00      	nop
 80114b4:	080114c5 	.word	0x080114c5
 80114b8:	080114c5 	.word	0x080114c5
 80114bc:	080114c5 	.word	0x080114c5
 80114c0:	080114c5 	.word	0x080114c5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 80114c4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80114c6:	bf00      	nop
 80114c8:	370c      	adds	r7, #12
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop

080114d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	4603      	mov	r3, r0
 80114dc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80114de:	79fb      	ldrb	r3, [r7, #7]
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d80c      	bhi.n	80114fe <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80114e4:	a201      	add	r2, pc, #4	@ (adr r2, 80114ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80114e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ea:	bf00      	nop
 80114ec:	080114fd 	.word	0x080114fd
 80114f0:	080114fd 	.word	0x080114fd
 80114f4:	080114fd 	.word	0x080114fd
 80114f8:	080114fd 	.word	0x080114fd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80114fc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80114fe:	bf00      	nop
 8011500:	370c      	adds	r7, #12
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr
 801150a:	bf00      	nop

0801150c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
 8011512:	4603      	mov	r3, r0
 8011514:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011516:	79fb      	ldrb	r3, [r7, #7]
 8011518:	2b03      	cmp	r3, #3
 801151a:	d80c      	bhi.n	8011536 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 801151c:	a201      	add	r2, pc, #4	@ (adr r2, 8011524 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011522:	bf00      	nop
 8011524:	08011535 	.word	0x08011535
 8011528:	08011535 	.word	0x08011535
 801152c:	08011535 	.word	0x08011535
 8011530:	08011535 	.word	0x08011535
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8011534:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8011536:	bf00      	nop
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr
 8011542:	bf00      	nop

08011544 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8011544:	b480      	push	{r7}
 8011546:	b083      	sub	sp, #12
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
    {
 801154c:	4a04      	ldr	r2, [pc, #16]	@ (8011560 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	601a      	str	r2, [r3, #0]
    }
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	4618      	mov	r0, r3
 8011556:	370c      	adds	r7, #12
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr
 8011560:	0802d470 	.word	0x0802d470

08011564 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
    }
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f7ff ffe9 	bl	8011544 <_ZN8touchgfx3HALD1Ev>
 8011572:	217c      	movs	r1, #124	@ 0x7c
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f019 fc0c 	bl	802ad92 <_ZdlPvj>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	4618      	mov	r0, r3
 801157e:	3708      	adds	r7, #8
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011584:	b480      	push	{r7}
 8011586:	b083      	sub	sp, #12
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	460b      	mov	r3, r1
 801158e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	78fa      	ldrb	r2, [r7, #3]
 8011594:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2201      	movs	r2, #1
 801159c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 80115a0:	bf00      	nop
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b082      	sub	sp, #8
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	460b      	mov	r3, r1
 80115b6:	807b      	strh	r3, [r7, #2]
 80115b8:	4613      	mov	r3, r2
 80115ba:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80115bc:	4b0c      	ldr	r3, [pc, #48]	@ (80115f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80115be:	881b      	ldrh	r3, [r3, #0]
 80115c0:	887a      	ldrh	r2, [r7, #2]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d304      	bcc.n	80115d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80115c6:	4b0b      	ldr	r3, [pc, #44]	@ (80115f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	883a      	ldrh	r2, [r7, #0]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d205      	bcs.n	80115dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80115d0:	4b09      	ldr	r3, [pc, #36]	@ (80115f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80115d2:	4a0a      	ldr	r2, [pc, #40]	@ (80115fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80115d4:	219e      	movs	r1, #158	@ 0x9e
 80115d6:	480a      	ldr	r0, [pc, #40]	@ (8011600 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80115d8:	f019 fc08 	bl	802adec <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80115dc:	4a09      	ldr	r2, [pc, #36]	@ (8011604 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80115de:	887b      	ldrh	r3, [r7, #2]
 80115e0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80115e2:	4a09      	ldr	r2, [pc, #36]	@ (8011608 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80115e4:	883b      	ldrh	r3, [r7, #0]
 80115e6:	8013      	strh	r3, [r2, #0]
    }
 80115e8:	bf00      	nop
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	20087450 	.word	0x20087450
 80115f4:	20087452 	.word	0x20087452
 80115f8:	0802c444 	.word	0x0802c444
 80115fc:	0802c4a8 	.word	0x0802c4a8
 8011600:	0802c4ec 	.word	0x0802c4ec
 8011604:	20087456 	.word	0x20087456
 8011608:	20087458 	.word	0x20087458

0801160c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 801161a:	2b00      	cmp	r3, #0
 801161c:	d009      	beq.n	8011632 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	685a      	ldr	r2, [r3, #4]
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4610      	mov	r0, r2
 801162c:	4798      	blx	r3
 801162e:	4603      	mov	r3, r0
 8011630:	e000      	b.n	8011634 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8011632:	2300      	movs	r3, #0
    }
 8011634:	4618      	mov	r0, r3
 8011636:	3708      	adds	r7, #8
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <_ZN8touchgfx3HAL5vSyncEv>:
    /**
     * Called by the VSync interrupt.
     *
     * Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 801163c:	b480      	push	{r7}
 801163e:	b083      	sub	sp, #12
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801164a:	3301      	adds	r3, #1
 801164c:	b2da      	uxtb	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 8011654:	bf00      	nop
 8011656:	370c      	adds	r7, #12
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f002 ff3d 	bl	80144e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	33ac      	adds	r3, #172	@ 0xac
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	4798      	blx	r3
    }
 801167a:	bf00      	nop
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}

08011682 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8011682:	b480      	push	{r7}
 8011684:	b083      	sub	sp, #12
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 801168c:	2300      	movs	r3, #0
    }
 801168e:	4618      	mov	r0, r3
 8011690:	370c      	adds	r7, #12
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr
	...

0801169c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	607a      	str	r2, [r7, #4]
 80116a8:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d106      	bne.n	80116be <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80116b0:	4b0f      	ldr	r3, [pc, #60]	@ (80116f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80116b2:	4a10      	ldr	r2, [pc, #64]	@ (80116f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80116b4:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80116b8:	480f      	ldr	r0, [pc, #60]	@ (80116f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80116ba:	f019 fb97 	bl	802adec <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	68ba      	ldr	r2, [r7, #8]
 80116c2:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	bf14      	ite	ne
 80116d0:	2301      	movne	r3, #1
 80116d2:	2300      	moveq	r3, #0
 80116d4:	b2da      	uxtb	r2, r3
 80116d6:	4b09      	ldr	r3, [pc, #36]	@ (80116fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80116d8:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	338c      	adds	r3, #140	@ 0x8c
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	6839      	ldr	r1, [r7, #0]
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	4798      	blx	r3
    }
 80116e8:	bf00      	nop
 80116ea:	3710      	adds	r7, #16
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	0802c530 	.word	0x0802c530
 80116f4:	0802c568 	.word	0x0802c568
 80116f8:	0802c4ec 	.word	0x0802c4ec
 80116fc:	2008745a 	.word	0x2008745a

08011700 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8011700:	b480      	push	{r7}
 8011702:	b083      	sub	sp, #12
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	683a      	ldr	r2, [r7, #0]
 801170e:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	bf14      	ite	ne
 8011716:	2301      	movne	r3, #1
 8011718:	2300      	moveq	r3, #0
 801171a:	b2da      	uxtb	r2, r3
 801171c:	4b03      	ldr	r3, [pc, #12]	@ (801172c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801171e:	701a      	strb	r2, [r3, #0]
    }
 8011720:	bf00      	nop
 8011722:	370c      	adds	r7, #12
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr
 801172c:	2008745b 	.word	0x2008745b

08011730 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011738:	2300      	movs	r3, #0
    }
 801173a:	4618      	mov	r0, r3
 801173c:	370c      	adds	r7, #12
 801173e:	46bd      	mov	sp, r7
 8011740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011744:	4770      	bx	lr

08011746 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8011746:	b580      	push	{r7, lr}
 8011748:	b082      	sub	sp, #8
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
 801174e:	460b      	mov	r3, r1
 8011750:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011756:	2b00      	cmp	r3, #0
 8011758:	d004      	beq.n	8011764 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801175e:	887a      	ldrh	r2, [r7, #2]
 8011760:	4610      	mov	r0, r2
 8011762:	4798      	blx	r3
        }
    }
 8011764:	bf00      	nop
 8011766:	3708      	adds	r7, #8
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}

0801176c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	685a      	ldr	r2, [r3, #4]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	3318      	adds	r3, #24
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	4610      	mov	r0, r2
 8011784:	4798      	blx	r3
 8011786:	4603      	mov	r3, r0
    }
 8011788:	4618      	mov	r0, r3
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d011      	beq.n	80117cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80117a8:	4b14      	ldr	r3, [pc, #80]	@ (80117fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d11e      	bne.n	80117ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80117b0:	4b13      	ldr	r3, [pc, #76]	@ (8011800 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80117b2:	881b      	ldrh	r3, [r3, #0]
 80117b4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80117b6:	4b13      	ldr	r3, [pc, #76]	@ (8011804 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80117b8:	881a      	ldrh	r2, [r3, #0]
 80117ba:	4b11      	ldr	r3, [pc, #68]	@ (8011800 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80117bc:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80117be:	4a11      	ldr	r2, [pc, #68]	@ (8011804 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80117c0:	89bb      	ldrh	r3, [r7, #12]
 80117c2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80117c4:	4b0d      	ldr	r3, [pc, #52]	@ (80117fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80117c6:	2201      	movs	r2, #1
 80117c8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80117ca:	e010      	b.n	80117ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80117cc:	4b0b      	ldr	r3, [pc, #44]	@ (80117fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d00c      	beq.n	80117ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80117d4:	4b0a      	ldr	r3, [pc, #40]	@ (8011800 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80117d6:	881b      	ldrh	r3, [r3, #0]
 80117d8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80117da:	4b0a      	ldr	r3, [pc, #40]	@ (8011804 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80117dc:	881a      	ldrh	r2, [r3, #0]
 80117de:	4b08      	ldr	r3, [pc, #32]	@ (8011800 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80117e0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80117e2:	4a08      	ldr	r2, [pc, #32]	@ (8011804 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80117e4:	89fb      	ldrh	r3, [r7, #14]
 80117e6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80117e8:	4b04      	ldr	r3, [pc, #16]	@ (80117fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80117ea:	2200      	movs	r2, #0
 80117ec:	701a      	strb	r2, [r3, #0]
    }
 80117ee:	bf00      	nop
 80117f0:	3714      	adds	r7, #20
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	20087454 	.word	0x20087454
 8011800:	20087452 	.word	0x20087452
 8011804:	20087450 	.word	0x20087450

08011808 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
    {
    }
 8011810:	bf00      	nop
 8011812:	370c      	adds	r7, #12
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr

0801181c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 801181c:	b480      	push	{r7}
 801181e:	b083      	sub	sp, #12
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
    {
    }
 8011824:	bf00      	nop
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <_ZN8touchgfx8HALGPU2DD1Ev>:

#include <nema_cmdlist.h>

namespace touchgfx
{
class HALGPU2D : public touchgfx::HAL
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	4a05      	ldr	r2, [pc, #20]	@ (8011850 <_ZN8touchgfx8HALGPU2DD1Ev+0x20>)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	601a      	str	r2, [r3, #0]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4618      	mov	r0, r3
 8011842:	f7ff fe7f 	bl	8011544 <_ZN8touchgfx3HALD1Ev>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4618      	mov	r0, r3
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	0802da2c 	.word	0x0802da2c

08011854 <_ZN8touchgfx8HALGPU2DD0Ev>:
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f7ff ffe7 	bl	8011830 <_ZN8touchgfx8HALGPU2DD1Ev>
 8011862:	21a8      	movs	r1, #168	@ 0xa8
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f019 fa94 	bl	802ad92 <_ZdlPvj>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4618      	mov	r0, r3
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4618      	mov	r0, r3
 8011880:	f002 f883 	bl	801398a <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011884:	bf00      	nop
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HALGPU2D
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	4a05      	ldr	r2, [pc, #20]	@ (80118ac <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4618      	mov	r0, r3
 801189e:	f7ff ffc7 	bl	8011830 <_ZN8touchgfx8HALGPU2DD1Ev>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	4618      	mov	r0, r3
 80118a6:	3708      	adds	r7, #8
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	0802d2a4 	.word	0x0802d2a4

080118b0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7ff ffe7 	bl	801188c <_ZN20TouchGFXGeneratedHALD1Ev>
 80118be:	21a8      	movs	r1, #168	@ 0xa8
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f019 fa66 	bl	802ad92 <_ZdlPvj>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7ff ffca 	bl	8011874 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80118e0:	bf00      	nop
 80118e2:	3708      	adds	r7, #8
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <__NVIC_EnableIRQ>:
{
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	4603      	mov	r3, r0
 80118f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80118f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	db0b      	blt.n	8011912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80118fa:	88fb      	ldrh	r3, [r7, #6]
 80118fc:	f003 021f 	and.w	r2, r3, #31
 8011900:	4907      	ldr	r1, [pc, #28]	@ (8011920 <__NVIC_EnableIRQ+0x38>)
 8011902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011906:	095b      	lsrs	r3, r3, #5
 8011908:	2001      	movs	r0, #1
 801190a:	fa00 f202 	lsl.w	r2, r0, r2
 801190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011912:	bf00      	nop
 8011914:	370c      	adds	r7, #12
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	e000e100 	.word	0xe000e100

08011924 <__NVIC_DisableIRQ>:
{
 8011924:	b480      	push	{r7}
 8011926:	b083      	sub	sp, #12
 8011928:	af00      	add	r7, sp, #0
 801192a:	4603      	mov	r3, r0
 801192c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801192e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011932:	2b00      	cmp	r3, #0
 8011934:	db12      	blt.n	801195c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011936:	88fb      	ldrh	r3, [r7, #6]
 8011938:	f003 021f 	and.w	r2, r3, #31
 801193c:	490a      	ldr	r1, [pc, #40]	@ (8011968 <__NVIC_DisableIRQ+0x44>)
 801193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011942:	095b      	lsrs	r3, r3, #5
 8011944:	2001      	movs	r0, #1
 8011946:	fa00 f202 	lsl.w	r2, r0, r2
 801194a:	3320      	adds	r3, #32
 801194c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011950:	f3bf 8f4f 	dsb	sy
}
 8011954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011956:	f3bf 8f6f 	isb	sy
}
 801195a:	bf00      	nop
}
 801195c:	bf00      	nop
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr
 8011968:	e000e100 	.word	0xe000e100

0801196c <_ZN11TouchGFXHAL10initializeEv>:
#include <touchgfx/hal/GPIO.hpp>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	4618      	mov	r0, r3
 8011978:	f001 faec 	bl	8012f54 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801197c:	bf00      	nop
 801197e:	3708      	adds	r7, #8
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	4618      	mov	r0, r3
 8011990:	f001 fb8e 	bl	80130b0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011994:	4603      	mov	r3, r0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b082      	sub	sp, #8
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6839      	ldr	r1, [r7, #0]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f001 fb8d 	bl	80130cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80119b2:	bf00      	nop
 80119b4:	3708      	adds	r7, #8
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b082      	sub	sp, #8
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
 80119c2:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6839      	ldr	r1, [r7, #0]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f001 fb95 	bl	80130f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80119ce:	bf00      	nop
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b084      	sub	sp, #16
 80119da:	af00      	add	r7, sp, #0
 80119dc:	60f8      	str	r0, [r7, #12]
 80119de:	60b9      	str	r1, [r7, #8]
 80119e0:	607a      	str	r2, [r7, #4]
 80119e2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	68b9      	ldr	r1, [r7, #8]
 80119ec:	f001 fb92 	bl	8013114 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80119f0:	4603      	mov	r3, r0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3710      	adds	r7, #16
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}

080119fa <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b082      	sub	sp, #8
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f001 fad5 	bl	8012fb4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011a0a:	bf00      	nop
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b082      	sub	sp, #8
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

	NVIC_EnableIRQ(DSI_IRQn);
 8011a1a:	2089      	movs	r0, #137	@ 0x89
 8011a1c:	f7ff ff64 	bl	80118e8 <__NVIC_EnableIRQ>

    TouchGFXGeneratedHAL::enableInterrupts();
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4618      	mov	r0, r3
 8011a24:	f001 fada 	bl	8012fdc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011a28:	bf00      	nop
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

	NVIC_DisableIRQ(DSI_IRQn);
 8011a38:	2089      	movs	r0, #137	@ 0x89
 8011a3a:	f7ff ff73 	bl	8011924 <__NVIC_DisableIRQ>

    TouchGFXGeneratedHAL::disableInterrupts();
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	4618      	mov	r0, r3
 8011a42:	f001 fadc 	bl	8012ffe <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011a46:	bf00      	nop
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}

08011a4e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011a4e:	b580      	push	{r7, lr}
 8011a50:	b082      	sub	sp, #8
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f001 fae1 	bl	8013020 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011a5e:	bf00      	nop
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b082      	sub	sp, #8
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	f001 fb03 	bl	801307c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011a76:	4603      	mov	r3, r0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
	static bool display_on = false;

    if (!display_on)
 8011a88:	4b08      	ldr	r3, [pc, #32]	@ (8011aac <_ZN11TouchGFXHAL8endFrameEv+0x2c>)
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	f083 0301 	eor.w	r3, r3, #1
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d002      	beq.n	8011a9c <_ZN11TouchGFXHAL8endFrameEv+0x1c>
    {
        display_on = true;
 8011a96:	4b05      	ldr	r3, [pc, #20]	@ (8011aac <_ZN11TouchGFXHAL8endFrameEv+0x2c>)
 8011a98:	2201      	movs	r2, #1
 8011a9a:	701a      	strb	r2, [r3, #0]

//    	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
//        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, DSI_SET_DISPLAY_ON, 0x00);
    }

    TouchGFXGeneratedHAL::endFrame();
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f001 faf9 	bl	8013096 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011aa4:	bf00      	nop
 8011aa6:	3708      	adds	r7, #8
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	200859e4 	.word	0x200859e4

08011ab0 <HAL_DSI_TearingEffectCallback>:


void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
 {
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
   GPIO::set(GPIO::VSYNC_FREQ);
 8011ab8:	2000      	movs	r0, #0
 8011aba:	f7ff fcef 	bl	801149c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
   HAL::getInstance()->vSync();
 8011abe:	f7fd ffbb 	bl	800fa38 <_ZN8touchgfx3HAL11getInstanceEv>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7ff fdb9 	bl	801163c <_ZN8touchgfx3HAL5vSyncEv>
   OSWrappers::signalVSync();
 8011aca:	f000 f93b 	bl	8011d44 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
//     // any effect if already swapped.
//     HAL::getInstance()->swapFrameBuffers();
//   }

   // Transfer frame buffer data
   HAL_DSI_Refresh(hdsi);
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f7f4 f90e 	bl	8005cf0 <HAL_DSI_Refresh>
 }//
 8011ad4:	bf00      	nop
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <HAL_DSI_EndOfRefreshCallback>:

 void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
 {
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
//   __HAL_DSI_WRAPPER_DISABLE(hdsi);
//   LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase);
//   __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
//   __HAL_DSI_WRAPPER_ENABLE(hdsi);

   GPIO::clear(GPIO::VSYNC_FREQ);
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	f7ff fcf5 	bl	80114d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 }
 8011aea:	bf00      	nop
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
	...

08011af4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	4a05      	ldr	r2, [pc, #20]	@ (8011b14 <_ZN11TouchGFXHALD1Ev+0x20>)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	601a      	str	r2, [r3, #0]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7ff fec1 	bl	801188c <_ZN20TouchGFXGeneratedHALD1Ev>
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3708      	adds	r7, #8
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}
 8011b14:	0802d084 	.word	0x0802d084

08011b18 <_ZN11TouchGFXHALD0Ev>:
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7ff ffe7 	bl	8011af4 <_ZN11TouchGFXHALD1Ev>
 8011b26:	21a8      	movs	r1, #168	@ 0xa8
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f019 f932 	bl	802ad92 <_ZdlPvj>
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4618      	mov	r0, r3
 8011b32:	3708      	adds	r7, #8
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b084      	sub	sp, #16
 8011b3c:	af02      	add	r7, sp, #8
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8011b3e:	2334      	movs	r3, #52	@ 0x34
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	2364      	movs	r3, #100	@ 0x64
 8011b44:	4a2b      	ldr	r2, [pc, #172]	@ (8011bf4 <_ZN8touchgfx10OSWrappers10initializeEv+0xbc>)
 8011b46:	492c      	ldr	r1, [pc, #176]	@ (8011bf8 <_ZN8touchgfx10OSWrappers10initializeEv+0xc0>)
 8011b48:	482c      	ldr	r0, [pc, #176]	@ (8011bfc <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8011b4a:	f7fc ff83 	bl	800ea54 <_txe_byte_pool_create>
 8011b4e:	4603      	mov	r3, r0
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	bf14      	ite	ne
 8011b54:	2301      	movne	r3, #1
 8011b56:	2300      	moveq	r3, #0
 8011b58:	b2db      	uxtb	r3, r3
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d005      	beq.n	8011b6a <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 8011b5e:	4b28      	ldr	r3, [pc, #160]	@ (8011c00 <_ZN8touchgfx10OSWrappers10initializeEv+0xc8>)
 8011b60:	4a28      	ldr	r2, [pc, #160]	@ (8011c04 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011b62:	2138      	movs	r1, #56	@ 0x38
 8011b64:	4828      	ldr	r0, [pc, #160]	@ (8011c08 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011b66:	f019 f941 	bl	802adec <__assert_func>
    }

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8011b6a:	1d39      	adds	r1, r7, #4
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	2204      	movs	r2, #4
 8011b70:	4822      	ldr	r0, [pc, #136]	@ (8011bfc <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8011b72:	f7fc fefb 	bl	800e96c <_txe_byte_allocate>
 8011b76:	4603      	mov	r3, r0
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	bf14      	ite	ne
 8011b7c:	2301      	movne	r3, #1
 8011b7e:	2300      	moveq	r3, #0
 8011b80:	b2db      	uxtb	r3, r3
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d005      	beq.n	8011b92 <_ZN8touchgfx10OSWrappers10initializeEv+0x5a>
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 8011b86:	4b21      	ldr	r3, [pc, #132]	@ (8011c0c <_ZN8touchgfx10OSWrappers10initializeEv+0xd4>)
 8011b88:	4a1e      	ldr	r2, [pc, #120]	@ (8011c04 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011b8a:	213f      	movs	r1, #63	@ 0x3f
 8011b8c:	481e      	ldr	r0, [pc, #120]	@ (8011c08 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011b8e:	f019 f92d 	bl	802adec <__assert_func>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2238      	movs	r2, #56	@ 0x38
 8011b96:	9201      	str	r2, [sp, #4]
 8011b98:	2204      	movs	r2, #4
 8011b9a:	9200      	str	r2, [sp, #0]
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	491c      	ldr	r1, [pc, #112]	@ (8011c10 <_ZN8touchgfx10OSWrappers10initializeEv+0xd8>)
 8011ba0:	481c      	ldr	r0, [pc, #112]	@ (8011c14 <_ZN8touchgfx10OSWrappers10initializeEv+0xdc>)
 8011ba2:	f7fc fff7 	bl	800eb94 <_txe_queue_create>
 8011ba6:	4603      	mov	r3, r0
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	bf14      	ite	ne
 8011bac:	2301      	movne	r3, #1
 8011bae:	2300      	moveq	r3, #0
 8011bb0:	b2db      	uxtb	r3, r3
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d005      	beq.n	8011bc2 <_ZN8touchgfx10OSWrappers10initializeEv+0x8a>
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 8011bb6:	4b18      	ldr	r3, [pc, #96]	@ (8011c18 <_ZN8touchgfx10OSWrappers10initializeEv+0xe0>)
 8011bb8:	4a12      	ldr	r2, [pc, #72]	@ (8011c04 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011bba:	2146      	movs	r1, #70	@ 0x46
 8011bbc:	4812      	ldr	r0, [pc, #72]	@ (8011c08 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011bbe:	f019 f915 	bl	802adec <__assert_func>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 8011bc2:	231c      	movs	r3, #28
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	4915      	ldr	r1, [pc, #84]	@ (8011c1c <_ZN8touchgfx10OSWrappers10initializeEv+0xe4>)
 8011bc8:	4815      	ldr	r0, [pc, #84]	@ (8011c20 <_ZN8touchgfx10OSWrappers10initializeEv+0xe8>)
 8011bca:	f7fd f927 	bl	800ee1c <_txe_semaphore_create>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	bf14      	ite	ne
 8011bd4:	2301      	movne	r3, #1
 8011bd6:	2300      	moveq	r3, #0
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d005      	beq.n	8011bea <_ZN8touchgfx10OSWrappers10initializeEv+0xb2>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 8011bde:	4b11      	ldr	r3, [pc, #68]	@ (8011c24 <_ZN8touchgfx10OSWrappers10initializeEv+0xec>)
 8011be0:	4a08      	ldr	r2, [pc, #32]	@ (8011c04 <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8011be2:	214c      	movs	r1, #76	@ 0x4c
 8011be4:	4808      	ldr	r0, [pc, #32]	@ (8011c08 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8011be6:	f019 f901 	bl	802adec <__assert_func>
    }
}
 8011bea:	bf00      	nop
 8011bec:	3708      	adds	r7, #8
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	200859e8 	.word	0x200859e8
 8011bf8:	0802c5b8 	.word	0x0802c5b8
 8011bfc:	20085a4c 	.word	0x20085a4c
 8011c00:	0802c5cc 	.word	0x0802c5cc
 8011c04:	0802c5fc 	.word	0x0802c5fc
 8011c08:	0802c62c 	.word	0x0802c62c
 8011c0c:	0802c658 	.word	0x0802c658
 8011c10:	0802c698 	.word	0x0802c698
 8011c14:	20085a9c 	.word	0x20085a9c
 8011c18:	0802c6ac 	.word	0x0802c6ac
 8011c1c:	0802c6dc 	.word	0x0802c6dc
 8011c20:	20085a80 	.word	0x20085a80
 8011c24:	0802c6f4 	.word	0x0802c6f4

08011c28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 8011c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8011c30:	4809      	ldr	r0, [pc, #36]	@ (8011c58 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 8011c32:	f7fd f989 	bl	800ef48 <_txe_semaphore_get>
 8011c36:	4603      	mov	r3, r0
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	bf14      	ite	ne
 8011c3c:	2301      	movne	r3, #1
 8011c3e:	2300      	moveq	r3, #0
 8011c40:	b2db      	uxtb	r3, r3
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d005      	beq.n	8011c52 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 8011c46:	4b05      	ldr	r3, [pc, #20]	@ (8011c5c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8011c48:	4a05      	ldr	r2, [pc, #20]	@ (8011c60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 8011c4a:	2157      	movs	r1, #87	@ 0x57
 8011c4c:	4805      	ldr	r0, [pc, #20]	@ (8011c64 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x3c>)
 8011c4e:	f019 f8cd 	bl	802adec <__assert_func>
    }
}
 8011c52:	bf00      	nop
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	20085a80 	.word	0x20085a80
 8011c5c:	0802c724 	.word	0x0802c724
 8011c60:	0802c750 	.word	0x0802c750
 8011c64:	0802c62c 	.word	0x0802c62c

08011c68 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	af00      	add	r7, sp, #0
    if (!frame_buffer_sem.tx_semaphore_count)
 8011c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8011c9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d110      	bne.n	8011c96 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8011c74:	4809      	ldr	r0, [pc, #36]	@ (8011c9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8011c76:	f7fd f9a9 	bl	800efcc <_txe_semaphore_put>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	bf14      	ite	ne
 8011c80:	2301      	movne	r3, #1
 8011c82:	2300      	moveq	r3, #0
 8011c84:	b2db      	uxtb	r3, r3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d005      	beq.n	8011c96 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8011c8a:	4b05      	ldr	r3, [pc, #20]	@ (8011ca0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x38>)
 8011c8c:	4a05      	ldr	r2, [pc, #20]	@ (8011ca4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x3c>)
 8011c8e:	2164      	movs	r1, #100	@ 0x64
 8011c90:	4805      	ldr	r0, [pc, #20]	@ (8011ca8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x40>)
 8011c92:	f019 f8ab 	bl	802adec <__assert_func>
        }
    }
}
 8011c96:	bf00      	nop
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	20085a80 	.word	0x20085a80
 8011ca0:	0802c790 	.word	0x0802c790
 8011ca4:	0802c7bc 	.word	0x0802c7bc
 8011ca8:	0802c62c 	.word	0x0802c62c

08011cac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8011cb0:	2100      	movs	r1, #0
 8011cb2:	4803      	ldr	r0, [pc, #12]	@ (8011cc0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011cb4:	f7fd f948 	bl	800ef48 <_txe_semaphore_get>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
    {
        // Typically we should inform the requester about failing to get this semaphore
        // Maybe we should update the prototype of this method to return the result of the try
        // assert(0 && "Failed to get FrameBuffer Semaphore!");
    }
}
 8011cbc:	bf00      	nop
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	20085a80 	.word	0x20085a80

08011cc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011cca:	f3ef 8310 	mrs	r3, PRIMASK
 8011cce:	60bb      	str	r3, [r7, #8]
    return(posture);
 8011cd0:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8011cd2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011cd4:	b672      	cpsid	i
    return(int_posture);
 8011cd6:	687b      	ldr	r3, [r7, #4]
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
 8011cd8:	60fb      	str	r3, [r7, #12]
    _tx_thread_preempt_disable++;
 8011cda:	4b15      	ldr	r3, [pc, #84]	@ (8011d30 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	3301      	adds	r3, #1
 8011ce0:	4a13      	ldr	r2, [pc, #76]	@ (8011d30 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011ce2:	6013      	str	r3, [r2, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 8011ce4:	4b13      	ldr	r3, [pc, #76]	@ (8011d34 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8011ce6:	689b      	ldr	r3, [r3, #8]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d110      	bne.n	8011d0e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8011cec:	4811      	ldr	r0, [pc, #68]	@ (8011d34 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8011cee:	f7fd f96d 	bl	800efcc <_txe_semaphore_put>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	bf14      	ite	ne
 8011cf8:	2301      	movne	r3, #1
 8011cfa:	2300      	moveq	r3, #0
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d005      	beq.n	8011d0e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8011d02:	4b0d      	ldr	r3, [pc, #52]	@ (8011d38 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x74>)
 8011d04:	4a0d      	ldr	r2, [pc, #52]	@ (8011d3c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x78>)
 8011d06:	218a      	movs	r1, #138	@ 0x8a
 8011d08:	480d      	ldr	r0, [pc, #52]	@ (8011d40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x7c>)
 8011d0a:	f019 f86f 	bl	802adec <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 8011d0e:	4b08      	ldr	r3, [pc, #32]	@ (8011d30 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3b01      	subs	r3, #1
 8011d14:	4a06      	ldr	r2, [pc, #24]	@ (8011d30 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8011d16:	6013      	str	r3, [r2, #0]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	f383 8810 	msr	PRIMASK, r3
}
 8011d22:	bf00      	nop
    TX_RESTORE;
    _tx_thread_system_preempt_check();
 8011d24:	f7fc f90c 	bl	800df40 <_tx_thread_system_preempt_check>
}
 8011d28:	bf00      	nop
 8011d2a:	3710      	adds	r7, #16
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}
 8011d30:	20085318 	.word	0x20085318
 8011d34:	20085a80 	.word	0x20085a80
 8011d38:	0802c790 	.word	0x0802c790
 8011d3c:	0802c7fc 	.word	0x0802c7fc
 8011d40:	0802c62c 	.word	0x0802c62c

08011d44 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b082      	sub	sp, #8
 8011d48:	af00      	add	r7, sp, #0
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 8011d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8011d78 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8011d4c:	691b      	ldr	r3, [r3, #16]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d10e      	bne.n	8011d70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8011d52:	2200      	movs	r2, #0
 8011d54:	4909      	ldr	r1, [pc, #36]	@ (8011d7c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
 8011d56:	4808      	ldr	r0, [pc, #32]	@ (8011d78 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8011d58:	f7fd f816 	bl	800ed88 <_txe_queue_send>
 8011d5c:	6078      	str	r0, [r7, #4]
        if (ret != TX_SUCCESS)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d005      	beq.n	8011d70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8011d64:	4b06      	ldr	r3, [pc, #24]	@ (8011d80 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x3c>)
 8011d66:	4a07      	ldr	r2, [pc, #28]	@ (8011d84 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8011d68:	21a6      	movs	r1, #166	@ 0xa6
 8011d6a:	4807      	ldr	r0, [pc, #28]	@ (8011d88 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8011d6c:	f019 f83e 	bl	802adec <__assert_func>
        }
    }
}
 8011d70:	bf00      	nop
 8011d72:	3708      	adds	r7, #8
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	20085a9c 	.word	0x20085a9c
 8011d7c:	20000014 	.word	0x20000014
 8011d80:	0802c840 	.word	0x0802c840
 8011d84:	0802c860 	.word	0x0802c860
 8011d88:	0802c62c 	.word	0x0802c62c

08011d8c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8011d92:	2200      	movs	r2, #0
 8011d94:	490f      	ldr	r1, [pc, #60]	@ (8011dd4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8011d96:	4810      	ldr	r0, [pc, #64]	@ (8011dd8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8011d98:	f7fc ffac 	bl	800ecf4 <_txe_queue_receive>
 8011d9c:	6078      	str	r0, [r7, #4]

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d002      	beq.n	8011daa <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b0a      	cmp	r3, #10
 8011da8:	d106      	bne.n	8011db8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        // Then, wait for next VSYNC to occur.
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 8011daa:	f04f 32ff 	mov.w	r2, #4294967295
 8011dae:	4909      	ldr	r1, [pc, #36]	@ (8011dd4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8011db0:	4809      	ldr	r0, [pc, #36]	@ (8011dd8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8011db2:	f7fc ff9f 	bl	800ecf4 <_txe_queue_receive>
 8011db6:	6078      	str	r0, [r7, #4]
    }

    if (ret != TX_SUCCESS)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d005      	beq.n	8011dca <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3e>
    {
        assert(0 && "Failed to Wait for Vsync!");
 8011dbe:	4b07      	ldr	r3, [pc, #28]	@ (8011ddc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x50>)
 8011dc0:	4a07      	ldr	r2, [pc, #28]	@ (8011de0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x54>)
 8011dc2:	21c9      	movs	r1, #201	@ 0xc9
 8011dc4:	4807      	ldr	r0, [pc, #28]	@ (8011de4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x58>)
 8011dc6:	f019 f811 	bl	802adec <__assert_func>
    }
}
 8011dca:	bf00      	nop
 8011dcc:	3708      	adds	r7, #8
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	20000014 	.word	0x20000014
 8011dd8:	20085a9c 	.word	0x20085a9c
 8011ddc:	0802c890 	.word	0x0802c890
 8011de0:	0802c8b4 	.word	0x0802c8b4
 8011de4:	0802c62c 	.word	0x0802c62c

08011de8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	4603      	mov	r3, r0
 8011df0:	80fb      	strh	r3, [r7, #6]
    tx_thread_sleep(ms);
 8011df2:	88fb      	ldrh	r3, [r7, #6]
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fc f823 	bl	800de40 <_tx_thread_sleep>
}
 8011dfa:	bf00      	nop
 8011dfc:	3708      	adds	r7, #8
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
	...

08011e04 <__NVIC_EnableIRQ>:
{
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	db0b      	blt.n	8011e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011e16:	88fb      	ldrh	r3, [r7, #6]
 8011e18:	f003 021f 	and.w	r2, r3, #31
 8011e1c:	4907      	ldr	r1, [pc, #28]	@ (8011e3c <__NVIC_EnableIRQ+0x38>)
 8011e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e22:	095b      	lsrs	r3, r3, #5
 8011e24:	2001      	movs	r0, #1
 8011e26:	fa00 f202 	lsl.w	r2, r0, r2
 8011e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011e2e:	bf00      	nop
 8011e30:	370c      	adds	r7, #12
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr
 8011e3a:	bf00      	nop
 8011e3c:	e000e100 	.word	0xe000e100

08011e40 <__NVIC_DisableIRQ>:
{
 8011e40:	b480      	push	{r7}
 8011e42:	b083      	sub	sp, #12
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	4603      	mov	r3, r0
 8011e48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	db12      	blt.n	8011e78 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011e52:	88fb      	ldrh	r3, [r7, #6]
 8011e54:	f003 021f 	and.w	r2, r3, #31
 8011e58:	490a      	ldr	r1, [pc, #40]	@ (8011e84 <__NVIC_DisableIRQ+0x44>)
 8011e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e5e:	095b      	lsrs	r3, r3, #5
 8011e60:	2001      	movs	r0, #1
 8011e62:	fa00 f202 	lsl.w	r2, r0, r2
 8011e66:	3320      	adds	r3, #32
 8011e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011e6c:	f3bf 8f4f 	dsb	sy
}
 8011e70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011e72:	f3bf 8f6f 	isb	sy
}
 8011e76:	bf00      	nop
}
 8011e78:	bf00      	nop
 8011e7a:	370c      	adds	r7, #12
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr
 8011e84:	e000e100 	.word	0xe000e100

08011e88 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
        : color(0)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2200      	movs	r2, #0
 8011e94:	601a      	str	r2, [r3, #0]
    }
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
        return color;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
    }
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	370c      	adds	r7, #12
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr

08011ebc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011ebc:	b480      	push	{r7}
 8011ebe:	b083      	sub	sp, #12
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
    {
 8011ec4:	4a04      	ldr	r2, [pc, #16]	@ (8011ed8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	601a      	str	r2, [r3, #0]
    }
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr
 8011ed8:	0802d1ac 	.word	0x0802d1ac

08011edc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
    }
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f7ff ffe9 	bl	8011ebc <_ZN8touchgfx9DMA_QueueD1Ev>
 8011eea:	2104      	movs	r1, #4
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f018 ff50 	bl	802ad92 <_ZdlPvj>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3708      	adds	r7, #8
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	3344      	adds	r3, #68	@ 0x44
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	4798      	blx	r3
    }
 8011f10:	bf00      	nop
 8011f12:	3708      	adds	r7, #8
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}

08011f18 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
    {
 8011f20:	4a04      	ldr	r2, [pc, #16]	@ (8011f34 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	601a      	str	r2, [r3, #0]
    }
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr
 8011f34:	0802d548 	.word	0x0802d548

08011f38 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
    }
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7ff ffe9 	bl	8011f18 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011f46:	210c      	movs	r1, #12
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f018 ff22 	bl	802ad92 <_ZdlPvj>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8011f62:	4a09      	ldr	r2, [pc, #36]	@ (8011f88 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	601a      	str	r2, [r3, #0]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	683a      	ldr	r2, [r7, #0]
 8011f6c:	605a      	str	r2, [r3, #4]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2200      	movs	r2, #0
 8011f72:	721a      	strb	r2, [r3, #8]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2200      	movs	r2, #0
 8011f78:	725a      	strb	r2, [r3, #9]
    {
    }
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	370c      	adds	r7, #12
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	0802d548 	.word	0x0802d548

08011f8c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8011f8c:	b480      	push	{r7}
 8011f8e:	b083      	sub	sp, #12
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8011f94:	2301      	movs	r3, #1
    }
 8011f96:	4618      	mov	r0, r3
 8011f98:	370c      	adds	r7, #12
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr

08011fa2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b082      	sub	sp, #8
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011faa:	687a      	ldr	r2, [r7, #4]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	3328      	adds	r3, #40	@ 0x28
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4610      	mov	r0, r2
 8011fb6:	4798      	blx	r3
    }
 8011fb8:	bf00      	nop
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	685a      	ldr	r2, [r3, #4]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	3314      	adds	r3, #20
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	4798      	blx	r3
    }
 8011fda:	bf00      	nop
 8011fdc:	3708      	adds	r7, #8
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}

08011fe2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8011fe2:	b580      	push	{r7, lr}
 8011fe4:	b082      	sub	sp, #8
 8011fe6:	af00      	add	r7, sp, #0
 8011fe8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8011fea:	f7fd fd25 	bl	800fa38 <_ZN8touchgfx3HAL11getInstanceEv>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7ff ffe5 	bl	8011fc0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8011ff6:	bf00      	nop
 8011ff8:	3708      	adds	r7, #8
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}

08011ffe <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8011ffe:	b580      	push	{r7, lr}
 8012000:	b082      	sub	sp, #8
 8012002:	af00      	add	r7, sp, #0
 8012004:	6078      	str	r0, [r7, #4]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	330c      	adds	r3, #12
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff ff3c 	bl	8011e88 <_ZN8touchgfx9colortypeC1Ev>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	4618      	mov	r0, r3
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
	...

0801201c <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 801201c:	b5b0      	push	{r4, r5, r7, lr}
 801201e:	b082      	sub	sp, #8
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	330c      	adds	r3, #12
 801202a:	4619      	mov	r1, r3
 801202c:	4610      	mov	r0, r2
 801202e:	f7ff ff93 	bl	8011f58 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012032:	4a0e      	ldr	r2, [pc, #56]	@ (801206c <_ZN8STM32DMAC1Ev+0x50>)
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	601a      	str	r2, [r3, #0]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f103 000c 	add.w	r0, r3, #12
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	3320      	adds	r3, #32
 8012042:	2260      	movs	r2, #96	@ 0x60
 8012044:	4619      	mov	r1, r3
 8012046:	f002 fb89 	bl	801475c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	3320      	adds	r3, #32
 801204e:	245f      	movs	r4, #95	@ 0x5f
 8012050:	461d      	mov	r5, r3
 8012052:	e004      	b.n	801205e <_ZN8STM32DMAC1Ev+0x42>
 8012054:	4628      	mov	r0, r5
 8012056:	f7ff ffd2 	bl	8011ffe <_ZN8touchgfx6BlitOpC1Ev>
 801205a:	3c01      	subs	r4, #1
 801205c:	3524      	adds	r5, #36	@ 0x24
 801205e:	2c00      	cmp	r4, #0
 8012060:	daf8      	bge.n	8012054 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4618      	mov	r0, r3
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bdb0      	pop	{r4, r5, r7, pc}
 801206c:	0802d15c 	.word	0x0802d15c

08012070 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	4a09      	ldr	r2, [pc, #36]	@ (80120a0 <_ZN8STM32DMAD1Ev+0x30>)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 801207e:	2076      	movs	r0, #118	@ 0x76
 8012080:	f7ff fede 	bl	8011e40 <__NVIC_DisableIRQ>
}
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	330c      	adds	r3, #12
 8012088:	4618      	mov	r0, r3
 801208a:	f000 faaf 	bl	80125ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	4618      	mov	r0, r3
 8012092:	f7ff ff41 	bl	8011f18 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	4618      	mov	r0, r3
 801209a:	3708      	adds	r7, #8
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	0802d15c 	.word	0x0802d15c

080120a4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
}
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f7ff ffdf 	bl	8012070 <_ZN8STM32DMAD1Ev>
 80120b2:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f018 fe6b 	bl	802ad92 <_ZdlPvj>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	4618      	mov	r0, r3
 80120c0:	3708      	adds	r7, #8
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
	...

080120c8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80120d0:	4b12      	ldr	r3, [pc, #72]	@ (801211c <_ZN8STM32DMA10initializeEv+0x54>)
 80120d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120d6:	4a11      	ldr	r2, [pc, #68]	@ (801211c <_ZN8STM32DMA10initializeEv+0x54>)
 80120d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80120dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80120e0:	4b0e      	ldr	r3, [pc, #56]	@ (801211c <_ZN8STM32DMA10initializeEv+0x54>)
 80120e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80120ea:	60fb      	str	r3, [r7, #12]
 80120ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80120ee:	4b0b      	ldr	r3, [pc, #44]	@ (801211c <_ZN8STM32DMA10initializeEv+0x54>)
 80120f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80120f2:	4a0a      	ldr	r2, [pc, #40]	@ (801211c <_ZN8STM32DMA10initializeEv+0x54>)
 80120f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80120f8:	6613      	str	r3, [r2, #96]	@ 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80120fa:	4b08      	ldr	r3, [pc, #32]	@ (801211c <_ZN8STM32DMA10initializeEv+0x54>)
 80120fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80120fe:	4a07      	ldr	r2, [pc, #28]	@ (801211c <_ZN8STM32DMA10initializeEv+0x54>)
 8012100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012104:	6613      	str	r3, [r2, #96]	@ 0x60

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8012106:	4b06      	ldr	r3, [pc, #24]	@ (8012120 <_ZN8STM32DMA10initializeEv+0x58>)
 8012108:	4a06      	ldr	r2, [pc, #24]	@ (8012124 <_ZN8STM32DMA10initializeEv+0x5c>)
 801210a:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 801210c:	2076      	movs	r0, #118	@ 0x76
 801210e:	f7ff fe79 	bl	8011e04 <__NVIC_EnableIRQ>
}
 8012112:	bf00      	nop
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	46020c00 	.word	0x46020c00
 8012120:	20084f9c 	.word	0x20084f9c
 8012124:	08011fe3 	.word	0x08011fe3

08012128 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	460b      	mov	r3, r1
 8012132:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012134:	2300      	movs	r3, #0
 8012136:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012138:	78fb      	ldrb	r3, [r7, #3]
 801213a:	2b0b      	cmp	r3, #11
 801213c:	d826      	bhi.n	801218c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801213e:	a201      	add	r2, pc, #4	@ (adr r2, 8012144 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012144:	08012181 	.word	0x08012181
 8012148:	0801217b 	.word	0x0801217b
 801214c:	08012175 	.word	0x08012175
 8012150:	0801218d 	.word	0x0801218d
 8012154:	0801218d 	.word	0x0801218d
 8012158:	0801218d 	.word	0x0801218d
 801215c:	0801218d 	.word	0x0801218d
 8012160:	08012187 	.word	0x08012187
 8012164:	08012187 	.word	0x08012187
 8012168:	08012187 	.word	0x08012187
 801216c:	08012187 	.word	0x08012187
 8012170:	08012187 	.word	0x08012187
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012174:	2300      	movs	r3, #0
 8012176:	60fb      	str	r3, [r7, #12]
        break;
 8012178:	e00e      	b.n	8012198 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801217a:	2301      	movs	r3, #1
 801217c:	60fb      	str	r3, [r7, #12]
        break;
 801217e:	e00b      	b.n	8012198 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8012180:	2302      	movs	r3, #2
 8012182:	60fb      	str	r3, [r7, #12]
        break;
 8012184:	e008      	b.n	8012198 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8012186:	2305      	movs	r3, #5
 8012188:	60fb      	str	r3, [r7, #12]
        break;
 801218a:	e005      	b.n	8012198 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 801218c:	4b05      	ldr	r3, [pc, #20]	@ (80121a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 801218e:	4a06      	ldr	r2, [pc, #24]	@ (80121a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8012190:	2165      	movs	r1, #101	@ 0x65
 8012192:	4806      	ldr	r0, [pc, #24]	@ (80121ac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8012194:	f018 fe2a 	bl	802adec <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012198:	68fb      	ldr	r3, [r7, #12]
}
 801219a:	4618      	mov	r0, r3
 801219c:	3710      	adds	r7, #16
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	0802c8e8 	.word	0x0802c8e8
 80121a8:	0802c904 	.word	0x0802c904
 80121ac:	0802c950 	.word	0x0802c950

080121b0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	460b      	mov	r3, r1
 80121ba:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80121bc:	2300      	movs	r3, #0
 80121be:	60fb      	str	r3, [r7, #12]

    switch (format)
 80121c0:	78fb      	ldrb	r3, [r7, #3]
 80121c2:	2b0a      	cmp	r3, #10
 80121c4:	d821      	bhi.n	801220a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80121c6:	a201      	add	r2, pc, #4	@ (adr r2, 80121cc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80121c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121cc:	08012205 	.word	0x08012205
 80121d0:	080121ff 	.word	0x080121ff
 80121d4:	080121f9 	.word	0x080121f9
 80121d8:	0801220b 	.word	0x0801220b
 80121dc:	0801220b 	.word	0x0801220b
 80121e0:	0801220b 	.word	0x0801220b
 80121e4:	0801220b 	.word	0x0801220b
 80121e8:	080121ff 	.word	0x080121ff
 80121ec:	080121ff 	.word	0x080121ff
 80121f0:	080121ff 	.word	0x080121ff
 80121f4:	080121ff 	.word	0x080121ff
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80121f8:	2300      	movs	r3, #0
 80121fa:	60fb      	str	r3, [r7, #12]
        break;
 80121fc:	e00b      	b.n	8012216 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80121fe:	2301      	movs	r3, #1
 8012200:	60fb      	str	r3, [r7, #12]
        break;
 8012202:	e008      	b.n	8012216 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8012204:	2302      	movs	r3, #2
 8012206:	60fb      	str	r3, [r7, #12]
        break;
 8012208:	e005      	b.n	8012216 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 801220a:	4b05      	ldr	r3, [pc, #20]	@ (8012220 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 801220c:	4a05      	ldr	r2, [pc, #20]	@ (8012224 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801220e:	2186      	movs	r1, #134	@ 0x86
 8012210:	4805      	ldr	r0, [pc, #20]	@ (8012228 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8012212:	f018 fdeb 	bl	802adec <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012216:	68fb      	ldr	r3, [r7, #12]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3710      	adds	r7, #16
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	0802c8e8 	.word	0x0802c8e8
 8012224:	0802c97c 	.word	0x0802c97c
 8012228:	0802c950 	.word	0x0802c950

0801222c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012234:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 8012238:	4618      	mov	r0, r3
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012244:	b590      	push	{r4, r7, lr}
 8012246:	b089      	sub	sp, #36	@ 0x24
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	7f5b      	ldrb	r3, [r3, #29]
 8012252:	4619      	mov	r1, r3
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7ff ff67 	bl	8012128 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801225a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	7f9b      	ldrb	r3, [r3, #30]
 8012260:	4619      	mov	r1, r3
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f7ff ff60 	bl	8012128 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012268:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	7f9b      	ldrb	r3, [r3, #30]
 801226e:	4619      	mov	r1, r3
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f7ff ff9d 	bl	80121b0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012276:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	8b5b      	ldrh	r3, [r3, #26]
 801227c:	461a      	mov	r2, r3
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	8a9b      	ldrh	r3, [r3, #20]
 8012282:	1ad2      	subs	r2, r2, r3
 8012284:	4b93      	ldr	r3, [pc, #588]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012286:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	8b5b      	ldrh	r3, [r3, #26]
 801228c:	461a      	mov	r2, r3
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	8a9b      	ldrh	r3, [r3, #20]
 8012292:	1ad2      	subs	r2, r2, r3
 8012294:	4b8f      	ldr	r3, [pc, #572]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012296:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	8b1b      	ldrh	r3, [r3, #24]
 801229c:	461a      	mov	r2, r3
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	8a9b      	ldrh	r3, [r3, #20]
 80122a2:	1ad2      	subs	r2, r2, r3
 80122a4:	4b8b      	ldr	r3, [pc, #556]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80122a6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80122a8:	4a8a      	ldr	r2, [pc, #552]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80122aa:	693b      	ldr	r3, [r7, #16]
 80122ac:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	8adb      	ldrh	r3, [r3, #22]
 80122b2:	461a      	mov	r2, r3
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	8a9b      	ldrh	r3, [r3, #20]
 80122b8:	041b      	lsls	r3, r3, #16
 80122ba:	431a      	orrs	r2, r3
 80122bc:	4b85      	ldr	r3, [pc, #532]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80122be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	691a      	ldr	r2, [r3, #16]
 80122c4:	4b83      	ldr	r3, [pc, #524]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80122c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	685a      	ldr	r2, [r3, #4]
 80122cc:	4b81      	ldr	r3, [pc, #516]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80122ce:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122d8:	d038      	beq.n	801234c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x108>
 80122da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122de:	f200 80e6 	bhi.w	80124ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26a>
 80122e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80122e6:	d015      	beq.n	8012314 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80122e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80122ec:	f200 80df 	bhi.w	80124ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26a>
 80122f0:	2b80      	cmp	r3, #128	@ 0x80
 80122f2:	d047      	beq.n	8012384 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>
 80122f4:	2b80      	cmp	r3, #128	@ 0x80
 80122f6:	f200 80da 	bhi.w	80124ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26a>
 80122fa:	2b40      	cmp	r3, #64	@ 0x40
 80122fc:	f000 80c3 	beq.w	8012486 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x242>
 8012300:	2b40      	cmp	r3, #64	@ 0x40
 8012302:	f200 80d4 	bhi.w	80124ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26a>
 8012306:	2b04      	cmp	r3, #4
 8012308:	f000 80a9 	beq.w	801245e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21a>
 801230c:	2b20      	cmp	r3, #32
 801230e:	f000 80ba 	beq.w	8012486 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x242>
 8012312:	e0cc      	b.n	80124ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26a>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	7f1b      	ldrb	r3, [r3, #28]
 8012318:	061b      	lsls	r3, r3, #24
 801231a:	4a6e      	ldr	r2, [pc, #440]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801231c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012320:	f043 030a 	orr.w	r3, r3, #10
 8012324:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	330c      	adds	r3, #12
 801232a:	4c6a      	ldr	r4, [pc, #424]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801232c:	4618      	mov	r0, r3
 801232e:	f7ff fdb9 	bl	8011ea4 <_ZNK8touchgfx9colortypecvmEv>
 8012332:	4603      	mov	r3, r0
 8012334:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012336:	4a67      	ldr	r2, [pc, #412]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	691a      	ldr	r2, [r3, #16]
 8012340:	4b64      	ldr	r3, [pc, #400]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012342:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012344:	4b63      	ldr	r3, [pc, #396]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012346:	4a64      	ldr	r2, [pc, #400]	@ (80124d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012348:	601a      	str	r2, [r3, #0]
        break;
 801234a:	e0d4      	b.n	80124f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	7f1b      	ldrb	r3, [r3, #28]
 8012350:	061b      	lsls	r3, r3, #24
 8012352:	4a60      	ldr	r2, [pc, #384]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012358:	f043 0309 	orr.w	r3, r3, #9
 801235c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	330c      	adds	r3, #12
 8012362:	4c5c      	ldr	r4, [pc, #368]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012364:	4618      	mov	r0, r3
 8012366:	f7ff fd9d 	bl	8011ea4 <_ZNK8touchgfx9colortypecvmEv>
 801236a:	4603      	mov	r3, r0
 801236c:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801236e:	4a59      	ldr	r2, [pc, #356]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	691a      	ldr	r2, [r3, #16]
 8012378:	4b56      	ldr	r3, [pc, #344]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801237a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801237c:	4b55      	ldr	r3, [pc, #340]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801237e:	4a56      	ldr	r2, [pc, #344]	@ (80124d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012380:	601a      	str	r2, [r3, #0]
        break;
 8012382:	e0b8      	b.n	80124f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	689b      	ldr	r3, [r3, #8]
 8012388:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 801238a:	2301      	movs	r3, #1
 801238c:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	7f1b      	ldrb	r3, [r3, #28]
 8012392:	061a      	lsls	r2, r3, #24
 8012394:	69bb      	ldr	r3, [r7, #24]
 8012396:	4313      	orrs	r3, r2
 8012398:	4a4e      	ldr	r2, [pc, #312]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801239a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801239e:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80123a0:	4a4c      	ldr	r2, [pc, #304]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	691a      	ldr	r2, [r3, #16]
 80123aa:	4b4a      	ldr	r3, [pc, #296]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80123ac:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	1d1a      	adds	r2, r3, #4
 80123b2:	4b48      	ldr	r3, [pc, #288]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80123b4:	62da      	str	r2, [r3, #44]	@ 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d002      	beq.n	80123c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x182>
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d00f      	beq.n	80123e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
 80123c4:	e024      	b.n	8012410 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80123c6:	4b43      	ldr	r3, [pc, #268]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80123c8:	69db      	ldr	r3, [r3, #28]
 80123ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80123ce:	f023 0310 	bic.w	r3, r3, #16
 80123d2:	68fa      	ldr	r2, [r7, #12]
 80123d4:	8852      	ldrh	r2, [r2, #2]
 80123d6:	3a01      	subs	r2, #1
 80123d8:	0212      	lsls	r2, r2, #8
 80123da:	4611      	mov	r1, r2
 80123dc:	4a3d      	ldr	r2, [pc, #244]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80123de:	430b      	orrs	r3, r1
 80123e0:	61d3      	str	r3, [r2, #28]
                break;
 80123e2:	e01c      	b.n	801241e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	7f1b      	ldrb	r3, [r3, #28]
 80123e8:	2bff      	cmp	r3, #255	@ 0xff
 80123ea:	d101      	bne.n	80123f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
                {
                    blend = false;
 80123ec:	2300      	movs	r3, #0
 80123ee:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80123f0:	4b38      	ldr	r3, [pc, #224]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80123f2:	69db      	ldr	r3, [r3, #28]
 80123f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80123f8:	f023 0310 	bic.w	r3, r3, #16
 80123fc:	68fa      	ldr	r2, [r7, #12]
 80123fe:	8852      	ldrh	r2, [r2, #2]
 8012400:	3a01      	subs	r2, #1
 8012402:	0212      	lsls	r2, r2, #8
 8012404:	4313      	orrs	r3, r2
 8012406:	4a33      	ldr	r2, [pc, #204]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012408:	f043 0310 	orr.w	r3, r3, #16
 801240c:	61d3      	str	r3, [r2, #28]
                break;
 801240e:	e006      	b.n	801241e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1da>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8012410:	4b32      	ldr	r3, [pc, #200]	@ (80124dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8012412:	4a33      	ldr	r2, [pc, #204]	@ (80124e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012418:	4832      	ldr	r0, [pc, #200]	@ (80124e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801241a:	f018 fce7 	bl	802adec <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 801241e:	4b2d      	ldr	r3, [pc, #180]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012420:	69db      	ldr	r3, [r3, #28]
 8012422:	4a2c      	ldr	r2, [pc, #176]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012424:	f043 0320 	orr.w	r3, r3, #32
 8012428:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 801242a:	bf00      	nop
 801242c:	4b29      	ldr	r3, [pc, #164]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801242e:	69db      	ldr	r3, [r3, #28]
 8012430:	f003 0320 	and.w	r3, r3, #32
 8012434:	2b00      	cmp	r3, #0
 8012436:	bf14      	ite	ne
 8012438:	2301      	movne	r3, #1
 801243a:	2300      	moveq	r3, #0
 801243c:	b2db      	uxtb	r3, r3
 801243e:	2b00      	cmp	r3, #0
 8012440:	d1f4      	bne.n	801242c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e8>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8012442:	4b24      	ldr	r3, [pc, #144]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012444:	2210      	movs	r2, #16
 8012446:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8012448:	7ffb      	ldrb	r3, [r7, #31]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d003      	beq.n	8012456 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801244e:	4b21      	ldr	r3, [pc, #132]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012450:	4a21      	ldr	r2, [pc, #132]	@ (80124d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012452:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8012454:	e04f      	b.n	80124f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8012456:	4b1f      	ldr	r3, [pc, #124]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012458:	4a23      	ldr	r2, [pc, #140]	@ (80124e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801245a:	601a      	str	r2, [r3, #0]
        break;
 801245c:	e04b      	b.n	80124f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	7f1b      	ldrb	r3, [r3, #28]
 8012462:	061a      	lsls	r2, r3, #24
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	4313      	orrs	r3, r2
 8012468:	4a1a      	ldr	r2, [pc, #104]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801246a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801246e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012470:	4a18      	ldr	r2, [pc, #96]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	691a      	ldr	r2, [r3, #16]
 801247a:	4b16      	ldr	r3, [pc, #88]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801247c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801247e:	4b15      	ldr	r3, [pc, #84]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012480:	4a15      	ldr	r2, [pc, #84]	@ (80124d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012482:	601a      	str	r2, [r3, #0]
        break;
 8012484:	e037      	b.n	80124f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	7f1b      	ldrb	r3, [r3, #28]
 801248a:	061a      	lsls	r2, r3, #24
 801248c:	69bb      	ldr	r3, [r7, #24]
 801248e:	4313      	orrs	r3, r2
 8012490:	4a10      	ldr	r2, [pc, #64]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8012492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012496:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012498:	4a0e      	ldr	r2, [pc, #56]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	691a      	ldr	r2, [r3, #16]
 80124a2:	4b0c      	ldr	r3, [pc, #48]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80124a4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80124a6:	4b0b      	ldr	r3, [pc, #44]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80124a8:	4a0b      	ldr	r2, [pc, #44]	@ (80124d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80124aa:	601a      	str	r2, [r3, #0]
        break;
 80124ac:	e023      	b.n	80124f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b2>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	7f1b      	ldrb	r3, [r3, #28]
 80124b2:	061a      	lsls	r2, r3, #24
 80124b4:	69bb      	ldr	r3, [r7, #24]
 80124b6:	4313      	orrs	r3, r2
 80124b8:	4a06      	ldr	r2, [pc, #24]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80124ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124be:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	7f5a      	ldrb	r2, [r3, #29]
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	7f9b      	ldrb	r3, [r3, #30]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d00f      	beq.n	80124ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80124cc:	4b01      	ldr	r3, [pc, #4]	@ (80124d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80124ce:	4a06      	ldr	r2, [pc, #24]	@ (80124e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80124d0:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 80124d2:	e00f      	b.n	80124f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
 80124d4:	4002b000 	.word	0x4002b000
 80124d8:	00020201 	.word	0x00020201
 80124dc:	0802c9c8 	.word	0x0802c9c8
 80124e0:	0802c9e4 	.word	0x0802c9e4
 80124e4:	0802c950 	.word	0x0802c950
 80124e8:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80124ec:	4b04      	ldr	r3, [pc, #16]	@ (8012500 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80124ee:	f240 2201 	movw	r2, #513	@ 0x201
 80124f2:	601a      	str	r2, [r3, #0]
        break;
 80124f4:	bf00      	nop
    }
}
 80124f6:	bf00      	nop
 80124f8:	3724      	adds	r7, #36	@ 0x24
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd90      	pop	{r4, r7, pc}
 80124fe:	bf00      	nop
 8012500:	4002b000 	.word	0x4002b000

08012504 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8012504:	b590      	push	{r4, r7, lr}
 8012506:	b085      	sub	sp, #20
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	7f9b      	ldrb	r3, [r3, #30]
 8012512:	4619      	mov	r1, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7ff fe4b 	bl	80121b0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801251a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 801251c:	4a30      	ldr	r2, [pc, #192]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	8adb      	ldrh	r3, [r3, #22]
 8012526:	461a      	mov	r2, r3
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	8a9b      	ldrh	r3, [r3, #20]
 801252c:	041b      	lsls	r3, r3, #16
 801252e:	431a      	orrs	r2, r3
 8012530:	4b2b      	ldr	r3, [pc, #172]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8012532:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	691a      	ldr	r2, [r3, #16]
 8012538:	4b29      	ldr	r3, [pc, #164]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 801253a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	8b5b      	ldrh	r3, [r3, #26]
 8012540:	461a      	mov	r2, r3
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	8a9b      	ldrh	r3, [r3, #20]
 8012546:	1ad2      	subs	r2, r2, r3
 8012548:	4b25      	ldr	r3, [pc, #148]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 801254a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	2b08      	cmp	r3, #8
 8012552:	d12f      	bne.n	80125b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	8b5b      	ldrh	r3, [r3, #26]
 8012558:	461a      	mov	r2, r3
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	8a9b      	ldrh	r3, [r3, #20]
 801255e:	1ad2      	subs	r2, r2, r3
 8012560:	4b1f      	ldr	r3, [pc, #124]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8012562:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	8b5b      	ldrh	r3, [r3, #26]
 8012568:	461a      	mov	r2, r3
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	8a9b      	ldrh	r3, [r3, #20]
 801256e:	1ad2      	subs	r2, r2, r3
 8012570:	4b1b      	ldr	r3, [pc, #108]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8012572:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012574:	4a1a      	ldr	r2, [pc, #104]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 801257a:	683b      	ldr	r3, [r7, #0]
 801257c:	7f1b      	ldrb	r3, [r3, #28]
 801257e:	061b      	lsls	r3, r3, #24
 8012580:	4a17      	ldr	r2, [pc, #92]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8012582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012586:	f043 0309 	orr.w	r3, r3, #9
 801258a:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	330c      	adds	r3, #12
 8012590:	4c13      	ldr	r4, [pc, #76]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8012592:	4618      	mov	r0, r3
 8012594:	f7ff fc86 	bl	8011ea4 <_ZNK8touchgfx9colortypecvmEv>
 8012598:	4603      	mov	r3, r0
 801259a:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	691a      	ldr	r2, [r3, #16]
 80125a0:	4b0f      	ldr	r3, [pc, #60]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80125a2:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	691a      	ldr	r2, [r3, #16]
 80125a8:	4b0d      	ldr	r3, [pc, #52]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80125aa:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80125ac:	4b0c      	ldr	r3, [pc, #48]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80125ae:	4a0d      	ldr	r2, [pc, #52]	@ (80125e4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 80125b0:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80125b2:	e010      	b.n	80125d6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd2>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80125b4:	4a0a      	ldr	r2, [pc, #40]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80125ba:	4b09      	ldr	r3, [pc, #36]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80125bc:	2200      	movs	r2, #0
 80125be:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	330c      	adds	r3, #12
 80125c4:	4c06      	ldr	r4, [pc, #24]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7ff fc6c 	bl	8011ea4 <_ZNK8touchgfx9colortypecvmEv>
 80125cc:	4603      	mov	r3, r0
 80125ce:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80125d0:	4b03      	ldr	r3, [pc, #12]	@ (80125e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80125d2:	4a05      	ldr	r2, [pc, #20]	@ (80125e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 80125d4:	601a      	str	r2, [r3, #0]
}
 80125d6:	bf00      	nop
 80125d8:	3714      	adds	r7, #20
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd90      	pop	{r4, r7, pc}
 80125de:	bf00      	nop
 80125e0:	4002b000 	.word	0x4002b000
 80125e4:	00020201 	.word	0x00020201
 80125e8:	00030201 	.word	0x00030201

080125ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	4a05      	ldr	r2, [pc, #20]	@ (801260c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	601a      	str	r2, [r3, #0]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7ff fc5d 	bl	8011ebc <_ZN8touchgfx9DMA_QueueD1Ev>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	4618      	mov	r0, r3
 8012606:	3708      	adds	r7, #8
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}
 801260c:	0802d598 	.word	0x0802d598

08012610 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f7ff ffe7 	bl	80125ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801261e:	2114      	movs	r1, #20
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f018 fbb6 	bl	802ad92 <_ZdlPvj>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	4618      	mov	r0, r3
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8012638:	4a04      	ldr	r2, [pc, #16]	@ (801264c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6013      	str	r3, [r2, #0]
    }
 801263e:	bf00      	nop
 8012640:	370c      	adds	r7, #12
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	200874b8 	.word	0x200874b8

08012650 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012650:	b480      	push	{r7}
 8012652:	b085      	sub	sp, #20
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801265e:	4a0b      	ldr	r2, [pc, #44]	@ (801268c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	68ba      	ldr	r2, [r7, #8]
 8012668:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	687a      	ldr	r2, [r7, #4]
 801266e:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	683a      	ldr	r2, [r7, #0]
 8012674:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	69ba      	ldr	r2, [r7, #24]
 801267a:	611a      	str	r2, [r3, #16]
    {
    }
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	4618      	mov	r0, r3
 8012680:	3714      	adds	r7, #20
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	0802d294 	.word	0x0802d294

08012690 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
    {
 8012698:	4a04      	ldr	r2, [pc, #16]	@ (80126ac <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	601a      	str	r2, [r3, #0]
    }
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	4618      	mov	r0, r3
 80126a2:	370c      	adds	r7, #12
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr
 80126ac:	0802d294 	.word	0x0802d294

080126b0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
    }
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7ff ffe9 	bl	8012690 <_ZN8touchgfx7MVPHeapD1Ev>
 80126be:	2114      	movs	r1, #20
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f018 fb66 	bl	802ad92 <_ZdlPvj>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	4618      	mov	r0, r3
 80126ca:	3708      	adds	r7, #8
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80126d0:	b480      	push	{r7}
 80126d2:	b083      	sub	sp, #12
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
    {
 80126d8:	4a04      	ldr	r2, [pc, #16]	@ (80126ec <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	601a      	str	r2, [r3, #0]
    }
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	370c      	adds	r7, #12
 80126e4:	46bd      	mov	sp, r7
 80126e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ea:	4770      	bx	lr
 80126ec:	0802d708 	.word	0x0802d708

080126f0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
    }
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f7ff ffe9 	bl	80126d0 <_ZN8touchgfx3LCDD1Ev>
 80126fe:	210c      	movs	r1, #12
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f018 fb46 	bl	802ad92 <_ZdlPvj>
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	4618      	mov	r0, r3
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	4618      	mov	r0, r3
 801271e:	f7fd fb5d 	bl	800fddc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8012722:	bf00      	nop
 8012724:	3708      	adds	r7, #8
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
	...

0801272c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af02      	add	r7, sp, #8
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	607a      	str	r2, [r7, #4]
 8012738:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801273a:	68f8      	ldr	r0, [r7, #12]
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	68b9      	ldr	r1, [r7, #8]
 8012746:	f7ff ff83 	bl	8012650 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801274a:	4a04      	ldr	r2, [pc, #16]	@ (801275c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	601a      	str	r2, [r3, #0]
    {

    }
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	4618      	mov	r0, r3
 8012754:	3710      	adds	r7, #16
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	0802d280 	.word	0x0802d280

08012760 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012760:	b580      	push	{r7, lr}
 8012762:	af00      	add	r7, sp, #0
 8012764:	4801      	ldr	r0, [pc, #4]	@ (801276c <__tcf_0+0xc>)
 8012766:	f000 f98d 	bl	8012a84 <_ZN12FrontendHeapD1Ev>
 801276a:	bd80      	pop	{r7, pc}
 801276c:	20085ad4 	.word	0x20085ad4

08012770 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012770:	b580      	push	{r7, lr}
 8012772:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012774:	4b11      	ldr	r3, [pc, #68]	@ (80127bc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012776:	e8d3 3faf 	lda	r3, [r3]
 801277a:	f003 0301 	and.w	r3, r3, #1
 801277e:	2b00      	cmp	r3, #0
 8012780:	bf0c      	ite	eq
 8012782:	2301      	moveq	r3, #1
 8012784:	2300      	movne	r3, #0
 8012786:	b2db      	uxtb	r3, r3
 8012788:	2b00      	cmp	r3, #0
 801278a:	d013      	beq.n	80127b4 <_ZN12FrontendHeap11getInstanceEv+0x44>
 801278c:	480b      	ldr	r0, [pc, #44]	@ (80127bc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801278e:	f018 fb02 	bl	802ad96 <__cxa_guard_acquire>
 8012792:	4603      	mov	r3, r0
 8012794:	2b00      	cmp	r3, #0
 8012796:	bf14      	ite	ne
 8012798:	2301      	movne	r3, #1
 801279a:	2300      	moveq	r3, #0
 801279c:	b2db      	uxtb	r3, r3
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d008      	beq.n	80127b4 <_ZN12FrontendHeap11getInstanceEv+0x44>
 80127a2:	4807      	ldr	r0, [pc, #28]	@ (80127c0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80127a4:	f000 f868 	bl	8012878 <_ZN12FrontendHeapC1Ev>
 80127a8:	4806      	ldr	r0, [pc, #24]	@ (80127c4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80127aa:	f018 fb3d 	bl	802ae28 <atexit>
 80127ae:	4803      	ldr	r0, [pc, #12]	@ (80127bc <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80127b0:	f018 fafd 	bl	802adae <__cxa_guard_release>
        return instance;
 80127b4:	4b02      	ldr	r3, [pc, #8]	@ (80127c0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 80127b6:	4618      	mov	r0, r3
 80127b8:	bd80      	pop	{r7, pc}
 80127ba:	bf00      	nop
 80127bc:	20085d74 	.word	0x20085d74
 80127c0:	20085ad4 	.word	0x20085ad4
 80127c4:	08012761 	.word	0x08012761

080127c8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	4a05      	ldr	r2, [pc, #20]	@ (80127e8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	601a      	str	r2, [r3, #0]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4618      	mov	r0, r3
 80127da:	f7ff ff59 	bl	8012690 <_ZN8touchgfx7MVPHeapD1Ev>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4618      	mov	r0, r3
 80127e2:	3708      	adds	r7, #8
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	0802d280 	.word	0x0802d280

080127ec <_ZN16FrontendHeapBaseD0Ev>:
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7ff ffe7 	bl	80127c8 <_ZN16FrontendHeapBaseD1Ev>
 80127fa:	2114      	movs	r1, #20
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f018 fac8 	bl	802ad92 <_ZdlPvj>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4618      	mov	r0, r3
 8012806:	3708      	adds	r7, #8
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801280c:	b580      	push	{r7, lr}
 801280e:	b082      	sub	sp, #8
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	4618      	mov	r0, r3
 8012818:	f000 fe18 	bl	801344c <_ZN8touchgfx17AbstractPartitionC1Ev>
 801281c:	4a03      	ldr	r2, [pc, #12]	@ (801282c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	4618      	mov	r0, r3
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	0802d24c 	.word	0x0802d24c

08012830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	4618      	mov	r0, r3
 801283c:	f000 fe06 	bl	801344c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012840:	4a03      	ldr	r2, [pc, #12]	@ (8012850 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	601a      	str	r2, [r3, #0]
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4618      	mov	r0, r3
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	0802d218 	.word	0x0802d218

08012854 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	4618      	mov	r0, r3
 8012860:	f000 fdf4 	bl	801344c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012864:	4a03      	ldr	r2, [pc, #12]	@ (8012874 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	601a      	str	r2, [r3, #0]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4618      	mov	r0, r3
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	0802d1e4 	.word	0x0802d1e4

08012878 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012878:	b590      	push	{r4, r7, lr}
 801287a:	b085      	sub	sp, #20
 801287c:	af02      	add	r7, sp, #8
 801287e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f103 0114 	add.w	r1, r3, #20
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f503 7496 	add.w	r4, r3, #300	@ 0x12c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
                     app(model, *this)
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	4623      	mov	r3, r4
 801289e:	f7ff ff45 	bl	801272c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80128a2:	4a18      	ldr	r2, [pc, #96]	@ (8012904 <_ZN12FrontendHeapC1Ev+0x8c>)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	601a      	str	r2, [r3, #0]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	3314      	adds	r3, #20
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7ff ffad 	bl	801280c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	332c      	adds	r3, #44	@ 0x2c
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7ff ffba 	bl	8012830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7ff ffc6 	bl	8012854 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7fe fc3e 	bl	8011150 <_ZN5ModelC1Ev>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	4619      	mov	r1, r3
 80128e4:	f7fe fc1e 	bl	8011124 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80128f0:	4619      	mov	r1, r3
 80128f2:	4610      	mov	r0, r2
 80128f4:	f7ff ff0c 	bl	8012710 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	4618      	mov	r0, r3
 80128fc:	370c      	adds	r7, #12
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd90      	pop	{r4, r7, pc}
 8012902:	bf00      	nop
 8012904:	0802d1d0 	.word	0x0802d1d0

08012908 <_ZN8touchgfx8LCDGPU2DD1Ev>:
class LCDGPU2D : public LCD
{
public:
    LCDGPU2D();

    virtual ~LCDGPU2D()
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
    {
 8012910:	4a05      	ldr	r2, [pc, #20]	@ (8012928 <_ZN8touchgfx8LCDGPU2DD1Ev+0x20>)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	601a      	str	r2, [r3, #0]
    }
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	4618      	mov	r0, r3
 801291a:	f7ff fed9 	bl	80126d0 <_ZN8touchgfx3LCDD1Ev>
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	4618      	mov	r0, r3
 8012922:	3708      	adds	r7, #8
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}
 8012928:	0802e5e0 	.word	0x0802e5e0

0801292c <_ZN8touchgfx8LCDGPU2DD0Ev>:
    virtual ~LCDGPU2D()
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
    }
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff ffe7 	bl	8012908 <_ZN8touchgfx8LCDGPU2DD1Ev>
 801293a:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	f018 fa27 	bl	802ad92 <_ZdlPvj>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	4618      	mov	r0, r3
 8012948:	3708      	adds	r7, #8
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}
	...

08012950 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af02      	add	r7, sp, #8
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	607a      	str	r2, [r7, #4]
 801295c:	603b      	str	r3, [r7, #0]
        touchgfx::HALGPU2D(dma, display, tc, width, height)
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	8bbb      	ldrh	r3, [r7, #28]
 8012962:	9301      	str	r3, [sp, #4]
 8012964:	8b3b      	ldrh	r3, [r7, #24]
 8012966:	9300      	str	r3, [sp, #0]
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	68b9      	ldr	r1, [r7, #8]
 801296e:	f008 fc05 	bl	801b17c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8012972:	4a04      	ldr	r2, [pc, #16]	@ (8012984 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	601a      	str	r2, [r3, #0]
    }
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	4618      	mov	r0, r3
 801297c:	3710      	adds	r7, #16
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
 8012982:	bf00      	nop
 8012984:	0802d2a4 	.word	0x0802d2a4

08012988 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8012988:	b580      	push	{r7, lr}
 801298a:	b086      	sub	sp, #24
 801298c:	af02      	add	r7, sp, #8
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	607a      	str	r2, [r7, #4]
 8012994:	603b      	str	r3, [r7, #0]
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	8bbb      	ldrh	r3, [r7, #28]
 801299a:	9301      	str	r3, [sp, #4]
 801299c:	8b3b      	ldrh	r3, [r7, #24]
 801299e:	9300      	str	r3, [sp, #0]
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	68b9      	ldr	r1, [r7, #8]
 80129a6:	f7ff ffd3 	bl	8012950 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80129aa:	4a04      	ldr	r2, [pc, #16]	@ (80129bc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	601a      	str	r2, [r3, #0]
    }
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	4618      	mov	r0, r3
 80129b4:	3710      	adds	r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	0802d084 	.word	0x0802d084

080129c0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	4a04      	ldr	r2, [pc, #16]	@ (80129dc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	601a      	str	r2, [r3, #0]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	4618      	mov	r0, r3
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr
 80129dc:	0802d06c 	.word	0x0802d06c

080129e0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7ff ffe8 	bl	80129c0 <_ZN8touchgfx15TouchControllerC1Ev>
 80129f0:	4a03      	ldr	r2, [pc, #12]	@ (8012a00 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	601a      	str	r2, [r3, #0]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	3708      	adds	r7, #8
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	0802d054 	.word	0x0802d054

08012a04 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 416, 416);

void touchgfx_init()
{
 8012a04:	b590      	push	{r4, r7, lr}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012a0a:	f7fe f98d 	bl	8010d28 <_ZN14BitmapDatabase11getInstanceEv>
 8012a0e:	4604      	mov	r4, r0
 8012a10:	f7fe f994 	bl	8010d3c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012a14:	4603      	mov	r3, r0
 8012a16:	4619      	mov	r1, r3
 8012a18:	2300      	movs	r3, #0
 8012a1a:	9300      	str	r3, [sp, #0]
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	2200      	movs	r2, #0
 8012a20:	4620      	mov	r0, r4
 8012a22:	f005 fc55 	bl	80182d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8012a26:	480b      	ldr	r0, [pc, #44]	@ (8012a54 <touchgfx_init+0x50>)
 8012a28:	f7ff fe02 	bl	8012630 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	f7fe fab1 	bl	8010f94 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setFrameBufferFormat(Bitmap::RGB888);
 8012a32:	2101      	movs	r1, #1
 8012a34:	4808      	ldr	r0, [pc, #32]	@ (8012a58 <touchgfx_init+0x54>)
 8012a36:	f00c fd93 	bl	801f560 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>

    FontManager::setFontProvider(&fontProvider);
 8012a3a:	4808      	ldr	r0, [pc, #32]	@ (8012a5c <touchgfx_init+0x58>)
 8012a3c:	f005 fbb0 	bl	80181a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8012a40:	f7ff fe96 	bl	8012770 <_ZN12FrontendHeap11getInstanceEv>
 8012a44:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8012a46:	4806      	ldr	r0, [pc, #24]	@ (8012a60 <touchgfx_init+0x5c>)
 8012a48:	f7fe ff90 	bl	801196c <_ZN11TouchGFXHAL10initializeEv>
}
 8012a4c:	bf00      	nop
 8012a4e:	370c      	adds	r7, #12
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd90      	pop	{r4, r7, pc}
 8012a54:	2008736c 	.word	0x2008736c
 8012a58:	20086b1c 	.word	0x20086b1c
 8012a5c:	20000018 	.word	0x20000018
 8012a60:	20087370 	.word	0x20087370

08012a64 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	af00      	add	r7, sp, #0
    nema_init();
 8012a68:	f006 f91e 	bl	8018ca8 <nema_init>
}
 8012a6c:	bf00      	nop
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8012a74:	4802      	ldr	r0, [pc, #8]	@ (8012a80 <touchgfx_taskEntry+0x10>)
 8012a76:	f000 fff2 	bl	8013a5e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8012a7a:	bf00      	nop
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	20087370 	.word	0x20087370

08012a84 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b082      	sub	sp, #8
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	4a10      	ldr	r2, [pc, #64]	@ (8012ad0 <_ZN12FrontendHeapD1Ev+0x4c>)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	601a      	str	r2, [r3, #0]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fe fb0d 	bl	80110b8 <_ZN19FrontendApplicationD1Ev>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f000 f827 	bl	8012af8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	332c      	adds	r3, #44	@ 0x2c
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f000 f844 	bl	8012b3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	3314      	adds	r3, #20
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f000 f863 	bl	8012b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff fe81 	bl	80127c8 <_ZN16FrontendHeapBaseD1Ev>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3708      	adds	r7, #8
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}
 8012ad0:	0802d1d0 	.word	0x0802d1d0

08012ad4 <_ZN12FrontendHeapD0Ev>:
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7ff ffd1 	bl	8012a84 <_ZN12FrontendHeapD1Ev>
 8012ae2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f018 f953 	bl	802ad92 <_ZdlPvj>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	4618      	mov	r0, r3
 8012af0:	3708      	adds	r7, #8
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
	...

08012af8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	4a05      	ldr	r2, [pc, #20]	@ (8012b18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f000 fc9d 	bl	8013448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4618      	mov	r0, r3
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	0802d1e4 	.word	0x0802d1e4

08012b1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b082      	sub	sp, #8
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f7ff ffe7 	bl	8012af8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012b2a:	2114      	movs	r1, #20
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f018 f930 	bl	802ad92 <_ZdlPvj>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4618      	mov	r0, r3
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b082      	sub	sp, #8
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	4a05      	ldr	r2, [pc, #20]	@ (8012b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	601a      	str	r2, [r3, #0]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f000 fc7b 	bl	8013448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4618      	mov	r0, r3
 8012b56:	3708      	adds	r7, #8
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	0802d218 	.word	0x0802d218

08012b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff ffe7 	bl	8012b3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012b6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f018 f90d 	bl	802ad92 <_ZdlPvj>
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3708      	adds	r7, #8
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
	...

08012b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	4a05      	ldr	r2, [pc, #20]	@ (8012ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	601a      	str	r2, [r3, #0]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 fc57 	bl	8013448 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	0802d24c 	.word	0x0802d24c

08012ba8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ff ffe7 	bl	8012b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012bb6:	2118      	movs	r1, #24
 8012bb8:	6878      	ldr	r0, [r7, #4]
 8012bba:	f018 f8ea 	bl	802ad92 <_ZdlPvj>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3708      	adds	r7, #8
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <_Z41__static_initialization_and_destruction_0ii>:
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af02      	add	r7, sp, #8
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	d119      	bne.n	8012c0c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d114      	bne.n	8012c0c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8012be2:	4818      	ldr	r0, [pc, #96]	@ (8012c44 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012be4:	f7ff fefc 	bl	80129e0 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8012be8:	4817      	ldr	r0, [pc, #92]	@ (8012c48 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012bea:	f7ff fa17 	bl	801201c <_ZN8STM32DMAC1Ev>
static LCDGPU2D display;
 8012bee:	4817      	ldr	r0, [pc, #92]	@ (8012c4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012bf0:	f00c fca8 	bl	801f544 <_ZN8touchgfx8LCDGPU2DC1Ev>
static TouchGFXHAL hal(dma, display, tc, 416, 416);
 8012bf4:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8012bf8:	9301      	str	r3, [sp, #4]
 8012bfa:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	4b10      	ldr	r3, [pc, #64]	@ (8012c44 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012c02:	4a12      	ldr	r2, [pc, #72]	@ (8012c4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012c04:	4910      	ldr	r1, [pc, #64]	@ (8012c48 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012c06:	4812      	ldr	r0, [pc, #72]	@ (8012c50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012c08:	f7ff febe 	bl	8012988 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d113      	bne.n	8012c3a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	d10e      	bne.n	8012c3a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8012c1c:	480c      	ldr	r0, [pc, #48]	@ (8012c50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012c1e:	f7fe ff69 	bl	8011af4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8012c22:	480c      	ldr	r0, [pc, #48]	@ (8012c54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8012c24:	f7fc fb74 	bl	800f310 <_ZN23ApplicationFontProviderD1Ev>
static LCDGPU2D display;
 8012c28:	4808      	ldr	r0, [pc, #32]	@ (8012c4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012c2a:	f7ff fe6d 	bl	8012908 <_ZN8touchgfx8LCDGPU2DD1Ev>
static STM32DMA dma;
 8012c2e:	4806      	ldr	r0, [pc, #24]	@ (8012c48 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012c30:	f7ff fa1e 	bl	8012070 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8012c34:	4803      	ldr	r0, [pc, #12]	@ (8012c44 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012c36:	f7fe fc07 	bl	8011448 <_ZN20STM32TouchControllerD1Ev>
}
 8012c3a:	bf00      	nop
 8012c3c:	3708      	adds	r7, #8
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	20085d78 	.word	0x20085d78
 8012c48:	20085d7c 	.word	0x20085d7c
 8012c4c:	20086b1c 	.word	0x20086b1c
 8012c50:	20087370 	.word	0x20087370
 8012c54:	20000018 	.word	0x20000018

08012c58 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8012c60:	2301      	movs	r3, #1
    }
 8012c62:	4618      	mov	r0, r3
 8012c64:	370c      	adds	r7, #12
 8012c66:	46bd      	mov	sp, r7
 8012c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6c:	4770      	bx	lr

08012c6e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8012c6e:	b480      	push	{r7}
 8012c70:	b083      	sub	sp, #12
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8012c76:	230c      	movs	r3, #12
    }
 8012c78:	4618      	mov	r0, r3
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012c90:	887a      	ldrh	r2, [r7, #2]
 8012c92:	4613      	mov	r3, r2
 8012c94:	005b      	lsls	r3, r3, #1
 8012c96:	4413      	add	r3, r2
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	3308      	adds	r3, #8
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	4413      	add	r3, r2
    }
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr

08012cac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	460b      	mov	r3, r1
 8012cb6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012cb8:	887a      	ldrh	r2, [r7, #2]
 8012cba:	4613      	mov	r3, r2
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	4413      	add	r3, r2
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	3308      	adds	r3, #8
 8012cc4:	687a      	ldr	r2, [r7, #4]
 8012cc6:	4413      	add	r3, r2
    }
 8012cc8:	4618      	mov	r0, r3
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012cdc:	2301      	movs	r3, #1
    }
 8012cde:	4618      	mov	r0, r3
 8012ce0:	370c      	adds	r7, #12
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr

08012cea <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012cea:	b480      	push	{r7}
 8012cec:	b083      	sub	sp, #12
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012cf2:	23f8      	movs	r3, #248	@ 0xf8
    }
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr

08012d00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	460b      	mov	r3, r1
 8012d0a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012d0c:	887a      	ldrh	r2, [r7, #2]
 8012d0e:	4613      	mov	r3, r2
 8012d10:	015b      	lsls	r3, r3, #5
 8012d12:	1a9b      	subs	r3, r3, r2
 8012d14:	00db      	lsls	r3, r3, #3
 8012d16:	3308      	adds	r3, #8
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	4413      	add	r3, r2
    }
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	370c      	adds	r7, #12
 8012d20:	46bd      	mov	sp, r7
 8012d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d26:	4770      	bx	lr

08012d28 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012d28:	b480      	push	{r7}
 8012d2a:	b083      	sub	sp, #12
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	460b      	mov	r3, r1
 8012d32:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012d34:	887a      	ldrh	r2, [r7, #2]
 8012d36:	4613      	mov	r3, r2
 8012d38:	015b      	lsls	r3, r3, #5
 8012d3a:	1a9b      	subs	r3, r3, r2
 8012d3c:	00db      	lsls	r3, r3, #3
 8012d3e:	3308      	adds	r3, #8
 8012d40:	687a      	ldr	r2, [r7, #4]
 8012d42:	4413      	add	r3, r2
    }
 8012d44:	4618      	mov	r0, r3
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012d58:	2301      	movs	r3, #1
    }
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	370c      	adds	r7, #12
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d64:	4770      	bx	lr

08012d66 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012d66:	b480      	push	{r7}
 8012d68:	b083      	sub	sp, #12
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012d6e:	2310      	movs	r3, #16
    }
 8012d70:	4618      	mov	r0, r3
 8012d72:	370c      	adds	r7, #12
 8012d74:	46bd      	mov	sp, r7
 8012d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7a:	4770      	bx	lr

08012d7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012d7c:	b480      	push	{r7}
 8012d7e:	b083      	sub	sp, #12
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	460b      	mov	r3, r1
 8012d86:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012d88:	887b      	ldrh	r3, [r7, #2]
 8012d8a:	011b      	lsls	r3, r3, #4
 8012d8c:	3308      	adds	r3, #8
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	4413      	add	r3, r2
    }
 8012d92:	4618      	mov	r0, r3
 8012d94:	370c      	adds	r7, #12
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr

08012d9e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012d9e:	b480      	push	{r7}
 8012da0:	b083      	sub	sp, #12
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]
 8012da6:	460b      	mov	r3, r1
 8012da8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012daa:	887b      	ldrh	r3, [r7, #2]
 8012dac:	011b      	lsls	r3, r3, #4
 8012dae:	3308      	adds	r3, #8
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	4413      	add	r3, r2
    }
 8012db4:	4618      	mov	r0, r3
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr

08012dc0 <_GLOBAL__sub_I_touchgfx_init>:
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012dc8:	2001      	movs	r0, #1
 8012dca:	f7ff fefd 	bl	8012bc8 <_Z41__static_initialization_and_destruction_0ii>
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <_GLOBAL__sub_D_touchgfx_init>:
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	af00      	add	r7, sp, #0
 8012dd4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012dd8:	2000      	movs	r0, #0
 8012dda:	f7ff fef5 	bl	8012bc8 <_Z41__static_initialization_and_destruction_0ii>
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	460b      	mov	r3, r1
 8012dea:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8012dec:	78fb      	ldrb	r3, [r7, #3]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d002      	beq.n	8012df8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8012df2:	78fb      	ldrb	r3, [r7, #3]
 8012df4:	2b02      	cmp	r3, #2
 8012df6:	d105      	bne.n	8012e04 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	78fa      	ldrb	r2, [r7, #3]
 8012dfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 8012e00:	2301      	movs	r3, #1
 8012e02:	e027      	b.n	8012e54 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8012e04:	78fb      	ldrb	r3, [r7, #3]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d123      	bne.n	8012e52 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d014      	beq.n	8012e3c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	339c      	adds	r3, #156	@ 0x9c
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	4798      	blx	r3
 8012e1e:	4603      	mov	r3, r0
 8012e20:	461a      	mov	r2, r3
 8012e22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d008      	beq.n	8012e3c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8012e5c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	f083 0301 	eor.w	r3, r3, #1
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d001      	beq.n	8012e3c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e000      	b.n	8012e3e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d005      	beq.n	8012e4e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	78fa      	ldrb	r2, [r7, #3]
 8012e46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	e002      	b.n	8012e54 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	e000      	b.n	8012e54 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8012e52:	2300      	movs	r3, #0
    }
 8012e54:	4618      	mov	r0, r3
 8012e56:	3708      	adds	r7, #8
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}
 8012e5c:	2008745a 	.word	0x2008745a

08012e60 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	683a      	ldr	r2, [r7, #0]
 8012e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8012e70:	bf00      	nop
 8012e72:	370c      	adds	r7, #12
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr

08012e7c <__NVIC_EnableIRQ>:
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	4603      	mov	r3, r0
 8012e84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	db0b      	blt.n	8012ea6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012e8e:	88fb      	ldrh	r3, [r7, #6]
 8012e90:	f003 021f 	and.w	r2, r3, #31
 8012e94:	4907      	ldr	r1, [pc, #28]	@ (8012eb4 <__NVIC_EnableIRQ+0x38>)
 8012e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e9a:	095b      	lsrs	r3, r3, #5
 8012e9c:	2001      	movs	r0, #1
 8012e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8012ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012ea6:	bf00      	nop
 8012ea8:	370c      	adds	r7, #12
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	e000e100 	.word	0xe000e100

08012eb8 <__NVIC_DisableIRQ>:
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b083      	sub	sp, #12
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	db12      	blt.n	8012ef0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012eca:	88fb      	ldrh	r3, [r7, #6]
 8012ecc:	f003 021f 	and.w	r2, r3, #31
 8012ed0:	490a      	ldr	r1, [pc, #40]	@ (8012efc <__NVIC_DisableIRQ+0x44>)
 8012ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ed6:	095b      	lsrs	r3, r3, #5
 8012ed8:	2001      	movs	r0, #1
 8012eda:	fa00 f202 	lsl.w	r2, r0, r2
 8012ede:	3320      	adds	r3, #32
 8012ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012ee4:	f3bf 8f4f 	dsb	sy
}
 8012ee8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012eea:	f3bf 8f6f 	isb	sy
}
 8012eee:	bf00      	nop
}
 8012ef0:	bf00      	nop
 8012ef2:	370c      	adds	r7, #12
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr
 8012efc:	e000e100 	.word	0xe000e100

08012f00 <__NVIC_SetPriority>:
{
 8012f00:	b480      	push	{r7}
 8012f02:	b083      	sub	sp, #12
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	4603      	mov	r3, r0
 8012f08:	6039      	str	r1, [r7, #0]
 8012f0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	db0a      	blt.n	8012f2a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	b2da      	uxtb	r2, r3
 8012f18:	490c      	ldr	r1, [pc, #48]	@ (8012f4c <__NVIC_SetPriority+0x4c>)
 8012f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f1e:	0112      	lsls	r2, r2, #4
 8012f20:	b2d2      	uxtb	r2, r2
 8012f22:	440b      	add	r3, r1
 8012f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012f28:	e00a      	b.n	8012f40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	b2da      	uxtb	r2, r3
 8012f2e:	4908      	ldr	r1, [pc, #32]	@ (8012f50 <__NVIC_SetPriority+0x50>)
 8012f30:	88fb      	ldrh	r3, [r7, #6]
 8012f32:	f003 030f 	and.w	r3, r3, #15
 8012f36:	3b04      	subs	r3, #4
 8012f38:	0112      	lsls	r2, r2, #4
 8012f3a:	b2d2      	uxtb	r2, r2
 8012f3c:	440b      	add	r3, r1
 8012f3e:	761a      	strb	r2, [r3, #24]
}
 8012f40:	bf00      	nop
 8012f42:	370c      	adds	r7, #12
 8012f44:	46bd      	mov	sp, r7
 8012f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4a:	4770      	bx	lr
 8012f4c:	e000e100 	.word	0xe000e100
 8012f50:	e000ed00 	.word	0xe000ed00

08012f54 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8012f54:	b5b0      	push	{r4, r5, r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
    HALGPU2D::initialize(8192);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8012f62:	4618      	mov	r0, r3
 8012f64:	f008 f972 	bl	801b24c <_ZN8touchgfx8HALGPU2D10initializeEi>
    registerEventListener(*(Application::getInstance()));
 8012f68:	687d      	ldr	r5, [r7, #4]
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	3364      	adds	r3, #100	@ 0x64
 8012f70:	681c      	ldr	r4, [r3, #0]
 8012f72:	f002 fd4f 	bl	8015a14 <_ZN8touchgfx11Application11getInstanceEv>
 8012f76:	4603      	mov	r3, r0
 8012f78:	4619      	mov	r1, r3
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	490a      	ldr	r1, [pc, #40]	@ (8012fac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ff ff6c 	bl	8012e60 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2101      	movs	r1, #1
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7ff ff27 	bl	8012de0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	3388      	adds	r3, #136	@ 0x88
 8012f9a:	681c      	ldr	r4, [r3, #0]
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	4903      	ldr	r1, [pc, #12]	@ (8012fb0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 8012fa2:	47a0      	blx	r4
}
 8012fa4:	bf00      	nop
 8012fa6:	3708      	adds	r7, #8
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bdb0      	pop	{r4, r5, r7, pc}
 8012fac:	08011de9 	.word	0x08011de9
 8012fb0:	200001b8 	.word	0x200001b8

08012fb4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8012fbc:	2109      	movs	r1, #9
 8012fbe:	2076      	movs	r0, #118	@ 0x76
 8012fc0:	f7ff ff9e 	bl	8012f00 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8012fc4:	2109      	movs	r1, #9
 8012fc6:	2087      	movs	r0, #135	@ 0x87
 8012fc8:	f7ff ff9a 	bl	8012f00 <__NVIC_SetPriority>
    NVIC_SetPriority(GPU2D_IRQn, 9);
 8012fcc:	2109      	movs	r1, #9
 8012fce:	2084      	movs	r0, #132	@ 0x84
 8012fd0:	f7ff ff96 	bl	8012f00 <__NVIC_SetPriority>
}
 8012fd4:	bf00      	nop
 8012fd6:	3708      	adds	r7, #8
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}

08012fdc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012fe4:	2076      	movs	r0, #118	@ 0x76
 8012fe6:	f7ff ff49 	bl	8012e7c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8012fea:	2087      	movs	r0, #135	@ 0x87
 8012fec:	f7ff ff46 	bl	8012e7c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(GPU2D_IRQn);
 8012ff0:	2084      	movs	r0, #132	@ 0x84
 8012ff2:	f7ff ff43 	bl	8012e7c <__NVIC_EnableIRQ>
}
 8012ff6:	bf00      	nop
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b082      	sub	sp, #8
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013006:	2076      	movs	r0, #118	@ 0x76
 8013008:	f7ff ff56 	bl	8012eb8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801300c:	2087      	movs	r0, #135	@ 0x87
 801300e:	f7ff ff53 	bl	8012eb8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(GPU2D_IRQn);
 8013012:	2084      	movs	r0, #132	@ 0x84
 8013014:	f7ff ff50 	bl	8012eb8 <__NVIC_DisableIRQ>
}
 8013018:	bf00      	nop
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013020:	b480      	push	{r7}
 8013022:	b083      	sub	sp, #12
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8013028:	4b11      	ldr	r3, [pc, #68]	@ (8013070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801302a:	68db      	ldr	r3, [r3, #12]
 801302c:	b29b      	uxth	r3, r3
 801302e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013032:	b29b      	uxth	r3, r3
 8013034:	3b01      	subs	r3, #1
 8013036:	b29a      	uxth	r2, r3
 8013038:	4b0e      	ldr	r3, [pc, #56]	@ (8013074 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801303a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801303c:	4b0c      	ldr	r3, [pc, #48]	@ (8013070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801303e:	691b      	ldr	r3, [r3, #16]
 8013040:	b29b      	uxth	r3, r3
 8013042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013046:	b29b      	uxth	r3, r3
 8013048:	3b01      	subs	r3, #1
 801304a:	b29a      	uxth	r2, r3
 801304c:	4b0a      	ldr	r3, [pc, #40]	@ (8013078 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801304e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013050:	4b08      	ldr	r3, [pc, #32]	@ (8013074 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013052:	881a      	ldrh	r2, [r3, #0]
 8013054:	4b06      	ldr	r3, [pc, #24]	@ (8013070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013056:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8013058:	4b05      	ldr	r3, [pc, #20]	@ (8013070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801305a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801305c:	4a04      	ldr	r2, [pc, #16]	@ (8013070 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801305e:	f043 0301 	orr.w	r3, r3, #1
 8013062:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8013064:	bf00      	nop
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr
 8013070:	40016800 	.word	0x40016800
 8013074:	20087418 	.word	0x20087418
 8013078:	2008741a 	.word	0x2008741a

0801307c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
    return HALGPU2D::beginFrame();
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	4618      	mov	r0, r3
 8013088:	f008 f80a 	bl	801b0a0 <_ZN8touchgfx8HALGPU2D10beginFrameEv>
 801308c:	4603      	mov	r3, r0
}
 801308e:	4618      	mov	r0, r3
 8013090:	3708      	adds	r7, #8
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}

08013096 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8013096:	b580      	push	{r7, lr}
 8013098:	b082      	sub	sp, #8
 801309a:	af00      	add	r7, sp, #0
 801309c:	6078      	str	r0, [r7, #4]
    HALGPU2D::endFrame();
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	4618      	mov	r0, r3
 80130a2:	f008 f829 	bl	801b0f8 <_ZN8touchgfx8HALGPU2D8endFrameEv>
}
 80130a6:	bf00      	nop
 80130a8:	3708      	adds	r7, #8
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
	...

080130b0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80130b0:	b480      	push	{r7}
 80130b2:	b083      	sub	sp, #12
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80130b8:	4b03      	ldr	r3, [pc, #12]	@ (80130c8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80130ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80130bc:	4618      	mov	r0, r3
 80130be:	370c      	adds	r7, #12
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr
 80130c8:	40016884 	.word	0x40016884

080130cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80130d6:	4a06      	ldr	r2, [pc, #24]	@ (80130f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80130dc:	4b05      	ldr	r3, [pc, #20]	@ (80130f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80130de:	2201      	movs	r2, #1
 80130e0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80130e2:	bf00      	nop
 80130e4:	370c      	adds	r7, #12
 80130e6:	46bd      	mov	sp, r7
 80130e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ec:	4770      	bx	lr
 80130ee:	bf00      	nop
 80130f0:	40016884 	.word	0x40016884
 80130f4:	40016800 	.word	0x40016800

080130f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
    HALGPU2D::flushFrameBuffer(rect);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6839      	ldr	r1, [r7, #0]
 8013106:	4618      	mov	r0, r3
 8013108:	f000 fc45 	bl	8013996 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801310c:	bf00      	nop
 801310e:	3708      	adds	r7, #8
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}

08013114 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	60b9      	str	r1, [r7, #8]
 801311e:	607a      	str	r2, [r7, #4]
 8013120:	603b      	str	r3, [r7, #0]
    return HALGPU2D::blockCopy(dest, src, numBytes);
 8013122:	68f8      	ldr	r0, [r7, #12]
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	68b9      	ldr	r1, [r7, #8]
 801312a:	f000 fda6 	bl	8013c7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801312e:	4603      	mov	r3, r0
}
 8013130:	4618      	mov	r0, r3
 8013132:	3710      	adds	r7, #16
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8013138:	b480      	push	{r7}
 801313a:	b085      	sub	sp, #20
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8013140:	4b0d      	ldr	r3, [pc, #52]	@ (8013178 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013144:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8013146:	4b0c      	ldr	r3, [pc, #48]	@ (8013178 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	b29b      	uxth	r3, r3
 801314c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013150:	b29b      	uxth	r3, r3
 8013152:	3301      	adds	r3, #1
 8013154:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8013156:	89fa      	ldrh	r2, [r7, #14]
 8013158:	89bb      	ldrh	r3, [r7, #12]
 801315a:	429a      	cmp	r2, r3
 801315c:	d304      	bcc.n	8013168 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 801315e:	89fa      	ldrh	r2, [r7, #14]
 8013160:	89bb      	ldrh	r3, [r7, #12]
 8013162:	1ad3      	subs	r3, r2, r3
 8013164:	b29b      	uxth	r3, r3
 8013166:	e000      	b.n	801316a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8013168:	2300      	movs	r3, #0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3714      	adds	r7, #20
 801316e:	46bd      	mov	sp, r7
 8013170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013174:	4770      	bx	lr
 8013176:	bf00      	nop
 8013178:	40016800 	.word	0x40016800

0801317c <HAL_GPU2D_CommandListCpltCallback>:
#if (USE_HAL_GPU2D_REGISTER_CALLBACKS == 1)
static void GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef* hgpu2d, uint32_t CmdListID)
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef* hgpu2d, uint32_t CmdListID)
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	6039      	str	r1, [r7, #0]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(hgpu2d);

    last_cl_id = CmdListID;
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	4a04      	ldr	r2, [pc, #16]	@ (801319c <HAL_GPU2D_CommandListCpltCallback+0x20>)
 801318a:	6013      	str	r3, [r2, #0]

    /* Return a token back to a semaphore */
    tx_semaphore_put(&nema_irq_sem);
 801318c:	4804      	ldr	r0, [pc, #16]	@ (80131a0 <HAL_GPU2D_CommandListCpltCallback+0x24>)
 801318e:	f7fb ff1d 	bl	800efcc <_txe_semaphore_put>
}
 8013192:	bf00      	nop
 8013194:	3708      	adds	r7, #8
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	2000001c 	.word	0x2000001c
 80131a0:	20087434 	.word	0x20087434

080131a4 <nema_sys_init>:

int32_t nema_sys_init(void)
{
 80131a4:	b590      	push	{r4, r7, lr}
 80131a6:	b089      	sub	sp, #36	@ 0x24
 80131a8:	af02      	add	r7, sp, #8
    int error_code = 0;
 80131aa:	2300      	movs	r3, #0
 80131ac:	617b      	str	r3, [r7, #20]
    /* Register Command List Comlete Callback */
    HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Create IRQ semaphore */
    error_code = tx_semaphore_create(&nema_irq_sem, "nema sema irq", 0);
 80131ae:	231c      	movs	r3, #28
 80131b0:	2200      	movs	r2, #0
 80131b2:	4925      	ldr	r1, [pc, #148]	@ (8013248 <nema_sys_init+0xa4>)
 80131b4:	4825      	ldr	r0, [pc, #148]	@ (801324c <nema_sys_init+0xa8>)
 80131b6:	f7fb fe31 	bl	800ee1c <_txe_semaphore_create>
 80131ba:	4603      	mov	r3, r0
 80131bc:	617b      	str	r3, [r7, #20]
    assert(error_code == TX_SUCCESS);
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d005      	beq.n	80131d0 <nema_sys_init+0x2c>
 80131c4:	4b22      	ldr	r3, [pc, #136]	@ (8013250 <nema_sys_init+0xac>)
 80131c6:	4a23      	ldr	r2, [pc, #140]	@ (8013254 <nema_sys_init+0xb0>)
 80131c8:	2152      	movs	r1, #82	@ 0x52
 80131ca:	4823      	ldr	r0, [pc, #140]	@ (8013258 <nema_sys_init+0xb4>)
 80131cc:	f017 fe0e 	bl	802adec <__assert_func>

    /* Initialise Mem Space */
    error_code = tsi_malloc_init_pool_aligned(0, (void*)nemagfx_pool_mem, (uintptr_t)nemagfx_pool_mem, NEMAGFX_MEM_POOL_SIZE, 1, 8);
 80131d0:	4a22      	ldr	r2, [pc, #136]	@ (801325c <nema_sys_init+0xb8>)
 80131d2:	2308      	movs	r3, #8
 80131d4:	9301      	str	r3, [sp, #4]
 80131d6:	2301      	movs	r3, #1
 80131d8:	9300      	str	r3, [sp, #0]
 80131da:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80131de:	491f      	ldr	r1, [pc, #124]	@ (801325c <nema_sys_init+0xb8>)
 80131e0:	2000      	movs	r0, #0
 80131e2:	f006 fe87 	bl	8019ef4 <tsi_malloc_init_pool_aligned>
 80131e6:	6178      	str	r0, [r7, #20]
    assert(error_code == 0);
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d005      	beq.n	80131fa <nema_sys_init+0x56>
 80131ee:	4b1c      	ldr	r3, [pc, #112]	@ (8013260 <nema_sys_init+0xbc>)
 80131f0:	4a18      	ldr	r2, [pc, #96]	@ (8013254 <nema_sys_init+0xb0>)
 80131f2:	2156      	movs	r1, #86	@ 0x56
 80131f4:	4818      	ldr	r0, [pc, #96]	@ (8013258 <nema_sys_init+0xb4>)
 80131f6:	f017 fdf9 	bl	802adec <__assert_func>

    /* Allocate ring_buffer memory */
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 80131fa:	4c1a      	ldr	r4, [pc, #104]	@ (8013264 <nema_sys_init+0xc0>)
 80131fc:	463b      	mov	r3, r7
 80131fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013202:	4618      	mov	r0, r3
 8013204:	f000 f88e 	bl	8013324 <nema_buffer_create>
 8013208:	463b      	mov	r3, r7
 801320a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801320c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
 8013210:	4b14      	ldr	r3, [pc, #80]	@ (8013264 <nema_sys_init+0xc0>)
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d105      	bne.n	8013224 <nema_sys_init+0x80>
 8013218:	4b13      	ldr	r3, [pc, #76]	@ (8013268 <nema_sys_init+0xc4>)
 801321a:	4a0e      	ldr	r2, [pc, #56]	@ (8013254 <nema_sys_init+0xb0>)
 801321c:	215a      	movs	r1, #90	@ 0x5a
 801321e:	480e      	ldr	r0, [pc, #56]	@ (8013258 <nema_sys_init+0xb4>)
 8013220:	f017 fde4 	bl	802adec <__assert_func>

    /* Initialize Ring Buffer */
    error_code = nema_rb_init(&ring_buffer_str, 1);
 8013224:	2101      	movs	r1, #1
 8013226:	480f      	ldr	r0, [pc, #60]	@ (8013264 <nema_sys_init+0xc0>)
 8013228:	f005 fb00 	bl	801882c <nema_rb_init>
 801322c:	6178      	str	r0, [r7, #20]
    if (error_code < 0)
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	2b00      	cmp	r3, #0
 8013232:	da01      	bge.n	8013238 <nema_sys_init+0x94>
    {
        return error_code;
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	e003      	b.n	8013240 <nema_sys_init+0x9c>
    }

    /* Reset last_cl_id counter */
    last_cl_id = 0;
 8013238:	4b0c      	ldr	r3, [pc, #48]	@ (801326c <nema_sys_init+0xc8>)
 801323a:	2200      	movs	r2, #0
 801323c:	601a      	str	r2, [r3, #0]

    return error_code;
 801323e:	697b      	ldr	r3, [r7, #20]
}
 8013240:	4618      	mov	r0, r3
 8013242:	371c      	adds	r7, #28
 8013244:	46bd      	mov	sp, r7
 8013246:	bd90      	pop	{r4, r7, pc}
 8013248:	0802ca24 	.word	0x0802ca24
 801324c:	20087434 	.word	0x20087434
 8013250:	0802ca34 	.word	0x0802ca34
 8013254:	0802d374 	.word	0x0802d374
 8013258:	0802ca50 	.word	0x0802ca50
 801325c:	2007edb8 	.word	0x2007edb8
 8013260:	0802ca78 	.word	0x0802ca78
 8013264:	2008741c 	.word	0x2008741c
 8013268:	0802ca88 	.word	0x0802ca88
 801326c:	2000001c 	.word	0x2000001c

08013270 <nema_reg_read>:

uint32_t nema_reg_read(uint32_t reg)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 8013278:	6879      	ldr	r1, [r7, #4]
 801327a:	4804      	ldr	r0, [pc, #16]	@ (801328c <nema_reg_read+0x1c>)
 801327c:	f7f3 f82c 	bl	80062d8 <HAL_GPU2D_ReadRegister>
 8013280:	4603      	mov	r3, r0
}
 8013282:	4618      	mov	r0, r3
 8013284:	3708      	adds	r7, #8
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	20085028 	.word	0x20085028

08013290 <nema_reg_write>:

void nema_reg_write(uint32_t reg, uint32_t value)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 801329a:	683a      	ldr	r2, [r7, #0]
 801329c:	6879      	ldr	r1, [r7, #4]
 801329e:	4803      	ldr	r0, [pc, #12]	@ (80132ac <nema_reg_write+0x1c>)
 80132a0:	f7f3 f82c 	bl	80062fc <HAL_GPU2D_WriteRegister>
}
 80132a4:	bf00      	nop
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	20085028 	.word	0x20085028

080132b0 <nema_wait_irq>:

int nema_wait_irq(void)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	af00      	add	r7, sp, #0
    /* Wait indefinitely for a free semaphore */
    tx_semaphore_get(&nema_irq_sem, TX_WAIT_FOREVER);
 80132b4:	f04f 31ff 	mov.w	r1, #4294967295
 80132b8:	4802      	ldr	r0, [pc, #8]	@ (80132c4 <nema_wait_irq+0x14>)
 80132ba:	f7fb fe45 	bl	800ef48 <_txe_semaphore_get>

    return 0;
 80132be:	2300      	movs	r3, #0
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	20087434 	.word	0x20087434

080132c8 <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
    while (last_cl_id < cl_id)
 80132d0:	e001      	b.n	80132d6 <nema_wait_irq_cl+0xe>
    {
        (void)nema_wait_irq();
 80132d2:	f7ff ffed 	bl	80132b0 <nema_wait_irq>
    while (last_cl_id < cl_id)
 80132d6:	4b05      	ldr	r3, [pc, #20]	@ (80132ec <nema_wait_irq_cl+0x24>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	687a      	ldr	r2, [r7, #4]
 80132dc:	429a      	cmp	r2, r3
 80132de:	dcf8      	bgt.n	80132d2 <nema_wait_irq_cl+0xa>
    }

    return 0;
 80132e0:	2300      	movs	r3, #0
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	3708      	adds	r7, #8
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	2000001c 	.word	0x2000001c

080132f0 <nema_host_free>:

    return 0;
}

void nema_host_free(void* ptr)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
    tsi_free(ptr);
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f006 feb5 	bl	801a068 <tsi_free>
}
 80132fe:	bf00      	nop
 8013300:	3708      	adds	r7, #8
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}

08013306 <nema_host_malloc>:

void* nema_host_malloc(unsigned size)
{
 8013306:	b580      	push	{r7, lr}
 8013308:	b082      	sub	sp, #8
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
    return tsi_malloc(size);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4619      	mov	r1, r3
 8013312:	2000      	movs	r0, #0
 8013314:	f006 fe4a 	bl	8019fac <tsi_malloc_pool>
 8013318:	4603      	mov	r3, r0
}
 801331a:	4618      	mov	r0, r3
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
	...

08013324 <nema_buffer_create>:

nema_buffer_t nema_buffer_create(int size)
{
 8013324:	b590      	push	{r4, r7, lr}
 8013326:	b087      	sub	sp, #28
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
    nema_buffer_t bo;
    memset(&bo, 0, sizeof(bo));
 801332e:	f107 0308 	add.w	r3, r7, #8
 8013332:	2210      	movs	r2, #16
 8013334:	2100      	movs	r1, #0
 8013336:	4618      	mov	r0, r3
 8013338:	f017 ff5f 	bl	802b1fa <memset>
    bo.base_virt = tsi_malloc(size);
 801333c:	6839      	ldr	r1, [r7, #0]
 801333e:	2000      	movs	r0, #0
 8013340:	f006 fe34 	bl	8019fac <tsi_malloc_pool>
 8013344:	4603      	mov	r3, r0
 8013346:	613b      	str	r3, [r7, #16]
    bo.base_phys = (uint32_t)bo.base_virt;
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	617b      	str	r3, [r7, #20]
    bo.size      = size;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	60bb      	str	r3, [r7, #8]
    assert(bo.base_virt != 0 && "Unable to allocate memory in nema_buffer_create");
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d105      	bne.n	8013362 <nema_buffer_create+0x3e>
 8013356:	4b08      	ldr	r3, [pc, #32]	@ (8013378 <nema_buffer_create+0x54>)
 8013358:	4a08      	ldr	r2, [pc, #32]	@ (801337c <nema_buffer_create+0x58>)
 801335a:	21a0      	movs	r1, #160	@ 0xa0
 801335c:	4808      	ldr	r0, [pc, #32]	@ (8013380 <nema_buffer_create+0x5c>)
 801335e:	f017 fd45 	bl	802adec <__assert_func>

    return bo;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	461c      	mov	r4, r3
 8013366:	f107 0308 	add.w	r3, r7, #8
 801336a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801336c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	371c      	adds	r7, #28
 8013374:	46bd      	mov	sp, r7
 8013376:	bd90      	pop	{r4, r7, pc}
 8013378:	0802caa8 	.word	0x0802caa8
 801337c:	0802d384 	.word	0x0802d384
 8013380:	0802ca50 	.word	0x0802ca50

08013384 <nema_buffer_create_pool>:

nema_buffer_t nema_buffer_create_pool(int pool, int size)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	607a      	str	r2, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(pool);

    return nema_buffer_create(size);
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	6879      	ldr	r1, [r7, #4]
 8013394:	4618      	mov	r0, r3
 8013396:	f7ff ffc5 	bl	8013324 <nema_buffer_create>
}
 801339a:	68f8      	ldr	r0, [r7, #12]
 801339c:	3710      	adds	r7, #16
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}

080133a2 <nema_buffer_map>:

void* nema_buffer_map(nema_buffer_t* bo)
{
 80133a2:	b480      	push	{r7}
 80133a4:	b083      	sub	sp, #12
 80133a6:	af00      	add	r7, sp, #0
 80133a8:	6078      	str	r0, [r7, #4]
    return bo->base_virt;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	689b      	ldr	r3, [r3, #8]
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	370c      	adds	r7, #12
 80133b2:	46bd      	mov	sp, r7
 80133b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b8:	4770      	bx	lr

080133ba <nema_buffer_flush>:
{
    return bo->base_phys;
}

void nema_buffer_flush(nema_buffer_t* bo)
{
 80133ba:	b480      	push	{r7}
 80133bc:	b083      	sub	sp, #12
 80133be:	af00      	add	r7, sp, #0
 80133c0:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}
 80133c2:	bf00      	nop
 80133c4:	370c      	adds	r7, #12
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr

080133ce <nema_mutex_lock>:

int nema_mutex_lock(int mutex_id)
{
 80133ce:	b480      	push	{r7}
 80133d0:	b085      	sub	sp, #20
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	6078      	str	r0, [r7, #4]
    int retval = 0;
 80133d6:	2300      	movs	r3, #0
 80133d8:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN nema_mutex_lock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
    /* USER CODE END nema_mutex_lock */

    return retval;
 80133da:	68fb      	ldr	r3, [r7, #12]
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3714      	adds	r7, #20
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr

080133e8 <nema_mutex_unlock>:

int nema_mutex_unlock(int mutex_id)
{
 80133e8:	b480      	push	{r7}
 80133ea:	b085      	sub	sp, #20
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
    int retval = 0;
 80133f0:	2300      	movs	r3, #0
 80133f2:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN nema_mutex_unlock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
    /* USER CODE END nema_mutex_unlock */

    return retval;
 80133f4:	68fb      	ldr	r3, [r7, #12]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3714      	adds	r7, #20
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr

08013402 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013402:	8880      	ldrh	r0, [r0, #4]
 8013404:	4770      	bx	lr

08013406 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013406:	b570      	push	{r4, r5, r6, lr}
 8013408:	6803      	ldr	r3, [r0, #0]
 801340a:	4605      	mov	r5, r0
 801340c:	460c      	mov	r4, r1
 801340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013410:	2100      	movs	r1, #0
 8013412:	4798      	blx	r3
 8013414:	682b      	ldr	r3, [r5, #0]
 8013416:	4606      	mov	r6, r0
 8013418:	6a1b      	ldr	r3, [r3, #32]
 801341a:	4628      	mov	r0, r5
 801341c:	4798      	blx	r3
 801341e:	1ba4      	subs	r4, r4, r6
 8013420:	b2a4      	uxth	r4, r4
 8013422:	fbb4 f0f0 	udiv	r0, r4, r0
 8013426:	bd70      	pop	{r4, r5, r6, pc}

08013428 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013428:	2300      	movs	r3, #0
 801342a:	8083      	strh	r3, [r0, #4]
 801342c:	4770      	bx	lr

0801342e <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801342e:	b510      	push	{r4, lr}
 8013430:	4604      	mov	r4, r0
 8013432:	6803      	ldr	r3, [r0, #0]
 8013434:	8881      	ldrh	r1, [r0, #4]
 8013436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013438:	4798      	blx	r3
 801343a:	88a3      	ldrh	r3, [r4, #4]
 801343c:	3301      	adds	r3, #1
 801343e:	80a3      	strh	r3, [r4, #4]
 8013440:	bd10      	pop	{r4, pc}

08013442 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013442:	6803      	ldr	r3, [r0, #0]
 8013444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013446:	4718      	bx	r3

08013448 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013448:	4770      	bx	lr
	...

0801344c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801344c:	4a02      	ldr	r2, [pc, #8]	@ (8013458 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801344e:	6002      	str	r2, [r0, #0]
 8013450:	2200      	movs	r2, #0
 8013452:	8082      	strh	r2, [r0, #4]
 8013454:	4770      	bx	lr
 8013456:	bf00      	nop
 8013458:	0802d3a0 	.word	0x0802d3a0

0801345c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801345c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801345e:	2000      	movs	r0, #0
 8013460:	b12b      	cbz	r3, 801346e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013462:	b920      	cbnz	r0, 801346e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013464:	1a5a      	subs	r2, r3, r1
 8013466:	4250      	negs	r0, r2
 8013468:	4150      	adcs	r0, r2
 801346a:	699b      	ldr	r3, [r3, #24]
 801346c:	e7f8      	b.n	8013460 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801346e:	4770      	bx	lr

08013470 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013470:	2300      	movs	r3, #0
 8013472:	6148      	str	r0, [r1, #20]
 8013474:	618b      	str	r3, [r1, #24]
 8013476:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013478:	b913      	cbnz	r3, 8013480 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801347a:	6281      	str	r1, [r0, #40]	@ 0x28
 801347c:	4770      	bx	lr
 801347e:	4613      	mov	r3, r2
 8013480:	699a      	ldr	r2, [r3, #24]
 8013482:	2a00      	cmp	r2, #0
 8013484:	d1fb      	bne.n	801347e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013486:	6199      	str	r1, [r3, #24]
 8013488:	4770      	bx	lr

0801348a <_ZN8touchgfx9Container9removeAllEv>:
 801348a:	2200      	movs	r2, #0
 801348c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801348e:	b123      	cbz	r3, 801349a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013490:	6999      	ldr	r1, [r3, #24]
 8013492:	6281      	str	r1, [r0, #40]	@ 0x28
 8013494:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013498:	e7f8      	b.n	801348c <_ZN8touchgfx9Container9removeAllEv+0x2>
 801349a:	4770      	bx	lr

0801349c <_ZN8touchgfx9Container6unlinkEv>:
 801349c:	2300      	movs	r3, #0
 801349e:	6283      	str	r3, [r0, #40]	@ 0x28
 80134a0:	4770      	bx	lr

080134a2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80134a2:	2200      	movs	r2, #0
 80134a4:	8002      	strh	r2, [r0, #0]
 80134a6:	8042      	strh	r2, [r0, #2]
 80134a8:	8082      	strh	r2, [r0, #4]
 80134aa:	80c2      	strh	r2, [r0, #6]
 80134ac:	4770      	bx	lr

080134ae <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80134ae:	b570      	push	{r4, r5, r6, lr}
 80134b0:	460d      	mov	r5, r1
 80134b2:	4616      	mov	r6, r2
 80134b4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80134b6:	b13c      	cbz	r4, 80134c8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80134b8:	6823      	ldr	r3, [r4, #0]
 80134ba:	4620      	mov	r0, r4
 80134bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134be:	4632      	mov	r2, r6
 80134c0:	4629      	mov	r1, r5
 80134c2:	4798      	blx	r3
 80134c4:	69a4      	ldr	r4, [r4, #24]
 80134c6:	e7f6      	b.n	80134b6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80134c8:	bd70      	pop	{r4, r5, r6, pc}

080134ca <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80134ca:	b538      	push	{r3, r4, r5, lr}
 80134cc:	460d      	mov	r5, r1
 80134ce:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80134d0:	b134      	cbz	r4, 80134e0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80134d2:	682b      	ldr	r3, [r5, #0]
 80134d4:	4621      	mov	r1, r4
 80134d6:	689b      	ldr	r3, [r3, #8]
 80134d8:	4628      	mov	r0, r5
 80134da:	4798      	blx	r3
 80134dc:	69a4      	ldr	r4, [r4, #24]
 80134de:	e7f7      	b.n	80134d0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80134e0:	bd38      	pop	{r3, r4, r5, pc}

080134e2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80134e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80134e4:	b19b      	cbz	r3, 801350e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80134e6:	428b      	cmp	r3, r1
 80134e8:	d109      	bne.n	80134fe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80134ea:	2100      	movs	r1, #0
 80134ec:	699a      	ldr	r2, [r3, #24]
 80134ee:	6159      	str	r1, [r3, #20]
 80134f0:	6282      	str	r2, [r0, #40]	@ 0x28
 80134f2:	b902      	cbnz	r2, 80134f6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80134f4:	4770      	bx	lr
 80134f6:	6199      	str	r1, [r3, #24]
 80134f8:	4770      	bx	lr
 80134fa:	4613      	mov	r3, r2
 80134fc:	b13a      	cbz	r2, 801350e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80134fe:	699a      	ldr	r2, [r3, #24]
 8013500:	428a      	cmp	r2, r1
 8013502:	d1fa      	bne.n	80134fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013504:	698a      	ldr	r2, [r1, #24]
 8013506:	619a      	str	r2, [r3, #24]
 8013508:	2300      	movs	r3, #0
 801350a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801350e:	4770      	bx	lr

08013510 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013510:	b410      	push	{r4}
 8013512:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013514:	4604      	mov	r4, r0
 8013516:	b92b      	cbnz	r3, 8013524 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013518:	6803      	ldr	r3, [r0, #0]
 801351a:	4611      	mov	r1, r2
 801351c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801351e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013522:	4718      	bx	r3
 8013524:	b941      	cbnz	r1, 8013538 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013526:	6193      	str	r3, [r2, #24]
 8013528:	6282      	str	r2, [r0, #40]	@ 0x28
 801352a:	6154      	str	r4, [r2, #20]
 801352c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013530:	4770      	bx	lr
 8013532:	4603      	mov	r3, r0
 8013534:	2800      	cmp	r0, #0
 8013536:	d0f9      	beq.n	801352c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013538:	4299      	cmp	r1, r3
 801353a:	6998      	ldr	r0, [r3, #24]
 801353c:	d1f9      	bne.n	8013532 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801353e:	6190      	str	r0, [r2, #24]
 8013540:	618a      	str	r2, [r1, #24]
 8013542:	e7f2      	b.n	801352a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013544 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013548:	461f      	mov	r7, r3
 801354a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801354e:	460d      	mov	r5, r1
 8013550:	4616      	mov	r6, r2
 8013552:	b103      	cbz	r3, 8013556 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013554:	6038      	str	r0, [r7, #0]
 8013556:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013558:	b314      	cbz	r4, 80135a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801355a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801355e:	b1eb      	cbz	r3, 801359c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013560:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013564:	428d      	cmp	r5, r1
 8013566:	db19      	blt.n	801359c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013568:	8923      	ldrh	r3, [r4, #8]
 801356a:	b289      	uxth	r1, r1
 801356c:	440b      	add	r3, r1
 801356e:	b21b      	sxth	r3, r3
 8013570:	429d      	cmp	r5, r3
 8013572:	da13      	bge.n	801359c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013574:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013578:	4296      	cmp	r6, r2
 801357a:	db0f      	blt.n	801359c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801357c:	8963      	ldrh	r3, [r4, #10]
 801357e:	b292      	uxth	r2, r2
 8013580:	4413      	add	r3, r2
 8013582:	b21b      	sxth	r3, r3
 8013584:	429e      	cmp	r6, r3
 8013586:	da09      	bge.n	801359c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013588:	6823      	ldr	r3, [r4, #0]
 801358a:	1ab2      	subs	r2, r6, r2
 801358c:	1a69      	subs	r1, r5, r1
 801358e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8013592:	b212      	sxth	r2, r2
 8013594:	463b      	mov	r3, r7
 8013596:	b209      	sxth	r1, r1
 8013598:	4620      	mov	r0, r4
 801359a:	47c0      	blx	r8
 801359c:	69a4      	ldr	r4, [r4, #24]
 801359e:	e7db      	b.n	8013558 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80135a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80135a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a8:	4c6c      	ldr	r4, [pc, #432]	@ (801375c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 80135aa:	b0a1      	sub	sp, #132	@ 0x84
 80135ac:	6824      	ldr	r4, [r4, #0]
 80135ae:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80135b0:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 80135b4:	2400      	movs	r4, #0
 80135b6:	802c      	strh	r4, [r5, #0]
 80135b8:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80135ba:	4606      	mov	r6, r0
 80135bc:	802c      	strh	r4, [r5, #0]
 80135be:	601c      	str	r4, [r3, #0]
 80135c0:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80135c4:	9303      	str	r3, [sp, #12]
 80135c6:	f7ff ffbd 	bl	8013544 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80135ca:	f1b9 0f03 	cmp.w	r9, #3
 80135ce:	f340 80bf 	ble.w	8013750 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 80135d2:	4631      	mov	r1, r6
 80135d4:	a80c      	add	r0, sp, #48	@ 0x30
 80135d6:	f003 fb2f 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80135da:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80135de:	9306      	str	r3, [sp, #24]
 80135e0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80135e4:	9307      	str	r3, [sp, #28]
 80135e6:	9b03      	ldr	r3, [sp, #12]
 80135e8:	f8d3 a000 	ldr.w	sl, [r3]
 80135ec:	f1ba 0f00 	cmp.w	sl, #0
 80135f0:	f000 80b1 	beq.w	8013756 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80135f4:	4651      	mov	r1, sl
 80135f6:	a810      	add	r0, sp, #64	@ 0x40
 80135f8:	f003 fb1e 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80135fc:	2002      	movs	r0, #2
 80135fe:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8013602:	9b01      	ldr	r3, [sp, #4]
 8013604:	fb91 f1f0 	sdiv	r1, r1, r0
 8013608:	9a06      	ldr	r2, [sp, #24]
 801360a:	189d      	adds	r5, r3, r2
 801360c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8013610:	9a07      	ldr	r2, [sp, #28]
 8013612:	4419      	add	r1, r3
 8013614:	9b02      	ldr	r3, [sp, #8]
 8013616:	1a6d      	subs	r5, r5, r1
 8013618:	4413      	add	r3, r2
 801361a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801361e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8013622:	fb92 f2f0 	sdiv	r2, r2, r0
 8013626:	440a      	add	r2, r1
 8013628:	1a9b      	subs	r3, r3, r2
 801362a:	435b      	muls	r3, r3
 801362c:	fb05 3505 	mla	r5, r5, r5, r3
 8013630:	4f4b      	ldr	r7, [pc, #300]	@ (8013760 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013632:	ac10      	add	r4, sp, #64	@ 0x40
 8013634:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013638:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801363a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801363c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801363e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013640:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013648:	2303      	movs	r3, #3
 801364a:	f1b9 0f0c 	cmp.w	r9, #12
 801364e:	bfda      	itte	le
 8013650:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013654:	fb92 f8f3 	sdivle	r8, r2, r3
 8013658:	4698      	movgt	r8, r3
 801365a:	2400      	movs	r4, #0
 801365c:	f8cd 9000 	str.w	r9, [sp]
 8013660:	1c63      	adds	r3, r4, #1
 8013662:	9308      	str	r3, [sp, #32]
 8013664:	9b00      	ldr	r3, [sp, #0]
 8013666:	f04f 0b00 	mov.w	fp, #0
 801366a:	fb93 f3f8 	sdiv	r3, r3, r8
 801366e:	f004 0401 	and.w	r4, r4, #1
 8013672:	aa10      	add	r2, sp, #64	@ 0x40
 8013674:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013678:	b29b      	uxth	r3, r3
 801367a:	3404      	adds	r4, #4
 801367c:	9304      	str	r3, [sp, #16]
 801367e:	9a04      	ldr	r2, [sp, #16]
 8013680:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013684:	fb13 f302 	smulbb	r3, r3, r2
 8013688:	9a01      	ldr	r2, [sp, #4]
 801368a:	b29b      	uxth	r3, r3
 801368c:	1899      	adds	r1, r3, r2
 801368e:	9305      	str	r3, [sp, #20]
 8013690:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013694:	b209      	sxth	r1, r1
 8013696:	4299      	cmp	r1, r3
 8013698:	db4d      	blt.n	8013736 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801369a:	8932      	ldrh	r2, [r6, #8]
 801369c:	4413      	add	r3, r2
 801369e:	b21b      	sxth	r3, r3
 80136a0:	4299      	cmp	r1, r3
 80136a2:	da48      	bge.n	8013736 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80136a4:	9b04      	ldr	r3, [sp, #16]
 80136a6:	6827      	ldr	r7, [r4, #0]
 80136a8:	fb17 f703 	smulbb	r7, r7, r3
 80136ac:	9b02      	ldr	r3, [sp, #8]
 80136ae:	b2bf      	uxth	r7, r7
 80136b0:	18fa      	adds	r2, r7, r3
 80136b2:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80136b6:	b212      	sxth	r2, r2
 80136b8:	429a      	cmp	r2, r3
 80136ba:	db3c      	blt.n	8013736 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80136bc:	8970      	ldrh	r0, [r6, #10]
 80136be:	4403      	add	r3, r0
 80136c0:	b21b      	sxth	r3, r3
 80136c2:	429a      	cmp	r2, r3
 80136c4:	da37      	bge.n	8013736 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80136c6:	2300      	movs	r3, #0
 80136c8:	4630      	mov	r0, r6
 80136ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136cc:	ab0b      	add	r3, sp, #44	@ 0x2c
 80136ce:	f7ff ff39 	bl	8013544 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80136d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80136d4:	b37a      	cbz	r2, 8013736 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80136d6:	4552      	cmp	r2, sl
 80136d8:	d02d      	beq.n	8013736 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80136da:	4611      	mov	r1, r2
 80136dc:	a80e      	add	r0, sp, #56	@ 0x38
 80136de:	9209      	str	r2, [sp, #36]	@ 0x24
 80136e0:	f003 faaa 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80136e4:	f04f 0e02 	mov.w	lr, #2
 80136e8:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80136ec:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80136f0:	fb91 f1fe 	sdiv	r1, r1, lr
 80136f4:	fb9c fcfe 	sdiv	ip, ip, lr
 80136f8:	9a06      	ldr	r2, [sp, #24]
 80136fa:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80136fe:	9b01      	ldr	r3, [sp, #4]
 8013700:	4401      	add	r1, r0
 8013702:	4413      	add	r3, r2
 8013704:	1a58      	subs	r0, r3, r1
 8013706:	9a07      	ldr	r2, [sp, #28]
 8013708:	9b02      	ldr	r3, [sp, #8]
 801370a:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801370e:	4413      	add	r3, r2
 8013710:	448c      	add	ip, r1
 8013712:	eba3 030c 	sub.w	r3, r3, ip
 8013716:	435b      	muls	r3, r3
 8013718:	fb00 3300 	mla	r3, r0, r0, r3
 801371c:	42ab      	cmp	r3, r5
 801371e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013720:	d208      	bcs.n	8013734 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 8013722:	461d      	mov	r5, r3
 8013724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013726:	9803      	ldr	r0, [sp, #12]
 8013728:	6001      	str	r1, [r0, #0]
 801372a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801372c:	9805      	ldr	r0, [sp, #20]
 801372e:	8008      	strh	r0, [r1, #0]
 8013730:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8013732:	800f      	strh	r7, [r1, #0]
 8013734:	4692      	mov	sl, r2
 8013736:	f10b 0b01 	add.w	fp, fp, #1
 801373a:	f1bb 0f04 	cmp.w	fp, #4
 801373e:	f104 0408 	add.w	r4, r4, #8
 8013742:	d19c      	bne.n	801367e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8013744:	9b00      	ldr	r3, [sp, #0]
 8013746:	9c08      	ldr	r4, [sp, #32]
 8013748:	444b      	add	r3, r9
 801374a:	4544      	cmp	r4, r8
 801374c:	9300      	str	r3, [sp, #0]
 801374e:	d187      	bne.n	8013660 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8013750:	b021      	add	sp, #132	@ 0x84
 8013752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013756:	f04f 35ff 	mov.w	r5, #4294967295
 801375a:	e769      	b.n	8013630 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801375c:	2008745c 	.word	0x2008745c
 8013760:	0802caf0 	.word	0x0802caf0

08013764 <_ZN8touchgfx4RectaNERKS0_>:
 8013764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013768:	f9b1 7000 	ldrsh.w	r7, [r1]
 801376c:	888c      	ldrh	r4, [r1, #4]
 801376e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013772:	443c      	add	r4, r7
 8013774:	b2a4      	uxth	r4, r4
 8013776:	fa0f f884 	sxth.w	r8, r4
 801377a:	45c1      	cmp	r9, r8
 801377c:	da2f      	bge.n	80137de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801377e:	8882      	ldrh	r2, [r0, #4]
 8013780:	444a      	add	r2, r9
 8013782:	b292      	uxth	r2, r2
 8013784:	fa0f fe82 	sxth.w	lr, r2
 8013788:	4577      	cmp	r7, lr
 801378a:	da28      	bge.n	80137de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801378c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013790:	88cb      	ldrh	r3, [r1, #6]
 8013792:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013796:	442b      	add	r3, r5
 8013798:	b21b      	sxth	r3, r3
 801379a:	429e      	cmp	r6, r3
 801379c:	da1f      	bge.n	80137de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801379e:	88c3      	ldrh	r3, [r0, #6]
 80137a0:	4433      	add	r3, r6
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	fa0f fc83 	sxth.w	ip, r3
 80137a8:	4565      	cmp	r5, ip
 80137aa:	da18      	bge.n	80137de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80137ac:	454f      	cmp	r7, r9
 80137ae:	bfb8      	it	lt
 80137b0:	464f      	movlt	r7, r9
 80137b2:	42b5      	cmp	r5, r6
 80137b4:	bfb8      	it	lt
 80137b6:	4635      	movlt	r5, r6
 80137b8:	45f0      	cmp	r8, lr
 80137ba:	bfd8      	it	le
 80137bc:	4622      	movle	r2, r4
 80137be:	1bd2      	subs	r2, r2, r7
 80137c0:	8082      	strh	r2, [r0, #4]
 80137c2:	884a      	ldrh	r2, [r1, #2]
 80137c4:	88c9      	ldrh	r1, [r1, #6]
 80137c6:	8007      	strh	r7, [r0, #0]
 80137c8:	440a      	add	r2, r1
 80137ca:	b292      	uxth	r2, r2
 80137cc:	b211      	sxth	r1, r2
 80137ce:	458c      	cmp	ip, r1
 80137d0:	bfa8      	it	ge
 80137d2:	4613      	movge	r3, r2
 80137d4:	1b5b      	subs	r3, r3, r5
 80137d6:	80c3      	strh	r3, [r0, #6]
 80137d8:	8045      	strh	r5, [r0, #2]
 80137da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137de:	2300      	movs	r3, #0
 80137e0:	8003      	strh	r3, [r0, #0]
 80137e2:	8043      	strh	r3, [r0, #2]
 80137e4:	8083      	strh	r3, [r0, #4]
 80137e6:	80c3      	strh	r3, [r0, #6]
 80137e8:	e7f7      	b.n	80137da <_ZN8touchgfx4RectaNERKS0_+0x76>

080137ea <_ZNK8touchgfx4Rect7isEmptyEv>:
 80137ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	dd06      	ble.n	8013800 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80137f2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80137f6:	2800      	cmp	r0, #0
 80137f8:	bfcc      	ite	gt
 80137fa:	2000      	movgt	r0, #0
 80137fc:	2001      	movle	r0, #1
 80137fe:	4770      	bx	lr
 8013800:	2001      	movs	r0, #1
 8013802:	4770      	bx	lr

08013804 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013804:	2300      	movs	r3, #0
 8013806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801380a:	4604      	mov	r4, r0
 801380c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801380e:	8003      	strh	r3, [r0, #0]
 8013810:	8043      	strh	r3, [r0, #2]
 8013812:	8083      	strh	r3, [r0, #4]
 8013814:	80c3      	strh	r3, [r0, #6]
 8013816:	2d00      	cmp	r5, #0
 8013818:	d040      	beq.n	801389c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801381a:	1d28      	adds	r0, r5, #4
 801381c:	f7ff ffe5 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8013820:	b988      	cbnz	r0, 8013846 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013822:	4620      	mov	r0, r4
 8013824:	f7ff ffe1 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8013828:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801382c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013830:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013834:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013838:	b138      	cbz	r0, 801384a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801383a:	8022      	strh	r2, [r4, #0]
 801383c:	8063      	strh	r3, [r4, #2]
 801383e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013842:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013846:	69ad      	ldr	r5, [r5, #24]
 8013848:	e7e5      	b.n	8013816 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801384a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801384e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013852:	4290      	cmp	r0, r2
 8013854:	4607      	mov	r7, r0
 8013856:	bfa8      	it	ge
 8013858:	4617      	movge	r7, r2
 801385a:	4299      	cmp	r1, r3
 801385c:	460e      	mov	r6, r1
 801385e:	bfa8      	it	ge
 8013860:	461e      	movge	r6, r3
 8013862:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013866:	4472      	add	r2, lr
 8013868:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801386c:	4440      	add	r0, r8
 801386e:	4471      	add	r1, lr
 8013870:	4463      	add	r3, ip
 8013872:	b200      	sxth	r0, r0
 8013874:	b212      	sxth	r2, r2
 8013876:	b209      	sxth	r1, r1
 8013878:	b21b      	sxth	r3, r3
 801387a:	4290      	cmp	r0, r2
 801387c:	bfac      	ite	ge
 801387e:	ebc7 0200 	rsbge	r2, r7, r0
 8013882:	ebc7 0202 	rsblt	r2, r7, r2
 8013886:	4299      	cmp	r1, r3
 8013888:	bfac      	ite	ge
 801388a:	ebc6 0301 	rsbge	r3, r6, r1
 801388e:	ebc6 0303 	rsblt	r3, r6, r3
 8013892:	8027      	strh	r7, [r4, #0]
 8013894:	8066      	strh	r6, [r4, #2]
 8013896:	80a2      	strh	r2, [r4, #4]
 8013898:	80e3      	strh	r3, [r4, #6]
 801389a:	e7d4      	b.n	8013846 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801389c:	4620      	mov	r0, r4
 801389e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80138a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80138a6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80138aa:	b383      	cbz	r3, 801390e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80138ac:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80138ae:	b374      	cbz	r4, 801390e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80138b0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80138b4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80138b8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80138bc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80138c0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80138c4:	b303      	cbz	r3, 8013908 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80138c6:	4668      	mov	r0, sp
 80138c8:	1d21      	adds	r1, r4, #4
 80138ca:	f8ad 5000 	strh.w	r5, [sp]
 80138ce:	f8ad 6002 	strh.w	r6, [sp, #2]
 80138d2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80138d6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80138da:	f7ff ff43 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 80138de:	4668      	mov	r0, sp
 80138e0:	f7ff ff83 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 80138e4:	b980      	cbnz	r0, 8013908 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80138e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80138ea:	88a2      	ldrh	r2, [r4, #4]
 80138ec:	4669      	mov	r1, sp
 80138ee:	1a9b      	subs	r3, r3, r2
 80138f0:	f8ad 3000 	strh.w	r3, [sp]
 80138f4:	88e2      	ldrh	r2, [r4, #6]
 80138f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80138fa:	4620      	mov	r0, r4
 80138fc:	1a9b      	subs	r3, r3, r2
 80138fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013902:	6823      	ldr	r3, [r4, #0]
 8013904:	689b      	ldr	r3, [r3, #8]
 8013906:	4798      	blx	r3
 8013908:	69a4      	ldr	r4, [r4, #24]
 801390a:	2c00      	cmp	r4, #0
 801390c:	d1d8      	bne.n	80138c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801390e:	b002      	add	sp, #8
 8013910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013914 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013914:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013916:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801391a:	460d      	mov	r5, r1
 801391c:	4616      	mov	r6, r2
 801391e:	b323      	cbz	r3, 801396a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013920:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8013922:	b314      	cbz	r4, 801396a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013924:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8013928:	b1eb      	cbz	r3, 8013966 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801392a:	466b      	mov	r3, sp
 801392c:	6828      	ldr	r0, [r5, #0]
 801392e:	6869      	ldr	r1, [r5, #4]
 8013930:	c303      	stmia	r3!, {r0, r1}
 8013932:	4668      	mov	r0, sp
 8013934:	1d21      	adds	r1, r4, #4
 8013936:	f7ff ff15 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 801393a:	4668      	mov	r0, sp
 801393c:	f7ff ff55 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8013940:	b988      	cbnz	r0, 8013966 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013942:	f8bd 3000 	ldrh.w	r3, [sp]
 8013946:	88a2      	ldrh	r2, [r4, #4]
 8013948:	4669      	mov	r1, sp
 801394a:	1a9b      	subs	r3, r3, r2
 801394c:	f8ad 3000 	strh.w	r3, [sp]
 8013950:	88e2      	ldrh	r2, [r4, #6]
 8013952:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013956:	4620      	mov	r0, r4
 8013958:	1a9b      	subs	r3, r3, r2
 801395a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801395e:	6823      	ldr	r3, [r4, #0]
 8013960:	4632      	mov	r2, r6
 8013962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013964:	4798      	blx	r3
 8013966:	69a4      	ldr	r4, [r4, #24]
 8013968:	e7db      	b.n	8013922 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801396a:	b002      	add	sp, #8
 801396c:	bd70      	pop	{r4, r5, r6, pc}

0801396e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801396e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8013972:	4770      	bx	lr

08013974 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8013974:	b513      	push	{r0, r1, r4, lr}
 8013976:	6803      	ldr	r3, [r0, #0]
 8013978:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 801397c:	2300      	movs	r3, #0
 801397e:	e9cd 3300 	strd	r3, r3, [sp]
 8013982:	466b      	mov	r3, sp
 8013984:	47a0      	blx	r4
 8013986:	b002      	add	sp, #8
 8013988:	bd10      	pop	{r4, pc}

0801398a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801398a:	2301      	movs	r3, #1
 801398c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8013990:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8013994:	4770      	bx	lr

08013996 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013996:	2301      	movs	r3, #1
 8013998:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801399c:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80139a0:	4770      	bx	lr

080139a2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80139a2:	2201      	movs	r2, #1
 80139a4:	6843      	ldr	r3, [r0, #4]
 80139a6:	725a      	strb	r2, [r3, #9]
 80139a8:	6840      	ldr	r0, [r0, #4]
 80139aa:	6803      	ldr	r3, [r0, #0]
 80139ac:	691b      	ldr	r3, [r3, #16]
 80139ae:	4718      	bx	r3

080139b0 <_ZN8touchgfx3HAL8flushDMAEv>:
 80139b0:	6840      	ldr	r0, [r0, #4]
 80139b2:	6803      	ldr	r3, [r0, #0]
 80139b4:	689b      	ldr	r3, [r3, #8]
 80139b6:	4718      	bx	r3

080139b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80139b8:	b530      	push	{r4, r5, lr}
 80139ba:	b08b      	sub	sp, #44	@ 0x2c
 80139bc:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80139c0:	6804      	ldr	r4, [r0, #0]
 80139c2:	9509      	str	r5, [sp, #36]	@ 0x24
 80139c4:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80139c8:	9508      	str	r5, [sp, #32]
 80139ca:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80139ce:	9507      	str	r5, [sp, #28]
 80139d0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80139d4:	9506      	str	r5, [sp, #24]
 80139d6:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80139da:	9505      	str	r5, [sp, #20]
 80139dc:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80139e0:	9504      	str	r5, [sp, #16]
 80139e2:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80139e6:	9503      	str	r5, [sp, #12]
 80139e8:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80139ec:	9502      	str	r5, [sp, #8]
 80139ee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80139f2:	e9cd 3500 	strd	r3, r5, [sp]
 80139f6:	4613      	mov	r3, r2
 80139f8:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80139fa:	2200      	movs	r2, #0
 80139fc:	47a0      	blx	r4
 80139fe:	b00b      	add	sp, #44	@ 0x2c
 8013a00:	bd30      	pop	{r4, r5, pc}
	...

08013a04 <_ZN8touchgfx3HAL10beginFrameEv>:
 8013a04:	4b04      	ldr	r3, [pc, #16]	@ (8013a18 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	b123      	cbz	r3, 8013a14 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013a0a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8013a0e:	f080 0001 	eor.w	r0, r0, #1
 8013a12:	4770      	bx	lr
 8013a14:	2001      	movs	r0, #1
 8013a16:	4770      	bx	lr
 8013a18:	2008745a 	.word	0x2008745a

08013a1c <_ZN8touchgfx3HAL8endFrameEv>:
 8013a1c:	b510      	push	{r4, lr}
 8013a1e:	4604      	mov	r4, r0
 8013a20:	6840      	ldr	r0, [r0, #4]
 8013a22:	6803      	ldr	r3, [r0, #0]
 8013a24:	689b      	ldr	r3, [r3, #8]
 8013a26:	4798      	blx	r3
 8013a28:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8013a2c:	b113      	cbz	r3, 8013a34 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013a2e:	2301      	movs	r3, #1
 8013a30:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013a34:	bd10      	pop	{r4, pc}

08013a36 <_ZN8touchgfx3HAL10initializeEv>:
 8013a36:	b510      	push	{r4, lr}
 8013a38:	4604      	mov	r4, r0
 8013a3a:	f7fe f87d 	bl	8011b38 <_ZN8touchgfx10OSWrappers10initializeEv>
 8013a3e:	f7fd fd25 	bl	801148c <_ZN8touchgfx4GPIO4initEv>
 8013a42:	6860      	ldr	r0, [r4, #4]
 8013a44:	6803      	ldr	r3, [r0, #0]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	4798      	blx	r3
 8013a4a:	68e0      	ldr	r0, [r4, #12]
 8013a4c:	6803      	ldr	r3, [r0, #0]
 8013a4e:	689b      	ldr	r3, [r3, #8]
 8013a50:	4798      	blx	r3
 8013a52:	6823      	ldr	r3, [r4, #0]
 8013a54:	4620      	mov	r0, r4
 8013a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a5c:	4718      	bx	r3

08013a5e <_ZN8touchgfx3HAL9taskEntryEv>:
 8013a5e:	4604      	mov	r4, r0
 8013a60:	b508      	push	{r3, lr}
 8013a62:	6803      	ldr	r3, [r0, #0]
 8013a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013a68:	4798      	blx	r3
 8013a6a:	6823      	ldr	r3, [r4, #0]
 8013a6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013a6e:	4620      	mov	r0, r4
 8013a70:	4798      	blx	r3
 8013a72:	f7fe f98b 	bl	8011d8c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a7a:	e7f8      	b.n	8013a6e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08013a7c <_ZN8touchgfx3HAL4tickEv>:
 8013a7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013a7e:	6803      	ldr	r3, [r0, #0]
 8013a80:	4604      	mov	r4, r0
 8013a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8013a86:	4798      	blx	r3
 8013a88:	4d59      	ldr	r5, [pc, #356]	@ (8013bf0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	f000 8095 	beq.w	8013bba <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013a90:	2600      	movs	r6, #0
 8013a92:	2001      	movs	r0, #1
 8013a94:	f7fd fd02 	bl	801149c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013a98:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8013a9c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8013aa0:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8013aa4:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8013aa8:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8013aac:	b133      	cbz	r3, 8013abc <_ZN8touchgfx3HAL4tickEv+0x40>
 8013aae:	6823      	ldr	r3, [r4, #0]
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8013ab6:	4798      	blx	r3
 8013ab8:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8013abc:	2601      	movs	r6, #1
 8013abe:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8013ac2:	6862      	ldr	r2, [r4, #4]
 8013ac4:	f083 0301 	eor.w	r3, r3, #1
 8013ac8:	7253      	strb	r3, [r2, #9]
 8013aca:	702e      	strb	r6, [r5, #0]
 8013acc:	f001 ffa2 	bl	8015a14 <_ZN8touchgfx11Application11getInstanceEv>
 8013ad0:	6803      	ldr	r3, [r0, #0]
 8013ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ad4:	4798      	blx	r3
 8013ad6:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8013ada:	b90b      	cbnz	r3, 8013ae0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013adc:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8013ae0:	f001 ff98 	bl	8015a14 <_ZN8touchgfx11Application11getInstanceEv>
 8013ae4:	6803      	ldr	r3, [r0, #0]
 8013ae6:	695b      	ldr	r3, [r3, #20]
 8013ae8:	4798      	blx	r3
 8013aea:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013aec:	6803      	ldr	r3, [r0, #0]
 8013aee:	691b      	ldr	r3, [r3, #16]
 8013af0:	4798      	blx	r3
 8013af2:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8013af6:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8013afa:	3b01      	subs	r3, #1
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8013b02:	b10a      	cbz	r2, 8013b08 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d1eb      	bne.n	8013ae0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8013b08:	4a3a      	ldr	r2, [pc, #232]	@ (8013bf4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013b0a:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8013b0e:	7813      	ldrb	r3, [r2, #0]
 8013b10:	3301      	adds	r3, #1
 8013b12:	b25b      	sxtb	r3, r3
 8013b14:	4299      	cmp	r1, r3
 8013b16:	7013      	strb	r3, [r2, #0]
 8013b18:	dc10      	bgt.n	8013b3c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	68e0      	ldr	r0, [r4, #12]
 8013b1e:	7013      	strb	r3, [r2, #0]
 8013b20:	6803      	ldr	r3, [r0, #0]
 8013b22:	aa03      	add	r2, sp, #12
 8013b24:	68db      	ldr	r3, [r3, #12]
 8013b26:	a902      	add	r1, sp, #8
 8013b28:	4798      	blx	r3
 8013b2a:	6823      	ldr	r3, [r4, #0]
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d050      	beq.n	8013bd2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013b30:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013b34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013b38:	4620      	mov	r0, r4
 8013b3a:	4798      	blx	r3
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	6960      	ldr	r0, [r4, #20]
 8013b40:	f88d 3007 	strb.w	r3, [sp, #7]
 8013b44:	b158      	cbz	r0, 8013b5e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013b46:	6803      	ldr	r3, [r0, #0]
 8013b48:	f10d 0107 	add.w	r1, sp, #7
 8013b4c:	68db      	ldr	r3, [r3, #12]
 8013b4e:	4798      	blx	r3
 8013b50:	b128      	cbz	r0, 8013b5e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013b52:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8013b54:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013b58:	6803      	ldr	r3, [r0, #0]
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	4798      	blx	r3
 8013b5e:	f104 001c 	add.w	r0, r4, #28
 8013b62:	f004 fdb3 	bl	80186cc <_ZN8touchgfx8Gestures4tickEv>
 8013b66:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8013b6a:	b30b      	cbz	r3, 8013bb0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013b6c:	6920      	ldr	r0, [r4, #16]
 8013b6e:	6803      	ldr	r3, [r0, #0]
 8013b70:	691b      	ldr	r3, [r3, #16]
 8013b72:	4798      	blx	r3
 8013b74:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013b76:	4606      	mov	r6, r0
 8013b78:	b903      	cbnz	r3, 8013b7c <_ZN8touchgfx3HAL4tickEv+0x100>
 8013b7a:	6760      	str	r0, [r4, #116]	@ 0x74
 8013b7c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8013bf8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013b80:	1af3      	subs	r3, r6, r3
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d914      	bls.n	8013bb0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013b86:	6920      	ldr	r0, [r4, #16]
 8013b88:	6803      	ldr	r3, [r0, #0]
 8013b8a:	699b      	ldr	r3, [r3, #24]
 8013b8c:	4798      	blx	r3
 8013b8e:	2264      	movs	r2, #100	@ 0x64
 8013b90:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8013b92:	1af3      	subs	r3, r6, r3
 8013b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b98:	fbb0 f0f3 	udiv	r0, r0, r3
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	dc1d      	bgt.n	8013bdc <_ZN8touchgfx3HAL4tickEv+0x160>
 8013ba0:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8013ba4:	6920      	ldr	r0, [r4, #16]
 8013ba6:	2100      	movs	r1, #0
 8013ba8:	6803      	ldr	r3, [r0, #0]
 8013baa:	69db      	ldr	r3, [r3, #28]
 8013bac:	4798      	blx	r3
 8013bae:	6766      	str	r6, [r4, #116]	@ 0x74
 8013bb0:	f001 ff30 	bl	8015a14 <_ZN8touchgfx11Application11getInstanceEv>
 8013bb4:	6803      	ldr	r3, [r0, #0]
 8013bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bb8:	4798      	blx	r3
 8013bba:	6823      	ldr	r3, [r4, #0]
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8013bc2:	4798      	blx	r3
 8013bc4:	2001      	movs	r0, #1
 8013bc6:	f7fd fc85 	bl	80114d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013bca:	2300      	movs	r3, #0
 8013bcc:	702b      	strb	r3, [r5, #0]
 8013bce:	b004      	add	sp, #16
 8013bd0:	bd70      	pop	{r4, r5, r6, pc}
 8013bd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	4798      	blx	r3
 8013bda:	e7af      	b.n	8013b3c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8013bdc:	2863      	cmp	r0, #99	@ 0x63
 8013bde:	bfcb      	itete	gt
 8013be0:	2300      	movgt	r3, #0
 8013be2:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8013be6:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8013bea:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8013bee:	e7d9      	b.n	8013ba4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8013bf0:	20087460 	.word	0x20087460
 8013bf4:	20087461 	.word	0x20087461
 8013bf8:	05f5e100 	.word	0x05f5e100

08013bfc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8013bfc:	b510      	push	{r4, lr}
 8013bfe:	4604      	mov	r4, r0
 8013c00:	f7fe f832 	bl	8011c68 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8013c04:	2200      	movs	r2, #0
 8013c06:	6863      	ldr	r3, [r4, #4]
 8013c08:	729a      	strb	r2, [r3, #10]
 8013c0a:	bd10      	pop	{r4, pc}

08013c0c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8013c0c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8013c0e:	301c      	adds	r0, #28
 8013c10:	f004 bd5a 	b.w	80186c8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08013c14 <_ZN8touchgfx3HAL5touchEll>:
 8013c14:	b530      	push	{r4, r5, lr}
 8013c16:	4604      	mov	r4, r0
 8013c18:	b087      	sub	sp, #28
 8013c1a:	a804      	add	r0, sp, #16
 8013c1c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8013c20:	f001 fcea 	bl	80155f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8013c24:	9b04      	ldr	r3, [sp, #16]
 8013c26:	a906      	add	r1, sp, #24
 8013c28:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013c2c:	9b05      	ldr	r3, [sp, #20]
 8013c2e:	a803      	add	r0, sp, #12
 8013c30:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8013c34:	f001 fd32 	bl	801569c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013c38:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8013c3c:	f104 001c 	add.w	r0, r4, #28
 8013c40:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8013c44:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013c48:	b189      	cbz	r1, 8013c6e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013c4a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8013c54:	4613      	mov	r3, r2
 8013c56:	462a      	mov	r2, r5
 8013c58:	f004 fd46 	bl	80186e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013c5c:	b128      	cbz	r0, 8013c6a <_ZN8touchgfx3HAL5touchEll+0x56>
 8013c5e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013c62:	6623      	str	r3, [r4, #96]	@ 0x60
 8013c64:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013c68:	6663      	str	r3, [r4, #100]	@ 0x64
 8013c6a:	b007      	add	sp, #28
 8013c6c:	bd30      	pop	{r4, r5, pc}
 8013c6e:	f004 fd7b 	bl	8018768 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013c72:	2301      	movs	r3, #1
 8013c74:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8013c78:	e7f1      	b.n	8013c5e <_ZN8touchgfx3HAL5touchEll+0x4a>

08013c7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013c7a:	b510      	push	{r4, lr}
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d046      	beq.n	8013d0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013c80:	ea81 0002 	eor.w	r0, r1, r2
 8013c84:	07c4      	lsls	r4, r0, #31
 8013c86:	d508      	bpl.n	8013c9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013c88:	440b      	add	r3, r1
 8013c8a:	3a01      	subs	r2, #1
 8013c8c:	428b      	cmp	r3, r1
 8013c8e:	d93e      	bls.n	8013d0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013c90:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013c94:	f801 0b01 	strb.w	r0, [r1], #1
 8013c98:	e7f8      	b.n	8013c8c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013c9a:	07d0      	lsls	r0, r2, #31
 8013c9c:	bf42      	ittt	mi
 8013c9e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8013ca2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8013ca6:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	d911      	bls.n	8013cd2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013cae:	ea81 0402 	eor.w	r4, r1, r2
 8013cb2:	07a4      	lsls	r4, r4, #30
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	d022      	beq.n	8013cfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8013cb8:	f023 0401 	bic.w	r4, r3, #1
 8013cbc:	440c      	add	r4, r1
 8013cbe:	428c      	cmp	r4, r1
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	d904      	bls.n	8013cce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8013cc4:	8812      	ldrh	r2, [r2, #0]
 8013cc6:	3002      	adds	r0, #2
 8013cc8:	f821 2b02 	strh.w	r2, [r1], #2
 8013ccc:	e7f7      	b.n	8013cbe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8013cce:	f003 0301 	and.w	r3, r3, #1
 8013cd2:	f023 0003 	bic.w	r0, r3, #3
 8013cd6:	4408      	add	r0, r1
 8013cd8:	4288      	cmp	r0, r1
 8013cda:	4614      	mov	r4, r2
 8013cdc:	d904      	bls.n	8013ce8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8013cde:	6824      	ldr	r4, [r4, #0]
 8013ce0:	3204      	adds	r2, #4
 8013ce2:	f841 4b04 	str.w	r4, [r1], #4
 8013ce6:	e7f7      	b.n	8013cd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8013ce8:	f003 0303 	and.w	r3, r3, #3
 8013cec:	440b      	add	r3, r1
 8013cee:	3a01      	subs	r2, #1
 8013cf0:	428b      	cmp	r3, r1
 8013cf2:	d90c      	bls.n	8013d0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013cf4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013cf8:	f801 0b01 	strb.w	r0, [r1], #1
 8013cfc:	e7f8      	b.n	8013cf0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013cfe:	0790      	lsls	r0, r2, #30
 8013d00:	d0e7      	beq.n	8013cd2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013d02:	f832 0b02 	ldrh.w	r0, [r2], #2
 8013d06:	3b02      	subs	r3, #2
 8013d08:	f821 0b02 	strh.w	r0, [r1], #2
 8013d0c:	e7e1      	b.n	8013cd2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013d0e:	2001      	movs	r0, #1
 8013d10:	bd10      	pop	{r4, pc}

08013d12 <_ZN8touchgfx3HAL7noTouchEv>:
 8013d12:	b510      	push	{r4, lr}
 8013d14:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8013d18:	4604      	mov	r4, r0
 8013d1a:	b153      	cbz	r3, 8013d32 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8013d1c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8013d20:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8013d24:	2101      	movs	r1, #1
 8013d26:	301c      	adds	r0, #28
 8013d28:	f004 fd1e 	bl	8018768 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8013d32:	bd10      	pop	{r4, pc}

08013d34 <_ZN8touchgfx3HAL3lcdEv>:
 8013d34:	4b04      	ldr	r3, [pc, #16]	@ (8013d48 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013d3c:	b10a      	cbz	r2, 8013d42 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8013d3e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013d40:	b900      	cbnz	r0, 8013d44 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8013d42:	6898      	ldr	r0, [r3, #8]
 8013d44:	4770      	bx	lr
 8013d46:	bf00      	nop
 8013d48:	2008745c 	.word	0x2008745c

08013d4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8013d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d50:	4604      	mov	r4, r0
 8013d52:	2000      	movs	r0, #0
 8013d54:	b085      	sub	sp, #20
 8013d56:	ad04      	add	r5, sp, #16
 8013d58:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013d5c:	69a0      	ldr	r0, [r4, #24]
 8013d5e:	4699      	mov	r9, r3
 8013d60:	6806      	ldr	r6, [r0, #0]
 8013d62:	9501      	str	r5, [sp, #4]
 8013d64:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8013d68:	460f      	mov	r7, r1
 8013d6a:	9500      	str	r5, [sp, #0]
 8013d6c:	6835      	ldr	r5, [r6, #0]
 8013d6e:	4690      	mov	r8, r2
 8013d70:	47a8      	blx	r5
 8013d72:	4d10      	ldr	r5, [pc, #64]	@ (8013db4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013d74:	4606      	mov	r6, r0
 8013d76:	f8a5 9000 	strh.w	r9, [r5]
 8013d7a:	f7ff ffdb 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 8013d7e:	6803      	ldr	r3, [r0, #0]
 8013d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d82:	4798      	blx	r3
 8013d84:	b128      	cbz	r0, 8013d92 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013d86:	2801      	cmp	r0, #1
 8013d88:	d00b      	beq.n	8013da2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	b005      	add	sp, #20
 8013d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d92:	882b      	ldrh	r3, [r5, #0]
 8013d94:	fb08 7203 	mla	r2, r8, r3, r7
 8013d98:	9b03      	ldr	r3, [sp, #12]
 8013d9a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013d9e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8013da0:	e7f3      	b.n	8013d8a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013da2:	882a      	ldrh	r2, [r5, #0]
 8013da4:	9b03      	ldr	r3, [sp, #12]
 8013da6:	fb08 7202 	mla	r2, r8, r2, r7
 8013daa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013dae:	1a9a      	subs	r2, r3, r2
 8013db0:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8013db2:	e7ea      	b.n	8013d8a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013db4:	20087456 	.word	0x20087456

08013db8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dba:	b08b      	sub	sp, #44	@ 0x2c
 8013dbc:	4617      	mov	r7, r2
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	460e      	mov	r6, r1
 8013dc2:	461d      	mov	r5, r3
 8013dc4:	f7ff ffb6 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 8013dc8:	6803      	ldr	r3, [r0, #0]
 8013dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dcc:	4798      	blx	r3
 8013dce:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8013dd2:	9007      	str	r0, [sp, #28]
 8013dd4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8013e10 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8013dda:	6822      	ldr	r2, [r4, #0]
 8013ddc:	881b      	ldrh	r3, [r3, #0]
 8013dde:	4631      	mov	r1, r6
 8013de0:	9306      	str	r3, [sp, #24]
 8013de2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8013de6:	4620      	mov	r0, r4
 8013de8:	9305      	str	r3, [sp, #20]
 8013dea:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8013dee:	9304      	str	r3, [sp, #16]
 8013df0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013df4:	9303      	str	r3, [sp, #12]
 8013df6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013dfa:	9302      	str	r3, [sp, #8]
 8013dfc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8013e00:	e9cd 5300 	strd	r5, r3, [sp]
 8013e04:	463b      	mov	r3, r7
 8013e06:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8013e08:	2200      	movs	r2, #0
 8013e0a:	47a8      	blx	r5
 8013e0c:	b00b      	add	sp, #44	@ 0x2c
 8013e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e10:	20087456 	.word	0x20087456

08013e14 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e18:	4698      	mov	r8, r3
 8013e1a:	6803      	ldr	r3, [r0, #0]
 8013e1c:	b08b      	sub	sp, #44	@ 0x2c
 8013e1e:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8013e20:	4b14      	ldr	r3, [pc, #80]	@ (8013e74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8013e22:	4617      	mov	r7, r2
 8013e24:	f8b3 9000 	ldrh.w	r9, [r3]
 8013e28:	460e      	mov	r6, r1
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	f7ff ff82 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 8013e30:	6803      	ldr	r3, [r0, #0]
 8013e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e34:	4798      	blx	r3
 8013e36:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013e40:	2302      	movs	r3, #2
 8013e42:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8013e46:	2301      	movs	r3, #1
 8013e48:	9305      	str	r3, [sp, #20]
 8013e4a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8013e4e:	4631      	mov	r1, r6
 8013e50:	9304      	str	r3, [sp, #16]
 8013e52:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8013e56:	4620      	mov	r0, r4
 8013e58:	9303      	str	r3, [sp, #12]
 8013e5a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8013e5e:	9302      	str	r3, [sp, #8]
 8013e60:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8013e64:	e9cd 8300 	strd	r8, r3, [sp]
 8013e68:	463b      	mov	r3, r7
 8013e6a:	47a8      	blx	r5
 8013e6c:	b00b      	add	sp, #44	@ 0x2c
 8013e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e72:	bf00      	nop
 8013e74:	20087456 	.word	0x20087456

08013e78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e7c:	4698      	mov	r8, r3
 8013e7e:	6803      	ldr	r3, [r0, #0]
 8013e80:	b087      	sub	sp, #28
 8013e82:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8013e84:	4b10      	ldr	r3, [pc, #64]	@ (8013ec8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8013e86:	460e      	mov	r6, r1
 8013e88:	f8b3 9000 	ldrh.w	r9, [r3]
 8013e8c:	4617      	mov	r7, r2
 8013e8e:	4604      	mov	r4, r0
 8013e90:	f7ff ff50 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 8013e94:	6803      	ldr	r3, [r0, #0]
 8013e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e98:	4798      	blx	r3
 8013e9a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8013e9e:	f8cd 900c 	str.w	r9, [sp, #12]
 8013ea2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8013ea6:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8013eaa:	463a      	mov	r2, r7
 8013eac:	9302      	str	r3, [sp, #8]
 8013eae:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8013eb2:	4631      	mov	r1, r6
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013eba:	4620      	mov	r0, r4
 8013ebc:	9300      	str	r3, [sp, #0]
 8013ebe:	4643      	mov	r3, r8
 8013ec0:	47a8      	blx	r5
 8013ec2:	b007      	add	sp, #28
 8013ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ec8:	20087456 	.word	0x20087456

08013ecc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed0:	4604      	mov	r4, r0
 8013ed2:	b08f      	sub	sp, #60	@ 0x3c
 8013ed4:	4610      	mov	r0, r2
 8013ed6:	460d      	mov	r5, r1
 8013ed8:	4691      	mov	r9, r2
 8013eda:	461e      	mov	r6, r3
 8013edc:	f004 f978 	bl	80181d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	f000 809d 	beq.w	8014020 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8013ee6:	6823      	ldr	r3, [r4, #0]
 8013ee8:	4620      	mov	r0, r4
 8013eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013eec:	4798      	blx	r3
 8013eee:	6823      	ldr	r3, [r4, #0]
 8013ef0:	f8df b190 	ldr.w	fp, [pc, #400]	@ 8014084 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8013ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	4798      	blx	r3
 8013efa:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8014088 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8013efe:	f8bb 3000 	ldrh.w	r3, [fp]
 8013f02:	4f5d      	ldr	r7, [pc, #372]	@ (8014078 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013f04:	9301      	str	r3, [sp, #4]
 8013f06:	f8ba 3000 	ldrh.w	r3, [sl]
 8013f0a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8013f0e:	9302      	str	r3, [sp, #8]
 8013f10:	883b      	ldrh	r3, [r7, #0]
 8013f12:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8013f16:	9303      	str	r3, [sp, #12]
 8013f18:	4b58      	ldr	r3, [pc, #352]	@ (801407c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013f1a:	4640      	mov	r0, r8
 8013f1c:	881a      	ldrh	r2, [r3, #0]
 8013f1e:	9305      	str	r3, [sp, #20]
 8013f20:	9204      	str	r2, [sp, #16]
 8013f22:	f004 f9e9 	bl	80182f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013f26:	8038      	strh	r0, [r7, #0]
 8013f28:	4640      	mov	r0, r8
 8013f2a:	f004 fa19 	bl	8018360 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013f2e:	9b05      	ldr	r3, [sp, #20]
 8013f30:	b280      	uxth	r0, r0
 8013f32:	8018      	strh	r0, [r3, #0]
 8013f34:	4b52      	ldr	r3, [pc, #328]	@ (8014080 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d174      	bne.n	8014026 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8013f3c:	883b      	ldrh	r3, [r7, #0]
 8013f3e:	f8aa 0000 	strh.w	r0, [sl]
 8013f42:	f8ab 3000 	strh.w	r3, [fp]
 8013f46:	4648      	mov	r0, r9
 8013f48:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8013f4c:	f004 f940 	bl	80181d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013f50:	2200      	movs	r2, #0
 8013f52:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8013f56:	4611      	mov	r1, r2
 8013f58:	4628      	mov	r0, r5
 8013f5a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8013f5e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013f62:	f7fc fa9a 	bl	801049a <_ZN8touchgfx8Drawable5setXYEss>
 8013f66:	2301      	movs	r3, #1
 8013f68:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8013f6c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8013f70:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	dd5c      	ble.n	8014032 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013f78:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	dd58      	ble.n	8014032 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013f80:	462a      	mov	r2, r5
 8013f82:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013f86:	ab0a      	add	r3, sp, #40	@ 0x28
 8013f88:	6851      	ldr	r1, [r2, #4]
 8013f8a:	c303      	stmia	r3!, {r0, r1}
 8013f8c:	4631      	mov	r1, r6
 8013f8e:	a80a      	add	r0, sp, #40	@ 0x28
 8013f90:	f7ff fbe8 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 8013f94:	2100      	movs	r1, #0
 8013f96:	4b38      	ldr	r3, [pc, #224]	@ (8014078 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013f98:	910c      	str	r1, [sp, #48]	@ 0x30
 8013f9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f9e:	4b37      	ldr	r3, [pc, #220]	@ (801407c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013fa0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013fa8:	aa0a      	add	r2, sp, #40	@ 0x28
 8013faa:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013fae:	ab08      	add	r3, sp, #32
 8013fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013fb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	a90c      	add	r1, sp, #48	@ 0x30
 8013fbc:	f7ff fbd2 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 8013fc0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d13c      	bne.n	8014040 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8013fc6:	2000      	movs	r0, #0
 8013fc8:	2600      	movs	r6, #0
 8013fca:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8013fce:	696b      	ldr	r3, [r5, #20]
 8013fd0:	682a      	ldr	r2, [r5, #0]
 8013fd2:	616e      	str	r6, [r5, #20]
 8013fd4:	9305      	str	r3, [sp, #20]
 8013fd6:	6892      	ldr	r2, [r2, #8]
 8013fd8:	a908      	add	r1, sp, #32
 8013fda:	4628      	mov	r0, r5
 8013fdc:	4790      	blx	r2
 8013fde:	9b05      	ldr	r3, [sp, #20]
 8013fe0:	4652      	mov	r2, sl
 8013fe2:	616b      	str	r3, [r5, #20]
 8013fe4:	4649      	mov	r1, r9
 8013fe6:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8013fea:	4628      	mov	r0, r5
 8013fec:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8013ff0:	f7fc fa53 	bl	801049a <_ZN8touchgfx8Drawable5setXYEss>
 8013ff4:	9a01      	ldr	r2, [sp, #4]
 8013ff6:	4b23      	ldr	r3, [pc, #140]	@ (8014084 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8013ff8:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8013ffc:	801a      	strh	r2, [r3, #0]
 8013ffe:	9a02      	ldr	r2, [sp, #8]
 8014000:	4b21      	ldr	r3, [pc, #132]	@ (8014088 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014002:	4620      	mov	r0, r4
 8014004:	801a      	strh	r2, [r3, #0]
 8014006:	9a03      	ldr	r2, [sp, #12]
 8014008:	4b1b      	ldr	r3, [pc, #108]	@ (8014078 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801400a:	801a      	strh	r2, [r3, #0]
 801400c:	4b1b      	ldr	r3, [pc, #108]	@ (801407c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801400e:	9a04      	ldr	r2, [sp, #16]
 8014010:	801a      	strh	r2, [r3, #0]
 8014012:	6823      	ldr	r3, [r4, #0]
 8014014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014016:	4798      	blx	r3
 8014018:	6823      	ldr	r3, [r4, #0]
 801401a:	4620      	mov	r0, r4
 801401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801401e:	4798      	blx	r3
 8014020:	b00f      	add	sp, #60	@ 0x3c
 8014022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014026:	883b      	ldrh	r3, [r7, #0]
 8014028:	f8ab 0000 	strh.w	r0, [fp]
 801402c:	f8aa 3000 	strh.w	r3, [sl]
 8014030:	e789      	b.n	8013f46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014032:	462a      	mov	r2, r5
 8014034:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014038:	ab0a      	add	r3, sp, #40	@ 0x28
 801403a:	6851      	ldr	r1, [r2, #4]
 801403c:	c303      	stmia	r3!, {r0, r1}
 801403e:	e7a9      	b.n	8013f94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014040:	a807      	add	r0, sp, #28
 8014042:	f004 fa97 	bl	8018574 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014046:	4606      	mov	r6, r0
 8014048:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801404a:	6803      	ldr	r3, [r0, #0]
 801404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801404e:	4798      	blx	r3
 8014050:	4286      	cmp	r6, r0
 8014052:	d1b8      	bne.n	8013fc6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8014054:	f7ff fe6e 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 8014058:	6803      	ldr	r3, [r0, #0]
 801405a:	4606      	mov	r6, r0
 801405c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801405e:	a807      	add	r0, sp, #28
 8014060:	9305      	str	r3, [sp, #20]
 8014062:	f004 fa87 	bl	8018574 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014066:	9b05      	ldr	r3, [sp, #20]
 8014068:	4601      	mov	r1, r0
 801406a:	4630      	mov	r0, r6
 801406c:	4798      	blx	r3
 801406e:	f080 0001 	eor.w	r0, r0, #1
 8014072:	b2c0      	uxtb	r0, r0
 8014074:	e7a8      	b.n	8013fc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8014076:	bf00      	nop
 8014078:	20087450 	.word	0x20087450
 801407c:	20087452 	.word	0x20087452
 8014080:	20087454 	.word	0x20087454
 8014084:	20087456 	.word	0x20087456
 8014088:	20087458 	.word	0x20087458

0801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801408c:	b510      	push	{r4, lr}
 801408e:	4b07      	ldr	r3, [pc, #28]	@ (80140ac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8014090:	4604      	mov	r4, r0
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	b13b      	cbz	r3, 80140a6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014096:	6803      	ldr	r3, [r0, #0]
 8014098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801409a:	4798      	blx	r3
 801409c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801409e:	4283      	cmp	r3, r0
 80140a0:	d101      	bne.n	80140a6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80140a2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80140a4:	bd10      	pop	{r4, pc}
 80140a6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80140a8:	e7fc      	b.n	80140a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80140aa:	bf00      	nop
 80140ac:	2008745a 	.word	0x2008745a

080140b0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80140b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b4:	461d      	mov	r5, r3
 80140b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80140ba:	2400      	movs	r4, #0
 80140bc:	b08a      	sub	sp, #40	@ 0x28
 80140be:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80140c2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80140c6:	4690      	mov	r8, r2
 80140c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80140cc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80140d0:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80140d4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80140d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80140dc:	4607      	mov	r7, r0
 80140de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80140e2:	9404      	str	r4, [sp, #16]
 80140e4:	f88d 4020 	strb.w	r4, [sp, #32]
 80140e8:	f7ff ffd0 	bl	801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80140ec:	fb06 8505 	mla	r5, r6, r5, r8
 80140f0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	9505      	str	r5, [sp, #20]
 80140f8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80140fc:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014100:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8014104:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8014108:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801410c:	6803      	ldr	r3, [r0, #0]
 801410e:	a901      	add	r1, sp, #4
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	4798      	blx	r3
 8014114:	b00a      	add	sp, #40	@ 0x28
 8014116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801411a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801411a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801411e:	2400      	movs	r4, #0
 8014120:	461d      	mov	r5, r3
 8014122:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014126:	4691      	mov	r9, r2
 8014128:	b08b      	sub	sp, #44	@ 0x2c
 801412a:	4688      	mov	r8, r1
 801412c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8014130:	4607      	mov	r7, r0
 8014132:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014136:	9404      	str	r4, [sp, #16]
 8014138:	f7ff ffa8 	bl	801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801413c:	fb06 9505 	mla	r5, r6, r5, r9
 8014140:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014144:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014148:	f8ad 3018 	strh.w	r3, [sp, #24]
 801414c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	9505      	str	r5, [sp, #20]
 8014154:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014158:	f8ad 401c 	strh.w	r4, [sp, #28]
 801415c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014160:	f8cd 8010 	str.w	r8, [sp, #16]
 8014164:	f8ad 4020 	strh.w	r4, [sp, #32]
 8014168:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801416c:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8014170:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8014174:	6803      	ldr	r3, [r0, #0]
 8014176:	a901      	add	r1, sp, #4
 8014178:	685b      	ldr	r3, [r3, #4]
 801417a:	4798      	blx	r3
 801417c:	b00b      	add	sp, #44	@ 0x2c
 801417e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014184 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014188:	4698      	mov	r8, r3
 801418a:	2300      	movs	r3, #0
 801418c:	b08a      	sub	sp, #40	@ 0x28
 801418e:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8014192:	4606      	mov	r6, r0
 8014194:	2d0b      	cmp	r5, #11
 8014196:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801419a:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801419e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80141a2:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80141a6:	9304      	str	r3, [sp, #16]
 80141a8:	d137      	bne.n	801421a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80141aa:	2380      	movs	r3, #128	@ 0x80
 80141ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80141b0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80141b4:	f88d 0020 	strb.w	r0, [sp, #32]
 80141b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80141bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80141c0:	4630      	mov	r0, r6
 80141c2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80141c6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80141ca:	9203      	str	r2, [sp, #12]
 80141cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80141d0:	f7ff ff5c 	bl	801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80141d4:	2c0b      	cmp	r4, #11
 80141d6:	bf8c      	ite	hi
 80141d8:	2100      	movhi	r1, #0
 80141da:	4b1b      	ldrls	r3, [pc, #108]	@ (8014248 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80141dc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80141e0:	bf98      	it	ls
 80141e2:	5d19      	ldrbls	r1, [r3, r4]
 80141e4:	fb02 8307 	mla	r3, r2, r7, r8
 80141e8:	10c9      	asrs	r1, r1, #3
 80141ea:	fb01 0003 	mla	r0, r1, r3, r0
 80141ee:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80141f2:	9005      	str	r0, [sp, #20]
 80141f4:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80141f8:	2300      	movs	r3, #0
 80141fa:	6870      	ldr	r0, [r6, #4]
 80141fc:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014200:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8014204:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8014208:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801420c:	6803      	ldr	r3, [r0, #0]
 801420e:	a901      	add	r1, sp, #4
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	4798      	blx	r3
 8014214:	b00a      	add	sp, #40	@ 0x28
 8014216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801421a:	2d02      	cmp	r5, #2
 801421c:	d109      	bne.n	8014232 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801421e:	28ff      	cmp	r0, #255	@ 0xff
 8014220:	d105      	bne.n	801422e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014222:	f1bc 0f00 	cmp.w	ip, #0
 8014226:	bf14      	ite	ne
 8014228:	2340      	movne	r3, #64	@ 0x40
 801422a:	2320      	moveq	r3, #32
 801422c:	e7be      	b.n	80141ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801422e:	2340      	movs	r3, #64	@ 0x40
 8014230:	e7bc      	b.n	80141ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014232:	28ff      	cmp	r0, #255	@ 0xff
 8014234:	d105      	bne.n	8014242 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014236:	f1bc 0f00 	cmp.w	ip, #0
 801423a:	bf14      	ite	ne
 801423c:	2304      	movne	r3, #4
 801423e:	2301      	moveq	r3, #1
 8014240:	e7b4      	b.n	80141ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014242:	2304      	movs	r3, #4
 8014244:	e7b2      	b.n	80141ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014246:	bf00      	nop
 8014248:	0802d45c 	.word	0x0802d45c

0801424c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014250:	b08b      	sub	sp, #44	@ 0x2c
 8014252:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8014256:	461d      	mov	r5, r3
 8014258:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801425c:	bf14      	ite	ne
 801425e:	2308      	movne	r3, #8
 8014260:	2302      	moveq	r3, #2
 8014262:	2400      	movs	r4, #0
 8014264:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8014268:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801426c:	4688      	mov	r8, r1
 801426e:	4693      	mov	fp, r2
 8014270:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8014274:	9404      	str	r4, [sp, #16]
 8014276:	4607      	mov	r7, r0
 8014278:	f7ff ff08 	bl	801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801427c:	2e0b      	cmp	r6, #11
 801427e:	bf98      	it	ls
 8014280:	4b15      	ldrls	r3, [pc, #84]	@ (80142d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014282:	fb05 b50a 	mla	r5, r5, sl, fp
 8014286:	bf98      	it	ls
 8014288:	5d9c      	ldrbls	r4, [r3, r6]
 801428a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801428e:	10e4      	asrs	r4, r4, #3
 8014290:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014294:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8014298:	fb04 0405 	mla	r4, r4, r5, r0
 801429c:	f8ad 301a 	strh.w	r3, [sp, #26]
 80142a0:	2300      	movs	r3, #0
 80142a2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	9405      	str	r4, [sp, #20]
 80142aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80142ae:	f8ad a01e 	strh.w	sl, [sp, #30]
 80142b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80142b6:	f88d 9020 	strb.w	r9, [sp, #32]
 80142ba:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80142be:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80142c2:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80142c6:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80142ca:	6803      	ldr	r3, [r0, #0]
 80142cc:	a901      	add	r1, sp, #4
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	4798      	blx	r3
 80142d2:	b00b      	add	sp, #44	@ 0x2c
 80142d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d8:	0802d45c 	.word	0x0802d45c

080142dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80142dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142e0:	461e      	mov	r6, r3
 80142e2:	4b0a      	ldr	r3, [pc, #40]	@ (801430c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80142e4:	460f      	mov	r7, r1
 80142e6:	881d      	ldrh	r5, [r3, #0]
 80142e8:	4690      	mov	r8, r2
 80142ea:	f7ff fd23 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 80142ee:	6803      	ldr	r3, [r0, #0]
 80142f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80142f2:	4798      	blx	r3
 80142f4:	280b      	cmp	r0, #11
 80142f6:	bf8e      	itee	hi
 80142f8:	2400      	movhi	r4, #0
 80142fa:	4b05      	ldrls	r3, [pc, #20]	@ (8014310 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80142fc:	5c1c      	ldrbls	r4, [r3, r0]
 80142fe:	fb08 7005 	mla	r0, r8, r5, r7
 8014302:	10e4      	asrs	r4, r4, #3
 8014304:	fb04 6000 	mla	r0, r4, r0, r6
 8014308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430c:	20087456 	.word	0x20087456
 8014310:	0802d45c 	.word	0x0802d45c

08014314 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014316:	2500      	movs	r5, #0
 8014318:	b08b      	sub	sp, #44	@ 0x2c
 801431a:	461f      	mov	r7, r3
 801431c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8014320:	4604      	mov	r4, r0
 8014322:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014326:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801432a:	4616      	mov	r6, r2
 801432c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014330:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014334:	9504      	str	r5, [sp, #16]
 8014336:	f8ad 301a 	strh.w	r3, [sp, #26]
 801433a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801433e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014342:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014346:	f88d 3020 	strb.w	r3, [sp, #32]
 801434a:	f7ff fe9f 	bl	801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801434e:	463a      	mov	r2, r7
 8014350:	4631      	mov	r1, r6
 8014352:	4603      	mov	r3, r0
 8014354:	4620      	mov	r0, r4
 8014356:	f7ff ffc1 	bl	80142dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801435a:	4b0e      	ldr	r3, [pc, #56]	@ (8014394 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801435c:	9005      	str	r0, [sp, #20]
 801435e:	881b      	ldrh	r3, [r3, #0]
 8014360:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014364:	f7ff fce6 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 8014368:	6803      	ldr	r3, [r0, #0]
 801436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801436c:	4798      	blx	r3
 801436e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014370:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8014374:	9304      	str	r3, [sp, #16]
 8014376:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801437a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801437e:	6860      	ldr	r0, [r4, #4]
 8014380:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8014384:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8014388:	6803      	ldr	r3, [r0, #0]
 801438a:	a901      	add	r1, sp, #4
 801438c:	685b      	ldr	r3, [r3, #4]
 801438e:	4798      	blx	r3
 8014390:	b00b      	add	sp, #44	@ 0x2c
 8014392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014394:	20087456 	.word	0x20087456

08014398 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801439a:	b08d      	sub	sp, #52	@ 0x34
 801439c:	466b      	mov	r3, sp
 801439e:	e883 0006 	stmia.w	r3, {r1, r2}
 80143a2:	2300      	movs	r3, #0
 80143a4:	2501      	movs	r5, #1
 80143a6:	9306      	str	r3, [sp, #24]
 80143a8:	6803      	ldr	r3, [r0, #0]
 80143aa:	9503      	str	r5, [sp, #12]
 80143ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143ae:	4604      	mov	r4, r0
 80143b0:	f8bd 6000 	ldrh.w	r6, [sp]
 80143b4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80143b8:	4798      	blx	r3
 80143ba:	463a      	mov	r2, r7
 80143bc:	4631      	mov	r1, r6
 80143be:	4603      	mov	r3, r0
 80143c0:	4620      	mov	r0, r4
 80143c2:	f7ff ff8b 	bl	80142dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80143c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80143c8:	9004      	str	r0, [sp, #16]
 80143ca:	9307      	str	r3, [sp, #28]
 80143cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80143d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80143d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80143d8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80143dc:	4b0e      	ldr	r3, [pc, #56]	@ (8014418 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80143de:	881b      	ldrh	r3, [r3, #0]
 80143e0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80143e4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80143e8:	f7ff fca4 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 80143ec:	6803      	ldr	r3, [r0, #0]
 80143ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143f0:	4798      	blx	r3
 80143f2:	23ff      	movs	r3, #255	@ 0xff
 80143f4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80143f8:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80143fc:	6860      	ldr	r0, [r4, #4]
 80143fe:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8014402:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8014406:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801440a:	6803      	ldr	r3, [r0, #0]
 801440c:	a903      	add	r1, sp, #12
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	4798      	blx	r3
 8014412:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8014414:	b00d      	add	sp, #52	@ 0x34
 8014416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014418:	20087456 	.word	0x20087456

0801441c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014420:	b08c      	sub	sp, #48	@ 0x30
 8014422:	466d      	mov	r5, sp
 8014424:	461e      	mov	r6, r3
 8014426:	2300      	movs	r3, #0
 8014428:	e885 0006 	stmia.w	r5, {r1, r2}
 801442c:	2501      	movs	r5, #1
 801442e:	9306      	str	r3, [sp, #24]
 8014430:	6803      	ldr	r3, [r0, #0]
 8014432:	9503      	str	r5, [sp, #12]
 8014434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014436:	4604      	mov	r4, r0
 8014438:	f8bd 7000 	ldrh.w	r7, [sp]
 801443c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014440:	4798      	blx	r3
 8014442:	4642      	mov	r2, r8
 8014444:	4639      	mov	r1, r7
 8014446:	4603      	mov	r3, r0
 8014448:	4620      	mov	r0, r4
 801444a:	f7ff ff47 	bl	80142dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801444e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014452:	9004      	str	r0, [sp, #16]
 8014454:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014458:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801445c:	9607      	str	r6, [sp, #28]
 801445e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8014462:	4b10      	ldr	r3, [pc, #64]	@ (80144a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8014464:	881b      	ldrh	r3, [r3, #0]
 8014466:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801446a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801446c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8014470:	f7ff fc60 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 8014474:	6803      	ldr	r3, [r0, #0]
 8014476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014478:	4798      	blx	r3
 801447a:	23ff      	movs	r3, #255	@ 0xff
 801447c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8014480:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8014484:	6860      	ldr	r0, [r4, #4]
 8014486:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801448a:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801448e:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8014492:	6803      	ldr	r3, [r0, #0]
 8014494:	a903      	add	r1, sp, #12
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	4798      	blx	r3
 801449a:	4630      	mov	r0, r6
 801449c:	b00c      	add	sp, #48	@ 0x30
 801449e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144a2:	bf00      	nop
 80144a4:	20087456 	.word	0x20087456

080144a8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80144a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144aa:	b085      	sub	sp, #20
 80144ac:	ac02      	add	r4, sp, #8
 80144ae:	e884 0006 	stmia.w	r4, {r1, r2}
 80144b2:	4605      	mov	r5, r0
 80144b4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80144b8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80144bc:	f7ff fde6 	bl	801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80144c0:	463a      	mov	r2, r7
 80144c2:	4603      	mov	r3, r0
 80144c4:	4631      	mov	r1, r6
 80144c6:	4628      	mov	r0, r5
 80144c8:	f7ff ff08 	bl	80142dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80144cc:	4a05      	ldr	r2, [pc, #20]	@ (80144e4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80144ce:	682b      	ldr	r3, [r5, #0]
 80144d0:	8812      	ldrh	r2, [r2, #0]
 80144d2:	9200      	str	r2, [sp, #0]
 80144d4:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 80144d6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80144da:	4603      	mov	r3, r0
 80144dc:	4628      	mov	r0, r5
 80144de:	47b0      	blx	r6
 80144e0:	b005      	add	sp, #20
 80144e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144e4:	20087456 	.word	0x20087456

080144e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80144e8:	b570      	push	{r4, r5, r6, lr}
 80144ea:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80144ee:	4604      	mov	r4, r0
 80144f0:	b19b      	cbz	r3, 801451a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80144f2:	2002      	movs	r0, #2
 80144f4:	f7fd f80a 	bl	801150c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80144f8:	2300      	movs	r3, #0
 80144fa:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80144fe:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8014502:	6823      	ldr	r3, [r4, #0]
 8014504:	4620      	mov	r0, r4
 8014506:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801450a:	f7ff fdbf 	bl	801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801450e:	462b      	mov	r3, r5
 8014510:	4601      	mov	r1, r0
 8014512:	4620      	mov	r0, r4
 8014514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014518:	4718      	bx	r3
 801451a:	bd70      	pop	{r4, r5, r6, pc}

0801451c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801451c:	b538      	push	{r3, r4, r5, lr}
 801451e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8014522:	4604      	mov	r4, r0
 8014524:	428b      	cmp	r3, r1
 8014526:	460d      	mov	r5, r1
 8014528:	d006      	beq.n	8014538 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801452a:	6803      	ldr	r3, [r0, #0]
 801452c:	b929      	cbnz	r1, 801453a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801452e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8014532:	4798      	blx	r3
 8014534:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8014538:	bd38      	pop	{r3, r4, r5, pc}
 801453a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801453e:	e7f8      	b.n	8014532 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014540 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014540:	b510      	push	{r4, lr}
 8014542:	4b0d      	ldr	r3, [pc, #52]	@ (8014578 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014544:	4604      	mov	r4, r0
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	b95b      	cbnz	r3, 8014562 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801454a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801454e:	2b02      	cmp	r3, #2
 8014550:	d007      	beq.n	8014562 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014552:	6840      	ldr	r0, [r0, #4]
 8014554:	f000 f90e 	bl	8014774 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014558:	b118      	cbz	r0, 8014562 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801455a:	6862      	ldr	r2, [r4, #4]
 801455c:	7a53      	ldrb	r3, [r2, #9]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d0fc      	beq.n	801455c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014562:	f7fd fb61 	bl	8011c28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014566:	4620      	mov	r0, r4
 8014568:	2100      	movs	r1, #0
 801456a:	f7ff ffd7 	bl	801451c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801456e:	4620      	mov	r0, r4
 8014570:	f7ff fd8c 	bl	801408c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014574:	bd10      	pop	{r4, pc}
 8014576:	bf00      	nop
 8014578:	2008745a 	.word	0x2008745a

0801457c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801457c:	4770      	bx	lr

0801457e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801457e:	2000      	movs	r0, #0
 8014580:	4770      	bx	lr

08014582 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014582:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014586:	1a13      	subs	r3, r2, r0
 8014588:	4258      	negs	r0, r3
 801458a:	4158      	adcs	r0, r3
 801458c:	4770      	bx	lr

0801458e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801458e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014592:	1a9b      	subs	r3, r3, r2
 8014594:	2b00      	cmp	r3, #0
 8014596:	bfdc      	itt	le
 8014598:	6882      	ldrle	r2, [r0, #8]
 801459a:	189b      	addle	r3, r3, r2
 801459c:	2b01      	cmp	r3, #1
 801459e:	bfcc      	ite	gt
 80145a0:	2000      	movgt	r0, #0
 80145a2:	2001      	movle	r0, #1
 80145a4:	4770      	bx	lr

080145a6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80145a6:	6902      	ldr	r2, [r0, #16]
 80145a8:	6843      	ldr	r3, [r0, #4]
 80145aa:	2024      	movs	r0, #36	@ 0x24
 80145ac:	fb00 3002 	mla	r0, r0, r2, r3
 80145b0:	4770      	bx	lr

080145b2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80145b2:	6803      	ldr	r3, [r0, #0]
 80145b4:	691b      	ldr	r3, [r3, #16]
 80145b6:	4718      	bx	r3

080145b8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80145b8:	2301      	movs	r3, #1
 80145ba:	b570      	push	{r4, r5, r6, lr}
 80145bc:	7203      	strb	r3, [r0, #8]
 80145be:	4604      	mov	r4, r0
 80145c0:	6840      	ldr	r0, [r0, #4]
 80145c2:	6803      	ldr	r3, [r0, #0]
 80145c4:	699b      	ldr	r3, [r3, #24]
 80145c6:	4798      	blx	r3
 80145c8:	6803      	ldr	r3, [r0, #0]
 80145ca:	4605      	mov	r5, r0
 80145cc:	2b40      	cmp	r3, #64	@ 0x40
 80145ce:	d00c      	beq.n	80145ea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80145d0:	d810      	bhi.n	80145f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80145d2:	2b04      	cmp	r3, #4
 80145d4:	d01d      	beq.n	8014612 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80145d6:	d804      	bhi.n	80145e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d006      	beq.n	80145ea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80145dc:	2b02      	cmp	r3, #2
 80145de:	d02c      	beq.n	801463a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80145e0:	bd70      	pop	{r4, r5, r6, pc}
 80145e2:	2b08      	cmp	r3, #8
 80145e4:	d01d      	beq.n	8014622 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80145e6:	2b20      	cmp	r3, #32
 80145e8:	d1fa      	bne.n	80145e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80145ea:	6823      	ldr	r3, [r4, #0]
 80145ec:	4620      	mov	r0, r4
 80145ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145f0:	4798      	blx	r3
 80145f2:	e013      	b.n	801461c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80145f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80145f8:	d0f7      	beq.n	80145ea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80145fa:	d804      	bhi.n	8014606 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80145fc:	2b80      	cmp	r3, #128	@ 0x80
 80145fe:	d0f4      	beq.n	80145ea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014604:	e7f0      	b.n	80145e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801460a:	d0ee      	beq.n	80145ea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801460c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014610:	e7e5      	b.n	80145de <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014612:	6823      	ldr	r3, [r4, #0]
 8014614:	7f01      	ldrb	r1, [r0, #28]
 8014616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014618:	4620      	mov	r0, r4
 801461a:	4798      	blx	r3
 801461c:	6823      	ldr	r3, [r4, #0]
 801461e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014620:	e006      	b.n	8014630 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014622:	6823      	ldr	r3, [r4, #0]
 8014624:	7f01      	ldrb	r1, [r0, #28]
 8014626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014628:	4620      	mov	r0, r4
 801462a:	4798      	blx	r3
 801462c:	6823      	ldr	r3, [r4, #0]
 801462e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014630:	4629      	mov	r1, r5
 8014632:	4620      	mov	r0, r4
 8014634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014638:	4718      	bx	r3
 801463a:	6823      	ldr	r3, [r4, #0]
 801463c:	4620      	mov	r0, r4
 801463e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014640:	4798      	blx	r3
 8014642:	e7f3      	b.n	801462c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014644 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014644:	4770      	bx	lr

08014646 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014646:	4770      	bx	lr

08014648 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014648:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801464c:	1ad2      	subs	r2, r2, r3
 801464e:	2a00      	cmp	r2, #0
 8014650:	b510      	push	{r4, lr}
 8014652:	bfdc      	itt	le
 8014654:	6884      	ldrle	r4, [r0, #8]
 8014656:	1912      	addle	r2, r2, r4
 8014658:	2a01      	cmp	r2, #1
 801465a:	dd16      	ble.n	801468a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801465c:	2424      	movs	r4, #36	@ 0x24
 801465e:	6842      	ldr	r2, [r0, #4]
 8014660:	fb04 2303 	mla	r3, r4, r3, r2
 8014664:	f101 0220 	add.w	r2, r1, #32
 8014668:	f851 4b04 	ldr.w	r4, [r1], #4
 801466c:	4291      	cmp	r1, r2
 801466e:	f843 4b04 	str.w	r4, [r3], #4
 8014672:	d1f9      	bne.n	8014668 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014674:	780a      	ldrb	r2, [r1, #0]
 8014676:	701a      	strb	r2, [r3, #0]
 8014678:	68c3      	ldr	r3, [r0, #12]
 801467a:	6882      	ldr	r2, [r0, #8]
 801467c:	3301      	adds	r3, #1
 801467e:	429a      	cmp	r2, r3
 8014680:	bfd8      	it	le
 8014682:	1a9b      	suble	r3, r3, r2
 8014684:	f3bf 8f5b 	dmb	ish
 8014688:	60c3      	str	r3, [r0, #12]
 801468a:	bd10      	pop	{r4, pc}

0801468c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801468c:	6903      	ldr	r3, [r0, #16]
 801468e:	6882      	ldr	r2, [r0, #8]
 8014690:	3301      	adds	r3, #1
 8014692:	429a      	cmp	r2, r3
 8014694:	bfd8      	it	le
 8014696:	1a9b      	suble	r3, r3, r2
 8014698:	f3bf 8f5b 	dmb	ish
 801469c:	6103      	str	r3, [r0, #16]
 801469e:	4770      	bx	lr

080146a0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80146a0:	b570      	push	{r4, r5, r6, lr}
 80146a2:	4604      	mov	r4, r0
 80146a4:	460e      	mov	r6, r1
 80146a6:	6860      	ldr	r0, [r4, #4]
 80146a8:	6803      	ldr	r3, [r0, #0]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	4798      	blx	r3
 80146ae:	2800      	cmp	r0, #0
 80146b0:	d1f9      	bne.n	80146a6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80146b2:	4d0d      	ldr	r5, [pc, #52]	@ (80146e8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80146b4:	6828      	ldr	r0, [r5, #0]
 80146b6:	6803      	ldr	r3, [r0, #0]
 80146b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80146ba:	4798      	blx	r3
 80146bc:	f7fd faf6 	bl	8011cac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80146c0:	6828      	ldr	r0, [r5, #0]
 80146c2:	2101      	movs	r1, #1
 80146c4:	f7ff ff2a 	bl	801451c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80146c8:	6860      	ldr	r0, [r4, #4]
 80146ca:	4631      	mov	r1, r6
 80146cc:	6803      	ldr	r3, [r0, #0]
 80146ce:	689b      	ldr	r3, [r3, #8]
 80146d0:	4798      	blx	r3
 80146d2:	6823      	ldr	r3, [r4, #0]
 80146d4:	4620      	mov	r0, r4
 80146d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146d8:	4798      	blx	r3
 80146da:	6828      	ldr	r0, [r5, #0]
 80146dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146e0:	6803      	ldr	r3, [r0, #0]
 80146e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80146e4:	4718      	bx	r3
 80146e6:	bf00      	nop
 80146e8:	2008745c 	.word	0x2008745c

080146ec <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80146ec:	b508      	push	{r3, lr}
 80146ee:	f7fd fa9b 	bl	8011c28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80146f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80146f6:	f7fd bab7 	b.w	8011c68 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080146fa <_ZN8touchgfx13DMA_Interface5startEv>:
 80146fa:	b510      	push	{r4, lr}
 80146fc:	4604      	mov	r4, r0
 80146fe:	6840      	ldr	r0, [r0, #4]
 8014700:	6803      	ldr	r3, [r0, #0]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4798      	blx	r3
 8014706:	b948      	cbnz	r0, 801471c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014708:	7a63      	ldrb	r3, [r4, #9]
 801470a:	b13b      	cbz	r3, 801471c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801470c:	7a23      	ldrb	r3, [r4, #8]
 801470e:	b92b      	cbnz	r3, 801471c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014710:	6823      	ldr	r3, [r4, #0]
 8014712:	4620      	mov	r0, r4
 8014714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801471a:	4718      	bx	r3
 801471c:	bd10      	pop	{r4, pc}

0801471e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801471e:	b570      	push	{r4, r5, r6, lr}
 8014720:	4604      	mov	r4, r0
 8014722:	6840      	ldr	r0, [r0, #4]
 8014724:	6803      	ldr	r3, [r0, #0]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	4798      	blx	r3
 801472a:	4605      	mov	r5, r0
 801472c:	b930      	cbnz	r0, 801473c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801472e:	7a23      	ldrb	r3, [r4, #8]
 8014730:	b123      	cbz	r3, 801473c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014732:	6860      	ldr	r0, [r4, #4]
 8014734:	6803      	ldr	r3, [r0, #0]
 8014736:	695b      	ldr	r3, [r3, #20]
 8014738:	4798      	blx	r3
 801473a:	7225      	strb	r5, [r4, #8]
 801473c:	6860      	ldr	r0, [r4, #4]
 801473e:	6803      	ldr	r3, [r0, #0]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	4798      	blx	r3
 8014744:	b928      	cbnz	r0, 8014752 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014746:	6823      	ldr	r3, [r4, #0]
 8014748:	4620      	mov	r0, r4
 801474a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014750:	4718      	bx	r3
 8014752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014756:	f7fd bab5 	b.w	8011cc4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801475c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801475c:	6082      	str	r2, [r0, #8]
 801475e:	2200      	movs	r2, #0
 8014760:	b510      	push	{r4, lr}
 8014762:	4c03      	ldr	r4, [pc, #12]	@ (8014770 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014764:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014768:	e9c0 4100 	strd	r4, r1, [r0]
 801476c:	bd10      	pop	{r4, pc}
 801476e:	bf00      	nop
 8014770:	0802d598 	.word	0x0802d598

08014774 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014774:	6840      	ldr	r0, [r0, #4]
 8014776:	6803      	ldr	r3, [r0, #0]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4718      	bx	r3

0801477c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801477c:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8014780:	4770      	bx	lr

08014782 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8014782:	b510      	push	{r4, lr}
 8014784:	4604      	mov	r4, r0
 8014786:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8014788:	b150      	cbz	r0, 80147a0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801478a:	6803      	ldr	r3, [r0, #0]
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	4798      	blx	r3
 8014790:	b130      	cbz	r0, 80147a0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8014792:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014794:	4621      	mov	r1, r4
 8014796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801479a:	6803      	ldr	r3, [r0, #0]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	4718      	bx	r3
 80147a0:	bd10      	pop	{r4, pc}

080147a2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80147a2:	790b      	ldrb	r3, [r1, #4]
 80147a4:	b570      	push	{r4, r5, r6, lr}
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	bf0c      	ite	eq
 80147aa:	2301      	moveq	r3, #1
 80147ac:	2300      	movne	r3, #0
 80147ae:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80147b2:	4604      	mov	r4, r0
 80147b4:	460e      	mov	r6, r1
 80147b6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80147ba:	d109      	bne.n	80147d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80147bc:	b14d      	cbz	r5, 80147d2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80147be:	7933      	ldrb	r3, [r6, #4]
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	d10c      	bne.n	80147de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80147c4:	6823      	ldr	r3, [r4, #0]
 80147c6:	4620      	mov	r0, r4
 80147c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80147ce:	4718      	bx	r3
 80147d0:	b12d      	cbz	r5, 80147de <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80147d2:	6823      	ldr	r3, [r4, #0]
 80147d4:	4620      	mov	r0, r4
 80147d6:	695b      	ldr	r3, [r3, #20]
 80147d8:	4798      	blx	r3
 80147da:	2d00      	cmp	r5, #0
 80147dc:	d1ef      	bne.n	80147be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80147de:	bd70      	pop	{r4, r5, r6, pc}

080147e0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80147e0:	2300      	movs	r3, #0
 80147e2:	8083      	strh	r3, [r0, #4]
 80147e4:	80c3      	strh	r3, [r0, #6]
 80147e6:	8003      	strh	r3, [r0, #0]
 80147e8:	8043      	strh	r3, [r0, #2]
 80147ea:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80147ee:	2bff      	cmp	r3, #255	@ 0xff
 80147f0:	bf01      	itttt	eq
 80147f2:	890b      	ldrheq	r3, [r1, #8]
 80147f4:	8083      	strheq	r3, [r0, #4]
 80147f6:	894b      	ldrheq	r3, [r1, #10]
 80147f8:	80c3      	strheq	r3, [r0, #6]
 80147fa:	4770      	bx	lr

080147fc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80147fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147fe:	4604      	mov	r4, r0
 8014800:	466b      	mov	r3, sp
 8014802:	6808      	ldr	r0, [r1, #0]
 8014804:	6849      	ldr	r1, [r1, #4]
 8014806:	c303      	stmia	r3!, {r0, r1}
 8014808:	6823      	ldr	r3, [r4, #0]
 801480a:	4669      	mov	r1, sp
 801480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801480e:	4620      	mov	r0, r4
 8014810:	4798      	blx	r3
 8014812:	4b08      	ldr	r3, [pc, #32]	@ (8014834 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801481a:	b10a      	cbz	r2, 8014820 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801481c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801481e:	b900      	cbnz	r0, 8014822 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8014820:	6898      	ldr	r0, [r3, #8]
 8014822:	6803      	ldr	r3, [r0, #0]
 8014824:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8014826:	6a1d      	ldr	r5, [r3, #32]
 8014828:	4669      	mov	r1, sp
 801482a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801482e:	47a8      	blx	r5
 8014830:	b003      	add	sp, #12
 8014832:	bd30      	pop	{r4, r5, pc}
 8014834:	2008745c 	.word	0x2008745c

08014838 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8014838:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801483c:	b12a      	cbz	r2, 801484a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801483e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8014842:	b112      	cbz	r2, 801484a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8014844:	6803      	ldr	r3, [r0, #0]
 8014846:	695b      	ldr	r3, [r3, #20]
 8014848:	4718      	bx	r3
 801484a:	4770      	bx	lr

0801484c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	4605      	mov	r5, r0
 8014850:	880b      	ldrh	r3, [r1, #0]
 8014852:	4604      	mov	r4, r0
 8014854:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8014856:	8813      	ldrh	r3, [r2, #0]
 8014858:	f825 3f30 	strh.w	r3, [r5, #48]!
 801485c:	4628      	mov	r0, r5
 801485e:	f003 fd4b 	bl	80182f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014862:	4606      	mov	r6, r0
 8014864:	4628      	mov	r0, r5
 8014866:	f003 fd7b 	bl	8018360 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801486a:	4605      	mov	r5, r0
 801486c:	6823      	ldr	r3, [r4, #0]
 801486e:	4631      	mov	r1, r6
 8014870:	4620      	mov	r0, r4
 8014872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014874:	4798      	blx	r3
 8014876:	6823      	ldr	r3, [r4, #0]
 8014878:	4629      	mov	r1, r5
 801487a:	4620      	mov	r0, r4
 801487c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014882:	4718      	bx	r3

08014884 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8014884:	b510      	push	{r4, lr}
 8014886:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801488a:	4604      	mov	r4, r0
 801488c:	2bff      	cmp	r3, #255	@ 0xff
 801488e:	d006      	beq.n	801489e <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8014890:	2300      	movs	r3, #0
 8014892:	8003      	strh	r3, [r0, #0]
 8014894:	8043      	strh	r3, [r0, #2]
 8014896:	8083      	strh	r3, [r0, #4]
 8014898:	80c3      	strh	r3, [r0, #6]
 801489a:	4620      	mov	r0, r4
 801489c:	bd10      	pop	{r4, pc}
 801489e:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80148a2:	b11b      	cbz	r3, 80148ac <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80148a4:	3130      	adds	r1, #48	@ 0x30
 80148a6:	f003 fd8f 	bl	80183c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80148aa:	e7f6      	b.n	801489a <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80148ac:	312e      	adds	r1, #46	@ 0x2e
 80148ae:	e7fa      	b.n	80148a6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080148b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80148b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148b4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80148b8:	b08a      	sub	sp, #40	@ 0x28
 80148ba:	4604      	mov	r4, r0
 80148bc:	4688      	mov	r8, r1
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d066      	beq.n	8014990 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80148c2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80148c4:	a805      	add	r0, sp, #20
 80148c6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80148ca:	f003 fd15 	bl	80182f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80148ce:	4607      	mov	r7, r0
 80148d0:	a805      	add	r0, sp, #20
 80148d2:	f003 fd45 	bl	8018360 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80148d6:	2300      	movs	r3, #0
 80148d8:	f9b8 6000 	ldrsh.w	r6, [r8]
 80148dc:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80148e0:	9306      	str	r3, [sp, #24]
 80148e2:	4432      	add	r2, r6
 80148e4:	b292      	uxth	r2, r2
 80148e6:	fa0f fc82 	sxth.w	ip, r2
 80148ea:	459c      	cmp	ip, r3
 80148ec:	dd52      	ble.n	8014994 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80148ee:	42b7      	cmp	r7, r6
 80148f0:	dd50      	ble.n	8014994 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80148f2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80148f6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80148fa:	442b      	add	r3, r5
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	b219      	sxth	r1, r3
 8014900:	2900      	cmp	r1, #0
 8014902:	dd47      	ble.n	8014994 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8014904:	42a8      	cmp	r0, r5
 8014906:	dd45      	ble.n	8014994 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8014908:	4567      	cmp	r7, ip
 801490a:	bfb8      	it	lt
 801490c:	b2ba      	uxthlt	r2, r7
 801490e:	4288      	cmp	r0, r1
 8014910:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8014914:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8014918:	bfb8      	it	lt
 801491a:	b283      	uxthlt	r3, r0
 801491c:	1b92      	subs	r2, r2, r6
 801491e:	1b5b      	subs	r3, r3, r5
 8014920:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014924:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014928:	f8ad 6018 	strh.w	r6, [sp, #24]
 801492c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8014930:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014934:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014938:	429a      	cmp	r2, r3
 801493a:	d026      	beq.n	801498a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801493c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014940:	2b00      	cmp	r3, #0
 8014942:	dd22      	ble.n	801498a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8014944:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014948:	2b00      	cmp	r3, #0
 801494a:	dd1e      	ble.n	801498a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801494c:	2300      	movs	r3, #0
 801494e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8014952:	6823      	ldr	r3, [r4, #0]
 8014954:	a908      	add	r1, sp, #32
 8014956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014958:	4620      	mov	r0, r4
 801495a:	4798      	blx	r3
 801495c:	4b0f      	ldr	r3, [pc, #60]	@ (801499c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8014964:	b10a      	cbz	r2, 801496a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8014966:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8014968:	b900      	cbnz	r0, 801496c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801496a:	6898      	ldr	r0, [r3, #8]
 801496c:	2501      	movs	r5, #1
 801496e:	6801      	ldr	r1, [r0, #0]
 8014970:	9502      	str	r5, [sp, #8]
 8014972:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8014976:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801497a:	9401      	str	r4, [sp, #4]
 801497c:	ac06      	add	r4, sp, #24
 801497e:	9400      	str	r4, [sp, #0]
 8014980:	688c      	ldr	r4, [r1, #8]
 8014982:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014986:	a905      	add	r1, sp, #20
 8014988:	47a0      	blx	r4
 801498a:	b00a      	add	sp, #40	@ 0x28
 801498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014990:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8014992:	e797      	b.n	80148c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8014994:	2300      	movs	r3, #0
 8014996:	9307      	str	r3, [sp, #28]
 8014998:	e7ca      	b.n	8014930 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801499a:	bf00      	nop
 801499c:	2008745c 	.word	0x2008745c

080149a0 <_ZNK8touchgfx6Button17invalidateContentEv>:
 80149a0:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 80149a4:	b12a      	cbz	r2, 80149b2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80149a6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80149aa:	b112      	cbz	r2, 80149b2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80149ac:	6803      	ldr	r3, [r0, #0]
 80149ae:	695b      	ldr	r3, [r3, #20]
 80149b0:	4718      	bx	r3
 80149b2:	4770      	bx	lr

080149b4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80149b4:	b510      	push	{r4, lr}
 80149b6:	6803      	ldr	r3, [r0, #0]
 80149b8:	460c      	mov	r4, r1
 80149ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149bc:	4798      	blx	r3
 80149be:	1b03      	subs	r3, r0, r4
 80149c0:	4258      	negs	r0, r3
 80149c2:	4158      	adcs	r0, r3
 80149c4:	bd10      	pop	{r4, pc}
	...

080149c8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80149c8:	4b01      	ldr	r3, [pc, #4]	@ (80149d0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80149ca:	6019      	str	r1, [r3, #0]
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	20087464 	.word	0x20087464

080149d4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80149d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d8:	4696      	mov	lr, r2
 80149da:	4614      	mov	r4, r2
 80149dc:	4605      	mov	r5, r0
 80149de:	460e      	mov	r6, r1
 80149e0:	461f      	mov	r7, r3
 80149e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149e6:	b097      	sub	sp, #92	@ 0x5c
 80149e8:	f10d 0c1c 	add.w	ip, sp, #28
 80149ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149f0:	f8de 3000 	ldr.w	r3, [lr]
 80149f4:	f104 0e14 	add.w	lr, r4, #20
 80149f8:	f8cc 3000 	str.w	r3, [ip]
 80149fc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014a00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a08:	f8de 3000 	ldr.w	r3, [lr]
 8014a0c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014a10:	f8cc 3000 	str.w	r3, [ip]
 8014a14:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014a18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a20:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8014a24:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8014a28:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8014a2c:	f8de 3000 	ldr.w	r3, [lr]
 8014a30:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014a32:	f8cc 3000 	str.w	r3, [ip]
 8014a36:	9201      	str	r2, [sp, #4]
 8014a38:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014a3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014a3e:	682b      	ldr	r3, [r5, #0]
 8014a40:	9200      	str	r2, [sp, #0]
 8014a42:	f8cd 8008 	str.w	r8, [sp, #8]
 8014a46:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8014a4a:	aa07      	add	r2, sp, #28
 8014a4c:	463b      	mov	r3, r7
 8014a4e:	4631      	mov	r1, r6
 8014a50:	4628      	mov	r0, r5
 8014a52:	47d8      	blx	fp
 8014a54:	46a6      	mov	lr, r4
 8014a56:	f10d 0c1c 	add.w	ip, sp, #28
 8014a5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a62:	f8de 3000 	ldr.w	r3, [lr]
 8014a66:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8014a6a:	f8cc 3000 	str.w	r3, [ip]
 8014a6e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014a72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a7a:	f8de 3000 	ldr.w	r3, [lr]
 8014a7e:	343c      	adds	r4, #60	@ 0x3c
 8014a80:	f8cc 3000 	str.w	r3, [ip]
 8014a84:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8014a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a8e:	6823      	ldr	r3, [r4, #0]
 8014a90:	4631      	mov	r1, r6
 8014a92:	f8cc 3000 	str.w	r3, [ip]
 8014a96:	682b      	ldr	r3, [r5, #0]
 8014a98:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014a9c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014a9e:	f8cd 8008 	str.w	r8, [sp, #8]
 8014aa2:	9201      	str	r2, [sp, #4]
 8014aa4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014aa6:	4628      	mov	r0, r5
 8014aa8:	9200      	str	r2, [sp, #0]
 8014aaa:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8014aac:	aa07      	add	r2, sp, #28
 8014aae:	463b      	mov	r3, r7
 8014ab0:	47a0      	blx	r4
 8014ab2:	b017      	add	sp, #92	@ 0x5c
 8014ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ab8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014ab8:	2000      	movs	r0, #0
 8014aba:	4770      	bx	lr

08014abc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac0:	b08d      	sub	sp, #52	@ 0x34
 8014ac2:	4688      	mov	r8, r1
 8014ac4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8014ac6:	f8d3 c000 	ldr.w	ip, [r3]
 8014aca:	680f      	ldr	r7, [r1, #0]
 8014acc:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8014ad0:	eba7 070c 	sub.w	r7, r7, ip
 8014ad4:	42bc      	cmp	r4, r7
 8014ad6:	bfa8      	it	ge
 8014ad8:	463c      	movge	r4, r7
 8014ada:	ee07 4a90 	vmov	s15, r4
 8014ade:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8014ae2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014ae6:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8014aea:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8014aee:	edd3 6a07 	vldr	s13, [r3, #28]
 8014af2:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014af6:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014afa:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014afe:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014b02:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8014b06:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8014b0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014b0e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014b10:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8014b14:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014b18:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014b1c:	eb09 0e0c 	add.w	lr, r9, ip
 8014b20:	4571      	cmp	r1, lr
 8014b22:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014b26:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014b2a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014b2e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014b32:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014b36:	f340 808c 	ble.w	8014c52 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8014b3a:	eba1 060e 	sub.w	r6, r1, lr
 8014b3e:	fb96 f5f4 	sdiv	r5, r6, r4
 8014b42:	ee07 5a10 	vmov	s14, r5
 8014b46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b4a:	2d00      	cmp	r5, #0
 8014b4c:	fb04 6615 	mls	r6, r4, r5, r6
 8014b50:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014b54:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014b58:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014b5c:	dd12      	ble.n	8014b84 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014b5e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014b62:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b6a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014b6e:	bf14      	ite	ne
 8014b70:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014b74:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014b78:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014b7c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014b80:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014b84:	fb05 f204 	mul.w	r2, r5, r4
 8014b88:	1abf      	subs	r7, r7, r2
 8014b8a:	4494      	add	ip, r2
 8014b8c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014b90:	4411      	add	r1, r2
 8014b92:	eb09 020c 	add.w	r2, r9, ip
 8014b96:	443a      	add	r2, r7
 8014b98:	b209      	sxth	r1, r1
 8014b9a:	428a      	cmp	r2, r1
 8014b9c:	bfc4      	itt	gt
 8014b9e:	eba1 0209 	subgt.w	r2, r1, r9
 8014ba2:	eba2 070c 	subgt.w	r7, r2, ip
 8014ba6:	2f00      	cmp	r7, #0
 8014ba8:	dd50      	ble.n	8014c4c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014baa:	fb97 f1f4 	sdiv	r1, r7, r4
 8014bae:	fb04 7211 	mls	r2, r4, r1, r7
 8014bb2:	b90a      	cbnz	r2, 8014bb8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014bb4:	4622      	mov	r2, r4
 8014bb6:	3901      	subs	r1, #1
 8014bb8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014bbc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014bc0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014bc4:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014bc8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014bcc:	ee17 7a90 	vmov	r7, s15
 8014bd0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014bd4:	eef0 6a42 	vmov.f32	s13, s4
 8014bd8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014bdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014be0:	ee17 ca90 	vmov	ip, s15
 8014be4:	eeb0 7a61 	vmov.f32	s14, s3
 8014be8:	6840      	ldr	r0, [r0, #4]
 8014bea:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8014bee:	f8d0 a000 	ldr.w	sl, [r0]
 8014bf2:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014bf4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014bf6:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014bfa:	9008      	str	r0, [sp, #32]
 8014bfc:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8014bfe:	695b      	ldr	r3, [r3, #20]
 8014c00:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014c04:	fb9c fcf4 	sdiv	ip, ip, r4
 8014c08:	445b      	add	r3, fp
 8014c0a:	9307      	str	r3, [sp, #28]
 8014c0c:	ee16 3a90 	vmov	r3, s13
 8014c10:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014c14:	fb0c 3306 	mla	r3, ip, r6, r3
 8014c18:	fb97 f7f4 	sdiv	r7, r7, r4
 8014c1c:	9302      	str	r3, [sp, #8]
 8014c1e:	ee17 3a10 	vmov	r3, s14
 8014c22:	2900      	cmp	r1, #0
 8014c24:	bfcc      	ite	gt
 8014c26:	46a1      	movgt	r9, r4
 8014c28:	4691      	movle	r9, r2
 8014c2a:	44b6      	add	lr, r6
 8014c2c:	fb04 e505 	mla	r5, r4, r5, lr
 8014c30:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014c34:	fb07 3706 	mla	r7, r7, r6, r3
 8014c38:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014c3c:	e9cd 4700 	strd	r4, r7, [sp]
 8014c40:	eba9 0306 	sub.w	r3, r9, r6
 8014c44:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014c48:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014c4a:	47a0      	blx	r4
 8014c4c:	b00d      	add	sp, #52	@ 0x34
 8014c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c52:	2500      	movs	r5, #0
 8014c54:	462e      	mov	r6, r5
 8014c56:	e799      	b.n	8014b8c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c5c:	461d      	mov	r5, r3
 8014c5e:	b0db      	sub	sp, #364	@ 0x16c
 8014c60:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8014c64:	910f      	str	r1, [sp, #60]	@ 0x3c
 8014c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c68:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8014c6c:	9009      	str	r0, [sp, #36]	@ 0x24
 8014c6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014c70:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8014c74:	4614      	mov	r4, r2
 8014c76:	9310      	str	r3, [sp, #64]	@ 0x40
 8014c78:	6803      	ldr	r3, [r0, #0]
 8014c7a:	4629      	mov	r1, r5
 8014c7c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8014c7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014c82:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8014c86:	47b8      	blx	r7
 8014c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c8a:	6058      	str	r0, [r3, #4]
 8014c8c:	2800      	cmp	r0, #0
 8014c8e:	f000 83a1 	beq.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014c92:	ed94 7a02 	vldr	s14, [r4, #8]
 8014c96:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8014c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c9e:	682b      	ldr	r3, [r5, #0]
 8014ca0:	9314      	str	r3, [sp, #80]	@ 0x50
 8014ca2:	686b      	ldr	r3, [r5, #4]
 8014ca4:	9315      	str	r3, [sp, #84]	@ 0x54
 8014ca6:	4bc1      	ldr	r3, [pc, #772]	@ (8014fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014ca8:	7819      	ldrb	r1, [r3, #0]
 8014caa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014cae:	2900      	cmp	r1, #0
 8014cb0:	bf16      	itet	ne
 8014cb2:	4619      	movne	r1, r3
 8014cb4:	4611      	moveq	r1, r2
 8014cb6:	4613      	movne	r3, r2
 8014cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cbc:	9116      	str	r1, [sp, #88]	@ 0x58
 8014cbe:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8014cc2:	f240 8387 	bls.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cc6:	ed94 7a07 	vldr	s14, [r4, #28]
 8014cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd2:	f240 837f 	bls.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cd6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8014cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ce2:	f240 8377 	bls.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014ce6:	6822      	ldr	r2, [r4, #0]
 8014ce8:	4bb1      	ldr	r3, [pc, #708]	@ (8014fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014cea:	429a      	cmp	r2, r3
 8014cec:	f2c0 8372 	blt.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cf0:	49b0      	ldr	r1, [pc, #704]	@ (8014fb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014cf2:	6963      	ldr	r3, [r4, #20]
 8014cf4:	428a      	cmp	r2, r1
 8014cf6:	f300 836d 	bgt.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014cfa:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8014cfe:	48ae      	ldr	r0, [pc, #696]	@ (8014fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014d00:	33ff      	adds	r3, #255	@ 0xff
 8014d02:	4283      	cmp	r3, r0
 8014d04:	f200 8366 	bhi.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014d0a:	4dac      	ldr	r5, [pc, #688]	@ (8014fbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014d0c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8014d10:	33ff      	adds	r3, #255	@ 0xff
 8014d12:	42ab      	cmp	r3, r5
 8014d14:	f200 835e 	bhi.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d18:	6862      	ldr	r2, [r4, #4]
 8014d1a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8014d1e:	33ff      	adds	r3, #255	@ 0xff
 8014d20:	4283      	cmp	r3, r0
 8014d22:	f200 8357 	bhi.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d26:	69a1      	ldr	r1, [r4, #24]
 8014d28:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8014d2c:	33ff      	adds	r3, #255	@ 0xff
 8014d2e:	4283      	cmp	r3, r0
 8014d30:	f200 8350 	bhi.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d34:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8014d36:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8014d3a:	30ff      	adds	r0, #255	@ 0xff
 8014d3c:	42a8      	cmp	r0, r5
 8014d3e:	f200 8349 	bhi.w	80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014d42:	428a      	cmp	r2, r1
 8014d44:	f280 8110 	bge.w	8014f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	f300 8119 	bgt.w	8014f80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014d4e:	4299      	cmp	r1, r3
 8014d50:	f280 811d 	bge.w	8014f8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014d54:	2502      	movs	r5, #2
 8014d56:	2701      	movs	r7, #1
 8014d58:	46a9      	mov	r9, r5
 8014d5a:	46b8      	mov	r8, r7
 8014d5c:	f04f 0a00 	mov.w	sl, #0
 8014d60:	4621      	mov	r1, r4
 8014d62:	a849      	add	r0, sp, #292	@ 0x124
 8014d64:	f002 fffe 	bl	8017d64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014d68:	4622      	mov	r2, r4
 8014d6a:	4653      	mov	r3, sl
 8014d6c:	a949      	add	r1, sp, #292	@ 0x124
 8014d6e:	f8cd 9000 	str.w	r9, [sp]
 8014d72:	a819      	add	r0, sp, #100	@ 0x64
 8014d74:	f003 f928 	bl	8017fc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014d78:	4622      	mov	r2, r4
 8014d7a:	4653      	mov	r3, sl
 8014d7c:	a949      	add	r1, sp, #292	@ 0x124
 8014d7e:	f8cd 8000 	str.w	r8, [sp]
 8014d82:	a829      	add	r0, sp, #164	@ 0xa4
 8014d84:	f003 f920 	bl	8017fc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014d88:	4643      	mov	r3, r8
 8014d8a:	4622      	mov	r2, r4
 8014d8c:	a949      	add	r1, sp, #292	@ 0x124
 8014d8e:	f8cd 9000 	str.w	r9, [sp]
 8014d92:	a839      	add	r0, sp, #228	@ 0xe4
 8014d94:	f003 f918 	bl	8017fc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014d98:	42af      	cmp	r7, r5
 8014d9a:	bfb5      	itete	lt
 8014d9c:	2300      	movlt	r3, #0
 8014d9e:	2301      	movge	r3, #1
 8014da0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8014da2:	930e      	strge	r3, [sp, #56]	@ 0x38
 8014da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014da6:	af12      	add	r7, sp, #72	@ 0x48
 8014da8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014dac:	bfb9      	ittee	lt
 8014dae:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8014db0:	ac19      	addlt	r4, sp, #100	@ 0x64
 8014db2:	ad19      	addge	r5, sp, #100	@ 0x64
 8014db4:	ac29      	addge	r4, sp, #164	@ 0xa4
 8014db6:	e887 0003 	stmia.w	r7, {r0, r1}
 8014dba:	b928      	cbnz	r0, 8014dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014dbc:	4b80      	ldr	r3, [pc, #512]	@ (8014fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8014dbe:	6818      	ldr	r0, [r3, #0]
 8014dc0:	6803      	ldr	r3, [r0, #0]
 8014dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014dc4:	4798      	blx	r3
 8014dc6:	6038      	str	r0, [r7, #0]
 8014dc8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8014dca:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8014dce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014dd2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8014dd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8014dd6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014dd8:	6963      	ldr	r3, [r4, #20]
 8014dda:	440b      	add	r3, r1
 8014ddc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014de0:	4408      	add	r0, r1
 8014de2:	b200      	sxth	r0, r0
 8014de4:	4283      	cmp	r3, r0
 8014de6:	900d      	str	r0, [sp, #52]	@ 0x34
 8014de8:	f280 80dd 	bge.w	8014fa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014dec:	428b      	cmp	r3, r1
 8014dee:	da08      	bge.n	8014e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014df0:	2a00      	cmp	r2, #0
 8014df2:	dd06      	ble.n	8014e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014df4:	1acb      	subs	r3, r1, r3
 8014df6:	429a      	cmp	r2, r3
 8014df8:	f2c0 80e4 	blt.w	8014fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	f300 80e2 	bgt.w	8014fc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8014e02:	6967      	ldr	r7, [r4, #20]
 8014e04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e06:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8014e0a:	443b      	add	r3, r7
 8014e0c:	461f      	mov	r7, r3
 8014e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e10:	1bdf      	subs	r7, r3, r7
 8014e12:	4297      	cmp	r7, r2
 8014e14:	bfa8      	it	ge
 8014e16:	4617      	movge	r7, r2
 8014e18:	2f00      	cmp	r7, #0
 8014e1a:	f340 8166 	ble.w	80150ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8014e1e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8014e20:	6829      	ldr	r1, [r5, #0]
 8014e22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014e26:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014e2a:	4411      	add	r1, r2
 8014e2c:	4299      	cmp	r1, r3
 8014e2e:	6820      	ldr	r0, [r4, #0]
 8014e30:	dd1a      	ble.n	8014e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014e32:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014e36:	4402      	add	r2, r0
 8014e38:	440b      	add	r3, r1
 8014e3a:	b21b      	sxth	r3, r3
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	dc13      	bgt.n	8014e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014e40:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e44:	a912      	add	r1, sp, #72	@ 0x48
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	9206      	str	r2, [sp, #24]
 8014e4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014e4c:	9500      	str	r5, [sp, #0]
 8014e4e:	9205      	str	r2, [sp, #20]
 8014e50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e54:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014e58:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8014e5a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014e5e:	aa49      	add	r2, sp, #292	@ 0x124
 8014e60:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8014e64:	4623      	mov	r3, r4
 8014e66:	47c8      	blx	r9
 8014e68:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e6c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8014e70:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8014e74:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8014e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014e7c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8014e80:	ed94 6a08 	vldr	s12, [r4, #32]
 8014e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014e88:	edd4 6a07 	vldr	s13, [r4, #28]
 8014e8c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014e90:	441a      	add	r2, r3
 8014e92:	6963      	ldr	r3, [r4, #20]
 8014e94:	68a1      	ldr	r1, [r4, #8]
 8014e96:	3301      	adds	r3, #1
 8014e98:	6163      	str	r3, [r4, #20]
 8014e9a:	69a3      	ldr	r3, [r4, #24]
 8014e9c:	6022      	str	r2, [r4, #0]
 8014e9e:	3b01      	subs	r3, #1
 8014ea0:	61a3      	str	r3, [r4, #24]
 8014ea2:	6923      	ldr	r3, [r4, #16]
 8014ea4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8014ea8:	440b      	add	r3, r1
 8014eaa:	68e1      	ldr	r1, [r4, #12]
 8014eac:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014eb0:	428b      	cmp	r3, r1
 8014eb2:	edc4 6a07 	vstr	s13, [r4, #28]
 8014eb6:	6123      	str	r3, [r4, #16]
 8014eb8:	db15      	blt.n	8014ee6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014eba:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8014ebe:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014ec2:	edc4 6a07 	vstr	s13, [r4, #28]
 8014ec6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8014eca:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014ece:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8014ed2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8014ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014eda:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014ede:	3201      	adds	r2, #1
 8014ee0:	1a5b      	subs	r3, r3, r1
 8014ee2:	6022      	str	r2, [r4, #0]
 8014ee4:	6123      	str	r3, [r4, #16]
 8014ee6:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8014eea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014eee:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8014ef2:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8014ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014efa:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8014efe:	ed95 6a08 	vldr	s12, [r5, #32]
 8014f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014f06:	edd5 6a07 	vldr	s13, [r5, #28]
 8014f0a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014f0e:	441a      	add	r2, r3
 8014f10:	696b      	ldr	r3, [r5, #20]
 8014f12:	68a9      	ldr	r1, [r5, #8]
 8014f14:	3301      	adds	r3, #1
 8014f16:	616b      	str	r3, [r5, #20]
 8014f18:	69ab      	ldr	r3, [r5, #24]
 8014f1a:	602a      	str	r2, [r5, #0]
 8014f1c:	3b01      	subs	r3, #1
 8014f1e:	61ab      	str	r3, [r5, #24]
 8014f20:	692b      	ldr	r3, [r5, #16]
 8014f22:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014f26:	440b      	add	r3, r1
 8014f28:	68e9      	ldr	r1, [r5, #12]
 8014f2a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014f2e:	428b      	cmp	r3, r1
 8014f30:	edc5 6a07 	vstr	s13, [r5, #28]
 8014f34:	612b      	str	r3, [r5, #16]
 8014f36:	db15      	blt.n	8014f64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8014f38:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8014f3c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014f40:	edc5 6a07 	vstr	s13, [r5, #28]
 8014f44:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8014f48:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014f4c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014f50:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8014f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f58:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014f5c:	3201      	adds	r2, #1
 8014f5e:	1a5b      	subs	r3, r3, r1
 8014f60:	602a      	str	r2, [r5, #0]
 8014f62:	612b      	str	r3, [r5, #16]
 8014f64:	3f01      	subs	r7, #1
 8014f66:	e757      	b.n	8014e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014f68:	4299      	cmp	r1, r3
 8014f6a:	dc13      	bgt.n	8014f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	da14      	bge.n	8014f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014f70:	2502      	movs	r5, #2
 8014f72:	2703      	movs	r7, #3
 8014f74:	46a9      	mov	r9, r5
 8014f76:	f04f 0800 	mov.w	r8, #0
 8014f7a:	f04f 0a01 	mov.w	sl, #1
 8014f7e:	e6ef      	b.n	8014d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014f80:	2501      	movs	r5, #1
 8014f82:	2700      	movs	r7, #0
 8014f84:	46a9      	mov	r9, r5
 8014f86:	46b8      	mov	r8, r7
 8014f88:	f04f 0a02 	mov.w	sl, #2
 8014f8c:	e6e8      	b.n	8014d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014f8e:	2501      	movs	r5, #1
 8014f90:	2702      	movs	r7, #2
 8014f92:	e6e1      	b.n	8014d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014f94:	2500      	movs	r5, #0
 8014f96:	2701      	movs	r7, #1
 8014f98:	e7f4      	b.n	8014f84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8014f9a:	2702      	movs	r7, #2
 8014f9c:	2503      	movs	r5, #3
 8014f9e:	f04f 0900 	mov.w	r9, #0
 8014fa2:	46b8      	mov	r8, r7
 8014fa4:	e7e9      	b.n	8014f7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	e728      	b.n	8014dfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8014faa:	bf00      	nop
 8014fac:	20087454 	.word	0x20087454
 8014fb0:	fffd8f01 	.word	0xfffd8f01
 8014fb4:	00027100 	.word	0x00027100
 8014fb8:	0004e1ff 	.word	0x0004e1ff
 8014fbc:	0004e1fe 	.word	0x0004e1fe
 8014fc0:	2008745c 	.word	0x2008745c
 8014fc4:	4613      	mov	r3, r2
 8014fc6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8014fca:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8014fce:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8014fd2:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8014fd6:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8014fda:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8014fde:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014fe2:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8014fe6:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8014fea:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8014fee:	469e      	mov	lr, r3
 8014ff0:	469c      	mov	ip, r3
 8014ff2:	f04f 0900 	mov.w	r9, #0
 8014ff6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8014ff8:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8014ffa:	9111      	str	r1, [sp, #68]	@ 0x44
 8014ffc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8015000:	f1bc 0f00 	cmp.w	ip, #0
 8015004:	d147      	bne.n	8015096 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015006:	eb03 0c07 	add.w	ip, r3, r7
 801500a:	1ad7      	subs	r7, r2, r3
 801500c:	f1b9 0f00 	cmp.w	r9, #0
 8015010:	d009      	beq.n	8015026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015012:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8015016:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801501a:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801501e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8015022:	9029      	str	r0, [sp, #164]	@ 0xa4
 8015024:	912d      	str	r1, [sp, #180]	@ 0xb4
 8015026:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801502a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801502e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015032:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015036:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801503a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801503e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8015042:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015046:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801504a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801504e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8015052:	f04f 0800 	mov.w	r8, #0
 8015056:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015058:	9111      	str	r1, [sp, #68]	@ 0x44
 801505a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801505e:	f1be 0f00 	cmp.w	lr, #0
 8015062:	d031      	beq.n	80150c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015064:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015066:	4450      	add	r0, sl
 8015068:	4431      	add	r1, r6
 801506a:	4549      	cmp	r1, r9
 801506c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015070:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015074:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015078:	db08      	blt.n	801508c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801507a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801507e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015082:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015086:	3001      	adds	r0, #1
 8015088:	eba1 0109 	sub.w	r1, r1, r9
 801508c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015090:	f04f 0801 	mov.w	r8, #1
 8015094:	e7e3      	b.n	801505e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015096:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015098:	4450      	add	r0, sl
 801509a:	4431      	add	r1, r6
 801509c:	4541      	cmp	r1, r8
 801509e:	ee37 7a24 	vadd.f32	s14, s14, s9
 80150a2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80150a6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80150aa:	db08      	blt.n	80150be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80150ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 80150b0:	ee37 7a25 	vadd.f32	s14, s14, s11
 80150b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80150b8:	3001      	adds	r0, #1
 80150ba:	eba1 0108 	sub.w	r1, r1, r8
 80150be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80150c2:	f04f 0901 	mov.w	r9, #1
 80150c6:	e79b      	b.n	8015000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80150c8:	449c      	add	ip, r3
 80150ca:	1aff      	subs	r7, r7, r3
 80150cc:	f1b8 0f00 	cmp.w	r8, #0
 80150d0:	d009      	beq.n	80150e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80150d2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80150d6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80150da:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80150de:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80150e2:	9019      	str	r0, [sp, #100]	@ 0x64
 80150e4:	911d      	str	r1, [sp, #116]	@ 0x74
 80150e6:	1ad2      	subs	r2, r2, r3
 80150e8:	e68b      	b.n	8014e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80150ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80150ec:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	f000 80d1 	beq.w	8015296 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80150f4:	ad19      	add	r5, sp, #100	@ 0x64
 80150f6:	ac39      	add	r4, sp, #228	@ 0xe4
 80150f8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80150fa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80150fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015102:	930c      	str	r3, [sp, #48]	@ 0x30
 8015104:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015106:	6963      	ldr	r3, [r4, #20]
 8015108:	440b      	add	r3, r1
 801510a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801510e:	4408      	add	r0, r1
 8015110:	b200      	sxth	r0, r0
 8015112:	4283      	cmp	r3, r0
 8015114:	900d      	str	r0, [sp, #52]	@ 0x34
 8015116:	f280 80c1 	bge.w	801529c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801511a:	428b      	cmp	r3, r1
 801511c:	da08      	bge.n	8015130 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801511e:	2a00      	cmp	r2, #0
 8015120:	dd06      	ble.n	8015130 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015122:	1acb      	subs	r3, r1, r3
 8015124:	429a      	cmp	r2, r3
 8015126:	f2c0 80bb 	blt.w	80152a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801512a:	2b00      	cmp	r3, #0
 801512c:	f300 80b9 	bgt.w	80152a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015130:	6967      	ldr	r7, [r4, #20]
 8015132:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015134:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015138:	443b      	add	r3, r7
 801513a:	461f      	mov	r7, r3
 801513c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801513e:	1bdf      	subs	r7, r3, r7
 8015140:	4297      	cmp	r7, r2
 8015142:	bfa8      	it	ge
 8015144:	4617      	movge	r7, r2
 8015146:	2f00      	cmp	r7, #0
 8015148:	f340 813c 	ble.w	80153c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801514c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801514e:	6829      	ldr	r1, [r5, #0]
 8015150:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015154:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015158:	4411      	add	r1, r2
 801515a:	4299      	cmp	r1, r3
 801515c:	6820      	ldr	r0, [r4, #0]
 801515e:	dd1a      	ble.n	8015196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015160:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015164:	4402      	add	r2, r0
 8015166:	440b      	add	r3, r1
 8015168:	b21b      	sxth	r3, r3
 801516a:	429a      	cmp	r2, r3
 801516c:	dc13      	bgt.n	8015196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801516e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015172:	a912      	add	r1, sp, #72	@ 0x48
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	9206      	str	r2, [sp, #24]
 8015178:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801517a:	9500      	str	r5, [sp, #0]
 801517c:	9205      	str	r2, [sp, #20]
 801517e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015180:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015182:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015186:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015188:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801518c:	aa49      	add	r2, sp, #292	@ 0x124
 801518e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015192:	4623      	mov	r3, r4
 8015194:	47c8      	blx	r9
 8015196:	e9d4 2300 	ldrd	r2, r3, [r4]
 801519a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801519e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80151a2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80151a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80151aa:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80151ae:	ed94 6a08 	vldr	s12, [r4, #32]
 80151b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80151b6:	edd4 6a07 	vldr	s13, [r4, #28]
 80151ba:	ee76 6a86 	vadd.f32	s13, s13, s12
 80151be:	441a      	add	r2, r3
 80151c0:	6963      	ldr	r3, [r4, #20]
 80151c2:	68a1      	ldr	r1, [r4, #8]
 80151c4:	3301      	adds	r3, #1
 80151c6:	6163      	str	r3, [r4, #20]
 80151c8:	69a3      	ldr	r3, [r4, #24]
 80151ca:	6022      	str	r2, [r4, #0]
 80151cc:	3b01      	subs	r3, #1
 80151ce:	61a3      	str	r3, [r4, #24]
 80151d0:	6923      	ldr	r3, [r4, #16]
 80151d2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80151d6:	440b      	add	r3, r1
 80151d8:	68e1      	ldr	r1, [r4, #12]
 80151da:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80151de:	428b      	cmp	r3, r1
 80151e0:	edc4 6a07 	vstr	s13, [r4, #28]
 80151e4:	6123      	str	r3, [r4, #16]
 80151e6:	db15      	blt.n	8015214 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80151e8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80151ec:	ee76 6a26 	vadd.f32	s13, s12, s13
 80151f0:	edc4 6a07 	vstr	s13, [r4, #28]
 80151f4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80151f8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80151fc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015200:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015208:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801520c:	3201      	adds	r2, #1
 801520e:	1a5b      	subs	r3, r3, r1
 8015210:	6022      	str	r2, [r4, #0]
 8015212:	6123      	str	r3, [r4, #16]
 8015214:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015218:	e9d5 2300 	ldrd	r2, r3, [r5]
 801521c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015220:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8015224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015228:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801522c:	ed95 6a08 	vldr	s12, [r5, #32]
 8015230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015234:	edd5 6a07 	vldr	s13, [r5, #28]
 8015238:	ee76 6a86 	vadd.f32	s13, s13, s12
 801523c:	441a      	add	r2, r3
 801523e:	696b      	ldr	r3, [r5, #20]
 8015240:	68a9      	ldr	r1, [r5, #8]
 8015242:	3301      	adds	r3, #1
 8015244:	616b      	str	r3, [r5, #20]
 8015246:	69ab      	ldr	r3, [r5, #24]
 8015248:	602a      	str	r2, [r5, #0]
 801524a:	3b01      	subs	r3, #1
 801524c:	61ab      	str	r3, [r5, #24]
 801524e:	692b      	ldr	r3, [r5, #16]
 8015250:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015254:	440b      	add	r3, r1
 8015256:	68e9      	ldr	r1, [r5, #12]
 8015258:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801525c:	428b      	cmp	r3, r1
 801525e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015262:	612b      	str	r3, [r5, #16]
 8015264:	db15      	blt.n	8015292 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015266:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801526a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801526e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015272:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015276:	ee36 7a87 	vadd.f32	s14, s13, s14
 801527a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801527e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015286:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801528a:	3201      	adds	r2, #1
 801528c:	1a5b      	subs	r3, r3, r1
 801528e:	602a      	str	r2, [r5, #0]
 8015290:	612b      	str	r3, [r5, #16]
 8015292:	3f01      	subs	r7, #1
 8015294:	e757      	b.n	8015146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015296:	ad39      	add	r5, sp, #228	@ 0xe4
 8015298:	ac19      	add	r4, sp, #100	@ 0x64
 801529a:	e72d      	b.n	80150f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801529c:	4613      	mov	r3, r2
 801529e:	e744      	b.n	801512a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80152a0:	4613      	mov	r3, r2
 80152a2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80152a6:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80152aa:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80152ae:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80152b2:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80152b6:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80152ba:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80152be:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80152c2:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80152c6:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80152ca:	469e      	mov	lr, r3
 80152cc:	461f      	mov	r7, r3
 80152ce:	f04f 0900 	mov.w	r9, #0
 80152d2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80152d4:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80152d8:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80152da:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80152de:	960e      	str	r6, [sp, #56]	@ 0x38
 80152e0:	2f00      	cmp	r7, #0
 80152e2:	d146      	bne.n	8015372 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80152e4:	449c      	add	ip, r3
 80152e6:	1ad7      	subs	r7, r2, r3
 80152e8:	f1b9 0f00 	cmp.w	r9, #0
 80152ec:	d009      	beq.n	8015302 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80152ee:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80152f2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80152f6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80152fa:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80152fe:	9039      	str	r0, [sp, #228]	@ 0xe4
 8015300:	913d      	str	r1, [sp, #244]	@ 0xf4
 8015302:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015306:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801530a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801530e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015312:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015316:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801531a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801531e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015322:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015326:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801532a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801532e:	f04f 0800 	mov.w	r8, #0
 8015332:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015334:	910e      	str	r1, [sp, #56]	@ 0x38
 8015336:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801533a:	f1be 0f00 	cmp.w	lr, #0
 801533e:	d030      	beq.n	80153a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015340:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015342:	4450      	add	r0, sl
 8015344:	4431      	add	r1, r6
 8015346:	4549      	cmp	r1, r9
 8015348:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801534c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015350:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015354:	db08      	blt.n	8015368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015356:	ee77 7a85 	vadd.f32	s15, s15, s10
 801535a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801535e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015362:	3001      	adds	r0, #1
 8015364:	eba1 0109 	sub.w	r1, r1, r9
 8015368:	f10e 3eff 	add.w	lr, lr, #4294967295
 801536c:	f04f 0801 	mov.w	r8, #1
 8015370:	e7e3      	b.n	801533a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015372:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015374:	4450      	add	r0, sl
 8015376:	4431      	add	r1, r6
 8015378:	4541      	cmp	r1, r8
 801537a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801537e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015382:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015386:	db08      	blt.n	801539a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015388:	ee76 6a85 	vadd.f32	s13, s13, s10
 801538c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015390:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015394:	3001      	adds	r0, #1
 8015396:	eba1 0108 	sub.w	r1, r1, r8
 801539a:	3f01      	subs	r7, #1
 801539c:	f04f 0901 	mov.w	r9, #1
 80153a0:	e79e      	b.n	80152e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80153a2:	449c      	add	ip, r3
 80153a4:	1aff      	subs	r7, r7, r3
 80153a6:	f1b8 0f00 	cmp.w	r8, #0
 80153aa:	d009      	beq.n	80153c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80153ac:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80153b0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80153b4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80153b8:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80153bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80153be:	911d      	str	r1, [sp, #116]	@ 0x74
 80153c0:	1ad2      	subs	r2, r2, r3
 80153c2:	e6b5      	b.n	8015130 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80153c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	b923      	cbnz	r3, 80153d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80153ca:	4b04      	ldr	r3, [pc, #16]	@ (80153dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80153cc:	6818      	ldr	r0, [r3, #0]
 80153ce:	6803      	ldr	r3, [r0, #0]
 80153d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153d2:	4798      	blx	r3
 80153d4:	b05b      	add	sp, #364	@ 0x16c
 80153d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153da:	bf00      	nop
 80153dc:	2008745c 	.word	0x2008745c

080153e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80153e0:	2b03      	cmp	r3, #3
 80153e2:	d818      	bhi.n	8015416 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80153e4:	e8df f003 	tbb	[pc, r3]
 80153e8:	130d0602 	.word	0x130d0602
 80153ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 80153f0:	1850      	adds	r0, r2, r1
 80153f2:	4770      	bx	lr
 80153f4:	8803      	ldrh	r3, [r0, #0]
 80153f6:	8880      	ldrh	r0, [r0, #4]
 80153f8:	4418      	add	r0, r3
 80153fa:	b200      	sxth	r0, r0
 80153fc:	1a80      	subs	r0, r0, r2
 80153fe:	3801      	subs	r0, #1
 8015400:	4770      	bx	lr
 8015402:	8803      	ldrh	r3, [r0, #0]
 8015404:	8880      	ldrh	r0, [r0, #4]
 8015406:	4418      	add	r0, r3
 8015408:	b200      	sxth	r0, r0
 801540a:	1a40      	subs	r0, r0, r1
 801540c:	e7f7      	b.n	80153fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801540e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015412:	4410      	add	r0, r2
 8015414:	4770      	bx	lr
 8015416:	2000      	movs	r0, #0
 8015418:	4770      	bx	lr

0801541a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801541a:	2b03      	cmp	r3, #3
 801541c:	d817      	bhi.n	801544e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801541e:	e8df f003 	tbb	[pc, r3]
 8015422:	0602      	.short	0x0602
 8015424:	1009      	.short	0x1009
 8015426:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801542a:	1850      	adds	r0, r2, r1
 801542c:	4770      	bx	lr
 801542e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015432:	e7fa      	b.n	801542a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8015434:	8843      	ldrh	r3, [r0, #2]
 8015436:	88c0      	ldrh	r0, [r0, #6]
 8015438:	4418      	add	r0, r3
 801543a:	b200      	sxth	r0, r0
 801543c:	1a80      	subs	r0, r0, r2
 801543e:	3801      	subs	r0, #1
 8015440:	4770      	bx	lr
 8015442:	8843      	ldrh	r3, [r0, #2]
 8015444:	88c0      	ldrh	r0, [r0, #6]
 8015446:	4418      	add	r0, r3
 8015448:	b200      	sxth	r0, r0
 801544a:	1a40      	subs	r0, r0, r1
 801544c:	e7f7      	b.n	801543e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801544e:	2000      	movs	r0, #0
 8015450:	4770      	bx	lr
	...

08015454 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015454:	2200      	movs	r2, #0
 8015456:	4b01      	ldr	r3, [pc, #4]	@ (801545c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8015458:	601a      	str	r2, [r3, #0]
 801545a:	4770      	bx	lr
 801545c:	20087464 	.word	0x20087464

08015460 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015460:	4603      	mov	r3, r0
 8015462:	b1c8      	cbz	r0, 8015498 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015464:	0c02      	lsrs	r2, r0, #16
 8015466:	0412      	lsls	r2, r2, #16
 8015468:	b9a2      	cbnz	r2, 8015494 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801546a:	0403      	lsls	r3, r0, #16
 801546c:	2010      	movs	r0, #16
 801546e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8015472:	bf04      	itt	eq
 8015474:	021b      	lsleq	r3, r3, #8
 8015476:	3008      	addeq	r0, #8
 8015478:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801547c:	bf04      	itt	eq
 801547e:	011b      	lsleq	r3, r3, #4
 8015480:	3004      	addeq	r0, #4
 8015482:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8015486:	bf04      	itt	eq
 8015488:	009b      	lsleq	r3, r3, #2
 801548a:	3002      	addeq	r0, #2
 801548c:	2b00      	cmp	r3, #0
 801548e:	db04      	blt.n	801549a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8015490:	3001      	adds	r0, #1
 8015492:	4770      	bx	lr
 8015494:	2000      	movs	r0, #0
 8015496:	e7ea      	b.n	801546e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8015498:	2020      	movs	r0, #32
 801549a:	4770      	bx	lr

0801549c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a0:	b087      	sub	sp, #28
 80154a2:	460d      	mov	r5, r1
 80154a4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80154a8:	4616      	mov	r6, r2
 80154aa:	4698      	mov	r8, r3
 80154ac:	4601      	mov	r1, r0
 80154ae:	b120      	cbz	r0, 80154ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80154b0:	b11a      	cbz	r2, 80154ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80154b2:	2d1f      	cmp	r5, #31
 80154b4:	d801      	bhi.n	80154ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80154b6:	2b1f      	cmp	r3, #31
 80154b8:	d904      	bls.n	80154c4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80154ba:	2000      	movs	r0, #0
 80154bc:	6038      	str	r0, [r7, #0]
 80154be:	b007      	add	sp, #28
 80154c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154c4:	b97d      	cbnz	r5, 80154e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80154c6:	b143      	cbz	r3, 80154da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80154c8:	4602      	mov	r2, r0
 80154ca:	e9cd 4700 	strd	r4, r7, [sp]
 80154ce:	462b      	mov	r3, r5
 80154d0:	4641      	mov	r1, r8
 80154d2:	4630      	mov	r0, r6
 80154d4:	f7ff ffe2 	bl	801549c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80154d8:	e7f1      	b.n	80154be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80154da:	f04f 33ff 	mov.w	r3, #4294967295
 80154de:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80154e2:	603b      	str	r3, [r7, #0]
 80154e4:	e7eb      	b.n	80154be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80154e6:	fa32 fa05 	lsrs.w	sl, r2, r5
 80154ea:	d106      	bne.n	80154fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80154ec:	4346      	muls	r6, r0
 80154ee:	fbb6 f0f4 	udiv	r0, r6, r4
 80154f2:	fb04 6610 	mls	r6, r4, r0, r6
 80154f6:	603e      	str	r6, [r7, #0]
 80154f8:	e7e1      	b.n	80154be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80154fa:	fa00 fb05 	lsl.w	fp, r0, r5
 80154fe:	fbbb f9f4 	udiv	r9, fp, r4
 8015502:	2201      	movs	r2, #1
 8015504:	fb0a f309 	mul.w	r3, sl, r9
 8015508:	40aa      	lsls	r2, r5
 801550a:	3a01      	subs	r2, #1
 801550c:	4016      	ands	r6, r2
 801550e:	4630      	mov	r0, r6
 8015510:	9303      	str	r3, [sp, #12]
 8015512:	f7ff ffa5 	bl	8015460 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015516:	462b      	mov	r3, r5
 8015518:	460a      	mov	r2, r1
 801551a:	e9cd 4700 	strd	r4, r7, [sp]
 801551e:	4601      	mov	r1, r0
 8015520:	4630      	mov	r0, r6
 8015522:	f7ff ffbb 	bl	801549c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015526:	fb04 b919 	mls	r9, r4, r9, fp
 801552a:	4606      	mov	r6, r0
 801552c:	4648      	mov	r0, r9
 801552e:	eb05 0108 	add.w	r1, r5, r8
 8015532:	f7ff ff95 	bl	8015460 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8015536:	ab05      	add	r3, sp, #20
 8015538:	e9cd 4300 	strd	r4, r3, [sp]
 801553c:	464a      	mov	r2, r9
 801553e:	4603      	mov	r3, r0
 8015540:	4650      	mov	r0, sl
 8015542:	f7ff ffab 	bl	801549c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8015546:	6839      	ldr	r1, [r7, #0]
 8015548:	9a05      	ldr	r2, [sp, #20]
 801554a:	9b03      	ldr	r3, [sp, #12]
 801554c:	4411      	add	r1, r2
 801554e:	fbb1 f2f4 	udiv	r2, r1, r4
 8015552:	fb04 1412 	mls	r4, r4, r2, r1
 8015556:	18d3      	adds	r3, r2, r3
 8015558:	441e      	add	r6, r3
 801555a:	4430      	add	r0, r6
 801555c:	603c      	str	r4, [r7, #0]
 801555e:	e7ae      	b.n	80154be <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08015560 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015564:	b085      	sub	sp, #20
 8015566:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015568:	f1b0 0900 	subs.w	r9, r0, #0
 801556c:	461d      	mov	r5, r3
 801556e:	bfbf      	itttt	lt
 8015570:	6823      	ldrlt	r3, [r4, #0]
 8015572:	f1c9 0900 	rsblt	r9, r9, #0
 8015576:	425b      	neglt	r3, r3
 8015578:	6023      	strlt	r3, [r4, #0]
 801557a:	bfb4      	ite	lt
 801557c:	f04f 36ff 	movlt.w	r6, #4294967295
 8015580:	2601      	movge	r6, #1
 8015582:	2a00      	cmp	r2, #0
 8015584:	4617      	mov	r7, r2
 8015586:	da04      	bge.n	8015592 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8015588:	6823      	ldr	r3, [r4, #0]
 801558a:	4257      	negs	r7, r2
 801558c:	425b      	negs	r3, r3
 801558e:	4276      	negs	r6, r6
 8015590:	6023      	str	r3, [r4, #0]
 8015592:	2d00      	cmp	r5, #0
 8015594:	4638      	mov	r0, r7
 8015596:	bfba      	itte	lt
 8015598:	426d      	neglt	r5, r5
 801559a:	f04f 38ff 	movlt.w	r8, #4294967295
 801559e:	f04f 0801 	movge.w	r8, #1
 80155a2:	f7ff ff5d 	bl	8015460 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80155a6:	ab03      	add	r3, sp, #12
 80155a8:	e9cd 5300 	strd	r5, r3, [sp]
 80155ac:	463a      	mov	r2, r7
 80155ae:	4603      	mov	r3, r0
 80155b0:	4648      	mov	r0, r9
 80155b2:	f7ff ff73 	bl	801549c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80155b6:	6823      	ldr	r3, [r4, #0]
 80155b8:	9a03      	ldr	r2, [sp, #12]
 80155ba:	4546      	cmp	r6, r8
 80155bc:	441a      	add	r2, r3
 80155be:	fb92 f3f5 	sdiv	r3, r2, r5
 80155c2:	4418      	add	r0, r3
 80155c4:	fb05 2313 	mls	r3, r5, r3, r2
 80155c8:	bf18      	it	ne
 80155ca:	4240      	negne	r0, r0
 80155cc:	1c72      	adds	r2, r6, #1
 80155ce:	6023      	str	r3, [r4, #0]
 80155d0:	d105      	bne.n	80155de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	f1c3 0200 	rsb	r2, r3, #0
 80155d8:	db0b      	blt.n	80155f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80155da:	6022      	str	r2, [r4, #0]
 80155dc:	e006      	b.n	80155ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80155de:	2e01      	cmp	r6, #1
 80155e0:	d104      	bne.n	80155ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	da02      	bge.n	80155ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80155e6:	442b      	add	r3, r5
 80155e8:	3801      	subs	r0, #1
 80155ea:	6023      	str	r3, [r4, #0]
 80155ec:	b005      	add	sp, #20
 80155ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155f2:	3801      	subs	r0, #1
 80155f4:	1b52      	subs	r2, r2, r5
 80155f6:	e7f0      	b.n	80155da <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080155f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80155f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80155fc:	4c1c      	ldr	r4, [pc, #112]	@ (8015670 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80155fe:	4605      	mov	r5, r0
 8015600:	69a3      	ldr	r3, [r4, #24]
 8015602:	6807      	ldr	r7, [r0, #0]
 8015604:	b92b      	cbnz	r3, 8015612 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8015606:	6840      	ldr	r0, [r0, #4]
 8015608:	e9c5 7000 	strd	r7, r0, [r5]
 801560c:	b004      	add	sp, #16
 801560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015612:	f04f 0802 	mov.w	r8, #2
 8015616:	fb93 f1f8 	sdiv	r1, r3, r8
 801561a:	68a2      	ldr	r2, [r4, #8]
 801561c:	ae04      	add	r6, sp, #16
 801561e:	440a      	add	r2, r1
 8015620:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015624:	69e1      	ldr	r1, [r4, #28]
 8015626:	463a      	mov	r2, r7
 8015628:	9600      	str	r6, [sp, #0]
 801562a:	6820      	ldr	r0, [r4, #0]
 801562c:	f7ff ff98 	bl	8015560 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015630:	69a3      	ldr	r3, [r4, #24]
 8015632:	4607      	mov	r7, r0
 8015634:	686a      	ldr	r2, [r5, #4]
 8015636:	6a21      	ldr	r1, [r4, #32]
 8015638:	9600      	str	r6, [sp, #0]
 801563a:	6860      	ldr	r0, [r4, #4]
 801563c:	f7ff ff90 	bl	8015560 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015640:	69a3      	ldr	r3, [r4, #24]
 8015642:	6962      	ldr	r2, [r4, #20]
 8015644:	fb93 f8f8 	sdiv	r8, r3, r8
 8015648:	4442      	add	r2, r8
 801564a:	9203      	str	r2, [sp, #12]
 801564c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801564e:	682a      	ldr	r2, [r5, #0]
 8015650:	4407      	add	r7, r0
 8015652:	9600      	str	r6, [sp, #0]
 8015654:	68e0      	ldr	r0, [r4, #12]
 8015656:	f7ff ff83 	bl	8015560 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801565a:	9600      	str	r6, [sp, #0]
 801565c:	4680      	mov	r8, r0
 801565e:	69a3      	ldr	r3, [r4, #24]
 8015660:	686a      	ldr	r2, [r5, #4]
 8015662:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015664:	6920      	ldr	r0, [r4, #16]
 8015666:	f7ff ff7b 	bl	8015560 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801566a:	4440      	add	r0, r8
 801566c:	e7cc      	b.n	8015608 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801566e:	bf00      	nop
 8015670:	20087468 	.word	0x20087468

08015674 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015674:	4b07      	ldr	r3, [pc, #28]	@ (8015694 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	2b01      	cmp	r3, #1
 801567a:	d109      	bne.n	8015690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801567c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015680:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015684:	8003      	strh	r3, [r0, #0]
 8015686:	4b04      	ldr	r3, [pc, #16]	@ (8015698 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8015688:	881b      	ldrh	r3, [r3, #0]
 801568a:	3b01      	subs	r3, #1
 801568c:	1a9b      	subs	r3, r3, r2
 801568e:	800b      	strh	r3, [r1, #0]
 8015690:	4770      	bx	lr
 8015692:	bf00      	nop
 8015694:	20087454 	.word	0x20087454
 8015698:	20087450 	.word	0x20087450

0801569c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801569c:	b510      	push	{r4, lr}
 801569e:	4b07      	ldr	r3, [pc, #28]	@ (80156bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80156a0:	781b      	ldrb	r3, [r3, #0]
 80156a2:	2b01      	cmp	r3, #1
 80156a4:	d108      	bne.n	80156b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80156a6:	4b06      	ldr	r3, [pc, #24]	@ (80156c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80156a8:	880c      	ldrh	r4, [r1, #0]
 80156aa:	881b      	ldrh	r3, [r3, #0]
 80156ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 80156b0:	3b01      	subs	r3, #1
 80156b2:	1b1b      	subs	r3, r3, r4
 80156b4:	8003      	strh	r3, [r0, #0]
 80156b6:	800a      	strh	r2, [r1, #0]
 80156b8:	bd10      	pop	{r4, pc}
 80156ba:	bf00      	nop
 80156bc:	20087454 	.word	0x20087454
 80156c0:	20087450 	.word	0x20087450

080156c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80156c4:	b510      	push	{r4, lr}
 80156c6:	4b0a      	ldr	r3, [pc, #40]	@ (80156f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	2b01      	cmp	r3, #1
 80156cc:	d10e      	bne.n	80156ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80156ce:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80156d2:	8843      	ldrh	r3, [r0, #2]
 80156d4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80156d8:	18ca      	adds	r2, r1, r3
 80156da:	4b06      	ldr	r3, [pc, #24]	@ (80156f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80156dc:	8044      	strh	r4, [r0, #2]
 80156de:	881b      	ldrh	r3, [r3, #0]
 80156e0:	1a9b      	subs	r3, r3, r2
 80156e2:	8003      	strh	r3, [r0, #0]
 80156e4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80156e8:	8081      	strh	r1, [r0, #4]
 80156ea:	80c3      	strh	r3, [r0, #6]
 80156ec:	bd10      	pop	{r4, pc}
 80156ee:	bf00      	nop
 80156f0:	20087454 	.word	0x20087454
 80156f4:	20087450 	.word	0x20087450

080156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80156f8:	4b08      	ldr	r3, [pc, #32]	@ (801571c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d10c      	bne.n	801571a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015700:	8803      	ldrh	r3, [r0, #0]
 8015702:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8015706:	8842      	ldrh	r2, [r0, #2]
 8015708:	8002      	strh	r2, [r0, #0]
 801570a:	185a      	adds	r2, r3, r1
 801570c:	4b04      	ldr	r3, [pc, #16]	@ (8015720 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801570e:	881b      	ldrh	r3, [r3, #0]
 8015710:	1a9b      	subs	r3, r3, r2
 8015712:	8043      	strh	r3, [r0, #2]
 8015714:	88c3      	ldrh	r3, [r0, #6]
 8015716:	80c1      	strh	r1, [r0, #6]
 8015718:	8083      	strh	r3, [r0, #4]
 801571a:	4770      	bx	lr
 801571c:	20087454 	.word	0x20087454
 8015720:	20087450 	.word	0x20087450

08015724 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015724:	b510      	push	{r4, lr}
 8015726:	4b07      	ldr	r3, [pc, #28]	@ (8015744 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	2b01      	cmp	r3, #1
 801572c:	d108      	bne.n	8015740 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801572e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015732:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015736:	8003      	strh	r3, [r0, #0]
 8015738:	8893      	ldrh	r3, [r2, #4]
 801573a:	3b01      	subs	r3, #1
 801573c:	1b1b      	subs	r3, r3, r4
 801573e:	800b      	strh	r3, [r1, #0]
 8015740:	bd10      	pop	{r4, pc}
 8015742:	bf00      	nop
 8015744:	20087454 	.word	0x20087454

08015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015748:	b510      	push	{r4, lr}
 801574a:	4b0a      	ldr	r3, [pc, #40]	@ (8015774 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801574c:	460a      	mov	r2, r1
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	2b01      	cmp	r3, #1
 8015752:	d10d      	bne.n	8015770 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015754:	8881      	ldrh	r1, [r0, #4]
 8015756:	8803      	ldrh	r3, [r0, #0]
 8015758:	440b      	add	r3, r1
 801575a:	4601      	mov	r1, r0
 801575c:	3b01      	subs	r3, #1
 801575e:	f821 3b02 	strh.w	r3, [r1], #2
 8015762:	f7ff ffdf 	bl	8015724 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8015766:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801576a:	88c2      	ldrh	r2, [r0, #6]
 801576c:	80c3      	strh	r3, [r0, #6]
 801576e:	8082      	strh	r2, [r0, #4]
 8015770:	bd10      	pop	{r4, pc}
 8015772:	bf00      	nop
 8015774:	20087454 	.word	0x20087454

08015778 <_ZN8touchgfx11Application13requestRedrawEv>:
 8015778:	2100      	movs	r1, #0
 801577a:	4b06      	ldr	r3, [pc, #24]	@ (8015794 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801577c:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8015780:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015784:	4b04      	ldr	r3, [pc, #16]	@ (8015798 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8015786:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801578a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801578e:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8015792:	4770      	bx	lr
 8015794:	20087450 	.word	0x20087450
 8015798:	20087452 	.word	0x20087452

0801579c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801579c:	4b03      	ldr	r3, [pc, #12]	@ (80157ac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801579e:	6818      	ldr	r0, [r3, #0]
 80157a0:	b110      	cbz	r0, 80157a8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80157a2:	6803      	ldr	r3, [r0, #0]
 80157a4:	699b      	ldr	r3, [r3, #24]
 80157a6:	4718      	bx	r3
 80157a8:	4770      	bx	lr
 80157aa:	bf00      	nop
 80157ac:	20087498 	.word	0x20087498

080157b0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80157b0:	4770      	bx	lr
	...

080157b4 <_ZN8touchgfx11Application4drawEv>:
 80157b4:	b507      	push	{r0, r1, r2, lr}
 80157b6:	2100      	movs	r1, #0
 80157b8:	4b08      	ldr	r3, [pc, #32]	@ (80157dc <_ZN8touchgfx11Application4drawEv+0x28>)
 80157ba:	9100      	str	r1, [sp, #0]
 80157bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80157c0:	4b07      	ldr	r3, [pc, #28]	@ (80157e0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80157c2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80157c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157ca:	4669      	mov	r1, sp
 80157cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80157d0:	6803      	ldr	r3, [r0, #0]
 80157d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80157d4:	4798      	blx	r3
 80157d6:	b003      	add	sp, #12
 80157d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80157dc:	20087450 	.word	0x20087450
 80157e0:	20087452 	.word	0x20087452

080157e4 <_ZN8touchgfx11Application10invalidateEv>:
 80157e4:	2100      	movs	r1, #0
 80157e6:	4b09      	ldr	r3, [pc, #36]	@ (801580c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80157e8:	b082      	sub	sp, #8
 80157ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80157ee:	4b08      	ldr	r3, [pc, #32]	@ (8015810 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80157f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80157f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157f8:	9100      	str	r1, [sp, #0]
 80157fa:	f8ad 3006 	strh.w	r3, [sp, #6]
 80157fe:	6803      	ldr	r3, [r0, #0]
 8015800:	aa02      	add	r2, sp, #8
 8015802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015804:	e912 0006 	ldmdb	r2, {r1, r2}
 8015808:	b002      	add	sp, #8
 801580a:	4718      	bx	r3
 801580c:	20087450 	.word	0x20087450
 8015810:	20087452 	.word	0x20087452

08015814 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015814:	4b03      	ldr	r3, [pc, #12]	@ (8015824 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015816:	6818      	ldr	r0, [r3, #0]
 8015818:	b110      	cbz	r0, 8015820 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801581a:	6803      	ldr	r3, [r0, #0]
 801581c:	69db      	ldr	r3, [r3, #28]
 801581e:	4718      	bx	r3
 8015820:	4770      	bx	lr
 8015822:	bf00      	nop
 8015824:	20087498 	.word	0x20087498

08015828 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015828:	4b03      	ldr	r3, [pc, #12]	@ (8015838 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801582a:	6818      	ldr	r0, [r3, #0]
 801582c:	b110      	cbz	r0, 8015834 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801582e:	6803      	ldr	r3, [r0, #0]
 8015830:	6a1b      	ldr	r3, [r3, #32]
 8015832:	4718      	bx	r3
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop
 8015838:	20087498 	.word	0x20087498

0801583c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801583c:	2300      	movs	r3, #0
 801583e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8015842:	4770      	bx	lr

08015844 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015844:	4b03      	ldr	r3, [pc, #12]	@ (8015854 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8015846:	6818      	ldr	r0, [r3, #0]
 8015848:	b110      	cbz	r0, 8015850 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801584a:	6803      	ldr	r3, [r0, #0]
 801584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801584e:	4718      	bx	r3
 8015850:	4770      	bx	lr
 8015852:	bf00      	nop
 8015854:	20087498 	.word	0x20087498

08015858 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8015858:	b510      	push	{r4, lr}
 801585a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801585e:	888a      	ldrh	r2, [r1, #4]
 8015860:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015864:	4422      	add	r2, r4
 8015866:	b212      	sxth	r2, r2
 8015868:	4293      	cmp	r3, r2
 801586a:	da15      	bge.n	8015898 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801586c:	8882      	ldrh	r2, [r0, #4]
 801586e:	4413      	add	r3, r2
 8015870:	b21b      	sxth	r3, r3
 8015872:	429c      	cmp	r4, r3
 8015874:	da10      	bge.n	8015898 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015876:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801587a:	88c9      	ldrh	r1, [r1, #6]
 801587c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015880:	4419      	add	r1, r3
 8015882:	b209      	sxth	r1, r1
 8015884:	428a      	cmp	r2, r1
 8015886:	da07      	bge.n	8015898 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015888:	88c0      	ldrh	r0, [r0, #6]
 801588a:	4410      	add	r0, r2
 801588c:	b200      	sxth	r0, r0
 801588e:	4283      	cmp	r3, r0
 8015890:	bfac      	ite	ge
 8015892:	2000      	movge	r0, #0
 8015894:	2001      	movlt	r0, #1
 8015896:	bd10      	pop	{r4, pc}
 8015898:	2000      	movs	r0, #0
 801589a:	e7fc      	b.n	8015896 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801589c <_ZN8touchgfx4Rect10restrictToEss>:
 801589c:	f9b0 3000 	ldrsh.w	r3, [r0]
 80158a0:	b510      	push	{r4, lr}
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	da04      	bge.n	80158b0 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80158a6:	8884      	ldrh	r4, [r0, #4]
 80158a8:	4423      	add	r3, r4
 80158aa:	8083      	strh	r3, [r0, #4]
 80158ac:	2300      	movs	r3, #0
 80158ae:	8003      	strh	r3, [r0, #0]
 80158b0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80158b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80158b8:	1b09      	subs	r1, r1, r4
 80158ba:	428b      	cmp	r3, r1
 80158bc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80158c0:	bfc8      	it	gt
 80158c2:	8081      	strhgt	r1, [r0, #4]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	da04      	bge.n	80158d2 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80158c8:	88c1      	ldrh	r1, [r0, #6]
 80158ca:	440b      	add	r3, r1
 80158cc:	80c3      	strh	r3, [r0, #6]
 80158ce:	2300      	movs	r3, #0
 80158d0:	8043      	strh	r3, [r0, #2]
 80158d2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80158d6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80158da:	1a52      	subs	r2, r2, r1
 80158dc:	4293      	cmp	r3, r2
 80158de:	bfc8      	it	gt
 80158e0:	80c2      	strhgt	r2, [r0, #6]
 80158e2:	bd10      	pop	{r4, pc}

080158e4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80158e4:	b510      	push	{r4, lr}
 80158e6:	460c      	mov	r4, r1
 80158e8:	4b0f      	ldr	r3, [pc, #60]	@ (8015928 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80158ea:	4620      	mov	r0, r4
 80158ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80158f0:	4b0e      	ldr	r3, [pc, #56]	@ (801592c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80158f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80158f6:	f7ff ffd1 	bl	801589c <_ZN8touchgfx4Rect10restrictToEss>
 80158fa:	4b0d      	ldr	r3, [pc, #52]	@ (8015930 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80158fc:	6818      	ldr	r0, [r3, #0]
 80158fe:	b190      	cbz	r0, 8015926 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8015900:	6803      	ldr	r3, [r0, #0]
 8015902:	4621      	mov	r1, r4
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	4798      	blx	r3
 8015908:	4b0a      	ldr	r3, [pc, #40]	@ (8015934 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801590a:	6818      	ldr	r0, [r3, #0]
 801590c:	b118      	cbz	r0, 8015916 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801590e:	6803      	ldr	r3, [r0, #0]
 8015910:	4621      	mov	r1, r4
 8015912:	689b      	ldr	r3, [r3, #8]
 8015914:	4798      	blx	r3
 8015916:	4b08      	ldr	r3, [pc, #32]	@ (8015938 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8015918:	4621      	mov	r1, r4
 801591a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801591e:	6818      	ldr	r0, [r3, #0]
 8015920:	6803      	ldr	r3, [r0, #0]
 8015922:	69db      	ldr	r3, [r3, #28]
 8015924:	4718      	bx	r3
 8015926:	bd10      	pop	{r4, pc}
 8015928:	20087452 	.word	0x20087452
 801592c:	20087450 	.word	0x20087450
 8015930:	20087498 	.word	0x20087498
 8015934:	20087494 	.word	0x20087494
 8015938:	2008745c 	.word	0x2008745c

0801593c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801593e:	4606      	mov	r6, r0
 8015940:	4608      	mov	r0, r1
 8015942:	460f      	mov	r7, r1
 8015944:	f7fd ff51 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8015948:	b9e8      	cbnz	r0, 8015986 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801594a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801594e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8015952:	42a5      	cmp	r5, r4
 8015954:	db17      	blt.n	8015986 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015956:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801595a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801595e:	429a      	cmp	r2, r3
 8015960:	db11      	blt.n	8015986 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015962:	88b9      	ldrh	r1, [r7, #4]
 8015964:	440d      	add	r5, r1
 8015966:	88b1      	ldrh	r1, [r6, #4]
 8015968:	b22d      	sxth	r5, r5
 801596a:	440c      	add	r4, r1
 801596c:	b224      	sxth	r4, r4
 801596e:	42a5      	cmp	r5, r4
 8015970:	dc09      	bgt.n	8015986 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015972:	88f8      	ldrh	r0, [r7, #6]
 8015974:	4410      	add	r0, r2
 8015976:	88f2      	ldrh	r2, [r6, #6]
 8015978:	b200      	sxth	r0, r0
 801597a:	4413      	add	r3, r2
 801597c:	b21b      	sxth	r3, r3
 801597e:	4298      	cmp	r0, r3
 8015980:	bfcc      	ite	gt
 8015982:	2000      	movgt	r0, #0
 8015984:	2001      	movle	r0, #1
 8015986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015988 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598a:	4604      	mov	r4, r0
 801598c:	4608      	mov	r0, r1
 801598e:	460d      	mov	r5, r1
 8015990:	f7fd ff2b 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8015994:	b978      	cbnz	r0, 80159b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8015996:	4620      	mov	r0, r4
 8015998:	f7fd ff27 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801599c:	f9b5 6000 	ldrsh.w	r6, [r5]
 80159a0:	b150      	cbz	r0, 80159b8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80159a2:	8026      	strh	r6, [r4, #0]
 80159a4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80159a8:	8063      	strh	r3, [r4, #2]
 80159aa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80159ae:	80a3      	strh	r3, [r4, #4]
 80159b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80159b4:	80e3      	strh	r3, [r4, #6]
 80159b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159b8:	f9b4 1000 	ldrsh.w	r1, [r4]
 80159bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80159c0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80159c4:	42b1      	cmp	r1, r6
 80159c6:	460f      	mov	r7, r1
 80159c8:	bfa8      	it	ge
 80159ca:	4637      	movge	r7, r6
 80159cc:	4293      	cmp	r3, r2
 80159ce:	4618      	mov	r0, r3
 80159d0:	bfa8      	it	ge
 80159d2:	4610      	movge	r0, r2
 80159d4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80159d8:	88ed      	ldrh	r5, [r5, #6]
 80159da:	4466      	add	r6, ip
 80159dc:	442a      	add	r2, r5
 80159de:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80159e2:	88e5      	ldrh	r5, [r4, #6]
 80159e4:	4461      	add	r1, ip
 80159e6:	442b      	add	r3, r5
 80159e8:	b236      	sxth	r6, r6
 80159ea:	b209      	sxth	r1, r1
 80159ec:	b212      	sxth	r2, r2
 80159ee:	b21b      	sxth	r3, r3
 80159f0:	428e      	cmp	r6, r1
 80159f2:	bfac      	ite	ge
 80159f4:	ebc7 0106 	rsbge	r1, r7, r6
 80159f8:	ebc7 0101 	rsblt	r1, r7, r1
 80159fc:	429a      	cmp	r2, r3
 80159fe:	bfac      	ite	ge
 8015a00:	ebc0 0202 	rsbge	r2, r0, r2
 8015a04:	ebc0 0203 	rsblt	r2, r0, r3
 8015a08:	8027      	strh	r7, [r4, #0]
 8015a0a:	8060      	strh	r0, [r4, #2]
 8015a0c:	80a1      	strh	r1, [r4, #4]
 8015a0e:	80e2      	strh	r2, [r4, #6]
 8015a10:	e7d1      	b.n	80159b6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08015a14 <_ZN8touchgfx11Application11getInstanceEv>:
 8015a14:	4b01      	ldr	r3, [pc, #4]	@ (8015a1c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8015a16:	6818      	ldr	r0, [r3, #0]
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	200874a8 	.word	0x200874a8

08015a20 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8015a20:	2300      	movs	r3, #0
 8015a22:	b510      	push	{r4, lr}
 8015a24:	4604      	mov	r4, r0
 8015a26:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8015a2a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8015a2e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8015a32:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8015a36:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d90e      	bls.n	8015a5c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8015a3e:	18e2      	adds	r2, r4, r3
 8015a40:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8015a44:	b122      	cbz	r2, 8015a50 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8015a46:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8015a4a:	6803      	ldr	r3, [r0, #0]
 8015a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a4e:	4798      	blx	r3
 8015a50:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8015a54:	3301      	adds	r3, #1
 8015a56:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8015a5a:	e7ea      	b.n	8015a32 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8015a5c:	bd10      	pop	{r4, pc}

08015a5e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8015a5e:	2300      	movs	r3, #0
 8015a60:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8015a64:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8015a68:	30a4      	adds	r0, #164	@ 0xa4
 8015a6a:	f802 3b01 	strb.w	r3, [r2], #1
 8015a6e:	4282      	cmp	r2, r0
 8015a70:	d1fb      	bne.n	8015a6a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8015a72:	4770      	bx	lr

08015a74 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015a74:	b570      	push	{r4, r5, r6, lr}
 8015a76:	4c0b      	ldr	r4, [pc, #44]	@ (8015aa4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8015a78:	4605      	mov	r5, r0
 8015a7a:	6820      	ldr	r0, [r4, #0]
 8015a7c:	460e      	mov	r6, r1
 8015a7e:	b110      	cbz	r0, 8015a86 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8015a80:	6803      	ldr	r3, [r0, #0]
 8015a82:	695b      	ldr	r3, [r3, #20]
 8015a84:	4798      	blx	r3
 8015a86:	1d28      	adds	r0, r5, #4
 8015a88:	f7ff ffe9 	bl	8015a5e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015a8c:	6026      	str	r6, [r4, #0]
 8015a8e:	6833      	ldr	r3, [r6, #0]
 8015a90:	4630      	mov	r0, r6
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	4798      	blx	r3
 8015a96:	682b      	ldr	r3, [r5, #0]
 8015a98:	4628      	mov	r0, r5
 8015a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015aa0:	4718      	bx	r3
 8015aa2:	bf00      	nop
 8015aa4:	20087498 	.word	0x20087498

08015aa8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aac:	461a      	mov	r2, r3
 8015aae:	461c      	mov	r4, r3
 8015ab0:	461d      	mov	r5, r3
 8015ab2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8015ab6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8015aba:	459c      	cmp	ip, r3
 8015abc:	dd1a      	ble.n	8015af4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8015abe:	18c6      	adds	r6, r0, r3
 8015ac0:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8015ac4:	b16e      	cbz	r6, 8015ae2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d008      	beq.n	8015adc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8015aca:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8015ace:	fa1f fe82 	uxth.w	lr, r2
 8015ad2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8015ad6:	1887      	adds	r7, r0, r2
 8015ad8:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8015adc:	3201      	adds	r2, #1
 8015ade:	3301      	adds	r3, #1
 8015ae0:	e7eb      	b.n	8015aba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8015ae2:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8015ae6:	4299      	cmp	r1, r3
 8015ae8:	bfa8      	it	ge
 8015aea:	3501      	addge	r5, #1
 8015aec:	429e      	cmp	r6, r3
 8015aee:	bfc8      	it	gt
 8015af0:	3401      	addgt	r4, #1
 8015af2:	e7f4      	b.n	8015ade <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8015af4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8015af8:	1b49      	subs	r1, r1, r5
 8015afa:	1b1b      	subs	r3, r3, r4
 8015afc:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8015b00:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8015b04:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8015b08:	4293      	cmp	r3, r2
 8015b0a:	dd03      	ble.n	8015b14 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8015b0c:	3b01      	subs	r3, #1
 8015b0e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8015b12:	e7f7      	b.n	8015b04 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8015b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015b18 <_ZN8touchgfx11Application15handleTickEventEv>:
 8015b18:	b570      	push	{r4, r5, r6, lr}
 8015b1a:	4d16      	ldr	r5, [pc, #88]	@ (8015b74 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8015b1c:	4604      	mov	r4, r0
 8015b1e:	6828      	ldr	r0, [r5, #0]
 8015b20:	b140      	cbz	r0, 8015b34 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015b22:	7a03      	ldrb	r3, [r0, #8]
 8015b24:	b933      	cbnz	r3, 8015b34 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015b26:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8015b2a:	6803      	ldr	r3, [r0, #0]
 8015b2c:	689b      	ldr	r3, [r3, #8]
 8015b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b32:	4718      	bx	r3
 8015b34:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8015b38:	4e0f      	ldr	r6, [pc, #60]	@ (8015b78 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8015b3a:	b973      	cbnz	r3, 8015b5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015b3c:	b168      	cbz	r0, 8015b5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015b3e:	7a03      	ldrb	r3, [r0, #8]
 8015b40:	b15b      	cbz	r3, 8015b5a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015b42:	6830      	ldr	r0, [r6, #0]
 8015b44:	b110      	cbz	r0, 8015b4c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8015b46:	6803      	ldr	r3, [r0, #0]
 8015b48:	691b      	ldr	r3, [r3, #16]
 8015b4a:	4798      	blx	r3
 8015b4c:	6828      	ldr	r0, [r5, #0]
 8015b4e:	6803      	ldr	r3, [r0, #0]
 8015b50:	68db      	ldr	r3, [r3, #12]
 8015b52:	4798      	blx	r3
 8015b54:	2301      	movs	r3, #1
 8015b56:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8015b5a:	3404      	adds	r4, #4
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f7ff ff5f 	bl	8015a20 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8015b62:	4620      	mov	r0, r4
 8015b64:	f7ff ffa0 	bl	8015aa8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8015b68:	6830      	ldr	r0, [r6, #0]
 8015b6a:	b110      	cbz	r0, 8015b72 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8015b6c:	6803      	ldr	r3, [r0, #0]
 8015b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b70:	e7dd      	b.n	8015b2e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8015b72:	bd70      	pop	{r4, r5, r6, pc}
 8015b74:	2008749c 	.word	0x2008749c
 8015b78:	20087498 	.word	0x20087498

08015b7c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	2200      	movs	r2, #0
 8015b80:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8015b84:	801a      	strh	r2, [r3, #0]
 8015b86:	805a      	strh	r2, [r3, #2]
 8015b88:	809a      	strh	r2, [r3, #4]
 8015b8a:	80da      	strh	r2, [r3, #6]
 8015b8c:	3308      	adds	r3, #8
 8015b8e:	428b      	cmp	r3, r1
 8015b90:	d1f8      	bne.n	8015b84 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015b92:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8015b96:	4770      	bx	lr

08015b98 <_ZN8touchgfx11ApplicationC1Ev>:
 8015b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b9a:	4606      	mov	r6, r0
 8015b9c:	4604      	mov	r4, r0
 8015b9e:	2500      	movs	r5, #0
 8015ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8015c10 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015ba2:	22a8      	movs	r2, #168	@ 0xa8
 8015ba4:	f846 3b04 	str.w	r3, [r6], #4
 8015ba8:	2100      	movs	r1, #0
 8015baa:	4630      	mov	r0, r6
 8015bac:	f015 fb25 	bl	802b1fa <memset>
 8015bb0:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8015bb4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8015bb8:	f7ff ffe0 	bl	8015b7c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015bbc:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8015bc0:	f7ff ffdc 	bl	8015b7c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015bc4:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8015bc8:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8015bcc:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8015bd0:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8015bd4:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8015bd8:	490e      	ldr	r1, [pc, #56]	@ (8015c14 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8015bda:	480f      	ldr	r0, [pc, #60]	@ (8015c18 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015bdc:	f002 fd02 	bl	80185e4 <CRC_Lock>
 8015be0:	4f0e      	ldr	r7, [pc, #56]	@ (8015c1c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8015be2:	4b0f      	ldr	r3, [pc, #60]	@ (8015c20 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8015be4:	b158      	cbz	r0, 8015bfe <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8015be6:	801d      	strh	r5, [r3, #0]
 8015be8:	2300      	movs	r3, #0
 8015bea:	4a0e      	ldr	r2, [pc, #56]	@ (8015c24 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8015bec:	4630      	mov	r0, r6
 8015bee:	6013      	str	r3, [r2, #0]
 8015bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8015c28 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8015bf2:	603b      	str	r3, [r7, #0]
 8015bf4:	6013      	str	r3, [r2, #0]
 8015bf6:	f7ff ff32 	bl	8015a5e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015c02:	2002      	movs	r0, #2
 8015c04:	801a      	strh	r2, [r3, #0]
 8015c06:	6038      	str	r0, [r7, #0]
 8015c08:	f001 fa52 	bl	80170b0 <_ZN8touchgfx6Screen4drawEv>
 8015c0c:	e7ec      	b.n	8015be8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8015c0e:	bf00      	nop
 8015c10:	0802d760 	.word	0x0802d760
 8015c14:	b5e8b5cd 	.word	0xb5e8b5cd
 8015c18:	f407a5c2 	.word	0xf407a5c2
 8015c1c:	20087498 	.word	0x20087498
 8015c20:	20000020 	.word	0x20000020
 8015c24:	200874a8 	.word	0x200874a8
 8015c28:	2008749c 	.word	0x2008749c

08015c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015c2c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8015c30:	b510      	push	{r4, lr}
 8015c32:	3b01      	subs	r3, #1
 8015c34:	b29b      	uxth	r3, r3
 8015c36:	428b      	cmp	r3, r1
 8015c38:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8015c3c:	d908      	bls.n	8015c50 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015c3e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015c48:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015c4c:	685a      	ldr	r2, [r3, #4]
 8015c4e:	6062      	str	r2, [r4, #4]
 8015c50:	bd10      	pop	{r4, pc}
	...

08015c54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c58:	4b8f      	ldr	r3, [pc, #572]	@ (8015e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8015c5a:	b08f      	sub	sp, #60	@ 0x3c
 8015c5c:	ac0a      	add	r4, sp, #40	@ 0x28
 8015c5e:	e884 0006 	stmia.w	r4, {r1, r2}
 8015c62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c66:	4b8d      	ldr	r3, [pc, #564]	@ (8015e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8015c68:	4683      	mov	fp, r0
 8015c6a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015c6e:	4620      	mov	r0, r4
 8015c70:	f7ff fe14 	bl	801589c <_ZN8touchgfx4Rect10restrictToEss>
 8015c74:	4620      	mov	r0, r4
 8015c76:	f7fd fdb8 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c7a:	2800      	cmp	r0, #0
 8015c7c:	d16a      	bne.n	8015d54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015c7e:	9403      	str	r4, [sp, #12]
 8015c80:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8015c84:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8015c88:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8015c8c:	35a4      	adds	r5, #164	@ 0xa4
 8015c8e:	9301      	str	r3, [sp, #4]
 8015c90:	b15c      	cbz	r4, 8015caa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015c92:	4629      	mov	r1, r5
 8015c94:	9803      	ldr	r0, [sp, #12]
 8015c96:	f7ff fe51 	bl	801593c <_ZNK8touchgfx4Rect8includesERKS0_>
 8015c9a:	3c01      	subs	r4, #1
 8015c9c:	b118      	cbz	r0, 8015ca6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8015c9e:	b2a1      	uxth	r1, r4
 8015ca0:	9801      	ldr	r0, [sp, #4]
 8015ca2:	f7ff ffc3 	bl	8015c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015ca6:	3d08      	subs	r5, #8
 8015ca8:	e7f2      	b.n	8015c90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8015caa:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8015cae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015cb2:	9302      	str	r3, [sp, #8]
 8015cb4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015cb8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8015cbc:	f8cd a010 	str.w	sl, [sp, #16]
 8015cc0:	9306      	str	r3, [sp, #24]
 8015cc2:	445c      	add	r4, fp
 8015cc4:	2500      	movs	r5, #0
 8015cc6:	4626      	mov	r6, r4
 8015cc8:	462f      	mov	r7, r5
 8015cca:	f8cd a014 	str.w	sl, [sp, #20]
 8015cce:	9b05      	ldr	r3, [sp, #20]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d073      	beq.n	8015dbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015cd4:	9903      	ldr	r1, [sp, #12]
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	f7ff fdbe 	bl	8015858 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015cdc:	b350      	cbz	r0, 8015d34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015cde:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8015ce2:	f9b6 c000 	ldrsh.w	ip, [r6]
 8015ce6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8015cea:	45e6      	cmp	lr, ip
 8015cec:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8015cf0:	db33      	blt.n	8015d5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015cf2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8015cf6:	88b3      	ldrh	r3, [r6, #4]
 8015cf8:	4472      	add	r2, lr
 8015cfa:	4463      	add	r3, ip
 8015cfc:	b212      	sxth	r2, r2
 8015cfe:	b21b      	sxth	r3, r3
 8015d00:	429a      	cmp	r2, r3
 8015d02:	dc2a      	bgt.n	8015d5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8015d04:	88f3      	ldrh	r3, [r6, #6]
 8015d06:	fa1f f289 	uxth.w	r2, r9
 8015d0a:	4413      	add	r3, r2
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	45c8      	cmp	r8, r9
 8015d10:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8015d14:	fa1f fc88 	uxth.w	ip, r8
 8015d18:	fa0f fe83 	sxth.w	lr, r3
 8015d1c:	db0f      	blt.n	8015d3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015d1e:	eba3 030c 	sub.w	r3, r3, ip
 8015d22:	1ac9      	subs	r1, r1, r3
 8015d24:	b209      	sxth	r1, r1
 8015d26:	2900      	cmp	r1, #0
 8015d28:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8015d2c:	dd12      	ble.n	8015d54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015d2e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8015d32:	4605      	mov	r5, r0
 8015d34:	9b05      	ldr	r3, [sp, #20]
 8015d36:	3e08      	subs	r6, #8
 8015d38:	3b01      	subs	r3, #1
 8015d3a:	9305      	str	r3, [sp, #20]
 8015d3c:	e7c7      	b.n	8015cce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8015d3e:	4461      	add	r1, ip
 8015d40:	b209      	sxth	r1, r1
 8015d42:	4571      	cmp	r1, lr
 8015d44:	dc38      	bgt.n	8015db8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015d46:	eba2 020c 	sub.w	r2, r2, ip
 8015d4a:	b212      	sxth	r2, r2
 8015d4c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8015d50:	2a00      	cmp	r2, #0
 8015d52:	dcee      	bgt.n	8015d32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015d54:	b00f      	add	sp, #60	@ 0x3c
 8015d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5a:	45c8      	cmp	r8, r9
 8015d5c:	db2c      	blt.n	8015db8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015d5e:	88f3      	ldrh	r3, [r6, #6]
 8015d60:	4499      	add	r9, r3
 8015d62:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8015d66:	fa0f f989 	sxth.w	r9, r9
 8015d6a:	4498      	add	r8, r3
 8015d6c:	fa0f f888 	sxth.w	r8, r8
 8015d70:	45c1      	cmp	r9, r8
 8015d72:	db21      	blt.n	8015db8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015d74:	88b3      	ldrh	r3, [r6, #4]
 8015d76:	fa1f f28c 	uxth.w	r2, ip
 8015d7a:	4413      	add	r3, r2
 8015d7c:	b29b      	uxth	r3, r3
 8015d7e:	45e6      	cmp	lr, ip
 8015d80:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8015d84:	fa1f f88e 	uxth.w	r8, lr
 8015d88:	fa0f f983 	sxth.w	r9, r3
 8015d8c:	db0a      	blt.n	8015da4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8015d8e:	eba3 0308 	sub.w	r3, r3, r8
 8015d92:	1ac9      	subs	r1, r1, r3
 8015d94:	b209      	sxth	r1, r1
 8015d96:	2900      	cmp	r1, #0
 8015d98:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8015d9c:	ddda      	ble.n	8015d54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015d9e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8015da2:	e7c6      	b.n	8015d32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015da4:	4441      	add	r1, r8
 8015da6:	b209      	sxth	r1, r1
 8015da8:	4549      	cmp	r1, r9
 8015daa:	dc05      	bgt.n	8015db8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8015dac:	eba2 0208 	sub.w	r2, r2, r8
 8015db0:	b212      	sxth	r2, r2
 8015db2:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8015db6:	e7cb      	b.n	8015d50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8015db8:	4607      	mov	r7, r0
 8015dba:	e7bb      	b.n	8015d34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015dbc:	2d00      	cmp	r5, #0
 8015dbe:	d181      	bne.n	8015cc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8015dc0:	2f00      	cmp	r7, #0
 8015dc2:	f000 81de 	beq.w	8016182 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8015dc6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8015dca:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8015dce:	b2b3      	uxth	r3, r6
 8015dd0:	9305      	str	r3, [sp, #20]
 8015dd2:	9a05      	ldr	r2, [sp, #20]
 8015dd4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015dd8:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8015ddc:	4413      	add	r3, r2
 8015dde:	b2ba      	uxth	r2, r7
 8015de0:	4492      	add	sl, r2
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	fa1f fa8a 	uxth.w	sl, sl
 8015de8:	fa0f f883 	sxth.w	r8, r3
 8015dec:	fa0f f98a 	sxth.w	r9, sl
 8015df0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015df4:	9b04      	ldr	r3, [sp, #16]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d052      	beq.n	8015ea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8015dfa:	9903      	ldr	r1, [sp, #12]
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	f7ff fd2b 	bl	8015858 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015e02:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015e06:	b1c0      	cbz	r0, 8015e3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015e08:	f9b4 e000 	ldrsh.w	lr, [r4]
 8015e0c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015e10:	4576      	cmp	r6, lr
 8015e12:	dc22      	bgt.n	8015e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015e14:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015e18:	44f4      	add	ip, lr
 8015e1a:	fa0f fc8c 	sxth.w	ip, ip
 8015e1e:	45e0      	cmp	r8, ip
 8015e20:	db1b      	blt.n	8015e5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8015e22:	428f      	cmp	r7, r1
 8015e24:	fa1f fc81 	uxth.w	ip, r1
 8015e28:	88e1      	ldrh	r1, [r4, #6]
 8015e2a:	dc0d      	bgt.n	8015e48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8015e2c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8015e30:	eba1 010c 	sub.w	r1, r1, ip
 8015e34:	f8a4 9002 	strh.w	r9, [r4, #2]
 8015e38:	80e1      	strh	r1, [r4, #6]
 8015e3a:	4628      	mov	r0, r5
 8015e3c:	9904      	ldr	r1, [sp, #16]
 8015e3e:	3c08      	subs	r4, #8
 8015e40:	3901      	subs	r1, #1
 8015e42:	9104      	str	r1, [sp, #16]
 8015e44:	4605      	mov	r5, r0
 8015e46:	e7d3      	b.n	8015df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8015e48:	4461      	add	r1, ip
 8015e4a:	b209      	sxth	r1, r1
 8015e4c:	4549      	cmp	r1, r9
 8015e4e:	dcf5      	bgt.n	8015e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015e50:	eba2 0c0c 	sub.w	ip, r2, ip
 8015e54:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015e58:	e7ef      	b.n	8015e3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015e5a:	428f      	cmp	r7, r1
 8015e5c:	dcee      	bgt.n	8015e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015e5e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8015e62:	4461      	add	r1, ip
 8015e64:	b209      	sxth	r1, r1
 8015e66:	4589      	cmp	r9, r1
 8015e68:	dbe8      	blt.n	8015e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015e6a:	4576      	cmp	r6, lr
 8015e6c:	fa1f fc8e 	uxth.w	ip, lr
 8015e70:	88a1      	ldrh	r1, [r4, #4]
 8015e72:	dc07      	bgt.n	8015e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8015e74:	eba3 0c0c 	sub.w	ip, r3, ip
 8015e78:	eba1 010c 	sub.w	r1, r1, ip
 8015e7c:	f8a4 8000 	strh.w	r8, [r4]
 8015e80:	80a1      	strh	r1, [r4, #4]
 8015e82:	e7da      	b.n	8015e3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015e84:	4461      	add	r1, ip
 8015e86:	b209      	sxth	r1, r1
 8015e88:	4588      	cmp	r8, r1
 8015e8a:	dbd7      	blt.n	8015e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8015e8c:	9905      	ldr	r1, [sp, #20]
 8015e8e:	eba1 0c0c 	sub.w	ip, r1, ip
 8015e92:	f8a4 c004 	strh.w	ip, [r4, #4]
 8015e96:	e7d0      	b.n	8015e3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8015e98:	20087452 	.word	0x20087452
 8015e9c:	20087450 	.word	0x20087450
 8015ea0:	2d00      	cmp	r5, #0
 8015ea2:	f000 816e 	beq.w	8016182 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8015ea6:	9b06      	ldr	r3, [sp, #24]
 8015ea8:	445b      	add	r3, fp
 8015eaa:	461c      	mov	r4, r3
 8015eac:	9b02      	ldr	r3, [sp, #8]
 8015eae:	3301      	adds	r3, #1
 8015eb0:	f000 8167 	beq.w	8016182 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8015eb4:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8015eb8:	4629      	mov	r1, r5
 8015eba:	9803      	ldr	r0, [sp, #12]
 8015ebc:	f7ff fd3e 	bl	801593c <_ZNK8touchgfx4Rect8includesERKS0_>
 8015ec0:	b120      	cbz	r0, 8015ecc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8015ec2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8015ec6:	9801      	ldr	r0, [sp, #4]
 8015ec8:	f7ff feb0 	bl	8015c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015ecc:	9903      	ldr	r1, [sp, #12]
 8015ece:	4628      	mov	r0, r5
 8015ed0:	f7ff fcc2 	bl	8015858 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015ed4:	2800      	cmp	r0, #0
 8015ed6:	f000 809c 	beq.w	8016012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8015eda:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8015ede:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8015ee2:	fa1f f189 	uxth.w	r1, r9
 8015ee6:	eb01 0c03 	add.w	ip, r1, r3
 8015eea:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8015eee:	fa1f fa8c 	uxth.w	sl, ip
 8015ef2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8015ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ef8:	b283      	uxth	r3, r0
 8015efa:	eb03 050c 	add.w	r5, r3, ip
 8015efe:	b2ad      	uxth	r5, r5
 8015f00:	9505      	str	r5, [sp, #20]
 8015f02:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8015f06:	4548      	cmp	r0, r9
 8015f08:	9504      	str	r5, [sp, #16]
 8015f0a:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8015f0e:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8015f12:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8015f16:	f340 8099 	ble.w	801604c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8015f1a:	1a5b      	subs	r3, r3, r1
 8015f1c:	b29b      	uxth	r3, r3
 8015f1e:	4596      	cmp	lr, r2
 8015f20:	fa0f f08a 	sxth.w	r0, sl
 8015f24:	b21e      	sxth	r6, r3
 8015f26:	dd2e      	ble.n	8015f86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8015f28:	9f02      	ldr	r7, [sp, #8]
 8015f2a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8015f2e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015f32:	9f04      	ldr	r7, [sp, #16]
 8015f34:	fa1f fe8e 	uxth.w	lr, lr
 8015f38:	1a3f      	subs	r7, r7, r0
 8015f3a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8015f3e:	b292      	uxth	r2, r2
 8015f40:	ebae 0102 	sub.w	r1, lr, r2
 8015f44:	44a6      	add	lr, r4
 8015f46:	4402      	add	r2, r0
 8015f48:	b289      	uxth	r1, r1
 8015f4a:	fa0f fe8e 	sxth.w	lr, lr
 8015f4e:	b212      	sxth	r2, r2
 8015f50:	b20d      	sxth	r5, r1
 8015f52:	ebae 0202 	sub.w	r2, lr, r2
 8015f56:	436f      	muls	r7, r5
 8015f58:	4372      	muls	r2, r6
 8015f5a:	4297      	cmp	r7, r2
 8015f5c:	db09      	blt.n	8015f72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8015f5e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8015f62:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8015f66:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8015f6a:	449c      	add	ip, r3
 8015f6c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8015f70:	e686      	b.n	8015c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015f72:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8015f76:	4421      	add	r1, r4
 8015f78:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8015f7c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8015f80:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8015f84:	e67c      	b.n	8015c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015f86:	9f04      	ldr	r7, [sp, #16]
 8015f88:	42b8      	cmp	r0, r7
 8015f8a:	da27      	bge.n	8015fdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8015f8c:	9902      	ldr	r1, [sp, #8]
 8015f8e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8015f92:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8015f96:	eb05 010e 	add.w	r1, r5, lr
 8015f9a:	fa1f f881 	uxth.w	r8, r1
 8015f9e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8015fa2:	fa0f f988 	sxth.w	r9, r8
 8015fa6:	4411      	add	r1, r2
 8015fa8:	eba1 0108 	sub.w	r1, r1, r8
 8015fac:	b289      	uxth	r1, r1
 8015fae:	fa0f f881 	sxth.w	r8, r1
 8015fb2:	eba2 020e 	sub.w	r2, r2, lr
 8015fb6:	1a3f      	subs	r7, r7, r0
 8015fb8:	4372      	muls	r2, r6
 8015fba:	fb08 f707 	mul.w	r7, r8, r7
 8015fbe:	42ba      	cmp	r2, r7
 8015fc0:	dc06      	bgt.n	8015fd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8015fc2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8015fc6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8015fca:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8015fce:	e7ca      	b.n	8015f66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8015fd0:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8015fd4:	4429      	add	r1, r5
 8015fd6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8015fda:	e651      	b.n	8015c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015fdc:	9805      	ldr	r0, [sp, #20]
 8015fde:	2d06      	cmp	r5, #6
 8015fe0:	ebaa 0000 	sub.w	r0, sl, r0
 8015fe4:	b280      	uxth	r0, r0
 8015fe6:	fa0f fe80 	sxth.w	lr, r0
 8015fea:	d817      	bhi.n	801601c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8015fec:	9b04      	ldr	r3, [sp, #16]
 8015fee:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8015ff2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8015ff6:	1c6b      	adds	r3, r5, #1
 8015ff8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8015ffc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016000:	9b01      	ldr	r3, [sp, #4]
 8016002:	9801      	ldr	r0, [sp, #4]
 8016004:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016008:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801600c:	805a      	strh	r2, [r3, #2]
 801600e:	809e      	strh	r6, [r3, #4]
 8016010:	80d9      	strh	r1, [r3, #6]
 8016012:	9b02      	ldr	r3, [sp, #8]
 8016014:	3c08      	subs	r4, #8
 8016016:	3b01      	subs	r3, #1
 8016018:	9302      	str	r3, [sp, #8]
 801601a:	e747      	b.n	8015eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801601c:	9a02      	ldr	r2, [sp, #8]
 801601e:	45b6      	cmp	lr, r6
 8016020:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016024:	db0d      	blt.n	8016042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016026:	449c      	add	ip, r3
 8016028:	fa1f fc8c 	uxth.w	ip, ip
 801602c:	445a      	add	r2, fp
 801602e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016032:	448c      	add	ip, r1
 8016034:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016038:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801603c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8016040:	e61e      	b.n	8015c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016042:	445a      	add	r2, fp
 8016044:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8016048:	4484      	add	ip, r0
 801604a:	e78f      	b.n	8015f6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801604c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8016050:	fa1f f18e 	uxth.w	r1, lr
 8016054:	eb01 0806 	add.w	r8, r1, r6
 8016058:	b293      	uxth	r3, r2
 801605a:	fa1f f888 	uxth.w	r8, r8
 801605e:	9306      	str	r3, [sp, #24]
 8016060:	fa0f f388 	sxth.w	r3, r8
 8016064:	9307      	str	r3, [sp, #28]
 8016066:	9f06      	ldr	r7, [sp, #24]
 8016068:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801606c:	4596      	cmp	lr, r2
 801606e:	443b      	add	r3, r7
 8016070:	b29b      	uxth	r3, r3
 8016072:	9308      	str	r3, [sp, #32]
 8016074:	da24      	bge.n	80160c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8016076:	9905      	ldr	r1, [sp, #20]
 8016078:	eba3 0308 	sub.w	r3, r3, r8
 801607c:	ebaa 0401 	sub.w	r4, sl, r1
 8016080:	b2a4      	uxth	r4, r4
 8016082:	b29b      	uxth	r3, r3
 8016084:	b225      	sxth	r5, r4
 8016086:	b219      	sxth	r1, r3
 8016088:	eba2 020e 	sub.w	r2, r2, lr
 801608c:	eba9 0000 	sub.w	r0, r9, r0
 8016090:	436a      	muls	r2, r5
 8016092:	4348      	muls	r0, r1
 8016094:	4282      	cmp	r2, r0
 8016096:	9a02      	ldr	r2, [sp, #8]
 8016098:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801609c:	445a      	add	r2, fp
 801609e:	dc06      	bgt.n	80160ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80160a0:	9b07      	ldr	r3, [sp, #28]
 80160a2:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 80160a6:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 80160aa:	44a4      	add	ip, r4
 80160ac:	e75e      	b.n	8015f6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80160ae:	9904      	ldr	r1, [sp, #16]
 80160b0:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 80160b4:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 80160b8:	4433      	add	r3, r6
 80160ba:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80160be:	e5df      	b.n	8015c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80160c0:	9f06      	ldr	r7, [sp, #24]
 80160c2:	9b04      	ldr	r3, [sp, #16]
 80160c4:	1bc9      	subs	r1, r1, r7
 80160c6:	fa0f f78a 	sxth.w	r7, sl
 80160ca:	b289      	uxth	r1, r1
 80160cc:	429f      	cmp	r7, r3
 80160ce:	fa0f fe81 	sxth.w	lr, r1
 80160d2:	dd24      	ble.n	801611e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 80160d4:	9a05      	ldr	r2, [sp, #20]
 80160d6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80160da:	ebaa 0202 	sub.w	r2, sl, r2
 80160de:	9d07      	ldr	r5, [sp, #28]
 80160e0:	b292      	uxth	r2, r2
 80160e2:	eba5 0a03 	sub.w	sl, r5, r3
 80160e6:	b214      	sxth	r4, r2
 80160e8:	eba9 0000 	sub.w	r0, r9, r0
 80160ec:	fb0e f000 	mul.w	r0, lr, r0
 80160f0:	fb04 fa0a 	mul.w	sl, r4, sl
 80160f4:	9b02      	ldr	r3, [sp, #8]
 80160f6:	4550      	cmp	r0, sl
 80160f8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80160fc:	445b      	add	r3, fp
 80160fe:	db03      	blt.n	8016108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8016100:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8016104:	4494      	add	ip, r2
 8016106:	e731      	b.n	8015f6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016108:	9a04      	ldr	r2, [sp, #16]
 801610a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801610e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8016112:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8016116:	4431      	add	r1, r6
 8016118:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801611c:	e75b      	b.n	8015fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801611e:	9b08      	ldr	r3, [sp, #32]
 8016120:	2d06      	cmp	r5, #6
 8016122:	eba3 0308 	sub.w	r3, r3, r8
 8016126:	b29b      	uxth	r3, r3
 8016128:	b218      	sxth	r0, r3
 801612a:	d813      	bhi.n	8016154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 801612c:	9b07      	ldr	r3, [sp, #28]
 801612e:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8016132:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8016136:	1c6b      	adds	r3, r5, #1
 8016138:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801613c:	9b01      	ldr	r3, [sp, #4]
 801613e:	9901      	ldr	r1, [sp, #4]
 8016140:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016144:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016148:	805a      	strh	r2, [r3, #2]
 801614a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801614c:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016150:	809a      	strh	r2, [r3, #4]
 8016152:	e75e      	b.n	8016012 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016154:	9c02      	ldr	r4, [sp, #8]
 8016156:	4570      	cmp	r0, lr
 8016158:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801615c:	db0d      	blt.n	801617a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 801615e:	4431      	add	r1, r6
 8016160:	9b06      	ldr	r3, [sp, #24]
 8016162:	b289      	uxth	r1, r1
 8016164:	445c      	add	r4, fp
 8016166:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801616a:	4419      	add	r1, r3
 801616c:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8016170:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8016174:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8016178:	e582      	b.n	8015c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801617a:	445c      	add	r4, fp
 801617c:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8016180:	e79a      	b.n	80160b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016182:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8016186:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801618a:	1e65      	subs	r5, r4, #1
 801618c:	b2ad      	uxth	r5, r5
 801618e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8016192:	42b5      	cmp	r5, r6
 8016194:	d044      	beq.n	8016220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5cc>
 8016196:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801619a:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801619e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80161a2:	4282      	cmp	r2, r0
 80161a4:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 80161a8:	d11f      	bne.n	80161ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 80161aa:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 80161ae:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80161b2:	459c      	cmp	ip, r3
 80161b4:	d119      	bne.n	80161ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 80161b6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80161ba:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80161be:	19d8      	adds	r0, r3, r7
 80161c0:	b200      	sxth	r0, r0
 80161c2:	4288      	cmp	r0, r1
 80161c4:	d109      	bne.n	80161da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 80161c6:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80161ca:	4413      	add	r3, r2
 80161cc:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80161d0:	4629      	mov	r1, r5
 80161d2:	9801      	ldr	r0, [sp, #4]
 80161d4:	f7ff fd2a 	bl	8015c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80161d8:	e003      	b.n	80161e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 80161da:	4411      	add	r1, r2
 80161dc:	b209      	sxth	r1, r1
 80161de:	42b9      	cmp	r1, r7
 80161e0:	d0f3      	beq.n	80161ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x576>
 80161e2:	3d01      	subs	r5, #1
 80161e4:	b2ad      	uxth	r5, r5
 80161e6:	3c08      	subs	r4, #8
 80161e8:	e7d3      	b.n	8016192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 80161ea:	42b9      	cmp	r1, r7
 80161ec:	d1f9      	bne.n	80161e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 80161ee:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80161f2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80161f6:	4299      	cmp	r1, r3
 80161f8:	d1f3      	bne.n	80161e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 80161fa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80161fe:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8016202:	181f      	adds	r7, r3, r0
 8016204:	b23f      	sxth	r7, r7
 8016206:	42ba      	cmp	r2, r7
 8016208:	d105      	bne.n	8016216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c2>
 801620a:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801620e:	440b      	add	r3, r1
 8016210:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8016214:	e7dc      	b.n	80161d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 8016216:	440a      	add	r2, r1
 8016218:	b212      	sxth	r2, r2
 801621a:	4290      	cmp	r0, r2
 801621c:	d1e1      	bne.n	80161e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801621e:	e7f6      	b.n	801620e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ba>
 8016220:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8016224:	2e07      	cmp	r6, #7
 8016226:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801622a:	d812      	bhi.n	8016252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801622c:	1c75      	adds	r5, r6, #1
 801622e:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8016232:	9d01      	ldr	r5, [sp, #4]
 8016234:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016238:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801623c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8016240:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8016244:	442c      	add	r4, r5
 8016246:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801624a:	8061      	strh	r1, [r4, #2]
 801624c:	80a2      	strh	r2, [r4, #4]
 801624e:	80e3      	strh	r3, [r4, #6]
 8016250:	e580      	b.n	8015d54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016252:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8016256:	f04f 37ff 	mov.w	r7, #4294967295
 801625a:	2500      	movs	r5, #0
 801625c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016260:	3e01      	subs	r6, #1
 8016262:	445c      	add	r4, fp
 8016264:	9305      	str	r3, [sp, #20]
 8016266:	1e72      	subs	r2, r6, #1
 8016268:	4691      	mov	r9, r2
 801626a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801626e:	9302      	str	r3, [sp, #8]
 8016270:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8016274:	9304      	str	r3, [sp, #16]
 8016276:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801627a:	f1b9 3fff 	cmp.w	r9, #4294967295
 801627e:	bf16      	itet	ne
 8016280:	9905      	ldrne	r1, [sp, #20]
 8016282:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016286:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801628a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801628e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016292:	6818      	ldr	r0, [r3, #0]
 8016294:	fb18 f801 	smulbb	r8, r8, r1
 8016298:	6859      	ldr	r1, [r3, #4]
 801629a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801629e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80162a2:	4671      	mov	r1, lr
 80162a4:	a80c      	add	r0, sp, #48	@ 0x30
 80162a6:	9207      	str	r2, [sp, #28]
 80162a8:	9306      	str	r3, [sp, #24]
 80162aa:	f7ff fb6d 	bl	8015988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80162ae:	f04f 0c08 	mov.w	ip, #8
 80162b2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80162b6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80162ba:	9b04      	ldr	r3, [sp, #16]
 80162bc:	9a02      	ldr	r2, [sp, #8]
 80162be:	fb10 f001 	smulbb	r0, r0, r1
 80162c2:	fb02 8803 	mla	r8, r2, r3, r8
 80162c6:	eba0 0108 	sub.w	r1, r0, r8
 80162ca:	fb90 f0fc 	sdiv	r0, r0, ip
 80162ce:	4288      	cmp	r0, r1
 80162d0:	dc20      	bgt.n	8016314 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 80162d2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80162d6:	4551      	cmp	r1, sl
 80162d8:	da03      	bge.n	80162e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 80162da:	b1d9      	cbz	r1, 8016314 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 80162dc:	468a      	mov	sl, r1
 80162de:	464f      	mov	r7, r9
 80162e0:	4635      	mov	r5, r6
 80162e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80162e6:	f119 0f02 	cmn.w	r9, #2
 80162ea:	d1c6      	bne.n	801627a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 80162ec:	4616      	mov	r6, r2
 80162ee:	3201      	adds	r2, #1
 80162f0:	f1a4 0408 	sub.w	r4, r4, #8
 80162f4:	d1b7      	bne.n	8016266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 80162f6:	9b01      	ldr	r3, [sp, #4]
 80162f8:	b2ac      	uxth	r4, r5
 80162fa:	00ed      	lsls	r5, r5, #3
 80162fc:	1958      	adds	r0, r3, r5
 80162fe:	1c7b      	adds	r3, r7, #1
 8016300:	d10b      	bne.n	801631a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 8016302:	4601      	mov	r1, r0
 8016304:	9803      	ldr	r0, [sp, #12]
 8016306:	f7ff fb3f 	bl	8015988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801630a:	4621      	mov	r1, r4
 801630c:	9801      	ldr	r0, [sp, #4]
 801630e:	f7ff fc8d 	bl	8015c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016312:	e4b5      	b.n	8015c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016314:	464f      	mov	r7, r9
 8016316:	4635      	mov	r5, r6
 8016318:	e7ed      	b.n	80162f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 801631a:	9b01      	ldr	r3, [sp, #4]
 801631c:	00ff      	lsls	r7, r7, #3
 801631e:	19d9      	adds	r1, r3, r7
 8016320:	f7ff fb32 	bl	8015988 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016324:	9b03      	ldr	r3, [sp, #12]
 8016326:	445f      	add	r7, fp
 8016328:	cb03      	ldmia	r3!, {r0, r1}
 801632a:	445d      	add	r5, fp
 801632c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8016330:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8016334:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8016338:	9b03      	ldr	r3, [sp, #12]
 801633a:	6869      	ldr	r1, [r5, #4]
 801633c:	c303      	stmia	r3!, {r0, r1}
 801633e:	e7e4      	b.n	801630a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

08016340 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016344:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8016348:	b09b      	sub	sp, #108	@ 0x6c
 801634a:	4604      	mov	r4, r0
 801634c:	4630      	mov	r0, r6
 801634e:	f7fd fa4c 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8016352:	4605      	mov	r5, r0
 8016354:	b948      	cbnz	r0, 801636a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8016356:	e896 0006 	ldmia.w	r6, {r1, r2}
 801635a:	6823      	ldr	r3, [r4, #0]
 801635c:	4620      	mov	r0, r4
 801635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016360:	4798      	blx	r3
 8016362:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8016366:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801636a:	4bc6      	ldr	r3, [pc, #792]	@ (8016684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d03f      	beq.n	80163f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8016372:	4dc5      	ldr	r5, [pc, #788]	@ (8016688 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8016374:	4628      	mov	r0, r5
 8016376:	f7fd fa38 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801637a:	4606      	mov	r6, r0
 801637c:	2800      	cmp	r0, #0
 801637e:	d138      	bne.n	80163f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8016380:	4628      	mov	r0, r5
 8016382:	f7ff f99f 	bl	80156c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016386:	6823      	ldr	r3, [r4, #0]
 8016388:	6829      	ldr	r1, [r5, #0]
 801638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801638c:	686a      	ldr	r2, [r5, #4]
 801638e:	4620      	mov	r0, r4
 8016390:	4798      	blx	r3
 8016392:	802e      	strh	r6, [r5, #0]
 8016394:	806e      	strh	r6, [r5, #2]
 8016396:	80ae      	strh	r6, [r5, #4]
 8016398:	80ee      	strh	r6, [r5, #6]
 801639a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801639e:	4dbb      	ldr	r5, [pc, #748]	@ (801668c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80163a0:	4640      	mov	r0, r8
 80163a2:	f7ff fbeb 	bl	8015b7c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80163a6:	882e      	ldrh	r6, [r5, #0]
 80163a8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80163ac:	4633      	mov	r3, r6
 80163ae:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80163b2:	42bb      	cmp	r3, r7
 80163b4:	d224      	bcs.n	8016400 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80163b6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80163ba:	2907      	cmp	r1, #7
 80163bc:	d816      	bhi.n	80163ec <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80163be:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80163c2:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80163c6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80163ca:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80163ce:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80163d2:	1c4a      	adds	r2, r1, #1
 80163d4:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80163d8:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80163dc:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80163e0:	f8a2 a002 	strh.w	sl, [r2, #2]
 80163e4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80163e8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80163ec:	3301      	adds	r3, #1
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	e7df      	b.n	80163b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80163f2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d1cf      	bne.n	801639a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80163fa:	b01b      	add	sp, #108	@ 0x6c
 80163fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016400:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8016404:	42b3      	cmp	r3, r6
 8016406:	d90c      	bls.n	8016422 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8016408:	6822      	ldr	r2, [r4, #0]
 801640a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801640e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8016410:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8016414:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8016418:	4620      	mov	r0, r4
 801641a:	3601      	adds	r6, #1
 801641c:	47b8      	blx	r7
 801641e:	b2b6      	uxth	r6, r6
 8016420:	e7ee      	b.n	8016400 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8016422:	4a9b      	ldr	r2, [pc, #620]	@ (8016690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016424:	6813      	ldr	r3, [r2, #0]
 8016426:	4691      	mov	r9, r2
 8016428:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801642c:	2b01      	cmp	r3, #1
 801642e:	f040 80e2 	bne.w	80165f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8016432:	2600      	movs	r6, #0
 8016434:	8829      	ldrh	r1, [r5, #0]
 8016436:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801643a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801643e:	33ae      	adds	r3, #174	@ 0xae
 8016440:	428f      	cmp	r7, r1
 8016442:	f103 0308 	add.w	r3, r3, #8
 8016446:	dd0a      	ble.n	801645e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8016448:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801644c:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8016450:	3101      	adds	r1, #1
 8016452:	4402      	add	r2, r0
 8016454:	b212      	sxth	r2, r2
 8016456:	4296      	cmp	r6, r2
 8016458:	bfb8      	it	lt
 801645a:	4616      	movlt	r6, r2
 801645c:	e7f0      	b.n	8016440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801645e:	4b8d      	ldr	r3, [pc, #564]	@ (8016694 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016460:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8016690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 8016464:	881b      	ldrh	r3, [r3, #0]
 8016466:	2b0f      	cmp	r3, #15
 8016468:	bf88      	it	hi
 801646a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801646e:	f04f 0300 	mov.w	r3, #0
 8016472:	bf98      	it	ls
 8016474:	f04f 0b01 	movls.w	fp, #1
 8016478:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801647c:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8016480:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8016484:	4b82      	ldr	r3, [pc, #520]	@ (8016690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016486:	4438      	add	r0, r7
 8016488:	b207      	sxth	r7, r0
 801648a:	6818      	ldr	r0, [r3, #0]
 801648c:	42b7      	cmp	r7, r6
 801648e:	6803      	ldr	r3, [r0, #0]
 8016490:	f280 8083 	bge.w	801659a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8016494:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016498:	4798      	blx	r3
 801649a:	eb07 030b 	add.w	r3, r7, fp
 801649e:	4298      	cmp	r0, r3
 80164a0:	da07      	bge.n	80164b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 80164a2:	42b0      	cmp	r0, r6
 80164a4:	da05      	bge.n	80164b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 80164a6:	4287      	cmp	r7, r0
 80164a8:	dd6c      	ble.n	8016584 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80164aa:	2f00      	cmp	r7, #0
 80164ac:	dd6a      	ble.n	8016584 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 80164ae:	4630      	mov	r0, r6
 80164b0:	e004      	b.n	80164bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 80164b2:	4287      	cmp	r7, r0
 80164b4:	dcfb      	bgt.n	80164ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80164b6:	42b0      	cmp	r0, r6
 80164b8:	bfa8      	it	ge
 80164ba:	4630      	movge	r0, r6
 80164bc:	2200      	movs	r2, #0
 80164be:	4b76      	ldr	r3, [pc, #472]	@ (8016698 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80164c0:	1bc0      	subs	r0, r0, r7
 80164c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164c6:	f8ad 7016 	strh.w	r7, [sp, #22]
 80164ca:	882f      	ldrh	r7, [r5, #0]
 80164cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80164d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80164d4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80164d8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80164dc:	42bb      	cmp	r3, r7
 80164de:	d9cd      	bls.n	801647c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 80164e0:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80164e4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80164e8:	ab07      	add	r3, sp, #28
 80164ea:	6851      	ldr	r1, [r2, #4]
 80164ec:	c303      	stmia	r3!, {r0, r1}
 80164ee:	a905      	add	r1, sp, #20
 80164f0:	a807      	add	r0, sp, #28
 80164f2:	f7ff f9b1 	bl	8015858 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80164f6:	2800      	cmp	r0, #0
 80164f8:	d04c      	beq.n	8016594 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 80164fa:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80164fe:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016502:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8016506:	4686      	mov	lr, r0
 8016508:	4290      	cmp	r0, r2
 801650a:	4450      	add	r0, sl
 801650c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8016510:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8016514:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016518:	bfb8      	it	lt
 801651a:	4696      	movlt	lr, r2
 801651c:	4452      	add	r2, sl
 801651e:	4299      	cmp	r1, r3
 8016520:	b280      	uxth	r0, r0
 8016522:	b292      	uxth	r2, r2
 8016524:	468c      	mov	ip, r1
 8016526:	9302      	str	r3, [sp, #8]
 8016528:	bfb8      	it	lt
 801652a:	469c      	movlt	ip, r3
 801652c:	fa0f fa82 	sxth.w	sl, r2
 8016530:	b203      	sxth	r3, r0
 8016532:	4553      	cmp	r3, sl
 8016534:	bfb8      	it	lt
 8016536:	4602      	movlt	r2, r0
 8016538:	eba2 020e 	sub.w	r2, r2, lr
 801653c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016540:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8016544:	9b02      	ldr	r3, [sp, #8]
 8016546:	4411      	add	r1, r2
 8016548:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801654c:	b289      	uxth	r1, r1
 801654e:	4413      	add	r3, r2
 8016550:	b29b      	uxth	r3, r3
 8016552:	b208      	sxth	r0, r1
 8016554:	b21a      	sxth	r2, r3
 8016556:	4290      	cmp	r0, r2
 8016558:	bfb8      	it	lt
 801655a:	460b      	movlt	r3, r1
 801655c:	eba3 030c 	sub.w	r3, r3, ip
 8016560:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8016564:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016568:	f8ad c01e 	strh.w	ip, [sp, #30]
 801656c:	a807      	add	r0, sp, #28
 801656e:	f7fd f93c 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8016572:	b920      	cbnz	r0, 801657e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8016574:	6823      	ldr	r3, [r4, #0]
 8016576:	a907      	add	r1, sp, #28
 8016578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801657a:	4620      	mov	r0, r4
 801657c:	4798      	blx	r3
 801657e:	3701      	adds	r7, #1
 8016580:	b2bf      	uxth	r7, r7
 8016582:	e7a9      	b.n	80164d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8016584:	f8d9 0000 	ldr.w	r0, [r9]
 8016588:	2101      	movs	r1, #1
 801658a:	6803      	ldr	r3, [r0, #0]
 801658c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016590:	4798      	blx	r3
 8016592:	e773      	b.n	801647c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8016594:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8016598:	e7e8      	b.n	801656c <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801659c:	4798      	blx	r3
 801659e:	4b3f      	ldr	r3, [pc, #252]	@ (801669c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	f43f af29 	beq.w	80163fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80165a8:	2300      	movs	r3, #0
 80165aa:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80165ae:	882b      	ldrh	r3, [r5, #0]
 80165b0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80165b4:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80165b8:	42ab      	cmp	r3, r5
 80165ba:	f4bf af1e 	bcs.w	80163fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80165be:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80165c2:	2907      	cmp	r1, #7
 80165c4:	d814      	bhi.n	80165f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80165c6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80165ca:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80165ce:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80165d2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80165d6:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80165da:	1c4a      	adds	r2, r1, #1
 80165dc:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80165e0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80165e4:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80165e8:	f8a2 c002 	strh.w	ip, [r2, #2]
 80165ec:	8097      	strh	r7, [r2, #4]
 80165ee:	80d6      	strh	r6, [r2, #6]
 80165f0:	3301      	adds	r3, #1
 80165f2:	b29b      	uxth	r3, r3
 80165f4:	e7e0      	b.n	80165b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 80165f6:	2b02      	cmp	r3, #2
 80165f8:	f040 8133 	bne.w	8016862 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 80165fc:	4b28      	ldr	r3, [pc, #160]	@ (80166a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80165fe:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8016602:	781b      	ldrb	r3, [r3, #0]
 8016604:	2b01      	cmp	r3, #1
 8016606:	f000 8098 	beq.w	801673a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801660a:	882a      	ldrh	r2, [r5, #0]
 801660c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8016610:	3201      	adds	r2, #1
 8016612:	b292      	uxth	r2, r2
 8016614:	2900      	cmp	r1, #0
 8016616:	d0c2      	beq.n	801659e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8016618:	4694      	mov	ip, r2
 801661a:	f04f 0900 	mov.w	r9, #0
 801661e:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8016622:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8016626:	441e      	add	r6, r3
 8016628:	b236      	sxth	r6, r6
 801662a:	fa1f f38c 	uxth.w	r3, ip
 801662e:	4299      	cmp	r1, r3
 8016630:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8016634:	f240 80bf 	bls.w	80167b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 8016638:	4427      	add	r7, r4
 801663a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801663e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8016642:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8016646:	4283      	cmp	r3, r0
 8016648:	f340 80a1 	ble.w	801678e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 801664c:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8016650:	46e1      	mov	r9, ip
 8016652:	4406      	add	r6, r0
 8016654:	b236      	sxth	r6, r6
 8016656:	429e      	cmp	r6, r3
 8016658:	bfa8      	it	ge
 801665a:	461e      	movge	r6, r3
 801665c:	f10c 0c01 	add.w	ip, ip, #1
 8016660:	e7e3      	b.n	801662a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 8016662:	d10a      	bne.n	801667a <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 8016664:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8016668:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801666c:	4562      	cmp	r2, ip
 801666e:	bfb8      	it	lt
 8016670:	4662      	movlt	r2, ip
 8016672:	4288      	cmp	r0, r1
 8016674:	bfb8      	it	lt
 8016676:	461f      	movlt	r7, r3
 8016678:	e087      	b.n	801678a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801667a:	428a      	cmp	r2, r1
 801667c:	bfb8      	it	lt
 801667e:	460a      	movlt	r2, r1
 8016680:	e083      	b.n	801678a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 8016682:	bf00      	nop
 8016684:	20087494 	.word	0x20087494
 8016688:	200874a0 	.word	0x200874a0
 801668c:	20000020 	.word	0x20000020
 8016690:	2008745c 	.word	0x2008745c
 8016694:	20087452 	.word	0x20087452
 8016698:	20087450 	.word	0x20087450
 801669c:	2008745a 	.word	0x2008745a
 80166a0:	20087454 	.word	0x20087454
 80166a4:	19a1      	adds	r1, r4, r6
 80166a6:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80166aa:	ab07      	add	r3, sp, #28
 80166ac:	6849      	ldr	r1, [r1, #4]
 80166ae:	c303      	stmia	r3!, {r0, r1}
 80166b0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80166b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80166b8:	2b13      	cmp	r3, #19
 80166ba:	bfd8      	it	le
 80166bc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80166c0:	440b      	add	r3, r1
 80166c2:	1a9b      	subs	r3, r3, r2
 80166c4:	a807      	add	r0, sp, #28
 80166c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80166ca:	f8ad 201c 	strh.w	r2, [sp, #28]
 80166ce:	f7ff f813 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80166d2:	a807      	add	r0, sp, #28
 80166d4:	f7fd f889 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 80166d8:	bb78      	cbnz	r0, 801673a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 80166da:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 80166de:	f8d9 0000 	ldr.w	r0, [r9]
 80166e2:	f1bc 0f14 	cmp.w	ip, #20
 80166e6:	bfa8      	it	ge
 80166e8:	f04f 0c14 	movge.w	ip, #20
 80166ec:	f8d0 e000 	ldr.w	lr, [r0]
 80166f0:	fa1f fc8c 	uxth.w	ip, ip
 80166f4:	f8cd c000 	str.w	ip, [sp]
 80166f8:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80166fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016700:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8016704:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016708:	47d8      	blx	fp
 801670a:	4683      	mov	fp, r0
 801670c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8016710:	a807      	add	r0, sp, #28
 8016712:	f7fe ffd7 	bl	80156c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016716:	6823      	ldr	r3, [r4, #0]
 8016718:	4620      	mov	r0, r4
 801671a:	4426      	add	r6, r4
 801671c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801671e:	a907      	add	r1, sp, #28
 8016720:	4798      	blx	r3
 8016722:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8016726:	eba0 000b 	sub.w	r0, r0, fp
 801672a:	b200      	sxth	r0, r0
 801672c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8016730:	b918      	cbnz	r0, 801673a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8016732:	b2b9      	uxth	r1, r7
 8016734:	4650      	mov	r0, sl
 8016736:	f7ff fa79 	bl	8015c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801673a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801673e:	f1bb 0f00 	cmp.w	fp, #0
 8016742:	f43f af2c 	beq.w	801659e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8016746:	2700      	movs	r7, #0
 8016748:	882b      	ldrh	r3, [r5, #0]
 801674a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801674e:	3301      	adds	r3, #1
 8016750:	b29b      	uxth	r3, r3
 8016752:	b299      	uxth	r1, r3
 8016754:	458b      	cmp	fp, r1
 8016756:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 801675a:	d9a3      	bls.n	80166a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 801675c:	4426      	add	r6, r4
 801675e:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8016762:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8016766:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801676a:	4408      	add	r0, r1
 801676c:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8016770:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8016774:	b200      	sxth	r0, r0
 8016776:	4461      	add	r1, ip
 8016778:	b209      	sxth	r1, r1
 801677a:	4288      	cmp	r0, r1
 801677c:	f6bf af71 	bge.w	8016662 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8016780:	4584      	cmp	ip, r0
 8016782:	4662      	mov	r2, ip
 8016784:	461f      	mov	r7, r3
 8016786:	bfb8      	it	lt
 8016788:	4602      	movlt	r2, r0
 801678a:	3301      	adds	r3, #1
 801678c:	e7e1      	b.n	8016752 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 801678e:	d10e      	bne.n	80167ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 8016790:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8016794:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8016798:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801679c:	4473      	add	r3, lr
 801679e:	b21b      	sxth	r3, r3
 80167a0:	429e      	cmp	r6, r3
 80167a2:	bfa8      	it	ge
 80167a4:	461e      	movge	r6, r3
 80167a6:	4287      	cmp	r7, r0
 80167a8:	bfb8      	it	lt
 80167aa:	46e1      	movlt	r9, ip
 80167ac:	e756      	b.n	801665c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 80167ae:	4286      	cmp	r6, r0
 80167b0:	bfa8      	it	ge
 80167b2:	4606      	movge	r6, r0
 80167b4:	e752      	b.n	801665c <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 80167b6:	eb0a 0007 	add.w	r0, sl, r7
 80167ba:	4427      	add	r7, r4
 80167bc:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80167c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80167c4:	f1bb 0f13 	cmp.w	fp, #19
 80167c8:	bfde      	ittt	le
 80167ca:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 80167ce:	445e      	addle	r6, fp
 80167d0:	b236      	sxthle	r6, r6
 80167d2:	f7fd f80a 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 80167d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80167da:	2800      	cmp	r0, #0
 80167dc:	f47f af1a 	bne.w	8016614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 80167e0:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80167e4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80167e8:	1ab6      	subs	r6, r6, r2
 80167ea:	2e14      	cmp	r6, #20
 80167ec:	bfa8      	it	ge
 80167ee:	2614      	movge	r6, #20
 80167f0:	4828      	ldr	r0, [pc, #160]	@ (8016894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 80167f2:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80167f6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80167fa:	6800      	ldr	r0, [r0, #0]
 80167fc:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016800:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016804:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016808:	f8d0 c000 	ldr.w	ip, [r0]
 801680c:	b2b6      	uxth	r6, r6
 801680e:	fa1f fb8b 	uxth.w	fp, fp
 8016812:	455e      	cmp	r6, fp
 8016814:	bf94      	ite	ls
 8016816:	9600      	strls	r6, [sp, #0]
 8016818:	f8cd b000 	strhi.w	fp, [sp]
 801681c:	b292      	uxth	r2, r2
 801681e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8016822:	b29b      	uxth	r3, r3
 8016824:	b289      	uxth	r1, r1
 8016826:	47b0      	blx	r6
 8016828:	6823      	ldr	r3, [r4, #0]
 801682a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801682e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016830:	a907      	add	r1, sp, #28
 8016832:	4620      	mov	r0, r4
 8016834:	4798      	blx	r3
 8016836:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801683a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801683e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8016842:	1a5b      	subs	r3, r3, r1
 8016844:	440a      	add	r2, r1
 8016846:	b21b      	sxth	r3, r3
 8016848:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801684c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8016850:	2b00      	cmp	r3, #0
 8016852:	f47f aeda 	bne.w	801660a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016856:	fa1f f189 	uxth.w	r1, r9
 801685a:	4650      	mov	r0, sl
 801685c:	f7ff f9e6 	bl	8015c2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016860:	e6d3      	b.n	801660a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8016862:	882e      	ldrh	r6, [r5, #0]
 8016864:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8016868:	42b3      	cmp	r3, r6
 801686a:	f67f ae98 	bls.w	801659e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801686e:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8016872:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016876:	ab07      	add	r3, sp, #28
 8016878:	6851      	ldr	r1, [r2, #4]
 801687a:	c303      	stmia	r3!, {r0, r1}
 801687c:	a807      	add	r0, sp, #28
 801687e:	f7fc ffb4 	bl	80137ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8016882:	b920      	cbnz	r0, 801688e <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 8016884:	6823      	ldr	r3, [r4, #0]
 8016886:	a907      	add	r1, sp, #28
 8016888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801688a:	4620      	mov	r0, r4
 801688c:	4798      	blx	r3
 801688e:	3601      	adds	r6, #1
 8016890:	b2b6      	uxth	r6, r6
 8016892:	e7e7      	b.n	8016864 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 8016894:	2008745c 	.word	0x2008745c

08016898 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016898:	2200      	movs	r2, #0
 801689a:	4b03      	ldr	r3, [pc, #12]	@ (80168a8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801689c:	801a      	strh	r2, [r3, #0]
 801689e:	805a      	strh	r2, [r3, #2]
 80168a0:	809a      	strh	r2, [r3, #4]
 80168a2:	80da      	strh	r2, [r3, #6]
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	200874a0 	.word	0x200874a0

080168ac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80168ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b0:	4606      	mov	r6, r0
 80168b2:	b09d      	sub	sp, #116	@ 0x74
 80168b4:	a803      	add	r0, sp, #12
 80168b6:	4614      	mov	r4, r2
 80168b8:	468a      	mov	sl, r1
 80168ba:	461d      	mov	r5, r3
 80168bc:	f000 fd72 	bl	80173a4 <_ZN8touchgfx12TextProviderC1Ev>
 80168c0:	6833      	ldr	r3, [r6, #0]
 80168c2:	4630      	mov	r0, r6
 80168c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80168c6:	4798      	blx	r3
 80168c8:	6833      	ldr	r3, [r6, #0]
 80168ca:	4607      	mov	r7, r0
 80168cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80168ce:	4630      	mov	r0, r6
 80168d0:	4798      	blx	r3
 80168d2:	462a      	mov	r2, r5
 80168d4:	2500      	movs	r5, #0
 80168d6:	9000      	str	r0, [sp, #0]
 80168d8:	4621      	mov	r1, r4
 80168da:	463b      	mov	r3, r7
 80168dc:	a803      	add	r0, sp, #12
 80168de:	f000 fdb4 	bl	801744a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80168e2:	462c      	mov	r4, r5
 80168e4:	46a9      	mov	r9, r5
 80168e6:	46a8      	mov	r8, r5
 80168e8:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80168ec:	2300      	movs	r3, #0
 80168ee:	9302      	str	r3, [sp, #8]
 80168f0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80168f4:	429c      	cmp	r4, r3
 80168f6:	d002      	beq.n	80168fe <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80168f8:	455c      	cmp	r4, fp
 80168fa:	bf18      	it	ne
 80168fc:	4625      	movne	r5, r4
 80168fe:	ab02      	add	r3, sp, #8
 8016900:	4632      	mov	r2, r6
 8016902:	4651      	mov	r1, sl
 8016904:	a803      	add	r0, sp, #12
 8016906:	f001 f88f 	bl	8017a28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801690a:	4604      	mov	r4, r0
 801690c:	b108      	cbz	r0, 8016912 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801690e:	280a      	cmp	r0, #10
 8016910:	d10a      	bne.n	8016928 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8016912:	45c1      	cmp	r9, r8
 8016914:	bf38      	it	cc
 8016916:	46c1      	movcc	r9, r8
 8016918:	f04f 0800 	mov.w	r8, #0
 801691c:	2c00      	cmp	r4, #0
 801691e:	d1e5      	bne.n	80168ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016920:	4648      	mov	r0, r9
 8016922:	b01d      	add	sp, #116	@ 0x74
 8016924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016928:	9a02      	ldr	r2, [sp, #8]
 801692a:	2a00      	cmp	r2, #0
 801692c:	d0de      	beq.n	80168ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801692e:	7b57      	ldrb	r7, [r2, #13]
 8016930:	6833      	ldr	r3, [r6, #0]
 8016932:	007f      	lsls	r7, r7, #1
 8016934:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8016938:	7a97      	ldrb	r7, [r2, #10]
 801693a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801693c:	4307      	orrs	r7, r0
 801693e:	4629      	mov	r1, r5
 8016940:	4630      	mov	r0, r6
 8016942:	8894      	ldrh	r4, [r2, #4]
 8016944:	4798      	blx	r3
 8016946:	4438      	add	r0, r7
 8016948:	4480      	add	r8, r0
 801694a:	fa1f f888 	uxth.w	r8, r8
 801694e:	e7e5      	b.n	801691c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016950 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016950:	b508      	push	{r3, lr}
 8016952:	6803      	ldr	r3, [r0, #0]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	4798      	blx	r3
 8016958:	b128      	cbz	r0, 8016966 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801695a:	7b43      	ldrb	r3, [r0, #13]
 801695c:	7a80      	ldrb	r0, [r0, #10]
 801695e:	005b      	lsls	r3, r3, #1
 8016960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016964:	4318      	orrs	r0, r3
 8016966:	bd08      	pop	{r3, pc}

08016968 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016968:	b40e      	push	{r1, r2, r3}
 801696a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801696c:	4605      	mov	r5, r0
 801696e:	b09e      	sub	sp, #120	@ 0x78
 8016970:	ab23      	add	r3, sp, #140	@ 0x8c
 8016972:	f853 4b04 	ldr.w	r4, [r3], #4
 8016976:	a805      	add	r0, sp, #20
 8016978:	9303      	str	r3, [sp, #12]
 801697a:	f000 fd13 	bl	80173a4 <_ZN8touchgfx12TextProviderC1Ev>
 801697e:	682b      	ldr	r3, [r5, #0]
 8016980:	4628      	mov	r0, r5
 8016982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016984:	4798      	blx	r3
 8016986:	682b      	ldr	r3, [r5, #0]
 8016988:	4606      	mov	r6, r0
 801698a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801698c:	4628      	mov	r0, r5
 801698e:	4798      	blx	r3
 8016990:	4621      	mov	r1, r4
 8016992:	2400      	movs	r4, #0
 8016994:	4633      	mov	r3, r6
 8016996:	9000      	str	r0, [sp, #0]
 8016998:	9a03      	ldr	r2, [sp, #12]
 801699a:	ae1e      	add	r6, sp, #120	@ 0x78
 801699c:	a805      	add	r0, sp, #20
 801699e:	f000 fd54 	bl	801744a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80169a2:	f846 4d68 	str.w	r4, [r6, #-104]!
 80169a6:	4633      	mov	r3, r6
 80169a8:	462a      	mov	r2, r5
 80169aa:	4621      	mov	r1, r4
 80169ac:	a805      	add	r0, sp, #20
 80169ae:	f001 f83b 	bl	8017a28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80169b2:	b1f0      	cbz	r0, 80169f2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 80169b4:	280a      	cmp	r0, #10
 80169b6:	d018      	beq.n	80169ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80169b8:	9f04      	ldr	r7, [sp, #16]
 80169ba:	b1b7      	cbz	r7, 80169ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80169bc:	7b78      	ldrb	r0, [r7, #13]
 80169be:	7a3b      	ldrb	r3, [r7, #8]
 80169c0:	00c1      	lsls	r1, r0, #3
 80169c2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80169c6:	4319      	orrs	r1, r3
 80169c8:	0643      	lsls	r3, r0, #25
 80169ca:	bf44      	itt	mi
 80169cc:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80169d0:	b219      	sxthmi	r1, r3
 80169d2:	0100      	lsls	r0, r0, #4
 80169d4:	79fb      	ldrb	r3, [r7, #7]
 80169d6:	88ea      	ldrh	r2, [r5, #6]
 80169d8:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80169dc:	4303      	orrs	r3, r0
 80169de:	4413      	add	r3, r2
 80169e0:	1a5b      	subs	r3, r3, r1
 80169e2:	b21b      	sxth	r3, r3
 80169e4:	429c      	cmp	r4, r3
 80169e6:	bfb8      	it	lt
 80169e8:	461c      	movlt	r4, r3
 80169ea:	4633      	mov	r3, r6
 80169ec:	462a      	mov	r2, r5
 80169ee:	2100      	movs	r1, #0
 80169f0:	e7dc      	b.n	80169ac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80169f2:	b2a0      	uxth	r0, r4
 80169f4:	b01e      	add	sp, #120	@ 0x78
 80169f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80169fa:	b003      	add	sp, #12
 80169fc:	4770      	bx	lr

080169fe <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80169fe:	7a43      	ldrb	r3, [r0, #9]
 8016a00:	8880      	ldrh	r0, [r0, #4]
 8016a02:	4418      	add	r0, r3
 8016a04:	b280      	uxth	r0, r0
 8016a06:	4770      	bx	lr

08016a08 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8016a08:	6803      	ldr	r3, [r0, #0]
 8016a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a0c:	4718      	bx	r3

08016a0e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016a0e:	b40e      	push	{r1, r2, r3}
 8016a10:	b570      	push	{r4, r5, r6, lr}
 8016a12:	4604      	mov	r4, r0
 8016a14:	b09d      	sub	sp, #116	@ 0x74
 8016a16:	ab21      	add	r3, sp, #132	@ 0x84
 8016a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8016a1c:	a803      	add	r0, sp, #12
 8016a1e:	9302      	str	r3, [sp, #8]
 8016a20:	f000 fcc0 	bl	80173a4 <_ZN8touchgfx12TextProviderC1Ev>
 8016a24:	6823      	ldr	r3, [r4, #0]
 8016a26:	4620      	mov	r0, r4
 8016a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a2a:	4798      	blx	r3
 8016a2c:	6823      	ldr	r3, [r4, #0]
 8016a2e:	4606      	mov	r6, r0
 8016a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016a32:	4620      	mov	r0, r4
 8016a34:	4798      	blx	r3
 8016a36:	4633      	mov	r3, r6
 8016a38:	9000      	str	r0, [sp, #0]
 8016a3a:	9a02      	ldr	r2, [sp, #8]
 8016a3c:	4629      	mov	r1, r5
 8016a3e:	a803      	add	r0, sp, #12
 8016a40:	f000 fd03 	bl	801744a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016a44:	a803      	add	r0, sp, #12
 8016a46:	f001 f871 	bl	8017b2c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016a4a:	2401      	movs	r4, #1
 8016a4c:	b2a3      	uxth	r3, r4
 8016a4e:	b140      	cbz	r0, 8016a62 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8016a50:	280a      	cmp	r0, #10
 8016a52:	bf08      	it	eq
 8016a54:	3301      	addeq	r3, #1
 8016a56:	a803      	add	r0, sp, #12
 8016a58:	bf08      	it	eq
 8016a5a:	b21c      	sxtheq	r4, r3
 8016a5c:	f001 f866 	bl	8017b2c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016a60:	e7f4      	b.n	8016a4c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016a62:	4618      	mov	r0, r3
 8016a64:	b01d      	add	sp, #116	@ 0x74
 8016a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a6a:	b003      	add	sp, #12
 8016a6c:	4770      	bx	lr

08016a6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016a6e:	b40e      	push	{r1, r2, r3}
 8016a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a72:	4604      	mov	r4, r0
 8016a74:	b09e      	sub	sp, #120	@ 0x78
 8016a76:	ab23      	add	r3, sp, #140	@ 0x8c
 8016a78:	f853 5b04 	ldr.w	r5, [r3], #4
 8016a7c:	a805      	add	r0, sp, #20
 8016a7e:	9303      	str	r3, [sp, #12]
 8016a80:	f000 fc90 	bl	80173a4 <_ZN8touchgfx12TextProviderC1Ev>
 8016a84:	6823      	ldr	r3, [r4, #0]
 8016a86:	4620      	mov	r0, r4
 8016a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a8a:	4798      	blx	r3
 8016a8c:	6823      	ldr	r3, [r4, #0]
 8016a8e:	4606      	mov	r6, r0
 8016a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016a92:	4620      	mov	r0, r4
 8016a94:	4798      	blx	r3
 8016a96:	4633      	mov	r3, r6
 8016a98:	4629      	mov	r1, r5
 8016a9a:	9000      	str	r0, [sp, #0]
 8016a9c:	9a03      	ldr	r2, [sp, #12]
 8016a9e:	a805      	add	r0, sp, #20
 8016aa0:	f000 fcd3 	bl	801744a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016aa4:	2100      	movs	r1, #0
 8016aa6:	ad1e      	add	r5, sp, #120	@ 0x78
 8016aa8:	f845 1d68 	str.w	r1, [r5, #-104]!
 8016aac:	462b      	mov	r3, r5
 8016aae:	4622      	mov	r2, r4
 8016ab0:	a805      	add	r0, sp, #20
 8016ab2:	f000 ffb9 	bl	8017a28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016ab6:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8016aba:	b1d8      	cbz	r0, 8016af4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8016abc:	280a      	cmp	r0, #10
 8016abe:	d012      	beq.n	8016ae6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016ac0:	9804      	ldr	r0, [sp, #16]
 8016ac2:	b180      	cbz	r0, 8016ae6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016ac4:	7b47      	ldrb	r7, [r0, #13]
 8016ac6:	88e2      	ldrh	r2, [r4, #6]
 8016ac8:	00fb      	lsls	r3, r7, #3
 8016aca:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016ace:	7a03      	ldrb	r3, [r0, #8]
 8016ad0:	430b      	orrs	r3, r1
 8016ad2:	0679      	lsls	r1, r7, #25
 8016ad4:	bf44      	itt	mi
 8016ad6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016ada:	b21b      	sxthmi	r3, r3
 8016adc:	1ad3      	subs	r3, r2, r3
 8016ade:	b21b      	sxth	r3, r3
 8016ae0:	429e      	cmp	r6, r3
 8016ae2:	bfa8      	it	ge
 8016ae4:	461e      	movge	r6, r3
 8016ae6:	462b      	mov	r3, r5
 8016ae8:	4622      	mov	r2, r4
 8016aea:	2100      	movs	r1, #0
 8016aec:	a805      	add	r0, sp, #20
 8016aee:	f000 ff9b 	bl	8017a28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016af2:	e7e2      	b.n	8016aba <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8016af4:	4630      	mov	r0, r6
 8016af6:	b01e      	add	sp, #120	@ 0x78
 8016af8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016afc:	b003      	add	sp, #12
 8016afe:	4770      	bx	lr

08016b00 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016b00:	b513      	push	{r0, r1, r4, lr}
 8016b02:	2400      	movs	r4, #0
 8016b04:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016b08:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016b0c:	6803      	ldr	r3, [r0, #0]
 8016b0e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016b12:	9400      	str	r4, [sp, #0]
 8016b14:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016b18:	691b      	ldr	r3, [r3, #16]
 8016b1a:	4669      	mov	r1, sp
 8016b1c:	4798      	blx	r3
 8016b1e:	b002      	add	sp, #8
 8016b20:	bd10      	pop	{r4, pc}

08016b22 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8016b22:	b538      	push	{r3, r4, r5, lr}
 8016b24:	460c      	mov	r4, r1
 8016b26:	4605      	mov	r5, r0
 8016b28:	680b      	ldr	r3, [r1, #0]
 8016b2a:	68db      	ldr	r3, [r3, #12]
 8016b2c:	4798      	blx	r3
 8016b2e:	6823      	ldr	r3, [r4, #0]
 8016b30:	4620      	mov	r0, r4
 8016b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b34:	4629      	mov	r1, r5
 8016b36:	4798      	blx	r3
 8016b38:	4628      	mov	r0, r5
 8016b3a:	bd38      	pop	{r3, r4, r5, pc}

08016b3c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016b3c:	b410      	push	{r4}
 8016b3e:	880a      	ldrh	r2, [r1, #0]
 8016b40:	8884      	ldrh	r4, [r0, #4]
 8016b42:	4422      	add	r2, r4
 8016b44:	800a      	strh	r2, [r1, #0]
 8016b46:	88c4      	ldrh	r4, [r0, #6]
 8016b48:	884a      	ldrh	r2, [r1, #2]
 8016b4a:	4422      	add	r2, r4
 8016b4c:	804a      	strh	r2, [r1, #2]
 8016b4e:	6940      	ldr	r0, [r0, #20]
 8016b50:	b120      	cbz	r0, 8016b5c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8016b52:	6803      	ldr	r3, [r0, #0]
 8016b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b5a:	4718      	bx	r3
 8016b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b60:	4770      	bx	lr

08016b62 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8016b62:	b570      	push	{r4, r5, r6, lr}
 8016b64:	460c      	mov	r4, r1
 8016b66:	8882      	ldrh	r2, [r0, #4]
 8016b68:	880b      	ldrh	r3, [r1, #0]
 8016b6a:	4605      	mov	r5, r0
 8016b6c:	4413      	add	r3, r2
 8016b6e:	800b      	strh	r3, [r1, #0]
 8016b70:	88c2      	ldrh	r2, [r0, #6]
 8016b72:	884b      	ldrh	r3, [r1, #2]
 8016b74:	4413      	add	r3, r2
 8016b76:	804b      	strh	r3, [r1, #2]
 8016b78:	1d01      	adds	r1, r0, #4
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	f7fc fdf2 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 8016b80:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	dd0b      	ble.n	8016ba0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016b88:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	dd07      	ble.n	8016ba0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016b90:	6968      	ldr	r0, [r5, #20]
 8016b92:	b128      	cbz	r0, 8016ba0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016b94:	6803      	ldr	r3, [r0, #0]
 8016b96:	4621      	mov	r1, r4
 8016b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016b9e:	4718      	bx	r3
 8016ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

08016ba4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016ba4:	b570      	push	{r4, r5, r6, lr}
 8016ba6:	460c      	mov	r4, r1
 8016ba8:	8882      	ldrh	r2, [r0, #4]
 8016baa:	880b      	ldrh	r3, [r1, #0]
 8016bac:	4605      	mov	r5, r0
 8016bae:	4413      	add	r3, r2
 8016bb0:	800b      	strh	r3, [r1, #0]
 8016bb2:	88c2      	ldrh	r2, [r0, #6]
 8016bb4:	884b      	ldrh	r3, [r1, #2]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	804b      	strh	r3, [r1, #2]
 8016bba:	1d01      	adds	r1, r0, #4
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	f7fc fdd1 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 8016bc2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	dd19      	ble.n	8016bfe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016bca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	dd15      	ble.n	8016bfe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016bd2:	6968      	ldr	r0, [r5, #20]
 8016bd4:	b128      	cbz	r0, 8016be2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016bd6:	6803      	ldr	r3, [r0, #0]
 8016bd8:	4621      	mov	r1, r4
 8016bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bde:	691b      	ldr	r3, [r3, #16]
 8016be0:	4718      	bx	r3
 8016be2:	4b07      	ldr	r3, [pc, #28]	@ (8016c00 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	3304      	adds	r3, #4
 8016be8:	429d      	cmp	r5, r3
 8016bea:	d108      	bne.n	8016bfe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016bec:	f7fe ff12 	bl	8015a14 <_ZN8touchgfx11Application11getInstanceEv>
 8016bf0:	6803      	ldr	r3, [r0, #0]
 8016bf2:	6821      	ldr	r1, [r4, #0]
 8016bf4:	6862      	ldr	r2, [r4, #4]
 8016bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016bfc:	4718      	bx	r3
 8016bfe:	bd70      	pop	{r4, r5, r6, pc}
 8016c00:	20087498 	.word	0x20087498

08016c04 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	4604      	mov	r4, r0
 8016c08:	4616      	mov	r6, r2
 8016c0a:	460d      	mov	r5, r1
 8016c0c:	b901      	cbnz	r1, 8016c10 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8016c0e:	b192      	cbz	r2, 8016c36 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8016c10:	6823      	ldr	r3, [r4, #0]
 8016c12:	4620      	mov	r0, r4
 8016c14:	699b      	ldr	r3, [r3, #24]
 8016c16:	4798      	blx	r3
 8016c18:	88e2      	ldrh	r2, [r4, #6]
 8016c1a:	88a1      	ldrh	r1, [r4, #4]
 8016c1c:	4432      	add	r2, r6
 8016c1e:	4429      	add	r1, r5
 8016c20:	4620      	mov	r0, r4
 8016c22:	b212      	sxth	r2, r2
 8016c24:	b209      	sxth	r1, r1
 8016c26:	f7f9 fc38 	bl	801049a <_ZN8touchgfx8Drawable5setXYEss>
 8016c2a:	6823      	ldr	r3, [r4, #0]
 8016c2c:	4620      	mov	r0, r4
 8016c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c32:	699b      	ldr	r3, [r3, #24]
 8016c34:	4718      	bx	r3
 8016c36:	bd70      	pop	{r4, r5, r6, pc}

08016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016c38:	b510      	push	{r4, lr}
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	4608      	mov	r0, r1
 8016c40:	8023      	strh	r3, [r4, #0]
 8016c42:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016c46:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016c4a:	8063      	strh	r3, [r4, #2]
 8016c4c:	6803      	ldr	r3, [r0, #0]
 8016c4e:	80a1      	strh	r1, [r4, #4]
 8016c50:	80e2      	strh	r2, [r4, #6]
 8016c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c54:	4621      	mov	r1, r4
 8016c56:	4798      	blx	r3
 8016c58:	4620      	mov	r0, r4
 8016c5a:	bd10      	pop	{r4, pc}

08016c5c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8016c5c:	b530      	push	{r4, r5, lr}
 8016c5e:	8083      	strh	r3, [r0, #4]
 8016c60:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016c64:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016c68:	80c3      	strh	r3, [r0, #6]
 8016c6a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8016c6e:	6141      	str	r1, [r0, #20]
 8016c70:	7203      	strb	r3, [r0, #8]
 8016c72:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016c76:	8302      	strh	r2, [r0, #24]
 8016c78:	7243      	strb	r3, [r0, #9]
 8016c7a:	7a83      	ldrb	r3, [r0, #10]
 8016c7c:	f365 0306 	bfi	r3, r5, #0, #7
 8016c80:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8016c84:	f365 13c7 	bfi	r3, r5, #7, #1
 8016c88:	7283      	strb	r3, [r0, #10]
 8016c8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016c8e:	72c3      	strb	r3, [r0, #11]
 8016c90:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016c94:	7303      	strb	r3, [r0, #12]
 8016c96:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8016c9a:	81c3      	strh	r3, [r0, #14]
 8016c9c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8016ca0:	8203      	strh	r3, [r0, #16]
 8016ca2:	4b01      	ldr	r3, [pc, #4]	@ (8016ca8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8016ca4:	6003      	str	r3, [r0, #0]
 8016ca6:	bd30      	pop	{r4, r5, pc}
 8016ca8:	0802d81c 	.word	0x0802d81c

08016cac <_ZNK8touchgfx9ConstFont4findEt>:
 8016cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cae:	6944      	ldr	r4, [r0, #20]
 8016cb0:	b3bc      	cbz	r4, 8016d22 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016cb2:	88a3      	ldrh	r3, [r4, #4]
 8016cb4:	8b02      	ldrh	r2, [r0, #24]
 8016cb6:	1acb      	subs	r3, r1, r3
 8016cb8:	f102 32ff 	add.w	r2, r2, #4294967295
 8016cbc:	d431      	bmi.n	8016d22 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016cbe:	4293      	cmp	r3, r2
 8016cc0:	dd0c      	ble.n	8016cdc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016cc2:	230e      	movs	r3, #14
 8016cc4:	fb03 4302 	mla	r3, r3, r2, r4
 8016cc8:	889b      	ldrh	r3, [r3, #4]
 8016cca:	1a5b      	subs	r3, r3, r1
 8016ccc:	1ad3      	subs	r3, r2, r3
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	db27      	blt.n	8016d22 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	bfbc      	itt	lt
 8016cd6:	2302      	movlt	r3, #2
 8016cd8:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016cdc:	2500      	movs	r5, #0
 8016cde:	260e      	movs	r6, #14
 8016ce0:	4295      	cmp	r5, r2
 8016ce2:	dc1e      	bgt.n	8016d22 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016ce4:	fb06 4003 	mla	r0, r6, r3, r4
 8016ce8:	8887      	ldrh	r7, [r0, #4]
 8016cea:	42b9      	cmp	r1, r7
 8016cec:	d01a      	beq.n	8016d24 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8016cee:	d20d      	bcs.n	8016d0c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016cf0:	1e5a      	subs	r2, r3, #1
 8016cf2:	4295      	cmp	r5, r2
 8016cf4:	dc15      	bgt.n	8016d22 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016cf6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8016cfa:	1a5b      	subs	r3, r3, r1
 8016cfc:	1ad3      	subs	r3, r2, r3
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	db0f      	blt.n	8016d22 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d02:	429d      	cmp	r5, r3
 8016d04:	ddec      	ble.n	8016ce0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016d06:	1953      	adds	r3, r2, r5
 8016d08:	105b      	asrs	r3, r3, #1
 8016d0a:	e7e9      	b.n	8016ce0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016d0c:	1c5d      	adds	r5, r3, #1
 8016d0e:	42aa      	cmp	r2, r5
 8016d10:	db07      	blt.n	8016d22 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d12:	8a43      	ldrh	r3, [r0, #18]
 8016d14:	1acb      	subs	r3, r1, r3
 8016d16:	442b      	add	r3, r5
 8016d18:	429d      	cmp	r5, r3
 8016d1a:	dc02      	bgt.n	8016d22 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	dadf      	bge.n	8016ce0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016d20:	e7f1      	b.n	8016d06 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8016d22:	2000      	movs	r0, #0
 8016d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d26 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d28:	4604      	mov	r4, r0
 8016d2a:	4617      	mov	r7, r2
 8016d2c:	461e      	mov	r6, r3
 8016d2e:	b911      	cbnz	r1, 8016d36 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016d30:	2500      	movs	r5, #0
 8016d32:	4628      	mov	r0, r5
 8016d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d36:	290a      	cmp	r1, #10
 8016d38:	d0fa      	beq.n	8016d30 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016d3a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8016d3e:	4291      	cmp	r1, r2
 8016d40:	d0f6      	beq.n	8016d30 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016d42:	f242 020b 	movw	r2, #8203	@ 0x200b
 8016d46:	4291      	cmp	r1, r2
 8016d48:	d0f2      	beq.n	8016d30 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016d4a:	f7ff ffaf 	bl	8016cac <_ZNK8touchgfx9ConstFont4findEt>
 8016d4e:	4605      	mov	r5, r0
 8016d50:	b950      	cbnz	r0, 8016d68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016d52:	6823      	ldr	r3, [r4, #0]
 8016d54:	4620      	mov	r0, r4
 8016d56:	691b      	ldr	r3, [r3, #16]
 8016d58:	4798      	blx	r3
 8016d5a:	4601      	mov	r1, r0
 8016d5c:	4620      	mov	r0, r4
 8016d5e:	f7ff ffa5 	bl	8016cac <_ZNK8touchgfx9ConstFont4findEt>
 8016d62:	4605      	mov	r5, r0
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d0e3      	beq.n	8016d30 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016d68:	6823      	ldr	r3, [r4, #0]
 8016d6a:	4629      	mov	r1, r5
 8016d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016d6e:	4620      	mov	r0, r4
 8016d70:	4798      	blx	r3
 8016d72:	6038      	str	r0, [r7, #0]
 8016d74:	6823      	ldr	r3, [r4, #0]
 8016d76:	4620      	mov	r0, r4
 8016d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016d7a:	4798      	blx	r3
 8016d7c:	7030      	strb	r0, [r6, #0]
 8016d7e:	e7d8      	b.n	8016d32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016d80 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016d80:	2000      	movs	r0, #0
 8016d82:	4770      	bx	lr

08016d84 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016d84:	2001      	movs	r0, #1
 8016d86:	4770      	bx	lr

08016d88 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016d88:	2002      	movs	r0, #2
 8016d8a:	4770      	bx	lr

08016d8c <_ZN8touchgfx12GestureEventD1Ev>:
 8016d8c:	4770      	bx	lr

08016d8e <_ZN8touchgfx9DragEventD1Ev>:
 8016d8e:	4770      	bx	lr

08016d90 <_ZN8touchgfx10ClickEventD1Ev>:
 8016d90:	4770      	bx	lr

08016d92 <_ZN8touchgfx10ClickEventD0Ev>:
 8016d92:	b510      	push	{r4, lr}
 8016d94:	4604      	mov	r4, r0
 8016d96:	210c      	movs	r1, #12
 8016d98:	f013 fffb 	bl	802ad92 <_ZdlPvj>
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	bd10      	pop	{r4, pc}

08016da0 <_ZN8touchgfx9DragEventD0Ev>:
 8016da0:	b510      	push	{r4, lr}
 8016da2:	4604      	mov	r4, r0
 8016da4:	2110      	movs	r1, #16
 8016da6:	f013 fff4 	bl	802ad92 <_ZdlPvj>
 8016daa:	4620      	mov	r0, r4
 8016dac:	bd10      	pop	{r4, pc}

08016dae <_ZN8touchgfx12GestureEventD0Ev>:
 8016dae:	b510      	push	{r4, lr}
 8016db0:	4604      	mov	r4, r0
 8016db2:	210c      	movs	r1, #12
 8016db4:	f013 ffed 	bl	802ad92 <_ZdlPvj>
 8016db8:	4620      	mov	r0, r4
 8016dba:	bd10      	pop	{r4, pc}

08016dbc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016dbc:	b530      	push	{r4, r5, lr}
 8016dbe:	460d      	mov	r5, r1
 8016dc0:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8016dc2:	b087      	sub	sp, #28
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	b301      	cbz	r1, 8016e0a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016dc8:	a801      	add	r0, sp, #4
 8016dca:	f7ff ff35 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016dce:	892a      	ldrh	r2, [r5, #8]
 8016dd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016dd4:	7928      	ldrb	r0, [r5, #4]
 8016dd6:	1ad2      	subs	r2, r2, r3
 8016dd8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8016dda:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016dde:	441a      	add	r2, r3
 8016de0:	896b      	ldrh	r3, [r5, #10]
 8016de2:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016de6:	f88d 0010 	strb.w	r0, [sp, #16]
 8016dea:	1b5b      	subs	r3, r3, r5
 8016dec:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8016dee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016df0:	442b      	add	r3, r5
 8016df2:	4d07      	ldr	r5, [pc, #28]	@ (8016e10 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016df4:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016df8:	9503      	str	r5, [sp, #12]
 8016dfa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016dfe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e02:	6803      	ldr	r3, [r0, #0]
 8016e04:	a903      	add	r1, sp, #12
 8016e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016e08:	4798      	blx	r3
 8016e0a:	b007      	add	sp, #28
 8016e0c:	bd30      	pop	{r4, r5, pc}
 8016e0e:	bf00      	nop
 8016e10:	0802d8ac 	.word	0x0802d8ac

08016e14 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e18:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016e1a:	b08a      	sub	sp, #40	@ 0x28
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	460d      	mov	r5, r1
 8016e20:	b113      	cbz	r3, 8016e28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8016e22:	790b      	ldrb	r3, [r1, #4]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d044      	beq.n	8016eb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016e28:	f104 0804 	add.w	r8, r4, #4
 8016e2c:	4641      	mov	r1, r8
 8016e2e:	a803      	add	r0, sp, #12
 8016e30:	f7ff ff02 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016e34:	792b      	ldrb	r3, [r5, #4]
 8016e36:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8016e3a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8016e3e:	b983      	cbnz	r3, 8016e62 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8016e40:	892a      	ldrh	r2, [r5, #8]
 8016e42:	88e9      	ldrh	r1, [r5, #6]
 8016e44:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8016e48:	1b92      	subs	r2, r2, r6
 8016e4a:	1bc9      	subs	r1, r1, r7
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8016e52:	9300      	str	r3, [sp, #0]
 8016e54:	b212      	sxth	r2, r2
 8016e56:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8016e5a:	b209      	sxth	r1, r1
 8016e5c:	4640      	mov	r0, r8
 8016e5e:	f7fc fba1 	bl	80135a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016e62:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016e64:	b329      	cbz	r1, 8016eb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016e66:	a805      	add	r0, sp, #20
 8016e68:	f7ff fee6 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016e6c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016e70:	792b      	ldrb	r3, [r5, #4]
 8016e72:	1abf      	subs	r7, r7, r2
 8016e74:	88ea      	ldrh	r2, [r5, #6]
 8016e76:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016e78:	4417      	add	r7, r2
 8016e7a:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8016e7c:	f88d 3020 	strb.w	r3, [sp, #32]
 8016e80:	4417      	add	r7, r2
 8016e82:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016e86:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8016e8a:	1ab6      	subs	r6, r6, r2
 8016e8c:	892a      	ldrh	r2, [r5, #8]
 8016e8e:	a907      	add	r1, sp, #28
 8016e90:	4416      	add	r6, r2
 8016e92:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016e94:	4416      	add	r6, r2
 8016e96:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8016e9a:	2600      	movs	r6, #0
 8016e9c:	4a06      	ldr	r2, [pc, #24]	@ (8016eb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016e9e:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8016ea2:	9207      	str	r2, [sp, #28]
 8016ea4:	6803      	ldr	r3, [r0, #0]
 8016ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ea8:	4798      	blx	r3
 8016eaa:	792b      	ldrb	r3, [r5, #4]
 8016eac:	b10b      	cbz	r3, 8016eb2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016eae:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8016eb2:	b00a      	add	sp, #40	@ 0x28
 8016eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb8:	0802d884 	.word	0x0802d884

08016ebc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec0:	460c      	mov	r4, r1
 8016ec2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8016ec4:	b088      	sub	sp, #32
 8016ec6:	4605      	mov	r5, r0
 8016ec8:	2900      	cmp	r1, #0
 8016eca:	d06d      	beq.n	8016fa8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016ecc:	4668      	mov	r0, sp
 8016ece:	f7ff feb3 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016ed2:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8016ed4:	88e3      	ldrh	r3, [r4, #6]
 8016ed6:	f9bd 8000 	ldrsh.w	r8, [sp]
 8016eda:	440b      	add	r3, r1
 8016edc:	b21b      	sxth	r3, r3
 8016ede:	4543      	cmp	r3, r8
 8016ee0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016ee4:	db31      	blt.n	8016f4a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016ee6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8016eea:	44c4      	add	ip, r8
 8016eec:	fa0f fc8c 	sxth.w	ip, ip
 8016ef0:	4563      	cmp	r3, ip
 8016ef2:	da2a      	bge.n	8016f4a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016ef4:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8016ef6:	8926      	ldrh	r6, [r4, #8]
 8016ef8:	4416      	add	r6, r2
 8016efa:	b236      	sxth	r6, r6
 8016efc:	42be      	cmp	r6, r7
 8016efe:	db24      	blt.n	8016f4a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f00:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016f04:	4438      	add	r0, r7
 8016f06:	b200      	sxth	r0, r0
 8016f08:	4286      	cmp	r6, r0
 8016f0a:	da1e      	bge.n	8016f4a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f0c:	8963      	ldrh	r3, [r4, #10]
 8016f0e:	4419      	add	r1, r3
 8016f10:	b209      	sxth	r1, r1
 8016f12:	4541      	cmp	r1, r8
 8016f14:	db08      	blt.n	8016f28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f16:	4561      	cmp	r1, ip
 8016f18:	da06      	bge.n	8016f28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f1a:	89a3      	ldrh	r3, [r4, #12]
 8016f1c:	441a      	add	r2, r3
 8016f1e:	b212      	sxth	r2, r2
 8016f20:	42ba      	cmp	r2, r7
 8016f22:	db01      	blt.n	8016f28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016f24:	4282      	cmp	r2, r0
 8016f26:	db10      	blt.n	8016f4a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016f28:	4b21      	ldr	r3, [pc, #132]	@ (8016fb0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8016f2a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016f2c:	9304      	str	r3, [sp, #16]
 8016f2e:	2302      	movs	r3, #2
 8016f30:	f88d 3014 	strb.w	r3, [sp, #20]
 8016f34:	2300      	movs	r3, #0
 8016f36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016f3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016f3e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016f42:	6803      	ldr	r3, [r0, #0]
 8016f44:	a904      	add	r1, sp, #16
 8016f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f48:	4798      	blx	r3
 8016f4a:	1d29      	adds	r1, r5, #4
 8016f4c:	a802      	add	r0, sp, #8
 8016f4e:	f7ff fe73 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016f56:	88e0      	ldrh	r0, [r4, #6]
 8016f58:	eba3 0808 	sub.w	r8, r3, r8
 8016f5c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016f60:	7921      	ldrb	r1, [r4, #4]
 8016f62:	1bdf      	subs	r7, r3, r7
 8016f64:	b2bb      	uxth	r3, r7
 8016f66:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8016f6a:	fa1f f888 	uxth.w	r8, r8
 8016f6e:	8922      	ldrh	r2, [r4, #8]
 8016f70:	8967      	ldrh	r7, [r4, #10]
 8016f72:	89a4      	ldrh	r4, [r4, #12]
 8016f74:	4440      	add	r0, r8
 8016f76:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8016f78:	4460      	add	r0, ip
 8016f7a:	441a      	add	r2, r3
 8016f7c:	44b8      	add	r8, r7
 8016f7e:	4423      	add	r3, r4
 8016f80:	4c0c      	ldr	r4, [pc, #48]	@ (8016fb4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016f82:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016f86:	4433      	add	r3, r6
 8016f88:	4432      	add	r2, r6
 8016f8a:	44e0      	add	r8, ip
 8016f8c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016f8e:	f88d 1014 	strb.w	r1, [sp, #20]
 8016f92:	9404      	str	r4, [sp, #16]
 8016f94:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016f98:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016f9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016fa0:	6803      	ldr	r3, [r0, #0]
 8016fa2:	a904      	add	r1, sp, #16
 8016fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016fa6:	4798      	blx	r3
 8016fa8:	b008      	add	sp, #32
 8016faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fae:	bf00      	nop
 8016fb0:	0802d884 	.word	0x0802d884
 8016fb4:	0802d898 	.word	0x0802d898

08016fb8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8016fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016fba:	4604      	mov	r4, r0
 8016fbc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016fc0:	3201      	adds	r2, #1
 8016fc2:	d112      	bne.n	8016fea <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016fc4:	2500      	movs	r5, #0
 8016fc6:	9500      	str	r5, [sp, #0]
 8016fc8:	466d      	mov	r5, sp
 8016fca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016fce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016fd2:	6803      	ldr	r3, [r0, #0]
 8016fd4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016fd8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016fdc:	4629      	mov	r1, r5
 8016fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fe0:	4798      	blx	r3
 8016fe2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016fe6:	e884 0003 	stmia.w	r4, {r0, r1}
 8016fea:	4620      	mov	r0, r4
 8016fec:	b003      	add	sp, #12
 8016fee:	bd30      	pop	{r4, r5, pc}

08016ff0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016ff0:	b513      	push	{r0, r1, r4, lr}
 8016ff2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016ff6:	4604      	mov	r4, r0
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	d109      	bne.n	8017010 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016ffc:	4601      	mov	r1, r0
 8016ffe:	4668      	mov	r0, sp
 8017000:	f7ff fe1a 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017004:	f8bd 3000 	ldrh.w	r3, [sp]
 8017008:	8423      	strh	r3, [r4, #32]
 801700a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801700e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8017010:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017014:	b002      	add	sp, #8
 8017016:	bd10      	pop	{r4, pc}

08017018 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017018:	b513      	push	{r0, r1, r4, lr}
 801701a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801701e:	4604      	mov	r4, r0
 8017020:	3301      	adds	r3, #1
 8017022:	d109      	bne.n	8017038 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017024:	4601      	mov	r1, r0
 8017026:	4668      	mov	r0, sp
 8017028:	f7ff fe06 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801702c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017030:	8423      	strh	r3, [r4, #32]
 8017032:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017036:	8463      	strh	r3, [r4, #34]	@ 0x22
 8017038:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801703c:	b002      	add	sp, #8
 801703e:	bd10      	pop	{r4, pc}

08017040 <_ZN8touchgfx6ScreenC1Ev>:
 8017040:	b570      	push	{r4, r5, r6, lr}
 8017042:	4605      	mov	r5, r0
 8017044:	4b16      	ldr	r3, [pc, #88]	@ (80170a0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8017046:	2101      	movs	r1, #1
 8017048:	f845 3b04 	str.w	r3, [r5], #4
 801704c:	2300      	movs	r3, #0
 801704e:	4604      	mov	r4, r0
 8017050:	8103      	strh	r3, [r0, #8]
 8017052:	8143      	strh	r3, [r0, #10]
 8017054:	8183      	strh	r3, [r0, #12]
 8017056:	81c3      	strh	r3, [r0, #14]
 8017058:	8203      	strh	r3, [r0, #16]
 801705a:	8243      	strh	r3, [r0, #18]
 801705c:	8283      	strh	r3, [r0, #20]
 801705e:	82c3      	strh	r3, [r0, #22]
 8017060:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017064:	6203      	str	r3, [r0, #32]
 8017066:	8483      	strh	r3, [r0, #36]	@ 0x24
 8017068:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801706a:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801706e:	4a0d      	ldr	r2, [pc, #52]	@ (80170a4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017070:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8017074:	6343      	str	r3, [r0, #52]	@ 0x34
 8017076:	4b0c      	ldr	r3, [pc, #48]	@ (80170a8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8017078:	6042      	str	r2, [r0, #4]
 801707a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801707e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8017080:	4a0a      	ldr	r2, [pc, #40]	@ (80170ac <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017082:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8017086:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801708a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801708e:	4628      	mov	r0, r5
 8017090:	4798      	blx	r3
 8017092:	6863      	ldr	r3, [r4, #4]
 8017094:	4628      	mov	r0, r5
 8017096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017098:	4631      	mov	r1, r6
 801709a:	4798      	blx	r3
 801709c:	4620      	mov	r0, r4
 801709e:	bd70      	pop	{r4, r5, r6, pc}
 80170a0:	0802d8c0 	.word	0x0802d8c0
 80170a4:	0802d3d4 	.word	0x0802d3d4
 80170a8:	20087452 	.word	0x20087452
 80170ac:	20087450 	.word	0x20087450

080170b0 <_ZN8touchgfx6Screen4drawEv>:
 80170b0:	b507      	push	{r0, r1, r2, lr}
 80170b2:	2100      	movs	r1, #0
 80170b4:	4b08      	ldr	r3, [pc, #32]	@ (80170d8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80170b6:	9100      	str	r1, [sp, #0]
 80170b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80170bc:	4b07      	ldr	r3, [pc, #28]	@ (80170dc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80170be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80170c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170c6:	4669      	mov	r1, sp
 80170c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80170cc:	6803      	ldr	r3, [r0, #0]
 80170ce:	689b      	ldr	r3, [r3, #8]
 80170d0:	4798      	blx	r3
 80170d2:	b003      	add	sp, #12
 80170d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80170d8:	20087450 	.word	0x20087450
 80170dc:	20087452 	.word	0x20087452

080170e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80170e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170e4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80170e8:	b089      	sub	sp, #36	@ 0x24
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	4680      	mov	r8, r0
 80170ee:	460c      	mov	r4, r1
 80170f0:	4615      	mov	r5, r2
 80170f2:	dd0e      	ble.n	8017112 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80170f4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	dd0a      	ble.n	8017112 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80170fc:	4628      	mov	r0, r5
 80170fe:	f7ff ff5b 	bl	8016fb8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017102:	4621      	mov	r1, r4
 8017104:	f7fe fba8 	bl	8015858 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017108:	69eb      	ldr	r3, [r5, #28]
 801710a:	b928      	cbnz	r0, 8017118 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801710c:	461d      	mov	r5, r3
 801710e:	2b00      	cmp	r3, #0
 8017110:	d1f4      	bne.n	80170fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017112:	b009      	add	sp, #36	@ 0x24
 8017114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017118:	ae04      	add	r6, sp, #16
 801711a:	2b00      	cmp	r3, #0
 801711c:	f000 80b5 	beq.w	801728a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017120:	682b      	ldr	r3, [r5, #0]
 8017122:	4629      	mov	r1, r5
 8017124:	68db      	ldr	r3, [r3, #12]
 8017126:	a802      	add	r0, sp, #8
 8017128:	4798      	blx	r3
 801712a:	4628      	mov	r0, r5
 801712c:	f7ff ff60 	bl	8016ff0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017130:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017134:	4407      	add	r7, r0
 8017136:	4628      	mov	r0, r5
 8017138:	f7ff ff6e 	bl	8017018 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801713c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017140:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017144:	4418      	add	r0, r3
 8017146:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801714a:	4621      	mov	r1, r4
 801714c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017150:	b23f      	sxth	r7, r7
 8017152:	4630      	mov	r0, r6
 8017154:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017158:	f8ad 3016 	strh.w	r3, [sp, #22]
 801715c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017160:	f7fc fb00 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 8017164:	4628      	mov	r0, r5
 8017166:	f7ff ff27 	bl	8016fb8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801716a:	4602      	mov	r2, r0
 801716c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017170:	ab06      	add	r3, sp, #24
 8017172:	e883 0003 	stmia.w	r3, {r0, r1}
 8017176:	4611      	mov	r1, r2
 8017178:	4618      	mov	r0, r3
 801717a:	f7fc faf3 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 801717e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017182:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017186:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801718a:	4299      	cmp	r1, r3
 801718c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017190:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017194:	d10b      	bne.n	80171ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017196:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801719a:	4552      	cmp	r2, sl
 801719c:	d107      	bne.n	80171ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801719e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80171a2:	455a      	cmp	r2, fp
 80171a4:	d103      	bne.n	80171ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80171a6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80171aa:	454a      	cmp	r2, r9
 80171ac:	d06d      	beq.n	801728a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80171ae:	f1bb 0f00 	cmp.w	fp, #0
 80171b2:	dd65      	ble.n	8017280 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80171b4:	f1b9 0f00 	cmp.w	r9, #0
 80171b8:	dd62      	ble.n	8017280 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80171ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80171be:	fa1f f08a 	uxth.w	r0, sl
 80171c2:	4552      	cmp	r2, sl
 80171c4:	9000      	str	r0, [sp, #0]
 80171c6:	da12      	bge.n	80171ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80171c8:	9301      	str	r3, [sp, #4]
 80171ca:	9b00      	ldr	r3, [sp, #0]
 80171cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80171d0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80171d4:	1a9a      	subs	r2, r3, r2
 80171d6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80171da:	f8ad 0014 	strh.w	r0, [sp, #20]
 80171de:	f8ad 2016 	strh.w	r2, [sp, #22]
 80171e2:	69ea      	ldr	r2, [r5, #28]
 80171e4:	4631      	mov	r1, r6
 80171e6:	4640      	mov	r0, r8
 80171e8:	f7ff ff7a 	bl	80170e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80171ec:	9b01      	ldr	r3, [sp, #4]
 80171ee:	f9b4 2000 	ldrsh.w	r2, [r4]
 80171f2:	b29f      	uxth	r7, r3
 80171f4:	429a      	cmp	r2, r3
 80171f6:	da0d      	bge.n	8017214 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80171f8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80171fc:	1aba      	subs	r2, r7, r2
 80171fe:	f8ad a012 	strh.w	sl, [sp, #18]
 8017202:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017206:	f8ad 9016 	strh.w	r9, [sp, #22]
 801720a:	69ea      	ldr	r2, [r5, #28]
 801720c:	4631      	mov	r1, r6
 801720e:	4640      	mov	r0, r8
 8017210:	f7ff ff66 	bl	80170e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017214:	8822      	ldrh	r2, [r4, #0]
 8017216:	88a3      	ldrh	r3, [r4, #4]
 8017218:	445f      	add	r7, fp
 801721a:	4413      	add	r3, r2
 801721c:	b29b      	uxth	r3, r3
 801721e:	b2bf      	uxth	r7, r7
 8017220:	b23a      	sxth	r2, r7
 8017222:	b219      	sxth	r1, r3
 8017224:	4291      	cmp	r1, r2
 8017226:	dd0d      	ble.n	8017244 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017228:	1bdb      	subs	r3, r3, r7
 801722a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801722e:	f8ad a012 	strh.w	sl, [sp, #18]
 8017232:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017236:	f8ad 9016 	strh.w	r9, [sp, #22]
 801723a:	69ea      	ldr	r2, [r5, #28]
 801723c:	4631      	mov	r1, r6
 801723e:	4640      	mov	r0, r8
 8017240:	f7ff ff4e 	bl	80170e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017244:	88e2      	ldrh	r2, [r4, #6]
 8017246:	8863      	ldrh	r3, [r4, #2]
 8017248:	4413      	add	r3, r2
 801724a:	9a00      	ldr	r2, [sp, #0]
 801724c:	b29b      	uxth	r3, r3
 801724e:	444a      	add	r2, r9
 8017250:	fa1f f982 	uxth.w	r9, r2
 8017254:	fa0f f289 	sxth.w	r2, r9
 8017258:	b219      	sxth	r1, r3
 801725a:	428a      	cmp	r2, r1
 801725c:	da15      	bge.n	801728a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801725e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017262:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017266:	eba3 0309 	sub.w	r3, r3, r9
 801726a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801726e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017272:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017276:	f8ad 3016 	strh.w	r3, [sp, #22]
 801727a:	69ea      	ldr	r2, [r5, #28]
 801727c:	4631      	mov	r1, r6
 801727e:	e001      	b.n	8017284 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017280:	4621      	mov	r1, r4
 8017282:	69ea      	ldr	r2, [r5, #28]
 8017284:	4640      	mov	r0, r8
 8017286:	f7ff ff2b 	bl	80170e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801728a:	4628      	mov	r0, r5
 801728c:	f7ff fe94 	bl	8016fb8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017290:	4633      	mov	r3, r6
 8017292:	4602      	mov	r2, r0
 8017294:	6861      	ldr	r1, [r4, #4]
 8017296:	6820      	ldr	r0, [r4, #0]
 8017298:	c303      	stmia	r3!, {r0, r1}
 801729a:	4611      	mov	r1, r2
 801729c:	4630      	mov	r0, r6
 801729e:	f7fc fa61 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 80172a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	f77f af33 	ble.w	8017112 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80172ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	f77f af2e 	ble.w	8017112 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80172b6:	4628      	mov	r0, r5
 80172b8:	f7ff fe9a 	bl	8016ff0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80172bc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80172c0:	1a18      	subs	r0, r3, r0
 80172c2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80172c6:	4628      	mov	r0, r5
 80172c8:	f7ff fea6 	bl	8017018 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80172cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80172d0:	4631      	mov	r1, r6
 80172d2:	1a18      	subs	r0, r3, r0
 80172d4:	f8ad 0012 	strh.w	r0, [sp, #18]
 80172d8:	682b      	ldr	r3, [r5, #0]
 80172da:	4628      	mov	r0, r5
 80172dc:	689b      	ldr	r3, [r3, #8]
 80172de:	4798      	blx	r3
 80172e0:	e717      	b.n	8017112 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080172e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80172e2:	b570      	push	{r4, r5, r6, lr}
 80172e4:	2300      	movs	r3, #0
 80172e6:	460c      	mov	r4, r1
 80172e8:	b086      	sub	sp, #24
 80172ea:	1d06      	adds	r6, r0, #4
 80172ec:	4631      	mov	r1, r6
 80172ee:	4605      	mov	r5, r0
 80172f0:	a802      	add	r0, sp, #8
 80172f2:	9301      	str	r3, [sp, #4]
 80172f4:	f7ff fca0 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80172f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80172fc:	8822      	ldrh	r2, [r4, #0]
 80172fe:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017302:	1ad2      	subs	r2, r2, r3
 8017304:	8863      	ldrh	r3, [r4, #2]
 8017306:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801730a:	1a5b      	subs	r3, r3, r1
 801730c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017310:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017314:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017318:	f8ad 1016 	strh.w	r1, [sp, #22]
 801731c:	aa01      	add	r2, sp, #4
 801731e:	a904      	add	r1, sp, #16
 8017320:	4630      	mov	r0, r6
 8017322:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017326:	f7fc faf5 	bl	8013914 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801732a:	9a01      	ldr	r2, [sp, #4]
 801732c:	b11a      	cbz	r2, 8017336 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801732e:	4621      	mov	r1, r4
 8017330:	4628      	mov	r0, r5
 8017332:	f7ff fed5 	bl	80170e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017336:	b006      	add	sp, #24
 8017338:	bd70      	pop	{r4, r5, r6, pc}

0801733a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801733a:	b530      	push	{r4, r5, lr}
 801733c:	4602      	mov	r2, r0
 801733e:	b085      	sub	sp, #20
 8017340:	460d      	mov	r5, r1
 8017342:	466b      	mov	r3, sp
 8017344:	4604      	mov	r4, r0
 8017346:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801734a:	6851      	ldr	r1, [r2, #4]
 801734c:	c303      	stmia	r3!, {r0, r1}
 801734e:	4629      	mov	r1, r5
 8017350:	4668      	mov	r0, sp
 8017352:	f7fc fa07 	bl	8013764 <_ZN8touchgfx4RectaNERKS0_>
 8017356:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801735a:	b12b      	cbz	r3, 8017368 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801735c:	4669      	mov	r1, sp
 801735e:	4620      	mov	r0, r4
 8017360:	f7ff ffbf 	bl	80172e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017364:	b005      	add	sp, #20
 8017366:	bd30      	pop	{r4, r5, pc}
 8017368:	3404      	adds	r4, #4
 801736a:	4621      	mov	r1, r4
 801736c:	a802      	add	r0, sp, #8
 801736e:	f7ff fc63 	bl	8016c38 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017372:	f8bd 3000 	ldrh.w	r3, [sp]
 8017376:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801737a:	4669      	mov	r1, sp
 801737c:	1a9b      	subs	r3, r3, r2
 801737e:	f8ad 3000 	strh.w	r3, [sp]
 8017382:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017386:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801738a:	4620      	mov	r0, r4
 801738c:	1a9b      	subs	r3, r3, r2
 801738e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017392:	f7fc fa86 	bl	80138a2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017396:	e7e5      	b.n	8017364 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017398 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017398:	460b      	mov	r3, r1
 801739a:	680a      	ldr	r2, [r1, #0]
 801739c:	1d01      	adds	r1, r0, #4
 801739e:	6992      	ldr	r2, [r2, #24]
 80173a0:	4618      	mov	r0, r3
 80173a2:	4710      	bx	r2

080173a4 <_ZN8touchgfx12TextProviderC1Ev>:
 80173a4:	b538      	push	{r3, r4, r5, lr}
 80173a6:	2500      	movs	r5, #0
 80173a8:	2302      	movs	r3, #2
 80173aa:	4604      	mov	r4, r0
 80173ac:	e9c0 5500 	strd	r5, r5, [r0]
 80173b0:	7403      	strb	r3, [r0, #16]
 80173b2:	6145      	str	r5, [r0, #20]
 80173b4:	7605      	strb	r5, [r0, #24]
 80173b6:	83c5      	strh	r5, [r0, #30]
 80173b8:	8405      	strh	r5, [r0, #32]
 80173ba:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80173bc:	8705      	strh	r5, [r0, #56]	@ 0x38
 80173be:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80173c0:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80173c4:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80173c8:	220e      	movs	r2, #14
 80173ca:	4629      	mov	r1, r5
 80173cc:	304c      	adds	r0, #76	@ 0x4c
 80173ce:	f013 ff14 	bl	802b1fa <memset>
 80173d2:	2301      	movs	r3, #1
 80173d4:	4620      	mov	r0, r4
 80173d6:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80173da:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80173de:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 80173e2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 80173e6:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 80173ea:	f7f9 fdc7 	bl	8010f7c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80173ee:	4620      	mov	r0, r4
 80173f0:	bd38      	pop	{r3, r4, r5, pc}

080173f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80173f2:	b530      	push	{r4, r5, lr}
 80173f4:	2500      	movs	r5, #0
 80173f6:	2401      	movs	r4, #1
 80173f8:	6843      	ldr	r3, [r0, #4]
 80173fa:	b913      	cbnz	r3, 8017402 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80173fc:	6803      	ldr	r3, [r0, #0]
 80173fe:	b313      	cbz	r3, 8017446 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017400:	6043      	str	r3, [r0, #4]
 8017402:	7e03      	ldrb	r3, [r0, #24]
 8017404:	b143      	cbz	r3, 8017418 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017406:	6943      	ldr	r3, [r0, #20]
 8017408:	b12b      	cbz	r3, 8017416 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801740a:	881a      	ldrh	r2, [r3, #0]
 801740c:	b11a      	cbz	r2, 8017416 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801740e:	1c9a      	adds	r2, r3, #2
 8017410:	6142      	str	r2, [r0, #20]
 8017412:	8818      	ldrh	r0, [r3, #0]
 8017414:	bd30      	pop	{r4, r5, pc}
 8017416:	7605      	strb	r5, [r0, #24]
 8017418:	6843      	ldr	r3, [r0, #4]
 801741a:	8819      	ldrh	r1, [r3, #0]
 801741c:	b199      	cbz	r1, 8017446 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801741e:	1c9a      	adds	r2, r3, #2
 8017420:	2902      	cmp	r1, #2
 8017422:	6042      	str	r2, [r0, #4]
 8017424:	d1f5      	bne.n	8017412 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017426:	7c03      	ldrb	r3, [r0, #16]
 8017428:	2b01      	cmp	r3, #1
 801742a:	d8e5      	bhi.n	80173f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801742c:	1c5a      	adds	r2, r3, #1
 801742e:	7402      	strb	r2, [r0, #16]
 8017430:	3302      	adds	r3, #2
 8017432:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017436:	6143      	str	r3, [r0, #20]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d0dd      	beq.n	80173f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801743c:	881b      	ldrh	r3, [r3, #0]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d0da      	beq.n	80173f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017442:	7604      	strb	r4, [r0, #24]
 8017444:	e7d8      	b.n	80173f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017446:	2000      	movs	r0, #0
 8017448:	e7e4      	b.n	8017414 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801744a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801744a:	6001      	str	r1, [r0, #0]
 801744c:	2100      	movs	r1, #0
 801744e:	b430      	push	{r4, r5}
 8017450:	6041      	str	r1, [r0, #4]
 8017452:	6815      	ldr	r5, [r2, #0]
 8017454:	6085      	str	r5, [r0, #8]
 8017456:	6852      	ldr	r2, [r2, #4]
 8017458:	6443      	str	r3, [r0, #68]	@ 0x44
 801745a:	9b02      	ldr	r3, [sp, #8]
 801745c:	60c2      	str	r2, [r0, #12]
 801745e:	7401      	strb	r1, [r0, #16]
 8017460:	6141      	str	r1, [r0, #20]
 8017462:	7601      	strb	r1, [r0, #24]
 8017464:	8701      	strh	r1, [r0, #56]	@ 0x38
 8017466:	8401      	strh	r1, [r0, #32]
 8017468:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801746c:	6483      	str	r3, [r0, #72]	@ 0x48
 801746e:	bc30      	pop	{r4, r5}
 8017470:	f7f9 bd84 	b.w	8010f7c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017474 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017476:	4605      	mov	r5, r0
 8017478:	4608      	mov	r0, r1
 801747a:	b1e9      	cbz	r1, 80174b8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801747c:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8017480:	460b      	mov	r3, r1
 8017482:	4622      	mov	r2, r4
 8017484:	f101 0708 	add.w	r7, r1, #8
 8017488:	4626      	mov	r6, r4
 801748a:	6818      	ldr	r0, [r3, #0]
 801748c:	6859      	ldr	r1, [r3, #4]
 801748e:	3308      	adds	r3, #8
 8017490:	c603      	stmia	r6!, {r0, r1}
 8017492:	42bb      	cmp	r3, r7
 8017494:	4634      	mov	r4, r6
 8017496:	d1f7      	bne.n	8017488 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017498:	6818      	ldr	r0, [r3, #0]
 801749a:	6030      	str	r0, [r6, #0]
 801749c:	4610      	mov	r0, r2
 801749e:	889b      	ldrh	r3, [r3, #4]
 80174a0:	80b3      	strh	r3, [r6, #4]
 80174a2:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80174a6:	015b      	lsls	r3, r3, #5
 80174a8:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80174ac:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80174b0:	430b      	orrs	r3, r1
 80174b2:	425b      	negs	r3, r3
 80174b4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80174b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080174ba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80174ba:	b538      	push	{r3, r4, r5, lr}
 80174bc:	460c      	mov	r4, r1
 80174be:	6811      	ldr	r1, [r2, #0]
 80174c0:	4610      	mov	r0, r2
 80174c2:	68cd      	ldr	r5, [r1, #12]
 80174c4:	4619      	mov	r1, r3
 80174c6:	47a8      	blx	r5
 80174c8:	2800      	cmp	r0, #0
 80174ca:	bf08      	it	eq
 80174cc:	4620      	moveq	r0, r4
 80174ce:	bd38      	pop	{r3, r4, r5, pc}

080174d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80174d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174d2:	4604      	mov	r4, r0
 80174d4:	4615      	mov	r5, r2
 80174d6:	4608      	mov	r0, r1
 80174d8:	b93a      	cbnz	r2, 80174ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80174da:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 80174de:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 80174e2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 80174e6:	4628      	mov	r0, r5
 80174e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174ea:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 80174ee:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80174f2:	8893      	ldrh	r3, [r2, #4]
 80174f4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80174f8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80174fc:	79ee      	ldrb	r6, [r5, #7]
 80174fe:	4316      	orrs	r6, r2
 8017500:	19da      	adds	r2, r3, r7
 8017502:	b291      	uxth	r1, r2
 8017504:	291d      	cmp	r1, #29
 8017506:	b2b7      	uxth	r7, r6
 8017508:	d879      	bhi.n	80175fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801750a:	2201      	movs	r2, #1
 801750c:	408a      	lsls	r2, r1
 801750e:	4974      	ldr	r1, [pc, #464]	@ (80176e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 8017510:	10f6      	asrs	r6, r6, #3
 8017512:	420a      	tst	r2, r1
 8017514:	d12d      	bne.n	8017572 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 8017516:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801751a:	d070      	beq.n	80175fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801751c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8017520:	462b      	mov	r3, r5
 8017522:	f105 0e08 	add.w	lr, r5, #8
 8017526:	4615      	mov	r5, r2
 8017528:	4694      	mov	ip, r2
 801752a:	6818      	ldr	r0, [r3, #0]
 801752c:	6859      	ldr	r1, [r3, #4]
 801752e:	3308      	adds	r3, #8
 8017530:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017534:	4573      	cmp	r3, lr
 8017536:	4662      	mov	r2, ip
 8017538:	d1f6      	bne.n	8017528 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801753a:	6818      	ldr	r0, [r3, #0]
 801753c:	f8cc 0000 	str.w	r0, [ip]
 8017540:	889b      	ldrh	r3, [r3, #4]
 8017542:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017546:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801754a:	b2b3      	uxth	r3, r6
 801754c:	1aca      	subs	r2, r1, r3
 801754e:	b292      	uxth	r2, r2
 8017550:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8017554:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8017558:	10d2      	asrs	r2, r2, #3
 801755a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801755e:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8017562:	4302      	orrs	r2, r0
 8017564:	1bcf      	subs	r7, r1, r7
 8017566:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801756a:	1afb      	subs	r3, r7, r3
 801756c:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8017570:	e7b9      	b.n	80174e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8017572:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017574:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017578:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801757a:	f640 6333 	movw	r3, #3635	@ 0xe33
 801757e:	4299      	cmp	r1, r3
 8017580:	d110      	bne.n	80175a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 8017582:	6803      	ldr	r3, [r0, #0]
 8017584:	68db      	ldr	r3, [r3, #12]
 8017586:	4798      	blx	r3
 8017588:	7b41      	ldrb	r1, [r0, #13]
 801758a:	00cb      	lsls	r3, r1, #3
 801758c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017590:	7a03      	ldrb	r3, [r0, #8]
 8017592:	0648      	lsls	r0, r1, #25
 8017594:	ea43 0302 	orr.w	r3, r3, r2
 8017598:	bf44      	itt	mi
 801759a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801759e:	b21b      	sxthmi	r3, r3
 80175a0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80175a4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80175a8:	462a      	mov	r2, r5
 80175aa:	443b      	add	r3, r7
 80175ac:	4433      	add	r3, r6
 80175ae:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 80175b2:	f105 0c08 	add.w	ip, r5, #8
 80175b6:	4635      	mov	r5, r6
 80175b8:	b29b      	uxth	r3, r3
 80175ba:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80175be:	4637      	mov	r7, r6
 80175c0:	6810      	ldr	r0, [r2, #0]
 80175c2:	6851      	ldr	r1, [r2, #4]
 80175c4:	3208      	adds	r2, #8
 80175c6:	c703      	stmia	r7!, {r0, r1}
 80175c8:	4562      	cmp	r2, ip
 80175ca:	463e      	mov	r6, r7
 80175cc:	d1f7      	bne.n	80175be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 80175ce:	6810      	ldr	r0, [r2, #0]
 80175d0:	6038      	str	r0, [r7, #0]
 80175d2:	8892      	ldrh	r2, [r2, #4]
 80175d4:	80ba      	strh	r2, [r7, #4]
 80175d6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80175da:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80175de:	10db      	asrs	r3, r3, #3
 80175e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80175e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80175e8:	4313      	orrs	r3, r2
 80175ea:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80175ee:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 80175f2:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 80175f6:	1a9b      	subs	r3, r3, r2
 80175f8:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 80175fc:	e773      	b.n	80174e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80175fe:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8017602:	f023 0204 	bic.w	r2, r3, #4
 8017606:	428a      	cmp	r2, r1
 8017608:	d003      	beq.n	8017612 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801760a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801760e:	4293      	cmp	r3, r2
 8017610:	d120      	bne.n	8017654 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 8017612:	3b01      	subs	r3, #1
 8017614:	4602      	mov	r2, r0
 8017616:	b29b      	uxth	r3, r3
 8017618:	4629      	mov	r1, r5
 801761a:	4620      	mov	r0, r4
 801761c:	f7ff ff4d 	bl	80174ba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017620:	7b41      	ldrb	r1, [r0, #13]
 8017622:	00cb      	lsls	r3, r1, #3
 8017624:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017628:	7a03      	ldrb	r3, [r0, #8]
 801762a:	0649      	lsls	r1, r1, #25
 801762c:	ea43 0302 	orr.w	r3, r3, r2
 8017630:	bf44      	itt	mi
 8017632:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017636:	b21b      	sxthmi	r3, r3
 8017638:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801763c:	7b6b      	ldrb	r3, [r5, #13]
 801763e:	7aaa      	ldrb	r2, [r5, #10]
 8017640:	005b      	lsls	r3, r3, #1
 8017642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017646:	4313      	orrs	r3, r2
 8017648:	115a      	asrs	r2, r3, #5
 801764a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801764e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8017652:	e036      	b.n	80176c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 8017654:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8017658:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801765c:	7a2a      	ldrb	r2, [r5, #8]
 801765e:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 8017662:	ea42 0201 	orr.w	r2, r2, r1
 8017666:	f640 6109 	movw	r1, #3593	@ 0xe09
 801766a:	bf1c      	itt	ne
 801766c:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 8017670:	b212      	sxthne	r2, r2
 8017672:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8017676:	f023 0210 	bic.w	r2, r3, #16
 801767a:	428a      	cmp	r2, r1
 801767c:	d003      	beq.n	8017686 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 801767e:	f640 6213 	movw	r2, #3603	@ 0xe13
 8017682:	4293      	cmp	r3, r2
 8017684:	d12a      	bne.n	80176dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 8017686:	7b6e      	ldrb	r6, [r5, #13]
 8017688:	4629      	mov	r1, r5
 801768a:	0076      	lsls	r6, r6, #1
 801768c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8017690:	7aae      	ldrb	r6, [r5, #10]
 8017692:	4316      	orrs	r6, r2
 8017694:	f640 6213 	movw	r2, #3603	@ 0xe13
 8017698:	4293      	cmp	r3, r2
 801769a:	bf18      	it	ne
 801769c:	f103 33ff 	addne.w	r3, r3, #4294967295
 80176a0:	4602      	mov	r2, r0
 80176a2:	bf14      	ite	ne
 80176a4:	b29b      	uxthne	r3, r3
 80176a6:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 80176aa:	4620      	mov	r0, r4
 80176ac:	f7ff ff05 	bl	80174ba <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80176b0:	7b43      	ldrb	r3, [r0, #13]
 80176b2:	7a82      	ldrb	r2, [r0, #10]
 80176b4:	005b      	lsls	r3, r3, #1
 80176b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80176ba:	4313      	orrs	r3, r2
 80176bc:	1af6      	subs	r6, r6, r3
 80176be:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 80176c2:	7b69      	ldrb	r1, [r5, #13]
 80176c4:	00cb      	lsls	r3, r1, #3
 80176c6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80176ca:	7a2b      	ldrb	r3, [r5, #8]
 80176cc:	4313      	orrs	r3, r2
 80176ce:	064a      	lsls	r2, r1, #25
 80176d0:	bf44      	itt	mi
 80176d2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80176d6:	b21b      	sxthmi	r3, r3
 80176d8:	1bdb      	subs	r3, r3, r7
 80176da:	e747      	b.n	801756c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 80176dc:	2300      	movs	r3, #0
 80176de:	e7b6      	b.n	801764e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 80176e0:	3fc00079 	.word	0x3fc00079

080176e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80176e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176e8:	4604      	mov	r4, r0
 80176ea:	b942      	cbnz	r2, 80176fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80176ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80176f0:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80176f4:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80176f8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80176fc:	e047      	b.n	801778e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80176fe:	7b51      	ldrb	r1, [r2, #13]
 8017700:	8893      	ldrh	r3, [r2, #4]
 8017702:	010d      	lsls	r5, r1, #4
 8017704:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8017708:	79d5      	ldrb	r5, [r2, #7]
 801770a:	4305      	orrs	r5, r0
 801770c:	2d04      	cmp	r5, #4
 801770e:	bfcc      	ite	gt
 8017710:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8017714:	f04f 0e01 	movle.w	lr, #1
 8017718:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801771c:	f200 80ab 	bhi.w	8017876 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8017720:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8017724:	4283      	cmp	r3, r0
 8017726:	d216      	bcs.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017728:	f240 605b 	movw	r0, #1627	@ 0x65b
 801772c:	4283      	cmp	r3, r0
 801772e:	d859      	bhi.n	80177e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8017730:	f240 6057 	movw	r0, #1623	@ 0x657
 8017734:	4283      	cmp	r3, r0
 8017736:	d20e      	bcs.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017738:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801773c:	d24a      	bcs.n	80177d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801773e:	f240 604e 	movw	r0, #1614	@ 0x64e
 8017742:	4283      	cmp	r3, r0
 8017744:	d207      	bcs.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017746:	f240 601a 	movw	r0, #1562	@ 0x61a
 801774a:	4283      	cmp	r3, r0
 801774c:	d02a      	beq.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801774e:	d821      	bhi.n	8017794 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8017750:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8017754:	d35b      	bcc.n	801780e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017756:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801775a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801775e:	f040 80d0 	bne.w	8017902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8017762:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8017766:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801776a:	f040 80ca 	bne.w	8017902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801776e:	00cb      	lsls	r3, r1, #3
 8017770:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8017774:	7a13      	ldrb	r3, [r2, #8]
 8017776:	0649      	lsls	r1, r1, #25
 8017778:	ea43 0300 	orr.w	r3, r3, r0
 801777c:	bf44      	itt	mi
 801777e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017782:	b21b      	sxthmi	r3, r3
 8017784:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8017788:	1b5d      	subs	r5, r3, r5
 801778a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801778e:	4610      	mov	r0, r2
 8017790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017794:	f240 604b 	movw	r0, #1611	@ 0x64b
 8017798:	4283      	cmp	r3, r0
 801779a:	d338      	bcc.n	801780e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801779c:	f240 604c 	movw	r0, #1612	@ 0x64c
 80177a0:	4283      	cmp	r3, r0
 80177a2:	d9d8      	bls.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80177a4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 80177a8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 80177ac:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80177b0:	f040 80f2 	bne.w	8017998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 80177b4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80177b8:	f040 80ee 	bne.w	8017998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 80177bc:	00cb      	lsls	r3, r1, #3
 80177be:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80177c2:	7a13      	ldrb	r3, [r2, #8]
 80177c4:	064e      	lsls	r6, r1, #25
 80177c6:	ea43 0300 	orr.w	r3, r3, r0
 80177ca:	bf44      	itt	mi
 80177cc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80177d0:	b21b      	sxthmi	r3, r3
 80177d2:	e7d9      	b.n	8017788 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80177d4:	f240 6054 	movw	r0, #1620	@ 0x654
 80177d8:	4283      	cmp	r3, r0
 80177da:	d8e3      	bhi.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80177dc:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80177e0:	d9e0      	bls.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80177e2:	e7b8      	b.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80177e4:	f240 6074 	movw	r0, #1652	@ 0x674
 80177e8:	4283      	cmp	r3, r0
 80177ea:	d0b4      	beq.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80177ec:	d82d      	bhi.n	801784a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80177ee:	f240 605e 	movw	r0, #1630	@ 0x65e
 80177f2:	4283      	cmp	r3, r0
 80177f4:	d804      	bhi.n	8017800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80177f6:	f240 605d 	movw	r0, #1629	@ 0x65d
 80177fa:	4283      	cmp	r3, r0
 80177fc:	d3d2      	bcc.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80177fe:	e7aa      	b.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017800:	f240 605f 	movw	r0, #1631	@ 0x65f
 8017804:	4283      	cmp	r3, r0
 8017806:	d0cd      	beq.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017808:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801780c:	d0a3      	beq.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801780e:	00cb      	lsls	r3, r1, #3
 8017810:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8017814:	7a13      	ldrb	r3, [r2, #8]
 8017816:	0649      	lsls	r1, r1, #25
 8017818:	ea43 0300 	orr.w	r3, r3, r0
 801781c:	bf44      	itt	mi
 801781e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017822:	b21b      	sxthmi	r3, r3
 8017824:	1b5d      	subs	r5, r3, r5
 8017826:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801782a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801782e:	7b53      	ldrb	r3, [r2, #13]
 8017830:	015b      	lsls	r3, r3, #5
 8017832:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017836:	7993      	ldrb	r3, [r2, #6]
 8017838:	430b      	orrs	r3, r1
 801783a:	2105      	movs	r1, #5
 801783c:	005b      	lsls	r3, r3, #1
 801783e:	fb93 f3f1 	sdiv	r3, r3, r1
 8017842:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8017846:	440b      	add	r3, r1
 8017848:	e756      	b.n	80176f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801784a:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801784e:	4283      	cmp	r3, r0
 8017850:	d809      	bhi.n	8017866 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8017852:	f240 60df 	movw	r0, #1759	@ 0x6df
 8017856:	4283      	cmp	r3, r0
 8017858:	f4bf af7d 	bcs.w	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801785c:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8017860:	2b05      	cmp	r3, #5
 8017862:	d8d4      	bhi.n	801780e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8017864:	e777      	b.n	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017866:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801786a:	4283      	cmp	r3, r0
 801786c:	d09a      	beq.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801786e:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8017872:	4283      	cmp	r3, r0
 8017874:	e7ca      	b.n	801780c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8017876:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801787a:	d22b      	bcs.n	80178d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801787c:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8017880:	4283      	cmp	r3, r0
 8017882:	d28f      	bcs.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8017884:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8017888:	4283      	cmp	r3, r0
 801788a:	d816      	bhi.n	80178ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801788c:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8017890:	4283      	cmp	r3, r0
 8017892:	f4bf af60 	bcs.w	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8017896:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801789a:	4283      	cmp	r3, r0
 801789c:	d80a      	bhi.n	80178b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801789e:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 80178a2:	4283      	cmp	r3, r0
 80178a4:	f4bf af57 	bcs.w	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178a8:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 80178ac:	4283      	cmp	r3, r0
 80178ae:	f43f af79 	beq.w	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178b2:	e7ac      	b.n	801780e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80178b4:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 80178b8:	e7f8      	b.n	80178ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80178ba:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 80178be:	4283      	cmp	r3, r0
 80178c0:	d802      	bhi.n	80178c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80178c2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80178c6:	e798      	b.n	80177fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80178c8:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 80178cc:	4283      	cmp	r3, r0
 80178ce:	f47f af42 	bne.w	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178d2:	e767      	b.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178d4:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80178d8:	4283      	cmp	r3, r0
 80178da:	f43f af63 	beq.w	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178de:	d802      	bhi.n	80178e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80178e0:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80178e4:	e7f2      	b.n	80178cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80178e6:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80178ea:	4283      	cmp	r3, r0
 80178ec:	d805      	bhi.n	80178fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80178ee:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80178f2:	4283      	cmp	r3, r0
 80178f4:	f4ff af2f 	bcc.w	8017756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80178f8:	e754      	b.n	80177a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80178fa:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80178fe:	4283      	cmp	r3, r0
 8017900:	e7af      	b.n	8017862 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8017902:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8017906:	4617      	mov	r7, r2
 8017908:	4666      	mov	r6, ip
 801790a:	f102 0808 	add.w	r8, r2, #8
 801790e:	46e6      	mov	lr, ip
 8017910:	6838      	ldr	r0, [r7, #0]
 8017912:	6879      	ldr	r1, [r7, #4]
 8017914:	3708      	adds	r7, #8
 8017916:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801791a:	4547      	cmp	r7, r8
 801791c:	46f4      	mov	ip, lr
 801791e:	d1f6      	bne.n	801790e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8017920:	6838      	ldr	r0, [r7, #0]
 8017922:	f8ce 0000 	str.w	r0, [lr]
 8017926:	88b9      	ldrh	r1, [r7, #4]
 8017928:	f8ae 1004 	strh.w	r1, [lr, #4]
 801792c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8017930:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8017934:	d009      	beq.n	801794a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8017936:	7b51      	ldrb	r1, [r2, #13]
 8017938:	7992      	ldrb	r2, [r2, #6]
 801793a:	0149      	lsls	r1, r1, #5
 801793c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017940:	4311      	orrs	r1, r2
 8017942:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017946:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801794a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801794e:	b2ad      	uxth	r5, r5
 8017950:	d00d      	beq.n	801796e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8017952:	442b      	add	r3, r5
 8017954:	b29b      	uxth	r3, r3
 8017956:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801795a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801795e:	10db      	asrs	r3, r3, #3
 8017960:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8017964:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017968:	4313      	orrs	r3, r2
 801796a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801796e:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8017972:	00cb      	lsls	r3, r1, #3
 8017974:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017978:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801797c:	064f      	lsls	r7, r1, #25
 801797e:	ea43 0302 	orr.w	r3, r3, r2
 8017982:	bf44      	itt	mi
 8017984:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017988:	b21b      	sxthmi	r3, r3
 801798a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801798e:	1b5b      	subs	r3, r3, r5
 8017990:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8017994:	4632      	mov	r2, r6
 8017996:	e6fa      	b.n	801778e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017998:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801799c:	4617      	mov	r7, r2
 801799e:	4666      	mov	r6, ip
 80179a0:	f102 0908 	add.w	r9, r2, #8
 80179a4:	46e0      	mov	r8, ip
 80179a6:	6838      	ldr	r0, [r7, #0]
 80179a8:	6879      	ldr	r1, [r7, #4]
 80179aa:	3708      	adds	r7, #8
 80179ac:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80179b0:	454f      	cmp	r7, r9
 80179b2:	46c4      	mov	ip, r8
 80179b4:	d1f6      	bne.n	80179a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 80179b6:	6838      	ldr	r0, [r7, #0]
 80179b8:	f8c8 0000 	str.w	r0, [r8]
 80179bc:	88b9      	ldrh	r1, [r7, #4]
 80179be:	f8a8 1004 	strh.w	r1, [r8, #4]
 80179c2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80179c6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80179ca:	d009      	beq.n	80179e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 80179cc:	7b51      	ldrb	r1, [r2, #13]
 80179ce:	7992      	ldrb	r2, [r2, #6]
 80179d0:	0149      	lsls	r1, r1, #5
 80179d2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80179d6:	4311      	orrs	r1, r2
 80179d8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80179dc:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80179e0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80179e4:	d00e      	beq.n	8017a04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 80179e6:	eba3 030e 	sub.w	r3, r3, lr
 80179ea:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80179ee:	b29b      	uxth	r3, r3
 80179f0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80179f4:	10db      	asrs	r3, r3, #3
 80179f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80179fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80179fe:	4313      	orrs	r3, r2
 8017a00:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8017a04:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8017a08:	00cb      	lsls	r3, r1, #3
 8017a0a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017a0e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8017a12:	0648      	lsls	r0, r1, #25
 8017a14:	ea43 0302 	orr.w	r3, r3, r2
 8017a18:	bf44      	itt	mi
 8017a1a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017a1e:	b21b      	sxthmi	r3, r3
 8017a20:	1b5d      	subs	r5, r3, r5
 8017a22:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8017a26:	e7b5      	b.n	8017994 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08017a28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a2c:	461e      	mov	r6, r3
 8017a2e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8017a30:	4604      	mov	r4, r0
 8017a32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017a36:	4617      	mov	r7, r2
 8017a38:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8017a3c:	f7f9 f9f8 	bl	8010e30 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017a40:	4605      	mov	r5, r0
 8017a42:	b918      	cbnz	r0, 8017a4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017a44:	6030      	str	r0, [r6, #0]
 8017a46:	4628      	mov	r0, r5
 8017a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a4c:	683b      	ldr	r3, [r7, #0]
 8017a4e:	4601      	mov	r1, r0
 8017a50:	68db      	ldr	r3, [r3, #12]
 8017a52:	4638      	mov	r0, r7
 8017a54:	4798      	blx	r3
 8017a56:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8017a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017a5e:	4602      	mov	r2, r0
 8017a60:	6030      	str	r0, [r6, #0]
 8017a62:	d213      	bcs.n	8017a8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017a64:	4643      	mov	r3, r8
 8017a66:	4639      	mov	r1, r7
 8017a68:	4620      	mov	r0, r4
 8017a6a:	f7ff fe3b 	bl	80176e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8017a6e:	6030      	str	r0, [r6, #0]
 8017a70:	6833      	ldr	r3, [r6, #0]
 8017a72:	b143      	cbz	r3, 8017a86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017a74:	7b5a      	ldrb	r2, [r3, #13]
 8017a76:	7a9b      	ldrb	r3, [r3, #10]
 8017a78:	0052      	lsls	r2, r2, #1
 8017a7a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8017a7e:	4313      	orrs	r3, r2
 8017a80:	bf0c      	ite	eq
 8017a82:	2301      	moveq	r3, #1
 8017a84:	2300      	movne	r3, #0
 8017a86:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8017a8a:	e7dc      	b.n	8017a46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017a8c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8017a94:	d804      	bhi.n	8017aa0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8017a96:	4639      	mov	r1, r7
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f7ff fd19 	bl	80174d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017a9e:	e7e6      	b.n	8017a6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017aa0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d0e3      	beq.n	8017a70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017aa8:	f640 1302 	movw	r3, #2306	@ 0x902
 8017aac:	429d      	cmp	r5, r3
 8017aae:	d1df      	bne.n	8017a70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017ab0:	4601      	mov	r1, r0
 8017ab2:	4620      	mov	r0, r4
 8017ab4:	f7ff fcde 	bl	8017474 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8017ab8:	e7d9      	b.n	8017a6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08017aba <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017aba:	b510      	push	{r4, lr}
 8017abc:	4604      	mov	r4, r0
 8017abe:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8017ac2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017ac4:	b1f1      	cbz	r1, 8017b04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8017ac6:	2b0a      	cmp	r3, #10
 8017ac8:	d02f      	beq.n	8017b2a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8017aca:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017acc:	3901      	subs	r1, #1
 8017ace:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017ad2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8017ad4:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8017ad8:	1c51      	adds	r1, r2, #1
 8017ada:	b289      	uxth	r1, r1
 8017adc:	2901      	cmp	r1, #1
 8017ade:	bf84      	itt	hi
 8017ae0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017ae4:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8017ae6:	f103 0201 	add.w	r2, r3, #1
 8017aea:	8722      	strh	r2, [r4, #56]	@ 0x38
 8017aec:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017aee:	bf98      	it	ls
 8017af0:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8017af2:	4413      	add	r3, r2
 8017af4:	b29b      	uxth	r3, r3
 8017af6:	2b09      	cmp	r3, #9
 8017af8:	bf88      	it	hi
 8017afa:	3b0a      	subhi	r3, #10
 8017afc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017b00:	8458      	strh	r0, [r3, #34]	@ 0x22
 8017b02:	e7dc      	b.n	8017abe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017b04:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017b06:	2b0a      	cmp	r3, #10
 8017b08:	d00f      	beq.n	8017b2a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	f7ff fc71 	bl	80173f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017b10:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017b12:	1c5a      	adds	r2, r3, #1
 8017b14:	8722      	strh	r2, [r4, #56]	@ 0x38
 8017b16:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017b18:	4413      	add	r3, r2
 8017b1a:	b29b      	uxth	r3, r3
 8017b1c:	2b09      	cmp	r3, #9
 8017b1e:	bf88      	it	hi
 8017b20:	3b0a      	subhi	r3, #10
 8017b22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017b26:	8458      	strh	r0, [r3, #34]	@ 0x22
 8017b28:	e7ec      	b.n	8017b04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8017b2a:	bd10      	pop	{r4, pc}

08017b2c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8017b2c:	b538      	push	{r3, r4, r5, lr}
 8017b2e:	4604      	mov	r4, r0
 8017b30:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8017b32:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8017b36:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8017b38:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8017b3a:	3a01      	subs	r2, #1
 8017b3c:	8702      	strh	r2, [r0, #56]	@ 0x38
 8017b3e:	1c5a      	adds	r2, r3, #1
 8017b40:	b292      	uxth	r2, r2
 8017b42:	2a09      	cmp	r2, #9
 8017b44:	bf86      	itte	hi
 8017b46:	3b09      	subhi	r3, #9
 8017b48:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8017b4a:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8017b4c:	f7ff ffb5 	bl	8017aba <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8017b50:	8c23      	ldrh	r3, [r4, #32]
 8017b52:	2b01      	cmp	r3, #1
 8017b54:	bf9c      	itt	ls
 8017b56:	3301      	addls	r3, #1
 8017b58:	8423      	strhls	r3, [r4, #32]
 8017b5a:	8be3      	ldrh	r3, [r4, #30]
 8017b5c:	b90b      	cbnz	r3, 8017b62 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8017b5e:	2302      	movs	r3, #2
 8017b60:	83e3      	strh	r3, [r4, #30]
 8017b62:	8be3      	ldrh	r3, [r4, #30]
 8017b64:	4628      	mov	r0, r5
 8017b66:	3b01      	subs	r3, #1
 8017b68:	b29b      	uxth	r3, r3
 8017b6a:	83e3      	strh	r3, [r4, #30]
 8017b6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017b70:	8365      	strh	r5, [r4, #26]
 8017b72:	bd38      	pop	{r3, r4, r5, pc}

08017b74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8017b74:	428a      	cmp	r2, r1
 8017b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b7a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8017b7c:	d931      	bls.n	8017be2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8017b7e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8017b80:	1a54      	subs	r4, r2, r1
 8017b82:	19ee      	adds	r6, r5, r7
 8017b84:	3e01      	subs	r6, #1
 8017b86:	fa1f fe84 	uxth.w	lr, r4
 8017b8a:	b2b4      	uxth	r4, r6
 8017b8c:	eba4 090e 	sub.w	r9, r4, lr
 8017b90:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8017b94:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8017b98:	fa1f f989 	uxth.w	r9, r9
 8017b9c:	2c09      	cmp	r4, #9
 8017b9e:	4626      	mov	r6, r4
 8017ba0:	bf88      	it	hi
 8017ba2:	f1a4 060a 	subhi.w	r6, r4, #10
 8017ba6:	f1bc 0f00 	cmp.w	ip, #0
 8017baa:	bf08      	it	eq
 8017bac:	f04f 0c02 	moveq.w	ip, #2
 8017bb0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017bb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017bb8:	3c01      	subs	r4, #1
 8017bba:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8017bbe:	fa1f fc8c 	uxth.w	ip, ip
 8017bc2:	b2a4      	uxth	r4, r4
 8017bc4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017bc8:	454c      	cmp	r4, r9
 8017bca:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8017bce:	d1e5      	bne.n	8017b9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017bd0:	eba5 050e 	sub.w	r5, r5, lr
 8017bd4:	eb0e 0408 	add.w	r4, lr, r8
 8017bd8:	8705      	strh	r5, [r0, #56]	@ 0x38
 8017bda:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8017bde:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8017be2:	250a      	movs	r5, #10
 8017be4:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8017be6:	1a64      	subs	r4, r4, r1
 8017be8:	4439      	add	r1, r7
 8017bea:	b289      	uxth	r1, r1
 8017bec:	2909      	cmp	r1, #9
 8017bee:	bf88      	it	hi
 8017bf0:	390a      	subhi	r1, #10
 8017bf2:	8704      	strh	r4, [r0, #56]	@ 0x38
 8017bf4:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8017bf6:	b18a      	cbz	r2, 8017c1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8017bf8:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8017bfa:	3a01      	subs	r2, #1
 8017bfc:	3101      	adds	r1, #1
 8017bfe:	b292      	uxth	r2, r2
 8017c00:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017c04:	8701      	strh	r1, [r0, #56]	@ 0x38
 8017c06:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8017c08:	b901      	cbnz	r1, 8017c0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8017c0a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8017c0c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8017c0e:	3901      	subs	r1, #1
 8017c10:	b289      	uxth	r1, r1
 8017c12:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8017c14:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8017c18:	844c      	strh	r4, [r1, #34]	@ 0x22
 8017c1a:	e7ec      	b.n	8017bf6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8017c1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c20:	f7ff bf4b 	b.w	8017aba <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08017c24 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017c24:	b570      	push	{r4, r5, r6, lr}
 8017c26:	2500      	movs	r5, #0
 8017c28:	4295      	cmp	r5, r2
 8017c2a:	d011      	beq.n	8017c50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8017c2c:	8bc4      	ldrh	r4, [r0, #30]
 8017c2e:	f831 6b02 	ldrh.w	r6, [r1], #2
 8017c32:	4414      	add	r4, r2
 8017c34:	3c01      	subs	r4, #1
 8017c36:	1b64      	subs	r4, r4, r5
 8017c38:	b2a4      	uxth	r4, r4
 8017c3a:	2c01      	cmp	r4, #1
 8017c3c:	bf88      	it	hi
 8017c3e:	3c02      	subhi	r4, #2
 8017c40:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017c44:	8b64      	ldrh	r4, [r4, #26]
 8017c46:	42b4      	cmp	r4, r6
 8017c48:	d117      	bne.n	8017c7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017c4a:	3501      	adds	r5, #1
 8017c4c:	b2ad      	uxth	r5, r5
 8017c4e:	e7eb      	b.n	8017c28 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8017c50:	2400      	movs	r4, #0
 8017c52:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017c56:	4413      	add	r3, r2
 8017c58:	b2a2      	uxth	r2, r4
 8017c5a:	429a      	cmp	r2, r3
 8017c5c:	da0f      	bge.n	8017c7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8017c5e:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8017c60:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017c64:	4432      	add	r2, r6
 8017c66:	b292      	uxth	r2, r2
 8017c68:	2a09      	cmp	r2, #9
 8017c6a:	bf88      	it	hi
 8017c6c:	3a0a      	subhi	r2, #10
 8017c6e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017c72:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8017c74:	3401      	adds	r4, #1
 8017c76:	42aa      	cmp	r2, r5
 8017c78:	d0ee      	beq.n	8017c58 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	bd70      	pop	{r4, r5, r6, pc}
 8017c7e:	2001      	movs	r0, #1
 8017c80:	e7fc      	b.n	8017c7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017c82 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017c82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c86:	4605      	mov	r5, r0
 8017c88:	4616      	mov	r6, r2
 8017c8a:	1c8c      	adds	r4, r1, #2
 8017c8c:	8809      	ldrh	r1, [r1, #0]
 8017c8e:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017c92:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017c96:	42b3      	cmp	r3, r6
 8017c98:	d124      	bne.n	8017ce4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017c9a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017c9e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017ca2:	f001 070f 	and.w	r7, r1, #15
 8017ca6:	f8cd 8000 	str.w	r8, [sp]
 8017caa:	464b      	mov	r3, r9
 8017cac:	4652      	mov	r2, sl
 8017cae:	4621      	mov	r1, r4
 8017cb0:	4628      	mov	r0, r5
 8017cb2:	f7ff ffb7 	bl	8017c24 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017cb6:	4683      	mov	fp, r0
 8017cb8:	b168      	cbz	r0, 8017cd6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017cba:	eb0a 0109 	add.w	r1, sl, r9
 8017cbe:	4441      	add	r1, r8
 8017cc0:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017cc4:	463a      	mov	r2, r7
 8017cc6:	4649      	mov	r1, r9
 8017cc8:	4628      	mov	r0, r5
 8017cca:	f7ff ff53 	bl	8017b74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017cce:	4658      	mov	r0, fp
 8017cd0:	b003      	add	sp, #12
 8017cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd6:	eb07 010a 	add.w	r1, r7, sl
 8017cda:	4449      	add	r1, r9
 8017cdc:	4441      	add	r1, r8
 8017cde:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017ce2:	e7d2      	b.n	8017c8a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8017ce4:	f04f 0b00 	mov.w	fp, #0
 8017ce8:	e7f1      	b.n	8017cce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017cea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017cea:	b570      	push	{r4, r5, r6, lr}
 8017cec:	8810      	ldrh	r0, [r2, #0]
 8017cee:	4298      	cmp	r0, r3
 8017cf0:	d817      	bhi.n	8017d22 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017cf2:	1e48      	subs	r0, r1, #1
 8017cf4:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017cf8:	4298      	cmp	r0, r3
 8017cfa:	d312      	bcc.n	8017d22 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017cfc:	2400      	movs	r4, #0
 8017cfe:	428c      	cmp	r4, r1
 8017d00:	d20f      	bcs.n	8017d22 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017d02:	1860      	adds	r0, r4, r1
 8017d04:	1040      	asrs	r0, r0, #1
 8017d06:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017d0a:	0085      	lsls	r5, r0, #2
 8017d0c:	42b3      	cmp	r3, r6
 8017d0e:	d902      	bls.n	8017d16 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017d10:	3001      	adds	r0, #1
 8017d12:	b284      	uxth	r4, r0
 8017d14:	e7f3      	b.n	8017cfe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017d16:	d201      	bcs.n	8017d1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8017d18:	b281      	uxth	r1, r0
 8017d1a:	e7f0      	b.n	8017cfe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017d1c:	442a      	add	r2, r5
 8017d1e:	8850      	ldrh	r0, [r2, #2]
 8017d20:	bd70      	pop	{r4, r5, r6, pc}
 8017d22:	2000      	movs	r0, #0
 8017d24:	e7fc      	b.n	8017d20 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08017d26 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d2a:	4604      	mov	r4, r0
 8017d2c:	260b      	movs	r6, #11
 8017d2e:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8017d30:	886f      	ldrh	r7, [r5, #2]
 8017d32:	087f      	lsrs	r7, r7, #1
 8017d34:	3e01      	subs	r6, #1
 8017d36:	d013      	beq.n	8017d60 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017d38:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017d3a:	462a      	mov	r2, r5
 8017d3c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017d40:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8017d44:	4639      	mov	r1, r7
 8017d46:	4643      	mov	r3, r8
 8017d48:	4620      	mov	r0, r4
 8017d4a:	f7ff ffce 	bl	8017cea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8017d4e:	b138      	cbz	r0, 8017d60 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8017d50:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017d54:	4642      	mov	r2, r8
 8017d56:	4620      	mov	r0, r4
 8017d58:	f7ff ff93 	bl	8017c82 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8017d5c:	2800      	cmp	r0, #0
 8017d5e:	d1e9      	bne.n	8017d34 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8017d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017d64:	b570      	push	{r4, r5, r6, lr}
 8017d66:	694a      	ldr	r2, [r1, #20]
 8017d68:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8017d6a:	684b      	ldr	r3, [r1, #4]
 8017d6c:	1b54      	subs	r4, r2, r5
 8017d6e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8017d70:	f000 8107 	beq.w	8017f82 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8017d74:	1b9b      	subs	r3, r3, r6
 8017d76:	d003      	beq.n	8017d80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017d78:	2210      	movs	r2, #16
 8017d7a:	4363      	muls	r3, r4
 8017d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017d80:	680c      	ldr	r4, [r1, #0]
 8017d82:	698a      	ldr	r2, [r1, #24]
 8017d84:	1b65      	subs	r5, r4, r5
 8017d86:	f000 80fe 	beq.w	8017f86 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8017d8a:	1b92      	subs	r2, r2, r6
 8017d8c:	d003      	beq.n	8017d96 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017d8e:	2410      	movs	r4, #16
 8017d90:	436a      	muls	r2, r5
 8017d92:	fb92 f2f4 	sdiv	r2, r2, r4
 8017d96:	1a9b      	subs	r3, r3, r2
 8017d98:	ee07 3a90 	vmov	s15, r3
 8017d9c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8017fc4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8017da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017da4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017da8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017dac:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017db0:	460a      	mov	r2, r1
 8017db2:	eeb1 6a43 	vneg.f32	s12, s6
 8017db6:	4603      	mov	r3, r0
 8017db8:	f100 040c 	add.w	r4, r0, #12
 8017dbc:	edd2 7a02 	vldr	s15, [r2, #8]
 8017dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017dc4:	ece3 6a01 	vstmia	r3!, {s13}
 8017dc8:	edd2 7a03 	vldr	s15, [r2, #12]
 8017dcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017dd0:	edc3 7a02 	vstr	s15, [r3, #8]
 8017dd4:	edd2 7a04 	vldr	s15, [r2, #16]
 8017dd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017ddc:	429c      	cmp	r4, r3
 8017dde:	edc3 7a05 	vstr	s15, [r3, #20]
 8017de2:	f102 0214 	add.w	r2, r2, #20
 8017de6:	d1e9      	bne.n	8017dbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8017de8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017dea:	698b      	ldr	r3, [r1, #24]
 8017dec:	edd0 4a02 	vldr	s9, [r0, #8]
 8017df0:	1a9b      	subs	r3, r3, r2
 8017df2:	ee07 3a90 	vmov	s15, r3
 8017df6:	684b      	ldr	r3, [r1, #4]
 8017df8:	edd0 3a00 	vldr	s7, [r0]
 8017dfc:	1a9b      	subs	r3, r3, r2
 8017dfe:	edd0 6a01 	vldr	s13, [r0, #4]
 8017e02:	ee07 3a10 	vmov	s14, r3
 8017e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e0a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017e0e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017e12:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017e16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e1a:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8017e1e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017e22:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017e26:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017e2a:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8017e2e:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8017e30:	694a      	ldr	r2, [r1, #20]
 8017e32:	ed90 5a05 	vldr	s10, [r0, #20]
 8017e36:	1b13      	subs	r3, r2, r4
 8017e38:	ee07 3a10 	vmov	s14, r3
 8017e3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e40:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017e44:	680b      	ldr	r3, [r1, #0]
 8017e46:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017e4a:	1b1b      	subs	r3, r3, r4
 8017e4c:	ee07 3a10 	vmov	s14, r3
 8017e50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e54:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017e58:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017e5c:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017e60:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8017e64:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017e66:	698b      	ldr	r3, [r1, #24]
 8017e68:	ed90 2a03 	vldr	s4, [r0, #12]
 8017e6c:	1a9b      	subs	r3, r3, r2
 8017e6e:	ee06 3a90 	vmov	s13, r3
 8017e72:	684b      	ldr	r3, [r1, #4]
 8017e74:	edd0 5a04 	vldr	s11, [r0, #16]
 8017e78:	1a9b      	subs	r3, r3, r2
 8017e7a:	ee07 3a10 	vmov	s14, r3
 8017e7e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017e82:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8017e86:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017e8a:	ee32 5a45 	vsub.f32	s10, s4, s10
 8017e8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017e92:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017e96:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017e9a:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017e9e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017ea2:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8017ea6:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8017ea8:	694a      	ldr	r2, [r1, #20]
 8017eaa:	ed90 1a07 	vldr	s2, [r0, #28]
 8017eae:	1b13      	subs	r3, r2, r4
 8017eb0:	ee07 3a10 	vmov	s14, r3
 8017eb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017eb8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017ebc:	680b      	ldr	r3, [r1, #0]
 8017ebe:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8017ec2:	1b1b      	subs	r3, r3, r4
 8017ec4:	ee07 3a10 	vmov	s14, r3
 8017ec8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017ecc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017ed0:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017ed4:	ee25 5a06 	vmul.f32	s10, s10, s12
 8017ed8:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8017edc:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017ede:	698b      	ldr	r3, [r1, #24]
 8017ee0:	edd0 5a08 	vldr	s11, [r0, #32]
 8017ee4:	1a9b      	subs	r3, r3, r2
 8017ee6:	ee07 3a10 	vmov	s14, r3
 8017eea:	684b      	ldr	r3, [r1, #4]
 8017eec:	edd0 2a06 	vldr	s5, [r0, #24]
 8017ef0:	1a9b      	subs	r3, r3, r2
 8017ef2:	ee01 3a90 	vmov	s3, r3
 8017ef6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017efa:	ee31 1a65 	vsub.f32	s2, s2, s11
 8017efe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017f02:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8017f06:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017f0a:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8017f0e:	ee61 1a84 	vmul.f32	s3, s3, s8
 8017f12:	eea1 7a21 	vfma.f32	s14, s2, s3
 8017f16:	ee27 7a03 	vmul.f32	s14, s14, s6
 8017f1a:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8017f1e:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8017f20:	694a      	ldr	r2, [r1, #20]
 8017f22:	1b13      	subs	r3, r2, r4
 8017f24:	ee03 3a10 	vmov	s6, r3
 8017f28:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017f2c:	ee23 3a04 	vmul.f32	s6, s6, s8
 8017f30:	680b      	ldr	r3, [r1, #0]
 8017f32:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8017f36:	1b1b      	subs	r3, r3, r4
 8017f38:	ee03 3a10 	vmov	s6, r3
 8017f3c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8017f40:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017f44:	eee1 5a04 	vfma.f32	s11, s2, s8
 8017f48:	ee25 6a86 	vmul.f32	s12, s11, s12
 8017f4c:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8017f50:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8017f54:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8017f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f5c:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8017f60:	dd13      	ble.n	8017f8a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017f66:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017f6a:	eee3 7a87 	vfma.f32	s15, s7, s14
 8017f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f76:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8017f78:	dd15      	ble.n	8017fa6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017f7e:	6403      	str	r3, [r0, #64]	@ 0x40
 8017f80:	bd70      	pop	{r4, r5, r6, pc}
 8017f82:	4623      	mov	r3, r4
 8017f84:	e6fc      	b.n	8017d80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017f86:	462a      	mov	r2, r5
 8017f88:	e705      	b.n	8017d96 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017f8a:	d502      	bpl.n	8017f92 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8017f8c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017f90:	e7e9      	b.n	8017f66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8017f92:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017f96:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017f9a:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa2:	dade      	bge.n	8017f62 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8017fa4:	e7f2      	b.n	8017f8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8017fa6:	d502      	bpl.n	8017fae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8017fa8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017fac:	e7e7      	b.n	8017f7e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8017fae:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017fb2:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017fb6:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fbe:	dadc      	bge.n	8017f7a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8017fc0:	e7f2      	b.n	8017fa8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8017fc2:	bf00      	nop
 8017fc4:	3d800000 	.word	0x3d800000

08017fc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fcc:	2714      	movs	r7, #20
 8017fce:	435f      	muls	r7, r3
 8017fd0:	eb02 0c07 	add.w	ip, r2, r7
 8017fd4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017fd8:	f115 0e0f 	adds.w	lr, r5, #15
 8017fdc:	f100 80a2 	bmi.w	8018124 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017fe0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8017fe4:	2614      	movs	r6, #20
 8017fe6:	9c08      	ldr	r4, [sp, #32]
 8017fe8:	f8c0 e014 	str.w	lr, [r0, #20]
 8017fec:	4366      	muls	r6, r4
 8017fee:	eb02 0806 	add.w	r8, r2, r6
 8017ff2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017ff6:	f115 040f 	adds.w	r4, r5, #15
 8017ffa:	f100 809f 	bmi.w	801813c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8017ffe:	1124      	asrs	r4, r4, #4
 8018000:	eba4 040e 	sub.w	r4, r4, lr
 8018004:	6184      	str	r4, [r0, #24]
 8018006:	2c00      	cmp	r4, #0
 8018008:	f000 808a 	beq.w	8018120 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801800c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018010:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018014:	5995      	ldr	r5, [r2, r6]
 8018016:	eba4 0809 	sub.w	r8, r4, r9
 801801a:	59d4      	ldr	r4, [r2, r7]
 801801c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018020:	eba5 0a04 	sub.w	sl, r5, r4
 8018024:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018028:	fb0e fe05 	mul.w	lr, lr, r5
 801802c:	fb0a ee19 	mls	lr, sl, r9, lr
 8018030:	fb08 e404 	mla	r4, r8, r4, lr
 8018034:	3c01      	subs	r4, #1
 8018036:	19a4      	adds	r4, r4, r6
 8018038:	f100 808c 	bmi.w	8018154 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801803c:	fb94 fef6 	sdiv	lr, r4, r6
 8018040:	fb06 441e 	mls	r4, r6, lr, r4
 8018044:	f8c0 e000 	str.w	lr, [r0]
 8018048:	6104      	str	r4, [r0, #16]
 801804a:	2d00      	cmp	r5, #0
 801804c:	f2c0 8095 	blt.w	801817a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018050:	fb95 f4f6 	sdiv	r4, r5, r6
 8018054:	fb06 5514 	mls	r5, r6, r4, r5
 8018058:	6044      	str	r4, [r0, #4]
 801805a:	6085      	str	r5, [r0, #8]
 801805c:	60c6      	str	r6, [r0, #12]
 801805e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018062:	6945      	ldr	r5, [r0, #20]
 8018064:	59d2      	ldr	r2, [r2, r7]
 8018066:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801806a:	ee07 4a10 	vmov	s14, r4
 801806e:	6804      	ldr	r4, [r0, #0]
 8018070:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801819c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018074:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018078:	ee07 2a90 	vmov	s15, r2
 801807c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018084:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018088:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801808c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018090:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018094:	edd3 6a00 	vldr	s13, [r3]
 8018098:	eee6 6a07 	vfma.f32	s13, s12, s14
 801809c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 80180a0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80180a4:	edc0 6a07 	vstr	s13, [r0, #28]
 80180a8:	edd0 6a01 	vldr	s13, [r0, #4]
 80180ac:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80180b0:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80180b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80180b8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80180bc:	ed80 6a08 	vstr	s12, [r0, #32]
 80180c0:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80180c2:	6242      	str	r2, [r0, #36]	@ 0x24
 80180c4:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 80180c8:	ed93 6a03 	vldr	s12, [r3, #12]
 80180cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80180d0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80180d4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80180d8:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80180dc:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80180e0:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80180e4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80180e8:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80180ec:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80180ee:	6302      	str	r2, [r0, #48]	@ 0x30
 80180f0:	ed93 6a06 	vldr	s12, [r3, #24]
 80180f4:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80180f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80180fc:	eeb0 7a46 	vmov.f32	s14, s12
 8018100:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8018104:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018108:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801810c:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8018110:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8018114:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018118:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801811c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801811e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8018120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018124:	2410      	movs	r4, #16
 8018126:	f1c5 0501 	rsb	r5, r5, #1
 801812a:	f015 050f 	ands.w	r5, r5, #15
 801812e:	fb9e fef4 	sdiv	lr, lr, r4
 8018132:	bf18      	it	ne
 8018134:	2501      	movne	r5, #1
 8018136:	ebae 0e05 	sub.w	lr, lr, r5
 801813a:	e753      	b.n	8017fe4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801813c:	f04f 0910 	mov.w	r9, #16
 8018140:	f1c5 0501 	rsb	r5, r5, #1
 8018144:	f015 050f 	ands.w	r5, r5, #15
 8018148:	fb94 f4f9 	sdiv	r4, r4, r9
 801814c:	bf18      	it	ne
 801814e:	2501      	movne	r5, #1
 8018150:	1b64      	subs	r4, r4, r5
 8018152:	e755      	b.n	8018000 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018154:	4264      	negs	r4, r4
 8018156:	fb94 fef6 	sdiv	lr, r4, r6
 801815a:	fb06 441e 	mls	r4, r6, lr, r4
 801815e:	f1ce 0800 	rsb	r8, lr, #0
 8018162:	f8c0 8000 	str.w	r8, [r0]
 8018166:	6104      	str	r4, [r0, #16]
 8018168:	2c00      	cmp	r4, #0
 801816a:	f43f af6e 	beq.w	801804a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801816e:	ea6f 0e0e 	mvn.w	lr, lr
 8018172:	1b34      	subs	r4, r6, r4
 8018174:	f8c0 e000 	str.w	lr, [r0]
 8018178:	e766      	b.n	8018048 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801817a:	426d      	negs	r5, r5
 801817c:	fb95 f4f6 	sdiv	r4, r5, r6
 8018180:	fb06 5514 	mls	r5, r6, r4, r5
 8018184:	f1c4 0e00 	rsb	lr, r4, #0
 8018188:	f8c0 e004 	str.w	lr, [r0, #4]
 801818c:	6085      	str	r5, [r0, #8]
 801818e:	2d00      	cmp	r5, #0
 8018190:	f43f af64 	beq.w	801805c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018194:	43e4      	mvns	r4, r4
 8018196:	1b75      	subs	r5, r6, r5
 8018198:	6044      	str	r4, [r0, #4]
 801819a:	e75e      	b.n	801805a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801819c:	3d800000 	.word	0x3d800000

080181a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80181a0:	4b01      	ldr	r3, [pc, #4]	@ (80181a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80181a2:	6018      	str	r0, [r3, #0]
 80181a4:	4770      	bx	lr
 80181a6:	bf00      	nop
 80181a8:	200874bc 	.word	0x200874bc

080181ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80181ac:	4b06      	ldr	r3, [pc, #24]	@ (80181c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80181ae:	881a      	ldrh	r2, [r3, #0]
 80181b0:	4282      	cmp	r2, r0
 80181b2:	d807      	bhi.n	80181c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80181b4:	4b05      	ldr	r3, [pc, #20]	@ (80181cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80181b6:	881b      	ldrh	r3, [r3, #0]
 80181b8:	4413      	add	r3, r2
 80181ba:	4298      	cmp	r0, r3
 80181bc:	bfac      	ite	ge
 80181be:	2000      	movge	r0, #0
 80181c0:	2001      	movlt	r0, #1
 80181c2:	4770      	bx	lr
 80181c4:	2000      	movs	r0, #0
 80181c6:	4770      	bx	lr
 80181c8:	200874dc 	.word	0x200874dc
 80181cc:	200874e0 	.word	0x200874e0

080181d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80181d0:	b508      	push	{r3, lr}
 80181d2:	4601      	mov	r1, r0
 80181d4:	f7ff ffea 	bl	80181ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80181d8:	b118      	cbz	r0, 80181e2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80181da:	4b02      	ldr	r3, [pc, #8]	@ (80181e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80181e2:	bd08      	pop	{r3, pc}
 80181e4:	200874c0 	.word	0x200874c0

080181e8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80181e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181ea:	4c24      	ldr	r4, [pc, #144]	@ (801827c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80181ec:	6823      	ldr	r3, [r4, #0]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d042      	beq.n	8018278 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80181f2:	4a23      	ldr	r2, [pc, #140]	@ (8018280 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80181f4:	4d23      	ldr	r5, [pc, #140]	@ (8018284 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80181f6:	8811      	ldrh	r1, [r2, #0]
 80181f8:	f8b5 c000 	ldrh.w	ip, [r5]
 80181fc:	4822      	ldr	r0, [pc, #136]	@ (8018288 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80181fe:	4461      	add	r1, ip
 8018200:	1c4a      	adds	r2, r1, #1
 8018202:	f022 0201 	bic.w	r2, r2, #1
 8018206:	008f      	lsls	r7, r1, #2
 8018208:	0412      	lsls	r2, r2, #16
 801820a:	19de      	adds	r6, r3, r7
 801820c:	0c12      	lsrs	r2, r2, #16
 801820e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8018212:	6006      	str	r6, [r0, #0]
 8018214:	4e1d      	ldr	r6, [pc, #116]	@ (801828c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8018216:	19da      	adds	r2, r3, r7
 8018218:	6032      	str	r2, [r6, #0]
 801821a:	220e      	movs	r2, #14
 801821c:	fb02 f20c 	mul.w	r2, r2, ip
 8018220:	3203      	adds	r2, #3
 8018222:	f022 0203 	bic.w	r2, r2, #3
 8018226:	443a      	add	r2, r7
 8018228:	4f19      	ldr	r7, [pc, #100]	@ (8018290 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801822a:	4413      	add	r3, r2
 801822c:	603b      	str	r3, [r7, #0]
 801822e:	2300      	movs	r3, #0
 8018230:	4f18      	ldr	r7, [pc, #96]	@ (8018294 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8018232:	469c      	mov	ip, r3
 8018234:	803b      	strh	r3, [r7, #0]
 8018236:	4f18      	ldr	r7, [pc, #96]	@ (8018298 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8018238:	683f      	ldr	r7, [r7, #0]
 801823a:	1aba      	subs	r2, r7, r2
 801823c:	4f17      	ldr	r7, [pc, #92]	@ (801829c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801823e:	603a      	str	r2, [r7, #0]
 8018240:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8018244:	4a16      	ldr	r2, [pc, #88]	@ (80182a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8018246:	8013      	strh	r3, [r2, #0]
 8018248:	428b      	cmp	r3, r1
 801824a:	d10d      	bne.n	8018268 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801824c:	2300      	movs	r3, #0
 801824e:	240e      	movs	r4, #14
 8018250:	882d      	ldrh	r5, [r5, #0]
 8018252:	6830      	ldr	r0, [r6, #0]
 8018254:	429d      	cmp	r5, r3
 8018256:	d90f      	bls.n	8018278 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8018258:	fb04 0203 	mla	r2, r4, r3, r0
 801825c:	7b11      	ldrb	r1, [r2, #12]
 801825e:	3301      	adds	r3, #1
 8018260:	f36f 1145 	bfc	r1, #5, #1
 8018264:	7311      	strb	r1, [r2, #12]
 8018266:	e7f5      	b.n	8018254 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8018268:	6822      	ldr	r2, [r4, #0]
 801826a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801826e:	6802      	ldr	r2, [r0, #0]
 8018270:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8018274:	3301      	adds	r3, #1
 8018276:	e7e7      	b.n	8018248 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8018278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801827a:	bf00      	nop
 801827c:	200874c0 	.word	0x200874c0
 8018280:	200874dc 	.word	0x200874dc
 8018284:	200874e0 	.word	0x200874e0
 8018288:	200874d4 	.word	0x200874d4
 801828c:	200874c4 	.word	0x200874c4
 8018290:	200874cc 	.word	0x200874cc
 8018294:	200874de 	.word	0x200874de
 8018298:	200874c8 	.word	0x200874c8
 801829c:	200874d8 	.word	0x200874d8
 80182a0:	200874d0 	.word	0x200874d0

080182a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80182a4:	4b06      	ldr	r3, [pc, #24]	@ (80182c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	b943      	cbnz	r3, 80182bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80182aa:	b139      	cbz	r1, 80182bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80182ac:	4b05      	ldr	r3, [pc, #20]	@ (80182c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80182ae:	801a      	strh	r2, [r3, #0]
 80182b0:	4b05      	ldr	r3, [pc, #20]	@ (80182c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80182b2:	6019      	str	r1, [r3, #0]
 80182b4:	4b05      	ldr	r3, [pc, #20]	@ (80182cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80182b6:	6018      	str	r0, [r3, #0]
 80182b8:	f7ff bf96 	b.w	80181e8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80182bc:	4770      	bx	lr
 80182be:	bf00      	nop
 80182c0:	200874cc 	.word	0x200874cc
 80182c4:	200874e0 	.word	0x200874e0
 80182c8:	200874c8 	.word	0x200874c8
 80182cc:	200874c0 	.word	0x200874c0

080182d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80182d0:	b470      	push	{r4, r5, r6}
 80182d2:	4c07      	ldr	r4, [pc, #28]	@ (80182f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80182d4:	4605      	mov	r5, r0
 80182d6:	6826      	ldr	r6, [r4, #0]
 80182d8:	4610      	mov	r0, r2
 80182da:	9a03      	ldr	r2, [sp, #12]
 80182dc:	b936      	cbnz	r6, 80182ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80182de:	6025      	str	r5, [r4, #0]
 80182e0:	4c04      	ldr	r4, [pc, #16]	@ (80182f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80182e2:	8021      	strh	r1, [r4, #0]
 80182e4:	bc70      	pop	{r4, r5, r6}
 80182e6:	4619      	mov	r1, r3
 80182e8:	f7ff bfdc 	b.w	80182a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80182ec:	bc70      	pop	{r4, r5, r6}
 80182ee:	4770      	bx	lr
 80182f0:	200874e4 	.word	0x200874e4
 80182f4:	200874dc 	.word	0x200874dc

080182f8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80182f8:	4a12      	ldr	r2, [pc, #72]	@ (8018344 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80182fa:	8803      	ldrh	r3, [r0, #0]
 80182fc:	8812      	ldrh	r2, [r2, #0]
 80182fe:	4293      	cmp	r3, r2
 8018300:	d207      	bcs.n	8018312 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8018302:	2114      	movs	r1, #20
 8018304:	4a10      	ldr	r2, [pc, #64]	@ (8018348 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8018306:	6812      	ldr	r2, [r2, #0]
 8018308:	fb01 2303 	mla	r3, r1, r3, r2
 801830c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8018310:	4770      	bx	lr
 8018312:	490e      	ldr	r1, [pc, #56]	@ (801834c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8018314:	8809      	ldrh	r1, [r1, #0]
 8018316:	4411      	add	r1, r2
 8018318:	428b      	cmp	r3, r1
 801831a:	da04      	bge.n	8018326 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801831c:	1a9b      	subs	r3, r3, r2
 801831e:	4a0c      	ldr	r2, [pc, #48]	@ (8018350 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8018320:	210e      	movs	r1, #14
 8018322:	6812      	ldr	r2, [r2, #0]
 8018324:	e7f0      	b.n	8018308 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8018326:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801832a:	4293      	cmp	r3, r2
 801832c:	d108      	bne.n	8018340 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801832e:	4b09      	ldr	r3, [pc, #36]	@ (8018354 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8018330:	781b      	ldrb	r3, [r3, #0]
 8018332:	b91b      	cbnz	r3, 801833c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8018334:	4b08      	ldr	r3, [pc, #32]	@ (8018358 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8018336:	f9b3 0000 	ldrsh.w	r0, [r3]
 801833a:	4770      	bx	lr
 801833c:	4b07      	ldr	r3, [pc, #28]	@ (801835c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801833e:	e7fa      	b.n	8018336 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8018340:	2000      	movs	r0, #0
 8018342:	4770      	bx	lr
 8018344:	200874dc 	.word	0x200874dc
 8018348:	200874e4 	.word	0x200874e4
 801834c:	200874e0 	.word	0x200874e0
 8018350:	200874c4 	.word	0x200874c4
 8018354:	20087454 	.word	0x20087454
 8018358:	20087456 	.word	0x20087456
 801835c:	20087458 	.word	0x20087458

08018360 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8018360:	4a12      	ldr	r2, [pc, #72]	@ (80183ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8018362:	8803      	ldrh	r3, [r0, #0]
 8018364:	8812      	ldrh	r2, [r2, #0]
 8018366:	4293      	cmp	r3, r2
 8018368:	d207      	bcs.n	801837a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801836a:	2114      	movs	r1, #20
 801836c:	4a10      	ldr	r2, [pc, #64]	@ (80183b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801836e:	6812      	ldr	r2, [r2, #0]
 8018370:	fb01 2303 	mla	r3, r1, r3, r2
 8018374:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8018378:	4770      	bx	lr
 801837a:	490e      	ldr	r1, [pc, #56]	@ (80183b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801837c:	8809      	ldrh	r1, [r1, #0]
 801837e:	4411      	add	r1, r2
 8018380:	428b      	cmp	r3, r1
 8018382:	da04      	bge.n	801838e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8018384:	1a9b      	subs	r3, r3, r2
 8018386:	4a0c      	ldr	r2, [pc, #48]	@ (80183b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8018388:	210e      	movs	r1, #14
 801838a:	6812      	ldr	r2, [r2, #0]
 801838c:	e7f0      	b.n	8018370 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801838e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018392:	4293      	cmp	r3, r2
 8018394:	d108      	bne.n	80183a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8018396:	4b09      	ldr	r3, [pc, #36]	@ (80183bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8018398:	781b      	ldrb	r3, [r3, #0]
 801839a:	b91b      	cbnz	r3, 80183a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801839c:	4b08      	ldr	r3, [pc, #32]	@ (80183c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801839e:	f9b3 0000 	ldrsh.w	r0, [r3]
 80183a2:	4770      	bx	lr
 80183a4:	4b07      	ldr	r3, [pc, #28]	@ (80183c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80183a6:	e7fa      	b.n	801839e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80183a8:	2000      	movs	r0, #0
 80183aa:	4770      	bx	lr
 80183ac:	200874dc 	.word	0x200874dc
 80183b0:	200874e4 	.word	0x200874e4
 80183b4:	200874e0 	.word	0x200874e0
 80183b8:	200874c4 	.word	0x200874c4
 80183bc:	20087454 	.word	0x20087454
 80183c0:	20087458 	.word	0x20087458
 80183c4:	20087456 	.word	0x20087456

080183c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80183c8:	b530      	push	{r4, r5, lr}
 80183ca:	4a22      	ldr	r2, [pc, #136]	@ (8018454 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80183cc:	880b      	ldrh	r3, [r1, #0]
 80183ce:	8812      	ldrh	r2, [r2, #0]
 80183d0:	4293      	cmp	r3, r2
 80183d2:	d213      	bcs.n	80183fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80183d4:	2114      	movs	r1, #20
 80183d6:	4a20      	ldr	r2, [pc, #128]	@ (8018458 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80183d8:	6812      	ldr	r2, [r2, #0]
 80183da:	fb01 2303 	mla	r3, r1, r3, r2
 80183de:	8a1a      	ldrh	r2, [r3, #16]
 80183e0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80183e4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80183e8:	8a5b      	ldrh	r3, [r3, #18]
 80183ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80183ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183f2:	8004      	strh	r4, [r0, #0]
 80183f4:	8041      	strh	r1, [r0, #2]
 80183f6:	8082      	strh	r2, [r0, #4]
 80183f8:	80c3      	strh	r3, [r0, #6]
 80183fa:	e024      	b.n	8018446 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80183fc:	4917      	ldr	r1, [pc, #92]	@ (801845c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80183fe:	8809      	ldrh	r1, [r1, #0]
 8018400:	4411      	add	r1, r2
 8018402:	428b      	cmp	r3, r1
 8018404:	da10      	bge.n	8018428 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8018406:	1a9b      	subs	r3, r3, r2
 8018408:	220e      	movs	r2, #14
 801840a:	4353      	muls	r3, r2
 801840c:	4a14      	ldr	r2, [pc, #80]	@ (8018460 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801840e:	6811      	ldr	r1, [r2, #0]
 8018410:	18ca      	adds	r2, r1, r3
 8018412:	5ecd      	ldrsh	r5, [r1, r3]
 8018414:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8018418:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801841c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8018420:	8005      	strh	r5, [r0, #0]
 8018422:	8044      	strh	r4, [r0, #2]
 8018424:	8081      	strh	r1, [r0, #4]
 8018426:	e7e7      	b.n	80183f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018428:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801842c:	4293      	cmp	r3, r2
 801842e:	d10b      	bne.n	8018448 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8018430:	4b0c      	ldr	r3, [pc, #48]	@ (8018464 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8018432:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018436:	4b0c      	ldr	r3, [pc, #48]	@ (8018468 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8018438:	8081      	strh	r1, [r0, #4]
 801843a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801843e:	2300      	movs	r3, #0
 8018440:	80c2      	strh	r2, [r0, #6]
 8018442:	8003      	strh	r3, [r0, #0]
 8018444:	8043      	strh	r3, [r0, #2]
 8018446:	bd30      	pop	{r4, r5, pc}
 8018448:	2300      	movs	r3, #0
 801844a:	8003      	strh	r3, [r0, #0]
 801844c:	8043      	strh	r3, [r0, #2]
 801844e:	8083      	strh	r3, [r0, #4]
 8018450:	e7d2      	b.n	80183f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8018452:	bf00      	nop
 8018454:	200874dc 	.word	0x200874dc
 8018458:	200874e4 	.word	0x200874e4
 801845c:	200874e0 	.word	0x200874e0
 8018460:	200874c4 	.word	0x200874c4
 8018464:	20087450 	.word	0x20087450
 8018468:	20087452 	.word	0x20087452

0801846c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801846c:	4a12      	ldr	r2, [pc, #72]	@ (80184b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801846e:	8803      	ldrh	r3, [r0, #0]
 8018470:	8811      	ldrh	r1, [r2, #0]
 8018472:	428b      	cmp	r3, r1
 8018474:	d20b      	bcs.n	801848e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8018476:	4a11      	ldr	r2, [pc, #68]	@ (80184bc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8018478:	6812      	ldr	r2, [r2, #0]
 801847a:	b112      	cbz	r2, 8018482 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801847c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018480:	b9c0      	cbnz	r0, 80184b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8018482:	4a0f      	ldr	r2, [pc, #60]	@ (80184c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8018484:	6811      	ldr	r1, [r2, #0]
 8018486:	2214      	movs	r2, #20
 8018488:	4353      	muls	r3, r2
 801848a:	58c8      	ldr	r0, [r1, r3]
 801848c:	4770      	bx	lr
 801848e:	4a0d      	ldr	r2, [pc, #52]	@ (80184c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018490:	8812      	ldrh	r2, [r2, #0]
 8018492:	440a      	add	r2, r1
 8018494:	4293      	cmp	r3, r2
 8018496:	da04      	bge.n	80184a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8018498:	4a08      	ldr	r2, [pc, #32]	@ (80184bc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801849a:	6812      	ldr	r2, [r2, #0]
 801849c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80184a0:	4770      	bx	lr
 80184a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80184a6:	4293      	cmp	r3, r2
 80184a8:	d103      	bne.n	80184b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80184aa:	4b07      	ldr	r3, [pc, #28]	@ (80184c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80184b0:	4770      	bx	lr
 80184b2:	2000      	movs	r0, #0
 80184b4:	4770      	bx	lr
 80184b6:	bf00      	nop
 80184b8:	200874dc 	.word	0x200874dc
 80184bc:	200874c0 	.word	0x200874c0
 80184c0:	200874e4 	.word	0x200874e4
 80184c4:	200874e0 	.word	0x200874e0
 80184c8:	2008745c 	.word	0x2008745c

080184cc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80184cc:	4b24      	ldr	r3, [pc, #144]	@ (8018560 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80184ce:	8802      	ldrh	r2, [r0, #0]
 80184d0:	8818      	ldrh	r0, [r3, #0]
 80184d2:	4282      	cmp	r2, r0
 80184d4:	d221      	bcs.n	801851a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80184d6:	4b23      	ldr	r3, [pc, #140]	@ (8018564 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80184d8:	6819      	ldr	r1, [r3, #0]
 80184da:	2314      	movs	r3, #20
 80184dc:	fb03 1302 	mla	r3, r3, r2, r1
 80184e0:	6858      	ldr	r0, [r3, #4]
 80184e2:	2800      	cmp	r0, #0
 80184e4:	d03a      	beq.n	801855c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80184e6:	4920      	ldr	r1, [pc, #128]	@ (8018568 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80184e8:	6809      	ldr	r1, [r1, #0]
 80184ea:	2900      	cmp	r1, #0
 80184ec:	d036      	beq.n	801855c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80184ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80184f2:	2900      	cmp	r1, #0
 80184f4:	d032      	beq.n	801855c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80184f6:	891a      	ldrh	r2, [r3, #8]
 80184f8:	8958      	ldrh	r0, [r3, #10]
 80184fa:	4350      	muls	r0, r2
 80184fc:	7c5a      	ldrb	r2, [r3, #17]
 80184fe:	7cdb      	ldrb	r3, [r3, #19]
 8018500:	0952      	lsrs	r2, r2, #5
 8018502:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8018506:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801850a:	2b0b      	cmp	r3, #11
 801850c:	bf18      	it	ne
 801850e:	0040      	lslne	r0, r0, #1
 8018510:	3003      	adds	r0, #3
 8018512:	f020 0003 	bic.w	r0, r0, #3
 8018516:	4408      	add	r0, r1
 8018518:	4770      	bx	lr
 801851a:	4b14      	ldr	r3, [pc, #80]	@ (801856c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801851c:	881b      	ldrh	r3, [r3, #0]
 801851e:	4403      	add	r3, r0
 8018520:	429a      	cmp	r2, r3
 8018522:	da1a      	bge.n	801855a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018524:	210e      	movs	r1, #14
 8018526:	4b12      	ldr	r3, [pc, #72]	@ (8018570 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8018528:	1a10      	subs	r0, r2, r0
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	fb01 3000 	mla	r0, r1, r0, r3
 8018530:	7b03      	ldrb	r3, [r0, #12]
 8018532:	f003 031f 	and.w	r3, r3, #31
 8018536:	2b0b      	cmp	r3, #11
 8018538:	d10b      	bne.n	8018552 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801853a:	8903      	ldrh	r3, [r0, #8]
 801853c:	8940      	ldrh	r0, [r0, #10]
 801853e:	4358      	muls	r0, r3
 8018540:	4b09      	ldr	r3, [pc, #36]	@ (8018568 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8018542:	3003      	adds	r0, #3
 8018544:	6819      	ldr	r1, [r3, #0]
 8018546:	f020 0303 	bic.w	r3, r0, #3
 801854a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801854e:	4418      	add	r0, r3
 8018550:	4770      	bx	lr
 8018552:	2b0d      	cmp	r3, #13
 8018554:	d101      	bne.n	801855a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018556:	300d      	adds	r0, #13
 8018558:	4770      	bx	lr
 801855a:	2000      	movs	r0, #0
 801855c:	4770      	bx	lr
 801855e:	bf00      	nop
 8018560:	200874dc 	.word	0x200874dc
 8018564:	200874e4 	.word	0x200874e4
 8018568:	200874c0 	.word	0x200874c0
 801856c:	200874e0 	.word	0x200874e0
 8018570:	200874c4 	.word	0x200874c4

08018574 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8018574:	b510      	push	{r4, lr}
 8018576:	4a17      	ldr	r2, [pc, #92]	@ (80185d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8018578:	8803      	ldrh	r3, [r0, #0]
 801857a:	8812      	ldrh	r2, [r2, #0]
 801857c:	4293      	cmp	r3, r2
 801857e:	d20c      	bcs.n	801859a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018580:	2114      	movs	r1, #20
 8018582:	4a15      	ldr	r2, [pc, #84]	@ (80185d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8018584:	6812      	ldr	r2, [r2, #0]
 8018586:	fb01 2303 	mla	r3, r1, r3, r2
 801858a:	7c58      	ldrb	r0, [r3, #17]
 801858c:	0942      	lsrs	r2, r0, #5
 801858e:	7cd8      	ldrb	r0, [r3, #19]
 8018590:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8018594:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8018598:	bd10      	pop	{r4, pc}
 801859a:	4910      	ldr	r1, [pc, #64]	@ (80185dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801859c:	8809      	ldrh	r1, [r1, #0]
 801859e:	4411      	add	r1, r2
 80185a0:	428b      	cmp	r3, r1
 80185a2:	da09      	bge.n	80185b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80185a4:	210e      	movs	r1, #14
 80185a6:	1a9b      	subs	r3, r3, r2
 80185a8:	4a0d      	ldr	r2, [pc, #52]	@ (80185e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80185aa:	6812      	ldr	r2, [r2, #0]
 80185ac:	fb01 2303 	mla	r3, r1, r3, r2
 80185b0:	7b18      	ldrb	r0, [r3, #12]
 80185b2:	f000 001f 	and.w	r0, r0, #31
 80185b6:	e7ef      	b.n	8018598 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80185b8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80185bc:	4293      	cmp	r3, r2
 80185be:	d106      	bne.n	80185ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80185c0:	f7fb fbb8 	bl	8013d34 <_ZN8touchgfx3HAL3lcdEv>
 80185c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185c8:	6803      	ldr	r3, [r0, #0]
 80185ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80185cc:	4718      	bx	r3
 80185ce:	2000      	movs	r0, #0
 80185d0:	e7e2      	b.n	8018598 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80185d2:	bf00      	nop
 80185d4:	200874dc 	.word	0x200874dc
 80185d8:	200874e4 	.word	0x200874e4
 80185dc:	200874e0 	.word	0x200874e0
 80185e0:	200874c4 	.word	0x200874c4

080185e4 <CRC_Lock>:
 80185e4:	b530      	push	{r4, r5, lr}
 80185e6:	4a2d      	ldr	r2, [pc, #180]	@ (801869c <CRC_Lock+0xb8>)
 80185e8:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80185ec:	6813      	ldr	r3, [r2, #0]
 80185ee:	f023 0301 	bic.w	r3, r3, #1
 80185f2:	6013      	str	r3, [r2, #0]
 80185f4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80185f8:	4b29      	ldr	r3, [pc, #164]	@ (80186a0 <CRC_Lock+0xbc>)
 80185fa:	681c      	ldr	r4, [r3, #0]
 80185fc:	4014      	ands	r4, r2
 80185fe:	42ac      	cmp	r4, r5
 8018600:	d005      	beq.n	801860e <CRC_Lock+0x2a>
 8018602:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8018606:	681c      	ldr	r4, [r3, #0]
 8018608:	4014      	ands	r4, r2
 801860a:	42ac      	cmp	r4, r5
 801860c:	d125      	bne.n	801865a <CRC_Lock+0x76>
 801860e:	4b25      	ldr	r3, [pc, #148]	@ (80186a4 <CRC_Lock+0xc0>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d139      	bne.n	801868a <CRC_Lock+0xa6>
 8018616:	4b24      	ldr	r3, [pc, #144]	@ (80186a8 <CRC_Lock+0xc4>)
 8018618:	681a      	ldr	r2, [r3, #0]
 801861a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801861e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8018622:	d00d      	beq.n	8018640 <CRC_Lock+0x5c>
 8018624:	f240 4483 	movw	r4, #1155	@ 0x483
 8018628:	681a      	ldr	r2, [r3, #0]
 801862a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801862e:	42a2      	cmp	r2, r4
 8018630:	d006      	beq.n	8018640 <CRC_Lock+0x5c>
 8018632:	f240 4285 	movw	r2, #1157	@ 0x485
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801863c:	4293      	cmp	r3, r2
 801863e:	d124      	bne.n	801868a <CRC_Lock+0xa6>
 8018640:	2201      	movs	r2, #1
 8018642:	4b1a      	ldr	r3, [pc, #104]	@ (80186ac <CRC_Lock+0xc8>)
 8018644:	601a      	str	r2, [r3, #0]
 8018646:	681a      	ldr	r2, [r3, #0]
 8018648:	2a00      	cmp	r2, #0
 801864a:	d1fc      	bne.n	8018646 <CRC_Lock+0x62>
 801864c:	4b18      	ldr	r3, [pc, #96]	@ (80186b0 <CRC_Lock+0xcc>)
 801864e:	6018      	str	r0, [r3, #0]
 8018650:	6818      	ldr	r0, [r3, #0]
 8018652:	1a43      	subs	r3, r0, r1
 8018654:	4258      	negs	r0, r3
 8018656:	4158      	adcs	r0, r3
 8018658:	e00e      	b.n	8018678 <CRC_Lock+0x94>
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	4013      	ands	r3, r2
 801865e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8018662:	4293      	cmp	r3, r2
 8018664:	d111      	bne.n	801868a <CRC_Lock+0xa6>
 8018666:	f240 4286 	movw	r2, #1158	@ 0x486
 801866a:	4b12      	ldr	r3, [pc, #72]	@ (80186b4 <CRC_Lock+0xd0>)
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018672:	4293      	cmp	r3, r2
 8018674:	d001      	beq.n	801867a <CRC_Lock+0x96>
 8018676:	2000      	movs	r0, #0
 8018678:	bd30      	pop	{r4, r5, pc}
 801867a:	2201      	movs	r2, #1
 801867c:	4b0e      	ldr	r3, [pc, #56]	@ (80186b8 <CRC_Lock+0xd4>)
 801867e:	601a      	str	r2, [r3, #0]
 8018680:	681a      	ldr	r2, [r3, #0]
 8018682:	2a00      	cmp	r2, #0
 8018684:	d1fc      	bne.n	8018680 <CRC_Lock+0x9c>
 8018686:	4b0d      	ldr	r3, [pc, #52]	@ (80186bc <CRC_Lock+0xd8>)
 8018688:	e7e1      	b.n	801864e <CRC_Lock+0x6a>
 801868a:	2201      	movs	r2, #1
 801868c:	4b0c      	ldr	r3, [pc, #48]	@ (80186c0 <CRC_Lock+0xdc>)
 801868e:	601a      	str	r2, [r3, #0]
 8018690:	681a      	ldr	r2, [r3, #0]
 8018692:	2a00      	cmp	r2, #0
 8018694:	d1fc      	bne.n	8018690 <CRC_Lock+0xac>
 8018696:	4b0b      	ldr	r3, [pc, #44]	@ (80186c4 <CRC_Lock+0xe0>)
 8018698:	e7d9      	b.n	801864e <CRC_Lock+0x6a>
 801869a:	bf00      	nop
 801869c:	e0002000 	.word	0xe0002000
 80186a0:	e000ed00 	.word	0xe000ed00
 80186a4:	e0042000 	.word	0xe0042000
 80186a8:	5c001000 	.word	0x5c001000
 80186ac:	58024c08 	.word	0x58024c08
 80186b0:	58024c00 	.word	0x58024c00
 80186b4:	46008ff0 	.word	0x46008ff0
 80186b8:	46024c08 	.word	0x46024c08
 80186bc:	46024c00 	.word	0x46024c00
 80186c0:	40023008 	.word	0x40023008
 80186c4:	40023000 	.word	0x40023000

080186c8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80186c8:	6101      	str	r1, [r0, #16]
 80186ca:	4770      	bx	lr

080186cc <_ZN8touchgfx8Gestures4tickEv>:
 80186cc:	7b83      	ldrb	r3, [r0, #14]
 80186ce:	b14b      	cbz	r3, 80186e4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80186d0:	8903      	ldrh	r3, [r0, #8]
 80186d2:	3301      	adds	r3, #1
 80186d4:	b29b      	uxth	r3, r3
 80186d6:	2b07      	cmp	r3, #7
 80186d8:	8103      	strh	r3, [r0, #8]
 80186da:	bf81      	itttt	hi
 80186dc:	2300      	movhi	r3, #0
 80186de:	8143      	strhhi	r3, [r0, #10]
 80186e0:	8183      	strhhi	r3, [r0, #12]
 80186e2:	7383      	strbhi	r3, [r0, #14]
 80186e4:	4770      	bx	lr
	...

080186e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80186e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80186ec:	4698      	mov	r8, r3
 80186ee:	4604      	mov	r4, r0
 80186f0:	8883      	ldrh	r3, [r0, #4]
 80186f2:	460e      	mov	r6, r1
 80186f4:	88c1      	ldrh	r1, [r0, #6]
 80186f6:	2000      	movs	r0, #0
 80186f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80186fc:	eba8 0303 	sub.w	r3, r8, r3
 8018700:	b21b      	sxth	r3, r3
 8018702:	4617      	mov	r7, r2
 8018704:	4a17      	ldr	r2, [pc, #92]	@ (8018764 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8018706:	2b00      	cmp	r3, #0
 8018708:	bfb8      	it	lt
 801870a:	425b      	neglt	r3, r3
 801870c:	9200      	str	r2, [sp, #0]
 801870e:	8aa2      	ldrh	r2, [r4, #20]
 8018710:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8018714:	b21b      	sxth	r3, r3
 8018716:	4293      	cmp	r3, r2
 8018718:	f88d 0004 	strb.w	r0, [sp, #4]
 801871c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018720:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018724:	f8ad 500c 	strh.w	r5, [sp, #12]
 8018728:	dc07      	bgt.n	801873a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801872a:	1a69      	subs	r1, r5, r1
 801872c:	b209      	sxth	r1, r1
 801872e:	2900      	cmp	r1, #0
 8018730:	bfb8      	it	lt
 8018732:	4249      	neglt	r1, r1
 8018734:	b209      	sxth	r1, r1
 8018736:	428a      	cmp	r2, r1
 8018738:	da10      	bge.n	801875c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801873a:	6920      	ldr	r0, [r4, #16]
 801873c:	4669      	mov	r1, sp
 801873e:	6803      	ldr	r3, [r0, #0]
 8018740:	eba8 0606 	sub.w	r6, r8, r6
 8018744:	685b      	ldr	r3, [r3, #4]
 8018746:	4798      	blx	r3
 8018748:	2300      	movs	r3, #0
 801874a:	2001      	movs	r0, #1
 801874c:	1bef      	subs	r7, r5, r7
 801874e:	8123      	strh	r3, [r4, #8]
 8018750:	8166      	strh	r6, [r4, #10]
 8018752:	81a7      	strh	r7, [r4, #12]
 8018754:	f8a4 8004 	strh.w	r8, [r4, #4]
 8018758:	80e5      	strh	r5, [r4, #6]
 801875a:	73a0      	strb	r0, [r4, #14]
 801875c:	b004      	add	sp, #16
 801875e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018762:	bf00      	nop
 8018764:	0802d898 	.word	0x0802d898

08018768 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8018768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801876a:	461e      	mov	r6, r3
 801876c:	1e4b      	subs	r3, r1, #1
 801876e:	2b01      	cmp	r3, #1
 8018770:	b085      	sub	sp, #20
 8018772:	4604      	mov	r4, r0
 8018774:	460d      	mov	r5, r1
 8018776:	4617      	mov	r7, r2
 8018778:	d84b      	bhi.n	8018812 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801877a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801877e:	1cd3      	adds	r3, r2, #3
 8018780:	b29b      	uxth	r3, r3
 8018782:	2b06      	cmp	r3, #6
 8018784:	d916      	bls.n	80187b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8018786:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8018828 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801878a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801878e:	f8cd c004 	str.w	ip, [sp, #4]
 8018792:	f04f 0c00 	mov.w	ip, #0
 8018796:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801879a:	6900      	ldr	r0, [r0, #16]
 801879c:	f8ad 100c 	strh.w	r1, [sp, #12]
 80187a0:	f88d c008 	strb.w	ip, [sp, #8]
 80187a4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80187a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80187ac:	6803      	ldr	r3, [r0, #0]
 80187ae:	a901      	add	r1, sp, #4
 80187b0:	689b      	ldr	r3, [r3, #8]
 80187b2:	4798      	blx	r3
 80187b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80187b8:	1cd3      	adds	r3, r2, #3
 80187ba:	b29b      	uxth	r3, r3
 80187bc:	2b06      	cmp	r3, #6
 80187be:	d916      	bls.n	80187ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80187c0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8018828 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80187c4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80187c8:	f8cd c004 	str.w	ip, [sp, #4]
 80187cc:	f04f 0c01 	mov.w	ip, #1
 80187d0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80187d4:	6920      	ldr	r0, [r4, #16]
 80187d6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80187da:	f88d c008 	strb.w	ip, [sp, #8]
 80187de:	f8ad 200a 	strh.w	r2, [sp, #10]
 80187e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80187e6:	6803      	ldr	r3, [r0, #0]
 80187e8:	a901      	add	r1, sp, #4
 80187ea:	689b      	ldr	r3, [r3, #8]
 80187ec:	4798      	blx	r3
 80187ee:	4b0d      	ldr	r3, [pc, #52]	@ (8018824 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80187f0:	6920      	ldr	r0, [r4, #16]
 80187f2:	9301      	str	r3, [sp, #4]
 80187f4:	2300      	movs	r3, #0
 80187f6:	f88d 5008 	strb.w	r5, [sp, #8]
 80187fa:	f8ad 700a 	strh.w	r7, [sp, #10]
 80187fe:	f8ad 600c 	strh.w	r6, [sp, #12]
 8018802:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018806:	6803      	ldr	r3, [r0, #0]
 8018808:	a901      	add	r1, sp, #4
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	4798      	blx	r3
 801880e:	b005      	add	sp, #20
 8018810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018812:	2900      	cmp	r1, #0
 8018814:	d1eb      	bne.n	80187ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018816:	80a2      	strh	r2, [r4, #4]
 8018818:	80c6      	strh	r6, [r0, #6]
 801881a:	60a1      	str	r1, [r4, #8]
 801881c:	81a1      	strh	r1, [r4, #12]
 801881e:	73a1      	strb	r1, [r4, #14]
 8018820:	e7e5      	b.n	80187ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018822:	bf00      	nop
 8018824:	0802d884 	.word	0x0802d884
 8018828:	0802d8ac 	.word	0x0802d8ac

0801882c <nema_rb_init>:
 801882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018830:	6805      	ldr	r5, [r0, #0]
 8018832:	4f23      	ldr	r7, [pc, #140]	@ (80188c0 <nema_rb_init+0x94>)
 8018834:	2d00      	cmp	r5, #0
 8018836:	603d      	str	r5, [r7, #0]
 8018838:	dd3c      	ble.n	80188b4 <nema_rb_init+0x88>
 801883a:	f8df c090 	ldr.w	ip, [pc, #144]	@ 80188cc <nema_rb_init+0xa0>
 801883e:	10ab      	asrs	r3, r5, #2
 8018840:	3b04      	subs	r3, #4
 8018842:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 80188d0 <nema_rb_init+0xa4>
 8018846:	6886      	ldr	r6, [r0, #8]
 8018848:	4c1e      	ldr	r4, [pc, #120]	@ (80188c4 <nema_rb_init+0x98>)
 801884a:	f8cc 3000 	str.w	r3, [ip]
 801884e:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80188d4 <nema_rb_init+0xa8>
 8018852:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8018856:	f8ce 0000 	str.w	r0, [lr]
 801885a:	6026      	str	r6, [r4, #0]
 801885c:	f8c8 c000 	str.w	ip, [r8]
 8018860:	b329      	cbz	r1, 80188ae <nema_rb_init+0x82>
 8018862:	2400      	movs	r4, #0
 8018864:	f8df e070 	ldr.w	lr, [pc, #112]	@ 80188d8 <nema_rb_init+0xac>
 8018868:	4917      	ldr	r1, [pc, #92]	@ (80188c8 <nema_rb_init+0x9c>)
 801886a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801886e:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
 8018872:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018876:	e9c3 1502 	strd	r1, r5, [r3, #8]
 801887a:	f8c3 c004 	str.w	ip, [r3, #4]
 801887e:	f7fa fd9c 	bl	80133ba <nema_buffer_flush>
 8018882:	4621      	mov	r1, r4
 8018884:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8018888:	f7fa fd02 	bl	8013290 <nema_reg_write>
 801888c:	f8d8 1000 	ldr.w	r1, [r8]
 8018890:	20ec      	movs	r0, #236	@ 0xec
 8018892:	f041 0106 	orr.w	r1, r1, #6
 8018896:	f7fa fcfb 	bl	8013290 <nema_reg_write>
 801889a:	f8d8 1000 	ldr.w	r1, [r8]
 801889e:	20f0      	movs	r0, #240	@ 0xf0
 80188a0:	f7fa fcf6 	bl	8013290 <nema_reg_write>
 80188a4:	6839      	ldr	r1, [r7, #0]
 80188a6:	20f4      	movs	r0, #244	@ 0xf4
 80188a8:	f7fa fcf2 	bl	8013290 <nema_reg_write>
 80188ac:	4621      	mov	r1, r4
 80188ae:	4608      	mov	r0, r1
 80188b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188b4:	2004      	movs	r0, #4
 80188b6:	f000 fa25 	bl	8018d04 <nema_set_error>
 80188ba:	f04f 31ff 	mov.w	r1, #4294967295
 80188be:	e7f6      	b.n	80188ae <nema_rb_init+0x82>
 80188c0:	200874f8 	.word	0x200874f8
 80188c4:	200874f0 	.word	0x200874f0
 80188c8:	ff0000f4 	.word	0xff0000f4
 80188cc:	200874f4 	.word	0x200874f4
 80188d0:	200874e8 	.word	0x200874e8
 80188d4:	200874ec 	.word	0x200874ec
 80188d8:	ff0000f0 	.word	0xff0000f0

080188dc <nema_rb_submit_cmdlist2>:
 80188dc:	2900      	cmp	r1, #0
 80188de:	d074      	beq.n	80189ca <nema_rb_submit_cmdlist2+0xee>
 80188e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188e4:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 80189e0 <nema_rb_submit_cmdlist2+0x104>
 80188e8:	4b39      	ldr	r3, [pc, #228]	@ (80189d0 <nema_rb_submit_cmdlist2+0xf4>)
 80188ea:	f8d8 2000 	ldr.w	r2, [r8]
 80188ee:	681d      	ldr	r5, [r3, #0]
 80188f0:	6913      	ldr	r3, [r2, #16]
 80188f2:	468c      	mov	ip, r1
 80188f4:	4c37      	ldr	r4, [pc, #220]	@ (80189d4 <nema_rb_submit_cmdlist2+0xf8>)
 80188f6:	1d19      	adds	r1, r3, #4
 80188f8:	42a9      	cmp	r1, r5
 80188fa:	6824      	ldr	r4, [r4, #0]
 80188fc:	db0a      	blt.n	8018914 <nema_rb_submit_cmdlist2+0x38>
 80188fe:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8018902:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8018906:	6913      	ldr	r3, [r2, #16]
 8018908:	3301      	adds	r3, #1
 801890a:	429d      	cmp	r5, r3
 801890c:	6113      	str	r3, [r2, #16]
 801890e:	dc59      	bgt.n	80189c4 <nema_rb_submit_cmdlist2+0xe8>
 8018910:	2300      	movs	r3, #0
 8018912:	6113      	str	r3, [r2, #16]
 8018914:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8018918:	f04f 0e00 	mov.w	lr, #0
 801891c:	e009      	b.n	8018932 <nema_rb_submit_cmdlist2+0x56>
 801891e:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8018922:	6913      	ldr	r3, [r2, #16]
 8018924:	3301      	adds	r3, #1
 8018926:	429d      	cmp	r5, r3
 8018928:	6113      	str	r3, [r2, #16]
 801892a:	bfdc      	itt	le
 801892c:	2300      	movle	r3, #0
 801892e:	f8c2 e010 	strle.w	lr, [r2, #16]
 8018932:	f013 0703 	ands.w	r7, r3, #3
 8018936:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801893a:	d1f0      	bne.n	801891e <nema_rb_submit_cmdlist2+0x42>
 801893c:	23f0      	movs	r3, #240	@ 0xf0
 801893e:	6033      	str	r3, [r6, #0]
 8018940:	6913      	ldr	r3, [r2, #16]
 8018942:	3301      	adds	r3, #1
 8018944:	429d      	cmp	r5, r3
 8018946:	bfd3      	iteet	le
 8018948:	4623      	movle	r3, r4
 801894a:	6113      	strgt	r3, [r2, #16]
 801894c:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
 8018950:	6117      	strle	r7, [r2, #16]
 8018952:	6018      	str	r0, [r3, #0]
 8018954:	6913      	ldr	r3, [r2, #16]
 8018956:	3301      	adds	r3, #1
 8018958:	429d      	cmp	r5, r3
 801895a:	dd2f      	ble.n	80189bc <nema_rb_submit_cmdlist2+0xe0>
 801895c:	6113      	str	r3, [r2, #16]
 801895e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018962:	491d      	ldr	r1, [pc, #116]	@ (80189d8 <nema_rb_submit_cmdlist2+0xfc>)
 8018964:	4610      	mov	r0, r2
 8018966:	6019      	str	r1, [r3, #0]
 8018968:	6913      	ldr	r3, [r2, #16]
 801896a:	3301      	adds	r3, #1
 801896c:	429d      	cmp	r5, r3
 801896e:	bfd3      	iteet	le
 8018970:	2300      	movle	r3, #0
 8018972:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 8018976:	6113      	strgt	r3, [r2, #16]
 8018978:	6113      	strle	r3, [r2, #16]
 801897a:	f8c4 c000 	str.w	ip, [r4]
 801897e:	6913      	ldr	r3, [r2, #16]
 8018980:	3301      	adds	r3, #1
 8018982:	429d      	cmp	r5, r3
 8018984:	bfd8      	it	le
 8018986:	2300      	movle	r3, #0
 8018988:	6113      	str	r3, [r2, #16]
 801898a:	f7fa fd16 	bl	80133ba <nema_buffer_flush>
 801898e:	4a13      	ldr	r2, [pc, #76]	@ (80189dc <nema_rb_submit_cmdlist2+0x100>)
 8018990:	f8d8 3000 	ldr.w	r3, [r8]
 8018994:	6811      	ldr	r1, [r2, #0]
 8018996:	691b      	ldr	r3, [r3, #16]
 8018998:	20ec      	movs	r0, #236	@ 0xec
 801899a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801899e:	f041 0104 	orr.w	r1, r1, #4
 80189a2:	f7fa fc75 	bl	8013290 <nema_reg_write>
 80189a6:	f8d8 3000 	ldr.w	r3, [r8]
 80189aa:	6958      	ldr	r0, [r3, #20]
 80189ac:	3001      	adds	r0, #1
 80189ae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80189b2:	bfa8      	it	ge
 80189b4:	2000      	movge	r0, #0
 80189b6:	6158      	str	r0, [r3, #20]
 80189b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189bc:	2100      	movs	r1, #0
 80189be:	4623      	mov	r3, r4
 80189c0:	6111      	str	r1, [r2, #16]
 80189c2:	e7ce      	b.n	8018962 <nema_rb_submit_cmdlist2+0x86>
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d19c      	bne.n	8018902 <nema_rb_submit_cmdlist2+0x26>
 80189c8:	e7a4      	b.n	8018914 <nema_rb_submit_cmdlist2+0x38>
 80189ca:	f04f 30ff 	mov.w	r0, #4294967295
 80189ce:	4770      	bx	lr
 80189d0:	200874f4 	.word	0x200874f4
 80189d4:	200874f0 	.word	0x200874f0
 80189d8:	000200f4 	.word	0x000200f4
 80189dc:	200874ec 	.word	0x200874ec
 80189e0:	200874e8 	.word	0x200874e8

080189e4 <nema_rb_submit_cmdlist>:
 80189e4:	68c0      	ldr	r0, [r0, #12]
 80189e6:	f7ff bf79 	b.w	80188dc <nema_rb_submit_cmdlist2>
 80189ea:	bf00      	nop

080189ec <nema_rb_inline_cmd>:
 80189ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ee:	4e21      	ldr	r6, [pc, #132]	@ (8018a74 <nema_rb_inline_cmd+0x88>)
 80189f0:	4b21      	ldr	r3, [pc, #132]	@ (8018a78 <nema_rb_inline_cmd+0x8c>)
 80189f2:	6832      	ldr	r2, [r6, #0]
 80189f4:	681d      	ldr	r5, [r3, #0]
 80189f6:	6913      	ldr	r3, [r2, #16]
 80189f8:	4c20      	ldr	r4, [pc, #128]	@ (8018a7c <nema_rb_inline_cmd+0x90>)
 80189fa:	1c5f      	adds	r7, r3, #1
 80189fc:	42af      	cmp	r7, r5
 80189fe:	6824      	ldr	r4, [r4, #0]
 8018a00:	db24      	blt.n	8018a4c <nema_rb_inline_cmd+0x60>
 8018a02:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8018a06:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8018a0a:	6913      	ldr	r3, [r2, #16]
 8018a0c:	3301      	adds	r3, #1
 8018a0e:	429d      	cmp	r5, r3
 8018a10:	6113      	str	r3, [r2, #16]
 8018a12:	dc17      	bgt.n	8018a44 <nema_rb_inline_cmd+0x58>
 8018a14:	2700      	movs	r7, #0
 8018a16:	4623      	mov	r3, r4
 8018a18:	6117      	str	r7, [r2, #16]
 8018a1a:	6018      	str	r0, [r3, #0]
 8018a1c:	6913      	ldr	r3, [r2, #16]
 8018a1e:	3301      	adds	r3, #1
 8018a20:	429d      	cmp	r5, r3
 8018a22:	bfd3      	iteet	le
 8018a24:	2300      	movle	r3, #0
 8018a26:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 8018a2a:	6113      	strgt	r3, [r2, #16]
 8018a2c:	6113      	strle	r3, [r2, #16]
 8018a2e:	6021      	str	r1, [r4, #0]
 8018a30:	6913      	ldr	r3, [r2, #16]
 8018a32:	3301      	adds	r3, #1
 8018a34:	429d      	cmp	r5, r3
 8018a36:	bfd8      	it	le
 8018a38:	2300      	movle	r3, #0
 8018a3a:	f010 4f7f 	tst.w	r0, #4278190080	@ 0xff000000
 8018a3e:	6113      	str	r3, [r2, #16]
 8018a40:	d107      	bne.n	8018a52 <nema_rb_inline_cmd+0x66>
 8018a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d1de      	bne.n	8018a06 <nema_rb_inline_cmd+0x1a>
 8018a48:	4623      	mov	r3, r4
 8018a4a:	e7e6      	b.n	8018a1a <nema_rb_inline_cmd+0x2e>
 8018a4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018a50:	e7e3      	b.n	8018a1a <nema_rb_inline_cmd+0x2e>
 8018a52:	4610      	mov	r0, r2
 8018a54:	f7fa fcb1 	bl	80133ba <nema_buffer_flush>
 8018a58:	6833      	ldr	r3, [r6, #0]
 8018a5a:	4a09      	ldr	r2, [pc, #36]	@ (8018a80 <nema_rb_inline_cmd+0x94>)
 8018a5c:	691b      	ldr	r3, [r3, #16]
 8018a5e:	6811      	ldr	r1, [r2, #0]
 8018a60:	20ec      	movs	r0, #236	@ 0xec
 8018a62:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018a66:	f041 0104 	orr.w	r1, r1, #4
 8018a6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018a6e:	f7fa bc0f 	b.w	8013290 <nema_reg_write>
 8018a72:	bf00      	nop
 8018a74:	200874e8 	.word	0x200874e8
 8018a78:	200874f4 	.word	0x200874f4
 8018a7c:	200874f0 	.word	0x200874f0
 8018a80:	200874ec 	.word	0x200874ec

08018a84 <nema_rb_force_flush>:
 8018a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a86:	4e36      	ldr	r6, [pc, #216]	@ (8018b60 <nema_rb_force_flush+0xdc>)
 8018a88:	4b36      	ldr	r3, [pc, #216]	@ (8018b64 <nema_rb_force_flush+0xe0>)
 8018a8a:	6830      	ldr	r0, [r6, #0]
 8018a8c:	6819      	ldr	r1, [r3, #0]
 8018a8e:	6903      	ldr	r3, [r0, #16]
 8018a90:	4a35      	ldr	r2, [pc, #212]	@ (8018b68 <nema_rb_force_flush+0xe4>)
 8018a92:	1d1c      	adds	r4, r3, #4
 8018a94:	428c      	cmp	r4, r1
 8018a96:	6812      	ldr	r2, [r2, #0]
 8018a98:	db0a      	blt.n	8018ab0 <nema_rb_force_flush+0x2c>
 8018a9a:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8018a9e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8018aa2:	6903      	ldr	r3, [r0, #16]
 8018aa4:	3301      	adds	r3, #1
 8018aa6:	4299      	cmp	r1, r3
 8018aa8:	6103      	str	r3, [r0, #16]
 8018aaa:	dc51      	bgt.n	8018b50 <nema_rb_force_flush+0xcc>
 8018aac:	2300      	movs	r3, #0
 8018aae:	6103      	str	r3, [r0, #16]
 8018ab0:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 8018ab4:	2700      	movs	r7, #0
 8018ab6:	e008      	b.n	8018aca <nema_rb_force_flush+0x46>
 8018ab8:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8018abc:	6903      	ldr	r3, [r0, #16]
 8018abe:	3301      	adds	r3, #1
 8018ac0:	4299      	cmp	r1, r3
 8018ac2:	6103      	str	r3, [r0, #16]
 8018ac4:	bfdc      	itt	le
 8018ac6:	2300      	movle	r3, #0
 8018ac8:	6107      	strle	r7, [r0, #16]
 8018aca:	f013 0c03 	ands.w	ip, r3, #3
 8018ace:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8018ad2:	d1f1      	bne.n	8018ab8 <nema_rb_force_flush+0x34>
 8018ad4:	4d25      	ldr	r5, [pc, #148]	@ (8018b6c <nema_rb_force_flush+0xe8>)
 8018ad6:	4f26      	ldr	r7, [pc, #152]	@ (8018b70 <nema_rb_force_flush+0xec>)
 8018ad8:	6025      	str	r5, [r4, #0]
 8018ada:	6904      	ldr	r4, [r0, #16]
 8018adc:	683d      	ldr	r5, [r7, #0]
 8018ade:	3401      	adds	r4, #1
 8018ae0:	42a1      	cmp	r1, r4
 8018ae2:	bfd8      	it	le
 8018ae4:	4614      	movle	r4, r2
 8018ae6:	f103 0304 	add.w	r3, r3, #4
 8018aea:	bfc8      	it	gt
 8018aec:	6104      	strgt	r4, [r0, #16]
 8018aee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018af2:	bfcc      	ite	gt
 8018af4:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
 8018af8:	f8c0 c010 	strle.w	ip, [r0, #16]
 8018afc:	6023      	str	r3, [r4, #0]
 8018afe:	6903      	ldr	r3, [r0, #16]
 8018b00:	3301      	adds	r3, #1
 8018b02:	4299      	cmp	r1, r3
 8018b04:	dd27      	ble.n	8018b56 <nema_rb_force_flush+0xd2>
 8018b06:	6103      	str	r3, [r0, #16]
 8018b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018b0c:	4c19      	ldr	r4, [pc, #100]	@ (8018b74 <nema_rb_force_flush+0xf0>)
 8018b0e:	601c      	str	r4, [r3, #0]
 8018b10:	6903      	ldr	r3, [r0, #16]
 8018b12:	3301      	adds	r3, #1
 8018b14:	4299      	cmp	r1, r3
 8018b16:	bfd5      	itete	le
 8018b18:	2300      	movle	r3, #0
 8018b1a:	6103      	strgt	r3, [r0, #16]
 8018b1c:	6103      	strle	r3, [r0, #16]
 8018b1e:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
 8018b22:	4b15      	ldr	r3, [pc, #84]	@ (8018b78 <nema_rb_force_flush+0xf4>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	6013      	str	r3, [r2, #0]
 8018b28:	6903      	ldr	r3, [r0, #16]
 8018b2a:	3301      	adds	r3, #1
 8018b2c:	4299      	cmp	r1, r3
 8018b2e:	bfd8      	it	le
 8018b30:	2300      	movle	r3, #0
 8018b32:	6103      	str	r3, [r0, #16]
 8018b34:	f7fa fc41 	bl	80133ba <nema_buffer_flush>
 8018b38:	6833      	ldr	r3, [r6, #0]
 8018b3a:	6839      	ldr	r1, [r7, #0]
 8018b3c:	691b      	ldr	r3, [r3, #16]
 8018b3e:	20ec      	movs	r0, #236	@ 0xec
 8018b40:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018b44:	f041 0104 	orr.w	r1, r1, #4
 8018b48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018b4c:	f7fa bba0 	b.w	8013290 <nema_reg_write>
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d1a4      	bne.n	8018a9e <nema_rb_force_flush+0x1a>
 8018b54:	e7ac      	b.n	8018ab0 <nema_rb_force_flush+0x2c>
 8018b56:	2400      	movs	r4, #0
 8018b58:	4613      	mov	r3, r2
 8018b5a:	6104      	str	r4, [r0, #16]
 8018b5c:	e7d6      	b.n	8018b0c <nema_rb_force_flush+0x88>
 8018b5e:	bf00      	nop
 8018b60:	200874e8 	.word	0x200874e8
 8018b64:	200874f4 	.word	0x200874f4
 8018b68:	200874f0 	.word	0x200874f0
 8018b6c:	ff0000f0 	.word	0xff0000f0
 8018b70:	200874ec 	.word	0x200874ec
 8018b74:	ff0000f4 	.word	0xff0000f4
 8018b78:	200874f8 	.word	0x200874f8

08018b7c <nema_rb_submit_cl_id>:
 8018b7c:	b510      	push	{r4, lr}
 8018b7e:	1e04      	subs	r4, r0, #0
 8018b80:	dd40      	ble.n	8018c04 <nema_rb_submit_cl_id+0x88>
 8018b82:	2000      	movs	r0, #0
 8018b84:	f7fa fc23 	bl	80133ce <nema_mutex_lock>
 8018b88:	4621      	mov	r1, r4
 8018b8a:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8018b8e:	f7ff ff2d 	bl	80189ec <nema_rb_inline_cmd>
 8018b92:	4a1d      	ldr	r2, [pc, #116]	@ (8018c08 <nema_rb_submit_cl_id+0x8c>)
 8018b94:	4b1d      	ldr	r3, [pc, #116]	@ (8018c0c <nema_rb_submit_cl_id+0x90>)
 8018b96:	6812      	ldr	r2, [r2, #0]
 8018b98:	6818      	ldr	r0, [r3, #0]
 8018b9a:	6913      	ldr	r3, [r2, #16]
 8018b9c:	1c59      	adds	r1, r3, #1
 8018b9e:	4281      	cmp	r1, r0
 8018ba0:	db0e      	blt.n	8018bc0 <nema_rb_submit_cl_id+0x44>
 8018ba2:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8018ba6:	491a      	ldr	r1, [pc, #104]	@ (8018c10 <nema_rb_submit_cl_id+0x94>)
 8018ba8:	6809      	ldr	r1, [r1, #0]
 8018baa:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8018bae:	6913      	ldr	r3, [r2, #16]
 8018bb0:	3301      	adds	r3, #1
 8018bb2:	4298      	cmp	r0, r3
 8018bb4:	6113      	str	r3, [r2, #16]
 8018bb6:	dc21      	bgt.n	8018bfc <nema_rb_submit_cl_id+0x80>
 8018bb8:	2400      	movs	r4, #0
 8018bba:	460b      	mov	r3, r1
 8018bbc:	6114      	str	r4, [r2, #16]
 8018bbe:	e003      	b.n	8018bc8 <nema_rb_submit_cl_id+0x4c>
 8018bc0:	4913      	ldr	r1, [pc, #76]	@ (8018c10 <nema_rb_submit_cl_id+0x94>)
 8018bc2:	6809      	ldr	r1, [r1, #0]
 8018bc4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018bc8:	24f8      	movs	r4, #248	@ 0xf8
 8018bca:	601c      	str	r4, [r3, #0]
 8018bcc:	6913      	ldr	r3, [r2, #16]
 8018bce:	3301      	adds	r3, #1
 8018bd0:	4298      	cmp	r0, r3
 8018bd2:	bfd5      	itete	le
 8018bd4:	2300      	movle	r3, #0
 8018bd6:	6113      	strgt	r3, [r2, #16]
 8018bd8:	6113      	strle	r3, [r2, #16]
 8018bda:	eb01 0183 	addgt.w	r1, r1, r3, lsl #2
 8018bde:	2301      	movs	r3, #1
 8018be0:	600b      	str	r3, [r1, #0]
 8018be2:	6913      	ldr	r3, [r2, #16]
 8018be4:	3301      	adds	r3, #1
 8018be6:	4298      	cmp	r0, r3
 8018be8:	bfd8      	it	le
 8018bea:	2300      	movle	r3, #0
 8018bec:	6113      	str	r3, [r2, #16]
 8018bee:	f7ff ff49 	bl	8018a84 <nema_rb_force_flush>
 8018bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bf6:	2000      	movs	r0, #0
 8018bf8:	f7fa bbf6 	b.w	80133e8 <nema_mutex_unlock>
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d1d4      	bne.n	8018baa <nema_rb_submit_cl_id+0x2e>
 8018c00:	460b      	mov	r3, r1
 8018c02:	e7e1      	b.n	8018bc8 <nema_rb_submit_cl_id+0x4c>
 8018c04:	bd10      	pop	{r4, pc}
 8018c06:	bf00      	nop
 8018c08:	200874e8 	.word	0x200874e8
 8018c0c:	200874f4 	.word	0x200874f4
 8018c10:	200874f0 	.word	0x200874f0

08018c14 <init_nema_regs>:
 8018c14:	b538      	push	{r3, r4, r5, lr}
 8018c16:	2100      	movs	r1, #0
 8018c18:	20e8      	movs	r0, #232	@ 0xe8
 8018c1a:	f7fa fb39 	bl	8013290 <nema_reg_write>
 8018c1e:	2100      	movs	r1, #0
 8018c20:	20fc      	movs	r0, #252	@ 0xfc
 8018c22:	f7fa fb35 	bl	8013290 <nema_reg_write>
 8018c26:	2101      	movs	r1, #1
 8018c28:	f44f 7062 	mov.w	r0, #904	@ 0x388
 8018c2c:	f7fa fb30 	bl	8013290 <nema_reg_write>
 8018c30:	2000      	movs	r0, #0
 8018c32:	f001 f95b 	bl	8019eec <nema_set_interrupt_ctrl>
 8018c36:	f001 fe2b 	bl	801a890 <nema_blender_init>
 8018c3a:	2100      	movs	r1, #0
 8018c3c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018c40:	f001 fd32 	bl	801a6a8 <nema_cl_add_cmd>
 8018c44:	f04f 31ff 	mov.w	r1, #4294967295
 8018c48:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8018c4c:	f001 fd2c 	bl	801a6a8 <nema_cl_add_cmd>
 8018c50:	f000 ff04 	bl	8019a5c <nema_readHwConfig>
 8018c54:	f410 2080 	ands.w	r0, r0, #262144	@ 0x40000
 8018c58:	d015      	beq.n	8018c86 <init_nema_regs+0x72>
 8018c5a:	2007      	movs	r0, #7
 8018c5c:	f001 f892 	bl	8019d84 <nema_set_depth_ctrl>
 8018c60:	2300      	movs	r3, #0
 8018c62:	4c10      	ldr	r4, [pc, #64]	@ (8018ca4 <init_nema_regs+0x90>)
 8018c64:	7820      	ldrb	r0, [r4, #0]
 8018c66:	7063      	strb	r3, [r4, #1]
 8018c68:	f000 ff0a 	bl	8019a80 <nema_enable_tiling>
 8018c6c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8018c70:	2500      	movs	r5, #0
 8018c72:	6962      	ldr	r2, [r4, #20]
 8018c74:	430b      	orrs	r3, r1
 8018c76:	4313      	orrs	r3, r2
 8018c78:	e9c4 5303 	strd	r5, r3, [r4, #12]
 8018c7c:	f000 fefc 	bl	8019a78 <nema_readHwConfigH>
 8018c80:	0583      	lsls	r3, r0, #22
 8018c82:	d403      	bmi.n	8018c8c <init_nema_regs+0x78>
 8018c84:	bd38      	pop	{r3, r4, r5, pc}
 8018c86:	4c07      	ldr	r4, [pc, #28]	@ (8018ca4 <init_nema_regs+0x90>)
 8018c88:	70a0      	strb	r0, [r4, #2]
 8018c8a:	e7ef      	b.n	8018c6c <init_nema_regs+0x58>
 8018c8c:	4629      	mov	r1, r5
 8018c8e:	f44f 705d 	mov.w	r0, #884	@ 0x374
 8018c92:	f7fa fafd 	bl	8013290 <nema_reg_write>
 8018c96:	4629      	mov	r1, r5
 8018c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c9c:	f44f 705a 	mov.w	r0, #872	@ 0x368
 8018ca0:	f7fa baf6 	b.w	8013290 <nema_reg_write>
 8018ca4:	20000024 	.word	0x20000024

08018ca8 <nema_init>:
 8018ca8:	b510      	push	{r4, lr}
 8018caa:	f7fa fa7b 	bl	80131a4 <nema_sys_init>
 8018cae:	1e04      	subs	r4, r0, #0
 8018cb0:	db11      	blt.n	8018cd6 <nema_init+0x2e>
 8018cb2:	f44f 70f6 	mov.w	r0, #492	@ 0x1ec
 8018cb6:	f7fa fadb 	bl	8013270 <nema_reg_read>
 8018cba:	4b10      	ldr	r3, [pc, #64]	@ (8018cfc <nema_init+0x54>)
 8018cbc:	4298      	cmp	r0, r3
 8018cbe:	d114      	bne.n	8018cea <nema_init+0x42>
 8018cc0:	f001 fc04 	bl	801a4cc <nema_cl_unbind>
 8018cc4:	22d0      	movs	r2, #208	@ 0xd0
 8018cc6:	2100      	movs	r1, #0
 8018cc8:	480d      	ldr	r0, [pc, #52]	@ (8018d00 <nema_init+0x58>)
 8018cca:	f012 fa96 	bl	802b1fa <memset>
 8018cce:	b14c      	cbz	r4, 8018ce4 <nema_init+0x3c>
 8018cd0:	2400      	movs	r4, #0
 8018cd2:	4620      	mov	r0, r4
 8018cd4:	bd10      	pop	{r4, pc}
 8018cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8018d00 <nema_init+0x58>)
 8018cd8:	4620      	mov	r0, r4
 8018cda:	6993      	ldr	r3, [r2, #24]
 8018cdc:	f043 0301 	orr.w	r3, r3, #1
 8018ce0:	6193      	str	r3, [r2, #24]
 8018ce2:	bd10      	pop	{r4, pc}
 8018ce4:	f7ff ff96 	bl	8018c14 <init_nema_regs>
 8018ce8:	e7f3      	b.n	8018cd2 <nema_init+0x2a>
 8018cea:	4a05      	ldr	r2, [pc, #20]	@ (8018d00 <nema_init+0x58>)
 8018cec:	f04f 34ff 	mov.w	r4, #4294967295
 8018cf0:	6993      	ldr	r3, [r2, #24]
 8018cf2:	f043 0302 	orr.w	r3, r3, #2
 8018cf6:	6193      	str	r3, [r2, #24]
 8018cf8:	e7eb      	b.n	8018cd2 <nema_init+0x2a>
 8018cfa:	bf00      	nop
 8018cfc:	86362000 	.word	0x86362000
 8018d00:	20000024 	.word	0x20000024

08018d04 <nema_set_error>:
 8018d04:	4a02      	ldr	r2, [pc, #8]	@ (8018d10 <nema_set_error+0xc>)
 8018d06:	6993      	ldr	r3, [r2, #24]
 8018d08:	4318      	orrs	r0, r3
 8018d0a:	6190      	str	r0, [r2, #24]
 8018d0c:	4770      	bx	lr
 8018d0e:	bf00      	nop
 8018d10:	20000024 	.word	0x20000024

08018d14 <nema_set_tex_color>:
 8018d14:	4601      	mov	r1, r0
 8018d16:	201c      	movs	r0, #28
 8018d18:	f001 bcc6 	b.w	801a6a8 <nema_cl_add_cmd>

08018d1c <nema_set_const_reg>:
 8018d1c:	3080      	adds	r0, #128	@ 0x80
 8018d1e:	0080      	lsls	r0, r0, #2
 8018d20:	f5b0 7f03 	cmp.w	r0, #524	@ 0x20c
 8018d24:	d900      	bls.n	8018d28 <nema_set_const_reg+0xc>
 8018d26:	4770      	bx	lr
 8018d28:	f001 bcbe 	b.w	801a6a8 <nema_cl_add_cmd>

08018d2c <nema_set_clip>:
 8018d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2e:	460c      	mov	r4, r1
 8018d30:	4607      	mov	r7, r0
 8018d32:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 8018d36:	4d0c      	ldr	r5, [pc, #48]	@ (8018d68 <nema_set_clip+0x3c>)
 8018d38:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8018d3c:	b289      	uxth	r1, r1
 8018d3e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018d42:	19d6      	adds	r6, r2, r7
 8018d44:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8018d48:	e9c5 7407 	strd	r7, r4, [r5, #28]
 8018d4c:	e9c5 2309 	strd	r2, r3, [r5, #36]	@ 0x24
 8018d50:	441c      	add	r4, r3
 8018d52:	f001 fca9 	bl	801a6a8 <nema_cl_add_cmd>
 8018d56:	b2b1      	uxth	r1, r6
 8018d58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018d5c:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8018d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018d64:	f001 bca0 	b.w	801a6a8 <nema_cl_add_cmd>
 8018d68:	20000024 	.word	0x20000024

08018d6c <nema_enable_gradient>:
 8018d6c:	2800      	cmp	r0, #0
 8018d6e:	bf14      	ite	ne
 8018d70:	f04f 6100 	movne.w	r1, #134217728	@ 0x8000000
 8018d74:	2100      	moveq	r1, #0
 8018d76:	b410      	push	{r4}
 8018d78:	4a05      	ldr	r2, [pc, #20]	@ (8018d90 <nema_enable_gradient+0x24>)
 8018d7a:	6950      	ldr	r0, [r2, #20]
 8018d7c:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
 8018d80:	4323      	orrs	r3, r4
 8018d82:	4303      	orrs	r3, r0
 8018d84:	430b      	orrs	r3, r1
 8018d86:	e9c2 1303 	strd	r1, r3, [r2, #12]
 8018d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d8e:	4770      	bx	lr
 8018d90:	20000024 	.word	0x20000024

08018d94 <nema_rgba>:
 8018d94:	061b      	lsls	r3, r3, #24
 8018d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d9a:	4318      	orrs	r0, r3
 8018d9c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8018da0:	4770      	bx	lr
 8018da2:	bf00      	nop

08018da4 <nema_bind_src_tex>:
 8018da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da8:	9c06      	ldr	r4, [sp, #24]
 8018daa:	460e      	mov	r6, r1
 8018dac:	1c61      	adds	r1, r4, #1
 8018dae:	4605      	mov	r5, r0
 8018db0:	4617      	mov	r7, r2
 8018db2:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018db6:	d022      	beq.n	8018dfe <nema_bind_src_tex+0x5a>
 8018db8:	2201      	movs	r2, #1
 8018dba:	0400      	lsls	r0, r0, #16
 8018dbc:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8018ea8 <nema_bind_src_tex+0x104>
 8018dc0:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 8018dc4:	b2a4      	uxth	r4, r4
 8018dc6:	4323      	orrs	r3, r4
 8018dc8:	2003      	movs	r0, #3
 8018dca:	f8c8 3050 	str.w	r3, [r8, #80]	@ 0x50
 8018dce:	e9c8 5611 	strd	r5, r6, [r8, #68]	@ 0x44
 8018dd2:	f8c8 704c 	str.w	r7, [r8, #76]	@ 0x4c
 8018dd6:	f8c8 2054 	str.w	r2, [r8, #84]	@ 0x54
 8018dda:	f001 fc09 	bl	801a5f0 <nema_cl_get_space>
 8018dde:	b160      	cbz	r0, 8018dfa <nema_bind_src_tex+0x56>
 8018de0:	2110      	movs	r1, #16
 8018de2:	2214      	movs	r2, #20
 8018de4:	2318      	movs	r3, #24
 8018de6:	e9c0 1500 	strd	r1, r5, [r0]
 8018dea:	6082      	str	r2, [r0, #8]
 8018dec:	f8d8 2050 	ldr.w	r2, [r8, #80]	@ 0x50
 8018df0:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8018df4:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8018df8:	6146      	str	r6, [r0, #20]
 8018dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dfe:	06c2      	lsls	r2, r0, #27
 8018e00:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8018e04:	d428      	bmi.n	8018e58 <nema_bind_src_tex+0xb4>
 8018e06:	4634      	mov	r4, r6
 8018e08:	f1a1 020b 	sub.w	r2, r1, #11
 8018e0c:	2a42      	cmp	r2, #66	@ 0x42
 8018e0e:	d83f      	bhi.n	8018e90 <nema_bind_src_tex+0xec>
 8018e10:	e8df f002 	tbb	[pc, r2]
 8018e14:	3e3e3636 	.word	0x3e3e3636
 8018e18:	3c3e3e3e 	.word	0x3c3e3e3e
 8018e1c:	283e3e3e 	.word	0x283e3e3e
 8018e20:	3e3e3e28 	.word	0x3e3e3e28
 8018e24:	3e3e3e3e 	.word	0x3e3e3e3e
 8018e28:	3e3e3e3e 	.word	0x3e3e3e3e
 8018e2c:	3e3e3e3e 	.word	0x3e3e3e3e
 8018e30:	36302b36 	.word	0x36302b36
 8018e34:	3e3e302b 	.word	0x3e3e302b
 8018e38:	3e2b2b3e 	.word	0x3e2b2b3e
 8018e3c:	3e30303e 	.word	0x3e30303e
 8018e40:	3e3e3e3e 	.word	0x3e3e3e3e
 8018e44:	3e3e3e3e 	.word	0x3e3e3e3e
 8018e48:	3e3e3e3e 	.word	0x3e3e3e3e
 8018e4c:	3e3e3e3e 	.word	0x3e3e3e3e
 8018e50:	3e3e3e3e 	.word	0x3e3e3e3e
 8018e54:	283e      	.short	0x283e
 8018e56:	28          	.byte	0x28
 8018e57:	00          	.byte	0x00
 8018e58:	1cf4      	adds	r4, r6, #3
 8018e5a:	bf48      	it	mi
 8018e5c:	1db4      	addmi	r4, r6, #6
 8018e5e:	f024 0403 	bic.w	r4, r4, #3
 8018e62:	e7d1      	b.n	8018e08 <nema_bind_src_tex+0x64>
 8018e64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018e68:	e7a6      	b.n	8018db8 <nema_bind_src_tex+0x14>
 8018e6a:	0062      	lsls	r2, r4, #1
 8018e6c:	1dd4      	adds	r4, r2, #7
 8018e6e:	d404      	bmi.n	8018e7a <nema_bind_src_tex+0xd6>
 8018e70:	10e4      	asrs	r4, r4, #3
 8018e72:	e7a1      	b.n	8018db8 <nema_bind_src_tex+0x14>
 8018e74:	00a2      	lsls	r2, r4, #2
 8018e76:	1dd4      	adds	r4, r2, #7
 8018e78:	d5fa      	bpl.n	8018e70 <nema_bind_src_tex+0xcc>
 8018e7a:	f102 040e 	add.w	r4, r2, #14
 8018e7e:	e7f7      	b.n	8018e70 <nema_bind_src_tex+0xcc>
 8018e80:	1de2      	adds	r2, r4, #7
 8018e82:	bf48      	it	mi
 8018e84:	f104 020e 	addmi.w	r2, r4, #14
 8018e88:	10d4      	asrs	r4, r2, #3
 8018e8a:	e795      	b.n	8018db8 <nema_bind_src_tex+0x14>
 8018e8c:	0064      	lsls	r4, r4, #1
 8018e8e:	e793      	b.n	8018db8 <nema_bind_src_tex+0x14>
 8018e90:	3904      	subs	r1, #4
 8018e92:	2949      	cmp	r1, #73	@ 0x49
 8018e94:	bf8e      	itee	hi
 8018e96:	2204      	movhi	r2, #4
 8018e98:	4a02      	ldrls	r2, [pc, #8]	@ (8018ea4 <nema_bind_src_tex+0x100>)
 8018e9a:	5652      	ldrsbls	r2, [r2, r1]
 8018e9c:	fb02 f404 	mul.w	r4, r2, r4
 8018ea0:	e78a      	b.n	8018db8 <nema_bind_src_tex+0x14>
 8018ea2:	bf00      	nop
 8018ea4:	0802d8ec 	.word	0x0802d8ec
 8018ea8:	20000024 	.word	0x20000024

08018eac <nema_bind_dst_tex>:
 8018eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018eb0:	9d08      	ldr	r5, [sp, #32]
 8018eb2:	4699      	mov	r9, r3
 8018eb4:	4617      	mov	r7, r2
 8018eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018eba:	1c6b      	adds	r3, r5, #1
 8018ebc:	4680      	mov	r8, r0
 8018ebe:	460e      	mov	r6, r1
 8018ec0:	d031      	beq.n	8018f26 <nema_bind_dst_tex+0x7a>
 8018ec2:	2a12      	cmp	r2, #18
 8018ec4:	d00e      	beq.n	8018ee4 <nema_bind_dst_tex+0x38>
 8018ec6:	f1a2 0316 	sub.w	r3, r2, #22
 8018eca:	2b01      	cmp	r3, #1
 8018ecc:	d90a      	bls.n	8018ee4 <nema_bind_dst_tex+0x38>
 8018ece:	3a4c      	subs	r2, #76	@ 0x4c
 8018ed0:	2a01      	cmp	r2, #1
 8018ed2:	f240 80b7 	bls.w	8019044 <nema_bind_dst_tex+0x198>
 8018ed6:	4c6e      	ldr	r4, [pc, #440]	@ (8019090 <nema_bind_dst_tex+0x1e4>)
 8018ed8:	7860      	ldrb	r0, [r4, #1]
 8018eda:	f000 fdd1 	bl	8019a80 <nema_enable_tiling>
 8018ede:	e007      	b.n	8018ef0 <nema_bind_dst_tex+0x44>
 8018ee0:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	4c6a      	ldr	r4, [pc, #424]	@ (8019090 <nema_bind_dst_tex+0x1e4>)
 8018ee8:	4618      	mov	r0, r3
 8018eea:	7023      	strb	r3, [r4, #0]
 8018eec:	f000 fdc8 	bl	8019a80 <nema_enable_tiling>
 8018ef0:	2201      	movs	r2, #1
 8018ef2:	b2ad      	uxth	r5, r5
 8018ef4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8018ef8:	2003      	movs	r0, #3
 8018efa:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8018efc:	e9c4 860c 	strd	r8, r6, [r4, #48]	@ 0x30
 8018f00:	63a7      	str	r7, [r4, #56]	@ 0x38
 8018f02:	6422      	str	r2, [r4, #64]	@ 0x40
 8018f04:	f001 fb74 	bl	801a5f0 <nema_cl_get_space>
 8018f08:	b158      	cbz	r0, 8018f22 <nema_bind_dst_tex+0x76>
 8018f0a:	2100      	movs	r1, #0
 8018f0c:	2204      	movs	r2, #4
 8018f0e:	2308      	movs	r3, #8
 8018f10:	e9c0 1800 	strd	r1, r8, [r0]
 8018f14:	6082      	str	r2, [r0, #8]
 8018f16:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8018f18:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8018f1c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8018f20:	6146      	str	r6, [r0, #20]
 8018f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f26:	f1a2 030b 	sub.w	r3, r2, #11
 8018f2a:	2b42      	cmp	r3, #66	@ 0x42
 8018f2c:	f200 80a6 	bhi.w	801907c <nema_bind_dst_tex+0x1d0>
 8018f30:	a101      	add	r1, pc, #4	@ (adr r1, 8018f38 <nema_bind_dst_tex+0x8c>)
 8018f32:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018f36:	bf00      	nop
 8018f38:	0801906f 	.word	0x0801906f
 8018f3c:	0801906f 	.word	0x0801906f
 8018f40:	0801907d 	.word	0x0801907d
 8018f44:	0801907d 	.word	0x0801907d
 8018f48:	0801907d 	.word	0x0801907d
 8018f4c:	0801907d 	.word	0x0801907d
 8018f50:	0801907d 	.word	0x0801907d
 8018f54:	08019079 	.word	0x08019079
 8018f58:	0801907d 	.word	0x0801907d
 8018f5c:	0801907d 	.word	0x0801907d
 8018f60:	0801907d 	.word	0x0801907d
 8018f64:	08018ee1 	.word	0x08018ee1
 8018f68:	08018ee1 	.word	0x08018ee1
 8018f6c:	0801907d 	.word	0x0801907d
 8018f70:	0801907d 	.word	0x0801907d
 8018f74:	0801907d 	.word	0x0801907d
 8018f78:	0801907d 	.word	0x0801907d
 8018f7c:	0801907d 	.word	0x0801907d
 8018f80:	0801907d 	.word	0x0801907d
 8018f84:	0801907d 	.word	0x0801907d
 8018f88:	0801907d 	.word	0x0801907d
 8018f8c:	0801907d 	.word	0x0801907d
 8018f90:	0801907d 	.word	0x0801907d
 8018f94:	0801907d 	.word	0x0801907d
 8018f98:	0801907d 	.word	0x0801907d
 8018f9c:	0801907d 	.word	0x0801907d
 8018fa0:	0801907d 	.word	0x0801907d
 8018fa4:	0801907d 	.word	0x0801907d
 8018fa8:	0801906f 	.word	0x0801906f
 8018fac:	08019059 	.word	0x08019059
 8018fb0:	08019063 	.word	0x08019063
 8018fb4:	0801906f 	.word	0x0801906f
 8018fb8:	08019059 	.word	0x08019059
 8018fbc:	08019063 	.word	0x08019063
 8018fc0:	0801907d 	.word	0x0801907d
 8018fc4:	0801907d 	.word	0x0801907d
 8018fc8:	0801907d 	.word	0x0801907d
 8018fcc:	08019059 	.word	0x08019059
 8018fd0:	08019059 	.word	0x08019059
 8018fd4:	0801907d 	.word	0x0801907d
 8018fd8:	0801907d 	.word	0x0801907d
 8018fdc:	08019063 	.word	0x08019063
 8018fe0:	08019063 	.word	0x08019063
 8018fe4:	0801907d 	.word	0x0801907d
 8018fe8:	0801907d 	.word	0x0801907d
 8018fec:	0801907d 	.word	0x0801907d
 8018ff0:	0801907d 	.word	0x0801907d
 8018ff4:	0801907d 	.word	0x0801907d
 8018ff8:	0801907d 	.word	0x0801907d
 8018ffc:	0801907d 	.word	0x0801907d
 8019000:	0801907d 	.word	0x0801907d
 8019004:	0801907d 	.word	0x0801907d
 8019008:	0801907d 	.word	0x0801907d
 801900c:	0801907d 	.word	0x0801907d
 8019010:	0801907d 	.word	0x0801907d
 8019014:	0801907d 	.word	0x0801907d
 8019018:	0801907d 	.word	0x0801907d
 801901c:	0801907d 	.word	0x0801907d
 8019020:	0801907d 	.word	0x0801907d
 8019024:	0801907d 	.word	0x0801907d
 8019028:	0801907d 	.word	0x0801907d
 801902c:	0801907d 	.word	0x0801907d
 8019030:	0801907d 	.word	0x0801907d
 8019034:	0801907d 	.word	0x0801907d
 8019038:	0801907d 	.word	0x0801907d
 801903c:	08019053 	.word	0x08019053
 8019040:	08019053 	.word	0x08019053
 8019044:	2301      	movs	r3, #1
 8019046:	4c12      	ldr	r4, [pc, #72]	@ (8019090 <nema_bind_dst_tex+0x1e4>)
 8019048:	4618      	mov	r0, r3
 801904a:	7023      	strb	r3, [r4, #0]
 801904c:	f000 fd2c 	bl	8019aa8 <nema_enable_tiling_2x2>
 8019050:	e74e      	b.n	8018ef0 <nema_bind_dst_tex+0x44>
 8019052:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8019056:	e734      	b.n	8018ec2 <nema_bind_dst_tex+0x16>
 8019058:	0073      	lsls	r3, r6, #1
 801905a:	1ddd      	adds	r5, r3, #7
 801905c:	d404      	bmi.n	8019068 <nema_bind_dst_tex+0x1bc>
 801905e:	10ed      	asrs	r5, r5, #3
 8019060:	e72f      	b.n	8018ec2 <nema_bind_dst_tex+0x16>
 8019062:	00b3      	lsls	r3, r6, #2
 8019064:	1ddd      	adds	r5, r3, #7
 8019066:	d5fa      	bpl.n	801905e <nema_bind_dst_tex+0x1b2>
 8019068:	f103 050e 	add.w	r5, r3, #14
 801906c:	e7f7      	b.n	801905e <nema_bind_dst_tex+0x1b2>
 801906e:	1df5      	adds	r5, r6, #7
 8019070:	d5f5      	bpl.n	801905e <nema_bind_dst_tex+0x1b2>
 8019072:	f106 050e 	add.w	r5, r6, #14
 8019076:	e7f2      	b.n	801905e <nema_bind_dst_tex+0x1b2>
 8019078:	0075      	lsls	r5, r6, #1
 801907a:	e733      	b.n	8018ee4 <nema_bind_dst_tex+0x38>
 801907c:	1f13      	subs	r3, r2, #4
 801907e:	2b49      	cmp	r3, #73	@ 0x49
 8019080:	bf8e      	itee	hi
 8019082:	2504      	movhi	r5, #4
 8019084:	4903      	ldrls	r1, [pc, #12]	@ (8019094 <nema_bind_dst_tex+0x1e8>)
 8019086:	56cd      	ldrsbls	r5, [r1, r3]
 8019088:	fb05 f506 	mul.w	r5, r5, r6
 801908c:	e719      	b.n	8018ec2 <nema_bind_dst_tex+0x16>
 801908e:	bf00      	nop
 8019090:	20000024 	.word	0x20000024
 8019094:	0802d8ec 	.word	0x0802d8ec

08019098 <nema_fill_rect>:
 8019098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801909c:	4604      	mov	r4, r0
 801909e:	460d      	mov	r5, r1
 80190a0:	4616      	mov	r6, r2
 80190a2:	461f      	mov	r7, r3
 80190a4:	9806      	ldr	r0, [sp, #24]
 80190a6:	f000 fe73 	bl	8019d90 <nema_set_raster_color>
 80190aa:	463b      	mov	r3, r7
 80190ac:	4632      	mov	r2, r6
 80190ae:	4629      	mov	r1, r5
 80190b0:	4620      	mov	r0, r4
 80190b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190b6:	f000 bead 	b.w	8019e14 <nema_raster_rect>
 80190ba:	bf00      	nop

080190bc <nema_blit>:
 80190bc:	ee07 0a90 	vmov	s15, r0
 80190c0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80190c4:	ee07 1a90 	vmov	s15, r1
 80190c8:	b500      	push	{lr}
 80190ca:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80190ce:	b083      	sub	sp, #12
 80190d0:	e9cd 0100 	strd	r0, r1, [sp]
 80190d4:	f000 fdf6 	bl	8019cc4 <nema_set_matrix_translate>
 80190d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80190dc:	4a03      	ldr	r2, [pc, #12]	@ (80190ec <nema_blit+0x30>)
 80190de:	e9d2 2312 	ldrd	r2, r3, [r2, #72]	@ 0x48
 80190e2:	b003      	add	sp, #12
 80190e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80190e8:	f000 be94 	b.w	8019e14 <nema_raster_rect>
 80190ec:	20000024 	.word	0x20000024

080190f0 <nema_blit_rotate>:
 80190f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190f2:	2600      	movs	r6, #0
 80190f4:	f04f 577e 	mov.w	r7, #1065353216	@ 0x3f800000
 80190f8:	4b68      	ldr	r3, [pc, #416]	@ (801929c <nema_blit_rotate+0x1ac>)
 80190fa:	b08b      	sub	sp, #44	@ 0x2c
 80190fc:	3a01      	subs	r2, #1
 80190fe:	9607      	str	r6, [sp, #28]
 8019100:	9608      	str	r6, [sp, #32]
 8019102:	9709      	str	r7, [sp, #36]	@ 0x24
 8019104:	4604      	mov	r4, r0
 8019106:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	@ 0x48
 801910a:	460d      	mov	r5, r1
 801910c:	2a0e      	cmp	r2, #14
 801910e:	f200 80b0 	bhi.w	8019272 <nema_blit_rotate+0x182>
 8019112:	e8df f002 	tbb	[pc, r2]
 8019116:	4730      	.short	0x4730
 8019118:	9a836f58 	.word	0x9a836f58
 801911c:	6f089a08 	.word	0x6f089a08
 8019120:	ae584783 	.word	0xae584783
 8019124:	30          	.byte	0x30
 8019125:	00          	.byte	0x00
 8019126:	1970      	adds	r0, r6, r5
 8019128:	ee07 0a10 	vmov	s14, r0
 801912c:	1938      	adds	r0, r7, r4
 801912e:	4631      	mov	r1, r6
 8019130:	ee07 0a90 	vmov	s15, r0
 8019134:	2200      	movs	r2, #0
 8019136:	463e      	mov	r6, r7
 8019138:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801913c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019140:	460f      	mov	r7, r1
 8019142:	4b57      	ldr	r3, [pc, #348]	@ (80192a0 <nema_blit_rotate+0x1b0>)
 8019144:	9201      	str	r2, [sp, #4]
 8019146:	9205      	str	r2, [sp, #20]
 8019148:	9302      	str	r3, [sp, #8]
 801914a:	9304      	str	r3, [sp, #16]
 801914c:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80192a4 <nema_blit_rotate+0x1b4>
 8019150:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019158:	a801      	add	r0, sp, #4
 801915a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801915e:	edcd 7a06 	vstr	s15, [sp, #24]
 8019162:	f000 fcf5 	bl	8019b50 <nema_set_matrix>
 8019166:	463b      	mov	r3, r7
 8019168:	4632      	mov	r2, r6
 801916a:	4629      	mov	r1, r5
 801916c:	4620      	mov	r0, r4
 801916e:	f000 fe51 	bl	8019e14 <nema_raster_rect>
 8019172:	b00b      	add	sp, #44	@ 0x2c
 8019174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019176:	ee07 4a90 	vmov	s15, r4
 801917a:	4630      	mov	r0, r6
 801917c:	442e      	add	r6, r5
 801917e:	2300      	movs	r3, #0
 8019180:	ee07 6a10 	vmov	s14, r6
 8019184:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8019188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801918c:	4944      	ldr	r1, [pc, #272]	@ (80192a0 <nema_blit_rotate+0x1b0>)
 801918e:	463e      	mov	r6, r7
 8019190:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019194:	9301      	str	r3, [sp, #4]
 8019196:	4607      	mov	r7, r0
 8019198:	9305      	str	r3, [sp, #20]
 801919a:	9102      	str	r1, [sp, #8]
 801919c:	9204      	str	r2, [sp, #16]
 801919e:	eef1 7a67 	vneg.f32	s15, s15
 80191a2:	e7d3      	b.n	801914c <nema_blit_rotate+0x5c>
 80191a4:	4b3e      	ldr	r3, [pc, #248]	@ (80192a0 <nema_blit_rotate+0x1b0>)
 80191a6:	2200      	movs	r2, #0
 80191a8:	9301      	str	r3, [sp, #4]
 80191aa:	9305      	str	r3, [sp, #20]
 80191ac:	1833      	adds	r3, r6, r0
 80191ae:	ee07 3a90 	vmov	s15, r3
 80191b2:	1878      	adds	r0, r7, r1
 80191b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80191b8:	ee07 0a90 	vmov	s15, r0
 80191bc:	9202      	str	r2, [sp, #8]
 80191be:	9204      	str	r2, [sp, #16]
 80191c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191c4:	e7c2      	b.n	801914c <nema_blit_rotate+0x5c>
 80191c6:	ee07 5a10 	vmov	s14, r5
 80191ca:	4630      	mov	r0, r6
 80191cc:	193e      	adds	r6, r7, r4
 80191ce:	2300      	movs	r3, #0
 80191d0:	ee07 6a90 	vmov	s15, r6
 80191d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80191d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80191dc:	4a30      	ldr	r2, [pc, #192]	@ (80192a0 <nema_blit_rotate+0x1b0>)
 80191de:	463e      	mov	r6, r7
 80191e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191e4:	4607      	mov	r7, r0
 80191e6:	9301      	str	r3, [sp, #4]
 80191e8:	9305      	str	r3, [sp, #20]
 80191ea:	9102      	str	r1, [sp, #8]
 80191ec:	eeb1 7a47 	vneg.f32	s14, s14
 80191f0:	9204      	str	r2, [sp, #16]
 80191f2:	e7ab      	b.n	801914c <nema_blit_rotate+0x5c>
 80191f4:	ee07 4a90 	vmov	s15, r4
 80191f8:	1978      	adds	r0, r7, r5
 80191fa:	2300      	movs	r3, #0
 80191fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019200:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8019204:	ee07 0a90 	vmov	s15, r0
 8019208:	4a25      	ldr	r2, [pc, #148]	@ (80192a0 <nema_blit_rotate+0x1b0>)
 801920a:	9101      	str	r1, [sp, #4]
 801920c:	9302      	str	r3, [sp, #8]
 801920e:	9304      	str	r3, [sp, #16]
 8019210:	eeb1 7a47 	vneg.f32	s14, s14
 8019214:	9205      	str	r2, [sp, #20]
 8019216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801921a:	e797      	b.n	801914c <nema_blit_rotate+0x5c>
 801921c:	ee07 5a90 	vmov	s15, r5
 8019220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019224:	ee07 0a90 	vmov	s15, r0
 8019228:	4631      	mov	r1, r6
 801922a:	2200      	movs	r2, #0
 801922c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8019230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019234:	463e      	mov	r6, r7
 8019236:	eeb1 7a47 	vneg.f32	s14, s14
 801923a:	460f      	mov	r7, r1
 801923c:	eef1 7a67 	vneg.f32	s15, s15
 8019240:	9201      	str	r2, [sp, #4]
 8019242:	9205      	str	r2, [sp, #20]
 8019244:	9302      	str	r3, [sp, #8]
 8019246:	9304      	str	r3, [sp, #16]
 8019248:	e780      	b.n	801914c <nema_blit_rotate+0x5c>
 801924a:	ee07 5a90 	vmov	s15, r5
 801924e:	1830      	adds	r0, r6, r0
 8019250:	2300      	movs	r3, #0
 8019252:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8019256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801925a:	ee07 0a10 	vmov	s14, r0
 801925e:	4910      	ldr	r1, [pc, #64]	@ (80192a0 <nema_blit_rotate+0x1b0>)
 8019260:	9302      	str	r3, [sp, #8]
 8019262:	9101      	str	r1, [sp, #4]
 8019264:	9304      	str	r3, [sp, #16]
 8019266:	9205      	str	r2, [sp, #20]
 8019268:	eef1 7a67 	vneg.f32	s15, s15
 801926c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019270:	e76c      	b.n	801914c <nema_blit_rotate+0x5c>
 8019272:	ee07 0a90 	vmov	s15, r0
 8019276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801927a:	ee07 1a90 	vmov	s15, r1
 801927e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8019282:	2300      	movs	r3, #0
 8019284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019288:	9201      	str	r2, [sp, #4]
 801928a:	9205      	str	r2, [sp, #20]
 801928c:	9302      	str	r3, [sp, #8]
 801928e:	9304      	str	r3, [sp, #16]
 8019290:	eeb1 7a47 	vneg.f32	s14, s14
 8019294:	eef1 7a67 	vneg.f32	s15, s15
 8019298:	e758      	b.n	801914c <nema_blit_rotate+0x5c>
 801929a:	bf00      	nop
 801929c:	20000024 	.word	0x20000024
 80192a0:	bf800000 	.word	0xbf800000
 80192a4:	00000000 	.word	0x00000000

080192a8 <nema_blit_tri_fit>:
 80192a8:	2803      	cmp	r0, #3
 80192aa:	d801      	bhi.n	80192b0 <nema_blit_tri_fit+0x8>
 80192ac:	2903      	cmp	r1, #3
 80192ae:	d900      	bls.n	80192b2 <nema_blit_tri_fit+0xa>
 80192b0:	4770      	bx	lr
 80192b2:	2a03      	cmp	r2, #3
 80192b4:	d8fc      	bhi.n	80192b0 <nema_blit_tri_fit+0x8>
 80192b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192ba:	460c      	mov	r4, r1
 80192bc:	493b      	ldr	r1, [pc, #236]	@ (80193ac <nema_blit_tri_fit+0x104>)
 80192be:	4603      	mov	r3, r0
 80192c0:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 80192c4:	ee07 0a90 	vmov	s15, r0
 80192c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80192cc:	ee07 1a90 	vmov	s15, r1
 80192d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192d4:	b08a      	sub	sp, #40	@ 0x28
 80192d6:	f04f 0c00 	mov.w	ip, #0
 80192da:	edcd 7a08 	vstr	s15, [sp, #32]
 80192de:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 80192e2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80192e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80192ea:	ed8d 7a04 	vstr	s14, [sp, #16]
 80192ee:	ee12 8a10 	vmov	r8, s4
 80192f2:	ee11 9a90 	vmov	r9, s3
 80192f6:	ee11 aa10 	vmov	sl, s2
 80192fa:	ee10 6a10 	vmov	r6, s0
 80192fe:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 8019302:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8019306:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801930a:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801930e:	f8cd c008 	str.w	ip, [sp, #8]
 8019312:	f8cd c014 	str.w	ip, [sp, #20]
 8019316:	f8cd c018 	str.w	ip, [sp, #24]
 801931a:	f8cd c01c 	str.w	ip, [sp, #28]
 801931e:	ed52 6a08 	vldr	s13, [r2, #-32]	@ 0xffffffe0
 8019322:	ed14 4a08 	vldr	s8, [r4, #-32]	@ 0xffffffe0
 8019326:	ed53 1a08 	vldr	s3, [r3, #-32]	@ 0xffffffe0
 801932a:	ed12 7a04 	vldr	s14, [r2, #-16]
 801932e:	ed54 4a04 	vldr	s9, [r4, #-16]
 8019332:	ed13 2a04 	vldr	s4, [r3, #-16]
 8019336:	eef0 5a62 	vmov.f32	s11, s5
 801933a:	ee05 8a10 	vmov	s10, r8
 801933e:	ee03 9a10 	vmov	s6, r9
 8019342:	eef0 3a46 	vmov.f32	s7, s12
 8019346:	eeb0 1a46 	vmov.f32	s2, s12
 801934a:	ee12 7a90 	vmov	r7, s5
 801934e:	ee02 aa90 	vmov	s5, sl
 8019352:	ee10 5a90 	vmov	r5, s1
 8019356:	f000 f889 	bl	801946c <nema_interpolate_tx_ty>
 801935a:	ee00 6a10 	vmov	s0, r6
 801935e:	f000 f90f 	bl	8019580 <nema_f2fx>
 8019362:	ee00 5a10 	vmov	s0, r5
 8019366:	4604      	mov	r4, r0
 8019368:	f000 f90a 	bl	8019580 <nema_f2fx>
 801936c:	ee00 aa10 	vmov	s0, sl
 8019370:	4605      	mov	r5, r0
 8019372:	f000 f905 	bl	8019580 <nema_f2fx>
 8019376:	ee00 9a10 	vmov	s0, r9
 801937a:	4606      	mov	r6, r0
 801937c:	f000 f900 	bl	8019580 <nema_f2fx>
 8019380:	ee00 8a10 	vmov	s0, r8
 8019384:	4681      	mov	r9, r0
 8019386:	f000 f8fb 	bl	8019580 <nema_f2fx>
 801938a:	ee00 7a10 	vmov	s0, r7
 801938e:	4680      	mov	r8, r0
 8019390:	f000 f8f6 	bl	8019580 <nema_f2fx>
 8019394:	464b      	mov	r3, r9
 8019396:	e9cd 8000 	strd	r8, r0, [sp]
 801939a:	4632      	mov	r2, r6
 801939c:	4629      	mov	r1, r5
 801939e:	4620      	mov	r0, r4
 80193a0:	f000 fcfc 	bl	8019d9c <nema_raster_triangle_fx>
 80193a4:	b00a      	add	sp, #40	@ 0x28
 80193a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193aa:	bf00      	nop
 80193ac:	20000024 	.word	0x20000024

080193b0 <nema_blit_quad_fit>:
 80193b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193b4:	ed2d 8b08 	vpush	{d8-d11}
 80193b8:	4b2b      	ldr	r3, [pc, #172]	@ (8019468 <nema_blit_quad_fit+0xb8>)
 80193ba:	b08e      	sub	sp, #56	@ 0x38
 80193bc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80193c0:	aa05      	add	r2, sp, #20
 80193c2:	eef0 ba40 	vmov.f32	s23, s0
 80193c6:	eeb0 ba60 	vmov.f32	s22, s1
 80193ca:	eef0 aa41 	vmov.f32	s21, s2
 80193ce:	eeb0 aa61 	vmov.f32	s20, s3
 80193d2:	eef0 9a42 	vmov.f32	s19, s4
 80193d6:	eeb0 9a62 	vmov.f32	s18, s5
 80193da:	eef0 8a43 	vmov.f32	s17, s6
 80193de:	eeb0 8a63 	vmov.f32	s16, s7
 80193e2:	f000 f9d3 	bl	801978c <nema_mat3x3_quad_to_rect>
 80193e6:	b120      	cbz	r0, 80193f2 <nema_blit_quad_fit+0x42>
 80193e8:	b00e      	add	sp, #56	@ 0x38
 80193ea:	ecbd 8b08 	vpop	{d8-d11}
 80193ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193f2:	a805      	add	r0, sp, #20
 80193f4:	f000 fbac 	bl	8019b50 <nema_set_matrix>
 80193f8:	eeb0 0a6b 	vmov.f32	s0, s23
 80193fc:	f000 f8c0 	bl	8019580 <nema_f2fx>
 8019400:	eeb0 0a4b 	vmov.f32	s0, s22
 8019404:	4604      	mov	r4, r0
 8019406:	f000 f8bb 	bl	8019580 <nema_f2fx>
 801940a:	eeb0 0a6a 	vmov.f32	s0, s21
 801940e:	4605      	mov	r5, r0
 8019410:	f000 f8b6 	bl	8019580 <nema_f2fx>
 8019414:	eeb0 0a4a 	vmov.f32	s0, s20
 8019418:	4606      	mov	r6, r0
 801941a:	f000 f8b1 	bl	8019580 <nema_f2fx>
 801941e:	eeb0 0a69 	vmov.f32	s0, s19
 8019422:	4607      	mov	r7, r0
 8019424:	f000 f8ac 	bl	8019580 <nema_f2fx>
 8019428:	eeb0 0a49 	vmov.f32	s0, s18
 801942c:	4682      	mov	sl, r0
 801942e:	f000 f8a7 	bl	8019580 <nema_f2fx>
 8019432:	eeb0 0a68 	vmov.f32	s0, s17
 8019436:	4680      	mov	r8, r0
 8019438:	f000 f8a2 	bl	8019580 <nema_f2fx>
 801943c:	eeb0 0a48 	vmov.f32	s0, s16
 8019440:	4681      	mov	r9, r0
 8019442:	f000 f89d 	bl	8019580 <nema_f2fx>
 8019446:	f8cd a000 	str.w	sl, [sp]
 801944a:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801944e:	f8cd 8004 	str.w	r8, [sp, #4]
 8019452:	463b      	mov	r3, r7
 8019454:	4632      	mov	r2, r6
 8019456:	4629      	mov	r1, r5
 8019458:	4620      	mov	r0, r4
 801945a:	f000 fd05 	bl	8019e68 <nema_raster_quad_fx>
 801945e:	b00e      	add	sp, #56	@ 0x38
 8019460:	ecbd 8b08 	vpop	{d8-d11}
 8019464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019468:	20000024 	.word	0x20000024

0801946c <nema_interpolate_tx_ty>:
 801946c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8019470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019474:	d407      	bmi.n	8019486 <nema_interpolate_tx_ty+0x1a>
 8019476:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8019578 <nema_interpolate_tx_ty+0x10c>
 801947a:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019482:	d807      	bhi.n	8019494 <nema_interpolate_tx_ty+0x28>
 8019484:	4770      	bx	lr
 8019486:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 801957c <nema_interpolate_tx_ty+0x110>
 801948a:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801948e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019492:	daf7      	bge.n	8019484 <nema_interpolate_tx_ty+0x18>
 8019494:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 8019498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801949c:	d45b      	bmi.n	8019556 <nema_interpolate_tx_ty+0xea>
 801949e:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8019578 <nema_interpolate_tx_ty+0x10c>
 80194a2:	eef4 3ae7 	vcmpe.f32	s7, s15
 80194a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194aa:	d9eb      	bls.n	8019484 <nema_interpolate_tx_ty+0x18>
 80194ac:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80194b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194b4:	d457      	bmi.n	8019566 <nema_interpolate_tx_ty+0xfa>
 80194b6:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8019578 <nema_interpolate_tx_ty+0x10c>
 80194ba:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80194be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c2:	d9df      	bls.n	8019484 <nema_interpolate_tx_ty+0x18>
 80194c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80194c8:	b570      	push	{r4, r5, r6, lr}
 80194ca:	ee15 3a90 	vmov	r3, s11
 80194ce:	ee13 2a10 	vmov	r2, s6
 80194d2:	eec7 5a86 	vdiv.f32	s11, s15, s12
 80194d6:	ee87 3a81 	vdiv.f32	s6, s15, s2
 80194da:	ee15 4a10 	vmov	r4, s10
 80194de:	ee87 5aa3 	vdiv.f32	s10, s15, s7
 80194e2:	ee63 1a21 	vmul.f32	s3, s6, s3
 80194e6:	ee23 2a02 	vmul.f32	s4, s6, s4
 80194ea:	ee25 4a04 	vmul.f32	s8, s10, s8
 80194ee:	ee65 4a24 	vmul.f32	s9, s10, s9
 80194f2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80194f6:	ee25 7a87 	vmul.f32	s14, s11, s14
 80194fa:	b092      	sub	sp, #72	@ 0x48
 80194fc:	a809      	add	r0, sp, #36	@ 0x24
 80194fe:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8019502:	edcd 2a0a 	vstr	s5, [sp, #40]	@ 0x28
 8019506:	edcd 0a0c 	vstr	s1, [sp, #48]	@ 0x30
 801950a:	920d      	str	r2, [sp, #52]	@ 0x34
 801950c:	930e      	str	r3, [sp, #56]	@ 0x38
 801950e:	edcd 1a00 	vstr	s3, [sp]
 8019512:	ed8d 2a03 	vstr	s4, [sp, #12]
 8019516:	ed8d 4a01 	vstr	s8, [sp, #4]
 801951a:	edcd 4a04 	vstr	s9, [sp, #16]
 801951e:	edcd 6a02 	vstr	s13, [sp, #8]
 8019522:	ed8d 7a05 	vstr	s14, [sp, #20]
 8019526:	ed8d 3a06 	vstr	s6, [sp, #24]
 801952a:	ed8d 5a07 	vstr	s10, [sp, #28]
 801952e:	edcd 5a08 	vstr	s11, [sp, #32]
 8019532:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
 8019536:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 801953a:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 801953e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8019540:	f000 f8c4 	bl	80196cc <nema_mat3x3_adj>
 8019544:	a909      	add	r1, sp, #36	@ 0x24
 8019546:	4668      	mov	r0, sp
 8019548:	f000 f82a 	bl	80195a0 <nema_mat3x3_mul>
 801954c:	4668      	mov	r0, sp
 801954e:	f000 faff 	bl	8019b50 <nema_set_matrix>
 8019552:	b012      	add	sp, #72	@ 0x48
 8019554:	bd70      	pop	{r4, r5, r6, pc}
 8019556:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801957c <nema_interpolate_tx_ty+0x110>
 801955a:	eef4 3ae7 	vcmpe.f32	s7, s15
 801955e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019562:	da8f      	bge.n	8019484 <nema_interpolate_tx_ty+0x18>
 8019564:	e7a2      	b.n	80194ac <nema_interpolate_tx_ty+0x40>
 8019566:	eddf 7a05 	vldr	s15, [pc, #20]	@ 801957c <nema_interpolate_tx_ty+0x110>
 801956a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019572:	da87      	bge.n	8019484 <nema_interpolate_tx_ty+0x18>
 8019574:	e7a6      	b.n	80194c4 <nema_interpolate_tx_ty+0x58>
 8019576:	bf00      	nop
 8019578:	3727c5ac 	.word	0x3727c5ac
 801957c:	b727c5ac 	.word	0xb727c5ac

08019580 <nema_f2fx>:
 8019580:	eddf 7a06 	vldr	s15, [pc, #24]	@ 801959c <nema_f2fx+0x1c>
 8019584:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019588:	ee20 0a27 	vmul.f32	s0, s0, s15
 801958c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8019590:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019594:	ee17 0a90 	vmov	r0, s15
 8019598:	4770      	bx	lr
 801959a:	bf00      	nop
 801959c:	47800000 	.word	0x47800000

080195a0 <nema_mat3x3_mul>:
 80195a0:	edd1 4a01 	vldr	s9, [r1, #4]
 80195a4:	ed91 0a04 	vldr	s0, [r1, #16]
 80195a8:	edd1 0a05 	vldr	s1, [r1, #20]
 80195ac:	ed2d 8b0c 	vpush	{d8-d13}
 80195b0:	ed91 6a00 	vldr	s12, [r1]
 80195b4:	ed91 4a03 	vldr	s8, [r1, #12]
 80195b8:	ed91 aa02 	vldr	s20, [r1, #8]
 80195bc:	edd0 3a03 	vldr	s7, [r0, #12]
 80195c0:	ed90 8a04 	vldr	s16, [r0, #16]
 80195c4:	ed90 9a00 	vldr	s18, [r0]
 80195c8:	edd0 8a01 	vldr	s17, [r0, #4]
 80195cc:	edd0 9a06 	vldr	s19, [r0, #24]
 80195d0:	ed90 1a07 	vldr	s2, [r0, #28]
 80195d4:	edd1 aa06 	vldr	s21, [r1, #24]
 80195d8:	edd1 6a07 	vldr	s13, [r1, #28]
 80195dc:	ed91 7a08 	vldr	s14, [r1, #32]
 80195e0:	ed90 5a02 	vldr	s10, [r0, #8]
 80195e4:	edd0 5a05 	vldr	s11, [r0, #20]
 80195e8:	ee69 da06 	vmul.f32	s27, s18, s12
 80195ec:	ee29 da24 	vmul.f32	s26, s18, s9
 80195f0:	ee66 ca23 	vmul.f32	s25, s12, s7
 80195f4:	ee24 caa3 	vmul.f32	s24, s9, s7
 80195f8:	ee68 1a84 	vmul.f32	s3, s17, s8
 80195fc:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8019600:	ee28 2a80 	vmul.f32	s4, s17, s0
 8019604:	ee26 6a29 	vmul.f32	s12, s12, s19
 8019608:	ee64 2a08 	vmul.f32	s5, s8, s16
 801960c:	ee6a ba23 	vmul.f32	s23, s20, s7
 8019610:	ee24 baa9 	vmul.f32	s22, s9, s19
 8019614:	ee20 3a08 	vmul.f32	s6, s0, s16
 8019618:	ee60 3a88 	vmul.f32	s7, s1, s16
 801961c:	ee60 4a01 	vmul.f32	s9, s0, s2
 8019620:	ee68 8aa0 	vmul.f32	s17, s17, s1
 8019624:	ee24 4a01 	vmul.f32	s8, s8, s2
 8019628:	ee6a 7a29 	vmul.f32	s15, s20, s19
 801962c:	ee20 1a81 	vmul.f32	s2, s1, s2
 8019630:	edd0 0a08 	vldr	s1, [r0, #32]
 8019634:	ee25 0a2a 	vmul.f32	s0, s10, s21
 8019638:	ee79 8a28 	vadd.f32	s17, s18, s17
 801963c:	ee2a 8aa5 	vmul.f32	s16, s21, s11
 8019640:	ee25 9a26 	vmul.f32	s18, s10, s13
 8019644:	ee7d 1aa1 	vadd.f32	s3, s27, s3
 8019648:	ee3d 2a02 	vadd.f32	s4, s26, s4
 801964c:	ee7c 2aa2 	vadd.f32	s5, s25, s5
 8019650:	ee3c 3a03 	vadd.f32	s6, s24, s6
 8019654:	ee7b 3aa3 	vadd.f32	s7, s23, s7
 8019658:	ee36 4a04 	vadd.f32	s8, s12, s8
 801965c:	ee7b 4a24 	vadd.f32	s9, s22, s9
 8019660:	ee77 7a81 	vadd.f32	s15, s15, s2
 8019664:	ee25 5a07 	vmul.f32	s10, s10, s14
 8019668:	ee26 1aa5 	vmul.f32	s2, s13, s11
 801966c:	ee2a 6aa0 	vmul.f32	s12, s21, s1
 8019670:	ee67 5a25 	vmul.f32	s11, s14, s11
 8019674:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8019678:	ee27 7a20 	vmul.f32	s14, s14, s1
 801967c:	ee32 2a09 	vadd.f32	s4, s4, s18
 8019680:	ee38 5a85 	vadd.f32	s10, s17, s10
 8019684:	ee72 2a88 	vadd.f32	s5, s5, s16
 8019688:	ee71 1a80 	vadd.f32	s3, s3, s0
 801968c:	ee33 3a01 	vadd.f32	s6, s6, s2
 8019690:	ee73 5aa5 	vadd.f32	s11, s7, s11
 8019694:	ee34 6a06 	vadd.f32	s12, s8, s12
 8019698:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801969c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196a0:	edc0 1a00 	vstr	s3, [r0]
 80196a4:	ed80 2a01 	vstr	s4, [r0, #4]
 80196a8:	ed80 5a02 	vstr	s10, [r0, #8]
 80196ac:	edc0 2a03 	vstr	s5, [r0, #12]
 80196b0:	ed80 3a04 	vstr	s6, [r0, #16]
 80196b4:	edc0 5a05 	vstr	s11, [r0, #20]
 80196b8:	ed80 6a06 	vstr	s12, [r0, #24]
 80196bc:	edc0 6a07 	vstr	s13, [r0, #28]
 80196c0:	edc0 7a08 	vstr	s15, [r0, #32]
 80196c4:	ecbd 8b0c 	vpop	{d8-d13}
 80196c8:	4770      	bx	lr
 80196ca:	bf00      	nop

080196cc <nema_mat3x3_adj>:
 80196cc:	edd0 3a03 	vldr	s7, [r0, #12]
 80196d0:	edd0 4a04 	vldr	s9, [r0, #16]
 80196d4:	ed90 6a08 	vldr	s12, [r0, #32]
 80196d8:	ed90 5a07 	vldr	s10, [r0, #28]
 80196dc:	ed90 4a05 	vldr	s8, [r0, #20]
 80196e0:	edd0 7a00 	vldr	s15, [r0]
 80196e4:	edd0 6a02 	vldr	s13, [r0, #8]
 80196e8:	edd0 5a01 	vldr	s11, [r0, #4]
 80196ec:	ed90 7a06 	vldr	s14, [r0, #24]
 80196f0:	ed2d 8b04 	vpush	{d8-d9}
 80196f4:	ee24 1a86 	vmul.f32	s2, s9, s12
 80196f8:	ee25 9a04 	vmul.f32	s18, s10, s8
 80196fc:	ee66 8a25 	vmul.f32	s17, s12, s11
 8019700:	ee24 8aa6 	vmul.f32	s16, s9, s13
 8019704:	ee65 1a26 	vmul.f32	s3, s10, s13
 8019708:	ee24 2a25 	vmul.f32	s4, s8, s11
 801970c:	ee64 2a07 	vmul.f32	s5, s8, s14
 8019710:	ee66 0a87 	vmul.f32	s1, s13, s14
 8019714:	ee25 3a23 	vmul.f32	s6, s10, s7
 8019718:	ee24 4a27 	vmul.f32	s8, s8, s15
 801971c:	ee26 0a23 	vmul.f32	s0, s12, s7
 8019720:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8019724:	ee26 6a27 	vmul.f32	s12, s12, s15
 8019728:	ee25 5a27 	vmul.f32	s10, s10, s15
 801972c:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8019730:	ee64 4a87 	vmul.f32	s9, s9, s14
 8019734:	ee25 7a87 	vmul.f32	s14, s11, s14
 8019738:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801973c:	ee31 1a49 	vsub.f32	s2, s2, s18
 8019740:	ee71 1ae8 	vsub.f32	s3, s3, s17
 8019744:	ee32 2a48 	vsub.f32	s4, s4, s16
 8019748:	ecbd 8b04 	vpop	{d8-d9}
 801974c:	ee72 3ac0 	vsub.f32	s7, s5, s0
 8019750:	ee36 6a60 	vsub.f32	s12, s12, s1
 8019754:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8019758:	ee73 4a64 	vsub.f32	s9, s6, s9
 801975c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8019760:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019764:	ed80 1a00 	vstr	s2, [r0]
 8019768:	edc0 1a01 	vstr	s3, [r0, #4]
 801976c:	ed80 2a02 	vstr	s4, [r0, #8]
 8019770:	edc0 3a03 	vstr	s7, [r0, #12]
 8019774:	ed80 6a04 	vstr	s12, [r0, #16]
 8019778:	edc0 6a05 	vstr	s13, [r0, #20]
 801977c:	edc0 4a06 	vstr	s9, [r0, #24]
 8019780:	ed80 7a07 	vstr	s14, [r0, #28]
 8019784:	edc0 7a08 	vstr	s15, [r0, #32]
 8019788:	4770      	bx	lr
 801978a:	bf00      	nop

0801978c <nema_mat3x3_quad_to_rect>:
 801978c:	ee70 6a41 	vsub.f32	s13, s0, s2
 8019790:	ee76 6a82 	vadd.f32	s13, s13, s4
 8019794:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8019798:	ee30 6ae1 	vsub.f32	s12, s1, s3
 801979c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80197a0:	ee36 6a22 	vadd.f32	s12, s12, s5
 80197a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197a8:	ed2d 8b06 	vpush	{d8-d10}
 80197ac:	ee36 6a63 	vsub.f32	s12, s12, s7
 80197b0:	ee09 0a10 	vmov	s18, r0
 80197b4:	ee08 1a90 	vmov	s17, r1
 80197b8:	f100 812e 	bmi.w	8019a18 <nema_mat3x3_quad_to_rect+0x28c>
 80197bc:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8019a50 <nema_mat3x3_quad_to_rect+0x2c4>
 80197c0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80197c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197c8:	d80d      	bhi.n	80197e6 <nema_mat3x3_quad_to_rect+0x5a>
 80197ca:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80197ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197d2:	f100 80f7 	bmi.w	80199c4 <nema_mat3x3_quad_to_rect+0x238>
 80197d6:	eddf 7a9e 	vldr	s15, [pc, #632]	@ 8019a50 <nema_mat3x3_quad_to_rect+0x2c4>
 80197da:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80197de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197e2:	f240 80f7 	bls.w	80199d4 <nema_mat3x3_quad_to_rect+0x248>
 80197e6:	ee31 7a42 	vsub.f32	s14, s2, s4
 80197ea:	ee73 7ae2 	vsub.f32	s15, s7, s5
 80197ee:	ee33 2a42 	vsub.f32	s4, s6, s4
 80197f2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80197f6:	ee67 5a27 	vmul.f32	s11, s14, s15
 80197fa:	ee22 5a22 	vmul.f32	s10, s4, s5
 80197fe:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019802:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801980a:	ee26 7a07 	vmul.f32	s14, s12, s14
 801980e:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8019812:	ee26 6a02 	vmul.f32	s12, s12, s4
 8019816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801981a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801981e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019822:	f100 80c5 	bmi.w	80199b0 <nema_mat3x3_quad_to_rect+0x224>
 8019826:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8019a50 <nema_mat3x3_quad_to_rect+0x2c4>
 801982a:	eef4 5ac7 	vcmpe.f32	s11, s14
 801982e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019832:	bf94      	ite	ls
 8019834:	2301      	movls	r3, #1
 8019836:	2300      	movhi	r3, #0
 8019838:	2b00      	cmp	r3, #0
 801983a:	f040 8106 	bne.w	8019a4a <nema_mat3x3_quad_to_rect+0x2be>
 801983e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019842:	ee87 6a25 	vdiv.f32	s12, s14, s11
 8019846:	ee67 7a86 	vmul.f32	s15, s15, s12
 801984a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801984e:	ee21 5a27 	vmul.f32	s10, s2, s15
 8019852:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8019856:	ee63 2aa6 	vmul.f32	s5, s7, s13
 801985a:	ee31 1a40 	vsub.f32	s2, s2, s0
 801985e:	ee23 6a26 	vmul.f32	s12, s6, s13
 8019862:	ee33 2a40 	vsub.f32	s4, s6, s0
 8019866:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801986a:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801986e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019872:	ee32 2a06 	vadd.f32	s4, s4, s12
 8019876:	ee71 1aa5 	vadd.f32	s3, s3, s11
 801987a:	ee73 2aa2 	vadd.f32	s5, s7, s5
 801987e:	ed82 0a02 	vstr	s0, [r2, #8]
 8019882:	edc2 0a05 	vstr	s1, [r2, #20]
 8019886:	edc2 7a06 	vstr	s15, [r2, #24]
 801988a:	edc2 6a07 	vstr	s13, [r2, #28]
 801988e:	ed82 7a08 	vstr	s14, [r2, #32]
 8019892:	ed82 1a00 	vstr	s2, [r2]
 8019896:	ed82 2a01 	vstr	s4, [r2, #4]
 801989a:	edc2 1a03 	vstr	s3, [r2, #12]
 801989e:	edc2 2a04 	vstr	s5, [r2, #16]
 80198a2:	ee20 4aa6 	vmul.f32	s8, s1, s13
 80198a6:	ee60 5aa7 	vmul.f32	s11, s1, s15
 80198aa:	ee32 3ac4 	vsub.f32	s6, s5, s8
 80198ae:	ee31 7ae5 	vsub.f32	s14, s3, s11
 80198b2:	ee21 8aa6 	vmul.f32	s16, s3, s13
 80198b6:	ee22 6aa7 	vmul.f32	s12, s5, s15
 80198ba:	ee27 7a02 	vmul.f32	s14, s14, s4
 80198be:	ee23 4a01 	vmul.f32	s8, s6, s2
 80198c2:	ee38 8a46 	vsub.f32	s16, s16, s12
 80198c6:	ee34 4a47 	vsub.f32	s8, s8, s14
 80198ca:	ee20 7a08 	vmul.f32	s14, s0, s16
 80198ce:	ee34 4a07 	vadd.f32	s8, s8, s14
 80198d2:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 80198d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198da:	f100 80ac 	bmi.w	8019a36 <nema_mat3x3_quad_to_rect+0x2aa>
 80198de:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8019a50 <nema_mat3x3_quad_to_rect+0x2c4>
 80198e2:	eeb4 4ac7 	vcmpe.f32	s8, s14
 80198e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ea:	bf94      	ite	ls
 80198ec:	2001      	movls	r0, #1
 80198ee:	2000      	movhi	r0, #0
 80198f0:	2800      	cmp	r0, #0
 80198f2:	f040 80aa 	bne.w	8019a4a <nema_mat3x3_quad_to_rect+0x2be>
 80198f6:	ee20 5a82 	vmul.f32	s10, s1, s4
 80198fa:	ee60 4a26 	vmul.f32	s9, s0, s13
 80198fe:	ee20 6a27 	vmul.f32	s12, s0, s15
 8019902:	ee60 9a22 	vmul.f32	s19, s0, s5
 8019906:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 801990a:	ee60 0a81 	vmul.f32	s1, s1, s2
 801990e:	ee20 7a21 	vmul.f32	s14, s0, s3
 8019912:	eeca 3a04 	vdiv.f32	s7, s20, s8
 8019916:	ee74 4ac2 	vsub.f32	s9, s9, s4
 801991a:	ee61 6a26 	vmul.f32	s13, s2, s13
 801991e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8019922:	ee35 5a69 	vsub.f32	s10, s10, s19
 8019926:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801992a:	ee31 6a46 	vsub.f32	s12, s2, s12
 801992e:	ee62 2a81 	vmul.f32	s5, s5, s2
 8019932:	ee37 7a60 	vsub.f32	s14, s14, s1
 8019936:	ee21 2a82 	vmul.f32	s4, s3, s4
 801993a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801993e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8019942:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019946:	ee23 4a23 	vmul.f32	s8, s6, s7
 801994a:	ee65 6a23 	vmul.f32	s13, s10, s7
 801994e:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8019952:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8019956:	ee26 6a23 	vmul.f32	s12, s12, s7
 801995a:	ee27 7a23 	vmul.f32	s14, s14, s7
 801995e:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8019962:	ee24 4a09 	vmul.f32	s8, s8, s18
 8019966:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801996a:	ee28 8a23 	vmul.f32	s16, s16, s7
 801996e:	ee24 5a89 	vmul.f32	s10, s9, s18
 8019972:	ee26 6a28 	vmul.f32	s12, s12, s17
 8019976:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801997a:	ee66 6a89 	vmul.f32	s13, s13, s18
 801997e:	ee27 7a28 	vmul.f32	s14, s14, s17
 8019982:	ee62 2aa3 	vmul.f32	s5, s5, s7
 8019986:	ed82 4a00 	vstr	s8, [r2]
 801998a:	edc2 5a03 	vstr	s11, [r2, #12]
 801998e:	ed82 8a06 	vstr	s16, [r2, #24]
 8019992:	ed82 5a01 	vstr	s10, [r2, #4]
 8019996:	ed82 6a04 	vstr	s12, [r2, #16]
 801999a:	edc2 7a07 	vstr	s15, [r2, #28]
 801999e:	edc2 6a02 	vstr	s13, [r2, #8]
 80199a2:	ed82 7a05 	vstr	s14, [r2, #20]
 80199a6:	edc2 2a08 	vstr	s5, [r2, #32]
 80199aa:	ecbd 8b06 	vpop	{d8-d10}
 80199ae:	4770      	bx	lr
 80199b0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8019a54 <nema_mat3x3_quad_to_rect+0x2c8>
 80199b4:	eef4 5ac7 	vcmpe.f32	s11, s14
 80199b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199bc:	bfac      	ite	ge
 80199be:	2301      	movge	r3, #1
 80199c0:	2300      	movlt	r3, #0
 80199c2:	e739      	b.n	8019838 <nema_mat3x3_quad_to_rect+0xac>
 80199c4:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8019a54 <nema_mat3x3_quad_to_rect+0x2c8>
 80199c8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80199cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199d0:	f6ff af09 	blt.w	80197e6 <nema_mat3x3_quad_to_rect+0x5a>
 80199d4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8019a58 <nema_mat3x3_quad_to_rect+0x2cc>
 80199d8:	ee32 2a41 	vsub.f32	s4, s4, s2
 80199dc:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80199e0:	ee31 1a40 	vsub.f32	s2, s2, s0
 80199e4:	ee71 1ae0 	vsub.f32	s3, s3, s1
 80199e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80199ec:	eef0 7a47 	vmov.f32	s15, s14
 80199f0:	ed82 2a01 	vstr	s4, [r2, #4]
 80199f4:	ed82 1a00 	vstr	s2, [r2]
 80199f8:	edc2 2a04 	vstr	s5, [r2, #16]
 80199fc:	edc2 1a03 	vstr	s3, [r2, #12]
 8019a00:	ed82 0a02 	vstr	s0, [r2, #8]
 8019a04:	edc2 0a05 	vstr	s1, [r2, #20]
 8019a08:	ed82 7a06 	vstr	s14, [r2, #24]
 8019a0c:	ed82 7a07 	vstr	s14, [r2, #28]
 8019a10:	eef0 6a47 	vmov.f32	s13, s14
 8019a14:	6213      	str	r3, [r2, #32]
 8019a16:	e744      	b.n	80198a2 <nema_mat3x3_quad_to_rect+0x116>
 8019a18:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019a54 <nema_mat3x3_quad_to_rect+0x2c8>
 8019a1c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8019a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a24:	f6ff aedf 	blt.w	80197e6 <nema_mat3x3_quad_to_rect+0x5a>
 8019a28:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8019a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a30:	f57f aed1 	bpl.w	80197d6 <nema_mat3x3_quad_to_rect+0x4a>
 8019a34:	e7c6      	b.n	80199c4 <nema_mat3x3_quad_to_rect+0x238>
 8019a36:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8019a54 <nema_mat3x3_quad_to_rect+0x2c8>
 8019a3a:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8019a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a42:	bfac      	ite	ge
 8019a44:	2001      	movge	r0, #1
 8019a46:	2000      	movlt	r0, #0
 8019a48:	e752      	b.n	80198f0 <nema_mat3x3_quad_to_rect+0x164>
 8019a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a4e:	e7ac      	b.n	80199aa <nema_mat3x3_quad_to_rect+0x21e>
 8019a50:	3727c5ac 	.word	0x3727c5ac
 8019a54:	b727c5ac 	.word	0xb727c5ac
 8019a58:	00000000 	.word	0x00000000

08019a5c <nema_readHwConfig>:
 8019a5c:	b510      	push	{r4, lr}
 8019a5e:	4c05      	ldr	r4, [pc, #20]	@ (8019a74 <nema_readHwConfig+0x18>)
 8019a60:	6820      	ldr	r0, [r4, #0]
 8019a62:	b100      	cbz	r0, 8019a66 <nema_readHwConfig+0xa>
 8019a64:	bd10      	pop	{r4, pc}
 8019a66:	f44f 70f8 	mov.w	r0, #496	@ 0x1f0
 8019a6a:	f7f9 fc01 	bl	8013270 <nema_reg_read>
 8019a6e:	6020      	str	r0, [r4, #0]
 8019a70:	bd10      	pop	{r4, pc}
 8019a72:	bf00      	nop
 8019a74:	200874fc 	.word	0x200874fc

08019a78 <nema_readHwConfigH>:
 8019a78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8019a7c:	f7f9 bbf8 	b.w	8013270 <nema_reg_read>

08019a80 <nema_enable_tiling>:
 8019a80:	2800      	cmp	r0, #0
 8019a82:	bf14      	ite	ne
 8019a84:	f04f 4080 	movne.w	r0, #1073741824	@ 0x40000000
 8019a88:	2000      	moveq	r0, #0
 8019a8a:	b410      	push	{r4}
 8019a8c:	4a05      	ldr	r2, [pc, #20]	@ (8019aa4 <nema_enable_tiling+0x24>)
 8019a8e:	6951      	ldr	r1, [r2, #20]
 8019a90:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 8019a94:	4323      	orrs	r3, r4
 8019a96:	430b      	orrs	r3, r1
 8019a98:	4303      	orrs	r3, r0
 8019a9a:	6050      	str	r0, [r2, #4]
 8019a9c:	6113      	str	r3, [r2, #16]
 8019a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019aa2:	4770      	bx	lr
 8019aa4:	20000024 	.word	0x20000024

08019aa8 <nema_enable_tiling_2x2>:
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	bf14      	ite	ne
 8019aac:	f04f 4040 	movne.w	r0, #3221225472	@ 0xc0000000
 8019ab0:	2000      	moveq	r0, #0
 8019ab2:	b410      	push	{r4}
 8019ab4:	4a05      	ldr	r2, [pc, #20]	@ (8019acc <nema_enable_tiling_2x2+0x24>)
 8019ab6:	6951      	ldr	r1, [r2, #20]
 8019ab8:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 8019abc:	4323      	orrs	r3, r4
 8019abe:	430b      	orrs	r3, r1
 8019ac0:	4303      	orrs	r3, r0
 8019ac2:	6050      	str	r0, [r2, #4]
 8019ac4:	6113      	str	r3, [r2, #16]
 8019ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019aca:	4770      	bx	lr
 8019acc:	20000024 	.word	0x20000024

08019ad0 <nema_enable_aa>:
 8019ad0:	2800      	cmp	r0, #0
 8019ad2:	b410      	push	{r4}
 8019ad4:	bf19      	ittee	ne
 8019ad6:	f04f 6080 	movne.w	r0, #67108864	@ 0x4000000
 8019ada:	f04f 64c0 	movne.w	r4, #100663296	@ 0x6000000
 8019ade:	f04f 7400 	moveq.w	r4, #33554432	@ 0x2000000
 8019ae2:	2000      	moveq	r0, #0
 8019ae4:	2900      	cmp	r1, #0
 8019ae6:	bf08      	it	eq
 8019ae8:	4604      	moveq	r4, r0
 8019aea:	b10a      	cbz	r2, 8019af0 <nema_enable_aa+0x20>
 8019aec:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 8019af0:	b10b      	cbz	r3, 8019af6 <nema_enable_aa+0x26>
 8019af2:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8019af6:	4a06      	ldr	r2, [pc, #24]	@ (8019b10 <nema_enable_aa+0x40>)
 8019af8:	6853      	ldr	r3, [r2, #4]
 8019afa:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 8019afe:	4303      	orrs	r3, r0
 8019b00:	430b      	orrs	r3, r1
 8019b02:	4323      	orrs	r3, r4
 8019b04:	6950      	ldr	r0, [r2, #20]
 8019b06:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8019b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b0e:	4770      	bx	lr
 8019b10:	20000024 	.word	0x20000024

08019b14 <nema_enable_aa_flags>:
 8019b14:	b410      	push	{r4}
 8019b16:	4a07      	ldr	r2, [pc, #28]	@ (8019b34 <nema_enable_aa_flags+0x20>)
 8019b18:	f000 61f0 	and.w	r1, r0, #125829120	@ 0x7800000
 8019b1c:	6853      	ldr	r3, [r2, #4]
 8019b1e:	e9d2 0402 	ldrd	r0, r4, [r2, #8]
 8019b22:	4323      	orrs	r3, r4
 8019b24:	4303      	orrs	r3, r0
 8019b26:	430b      	orrs	r3, r1
 8019b28:	6950      	ldr	r0, [r2, #20]
 8019b2a:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8019b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b32:	4770      	bx	lr
 8019b34:	20000024 	.word	0x20000024

08019b38 <nema_matmul_bypass>:
 8019b38:	b920      	cbnz	r0, 8019b44 <nema_matmul_bypass+0xc>
 8019b3a:	4601      	mov	r1, r0
 8019b3c:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8019b40:	f000 bdb2 	b.w	801a6a8 <nema_cl_add_cmd>
 8019b44:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8019b48:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8019b4c:	f000 bdac 	b.w	801a6a8 <nema_cl_add_cmd>

08019b50 <nema_set_matrix>:
 8019b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b54:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8019cbc <nema_set_matrix+0x16c>
 8019b58:	edd0 7a06 	vldr	s15, [r0, #24]
 8019b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b64:	4604      	mov	r4, r0
 8019b66:	d506      	bpl.n	8019b76 <nema_set_matrix+0x26>
 8019b68:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8019cc0 <nema_set_matrix+0x170>
 8019b6c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b74:	dc47      	bgt.n	8019c06 <nema_set_matrix+0xb6>
 8019b76:	2009      	movs	r0, #9
 8019b78:	f000 fd3a 	bl	801a5f0 <nema_cl_get_space>
 8019b7c:	2800      	cmp	r0, #0
 8019b7e:	d040      	beq.n	8019c02 <nema_set_matrix+0xb2>
 8019b80:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8019b84:	6003      	str	r3, [r0, #0]
 8019b86:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8019b8a:	6962      	ldr	r2, [r4, #20]
 8019b8c:	6083      	str	r3, [r0, #8]
 8019b8e:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8019b92:	6042      	str	r2, [r0, #4]
 8019b94:	68a2      	ldr	r2, [r4, #8]
 8019b96:	6103      	str	r3, [r0, #16]
 8019b98:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8019b9c:	60c2      	str	r2, [r0, #12]
 8019b9e:	69a2      	ldr	r2, [r4, #24]
 8019ba0:	6183      	str	r3, [r0, #24]
 8019ba2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8019ba6:	6142      	str	r2, [r0, #20]
 8019ba8:	69e2      	ldr	r2, [r4, #28]
 8019baa:	6203      	str	r3, [r0, #32]
 8019bac:	61c2      	str	r2, [r0, #28]
 8019bae:	6a23      	ldr	r3, [r4, #32]
 8019bb0:	2544      	movs	r5, #68	@ 0x44
 8019bb2:	6243      	str	r3, [r0, #36]	@ 0x24
 8019bb4:	2640      	movs	r6, #64	@ 0x40
 8019bb6:	233c      	movs	r3, #60	@ 0x3c
 8019bb8:	2738      	movs	r7, #56	@ 0x38
 8019bba:	2234      	movs	r2, #52	@ 0x34
 8019bbc:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8019bc0:	212c      	movs	r1, #44	@ 0x2c
 8019bc2:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 8019bc6:	f44f 78b0 	mov.w	r8, #352	@ 0x160
 8019bca:	f840 800e 	str.w	r8, [r0, lr]
 8019bce:	f44f 7eb2 	mov.w	lr, #356	@ 0x164
 8019bd2:	f8d4 8000 	ldr.w	r8, [r4]
 8019bd6:	4401      	add	r1, r0
 8019bd8:	f8c1 8000 	str.w	r8, [r1]
 8019bdc:	f840 e00c 	str.w	lr, [r0, ip]
 8019be0:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8019be4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8019be8:	4402      	add	r2, r0
 8019bea:	f8c2 c000 	str.w	ip, [r2]
 8019bee:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8019bf2:	51c1      	str	r1, [r0, r7]
 8019bf4:	68e1      	ldr	r1, [r4, #12]
 8019bf6:	4403      	add	r3, r0
 8019bf8:	6019      	str	r1, [r3, #0]
 8019bfa:	5182      	str	r2, [r0, r6]
 8019bfc:	6923      	ldr	r3, [r4, #16]
 8019bfe:	4428      	add	r0, r5
 8019c00:	6003      	str	r3, [r0, #0]
 8019c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c06:	ed90 6a07 	vldr	s12, [r0, #28]
 8019c0a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8019c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c12:	d5b0      	bpl.n	8019b76 <nema_set_matrix+0x26>
 8019c14:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8019c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c1c:	ddab      	ble.n	8019b76 <nema_set_matrix+0x26>
 8019c1e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8019c22:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c2e:	d43f      	bmi.n	8019cb0 <nema_set_matrix+0x160>
 8019c30:	edd4 7a08 	vldr	s15, [r4, #32]
 8019c34:	ed94 5a00 	vldr	s10, [r4]
 8019c38:	edd4 5a01 	vldr	s11, [r4, #4]
 8019c3c:	ed94 6a02 	vldr	s12, [r4, #8]
 8019c40:	edd4 6a03 	vldr	s13, [r4, #12]
 8019c44:	ed94 7a04 	vldr	s14, [r4, #16]
 8019c48:	ed94 4a05 	vldr	s8, [r4, #20]
 8019c4c:	eec5 4a27 	vdiv.f32	s9, s10, s15
 8019c50:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8019c54:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8019c58:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8019c5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019c60:	ee84 7a27 	vdiv.f32	s14, s8, s15
 8019c64:	edc4 4a00 	vstr	s9, [r4]
 8019c68:	ed84 5a01 	vstr	s10, [r4, #4]
 8019c6c:	edc4 5a02 	vstr	s11, [r4, #8]
 8019c70:	ed84 6a03 	vstr	s12, [r4, #12]
 8019c74:	edc4 6a04 	vstr	s13, [r4, #16]
 8019c78:	ed84 7a05 	vstr	s14, [r4, #20]
 8019c7c:	2006      	movs	r0, #6
 8019c7e:	f000 fcb7 	bl	801a5f0 <nema_cl_get_space>
 8019c82:	2800      	cmp	r0, #0
 8019c84:	d0bd      	beq.n	8019c02 <nema_set_matrix+0xb2>
 8019c86:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8019c8a:	6003      	str	r3, [r0, #0]
 8019c8c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8019c90:	6962      	ldr	r2, [r4, #20]
 8019c92:	6083      	str	r3, [r0, #8]
 8019c94:	6042      	str	r2, [r0, #4]
 8019c96:	68a3      	ldr	r3, [r4, #8]
 8019c98:	252c      	movs	r5, #44	@ 0x2c
 8019c9a:	60c3      	str	r3, [r0, #12]
 8019c9c:	2628      	movs	r6, #40	@ 0x28
 8019c9e:	2324      	movs	r3, #36	@ 0x24
 8019ca0:	2720      	movs	r7, #32
 8019ca2:	221c      	movs	r2, #28
 8019ca4:	f04f 0c18 	mov.w	ip, #24
 8019ca8:	2114      	movs	r1, #20
 8019caa:	f04f 0e10 	mov.w	lr, #16
 8019cae:	e78a      	b.n	8019bc6 <nema_set_matrix+0x76>
 8019cb0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cb8:	dce0      	bgt.n	8019c7c <nema_set_matrix+0x12c>
 8019cba:	e7b9      	b.n	8019c30 <nema_set_matrix+0xe0>
 8019cbc:	33d6bf95 	.word	0x33d6bf95
 8019cc0:	b3d6bf95 	.word	0xb3d6bf95

08019cc4 <nema_set_matrix_translate>:
 8019cc4:	b508      	push	{r3, lr}
 8019cc6:	2002      	movs	r0, #2
 8019cc8:	ed2d 8b02 	vpush	{d8}
 8019ccc:	eeb0 8a40 	vmov.f32	s16, s0
 8019cd0:	eef0 8a60 	vmov.f32	s17, s1
 8019cd4:	f000 fc8c 	bl	801a5f0 <nema_cl_get_space>
 8019cd8:	b1c8      	cbz	r0, 8019d0e <nema_set_matrix_translate+0x4a>
 8019cda:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8019d28 <nema_set_matrix_translate+0x64>
 8019cde:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019ce2:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8019ce6:	eef1 6a68 	vneg.f32	s13, s17
 8019cea:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8019cee:	eeb1 7a48 	vneg.f32	s14, s16
 8019cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cf6:	6002      	str	r2, [r0, #0]
 8019cf8:	edc0 6a01 	vstr	s13, [r0, #4]
 8019cfc:	6083      	str	r3, [r0, #8]
 8019cfe:	ed80 7a03 	vstr	s14, [r0, #12]
 8019d02:	dc07      	bgt.n	8019d14 <nema_set_matrix_translate+0x50>
 8019d04:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d0c:	dc02      	bgt.n	8019d14 <nema_set_matrix_translate+0x50>
 8019d0e:	ecbd 8b02 	vpop	{d8}
 8019d12:	bd08      	pop	{r3, pc}
 8019d14:	ecbd 8b02 	vpop	{d8}
 8019d18:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8019d1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019d20:	f44f 708c 	mov.w	r0, #280	@ 0x118
 8019d24:	f000 bcc0 	b.w	801a6a8 <nema_cl_add_cmd>
 8019d28:	45000000 	.word	0x45000000

08019d2c <nema_load_frag_shader>:
 8019d2c:	b570      	push	{r4, r5, r6, lr}
 8019d2e:	460e      	mov	r6, r1
 8019d30:	4604      	mov	r4, r0
 8019d32:	4611      	mov	r1, r2
 8019d34:	20c4      	movs	r0, #196	@ 0xc4
 8019d36:	f000 fcb7 	bl	801a6a8 <nema_cl_add_cmd>
 8019d3a:	b186      	cbz	r6, 8019d5e <nema_load_frag_shader+0x32>
 8019d3c:	2500      	movs	r5, #0
 8019d3e:	3408      	adds	r4, #8
 8019d40:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8019d44:	20c8      	movs	r0, #200	@ 0xc8
 8019d46:	f000 fcaf 	bl	801a6a8 <nema_cl_add_cmd>
 8019d4a:	3501      	adds	r5, #1
 8019d4c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8019d50:	20cc      	movs	r0, #204	@ 0xcc
 8019d52:	f000 fca9 	bl	801a6a8 <nema_cl_add_cmd>
 8019d56:	42ae      	cmp	r6, r5
 8019d58:	f104 0408 	add.w	r4, r4, #8
 8019d5c:	d1f0      	bne.n	8019d40 <nema_load_frag_shader+0x14>
 8019d5e:	bd70      	pop	{r4, r5, r6, pc}

08019d60 <nema_set_frag_ptr>:
 8019d60:	4601      	mov	r1, r0
 8019d62:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8019d66:	f000 bc9f 	b.w	801a6a8 <nema_cl_add_cmd>
 8019d6a:	bf00      	nop

08019d6c <nema_set_rop_blend_mode>:
 8019d6c:	4601      	mov	r1, r0
 8019d6e:	f44f 70e8 	mov.w	r0, #464	@ 0x1d0
 8019d72:	f000 bc99 	b.w	801a6a8 <nema_cl_add_cmd>
 8019d76:	bf00      	nop

08019d78 <nema_set_rop_const_color>:
 8019d78:	4601      	mov	r1, r0
 8019d7a:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 8019d7e:	f000 bc93 	b.w	801a6a8 <nema_cl_add_cmd>
 8019d82:	bf00      	nop

08019d84 <nema_set_depth_ctrl>:
 8019d84:	4601      	mov	r1, r0
 8019d86:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8019d8a:	f000 bc8d 	b.w	801a6a8 <nema_cl_add_cmd>
 8019d8e:	bf00      	nop

08019d90 <nema_set_raster_color>:
 8019d90:	4601      	mov	r1, r0
 8019d92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8019d96:	f000 bc87 	b.w	801a6a8 <nema_cl_add_cmd>
 8019d9a:	bf00      	nop

08019d9c <nema_raster_triangle_fx>:
 8019d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019da0:	4607      	mov	r7, r0
 8019da2:	2007      	movs	r0, #7
 8019da4:	460e      	mov	r6, r1
 8019da6:	4615      	mov	r5, r2
 8019da8:	461c      	mov	r4, r3
 8019daa:	f000 fc21 	bl	801a5f0 <nema_cl_get_space>
 8019dae:	b350      	cbz	r0, 8019e06 <nema_raster_triangle_fx+0x6a>
 8019db0:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8019db4:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8019db8:	f44f 7890 	mov.w	r8, #288	@ 0x120
 8019dbc:	f44f 7e9a 	mov.w	lr, #308	@ 0x134
 8019dc0:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 8019dc4:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8019dc8:	6103      	str	r3, [r0, #16]
 8019dca:	4b10      	ldr	r3, [pc, #64]	@ (8019e0c <nema_raster_triangle_fx+0x70>)
 8019dcc:	6047      	str	r7, [r0, #4]
 8019dce:	60c6      	str	r6, [r0, #12]
 8019dd0:	f8c0 8000 	str.w	r8, [r0]
 8019dd4:	6082      	str	r2, [r0, #8]
 8019dd6:	691a      	ldr	r2, [r3, #16]
 8019dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8019e10 <nema_raster_triangle_fx+0x74>)
 8019dda:	61c4      	str	r4, [r0, #28]
 8019ddc:	9c06      	ldr	r4, [sp, #24]
 8019dde:	6303      	str	r3, [r0, #48]	@ 0x30
 8019de0:	01d3      	lsls	r3, r2, #7
 8019de2:	6244      	str	r4, [r0, #36]	@ 0x24
 8019de4:	bf48      	it	mi
 8019de6:	f442 0200 	orrmi.w	r2, r2, #8388608	@ 0x800000
 8019dea:	9c07      	ldr	r4, [sp, #28]
 8019dec:	bf58      	it	pl
 8019dee:	f422 0200 	bicpl.w	r2, r2, #8388608	@ 0x800000
 8019df2:	f042 0204 	orr.w	r2, r2, #4
 8019df6:	6145      	str	r5, [r0, #20]
 8019df8:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8019dfa:	f8c0 e018 	str.w	lr, [r0, #24]
 8019dfe:	f8c0 c020 	str.w	ip, [r0, #32]
 8019e02:	6281      	str	r1, [r0, #40]	@ 0x28
 8019e04:	6342      	str	r2, [r0, #52]	@ 0x34
 8019e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e0a:	bf00      	nop
 8019e0c:	20000024 	.word	0x20000024
 8019e10:	ff000100 	.word	0xff000100

08019e14 <nema_raster_rect>:
 8019e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e16:	1e17      	subs	r7, r2, #0
 8019e18:	dd20      	ble.n	8019e5c <nema_raster_rect+0x48>
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	dd1e      	ble.n	8019e5c <nema_raster_rect+0x48>
 8019e1e:	4604      	mov	r4, r0
 8019e20:	2003      	movs	r0, #3
 8019e22:	461d      	mov	r5, r3
 8019e24:	460e      	mov	r6, r1
 8019e26:	f000 fbe3 	bl	801a5f0 <nema_cl_get_space>
 8019e2a:	b1b8      	cbz	r0, 8019e5c <nema_raster_rect+0x48>
 8019e2c:	f44f 7c82 	mov.w	ip, #260	@ 0x104
 8019e30:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8019e34:	193a      	adds	r2, r7, r4
 8019e36:	b292      	uxth	r2, r2
 8019e38:	19ab      	adds	r3, r5, r6
 8019e3a:	b2a4      	uxth	r4, r4
 8019e3c:	4d08      	ldr	r5, [pc, #32]	@ (8019e60 <nema_raster_rect+0x4c>)
 8019e3e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8019e42:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8019e46:	4a07      	ldr	r2, [pc, #28]	@ (8019e64 <nema_raster_rect+0x50>)
 8019e48:	6044      	str	r4, [r0, #4]
 8019e4a:	60c3      	str	r3, [r0, #12]
 8019e4c:	f8c0 c000 	str.w	ip, [r0]
 8019e50:	6081      	str	r1, [r0, #8]
 8019e52:	6105      	str	r5, [r0, #16]
 8019e54:	6913      	ldr	r3, [r2, #16]
 8019e56:	f043 0302 	orr.w	r3, r3, #2
 8019e5a:	6143      	str	r3, [r0, #20]
 8019e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e5e:	bf00      	nop
 8019e60:	ff000100 	.word	0xff000100
 8019e64:	20000024 	.word	0x20000024

08019e68 <nema_raster_quad_fx>:
 8019e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e6c:	4607      	mov	r7, r0
 8019e6e:	2009      	movs	r0, #9
 8019e70:	460e      	mov	r6, r1
 8019e72:	4615      	mov	r5, r2
 8019e74:	461c      	mov	r4, r3
 8019e76:	f000 fbbb 	bl	801a5f0 <nema_cl_get_space>
 8019e7a:	2800      	cmp	r0, #0
 8019e7c:	d02f      	beq.n	8019ede <nema_raster_quad_fx+0x76>
 8019e7e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8019e82:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8019e86:	f44f 7a90 	mov.w	sl, #288	@ 0x120
 8019e8a:	f44f 799a 	mov.w	r9, #308	@ 0x134
 8019e8e:	f44f 78a0 	mov.w	r8, #320	@ 0x140
 8019e92:	f44f 7ea2 	mov.w	lr, #324	@ 0x144
 8019e96:	f44f 7ca8 	mov.w	ip, #336	@ 0x150
 8019e9a:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8019e9e:	6103      	str	r3, [r0, #16]
 8019ea0:	4b10      	ldr	r3, [pc, #64]	@ (8019ee4 <nema_raster_quad_fx+0x7c>)
 8019ea2:	6047      	str	r7, [r0, #4]
 8019ea4:	60c6      	str	r6, [r0, #12]
 8019ea6:	f8c0 a000 	str.w	sl, [r0]
 8019eaa:	6082      	str	r2, [r0, #8]
 8019eac:	691a      	ldr	r2, [r3, #16]
 8019eae:	9b08      	ldr	r3, [sp, #32]
 8019eb0:	f042 0205 	orr.w	r2, r2, #5
 8019eb4:	6243      	str	r3, [r0, #36]	@ 0x24
 8019eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019eb8:	6145      	str	r5, [r0, #20]
 8019eba:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8019ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019ebe:	61c4      	str	r4, [r0, #28]
 8019ec0:	6343      	str	r3, [r0, #52]	@ 0x34
 8019ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019ec4:	6442      	str	r2, [r0, #68]	@ 0x44
 8019ec6:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019ec8:	4b07      	ldr	r3, [pc, #28]	@ (8019ee8 <nema_raster_quad_fx+0x80>)
 8019eca:	f8c0 9018 	str.w	r9, [r0, #24]
 8019ece:	f8c0 8020 	str.w	r8, [r0, #32]
 8019ed2:	f8c0 e028 	str.w	lr, [r0, #40]	@ 0x28
 8019ed6:	f8c0 c030 	str.w	ip, [r0, #48]	@ 0x30
 8019eda:	6381      	str	r1, [r0, #56]	@ 0x38
 8019edc:	6403      	str	r3, [r0, #64]	@ 0x40
 8019ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ee2:	bf00      	nop
 8019ee4:	20000024 	.word	0x20000024
 8019ee8:	ff000100 	.word	0xff000100

08019eec <nema_set_interrupt_ctrl>:
 8019eec:	4601      	mov	r1, r0
 8019eee:	20f8      	movs	r0, #248	@ 0xf8
 8019ef0:	f000 bbda 	b.w	801a6a8 <nema_cl_add_cmd>

08019ef4 <tsi_malloc_init_pool_aligned>:
 8019ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ef8:	2807      	cmp	r0, #7
 8019efa:	e9dd e706 	ldrd	lr, r7, [sp, #24]
 8019efe:	d845      	bhi.n	8019f8c <tsi_malloc_init_pool_aligned+0x98>
 8019f00:	2f0f      	cmp	r7, #15
 8019f02:	dd36      	ble.n	8019f72 <tsi_malloc_init_pool_aligned+0x7e>
 8019f04:	07bc      	lsls	r4, r7, #30
 8019f06:	463e      	mov	r6, r7
 8019f08:	d043      	beq.n	8019f92 <tsi_malloc_init_pool_aligned+0x9e>
 8019f0a:	f027 0703 	bic.w	r7, r7, #3
 8019f0e:	3704      	adds	r7, #4
 8019f10:	f107 0c0b 	add.w	ip, r7, #11
 8019f14:	fb9c fcf7 	sdiv	ip, ip, r7
 8019f18:	463e      	mov	r6, r7
 8019f1a:	fb07 fc0c 	mul.w	ip, r7, ip
 8019f1e:	fbb1 f4f6 	udiv	r4, r1, r6
 8019f22:	fb06 1514 	mls	r5, r6, r4, r1
 8019f26:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8019fa8 <tsi_malloc_init_pool_aligned+0xb4>
 8019f2a:	f8c8 c000 	str.w	ip, [r8]
 8019f2e:	b32d      	cbz	r5, 8019f7c <tsi_malloc_init_pool_aligned+0x88>
 8019f30:	fb04 6406 	mla	r4, r4, r6, r6
 8019f34:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8019f38:	4819      	ldr	r0, [pc, #100]	@ (8019fa0 <tsi_malloc_init_pool_aligned+0xac>)
 8019f3a:	00ed      	lsls	r5, r5, #3
 8019f3c:	1946      	adds	r6, r0, r5
 8019f3e:	5142      	str	r2, [r0, r5]
 8019f40:	18ca      	adds	r2, r1, r3
 8019f42:	60f4      	str	r4, [r6, #12]
 8019f44:	6071      	str	r1, [r6, #4]
 8019f46:	e9c6 3704 	strd	r3, r7, [r6, #16]
 8019f4a:	60b2      	str	r2, [r6, #8]
 8019f4c:	f1be 0f00 	cmp.w	lr, #0
 8019f50:	d016      	beq.n	8019f80 <tsi_malloc_init_pool_aligned+0x8c>
 8019f52:	b1c4      	cbz	r4, 8019f86 <tsi_malloc_init_pool_aligned+0x92>
 8019f54:	2200      	movs	r2, #0
 8019f56:	4610      	mov	r0, r2
 8019f58:	4d12      	ldr	r5, [pc, #72]	@ (8019fa4 <tsi_malloc_init_pool_aligned+0xb0>)
 8019f5a:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
 8019f5e:	eb0c 0104 	add.w	r1, ip, r4
 8019f62:	e884 1024 	stmia.w	r4, {r2, r5, ip}
 8019f66:	f84c 3004 	str.w	r3, [ip, r4]
 8019f6a:	e9c1 5201 	strd	r5, r2, [r1, #4]
 8019f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f72:	f04f 0c10 	mov.w	ip, #16
 8019f76:	4666      	mov	r6, ip
 8019f78:	4667      	mov	r7, ip
 8019f7a:	e7d0      	b.n	8019f1e <tsi_malloc_init_pool_aligned+0x2a>
 8019f7c:	460c      	mov	r4, r1
 8019f7e:	e7d9      	b.n	8019f34 <tsi_malloc_init_pool_aligned+0x40>
 8019f80:	4670      	mov	r0, lr
 8019f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f86:	4620      	mov	r0, r4
 8019f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f90:	e7ed      	b.n	8019f6e <tsi_malloc_init_pool_aligned+0x7a>
 8019f92:	f107 0c0b 	add.w	ip, r7, #11
 8019f96:	fb9c fcf7 	sdiv	ip, ip, r7
 8019f9a:	fb07 fc0c 	mul.w	ip, r7, ip
 8019f9e:	e7be      	b.n	8019f1e <tsi_malloc_init_pool_aligned+0x2a>
 8019fa0:	20087500 	.word	0x20087500
 8019fa4:	000f1fa1 	.word	0x000f1fa1
 8019fa8:	200000f4 	.word	0x200000f4

08019fac <tsi_malloc_pool>:
 8019fac:	2807      	cmp	r0, #7
 8019fae:	d850      	bhi.n	801a052 <tsi_malloc_pool+0xa6>
 8019fb0:	b4f0      	push	{r4, r5, r6, r7}
 8019fb2:	4b29      	ldr	r3, [pc, #164]	@ (801a058 <tsi_malloc_pool+0xac>)
 8019fb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019fb8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019fbc:	68c4      	ldr	r4, [r0, #12]
 8019fbe:	2c00      	cmp	r4, #0
 8019fc0:	d03e      	beq.n	801a040 <tsi_malloc_pool+0x94>
 8019fc2:	6947      	ldr	r7, [r0, #20]
 8019fc4:	4b25      	ldr	r3, [pc, #148]	@ (801a05c <tsi_malloc_pool+0xb0>)
 8019fc6:	f107 000b 	add.w	r0, r7, #11
 8019fca:	fb90 f0f7 	sdiv	r0, r0, r7
 8019fce:	fb07 f000 	mul.w	r0, r7, r0
 8019fd2:	1e7d      	subs	r5, r7, #1
 8019fd4:	4281      	cmp	r1, r0
 8019fd6:	bfac      	ite	ge
 8019fd8:	186d      	addge	r5, r5, r1
 8019fda:	182d      	addlt	r5, r5, r0
 8019fdc:	fb95 f5f7 	sdiv	r5, r5, r7
 8019fe0:	fb07 f505 	mul.w	r5, r7, r5
 8019fe4:	6821      	ldr	r1, [r4, #0]
 8019fe6:	6018      	str	r0, [r3, #0]
 8019fe8:	428d      	cmp	r5, r1
 8019fea:	dd2f      	ble.n	801a04c <tsi_malloc_pool+0xa0>
 8019fec:	68a3      	ldr	r3, [r4, #8]
 8019fee:	b33b      	cbz	r3, 801a040 <tsi_malloc_pool+0x94>
 8019ff0:	4626      	mov	r6, r4
 8019ff2:	e002      	b.n	8019ffa <tsi_malloc_pool+0x4e>
 8019ff4:	6893      	ldr	r3, [r2, #8]
 8019ff6:	4616      	mov	r6, r2
 8019ff8:	b313      	cbz	r3, 801a040 <tsi_malloc_pool+0x94>
 8019ffa:	58e1      	ldr	r1, [r4, r3]
 8019ffc:	18e2      	adds	r2, r4, r3
 8019ffe:	42a9      	cmp	r1, r5
 801a000:	dbf8      	blt.n	8019ff4 <tsi_malloc_pool+0x48>
 801a002:	1943      	adds	r3, r0, r5
 801a004:	428b      	cmp	r3, r1
 801a006:	da1e      	bge.n	801a046 <tsi_malloc_pool+0x9a>
 801a008:	1ac9      	subs	r1, r1, r3
 801a00a:	f8df c058 	ldr.w	ip, [pc, #88]	@ 801a064 <tsi_malloc_pool+0xb8>
 801a00e:	5099      	str	r1, [r3, r2]
 801a010:	4413      	add	r3, r2
 801a012:	f8c3 c004 	str.w	ip, [r3, #4]
 801a016:	6891      	ldr	r1, [r2, #8]
 801a018:	2f00      	cmp	r7, #0
 801a01a:	6099      	str	r1, [r3, #8]
 801a01c:	dd08      	ble.n	801a030 <tsi_malloc_pool+0x84>
 801a01e:	fbb3 f1f7 	udiv	r1, r3, r7
 801a022:	fb07 3c11 	mls	ip, r7, r1, r3
 801a026:	f1bc 0f00 	cmp.w	ip, #0
 801a02a:	d001      	beq.n	801a030 <tsi_malloc_pool+0x84>
 801a02c:	fb01 7307 	mla	r3, r1, r7, r7
 801a030:	1b1b      	subs	r3, r3, r4
 801a032:	60b3      	str	r3, [r6, #8]
 801a034:	6015      	str	r5, [r2, #0]
 801a036:	4b0a      	ldr	r3, [pc, #40]	@ (801a060 <tsi_malloc_pool+0xb4>)
 801a038:	4410      	add	r0, r2
 801a03a:	6053      	str	r3, [r2, #4]
 801a03c:	bcf0      	pop	{r4, r5, r6, r7}
 801a03e:	4770      	bx	lr
 801a040:	2000      	movs	r0, #0
 801a042:	bcf0      	pop	{r4, r5, r6, r7}
 801a044:	4770      	bx	lr
 801a046:	6893      	ldr	r3, [r2, #8]
 801a048:	60b3      	str	r3, [r6, #8]
 801a04a:	e7f4      	b.n	801a036 <tsi_malloc_pool+0x8a>
 801a04c:	4626      	mov	r6, r4
 801a04e:	4622      	mov	r2, r4
 801a050:	e7d7      	b.n	801a002 <tsi_malloc_pool+0x56>
 801a052:	2000      	movs	r0, #0
 801a054:	4770      	bx	lr
 801a056:	bf00      	nop
 801a058:	20087500 	.word	0x20087500
 801a05c:	200000f4 	.word	0x200000f4
 801a060:	000f1fa2 	.word	0x000f1fa2
 801a064:	000f1fa1 	.word	0x000f1fa1

0801a068 <tsi_free>:
 801a068:	2800      	cmp	r0, #0
 801a06a:	d044      	beq.n	801a0f6 <tsi_free+0x8e>
 801a06c:	4b6f      	ldr	r3, [pc, #444]	@ (801a22c <tsi_free+0x1c4>)
 801a06e:	68da      	ldr	r2, [r3, #12]
 801a070:	b12a      	cbz	r2, 801a07e <tsi_free+0x16>
 801a072:	6859      	ldr	r1, [r3, #4]
 801a074:	4288      	cmp	r0, r1
 801a076:	d302      	bcc.n	801a07e <tsi_free+0x16>
 801a078:	6899      	ldr	r1, [r3, #8]
 801a07a:	4288      	cmp	r0, r1
 801a07c:	d342      	bcc.n	801a104 <tsi_free+0x9c>
 801a07e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a080:	b12a      	cbz	r2, 801a08e <tsi_free+0x26>
 801a082:	69d9      	ldr	r1, [r3, #28]
 801a084:	4288      	cmp	r0, r1
 801a086:	d302      	bcc.n	801a08e <tsi_free+0x26>
 801a088:	6a19      	ldr	r1, [r3, #32]
 801a08a:	4288      	cmp	r0, r1
 801a08c:	d352      	bcc.n	801a134 <tsi_free+0xcc>
 801a08e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a090:	b12a      	cbz	r2, 801a09e <tsi_free+0x36>
 801a092:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801a094:	4288      	cmp	r0, r1
 801a096:	d302      	bcc.n	801a09e <tsi_free+0x36>
 801a098:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801a09a:	4288      	cmp	r0, r1
 801a09c:	d34c      	bcc.n	801a138 <tsi_free+0xd0>
 801a09e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801a0a0:	b12a      	cbz	r2, 801a0ae <tsi_free+0x46>
 801a0a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801a0a4:	4281      	cmp	r1, r0
 801a0a6:	d802      	bhi.n	801a0ae <tsi_free+0x46>
 801a0a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801a0aa:	4281      	cmp	r1, r0
 801a0ac:	d846      	bhi.n	801a13c <tsi_free+0xd4>
 801a0ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801a0b0:	b12a      	cbz	r2, 801a0be <tsi_free+0x56>
 801a0b2:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 801a0b4:	4288      	cmp	r0, r1
 801a0b6:	d302      	bcc.n	801a0be <tsi_free+0x56>
 801a0b8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 801a0ba:	4281      	cmp	r1, r0
 801a0bc:	d840      	bhi.n	801a140 <tsi_free+0xd8>
 801a0be:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801a0c2:	b132      	cbz	r2, 801a0d2 <tsi_free+0x6a>
 801a0c4:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 801a0c6:	4281      	cmp	r1, r0
 801a0c8:	d803      	bhi.n	801a0d2 <tsi_free+0x6a>
 801a0ca:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 801a0ce:	4288      	cmp	r0, r1
 801a0d0:	d338      	bcc.n	801a144 <tsi_free+0xdc>
 801a0d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 801a0d6:	b13a      	cbz	r2, 801a0e8 <tsi_free+0x80>
 801a0d8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801a0dc:	4288      	cmp	r0, r1
 801a0de:	d303      	bcc.n	801a0e8 <tsi_free+0x80>
 801a0e0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 801a0e4:	4288      	cmp	r0, r1
 801a0e6:	d32f      	bcc.n	801a148 <tsi_free+0xe0>
 801a0e8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 801a0ec:	b11a      	cbz	r2, 801a0f6 <tsi_free+0x8e>
 801a0ee:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
 801a0f2:	4281      	cmp	r1, r0
 801a0f4:	d900      	bls.n	801a0f8 <tsi_free+0x90>
 801a0f6:	4770      	bx	lr
 801a0f8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 801a0fc:	4281      	cmp	r1, r0
 801a0fe:	d9fa      	bls.n	801a0f6 <tsi_free+0x8e>
 801a100:	2107      	movs	r1, #7
 801a102:	e000      	b.n	801a106 <tsi_free+0x9e>
 801a104:	2100      	movs	r1, #0
 801a106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a10a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a10e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801a112:	695e      	ldr	r6, [r3, #20]
 801a114:	4b46      	ldr	r3, [pc, #280]	@ (801a230 <tsi_free+0x1c8>)
 801a116:	f106 010b 	add.w	r1, r6, #11
 801a11a:	fb91 f1f6 	sdiv	r1, r1, r6
 801a11e:	fb06 f101 	mul.w	r1, r6, r1
 801a122:	1a45      	subs	r5, r0, r1
 801a124:	686c      	ldr	r4, [r5, #4]
 801a126:	4f43      	ldr	r7, [pc, #268]	@ (801a234 <tsi_free+0x1cc>)
 801a128:	429c      	cmp	r4, r3
 801a12a:	6039      	str	r1, [r7, #0]
 801a12c:	46a8      	mov	r8, r5
 801a12e:	d00d      	beq.n	801a14c <tsi_free+0xe4>
 801a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a134:	2101      	movs	r1, #1
 801a136:	e7e6      	b.n	801a106 <tsi_free+0x9e>
 801a138:	2102      	movs	r1, #2
 801a13a:	e7e4      	b.n	801a106 <tsi_free+0x9e>
 801a13c:	2103      	movs	r1, #3
 801a13e:	e7e2      	b.n	801a106 <tsi_free+0x9e>
 801a140:	2104      	movs	r1, #4
 801a142:	e7e0      	b.n	801a106 <tsi_free+0x9e>
 801a144:	2105      	movs	r1, #5
 801a146:	e7de      	b.n	801a106 <tsi_free+0x9e>
 801a148:	2106      	movs	r1, #6
 801a14a:	e7dc      	b.n	801a106 <tsi_free+0x9e>
 801a14c:	4b3a      	ldr	r3, [pc, #232]	@ (801a238 <tsi_free+0x1d0>)
 801a14e:	606b      	str	r3, [r5, #4]
 801a150:	6894      	ldr	r4, [r2, #8]
 801a152:	18a3      	adds	r3, r4, r2
 801a154:	429d      	cmp	r5, r3
 801a156:	d95e      	bls.n	801a216 <tsi_free+0x1ae>
 801a158:	b90c      	cbnz	r4, 801a15e <tsi_free+0xf6>
 801a15a:	e05c      	b.n	801a216 <tsi_free+0x1ae>
 801a15c:	b12c      	cbz	r4, 801a16a <tsi_free+0x102>
 801a15e:	689c      	ldr	r4, [r3, #8]
 801a160:	469c      	mov	ip, r3
 801a162:	469e      	mov	lr, r3
 801a164:	1913      	adds	r3, r2, r4
 801a166:	429d      	cmp	r5, r3
 801a168:	d8f8      	bhi.n	801a15c <tsi_free+0xf4>
 801a16a:	682f      	ldr	r7, [r5, #0]
 801a16c:	4594      	cmp	ip, r2
 801a16e:	4438      	add	r0, r7
 801a170:	d04d      	beq.n	801a20e <tsi_free+0x1a6>
 801a172:	f8dc 7000 	ldr.w	r7, [ip]
 801a176:	eb01 040c 	add.w	r4, r1, ip
 801a17a:	443c      	add	r4, r7
 801a17c:	1b64      	subs	r4, r4, r5
 801a17e:	fab4 f484 	clz	r4, r4
 801a182:	0964      	lsrs	r4, r4, #5
 801a184:	2e00      	cmp	r6, #0
 801a186:	dd32      	ble.n	801a1ee <tsi_free+0x186>
 801a188:	fbb5 f7f6 	udiv	r7, r5, r6
 801a18c:	fb06 5c17 	mls	ip, r6, r7, r5
 801a190:	f1bc 0f00 	cmp.w	ip, #0
 801a194:	d001      	beq.n	801a19a <tsi_free+0x132>
 801a196:	fb07 6506 	mla	r5, r7, r6, r6
 801a19a:	fbb3 f7f6 	udiv	r7, r3, r6
 801a19e:	fb06 3c17 	mls	ip, r6, r7, r3
 801a1a2:	1aad      	subs	r5, r5, r2
 801a1a4:	f8ce 5008 	str.w	r5, [lr, #8]
 801a1a8:	f1bc 0f00 	cmp.w	ip, #0
 801a1ac:	d01d      	beq.n	801a1ea <tsi_free+0x182>
 801a1ae:	fb07 6606 	mla	r6, r7, r6, r6
 801a1b2:	1ab2      	subs	r2, r6, r2
 801a1b4:	f8c8 2008 	str.w	r2, [r8, #8]
 801a1b8:	b154      	cbz	r4, 801a1d0 <tsi_free+0x168>
 801a1ba:	f8d8 5000 	ldr.w	r5, [r8]
 801a1be:	46f0      	mov	r8, lr
 801a1c0:	f8de 4000 	ldr.w	r4, [lr]
 801a1c4:	440d      	add	r5, r1
 801a1c6:	442c      	add	r4, r5
 801a1c8:	f8ce 4000 	str.w	r4, [lr]
 801a1cc:	f8ce 2008 	str.w	r2, [lr, #8]
 801a1d0:	4283      	cmp	r3, r0
 801a1d2:	d1ad      	bne.n	801a130 <tsi_free+0xc8>
 801a1d4:	6818      	ldr	r0, [r3, #0]
 801a1d6:	f8d8 2000 	ldr.w	r2, [r8]
 801a1da:	4401      	add	r1, r0
 801a1dc:	440a      	add	r2, r1
 801a1de:	f8c8 2000 	str.w	r2, [r8]
 801a1e2:	689b      	ldr	r3, [r3, #8]
 801a1e4:	f8c8 3008 	str.w	r3, [r8, #8]
 801a1e8:	e7a2      	b.n	801a130 <tsi_free+0xc8>
 801a1ea:	461e      	mov	r6, r3
 801a1ec:	e7e1      	b.n	801a1b2 <tsi_free+0x14a>
 801a1ee:	1aae      	subs	r6, r5, r2
 801a1f0:	1a9a      	subs	r2, r3, r2
 801a1f2:	f8ce 6008 	str.w	r6, [lr, #8]
 801a1f6:	60aa      	str	r2, [r5, #8]
 801a1f8:	2c00      	cmp	r4, #0
 801a1fa:	d0e9      	beq.n	801a1d0 <tsi_free+0x168>
 801a1fc:	682d      	ldr	r5, [r5, #0]
 801a1fe:	f8de 4000 	ldr.w	r4, [lr]
 801a202:	440d      	add	r5, r1
 801a204:	442c      	add	r4, r5
 801a206:	f8ce 4000 	str.w	r4, [lr]
 801a20a:	46f0      	mov	r8, lr
 801a20c:	e7de      	b.n	801a1cc <tsi_free+0x164>
 801a20e:	2e00      	cmp	r6, #0
 801a210:	dd06      	ble.n	801a220 <tsi_free+0x1b8>
 801a212:	2400      	movs	r4, #0
 801a214:	e7b8      	b.n	801a188 <tsi_free+0x120>
 801a216:	682c      	ldr	r4, [r5, #0]
 801a218:	4696      	mov	lr, r2
 801a21a:	4420      	add	r0, r4
 801a21c:	2400      	movs	r4, #0
 801a21e:	e7b1      	b.n	801a184 <tsi_free+0x11c>
 801a220:	eba5 020c 	sub.w	r2, r5, ip
 801a224:	f8cc 2008 	str.w	r2, [ip, #8]
 801a228:	60ac      	str	r4, [r5, #8]
 801a22a:	e7d1      	b.n	801a1d0 <tsi_free+0x168>
 801a22c:	20087500 	.word	0x20087500
 801a230:	000f1fa2 	.word	0x000f1fa2
 801a234:	200000f4 	.word	0x200000f4
 801a238:	000f1fa1 	.word	0x000f1fa1

0801a23c <nema_cl_create_sized>:
 801a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a23e:	b093      	sub	sp, #76	@ 0x4c
 801a240:	466d      	mov	r5, sp
 801a242:	4606      	mov	r6, r0
 801a244:	460a      	mov	r2, r1
 801a246:	4628      	mov	r0, r5
 801a248:	2100      	movs	r1, #0
 801a24a:	f7f9 f89b 	bl	8013384 <nema_buffer_create_pool>
 801a24e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801a252:	2500      	movs	r5, #0
 801a254:	ac04      	add	r4, sp, #16
 801a256:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a25a:	4620      	mov	r0, r4
 801a25c:	f7f9 f8a1 	bl	80133a2 <nema_buffer_map>
 801a260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a264:	ac08      	add	r4, sp, #32
 801a266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a26a:	2110      	movs	r1, #16
 801a26c:	f04f 32ff 	mov.w	r2, #4294967295
 801a270:	9b04      	ldr	r3, [sp, #16]
 801a272:	950d      	str	r5, [sp, #52]	@ 0x34
 801a274:	e9cd 5510 	strd	r5, r5, [sp, #64]	@ 0x40
 801a278:	42ab      	cmp	r3, r5
 801a27a:	4635      	mov	r5, r6
 801a27c:	bfb8      	it	lt
 801a27e:	3307      	addlt	r3, #7
 801a280:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 801a284:	10db      	asrs	r3, r3, #3
 801a286:	005b      	lsls	r3, r3, #1
 801a288:	930c      	str	r3, [sp, #48]	@ 0x30
 801a28a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a28c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a28e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a292:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a296:	2700      	movs	r7, #0
 801a298:	e885 0003 	stmia.w	r5, {r0, r1}
 801a29c:	4630      	mov	r0, r6
 801a29e:	61b7      	str	r7, [r6, #24]
 801a2a0:	b013      	add	sp, #76	@ 0x4c
 801a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a2a4 <nema_extend_bound_cl>:
 801a2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2a6:	4d6e      	ldr	r5, [pc, #440]	@ (801a460 <nema_extend_bound_cl+0x1bc>)
 801a2a8:	b09f      	sub	sp, #124	@ 0x7c
 801a2aa:	682b      	ldr	r3, [r5, #0]
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	f000 80c1 	beq.w	801a434 <nema_extend_bound_cl+0x190>
 801a2b2:	4606      	mov	r6, r0
 801a2b4:	6998      	ldr	r0, [r3, #24]
 801a2b6:	0784      	lsls	r4, r0, #30
 801a2b8:	f140 80b6 	bpl.w	801a428 <nema_extend_bound_cl+0x184>
 801a2bc:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801a2c0:	0680      	lsls	r0, r0, #26
 801a2c2:	d44e      	bmi.n	801a362 <nema_extend_bound_cl+0xbe>
 801a2c4:	1a89      	subs	r1, r1, r2
 801a2c6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801a2ca:	1049      	asrs	r1, r1, #1
 801a2cc:	2902      	cmp	r1, #2
 801a2ce:	dd13      	ble.n	801a2f8 <nema_extend_bound_cl+0x54>
 801a2d0:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 801a2d4:	2700      	movs	r7, #0
 801a2d6:	1e94      	subs	r4, r2, #2
 801a2d8:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801a2dc:	1c91      	adds	r1, r2, #2
 801a2de:	0092      	lsls	r2, r2, #2
 801a2e0:	6898      	ldr	r0, [r3, #8]
 801a2e2:	f840 c002 	str.w	ip, [r0, r2]
 801a2e6:	6898      	ldr	r0, [r3, #8]
 801a2e8:	4410      	add	r0, r2
 801a2ea:	6047      	str	r7, [r0, #4]
 801a2ec:	6159      	str	r1, [r3, #20]
 801a2ee:	3102      	adds	r1, #2
 801a2f0:	428c      	cmp	r4, r1
 801a2f2:	f102 0208 	add.w	r2, r2, #8
 801a2f6:	d1f3      	bne.n	801a2e0 <nema_extend_bound_cl+0x3c>
 801a2f8:	6a1c      	ldr	r4, [r3, #32]
 801a2fa:	2c00      	cmp	r4, #0
 801a2fc:	d050      	beq.n	801a3a0 <nema_extend_bound_cl+0xfc>
 801a2fe:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 801a302:	26f0      	movs	r6, #240	@ 0xf0
 801a304:	27f4      	movs	r7, #244	@ 0xf4
 801a306:	6898      	ldr	r0, [r3, #8]
 801a308:	f041 0104 	orr.w	r1, r1, #4
 801a30c:	6199      	str	r1, [r3, #24]
 801a30e:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
 801a312:	6899      	ldr	r1, [r3, #8]
 801a314:	68e6      	ldr	r6, [r4, #12]
 801a316:	0090      	lsls	r0, r2, #2
 801a318:	4401      	add	r1, r0
 801a31a:	604e      	str	r6, [r1, #4]
 801a31c:	6899      	ldr	r1, [r3, #8]
 801a31e:	1c96      	adds	r6, r2, #2
 801a320:	4401      	add	r1, r0
 801a322:	615e      	str	r6, [r3, #20]
 801a324:	608f      	str	r7, [r1, #8]
 801a326:	6899      	ldr	r1, [r3, #8]
 801a328:	6926      	ldr	r6, [r4, #16]
 801a32a:	4401      	add	r1, r0
 801a32c:	1d17      	adds	r7, r2, #4
 801a32e:	60ce      	str	r6, [r1, #12]
 801a330:	621c      	str	r4, [r3, #32]
 801a332:	615f      	str	r7, [r3, #20]
 801a334:	68e1      	ldr	r1, [r4, #12]
 801a336:	f011 0107 	ands.w	r1, r1, #7
 801a33a:	d120      	bne.n	801a37e <nema_extend_bound_cl+0xda>
 801a33c:	691e      	ldr	r6, [r3, #16]
 801a33e:	3205      	adds	r2, #5
 801a340:	42b2      	cmp	r2, r6
 801a342:	db23      	blt.n	801a38c <nema_extend_bound_cl+0xe8>
 801a344:	699a      	ldr	r2, [r3, #24]
 801a346:	f022 0220 	bic.w	r2, r2, #32
 801a34a:	619a      	str	r2, [r3, #24]
 801a34c:	69a3      	ldr	r3, [r4, #24]
 801a34e:	075a      	lsls	r2, r3, #29
 801a350:	d503      	bpl.n	801a35a <nema_extend_bound_cl+0xb6>
 801a352:	6a24      	ldr	r4, [r4, #32]
 801a354:	69a3      	ldr	r3, [r4, #24]
 801a356:	075b      	lsls	r3, r3, #29
 801a358:	d4fb      	bmi.n	801a352 <nema_extend_bound_cl+0xae>
 801a35a:	2000      	movs	r0, #0
 801a35c:	602c      	str	r4, [r5, #0]
 801a35e:	b01f      	add	sp, #124	@ 0x7c
 801a360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a362:	2900      	cmp	r1, #0
 801a364:	bfb8      	it	lt
 801a366:	3103      	addlt	r1, #3
 801a368:	1089      	asrs	r1, r1, #2
 801a36a:	0049      	lsls	r1, r1, #1
 801a36c:	4291      	cmp	r1, r2
 801a36e:	bfcc      	ite	gt
 801a370:	4610      	movgt	r0, r2
 801a372:	1a50      	suble	r0, r2, r1
 801a374:	1a09      	subs	r1, r1, r0
 801a376:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801a37a:	1049      	asrs	r1, r1, #1
 801a37c:	e7a6      	b.n	801a2cc <nema_extend_bound_cl+0x28>
 801a37e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801a382:	f7fe fcbf 	bl	8018d04 <nema_set_error>
 801a386:	2000      	movs	r0, #0
 801a388:	b01f      	add	sp, #124	@ 0x7c
 801a38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a38c:	f44f 26a0 	mov.w	r6, #327680	@ 0x50000
 801a390:	689a      	ldr	r2, [r3, #8]
 801a392:	4410      	add	r0, r2
 801a394:	e9c0 6104 	strd	r6, r1, [r0, #16]
 801a398:	699a      	ldr	r2, [r3, #24]
 801a39a:	f022 0208 	bic.w	r2, r2, #8
 801a39e:	e7d2      	b.n	801a346 <nema_extend_bound_cl+0xa2>
 801a3a0:	2028      	movs	r0, #40	@ 0x28
 801a3a2:	f7f8 ffb0 	bl	8013306 <nema_host_malloc>
 801a3a6:	4604      	mov	r4, r0
 801a3a8:	2800      	cmp	r0, #0
 801a3aa:	d052      	beq.n	801a452 <nema_extend_bound_cl+0x1ae>
 801a3ac:	1cb1      	adds	r1, r6, #2
 801a3ae:	00c9      	lsls	r1, r1, #3
 801a3b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a3b4:	dd1a      	ble.n	801a3ec <nema_extend_bound_cl+0x148>
 801a3b6:	466e      	mov	r6, sp
 801a3b8:	4627      	mov	r7, r4
 801a3ba:	4668      	mov	r0, sp
 801a3bc:	f7ff ff3e 	bl	801a23c <nema_cl_create_sized>
 801a3c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a3c2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a3c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a3c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a3c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a3cc:	e887 0003 	stmia.w	r7, {r0, r1}
 801a3d0:	68a3      	ldr	r3, [r4, #8]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d034      	beq.n	801a440 <nema_extend_bound_cl+0x19c>
 801a3d6:	682b      	ldr	r3, [r5, #0]
 801a3d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a3da:	2a00      	cmp	r2, #0
 801a3dc:	bf08      	it	eq
 801a3de:	461a      	moveq	r2, r3
 801a3e0:	6262      	str	r2, [r4, #36]	@ 0x24
 801a3e2:	699a      	ldr	r2, [r3, #24]
 801a3e4:	f022 020c 	bic.w	r2, r2, #12
 801a3e8:	61a2      	str	r2, [r4, #24]
 801a3ea:	e788      	b.n	801a2fe <nema_extend_bound_cl+0x5a>
 801a3ec:	a80a      	add	r0, sp, #40	@ 0x28
 801a3ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801a3f2:	f7ff ff23 	bl	801a23c <nema_cl_create_sized>
 801a3f6:	2302      	movs	r3, #2
 801a3f8:	46a4      	mov	ip, r4
 801a3fa:	9310      	str	r3, [sp, #64]	@ 0x40
 801a3fc:	ae0a      	add	r6, sp, #40	@ 0x28
 801a3fe:	af14      	add	r7, sp, #80	@ 0x50
 801a400:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a402:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a404:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a406:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a408:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a40c:	ae14      	add	r6, sp, #80	@ 0x50
 801a40e:	e887 0003 	stmia.w	r7, {r0, r1}
 801a412:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a418:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a41a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a41e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a422:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a426:	e7d3      	b.n	801a3d0 <nema_extend_bound_cl+0x12c>
 801a428:	2008      	movs	r0, #8
 801a42a:	f7fe fc6b 	bl	8018d04 <nema_set_error>
 801a42e:	f04f 30ff 	mov.w	r0, #4294967295
 801a432:	e7a9      	b.n	801a388 <nema_extend_bound_cl+0xe4>
 801a434:	2080      	movs	r0, #128	@ 0x80
 801a436:	f7fe fc65 	bl	8018d04 <nema_set_error>
 801a43a:	f04f 30ff 	mov.w	r0, #4294967295
 801a43e:	e7a3      	b.n	801a388 <nema_extend_bound_cl+0xe4>
 801a440:	2010      	movs	r0, #16
 801a442:	f7fe fc5f 	bl	8018d04 <nema_set_error>
 801a446:	4620      	mov	r0, r4
 801a448:	f7f8 ff52 	bl	80132f0 <nema_host_free>
 801a44c:	f04f 30ff 	mov.w	r0, #4294967295
 801a450:	e79a      	b.n	801a388 <nema_extend_bound_cl+0xe4>
 801a452:	2010      	movs	r0, #16
 801a454:	f7fe fc56 	bl	8018d04 <nema_set_error>
 801a458:	f04f 30ff 	mov.w	r0, #4294967295
 801a45c:	e794      	b.n	801a388 <nema_extend_bound_cl+0xe4>
 801a45e:	bf00      	nop
 801a460:	200875c0 	.word	0x200875c0

0801a464 <nema_cl_bind_circular>:
 801a464:	b358      	cbz	r0, 801a4be <nema_cl_bind_circular+0x5a>
 801a466:	68c3      	ldr	r3, [r0, #12]
 801a468:	f013 0207 	ands.w	r2, r3, #7
 801a46c:	d117      	bne.n	801a49e <nema_cl_bind_circular+0x3a>
 801a46e:	b4f0      	push	{r4, r5, r6, r7}
 801a470:	4c15      	ldr	r4, [pc, #84]	@ (801a4c8 <nema_cl_bind_circular+0x64>)
 801a472:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a474:	6821      	ldr	r1, [r4, #0]
 801a476:	2b00      	cmp	r3, #0
 801a478:	bf08      	it	eq
 801a47a:	4603      	moveq	r3, r0
 801a47c:	b141      	cbz	r1, 801a490 <nema_cl_bind_circular+0x2c>
 801a47e:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
 801a482:	1c46      	adds	r6, r0, #1
 801a484:	42ae      	cmp	r6, r5
 801a486:	db0e      	blt.n	801a4a6 <nema_cl_bind_circular+0x42>
 801a488:	698a      	ldr	r2, [r1, #24]
 801a48a:	f022 0220 	bic.w	r2, r2, #32
 801a48e:	618a      	str	r2, [r1, #24]
 801a490:	699a      	ldr	r2, [r3, #24]
 801a492:	6023      	str	r3, [r4, #0]
 801a494:	f042 0220 	orr.w	r2, r2, #32
 801a498:	619a      	str	r2, [r3, #24]
 801a49a:	bcf0      	pop	{r4, r5, r6, r7}
 801a49c:	4770      	bx	lr
 801a49e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801a4a2:	f7fe bc2f 	b.w	8018d04 <nema_set_error>
 801a4a6:	f44f 27a0 	mov.w	r7, #327680	@ 0x50000
 801a4aa:	688d      	ldr	r5, [r1, #8]
 801a4ac:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801a4b0:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
 801a4b4:	6072      	str	r2, [r6, #4]
 801a4b6:	698a      	ldr	r2, [r1, #24]
 801a4b8:	f022 0208 	bic.w	r2, r2, #8
 801a4bc:	e7e5      	b.n	801a48a <nema_cl_bind_circular+0x26>
 801a4be:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801a4c2:	f7fe bc1f 	b.w	8018d04 <nema_set_error>
 801a4c6:	bf00      	nop
 801a4c8:	200875c0 	.word	0x200875c0

0801a4cc <nema_cl_unbind>:
 801a4cc:	4910      	ldr	r1, [pc, #64]	@ (801a510 <nema_cl_unbind+0x44>)
 801a4ce:	680b      	ldr	r3, [r1, #0]
 801a4d0:	b1d3      	cbz	r3, 801a508 <nema_cl_unbind+0x3c>
 801a4d2:	b430      	push	{r4, r5}
 801a4d4:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 801a4d8:	1c54      	adds	r4, r2, #1
 801a4da:	4284      	cmp	r4, r0
 801a4dc:	db07      	blt.n	801a4ee <nema_cl_unbind+0x22>
 801a4de:	699a      	ldr	r2, [r3, #24]
 801a4e0:	f022 0220 	bic.w	r2, r2, #32
 801a4e4:	619a      	str	r2, [r3, #24]
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	600b      	str	r3, [r1, #0]
 801a4ea:	bc30      	pop	{r4, r5}
 801a4ec:	4770      	bx	lr
 801a4ee:	f44f 25a0 	mov.w	r5, #327680	@ 0x50000
 801a4f2:	2400      	movs	r4, #0
 801a4f4:	6898      	ldr	r0, [r3, #8]
 801a4f6:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 801a4fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801a4fe:	6054      	str	r4, [r2, #4]
 801a500:	699a      	ldr	r2, [r3, #24]
 801a502:	f022 0208 	bic.w	r2, r2, #8
 801a506:	e7eb      	b.n	801a4e0 <nema_cl_unbind+0x14>
 801a508:	2300      	movs	r3, #0
 801a50a:	600b      	str	r3, [r1, #0]
 801a50c:	4770      	bx	lr
 801a50e:	bf00      	nop
 801a510:	200875c0 	.word	0x200875c0

0801a514 <nema_cl_submit_no_irq>:
 801a514:	2800      	cmp	r0, #0
 801a516:	d052      	beq.n	801a5be <nema_cl_submit_no_irq+0xaa>
 801a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a51a:	6944      	ldr	r4, [r0, #20]
 801a51c:	b1f4      	cbz	r4, 801a55c <nema_cl_submit_no_irq+0x48>
 801a51e:	6983      	ldr	r3, [r0, #24]
 801a520:	4605      	mov	r5, r0
 801a522:	069a      	lsls	r2, r3, #26
 801a524:	d51b      	bpl.n	801a55e <nema_cl_submit_no_irq+0x4a>
 801a526:	6902      	ldr	r2, [r0, #16]
 801a528:	2a00      	cmp	r2, #0
 801a52a:	bfb8      	it	lt
 801a52c:	3203      	addlt	r2, #3
 801a52e:	1092      	asrs	r2, r2, #2
 801a530:	0056      	lsls	r6, r2, #1
 801a532:	42b4      	cmp	r4, r6
 801a534:	da3d      	bge.n	801a5b2 <nema_cl_submit_no_irq+0x9e>
 801a536:	68c7      	ldr	r7, [r0, #12]
 801a538:	071b      	lsls	r3, r3, #28
 801a53a:	d549      	bpl.n	801a5d0 <nema_cl_submit_no_irq+0xbc>
 801a53c:	69e8      	ldr	r0, [r5, #28]
 801a53e:	2800      	cmp	r0, #0
 801a540:	da41      	bge.n	801a5c6 <nema_cl_submit_no_irq+0xb2>
 801a542:	f04f 33ff 	mov.w	r3, #4294967295
 801a546:	61eb      	str	r3, [r5, #28]
 801a548:	4621      	mov	r1, r4
 801a54a:	4638      	mov	r0, r7
 801a54c:	f7fe f9c6 	bl	80188dc <nema_rb_submit_cmdlist2>
 801a550:	696b      	ldr	r3, [r5, #20]
 801a552:	61e8      	str	r0, [r5, #28]
 801a554:	42b3      	cmp	r3, r6
 801a556:	bfa8      	it	ge
 801a558:	2600      	movge	r6, #0
 801a55a:	616e      	str	r6, [r5, #20]
 801a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a55e:	4604      	mov	r4, r0
 801a560:	f06f 4640 	mvn.w	r6, #3221225472	@ 0xc0000000
 801a564:	e012      	b.n	801a58c <nema_cl_submit_no_irq+0x78>
 801a566:	6923      	ldr	r3, [r4, #16]
 801a568:	6949      	ldr	r1, [r1, #20]
 801a56a:	4433      	add	r3, r6
 801a56c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801a570:	69a3      	ldr	r3, [r4, #24]
 801a572:	4620      	mov	r0, r4
 801a574:	f023 0308 	bic.w	r3, r3, #8
 801a578:	61a3      	str	r3, [r4, #24]
 801a57a:	f7f8 ff1e 	bl	80133ba <nema_buffer_flush>
 801a57e:	69a3      	ldr	r3, [r4, #24]
 801a580:	f043 0308 	orr.w	r3, r3, #8
 801a584:	61a3      	str	r3, [r4, #24]
 801a586:	6a24      	ldr	r4, [r4, #32]
 801a588:	b134      	cbz	r4, 801a598 <nema_cl_submit_no_irq+0x84>
 801a58a:	69a3      	ldr	r3, [r4, #24]
 801a58c:	0758      	lsls	r0, r3, #29
 801a58e:	68a2      	ldr	r2, [r4, #8]
 801a590:	6a21      	ldr	r1, [r4, #32]
 801a592:	d4e8      	bmi.n	801a566 <nema_cl_submit_no_irq+0x52>
 801a594:	071b      	lsls	r3, r3, #28
 801a596:	d523      	bpl.n	801a5e0 <nema_cl_submit_no_irq+0xcc>
 801a598:	2000      	movs	r0, #0
 801a59a:	f7f8 ff18 	bl	80133ce <nema_mutex_lock>
 801a59e:	6969      	ldr	r1, [r5, #20]
 801a5a0:	4628      	mov	r0, r5
 801a5a2:	f7fe fa1f 	bl	80189e4 <nema_rb_submit_cmdlist>
 801a5a6:	61e8      	str	r0, [r5, #28]
 801a5a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a5ac:	2000      	movs	r0, #0
 801a5ae:	f7f8 bf1b 	b.w	80133e8 <nema_mutex_unlock>
 801a5b2:	d0d3      	beq.n	801a55c <nema_cl_submit_no_irq+0x48>
 801a5b4:	68c7      	ldr	r7, [r0, #12]
 801a5b6:	1ba4      	subs	r4, r4, r6
 801a5b8:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
 801a5bc:	e7bc      	b.n	801a538 <nema_cl_submit_no_irq+0x24>
 801a5be:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801a5c2:	f7fe bb9f 	b.w	8018d04 <nema_set_error>
 801a5c6:	f7f8 fe7f 	bl	80132c8 <nema_wait_irq_cl>
 801a5ca:	2800      	cmp	r0, #0
 801a5cc:	dab9      	bge.n	801a542 <nema_cl_submit_no_irq+0x2e>
 801a5ce:	e7bb      	b.n	801a548 <nema_cl_submit_no_irq+0x34>
 801a5d0:	4628      	mov	r0, r5
 801a5d2:	f7f8 fef2 	bl	80133ba <nema_buffer_flush>
 801a5d6:	69ab      	ldr	r3, [r5, #24]
 801a5d8:	f043 0308 	orr.w	r3, r3, #8
 801a5dc:	61ab      	str	r3, [r5, #24]
 801a5de:	e7ad      	b.n	801a53c <nema_cl_submit_no_irq+0x28>
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	f7f8 feea 	bl	80133ba <nema_buffer_flush>
 801a5e6:	69a3      	ldr	r3, [r4, #24]
 801a5e8:	f043 0308 	orr.w	r3, r3, #8
 801a5ec:	61a3      	str	r3, [r4, #24]
 801a5ee:	e7d3      	b.n	801a598 <nema_cl_submit_no_irq+0x84>

0801a5f0 <nema_cl_get_space>:
 801a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5f2:	4e2c      	ldr	r6, [pc, #176]	@ (801a6a4 <nema_cl_get_space+0xb4>)
 801a5f4:	6834      	ldr	r4, [r6, #0]
 801a5f6:	2c00      	cmp	r4, #0
 801a5f8:	d04d      	beq.n	801a696 <nema_cl_get_space+0xa6>
 801a5fa:	69a7      	ldr	r7, [r4, #24]
 801a5fc:	4605      	mov	r5, r0
 801a5fe:	f027 0108 	bic.w	r1, r7, #8
 801a602:	f017 0720 	ands.w	r7, r7, #32
 801a606:	61a1      	str	r1, [r4, #24]
 801a608:	6923      	ldr	r3, [r4, #16]
 801a60a:	6961      	ldr	r1, [r4, #20]
 801a60c:	d016      	beq.n	801a63c <nema_cl_get_space+0x4c>
 801a60e:	2b00      	cmp	r3, #0
 801a610:	bfb8      	it	lt
 801a612:	3303      	addlt	r3, #3
 801a614:	109b      	asrs	r3, r3, #2
 801a616:	005b      	lsls	r3, r3, #1
 801a618:	4299      	cmp	r1, r3
 801a61a:	bfb4      	ite	lt
 801a61c:	460a      	movlt	r2, r1
 801a61e:	1aca      	subge	r2, r1, r3
 801a620:	1a9a      	subs	r2, r3, r2
 801a622:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801a626:	3001      	adds	r0, #1
 801a628:	ebb0 0f62 	cmp.w	r0, r2, asr #1
 801a62c:	da1a      	bge.n	801a664 <nema_cl_get_space+0x74>
 801a62e:	68a0      	ldr	r0, [r4, #8]
 801a630:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801a634:	6165      	str	r5, [r4, #20]
 801a636:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a63c:	1a5b      	subs	r3, r3, r1
 801a63e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a642:	105b      	asrs	r3, r3, #1
 801a644:	3b01      	subs	r3, #1
 801a646:	4283      	cmp	r3, r0
 801a648:	dcf1      	bgt.n	801a62e <nema_cl_get_space+0x3e>
 801a64a:	f7ff fe2b 	bl	801a2a4 <nema_extend_bound_cl>
 801a64e:	2800      	cmp	r0, #0
 801a650:	db26      	blt.n	801a6a0 <nema_cl_get_space+0xb0>
 801a652:	6834      	ldr	r4, [r6, #0]
 801a654:	6961      	ldr	r1, [r4, #20]
 801a656:	68a0      	ldr	r0, [r4, #8]
 801a658:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801a65c:	6165      	str	r5, [r4, #20]
 801a65e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801a662:	e7ea      	b.n	801a63a <nema_cl_get_space+0x4a>
 801a664:	2900      	cmp	r1, #0
 801a666:	d0e2      	beq.n	801a62e <nema_cl_get_space+0x3e>
 801a668:	4299      	cmp	r1, r3
 801a66a:	d0e0      	beq.n	801a62e <nema_cl_get_space+0x3e>
 801a66c:	4620      	mov	r0, r4
 801a66e:	f7ff ff51 	bl	801a514 <nema_cl_submit_no_irq>
 801a672:	69e0      	ldr	r0, [r4, #28]
 801a674:	f7fe fa82 	bl	8018b7c <nema_rb_submit_cl_id>
 801a678:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801a67c:	69e0      	ldr	r0, [r4, #28]
 801a67e:	4298      	cmp	r0, r3
 801a680:	d1e7      	bne.n	801a652 <nema_cl_get_space+0x62>
 801a682:	f7f8 fe21 	bl	80132c8 <nema_wait_irq_cl>
 801a686:	2800      	cmp	r0, #0
 801a688:	dbe3      	blt.n	801a652 <nema_cl_get_space+0x62>
 801a68a:	f04f 33ff 	mov.w	r3, #4294967295
 801a68e:	61e3      	str	r3, [r4, #28]
 801a690:	6834      	ldr	r4, [r6, #0]
 801a692:	6961      	ldr	r1, [r4, #20]
 801a694:	e7cb      	b.n	801a62e <nema_cl_get_space+0x3e>
 801a696:	2080      	movs	r0, #128	@ 0x80
 801a698:	f7fe fb34 	bl	8018d04 <nema_set_error>
 801a69c:	4620      	mov	r0, r4
 801a69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6a0:	4638      	mov	r0, r7
 801a6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6a4:	200875c0 	.word	0x200875c0

0801a6a8 <nema_cl_add_cmd>:
 801a6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6ac:	4e2e      	ldr	r6, [pc, #184]	@ (801a768 <nema_cl_add_cmd+0xc0>)
 801a6ae:	4680      	mov	r8, r0
 801a6b0:	6834      	ldr	r4, [r6, #0]
 801a6b2:	460f      	mov	r7, r1
 801a6b4:	b35c      	cbz	r4, 801a70e <nema_cl_add_cmd+0x66>
 801a6b6:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801a6ba:	f025 0308 	bic.w	r3, r5, #8
 801a6be:	f015 0020 	ands.w	r0, r5, #32
 801a6c2:	61a3      	str	r3, [r4, #24]
 801a6c4:	6923      	ldr	r3, [r4, #16]
 801a6c6:	d016      	beq.n	801a6f6 <nema_cl_add_cmd+0x4e>
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	bfb8      	it	lt
 801a6cc:	3303      	addlt	r3, #3
 801a6ce:	109b      	asrs	r3, r3, #2
 801a6d0:	005b      	lsls	r3, r3, #1
 801a6d2:	429a      	cmp	r2, r3
 801a6d4:	bfb4      	ite	lt
 801a6d6:	4611      	movlt	r1, r2
 801a6d8:	1ad1      	subge	r1, r2, r3
 801a6da:	1a59      	subs	r1, r3, r1
 801a6dc:	2903      	cmp	r1, #3
 801a6de:	dd2a      	ble.n	801a736 <nema_cl_add_cmd+0x8e>
 801a6e0:	1c51      	adds	r1, r2, #1
 801a6e2:	68a0      	ldr	r0, [r4, #8]
 801a6e4:	1c93      	adds	r3, r2, #2
 801a6e6:	f840 8022 	str.w	r8, [r0, r2, lsl #2]
 801a6ea:	68a2      	ldr	r2, [r4, #8]
 801a6ec:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
 801a6f0:	6163      	str	r3, [r4, #20]
 801a6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6f6:	07a9      	lsls	r1, r5, #30
 801a6f8:	d515      	bpl.n	801a726 <nema_cl_add_cmd+0x7e>
 801a6fa:	1d11      	adds	r1, r2, #4
 801a6fc:	4299      	cmp	r1, r3
 801a6fe:	dbef      	blt.n	801a6e0 <nema_cl_add_cmd+0x38>
 801a700:	f7ff fdd0 	bl	801a2a4 <nema_extend_bound_cl>
 801a704:	2800      	cmp	r0, #0
 801a706:	dbf4      	blt.n	801a6f2 <nema_cl_add_cmd+0x4a>
 801a708:	6834      	ldr	r4, [r6, #0]
 801a70a:	6962      	ldr	r2, [r4, #20]
 801a70c:	e7e8      	b.n	801a6e0 <nema_cl_add_cmd+0x38>
 801a70e:	4620      	mov	r0, r4
 801a710:	f7f8 fe5d 	bl	80133ce <nema_mutex_lock>
 801a714:	4640      	mov	r0, r8
 801a716:	4639      	mov	r1, r7
 801a718:	f7fe f968 	bl	80189ec <nema_rb_inline_cmd>
 801a71c:	4620      	mov	r0, r4
 801a71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a722:	f7f8 be61 	b.w	80133e8 <nema_mutex_unlock>
 801a726:	1c51      	adds	r1, r2, #1
 801a728:	4299      	cmp	r1, r3
 801a72a:	dbda      	blt.n	801a6e2 <nema_cl_add_cmd+0x3a>
 801a72c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a730:	2008      	movs	r0, #8
 801a732:	f7fe bae7 	b.w	8018d04 <nema_set_error>
 801a736:	b1a2      	cbz	r2, 801a762 <nema_cl_add_cmd+0xba>
 801a738:	429a      	cmp	r2, r3
 801a73a:	d0d1      	beq.n	801a6e0 <nema_cl_add_cmd+0x38>
 801a73c:	4620      	mov	r0, r4
 801a73e:	f7ff fee9 	bl	801a514 <nema_cl_submit_no_irq>
 801a742:	69e0      	ldr	r0, [r4, #28]
 801a744:	f7fe fa1a 	bl	8018b7c <nema_rb_submit_cl_id>
 801a748:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801a74c:	69e0      	ldr	r0, [r4, #28]
 801a74e:	4298      	cmp	r0, r3
 801a750:	d1da      	bne.n	801a708 <nema_cl_add_cmd+0x60>
 801a752:	f7f8 fdb9 	bl	80132c8 <nema_wait_irq_cl>
 801a756:	2800      	cmp	r0, #0
 801a758:	bfa4      	itt	ge
 801a75a:	f04f 33ff 	movge.w	r3, #4294967295
 801a75e:	61e3      	strge	r3, [r4, #28]
 801a760:	e7d2      	b.n	801a708 <nema_cl_add_cmd+0x60>
 801a762:	2101      	movs	r1, #1
 801a764:	e7bd      	b.n	801a6e2 <nema_cl_add_cmd+0x3a>
 801a766:	bf00      	nop
 801a768:	200875c0 	.word	0x200875c0

0801a76c <nema_cl_submit>:
 801a76c:	2800      	cmp	r0, #0
 801a76e:	d066      	beq.n	801a83e <nema_cl_submit+0xd2>
 801a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a772:	6944      	ldr	r4, [r0, #20]
 801a774:	2c00      	cmp	r4, #0
 801a776:	d061      	beq.n	801a83c <nema_cl_submit+0xd0>
 801a778:	6983      	ldr	r3, [r0, #24]
 801a77a:	4605      	mov	r5, r0
 801a77c:	069a      	lsls	r2, r3, #26
 801a77e:	d51f      	bpl.n	801a7c0 <nema_cl_submit+0x54>
 801a780:	6902      	ldr	r2, [r0, #16]
 801a782:	2a00      	cmp	r2, #0
 801a784:	bfb8      	it	lt
 801a786:	3203      	addlt	r2, #3
 801a788:	1092      	asrs	r2, r2, #2
 801a78a:	0056      	lsls	r6, r2, #1
 801a78c:	42b4      	cmp	r4, r6
 801a78e:	d055      	beq.n	801a83c <nema_cl_submit+0xd0>
 801a790:	68c7      	ldr	r7, [r0, #12]
 801a792:	bfa4      	itt	ge
 801a794:	1ba4      	subge	r4, r4, r6
 801a796:	eb07 07c2 	addge.w	r7, r7, r2, lsl #3
 801a79a:	071b      	lsls	r3, r3, #28
 801a79c:	d553      	bpl.n	801a846 <nema_cl_submit+0xda>
 801a79e:	69e8      	ldr	r0, [r5, #28]
 801a7a0:	2800      	cmp	r0, #0
 801a7a2:	da57      	bge.n	801a854 <nema_cl_submit+0xe8>
 801a7a4:	f04f 33ff 	mov.w	r3, #4294967295
 801a7a8:	61eb      	str	r3, [r5, #28]
 801a7aa:	4621      	mov	r1, r4
 801a7ac:	4638      	mov	r0, r7
 801a7ae:	f7fe f895 	bl	80188dc <nema_rb_submit_cmdlist2>
 801a7b2:	696b      	ldr	r3, [r5, #20]
 801a7b4:	61e8      	str	r0, [r5, #28]
 801a7b6:	429e      	cmp	r6, r3
 801a7b8:	bfd8      	it	le
 801a7ba:	2600      	movle	r6, #0
 801a7bc:	616e      	str	r6, [r5, #20]
 801a7be:	e02f      	b.n	801a820 <nema_cl_submit+0xb4>
 801a7c0:	4604      	mov	r4, r0
 801a7c2:	f06f 4640 	mvn.w	r6, #3221225472	@ 0xc0000000
 801a7c6:	e012      	b.n	801a7ee <nema_cl_submit+0x82>
 801a7c8:	6923      	ldr	r3, [r4, #16]
 801a7ca:	6949      	ldr	r1, [r1, #20]
 801a7cc:	4433      	add	r3, r6
 801a7ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801a7d2:	69a3      	ldr	r3, [r4, #24]
 801a7d4:	4620      	mov	r0, r4
 801a7d6:	f023 0308 	bic.w	r3, r3, #8
 801a7da:	61a3      	str	r3, [r4, #24]
 801a7dc:	f7f8 fded 	bl	80133ba <nema_buffer_flush>
 801a7e0:	69a3      	ldr	r3, [r4, #24]
 801a7e2:	f043 0308 	orr.w	r3, r3, #8
 801a7e6:	61a3      	str	r3, [r4, #24]
 801a7e8:	6a24      	ldr	r4, [r4, #32]
 801a7ea:	b16c      	cbz	r4, 801a808 <nema_cl_submit+0x9c>
 801a7ec:	69a3      	ldr	r3, [r4, #24]
 801a7ee:	0758      	lsls	r0, r3, #29
 801a7f0:	68a2      	ldr	r2, [r4, #8]
 801a7f2:	6a21      	ldr	r1, [r4, #32]
 801a7f4:	d4e8      	bmi.n	801a7c8 <nema_cl_submit+0x5c>
 801a7f6:	071b      	lsls	r3, r3, #28
 801a7f8:	d406      	bmi.n	801a808 <nema_cl_submit+0x9c>
 801a7fa:	4620      	mov	r0, r4
 801a7fc:	f7f8 fddd 	bl	80133ba <nema_buffer_flush>
 801a800:	69a3      	ldr	r3, [r4, #24]
 801a802:	f043 0308 	orr.w	r3, r3, #8
 801a806:	61a3      	str	r3, [r4, #24]
 801a808:	2000      	movs	r0, #0
 801a80a:	f7f8 fde0 	bl	80133ce <nema_mutex_lock>
 801a80e:	6969      	ldr	r1, [r5, #20]
 801a810:	4628      	mov	r0, r5
 801a812:	f7fe f8e7 	bl	80189e4 <nema_rb_submit_cmdlist>
 801a816:	61e8      	str	r0, [r5, #28]
 801a818:	2000      	movs	r0, #0
 801a81a:	f7f8 fde5 	bl	80133e8 <nema_mutex_unlock>
 801a81e:	69e8      	ldr	r0, [r5, #28]
 801a820:	f7fe f9ac 	bl	8018b7c <nema_rb_submit_cl_id>
 801a824:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801a828:	69e8      	ldr	r0, [r5, #28]
 801a82a:	4298      	cmp	r0, r3
 801a82c:	d106      	bne.n	801a83c <nema_cl_submit+0xd0>
 801a82e:	f7f8 fd4b 	bl	80132c8 <nema_wait_irq_cl>
 801a832:	2800      	cmp	r0, #0
 801a834:	db02      	blt.n	801a83c <nema_cl_submit+0xd0>
 801a836:	f04f 33ff 	mov.w	r3, #4294967295
 801a83a:	61eb      	str	r3, [r5, #28]
 801a83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a83e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801a842:	f7fe ba5f 	b.w	8018d04 <nema_set_error>
 801a846:	f7f8 fdb8 	bl	80133ba <nema_buffer_flush>
 801a84a:	69ab      	ldr	r3, [r5, #24]
 801a84c:	f043 0308 	orr.w	r3, r3, #8
 801a850:	61ab      	str	r3, [r5, #24]
 801a852:	e7a4      	b.n	801a79e <nema_cl_submit+0x32>
 801a854:	f7f8 fd38 	bl	80132c8 <nema_wait_irq_cl>
 801a858:	2800      	cmp	r0, #0
 801a85a:	daa3      	bge.n	801a7a4 <nema_cl_submit+0x38>
 801a85c:	e7a5      	b.n	801a7aa <nema_cl_submit+0x3e>
 801a85e:	bf00      	nop

0801a860 <nema_cl_wait>:
 801a860:	b510      	push	{r4, lr}
 801a862:	b170      	cbz	r0, 801a882 <nema_cl_wait+0x22>
 801a864:	4604      	mov	r4, r0
 801a866:	69c0      	ldr	r0, [r0, #28]
 801a868:	2800      	cmp	r0, #0
 801a86a:	da04      	bge.n	801a876 <nema_cl_wait+0x16>
 801a86c:	f04f 33ff 	mov.w	r3, #4294967295
 801a870:	61e3      	str	r3, [r4, #28]
 801a872:	2000      	movs	r0, #0
 801a874:	bd10      	pop	{r4, pc}
 801a876:	f7f8 fd27 	bl	80132c8 <nema_wait_irq_cl>
 801a87a:	2800      	cmp	r0, #0
 801a87c:	daf6      	bge.n	801a86c <nema_cl_wait+0xc>
 801a87e:	2000      	movs	r0, #0
 801a880:	bd10      	pop	{r4, pc}
 801a882:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801a886:	f7fe fa3d 	bl	8018d04 <nema_set_error>
 801a88a:	f04f 30ff 	mov.w	r0, #4294967295
 801a88e:	bd10      	pop	{r4, pc}

0801a890 <nema_blender_init>:
 801a890:	b530      	push	{r4, r5, lr}
 801a892:	b085      	sub	sp, #20
 801a894:	466d      	mov	r5, sp
 801a896:	2418      	movs	r4, #24
 801a898:	4b11      	ldr	r3, [pc, #68]	@ (801a8e0 <nema_blender_init+0x50>)
 801a89a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a89c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801a8a0:	2101      	movs	r1, #1
 801a8a2:	4622      	mov	r2, r4
 801a8a4:	4628      	mov	r0, r5
 801a8a6:	440c      	add	r4, r1
 801a8a8:	f7ff fa40 	bl	8019d2c <nema_load_frag_shader>
 801a8ac:	2c1f      	cmp	r4, #31
 801a8ae:	d1f7      	bne.n	801a8a0 <nema_blender_init+0x10>
 801a8b0:	4622      	mov	r2, r4
 801a8b2:	2101      	movs	r1, #1
 801a8b4:	a802      	add	r0, sp, #8
 801a8b6:	f7ff fa39 	bl	8019d2c <nema_load_frag_shader>
 801a8ba:	f7ff f8cf 	bl	8019a5c <nema_readHwConfig>
 801a8be:	f000 5080 	and.w	r0, r0, #268435456	@ 0x10000000
 801a8c2:	2800      	cmp	r0, #0
 801a8c4:	bf14      	ite	ne
 801a8c6:	2201      	movne	r2, #1
 801a8c8:	2200      	moveq	r2, #0
 801a8ca:	4b06      	ldr	r3, [pc, #24]	@ (801a8e4 <nema_blender_init+0x54>)
 801a8cc:	701a      	strb	r2, [r3, #0]
 801a8ce:	d005      	beq.n	801a8dc <nema_blender_init+0x4c>
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	4b05      	ldr	r3, [pc, #20]	@ (801a8e8 <nema_blender_init+0x58>)
 801a8d4:	2001      	movs	r0, #1
 801a8d6:	601a      	str	r2, [r3, #0]
 801a8d8:	f7ff fa48 	bl	8019d6c <nema_set_rop_blend_mode>
 801a8dc:	b005      	add	sp, #20
 801a8de:	bd30      	pop	{r4, r5, pc}
 801a8e0:	0802cb30 	.word	0x0802cb30
 801a8e4:	200875c5 	.word	0x200875c5
 801a8e8:	200000f8 	.word	0x200000f8

0801a8ec <nema_set_blend>:
 801a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f0:	4ca5      	ldr	r4, [pc, #660]	@ (801ab88 <nema_set_blend+0x29c>)
 801a8f2:	4683      	mov	fp, r0
 801a8f4:	7820      	ldrb	r0, [r4, #0]
 801a8f6:	b0a7      	sub	sp, #156	@ 0x9c
 801a8f8:	9102      	str	r1, [sp, #8]
 801a8fa:	9200      	str	r2, [sp, #0]
 801a8fc:	2800      	cmp	r0, #0
 801a8fe:	f040 8233 	bne.w	801ad68 <nema_set_blend+0x47c>
 801a902:	469a      	mov	sl, r3
 801a904:	465c      	mov	r4, fp
 801a906:	ea4f 535b 	mov.w	r3, fp, lsr #21
 801a90a:	055b      	lsls	r3, r3, #21
 801a90c:	930e      	str	r3, [sp, #56]	@ 0x38
 801a90e:	f40b 0300 	and.w	r3, fp, #8388608	@ 0x800000
 801a912:	930c      	str	r3, [sp, #48]	@ 0x30
 801a914:	f40b 0380 	and.w	r3, fp, #4194304	@ 0x400000
 801a918:	f00b 010f 	and.w	r1, fp, #15
 801a91c:	930d      	str	r3, [sp, #52]	@ 0x34
 801a91e:	f40b 1300 	and.w	r3, fp, #2097152	@ 0x200000
 801a922:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a924:	9101      	str	r1, [sp, #4]
 801a926:	b2d2      	uxtb	r2, r2
 801a928:	fa5f f38a 	uxtb.w	r3, sl
 801a92c:	f3cb 2903 	ubfx	r9, fp, #8, #4
 801a930:	f00b 7100 	and.w	r1, fp, #33554432	@ 0x2000000
 801a934:	f3cb 6840 	ubfx	r8, fp, #25, #1
 801a938:	9d02      	ldr	r5, [sp, #8]
 801a93a:	b2e8      	uxtb	r0, r5
 801a93c:	2804      	cmp	r0, #4
 801a93e:	4628      	mov	r0, r5
 801a940:	bf28      	it	cs
 801a942:	2000      	movcs	r0, #0
 801a944:	2a04      	cmp	r2, #4
 801a946:	9a00      	ldr	r2, [sp, #0]
 801a948:	bf28      	it	cs
 801a94a:	f04f 32ff 	movcs.w	r2, #4294967295
 801a94e:	2b04      	cmp	r3, #4
 801a950:	9002      	str	r0, [sp, #8]
 801a952:	9200      	str	r2, [sp, #0]
 801a954:	bf28      	it	cs
 801a956:	4682      	movcs	sl, r0
 801a958:	4602      	mov	r2, r0
 801a95a:	bf34      	ite	cc
 801a95c:	4650      	movcc	r0, sl
 801a95e:	2002      	movcs	r0, #2
 801a960:	4b8a      	ldr	r3, [pc, #552]	@ (801ab8c <nema_set_blend+0x2a0>)
 801a962:	9010      	str	r0, [sp, #64]	@ 0x40
 801a964:	781b      	ldrb	r3, [r3, #0]
 801a966:	b14b      	cbz	r3, 801a97c <nema_set_blend+0x90>
 801a968:	f01b 7380 	ands.w	r3, fp, #16777216	@ 0x1000000
 801a96c:	9303      	str	r3, [sp, #12]
 801a96e:	d102      	bne.n	801a976 <nema_set_blend+0x8a>
 801a970:	4552      	cmp	r2, sl
 801a972:	f000 830c 	beq.w	801af8e <nema_set_blend+0x6a2>
 801a976:	2001      	movs	r0, #1
 801a978:	f7ff f9f8 	bl	8019d6c <nema_set_rop_blend_mode>
 801a97c:	2c00      	cmp	r4, #0
 801a97e:	bfac      	ite	ge
 801a980:	4642      	movge	r2, r8
 801a982:	2201      	movlt	r2, #1
 801a984:	4b82      	ldr	r3, [pc, #520]	@ (801ab90 <nema_set_blend+0x2a4>)
 801a986:	f1bb 0f01 	cmp.w	fp, #1
 801a98a:	789b      	ldrb	r3, [r3, #2]
 801a98c:	9207      	str	r2, [sp, #28]
 801a98e:	9305      	str	r3, [sp, #20]
 801a990:	f000 80e0 	beq.w	801ab54 <nema_set_blend+0x268>
 801a994:	f00b 4380 	and.w	r3, fp, #1073741824	@ 0x40000000
 801a998:	9315      	str	r3, [sp, #84]	@ 0x54
 801a99a:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801a99e:	9306      	str	r3, [sp, #24]
 801a9a0:	f00b 5300 	and.w	r3, fp, #536870912	@ 0x20000000
 801a9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a9a6:	9b01      	ldr	r3, [sp, #4]
 801a9a8:	f00b 5280 	and.w	r2, fp, #268435456	@ 0x10000000
 801a9ac:	2b05      	cmp	r3, #5
 801a9ae:	f240 80df 	bls.w	801ab70 <nema_set_blend+0x284>
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801a9b6:	9304      	str	r3, [sp, #16]
 801a9b8:	2303      	movs	r3, #3
 801a9ba:	4976      	ldr	r1, [pc, #472]	@ (801ab94 <nema_set_blend+0x2a8>)
 801a9bc:	9303      	str	r3, [sp, #12]
 801a9be:	9108      	str	r1, [sp, #32]
 801a9c0:	4d75      	ldr	r5, [pc, #468]	@ (801ab98 <nema_set_blend+0x2ac>)
 801a9c2:	2a00      	cmp	r2, #0
 801a9c4:	4b75      	ldr	r3, [pc, #468]	@ (801ab9c <nema_set_blend+0x2b0>)
 801a9c6:	bf18      	it	ne
 801a9c8:	462b      	movne	r3, r5
 801a9ca:	f105 4500 	add.w	r5, r5, #2147483648	@ 0x80000000
 801a9ce:	f105 0502 	add.w	r5, r5, #2
 801a9d2:	9312      	str	r3, [sp, #72]	@ 0x48
 801a9d4:	4b72      	ldr	r3, [pc, #456]	@ (801aba0 <nema_set_blend+0x2b4>)
 801a9d6:	bf08      	it	eq
 801a9d8:	462b      	moveq	r3, r5
 801a9da:	f8df e20c 	ldr.w	lr, [pc, #524]	@ 801abe8 <nema_set_blend+0x2fc>
 801a9de:	f8df c20c 	ldr.w	ip, [pc, #524]	@ 801abec <nema_set_blend+0x300>
 801a9e2:	9311      	str	r3, [sp, #68]	@ 0x44
 801a9e4:	bf14      	ite	ne
 801a9e6:	4673      	movne	r3, lr
 801a9e8:	4663      	moveq	r3, ip
 801a9ea:	4f6e      	ldr	r7, [pc, #440]	@ (801aba4 <nema_set_blend+0x2b8>)
 801a9ec:	9314      	str	r3, [sp, #80]	@ 0x50
 801a9ee:	4b6e      	ldr	r3, [pc, #440]	@ (801aba8 <nema_set_blend+0x2bc>)
 801a9f0:	bf18      	it	ne
 801a9f2:	463b      	movne	r3, r7
 801a9f4:	f5a5 25c8 	sub.w	r5, r5, #409600	@ 0x64000
 801a9f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a9fa:	4b6c      	ldr	r3, [pc, #432]	@ (801abac <nema_set_blend+0x2c0>)
 801a9fc:	f1a5 0542 	sub.w	r5, r5, #66	@ 0x42
 801aa00:	496b      	ldr	r1, [pc, #428]	@ (801abb0 <nema_set_blend+0x2c4>)
 801aa02:	bf18      	it	ne
 801aa04:	4619      	movne	r1, r3
 801aa06:	f1a3 033e 	sub.w	r3, r3, #62	@ 0x3e
 801aa0a:	bf18      	it	ne
 801aa0c:	462b      	movne	r3, r5
 801aa0e:	4e69      	ldr	r6, [pc, #420]	@ (801abb4 <nema_set_blend+0x2c8>)
 801aa10:	4f69      	ldr	r7, [pc, #420]	@ (801abb8 <nema_set_blend+0x2cc>)
 801aa12:	461d      	mov	r5, r3
 801aa14:	4b69      	ldr	r3, [pc, #420]	@ (801abbc <nema_set_blend+0x2d0>)
 801aa16:	486a      	ldr	r0, [pc, #424]	@ (801abc0 <nema_set_blend+0x2d4>)
 801aa18:	bf18      	it	ne
 801aa1a:	4630      	movne	r0, r6
 801aa1c:	f106 4600 	add.w	r6, r6, #2147483648	@ 0x80000000
 801aa20:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 801abf0 <nema_set_blend+0x304>
 801aa24:	f506 3650 	add.w	r6, r6, #212992	@ 0x34000
 801aa28:	bf04      	itt	eq
 801aa2a:	46bc      	moveq	ip, r7
 801aa2c:	461e      	moveq	r6, r3
 801aa2e:	f107 4700 	add.w	r7, r7, #2147483648	@ 0x80000000
 801aa32:	f1a3 0340 	sub.w	r3, r3, #64	@ 0x40
 801aa36:	f1a7 0742 	sub.w	r7, r7, #66	@ 0x42
 801aa3a:	bf08      	it	eq
 801aa3c:	461f      	moveq	r7, r3
 801aa3e:	4c61      	ldr	r4, [pc, #388]	@ (801abc4 <nema_set_blend+0x2d8>)
 801aa40:	f8df e1b0 	ldr.w	lr, [pc, #432]	@ 801abf4 <nema_set_blend+0x308>
 801aa44:	4a60      	ldr	r2, [pc, #384]	@ (801abc8 <nema_set_blend+0x2dc>)
 801aa46:	bf18      	it	ne
 801aa48:	4622      	movne	r2, r4
 801aa4a:	f504 3450 	add.w	r4, r4, #212992	@ 0x34000
 801aa4e:	bf08      	it	eq
 801aa50:	4674      	moveq	r4, lr
 801aa52:	f8dd e018 	ldr.w	lr, [sp, #24]
 801aa56:	f1b8 0f00 	cmp.w	r8, #0
 801aa5a:	f040 8109 	bne.w	801ac70 <nema_set_blend+0x384>
 801aa5e:	9b07      	ldr	r3, [sp, #28]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	bf0c      	ite	eq
 801aa64:	2300      	moveq	r3, #0
 801aa66:	f44f 1300 	movne.w	r3, #2097152	@ 0x200000
 801aa6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aa6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	f040 8105 	bne.w	801ac7e <nema_set_blend+0x392>
 801aa74:	f01b 6f80 	tst.w	fp, #67108864	@ 0x4000000
 801aa78:	f000 81b4 	beq.w	801ade4 <nema_set_blend+0x4f8>
 801aa7c:	4684      	mov	ip, r0
 801aa7e:	460e      	mov	r6, r1
 801aa80:	4614      	mov	r4, r2
 801aa82:	462f      	mov	r7, r5
 801aa84:	f04f 0804 	mov.w	r8, #4
 801aa88:	2200      	movs	r2, #0
 801aa8a:	4850      	ldr	r0, [pc, #320]	@ (801abcc <nema_set_blend+0x2e0>)
 801aa8c:	f00b 53c0 	and.w	r3, fp, #402653184	@ 0x18000000
 801aa90:	4293      	cmp	r3, r2
 801aa92:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
 801aa96:	bf18      	it	ne
 801aa98:	463e      	movne	r6, r7
 801aa9a:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa9c:	9b05      	ldr	r3, [sp, #20]
 801aa9e:	bf16      	itet	ne
 801aaa0:	46a4      	movne	ip, r4
 801aaa2:	270e      	moveq	r7, #14
 801aaa4:	270c      	movne	r7, #12
 801aaa6:	9216      	str	r2, [sp, #88]	@ 0x58
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	f000 80eb 	beq.w	801ac84 <nema_set_blend+0x398>
 801aaae:	4b48      	ldr	r3, [pc, #288]	@ (801abd0 <nema_set_blend+0x2e4>)
 801aab0:	4948      	ldr	r1, [pc, #288]	@ (801abd4 <nema_set_blend+0x2e8>)
 801aab2:	9800      	ldr	r0, [sp, #0]
 801aab4:	e9cd 1316 	strd	r1, r3, [sp, #88]	@ 0x58
 801aab8:	1c43      	adds	r3, r0, #1
 801aaba:	f000 8257 	beq.w	801af6c <nema_set_blend+0x680>
 801aabe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801aac2:	4b45      	ldr	r3, [pc, #276]	@ (801abd8 <nema_set_blend+0x2ec>)
 801aac4:	9204      	str	r2, [sp, #16]
 801aac6:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801aaca:	e9cd 3118 	strd	r3, r1, [sp, #96]	@ 0x60
 801aace:	2203      	movs	r2, #3
 801aad0:	2102      	movs	r1, #2
 801aad2:	4c42      	ldr	r4, [pc, #264]	@ (801abdc <nema_set_blend+0x2f0>)
 801aad4:	f1b9 0f01 	cmp.w	r9, #1
 801aad8:	f240 8110 	bls.w	801acfc <nema_set_blend+0x410>
 801aadc:	9b01      	ldr	r3, [sp, #4]
 801aade:	2b05      	cmp	r3, #5
 801aae0:	d803      	bhi.n	801aaea <nema_set_blend+0x1fe>
 801aae2:	f01b 5f70 	tst.w	fp, #1006632960	@ 0x3c000000
 801aae6:	f000 8087 	beq.w	801abf8 <nema_set_blend+0x30c>
 801aaea:	9b03      	ldr	r3, [sp, #12]
 801aaec:	b933      	cbnz	r3, 801aafc <nema_set_blend+0x210>
 801aaee:	f1b9 0f00 	cmp.w	r9, #0
 801aaf2:	d103      	bne.n	801aafc <nema_set_blend+0x210>
 801aaf4:	9b07      	ldr	r3, [sp, #28]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	f000 81ca 	beq.w	801ae90 <nema_set_blend+0x5a4>
 801aafc:	f1b8 0f1d 	cmp.w	r8, #29
 801ab00:	f000 8150 	beq.w	801ada4 <nema_set_blend+0x4b8>
 801ab04:	4b36      	ldr	r3, [pc, #216]	@ (801abe0 <nema_set_blend+0x2f4>)
 801ab06:	a826      	add	r0, sp, #152	@ 0x98
 801ab08:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801ab0c:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801ab10:	9803      	ldr	r0, [sp, #12]
 801ab12:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801ab16:	4303      	orrs	r3, r0
 801ab18:	e941 3c10 	strd	r3, ip, [r1, #-64]	@ 0x40
 801ab1c:	1c55      	adds	r5, r2, #1
 801ab1e:	f1b9 0f00 	cmp.w	r9, #0
 801ab22:	f040 8150 	bne.w	801adc6 <nema_set_blend+0x4da>
 801ab26:	46ce      	mov	lr, r9
 801ab28:	4b2d      	ldr	r3, [pc, #180]	@ (801abe0 <nema_set_blend+0x2f4>)
 801ab2a:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801ab2e:	f8cd 9018 	str.w	r9, [sp, #24]
 801ab32:	9308      	str	r3, [sp, #32]
 801ab34:	9b07      	ldr	r3, [sp, #28]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d163      	bne.n	801ac02 <nema_set_blend+0x316>
 801ab3a:	4b2a      	ldr	r3, [pc, #168]	@ (801abe4 <nema_set_blend+0x2f8>)
 801ab3c:	f8dd a008 	ldr.w	sl, [sp, #8]
 801ab40:	9308      	str	r3, [sp, #32]
 801ab42:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801ab46:	9f01      	ldr	r7, [sp, #4]
 801ab48:	e061      	b.n	801ac0e <nema_set_blend+0x322>
 801ab4a:	f04f 0900 	mov.w	r9, #0
 801ab4e:	46c8      	mov	r8, r9
 801ab50:	f8cd 901c 	str.w	r9, [sp, #28]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	f000 8153 	beq.w	801ae00 <nema_set_blend+0x514>
 801ab5a:	9b01      	ldr	r3, [sp, #4]
 801ab5c:	2b05      	cmp	r3, #5
 801ab5e:	f200 8169 	bhi.w	801ae34 <nema_set_blend+0x548>
 801ab62:	2300      	movs	r3, #0
 801ab64:	f04f 0b01 	mov.w	fp, #1
 801ab68:	461a      	mov	r2, r3
 801ab6a:	9306      	str	r3, [sp, #24]
 801ab6c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab6e:	9315      	str	r3, [sp, #84]	@ 0x54
 801ab70:	9b07      	ldr	r3, [sp, #28]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	f000 8200 	beq.w	801af78 <nema_set_blend+0x68c>
 801ab78:	930a      	str	r3, [sp, #40]	@ 0x28
 801ab7a:	4b06      	ldr	r3, [pc, #24]	@ (801ab94 <nema_set_blend+0x2a8>)
 801ab7c:	2001      	movs	r0, #1
 801ab7e:	9308      	str	r3, [sp, #32]
 801ab80:	2303      	movs	r3, #3
 801ab82:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801ab86:	e71b      	b.n	801a9c0 <nema_set_blend+0xd4>
 801ab88:	200875c4 	.word	0x200875c4
 801ab8c:	200875c5 	.word	0x200875c5
 801ab90:	20000024 	.word	0x20000024
 801ab94:	080c0003 	.word	0x080c0003
 801ab98:	000761c5 	.word	0x000761c5
 801ab9c:	000761c7 	.word	0x000761c7
 801aba0:	800761c5 	.word	0x800761c5
 801aba4:	80076185 	.word	0x80076185
 801aba8:	80076187 	.word	0x80076187
 801abac:	800121c5 	.word	0x800121c5
 801abb0:	800121c7 	.word	0x800121c7
 801abb4:	000121c5 	.word	0x000121c5
 801abb8:	000461c7 	.word	0x000461c7
 801abbc:	800461c7 	.word	0x800461c7
 801abc0:	000121c7 	.word	0x000121c7
 801abc4:	00012185 	.word	0x00012185
 801abc8:	00012187 	.word	0x00012187
 801abcc:	0802d938 	.word	0x0802d938
 801abd0:	02009408 	.word	0x02009408
 801abd4:	00f40182 	.word	0x00f40182
 801abd8:	000c100b 	.word	0x000c100b
 801abdc:	1000fc00 	.word	0x1000fc00
 801abe0:	080c0000 	.word	0x080c0000
 801abe4:	080c0002 	.word	0x080c0002
 801abe8:	00076185 	.word	0x00076185
 801abec:	00076187 	.word	0x00076187
 801abf0:	000461c5 	.word	0x000461c5
 801abf4:	00046187 	.word	0x00046187
 801abf8:	4615      	mov	r5, r2
 801abfa:	460a      	mov	r2, r1
 801abfc:	f1b9 0f00 	cmp.w	r9, #0
 801ac00:	d098      	beq.n	801ab34 <nema_set_blend+0x248>
 801ac02:	9b06      	ldr	r3, [sp, #24]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	f000 8202 	beq.w	801b00e <nema_set_blend+0x722>
 801ac0a:	2600      	movs	r6, #0
 801ac0c:	9f01      	ldr	r7, [sp, #4]
 801ac0e:	48c1      	ldr	r0, [pc, #772]	@ (801af14 <nema_set_blend+0x628>)
 801ac10:	49c1      	ldr	r1, [pc, #772]	@ (801af18 <nema_set_blend+0x62c>)
 801ac12:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 801ac16:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801ac1a:	015b      	lsls	r3, r3, #5
 801ac1c:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
 801ac20:	9f08      	ldr	r7, [sp, #32]
 801ac22:	ea47 5e0e 	orr.w	lr, r7, lr, lsl #20
 801ac26:	4fbd      	ldr	r7, [pc, #756]	@ (801af1c <nema_set_blend+0x630>)
 801ac28:	ea4e 1eca 	orr.w	lr, lr, sl, lsl #7
 801ac2c:	431f      	orrs	r7, r3
 801ac2e:	ab26      	add	r3, sp, #152	@ 0x98
 801ac30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801ac34:	4337      	orrs	r7, r6
 801ac36:	e942 e710 	strd	lr, r7, [r2, #-64]	@ 0x40
 801ac3a:	2e00      	cmp	r6, #0
 801ac3c:	f000 813f 	beq.w	801aebe <nema_set_blend+0x5d2>
 801ac40:	9804      	ldr	r0, [sp, #16]
 801ac42:	f7fe ff79 	bl	8019b38 <nema_matmul_bypass>
 801ac46:	4629      	mov	r1, r5
 801ac48:	2200      	movs	r2, #0
 801ac4a:	a816      	add	r0, sp, #88	@ 0x58
 801ac4c:	f7ff f86e 	bl	8019d2c <nema_load_frag_shader>
 801ac50:	4bb3      	ldr	r3, [pc, #716]	@ (801af20 <nema_set_blend+0x634>)
 801ac52:	f1c5 0520 	rsb	r5, r5, #32
 801ac56:	6818      	ldr	r0, [r3, #0]
 801ac58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac5a:	ea43 0800 	orr.w	r8, r3, r0
 801ac5e:	ea48 0005 	orr.w	r0, r8, r5
 801ac62:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 801ac66:	f7ff f87b 	bl	8019d60 <nema_set_frag_ptr>
 801ac6a:	b027      	add	sp, #156	@ 0x9c
 801ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801ac74:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	f43f aefb 	beq.w	801aa74 <nema_set_blend+0x188>
 801ac7e:	f04f 0811 	mov.w	r8, #17
 801ac82:	e701      	b.n	801aa88 <nema_set_blend+0x19c>
 801ac84:	9b00      	ldr	r3, [sp, #0]
 801ac86:	1c5a      	adds	r2, r3, #1
 801ac88:	f000 8136 	beq.w	801aef8 <nema_set_blend+0x60c>
 801ac8c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ac90:	9a05      	ldr	r2, [sp, #20]
 801ac92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801ac96:	9204      	str	r2, [sp, #16]
 801ac98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ac9a:	2a00      	cmp	r2, #0
 801ac9c:	f000 80a9 	beq.w	801adf2 <nema_set_blend+0x506>
 801aca0:	f44f 2440 	mov.w	r4, #786432	@ 0xc0000
 801aca4:	499f      	ldr	r1, [pc, #636]	@ (801af24 <nema_set_blend+0x638>)
 801aca6:	4aa0      	ldr	r2, [pc, #640]	@ (801af28 <nema_set_blend+0x63c>)
 801aca8:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
 801acac:	9219      	str	r2, [sp, #100]	@ 0x64
 801acae:	2204      	movs	r2, #4
 801acb0:	9116      	str	r1, [sp, #88]	@ 0x58
 801acb2:	9205      	str	r2, [sp, #20]
 801acb4:	2102      	movs	r1, #2
 801acb6:	2203      	movs	r2, #3
 801acb8:	e9cd 5417 	strd	r5, r4, [sp, #92]	@ 0x5c
 801acbc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801acbe:	2c00      	cmp	r4, #0
 801acc0:	d04f      	beq.n	801ad62 <nema_set_blend+0x476>
 801acc2:	9c00      	ldr	r4, [sp, #0]
 801acc4:	f1b4 3fff 	cmp.w	r4, #4294967295
 801acc8:	d04b      	beq.n	801ad62 <nema_set_blend+0x476>
 801acca:	f241 050b 	movw	r5, #4107	@ 0x100b
 801acce:	2300      	movs	r3, #0
 801acd0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801acd4:	a826      	add	r0, sp, #152	@ 0x98
 801acd6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801acda:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801acdc:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 801ace0:	ea45 11c1 	orr.w	r1, r5, r1, lsl #7
 801ace4:	f1b9 0f01 	cmp.w	r9, #1
 801ace8:	f840 1c40 	str.w	r1, [r0, #-64]
 801acec:	f444 4420 	orr.w	r4, r4, #40960	@ 0xa000
 801acf0:	4611      	mov	r1, r2
 801acf2:	f840 3c3c 	str.w	r3, [r0, #-60]
 801acf6:	9a05      	ldr	r2, [sp, #20]
 801acf8:	f63f aef0 	bhi.w	801aadc <nema_set_blend+0x1f0>
 801acfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	f47f aeec 	bne.w	801aadc <nema_set_blend+0x1f0>
 801ad04:	9b00      	ldr	r3, [sp, #0]
 801ad06:	3301      	adds	r3, #1
 801ad08:	f47f aee8 	bne.w	801aadc <nema_set_blend+0x1f0>
 801ad0c:	9b02      	ldr	r3, [sp, #8]
 801ad0e:	4553      	cmp	r3, sl
 801ad10:	f47f aee4 	bne.w	801aadc <nema_set_blend+0x1f0>
 801ad14:	f1b9 0f00 	cmp.w	r9, #0
 801ad18:	bf15      	itete	ne
 801ad1a:	f44f 6600 	movne.w	r6, #2048	@ 0x800
 801ad1e:	f44f 5600 	moveq.w	r6, #8192	@ 0x2000
 801ad22:	f44f 1500 	movne.w	r5, #2097152	@ 0x200000
 801ad26:	f44f 0500 	moveq.w	r5, #8388608	@ 0x800000
 801ad2a:	9f01      	ldr	r7, [sp, #4]
 801ad2c:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 801af14 <nema_set_blend+0x628>
 801ad30:	4879      	ldr	r0, [pc, #484]	@ (801af18 <nema_set_blend+0x62c>)
 801ad32:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801ad36:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801ad3a:	015b      	lsls	r3, r3, #5
 801ad3c:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801ad40:	f043 430a 	orr.w	r3, r3, #2315255808	@ 0x8a000000
 801ad44:	f043 0306 	orr.w	r3, r3, #6
 801ad48:	4333      	orrs	r3, r6
 801ad4a:	432b      	orrs	r3, r5
 801ad4c:	4877      	ldr	r0, [pc, #476]	@ (801af2c <nema_set_blend+0x640>)
 801ad4e:	9d02      	ldr	r5, [sp, #8]
 801ad50:	ae26      	add	r6, sp, #152	@ 0x98
 801ad52:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
 801ad56:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801ad5a:	4615      	mov	r5, r2
 801ad5c:	e941 0310 	strd	r0, r3, [r1, #-64]	@ 0x40
 801ad60:	e76e      	b.n	801ac40 <nema_set_blend+0x354>
 801ad62:	f043 5480 	orr.w	r4, r3, #268435456	@ 0x10000000
 801ad66:	e6b5      	b.n	801aad4 <nema_set_blend+0x1e8>
 801ad68:	f04f 3020 	mov.w	r0, #538976288	@ 0x20202020
 801ad6c:	f7ff f810 	bl	8019d90 <nema_set_raster_color>
 801ad70:	2000      	movs	r0, #0
 801ad72:	f7fd fffb 	bl	8018d6c <nema_enable_gradient>
 801ad76:	f04f 0800 	mov.w	r8, #0
 801ad7a:	f04f 0901 	mov.w	r9, #1
 801ad7e:	23ff      	movs	r3, #255	@ 0xff
 801ad80:	f240 1401 	movw	r4, #257	@ 0x101
 801ad84:	f04f 3aff 	mov.w	sl, #4294967295
 801ad88:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801ad8c:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801ad90:	e9cd 880c 	strd	r8, r8, [sp, #48]	@ 0x30
 801ad94:	4641      	mov	r1, r8
 801ad96:	f8cd 9004 	str.w	r9, [sp, #4]
 801ad9a:	461a      	mov	r2, r3
 801ad9c:	46a3      	mov	fp, r4
 801ad9e:	f8cd a000 	str.w	sl, [sp]
 801ada2:	e5c9      	b.n	801a938 <nema_set_blend+0x4c>
 801ada4:	2f0e      	cmp	r7, #14
 801ada6:	f47f aead 	bne.w	801ab04 <nema_set_blend+0x218>
 801adaa:	9b03      	ldr	r3, [sp, #12]
 801adac:	2b00      	cmp	r3, #0
 801adae:	f47f aea9 	bne.w	801ab04 <nema_set_blend+0x218>
 801adb2:	9b06      	ldr	r3, [sp, #24]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	f47f aea5 	bne.w	801ab04 <nema_set_blend+0x218>
 801adba:	4615      	mov	r5, r2
 801adbc:	460a      	mov	r2, r1
 801adbe:	f1b9 0f00 	cmp.w	r9, #0
 801adc2:	f43f aeb0 	beq.w	801ab26 <nema_set_blend+0x23a>
 801adc6:	f04f 0e00 	mov.w	lr, #0
 801adca:	4b59      	ldr	r3, [pc, #356]	@ (801af30 <nema_set_blend+0x644>)
 801adcc:	9308      	str	r3, [sp, #32]
 801adce:	9b01      	ldr	r3, [sp, #4]
 801add0:	2b00      	cmp	r3, #0
 801add2:	f000 8123 	beq.w	801b01c <nema_set_blend+0x730>
 801add6:	2b01      	cmp	r3, #1
 801add8:	f04f 0600 	mov.w	r6, #0
 801addc:	f000 8137 	beq.w	801b04e <nema_set_blend+0x762>
 801ade0:	461f      	mov	r7, r3
 801ade2:	e714      	b.n	801ac0e <nema_set_blend+0x322>
 801ade4:	e9dd 6c11 	ldrd	r6, ip, [sp, #68]	@ 0x44
 801ade8:	e9dd 7413 	ldrd	r7, r4, [sp, #76]	@ 0x4c
 801adec:	f04f 081d 	mov.w	r8, #29
 801adf0:	e64a      	b.n	801aa88 <nema_set_blend+0x19c>
 801adf2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801adf4:	2a00      	cmp	r2, #0
 801adf6:	d046      	beq.n	801ae86 <nema_set_blend+0x59a>
 801adf8:	f44f 2440 	mov.w	r4, #786432	@ 0xc0000
 801adfc:	494d      	ldr	r1, [pc, #308]	@ (801af34 <nema_set_blend+0x648>)
 801adfe:	e752      	b.n	801aca6 <nema_set_blend+0x3ba>
 801ae00:	9b02      	ldr	r3, [sp, #8]
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	f47f aea9 	bne.w	801ab5a <nema_set_blend+0x26e>
 801ae08:	9b00      	ldr	r3, [sp, #0]
 801ae0a:	3301      	adds	r3, #1
 801ae0c:	f000 8114 	beq.w	801b038 <nema_set_blend+0x74c>
 801ae10:	9802      	ldr	r0, [sp, #8]
 801ae12:	f7fe fe91 	bl	8019b38 <nema_matmul_bypass>
 801ae16:	4b42      	ldr	r3, [pc, #264]	@ (801af20 <nema_set_blend+0x634>)
 801ae18:	4947      	ldr	r1, [pc, #284]	@ (801af38 <nema_set_blend+0x64c>)
 801ae1a:	9800      	ldr	r0, [sp, #0]
 801ae1c:	681a      	ldr	r2, [r3, #0]
 801ae1e:	4b47      	ldr	r3, [pc, #284]	@ (801af3c <nema_set_blend+0x650>)
 801ae20:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801ae24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ae28:	4318      	orrs	r0, r3
 801ae2a:	f7fe ff99 	bl	8019d60 <nema_set_frag_ptr>
 801ae2e:	b027      	add	sp, #156	@ 0x9c
 801ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae34:	2301      	movs	r3, #1
 801ae36:	930a      	str	r3, [sp, #40]	@ 0x28
 801ae38:	9304      	str	r3, [sp, #16]
 801ae3a:	469b      	mov	fp, r3
 801ae3c:	2303      	movs	r3, #3
 801ae3e:	f04f 0e00 	mov.w	lr, #0
 801ae42:	9303      	str	r3, [sp, #12]
 801ae44:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 801ae48:	f503 2340 	add.w	r3, r3, #786432	@ 0xc0000
 801ae4c:	9308      	str	r3, [sp, #32]
 801ae4e:	4b3c      	ldr	r3, [pc, #240]	@ (801af40 <nema_set_blend+0x654>)
 801ae50:	f8cd e018 	str.w	lr, [sp, #24]
 801ae54:	9312      	str	r3, [sp, #72]	@ 0x48
 801ae56:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ae5a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ae5c:	4b39      	ldr	r3, [pc, #228]	@ (801af44 <nema_set_blend+0x658>)
 801ae5e:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 801ae62:	9314      	str	r3, [sp, #80]	@ 0x50
 801ae64:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ae68:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ae6a:	f5a3 23c8 	sub.w	r3, r3, #409600	@ 0x64000
 801ae6e:	f8cd e054 	str.w	lr, [sp, #84]	@ 0x54
 801ae72:	4835      	ldr	r0, [pc, #212]	@ (801af48 <nema_set_blend+0x65c>)
 801ae74:	4935      	ldr	r1, [pc, #212]	@ (801af4c <nema_set_blend+0x660>)
 801ae76:	4a36      	ldr	r2, [pc, #216]	@ (801af50 <nema_set_blend+0x664>)
 801ae78:	461d      	mov	r5, r3
 801ae7a:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 801af68 <nema_set_blend+0x67c>
 801ae7e:	4e35      	ldr	r6, [pc, #212]	@ (801af54 <nema_set_blend+0x668>)
 801ae80:	4c35      	ldr	r4, [pc, #212]	@ (801af58 <nema_set_blend+0x66c>)
 801ae82:	4f36      	ldr	r7, [pc, #216]	@ (801af5c <nema_set_blend+0x670>)
 801ae84:	e5e7      	b.n	801aa56 <nema_set_blend+0x16a>
 801ae86:	4611      	mov	r1, r2
 801ae88:	2202      	movs	r2, #2
 801ae8a:	9205      	str	r2, [sp, #20]
 801ae8c:	2201      	movs	r2, #1
 801ae8e:	e715      	b.n	801acbc <nema_set_blend+0x3d0>
 801ae90:	9b01      	ldr	r3, [sp, #4]
 801ae92:	2b01      	cmp	r3, #1
 801ae94:	f47f ae32 	bne.w	801aafc <nema_set_blend+0x210>
 801ae98:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	f47f ae2e 	bne.w	801aafc <nema_set_blend+0x210>
 801aea0:	a826      	add	r0, sp, #152	@ 0x98
 801aea2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801aea6:	4b21      	ldr	r3, [pc, #132]	@ (801af2c <nema_set_blend+0x640>)
 801aea8:	9802      	ldr	r0, [sp, #8]
 801aeaa:	f841 6c3c 	str.w	r6, [r1, #-60]
 801aeae:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801aeb2:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801aeb6:	4615      	mov	r5, r2
 801aeb8:	f841 3c40 	str.w	r3, [r1, #-64]
 801aebc:	e6c0      	b.n	801ac40 <nema_set_blend+0x354>
 801aebe:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
 801aec2:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 801aec6:	462a      	mov	r2, r5
 801aec8:	3501      	adds	r5, #1
 801aeca:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801aece:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
 801aed2:	0140      	lsls	r0, r0, #5
 801aed4:	4b22      	ldr	r3, [pc, #136]	@ (801af60 <nema_set_blend+0x674>)
 801aed6:	ea40 3081 	orr.w	r0, r0, r1, lsl #14
 801aeda:	4303      	orrs	r3, r0
 801aedc:	4921      	ldr	r1, [pc, #132]	@ (801af64 <nema_set_blend+0x678>)
 801aede:	9802      	ldr	r0, [sp, #8]
 801aee0:	433b      	orrs	r3, r7
 801aee2:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801aee6:	a826      	add	r0, sp, #152	@ 0x98
 801aee8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801aeec:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801aeee:	4333      	orrs	r3, r6
 801aef0:	4301      	orrs	r1, r0
 801aef2:	e942 1310 	strd	r1, r3, [r2, #-64]	@ 0x40
 801aef6:	e6a3      	b.n	801ac40 <nema_set_blend+0x354>
 801aef8:	9b04      	ldr	r3, [sp, #16]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	f000 8082 	beq.w	801b004 <nema_set_blend+0x718>
 801af00:	9a05      	ldr	r2, [sp, #20]
 801af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af04:	9203      	str	r2, [sp, #12]
 801af06:	920a      	str	r2, [sp, #40]	@ 0x28
 801af08:	4a09      	ldr	r2, [pc, #36]	@ (801af30 <nema_set_blend+0x644>)
 801af0a:	f443 4330 	orr.w	r3, r3, #45056	@ 0xb000
 801af0e:	9208      	str	r2, [sp, #32]
 801af10:	e6c2      	b.n	801ac98 <nema_set_blend+0x3ac>
 801af12:	bf00      	nop
 801af14:	0802d948 	.word	0x0802d948
 801af18:	0802d978 	.word	0x0802d978
 801af1c:	0a002007 	.word	0x0a002007
 801af20:	200000f8 	.word	0x200000f8
 801af24:	100c118b 	.word	0x100c118b
 801af28:	0081a042 	.word	0x0081a042
 801af2c:	080c0002 	.word	0x080c0002
 801af30:	080c0000 	.word	0x080c0000
 801af34:	100c1183 	.word	0x100c1183
 801af38:	0802d938 	.word	0x0802d938
 801af3c:	141f801f 	.word	0x141f801f
 801af40:	000761c7 	.word	0x000761c7
 801af44:	00076187 	.word	0x00076187
 801af48:	000121c7 	.word	0x000121c7
 801af4c:	800121c7 	.word	0x800121c7
 801af50:	00012187 	.word	0x00012187
 801af54:	800461c7 	.word	0x800461c7
 801af58:	00046187 	.word	0x00046187
 801af5c:	80046187 	.word	0x80046187
 801af60:	80080206 	.word	0x80080206
 801af64:	004e0002 	.word	0x004e0002
 801af68:	000461c7 	.word	0x000461c7
 801af6c:	2301      	movs	r3, #1
 801af6e:	2202      	movs	r2, #2
 801af70:	9304      	str	r3, [sp, #16]
 801af72:	4619      	mov	r1, r3
 801af74:	4c38      	ldr	r4, [pc, #224]	@ (801b058 <nema_set_blend+0x76c>)
 801af76:	e5ad      	b.n	801aad4 <nema_set_blend+0x1e8>
 801af78:	f1b9 0f00 	cmp.w	r9, #0
 801af7c:	d055      	beq.n	801b02a <nema_set_blend+0x73e>
 801af7e:	2301      	movs	r3, #1
 801af80:	2103      	movs	r1, #3
 801af82:	930a      	str	r3, [sp, #40]	@ 0x28
 801af84:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801af88:	4b34      	ldr	r3, [pc, #208]	@ (801b05c <nema_set_blend+0x770>)
 801af8a:	9308      	str	r3, [sp, #32]
 801af8c:	e518      	b.n	801a9c0 <nema_set_blend+0xd4>
 801af8e:	2c00      	cmp	r4, #0
 801af90:	bfbd      	ittte	lt
 801af92:	f02b 4b00 	biclt.w	fp, fp, #2147483648	@ 0x80000000
 801af96:	f04f 4202 	movlt.w	r2, #2181038080	@ 0x82000000
 801af9a:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 801af9e:	f04f 7200 	movge.w	r2, #33554432	@ 0x2000000
 801afa2:	b111      	cbz	r1, 801afaa <nema_set_blend+0x6be>
 801afa4:	4613      	mov	r3, r2
 801afa6:	f02b 7b00 	bic.w	fp, fp, #33554432	@ 0x2000000
 801afaa:	9a01      	ldr	r2, [sp, #4]
 801afac:	ea42 2009 	orr.w	r0, r2, r9, lsl #8
 801afb0:	4318      	orrs	r0, r3
 801afb2:	f7fe fedb 	bl	8019d6c <nema_set_rop_blend_mode>
 801afb6:	ea4f 505b 	mov.w	r0, fp, lsr #21
 801afba:	4b29      	ldr	r3, [pc, #164]	@ (801b060 <nema_set_blend+0x774>)
 801afbc:	0540      	lsls	r0, r0, #21
 801afbe:	f040 0201 	orr.w	r2, r0, #1
 801afc2:	789b      	ldrb	r3, [r3, #2]
 801afc4:	2a01      	cmp	r2, #1
 801afc6:	9201      	str	r2, [sp, #4]
 801afc8:	9305      	str	r3, [sp, #20]
 801afca:	f43f adbe 	beq.w	801ab4a <nema_set_blend+0x25e>
 801afce:	f00b 4380 	and.w	r3, fp, #1073741824	@ 0x40000000
 801afd2:	9315      	str	r3, [sp, #84]	@ 0x54
 801afd4:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801afd8:	9306      	str	r3, [sp, #24]
 801afda:	f00b 5300 	and.w	r3, fp, #536870912	@ 0x20000000
 801afde:	9309      	str	r3, [sp, #36]	@ 0x24
 801afe0:	2301      	movs	r3, #1
 801afe2:	f04f 0900 	mov.w	r9, #0
 801afe6:	f00b 5280 	and.w	r2, fp, #268435456	@ 0x10000000
 801afea:	f8dd b004 	ldr.w	fp, [sp, #4]
 801afee:	9301      	str	r3, [sp, #4]
 801aff0:	4b1c      	ldr	r3, [pc, #112]	@ (801b064 <nema_set_blend+0x778>)
 801aff2:	46c8      	mov	r8, r9
 801aff4:	f8cd 901c 	str.w	r9, [sp, #28]
 801aff8:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801affc:	f8cd 9010 	str.w	r9, [sp, #16]
 801b000:	9308      	str	r3, [sp, #32]
 801b002:	e4dd      	b.n	801a9c0 <nema_set_blend+0xd4>
 801b004:	2201      	movs	r2, #1
 801b006:	9b05      	ldr	r3, [sp, #20]
 801b008:	9204      	str	r2, [sp, #16]
 801b00a:	930a      	str	r3, [sp, #40]	@ 0x28
 801b00c:	e644      	b.n	801ac98 <nema_set_blend+0x3ac>
 801b00e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b010:	2b00      	cmp	r3, #0
 801b012:	f43f aedc 	beq.w	801adce <nema_set_blend+0x4e2>
 801b016:	9e06      	ldr	r6, [sp, #24]
 801b018:	9f01      	ldr	r7, [sp, #4]
 801b01a:	e5f8      	b.n	801ac0e <nema_set_blend+0x322>
 801b01c:	f44f 0600 	mov.w	r6, #8388608	@ 0x800000
 801b020:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 801b024:	4910      	ldr	r1, [pc, #64]	@ (801b068 <nema_set_blend+0x77c>)
 801b026:	4811      	ldr	r0, [pc, #68]	@ (801b06c <nema_set_blend+0x780>)
 801b028:	e74f      	b.n	801aeca <nema_set_blend+0x5de>
 801b02a:	4b0e      	ldr	r3, [pc, #56]	@ (801b064 <nema_set_blend+0x778>)
 801b02c:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801b030:	9308      	str	r3, [sp, #32]
 801b032:	e9cd 9903 	strd	r9, r9, [sp, #12]
 801b036:	e4c3      	b.n	801a9c0 <nema_set_blend+0xd4>
 801b038:	2001      	movs	r0, #1
 801b03a:	f7fe fd7d 	bl	8019b38 <nema_matmul_bypass>
 801b03e:	4a0c      	ldr	r2, [pc, #48]	@ (801b070 <nema_set_blend+0x784>)
 801b040:	4b0c      	ldr	r3, [pc, #48]	@ (801b074 <nema_set_blend+0x788>)
 801b042:	6810      	ldr	r0, [r2, #0]
 801b044:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801b048:	f7fe fe8a 	bl	8019d60 <nema_set_frag_ptr>
 801b04c:	e6ef      	b.n	801ae2e <nema_set_blend+0x542>
 801b04e:	4637      	mov	r7, r6
 801b050:	4905      	ldr	r1, [pc, #20]	@ (801b068 <nema_set_blend+0x77c>)
 801b052:	4806      	ldr	r0, [pc, #24]	@ (801b06c <nema_set_blend+0x780>)
 801b054:	e739      	b.n	801aeca <nema_set_blend+0x5de>
 801b056:	bf00      	nop
 801b058:	1000fc00 	.word	0x1000fc00
 801b05c:	080c0003 	.word	0x080c0003
 801b060:	20000024 	.word	0x20000024
 801b064:	080c0000 	.word	0x080c0000
 801b068:	0802d978 	.word	0x0802d978
 801b06c:	0802d948 	.word	0x0802d948
 801b070:	200000f8 	.word	0x200000f8
 801b074:	141f001f 	.word	0x141f001f

0801b078 <nema_set_const_color>:
 801b078:	b510      	push	{r4, lr}
 801b07a:	4604      	mov	r4, r0
 801b07c:	2001      	movs	r0, #1
 801b07e:	4621      	mov	r1, r4
 801b080:	f7fd fe4c 	bl	8018d1c <nema_set_const_reg>
 801b084:	4b04      	ldr	r3, [pc, #16]	@ (801b098 <nema_set_const_color+0x20>)
 801b086:	781b      	ldrb	r3, [r3, #0]
 801b088:	b903      	cbnz	r3, 801b08c <nema_set_const_color+0x14>
 801b08a:	bd10      	pop	{r4, pc}
 801b08c:	4620      	mov	r0, r4
 801b08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b092:	f7fe be71 	b.w	8019d78 <nema_set_rop_const_color>
 801b096:	bf00      	nop
 801b098:	200875c5 	.word	0x200875c5

0801b09c <_ZN8touchgfx8HALGPU2D17unlockFrameBufferEv>:
 801b09c:	f7f8 bdae 	b.w	8013bfc <_ZN8touchgfx3HAL17unlockFrameBufferEv>

0801b0a0 <_ZN8touchgfx8HALGPU2D10beginFrameEv>:
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	f880 20a5 	strb.w	r2, [r0, #165]	@ 0xa5
 801b0a6:	f7f8 bcad 	b.w	8013a04 <_ZN8touchgfx3HAL10beginFrameEv>
 801b0aa:	bf00      	nop

0801b0ac <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv>:
 801b0ac:	b538      	push	{r3, r4, r5, lr}
 801b0ae:	f890 30a5 	ldrb.w	r3, [r0, #165]	@ 0xa5
 801b0b2:	4604      	mov	r4, r0
 801b0b4:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 801b0b8:	b12b      	cbz	r3, 801b0c6 <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv+0x1a>
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	4628      	mov	r0, r5
 801b0be:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 801b0c2:	f7ff fb53 	bl	801a76c <nema_cl_submit>
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	f7ff fbca 	bl	801a860 <nema_cl_wait>
 801b0cc:	4620      	mov	r0, r4
 801b0ce:	f7f9 fa37 	bl	8014540 <_ZN8touchgfx3HAL15lockFrameBufferEv>
 801b0d2:	2300      	movs	r3, #0
 801b0d4:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801b0d8:	bd38      	pop	{r3, r4, r5, pc}
 801b0da:	bf00      	nop

0801b0dc <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>:
 801b0dc:	b508      	push	{r3, lr}
 801b0de:	4a03      	ldr	r2, [pc, #12]	@ (801b0ec <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x10>)
 801b0e0:	4b03      	ldr	r3, [pc, #12]	@ (801b0f0 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x14>)
 801b0e2:	2118      	movs	r1, #24
 801b0e4:	4803      	ldr	r0, [pc, #12]	@ (801b0f4 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x18>)
 801b0e6:	f00f fe81 	bl	802adec <__assert_func>
 801b0ea:	bf00      	nop
 801b0ec:	0802dafc 	.word	0x0802dafc
 801b0f0:	0802d9a8 	.word	0x0802d9a8
 801b0f4:	0802da00 	.word	0x0802da00

0801b0f8 <_ZN8touchgfx8HALGPU2D8endFrameEv>:
 801b0f8:	b538      	push	{r3, r4, r5, lr}
 801b0fa:	f890 30a4 	ldrb.w	r3, [r0, #164]	@ 0xa4
 801b0fe:	4604      	mov	r4, r0
 801b100:	b97b      	cbnz	r3, 801b122 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x2a>
 801b102:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 801b106:	f104 057c 	add.w	r5, r4, #124	@ 0x7c
 801b10a:	b113      	cbz	r3, 801b112 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x1a>
 801b10c:	4628      	mov	r0, r5
 801b10e:	f7ff fb2d 	bl	801a76c <nema_cl_submit>
 801b112:	4628      	mov	r0, r5
 801b114:	f7ff fba4 	bl	801a860 <nema_cl_wait>
 801b118:	4620      	mov	r0, r4
 801b11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b11e:	f7f8 bc7d 	b.w	8013a1c <_ZN8touchgfx3HAL8endFrameEv>
 801b122:	6840      	ldr	r0, [r0, #4]
 801b124:	4906      	ldr	r1, [pc, #24]	@ (801b140 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x48>)
 801b126:	6803      	ldr	r3, [r0, #0]
 801b128:	689a      	ldr	r2, [r3, #8]
 801b12a:	428a      	cmp	r2, r1
 801b12c:	d105      	bne.n	801b13a <_ZN8touchgfx8HALGPU2D8endFrameEv+0x42>
 801b12e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b130:	4798      	blx	r3
 801b132:	2300      	movs	r3, #0
 801b134:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801b138:	e7e3      	b.n	801b102 <_ZN8touchgfx8HALGPU2D8endFrameEv+0xa>
 801b13a:	4790      	blx	r2
 801b13c:	e7f9      	b.n	801b132 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x3a>
 801b13e:	bf00      	nop
 801b140:	08011efd 	.word	0x08011efd

0801b144 <_ZN8touchgfx8HALGPU2D10initializeEv>:
 801b144:	b570      	push	{r4, r5, r6, lr}
 801b146:	4606      	mov	r6, r0
 801b148:	b08a      	sub	sp, #40	@ 0x28
 801b14a:	466c      	mov	r4, sp
 801b14c:	f7f8 fc73 	bl	8013a36 <_ZN8touchgfx3HAL10initializeEv>
 801b150:	f106 057c 	add.w	r5, r6, #124	@ 0x7c
 801b154:	4668      	mov	r0, sp
 801b156:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801b15a:	f7ff f86f 	bl	801a23c <nema_cl_create_sized>
 801b15e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b166:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b16a:	e885 0003 	stmia.w	r5, {r0, r1}
 801b16e:	f8d6 3088 	ldr.w	r3, [r6, #136]	@ 0x88
 801b172:	b10b      	cbz	r3, 801b178 <_ZN8touchgfx8HALGPU2D10initializeEv+0x34>
 801b174:	b00a      	add	sp, #40	@ 0x28
 801b176:	bd70      	pop	{r4, r5, r6, pc}
 801b178:	f7ff ffb0 	bl	801b0dc <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801b17c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
 801b17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b17e:	f04f 0c01 	mov.w	ip, #1
 801b182:	2500      	movs	r5, #0
 801b184:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 801b188:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801b18c:	60c3      	str	r3, [r0, #12]
 801b18e:	42b7      	cmp	r7, r6
 801b190:	bf2c      	ite	cs
 801b192:	f04f 0e00 	movcs.w	lr, #0
 801b196:	f04f 0e01 	movcc.w	lr, #1
 801b19a:	4b23      	ldr	r3, [pc, #140]	@ (801b228 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xac>)
 801b19c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801b1a0:	6683      	str	r3, [r0, #104]	@ 0x68
 801b1a2:	4b22      	ldr	r3, [pc, #136]	@ (801b22c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb0>)
 801b1a4:	6105      	str	r5, [r0, #16]
 801b1a6:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801b1aa:	61c5      	str	r5, [r0, #28]
 801b1ac:	6205      	str	r5, [r0, #32]
 801b1ae:	8485      	strh	r5, [r0, #36]	@ 0x24
 801b1b0:	f8c0 5026 	str.w	r5, [r0, #38]	@ 0x26
 801b1b4:	f880 502a 	strb.w	r5, [r0, #42]	@ 0x2a
 801b1b8:	62c5      	str	r5, [r0, #44]	@ 0x2c
 801b1ba:	8605      	strh	r5, [r0, #48]	@ 0x30
 801b1bc:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
 801b1c0:	e9c0 5510 	strd	r5, r5, [r0, #64]	@ 0x40
 801b1c4:	f880 5048 	strb.w	r5, [r0, #72]	@ 0x48
 801b1c8:	f880 504a 	strb.w	r5, [r0, #74]	@ 0x4a
 801b1cc:	f880 504b 	strb.w	r5, [r0, #75]	@ 0x4b
 801b1d0:	64c5      	str	r5, [r0, #76]	@ 0x4c
 801b1d2:	6505      	str	r5, [r0, #80]	@ 0x50
 801b1d4:	6545      	str	r5, [r0, #84]	@ 0x54
 801b1d6:	f880 5058 	strb.w	r5, [r0, #88]	@ 0x58
 801b1da:	e9c0 5517 	strd	r5, r5, [r0, #92]	@ 0x5c
 801b1de:	6645      	str	r5, [r0, #100]	@ 0x64
 801b1e0:	66c5      	str	r5, [r0, #108]	@ 0x6c
 801b1e2:	4a13      	ldr	r2, [pc, #76]	@ (801b230 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb4>)
 801b1e4:	f880 c049 	strb.w	ip, [r0, #73]	@ 0x49
 801b1e8:	6018      	str	r0, [r3, #0]
 801b1ea:	4b12      	ldr	r3, [pc, #72]	@ (801b234 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb8>)
 801b1ec:	8017      	strh	r7, [r2, #0]
 801b1ee:	801f      	strh	r7, [r3, #0]
 801b1f0:	4a11      	ldr	r2, [pc, #68]	@ (801b238 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xbc>)
 801b1f2:	4b12      	ldr	r3, [pc, #72]	@ (801b23c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc0>)
 801b1f4:	8016      	strh	r6, [r2, #0]
 801b1f6:	801e      	strh	r6, [r3, #0]
 801b1f8:	4911      	ldr	r1, [pc, #68]	@ (801b240 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc4>)
 801b1fa:	4a12      	ldr	r2, [pc, #72]	@ (801b244 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc8>)
 801b1fc:	4b12      	ldr	r3, [pc, #72]	@ (801b248 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xcc>)
 801b1fe:	700d      	strb	r5, [r1, #0]
 801b200:	6002      	str	r2, [r0, #0]
 801b202:	6018      	str	r0, [r3, #0]
 801b204:	f880 5070 	strb.w	r5, [r0, #112]	@ 0x70
 801b208:	6745      	str	r5, [r0, #116]	@ 0x74
 801b20a:	f880 5078 	strb.w	r5, [r0, #120]	@ 0x78
 801b20e:	f880 5079 	strb.w	r5, [r0, #121]	@ 0x79
 801b212:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
 801b216:	f880 c07b 	strb.w	ip, [r0, #123]	@ 0x7b
 801b21a:	f880 50a4 	strb.w	r5, [r0, #164]	@ 0xa4
 801b21e:	f880 50a5 	strb.w	r5, [r0, #165]	@ 0xa5
 801b222:	f880 e034 	strb.w	lr, [r0, #52]	@ 0x34
 801b226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b228:	01000001 	.word	0x01000001
 801b22c:	2008745c 	.word	0x2008745c
 801b230:	20087450 	.word	0x20087450
 801b234:	20087456 	.word	0x20087456
 801b238:	20087452 	.word	0x20087452
 801b23c:	20087458 	.word	0x20087458
 801b240:	20087454 	.word	0x20087454
 801b244:	0802da2c 	.word	0x0802da2c
 801b248:	200875c8 	.word	0x200875c8

0801b24c <_ZN8touchgfx8HALGPU2D10initializeEi>:
 801b24c:	b570      	push	{r4, r5, r6, lr}
 801b24e:	460c      	mov	r4, r1
 801b250:	b08a      	sub	sp, #40	@ 0x28
 801b252:	4606      	mov	r6, r0
 801b254:	f7f8 fbef 	bl	8013a36 <_ZN8touchgfx3HAL10initializeEv>
 801b258:	4621      	mov	r1, r4
 801b25a:	466c      	mov	r4, sp
 801b25c:	4668      	mov	r0, sp
 801b25e:	f106 057c 	add.w	r5, r6, #124	@ 0x7c
 801b262:	f7fe ffeb 	bl	801a23c <nema_cl_create_sized>
 801b266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b26a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b26c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b26e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b272:	e885 0003 	stmia.w	r5, {r0, r1}
 801b276:	f8d6 3088 	ldr.w	r3, [r6, #136]	@ 0x88
 801b27a:	b10b      	cbz	r3, 801b280 <_ZN8touchgfx8HALGPU2D10initializeEi+0x34>
 801b27c:	b00a      	add	sp, #40	@ 0x28
 801b27e:	bd70      	pop	{r4, r5, r6, pc}
 801b280:	f7ff ff2c 	bl	801b0dc <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>:
 801b284:	b510      	push	{r4, lr}
 801b286:	f890 30a4 	ldrb.w	r3, [r0, #164]	@ 0xa4
 801b28a:	4604      	mov	r4, r0
 801b28c:	b94b      	cbnz	r3, 801b2a2 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x1e>
 801b28e:	4620      	mov	r0, r4
 801b290:	2101      	movs	r1, #1
 801b292:	f7f9 f943 	bl	801451c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801b296:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 801b29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b29e:	f7ff b8e1 	b.w	801a464 <nema_cl_bind_circular>
 801b2a2:	6840      	ldr	r0, [r0, #4]
 801b2a4:	4906      	ldr	r1, [pc, #24]	@ (801b2c0 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x3c>)
 801b2a6:	6803      	ldr	r3, [r0, #0]
 801b2a8:	689a      	ldr	r2, [r3, #8]
 801b2aa:	428a      	cmp	r2, r1
 801b2ac:	d105      	bne.n	801b2ba <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x36>
 801b2ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b2b0:	4798      	blx	r3
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801b2b8:	e7e9      	b.n	801b28e <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0xa>
 801b2ba:	4790      	blx	r2
 801b2bc:	e7f9      	b.n	801b2b2 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x2e>
 801b2be:	bf00      	nop
 801b2c0:	08011efd 	.word	0x08011efd

0801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>:
 801b2c4:	4603      	mov	r3, r0
 801b2c6:	2200      	movs	r2, #0
 801b2c8:	307c      	adds	r0, #124	@ 0x7c
 801b2ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 801b2ce:	f7ff ba4d 	b.w	801a76c <nema_cl_submit>
 801b2d2:	bf00      	nop

0801b2d4 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801b2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2d8:	b091      	sub	sp, #68	@ 0x44
 801b2da:	4604      	mov	r4, r0
 801b2dc:	461d      	mov	r5, r3
 801b2de:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 801b2e2:	e9cd 210e 	strd	r2, r1, [sp, #56]	@ 0x38
 801b2e6:	930d      	str	r3, [sp, #52]	@ 0x34
 801b2e8:	f89d 2088 	ldrb.w	r2, [sp, #136]	@ 0x88
 801b2ec:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 801b2f0:	307c      	adds	r0, #124	@ 0x7c
 801b2f2:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 801b2f6:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801b2fa:	f8bd 8070 	ldrh.w	r8, [sp, #112]	@ 0x70
 801b2fe:	f8bd 9074 	ldrh.w	r9, [sp, #116]	@ 0x74
 801b302:	f89d a078 	ldrb.w	sl, [sp, #120]	@ 0x78
 801b306:	f89d b07c 	ldrb.w	fp, [sp, #124]	@ 0x7c
 801b30a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b30c:	920c      	str	r2, [sp, #48]	@ 0x30
 801b30e:	f7ff faa7 	bl	801a860 <nema_cl_wait>
 801b312:	f04f 0e01 	mov.w	lr, #1
 801b316:	2000      	movs	r0, #0
 801b318:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b31a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b31c:	9208      	str	r2, [sp, #32]
 801b31e:	f8d4 c000 	ldr.w	ip, [r4]
 801b322:	9307      	str	r3, [sp, #28]
 801b324:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b326:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801b32a:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	@ 0x38
 801b32e:	e9cd b305 	strd	fp, r3, [sp, #20]
 801b332:	e9cd 7801 	strd	r7, r8, [sp, #4]
 801b336:	9600      	str	r6, [sp, #0]
 801b338:	f884 e0a4 	strb.w	lr, [r4, #164]	@ 0xa4
 801b33c:	9009      	str	r0, [sp, #36]	@ 0x24
 801b33e:	462b      	mov	r3, r5
 801b340:	4620      	mov	r0, r4
 801b342:	f8dc 403c 	ldr.w	r4, [ip, #60]	@ 0x3c
 801b346:	47a0      	blx	r4
 801b348:	b011      	add	sp, #68	@ 0x44
 801b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b34e:	bf00      	nop

0801b350 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv>:
 801b350:	7b03      	ldrb	r3, [r0, #12]
 801b352:	2b02      	cmp	r3, #2
 801b354:	d004      	beq.n	801b360 <_ZNK8touchgfx8LCDGPU2D8bitDepthEv+0x10>
 801b356:	2b01      	cmp	r3, #1
 801b358:	bf0c      	ite	eq
 801b35a:	2018      	moveq	r0, #24
 801b35c:	2010      	movne	r0, #16
 801b35e:	4770      	bx	lr
 801b360:	2020      	movs	r0, #32
 801b362:	4770      	bx	lr

0801b364 <_ZNK8touchgfx8LCDGPU2D17framebufferFormatEv>:
 801b364:	7b00      	ldrb	r0, [r0, #12]
 801b366:	4770      	bx	lr

0801b368 <_ZN8touchgfx8LCDGPU2D4initEv>:
 801b368:	4770      	bx	lr
 801b36a:	bf00      	nop

0801b36c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b370:	b087      	sub	sp, #28
 801b372:	f89d 5064 	ldrb.w	r5, [sp, #100]	@ 0x64
 801b376:	9102      	str	r1, [sp, #8]
 801b378:	ea6f 0c05 	mvn.w	ip, r5
 801b37c:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801b380:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b382:	9203      	str	r2, [sp, #12]
 801b384:	e9dd 4215 	ldrd	r4, r2, [sp, #84]	@ 0x54
 801b388:	6860      	ldr	r0, [r4, #4]
 801b38a:	fa5f fc8c 	uxtb.w	ip, ip
 801b38e:	fb00 2e01 	mla	lr, r0, r1, r2
 801b392:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b394:	6820      	ldr	r0, [r4, #0]
 801b396:	e9d2 2400 	ldrd	r2, r4, [r2]
 801b39a:	3404      	adds	r4, #4
 801b39c:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 801b3a0:	fa1f fb85 	uxth.w	fp, r5
 801b3a4:	9405      	str	r4, [sp, #20]
 801b3a6:	9200      	str	r2, [sp, #0]
 801b3a8:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801b3ac:	9c02      	ldr	r4, [sp, #8]
 801b3ae:	2c00      	cmp	r4, #0
 801b3b0:	dc03      	bgt.n	801b3ba <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801b3b2:	9c03      	ldr	r4, [sp, #12]
 801b3b4:	2c00      	cmp	r4, #0
 801b3b6:	f340 80c2 	ble.w	801b53e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b3ba:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	e9d4 ea02 	ldrd	lr, sl, [r4, #8]
 801b3c2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b3c6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801b3ca:	fa0f f48e 	sxth.w	r4, lr
 801b3ce:	fa0f f88a 	sxth.w	r8, sl
 801b3d2:	f340 80b7 	ble.w	801b544 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b3d6:	1415      	asrs	r5, r2, #16
 801b3d8:	d406      	bmi.n	801b3e8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b3da:	42a5      	cmp	r5, r4
 801b3dc:	da04      	bge.n	801b3e8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b3de:	ea5f 4921 	movs.w	r9, r1, asr #16
 801b3e2:	d401      	bmi.n	801b3e8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b3e4:	45c1      	cmp	r9, r8
 801b3e6:	db3e      	blt.n	801b466 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801b3e8:	3b01      	subs	r3, #1
 801b3ea:	4432      	add	r2, r6
 801b3ec:	4439      	add	r1, r7
 801b3ee:	f100 0002 	add.w	r0, r0, #2
 801b3f2:	d1f0      	bne.n	801b3d6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b3f4:	9b02      	ldr	r3, [sp, #8]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	f340 80a1 	ble.w	801b53e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801b3fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b400:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b404:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b408:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b40c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b410:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801b414:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b418:	ee76 6a62 	vsub.f32	s13, s12, s5
 801b41c:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801b420:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b424:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b428:	ee16 2a90 	vmov	r2, s13
 801b42c:	3b01      	subs	r3, #1
 801b42e:	9302      	str	r3, [sp, #8]
 801b430:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b432:	9c03      	ldr	r4, [sp, #12]
 801b434:	fb92 f6f3 	sdiv	r6, r2, r3
 801b438:	ee17 2a10 	vmov	r2, s14
 801b43c:	eeb0 7a43 	vmov.f32	s14, s6
 801b440:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b444:	ee17 1a10 	vmov	r1, s14
 801b448:	eeb0 7a62 	vmov.f32	s14, s5
 801b44c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b450:	fb92 f7f3 	sdiv	r7, r2, r3
 801b454:	eeb0 3a67 	vmov.f32	s6, s15
 801b458:	ee17 2a10 	vmov	r2, s14
 801b45c:	eef0 2a46 	vmov.f32	s5, s12
 801b460:	bf08      	it	eq
 801b462:	4623      	moveq	r3, r4
 801b464:	e7a2      	b.n	801b3ac <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b466:	9501      	str	r5, [sp, #4]
 801b468:	1e5d      	subs	r5, r3, #1
 801b46a:	fb05 2906 	mla	r9, r5, r6, r2
 801b46e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b472:	9504      	str	r5, [sp, #16]
 801b474:	d570      	bpl.n	801b558 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801b476:	4680      	mov	r8, r0
 801b478:	9d01      	ldr	r5, [sp, #4]
 801b47a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b47e:	4654      	mov	r4, sl
 801b480:	4673      	mov	r3, lr
 801b482:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801b486:	e002      	b.n	801b48e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b488:	1415      	asrs	r5, r2, #16
 801b48a:	e9d9 3402 	ldrd	r3, r4, [r9, #8]
 801b48e:	2d00      	cmp	r5, #0
 801b490:	4432      	add	r2, r6
 801b492:	db4b      	blt.n	801b52c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801b494:	429d      	cmp	r5, r3
 801b496:	da49      	bge.n	801b52c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801b498:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801b49c:	d446      	bmi.n	801b52c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801b49e:	45a6      	cmp	lr, r4
 801b4a0:	da44      	bge.n	801b52c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801b4a2:	9c00      	ldr	r4, [sp, #0]
 801b4a4:	b21b      	sxth	r3, r3
 801b4a6:	fb0e 4303 	mla	r3, lr, r3, r4
 801b4aa:	5d5b      	ldrb	r3, [r3, r5]
 801b4ac:	9d05      	ldr	r5, [sp, #20]
 801b4ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b4b2:	441d      	add	r5, r3
 801b4b4:	f895 a002 	ldrb.w	sl, [r5, #2]
 801b4b8:	786d      	ldrb	r5, [r5, #1]
 801b4ba:	f8b8 4000 	ldrh.w	r4, [r8]
 801b4be:	fb15 f50b 	smulbb	r5, r5, fp
 801b4c2:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801b4c6:	fa5f fe8e 	uxtb.w	lr, lr
 801b4ca:	9501      	str	r5, [sp, #4]
 801b4cc:	fb1e fe0c 	smulbb	lr, lr, ip
 801b4d0:	9d05      	ldr	r5, [sp, #20]
 801b4d2:	fb1a fa0b 	smulbb	sl, sl, fp
 801b4d6:	5ced      	ldrb	r5, [r5, r3]
 801b4d8:	1223      	asrs	r3, r4, #8
 801b4da:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801b4de:	fb05 ee0b 	mla	lr, r5, fp, lr
 801b4e2:	fb03 aa0c 	mla	sl, r3, ip, sl
 801b4e6:	9d01      	ldr	r5, [sp, #4]
 801b4e8:	10e4      	asrs	r4, r4, #3
 801b4ea:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801b4ee:	fb04 540c 	mla	r4, r4, ip, r5
 801b4f2:	fa1f fe8e 	uxth.w	lr, lr
 801b4f6:	fa1f fa8a 	uxth.w	sl, sl
 801b4fa:	f10e 0301 	add.w	r3, lr, #1
 801b4fe:	f10a 0501 	add.w	r5, sl, #1
 801b502:	9301      	str	r3, [sp, #4]
 801b504:	b2a4      	uxth	r4, r4
 801b506:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801b50a:	9d01      	ldr	r5, [sp, #4]
 801b50c:	1c63      	adds	r3, r4, #1
 801b50e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b512:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 801b516:	f40a 4378 	and.w	r3, sl, #63488	@ 0xf800
 801b51a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801b51e:	0964      	lsrs	r4, r4, #5
 801b520:	432b      	orrs	r3, r5
 801b522:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801b526:	4323      	orrs	r3, r4
 801b528:	f8a8 3000 	strh.w	r3, [r8]
 801b52c:	f108 0802 	add.w	r8, r8, #2
 801b530:	4580      	cmp	r8, r0
 801b532:	4439      	add	r1, r7
 801b534:	d1a8      	bne.n	801b488 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b536:	9b02      	ldr	r3, [sp, #8]
 801b538:	2b00      	cmp	r3, #0
 801b53a:	f73f af5f 	bgt.w	801b3fc <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b53e:	b007      	add	sp, #28
 801b540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b544:	f43f af56 	beq.w	801b3f4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b548:	1e5d      	subs	r5, r3, #1
 801b54a:	fb05 2906 	mla	r9, r5, r6, r2
 801b54e:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b552:	9504      	str	r5, [sp, #16]
 801b554:	f53f af4e 	bmi.w	801b3f4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b558:	454c      	cmp	r4, r9
 801b55a:	dd5b      	ble.n	801b614 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b55c:	9d04      	ldr	r5, [sp, #16]
 801b55e:	fb05 1507 	mla	r5, r5, r7, r1
 801b562:	142d      	asrs	r5, r5, #16
 801b564:	d456      	bmi.n	801b614 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b566:	4545      	cmp	r5, r8
 801b568:	da54      	bge.n	801b614 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	f77f af42 	ble.w	801b3f4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b570:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b574:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b578:	9301      	str	r3, [sp, #4]
 801b57a:	e002      	b.n	801b582 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801b57c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b57e:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801b582:	9d00      	ldr	r5, [sp, #0]
 801b584:	140b      	asrs	r3, r1, #16
 801b586:	fb04 5303 	mla	r3, r4, r3, r5
 801b58a:	1414      	asrs	r4, r2, #16
 801b58c:	5d1b      	ldrb	r3, [r3, r4]
 801b58e:	8804      	ldrh	r4, [r0, #0]
 801b590:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b594:	eb08 0503 	add.w	r5, r8, r3
 801b598:	f895 a002 	ldrb.w	sl, [r5, #2]
 801b59c:	f895 9001 	ldrb.w	r9, [r5, #1]
 801b5a0:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801b5a4:	fa5f fe8e 	uxtb.w	lr, lr
 801b5a8:	fb1e fe0c 	smulbb	lr, lr, ip
 801b5ac:	fb19 f90b 	smulbb	r9, r9, fp
 801b5b0:	fb1a fa0b 	smulbb	sl, sl, fp
 801b5b4:	f818 5003 	ldrb.w	r5, [r8, r3]
 801b5b8:	1223      	asrs	r3, r4, #8
 801b5ba:	10e4      	asrs	r4, r4, #3
 801b5bc:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801b5c0:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801b5c4:	fb05 e50b 	mla	r5, r5, fp, lr
 801b5c8:	fb03 aa0c 	mla	sl, r3, ip, sl
 801b5cc:	fb04 940c 	mla	r4, r4, ip, r9
 801b5d0:	b2ad      	uxth	r5, r5
 801b5d2:	fa1f fa8a 	uxth.w	sl, sl
 801b5d6:	b2a4      	uxth	r4, r4
 801b5d8:	f10a 0301 	add.w	r3, sl, #1
 801b5dc:	f105 0e01 	add.w	lr, r5, #1
 801b5e0:	f104 0901 	add.w	r9, r4, #1
 801b5e4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801b5e8:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801b5ec:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801b5f0:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801b5f4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b5f8:	0964      	lsrs	r4, r4, #5
 801b5fa:	ea43 030e 	orr.w	r3, r3, lr
 801b5fe:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801b602:	4323      	orrs	r3, r4
 801b604:	f820 3b02 	strh.w	r3, [r0], #2
 801b608:	9b01      	ldr	r3, [sp, #4]
 801b60a:	4439      	add	r1, r7
 801b60c:	4298      	cmp	r0, r3
 801b60e:	4432      	add	r2, r6
 801b610:	d1b4      	bne.n	801b57c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801b612:	e6ef      	b.n	801b3f4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b614:	2b00      	cmp	r3, #0
 801b616:	f77f aeed 	ble.w	801b3f4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b61a:	1414      	asrs	r4, r2, #16
 801b61c:	4680      	mov	r8, r0
 801b61e:	9401      	str	r4, [sp, #4]
 801b620:	4625      	mov	r5, r4
 801b622:	e72a      	b.n	801b47a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>

0801b624 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b628:	4689      	mov	r9, r1
 801b62a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801b62e:	46ca      	mov	sl, r9
 801b630:	b087      	sub	sp, #28
 801b632:	9203      	str	r2, [sp, #12]
 801b634:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	@ 0x54
 801b638:	6854      	ldr	r4, [r2, #4]
 801b63a:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	@ 0x5c
 801b63e:	fb04 1000 	mla	r0, r4, r0, r1
 801b642:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801b646:	6815      	ldr	r5, [r2, #0]
 801b648:	e9dc 2400 	ldrd	r2, r4, [ip]
 801b64c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801b650:	f104 0b04 	add.w	fp, r4, #4
 801b654:	9205      	str	r2, [sp, #20]
 801b656:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801b65a:	f1ba 0f00 	cmp.w	sl, #0
 801b65e:	dc03      	bgt.n	801b668 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b660:	9c03      	ldr	r4, [sp, #12]
 801b662:	2c00      	cmp	r4, #0
 801b664:	f340 8095 	ble.w	801b792 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801b668:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	fa0f f588 	sxth.w	r5, r8
 801b672:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b676:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801b67a:	fa0f f48e 	sxth.w	r4, lr
 801b67e:	9502      	str	r5, [sp, #8]
 801b680:	f340 808a 	ble.w	801b798 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801b684:	46f1      	mov	r9, lr
 801b686:	9401      	str	r4, [sp, #4]
 801b688:	1415      	asrs	r5, r2, #16
 801b68a:	d408      	bmi.n	801b69e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b68c:	9c01      	ldr	r4, [sp, #4]
 801b68e:	42a5      	cmp	r5, r4
 801b690:	da05      	bge.n	801b69e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b692:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801b696:	d402      	bmi.n	801b69e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b698:	9c02      	ldr	r4, [sp, #8]
 801b69a:	45a6      	cmp	lr, r4
 801b69c:	db3b      	blt.n	801b716 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 801b69e:	3b01      	subs	r3, #1
 801b6a0:	4432      	add	r2, r6
 801b6a2:	4439      	add	r1, r7
 801b6a4:	f100 0002 	add.w	r0, r0, #2
 801b6a8:	d1ee      	bne.n	801b688 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b6aa:	f1ba 0f00 	cmp.w	sl, #0
 801b6ae:	dd70      	ble.n	801b792 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801b6b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b6b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b6b8:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801b6bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6c0:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801b6c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b6c8:	ee76 6a62 	vsub.f32	s13, s12, s5
 801b6cc:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801b6d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b6d4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b6d8:	ee16 2a90 	vmov	r2, s13
 801b6dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b6de:	9c03      	ldr	r4, [sp, #12]
 801b6e0:	fb92 f6f3 	sdiv	r6, r2, r3
 801b6e4:	ee17 2a10 	vmov	r2, s14
 801b6e8:	eeb0 7a43 	vmov.f32	s14, s6
 801b6ec:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b6f0:	ee17 1a10 	vmov	r1, s14
 801b6f4:	eeb0 7a62 	vmov.f32	s14, s5
 801b6f8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b6fc:	f1ba 0a01 	subs.w	sl, sl, #1
 801b700:	fb92 f7f3 	sdiv	r7, r2, r3
 801b704:	eeb0 3a67 	vmov.f32	s6, s15
 801b708:	ee17 2a10 	vmov	r2, s14
 801b70c:	eef0 2a46 	vmov.f32	s5, s12
 801b710:	bf08      	it	eq
 801b712:	4623      	moveq	r3, r4
 801b714:	e7a1      	b.n	801b65a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b716:	9c01      	ldr	r4, [sp, #4]
 801b718:	9501      	str	r5, [sp, #4]
 801b71a:	1e5d      	subs	r5, r3, #1
 801b71c:	46ce      	mov	lr, r9
 801b71e:	fb05 2906 	mla	r9, r5, r6, r2
 801b722:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b726:	9504      	str	r5, [sp, #16]
 801b728:	d53e      	bpl.n	801b7a8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801b72a:	4604      	mov	r4, r0
 801b72c:	9d01      	ldr	r5, [sp, #4]
 801b72e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b732:	4673      	mov	r3, lr
 801b734:	46b6      	mov	lr, r6
 801b736:	4646      	mov	r6, r8
 801b738:	e002      	b.n	801b740 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b73a:	1415      	asrs	r5, r2, #16
 801b73c:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801b740:	2d00      	cmp	r5, #0
 801b742:	4472      	add	r2, lr
 801b744:	db1e      	blt.n	801b784 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801b746:	429d      	cmp	r5, r3
 801b748:	da1c      	bge.n	801b784 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801b74a:	ea5f 4821 	movs.w	r8, r1, asr #16
 801b74e:	d419      	bmi.n	801b784 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801b750:	45b0      	cmp	r8, r6
 801b752:	da17      	bge.n	801b784 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801b754:	9e05      	ldr	r6, [sp, #20]
 801b756:	b21b      	sxth	r3, r3
 801b758:	fb08 6303 	mla	r3, r8, r3, r6
 801b75c:	5d5e      	ldrb	r6, [r3, r5]
 801b75e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b762:	eb0b 0306 	add.w	r3, fp, r6
 801b766:	785d      	ldrb	r5, [r3, #1]
 801b768:	789b      	ldrb	r3, [r3, #2]
 801b76a:	00ed      	lsls	r5, r5, #3
 801b76c:	f405 68fc 	and.w	r8, r5, #2016	@ 0x7e0
 801b770:	4d2d      	ldr	r5, [pc, #180]	@ (801b828 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801b772:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801b776:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801b77a:	ea43 0308 	orr.w	r3, r3, r8
 801b77e:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
 801b782:	8023      	strh	r3, [r4, #0]
 801b784:	3402      	adds	r4, #2
 801b786:	4284      	cmp	r4, r0
 801b788:	4439      	add	r1, r7
 801b78a:	d1d6      	bne.n	801b73a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b78c:	f1ba 0f00 	cmp.w	sl, #0
 801b790:	dc8e      	bgt.n	801b6b0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b792:	b007      	add	sp, #28
 801b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b798:	d087      	beq.n	801b6aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b79a:	1e5d      	subs	r5, r3, #1
 801b79c:	fb05 2906 	mla	r9, r5, r6, r2
 801b7a0:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b7a4:	9504      	str	r5, [sp, #16]
 801b7a6:	d480      	bmi.n	801b6aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b7a8:	454c      	cmp	r4, r9
 801b7aa:	dd35      	ble.n	801b818 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801b7ac:	9d04      	ldr	r5, [sp, #16]
 801b7ae:	fb05 1507 	mla	r5, r5, r7, r1
 801b7b2:	ea5f 4925 	movs.w	r9, r5, asr #16
 801b7b6:	d42f      	bmi.n	801b818 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801b7b8:	9d02      	ldr	r5, [sp, #8]
 801b7ba:	45a9      	cmp	r9, r5
 801b7bc:	da2c      	bge.n	801b818 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	f77f af73 	ble.w	801b6aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b7c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b7c8:	9d05      	ldr	r5, [sp, #20]
 801b7ca:	4699      	mov	r9, r3
 801b7cc:	46a6      	mov	lr, r4
 801b7ce:	e001      	b.n	801b7d4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b7d0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b7d4:	140c      	asrs	r4, r1, #16
 801b7d6:	fb0e 5404 	mla	r4, lr, r4, r5
 801b7da:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b7de:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801b7e2:	4b11      	ldr	r3, [pc, #68]	@ (801b828 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801b7e4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b7e8:	eb0b 040e 	add.w	r4, fp, lr
 801b7ec:	f894 8001 	ldrb.w	r8, [r4, #1]
 801b7f0:	78a4      	ldrb	r4, [r4, #2]
 801b7f2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801b7f6:	f81b e00e 	ldrb.w	lr, [fp, lr]
 801b7fa:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801b7fe:	ea03 2404 	and.w	r4, r3, r4, lsl #8
 801b802:	ea44 0408 	orr.w	r4, r4, r8
 801b806:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
 801b80a:	f820 4b02 	strh.w	r4, [r0], #2
 801b80e:	4548      	cmp	r0, r9
 801b810:	4439      	add	r1, r7
 801b812:	4432      	add	r2, r6
 801b814:	d1dc      	bne.n	801b7d0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b816:	e748      	b.n	801b6aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b818:	2b00      	cmp	r3, #0
 801b81a:	f77f af46 	ble.w	801b6aa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b81e:	1415      	asrs	r5, r2, #16
 801b820:	4604      	mov	r4, r0
 801b822:	9501      	str	r5, [sp, #4]
 801b824:	e783      	b.n	801b72e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801b826:	bf00      	nop
 801b828:	fffff800 	.word	0xfffff800

0801b82c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b82c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b834:	b087      	sub	sp, #28
 801b836:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801b83a:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	@ 0x54
 801b83e:	e9dd 0b17 	ldrd	r0, fp, [sp, #92]	@ 0x5c
 801b842:	6854      	ldr	r4, [r2, #4]
 801b844:	f89d 5064 	ldrb.w	r5, [sp, #100]	@ 0x64
 801b848:	fb04 1100 	mla	r1, r4, r0, r1
 801b84c:	e9dd 9a13 	ldrd	r9, sl, [sp, #76]	@ 0x4c
 801b850:	6810      	ldr	r0, [r2, #0]
 801b852:	e9db 2400 	ldrd	r2, r4, [fp]
 801b856:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 801b85a:	1d21      	adds	r1, r4, #4
 801b85c:	9505      	str	r5, [sp, #20]
 801b85e:	9102      	str	r1, [sp, #8]
 801b860:	9201      	str	r2, [sp, #4]
 801b862:	e9dd 7211 	ldrd	r7, r2, [sp, #68]	@ 0x44
 801b866:	9903      	ldr	r1, [sp, #12]
 801b868:	2900      	cmp	r1, #0
 801b86a:	dc03      	bgt.n	801b874 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b86c:	9904      	ldr	r1, [sp, #16]
 801b86e:	2900      	cmp	r1, #0
 801b870:	f340 80b6 	ble.w	801b9e0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b874:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	f507 4700 	add.w	r7, r7, #32768	@ 0x8000
 801b87e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b882:	b221      	sxth	r1, r4
 801b884:	b235      	sxth	r5, r6
 801b886:	f340 80ae 	ble.w	801b9e6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801b88a:	1438      	asrs	r0, r7, #16
 801b88c:	d406      	bmi.n	801b89c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b88e:	4288      	cmp	r0, r1
 801b890:	da04      	bge.n	801b89c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b892:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801b896:	d401      	bmi.n	801b89c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b898:	45ac      	cmp	ip, r5
 801b89a:	db3c      	blt.n	801b916 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801b89c:	3b01      	subs	r3, #1
 801b89e:	444f      	add	r7, r9
 801b8a0:	4452      	add	r2, sl
 801b8a2:	f10e 0e02 	add.w	lr, lr, #2
 801b8a6:	d1f0      	bne.n	801b88a <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b8a8:	9b03      	ldr	r3, [sp, #12]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	f340 8098 	ble.w	801b9e0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b8b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8b8:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801b8bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8c0:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801b8c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8c8:	ee76 6a62 	vsub.f32	s13, s12, s5
 801b8cc:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801b8d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8d4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b8d8:	ee16 2a90 	vmov	r2, s13
 801b8dc:	3b01      	subs	r3, #1
 801b8de:	9303      	str	r3, [sp, #12]
 801b8e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b8e2:	9904      	ldr	r1, [sp, #16]
 801b8e4:	fb92 f9f3 	sdiv	r9, r2, r3
 801b8e8:	ee17 2a10 	vmov	r2, s14
 801b8ec:	eeb0 7a43 	vmov.f32	s14, s6
 801b8f0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b8f4:	fb92 faf3 	sdiv	sl, r2, r3
 801b8f8:	ee17 2a10 	vmov	r2, s14
 801b8fc:	eeb0 7a62 	vmov.f32	s14, s5
 801b900:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801b904:	eeb0 3a67 	vmov.f32	s6, s15
 801b908:	ee17 7a10 	vmov	r7, s14
 801b90c:	eef0 2a46 	vmov.f32	s5, s12
 801b910:	bf08      	it	eq
 801b912:	460b      	moveq	r3, r1
 801b914:	e7a7      	b.n	801b866 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b916:	f103 38ff 	add.w	r8, r3, #4294967295
 801b91a:	fb08 7c09 	mla	ip, r8, r9, r7
 801b91e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b922:	d56a      	bpl.n	801b9fa <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 801b924:	4675      	mov	r5, lr
 801b926:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801b92a:	e002      	b.n	801b932 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801b92c:	1438      	asrs	r0, r7, #16
 801b92e:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801b932:	2800      	cmp	r0, #0
 801b934:	444f      	add	r7, r9
 801b936:	db4b      	blt.n	801b9d0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b938:	42a0      	cmp	r0, r4
 801b93a:	da49      	bge.n	801b9d0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b93c:	1413      	asrs	r3, r2, #16
 801b93e:	d447      	bmi.n	801b9d0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b940:	42b3      	cmp	r3, r6
 801b942:	b224      	sxth	r4, r4
 801b944:	da44      	bge.n	801b9d0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b946:	9901      	ldr	r1, [sp, #4]
 801b948:	fb03 1404 	mla	r4, r3, r4, r1
 801b94c:	9902      	ldr	r1, [sp, #8]
 801b94e:	5c23      	ldrb	r3, [r4, r0]
 801b950:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b954:	0e0b      	lsrs	r3, r1, #24
 801b956:	d03b      	beq.n	801b9d0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b958:	9805      	ldr	r0, [sp, #20]
 801b95a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 801b95e:	fb00 f003 	mul.w	r0, r0, r3
 801b962:	1c43      	adds	r3, r0, #1
 801b964:	eb03 2320 	add.w	r3, r3, r0, asr #8
 801b968:	121b      	asrs	r3, r3, #8
 801b96a:	43d8      	mvns	r0, r3
 801b96c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801b970:	b29b      	uxth	r3, r3
 801b972:	b2c9      	uxtb	r1, r1
 801b974:	882e      	ldrh	r6, [r5, #0]
 801b976:	fb1c fc03 	smulbb	ip, ip, r3
 801b97a:	fb18 f803 	smulbb	r8, r8, r3
 801b97e:	fb11 f303 	smulbb	r3, r1, r3
 801b982:	10f4      	asrs	r4, r6, #3
 801b984:	1231      	asrs	r1, r6, #8
 801b986:	00f6      	lsls	r6, r6, #3
 801b988:	b2c0      	uxtb	r0, r0
 801b98a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801b98e:	b2f6      	uxtb	r6, r6
 801b990:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801b994:	fb01 8800 	mla	r8, r1, r0, r8
 801b998:	fb04 c400 	mla	r4, r4, r0, ip
 801b99c:	fb06 3100 	mla	r1, r6, r0, r3
 801b9a0:	fa1f fc88 	uxth.w	ip, r8
 801b9a4:	b289      	uxth	r1, r1
 801b9a6:	b2a4      	uxth	r4, r4
 801b9a8:	1c4e      	adds	r6, r1, #1
 801b9aa:	1c60      	adds	r0, r4, #1
 801b9ac:	f10c 0301 	add.w	r3, ip, #1
 801b9b0:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801b9b4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801b9b8:	eb00 2114 	add.w	r1, r0, r4, lsr #8
 801b9bc:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801b9c0:	f3c6 20c4 	ubfx	r0, r6, #11, #5
 801b9c4:	0949      	lsrs	r1, r1, #5
 801b9c6:	4303      	orrs	r3, r0
 801b9c8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801b9cc:	430b      	orrs	r3, r1
 801b9ce:	802b      	strh	r3, [r5, #0]
 801b9d0:	3502      	adds	r5, #2
 801b9d2:	4575      	cmp	r5, lr
 801b9d4:	4452      	add	r2, sl
 801b9d6:	d1a9      	bne.n	801b92c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801b9d8:	9b03      	ldr	r3, [sp, #12]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	f73f af68 	bgt.w	801b8b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801b9e0:	b007      	add	sp, #28
 801b9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9e6:	f43f af5f 	beq.w	801b8a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b9ea:	f103 38ff 	add.w	r8, r3, #4294967295
 801b9ee:	fb08 7c09 	mla	ip, r8, r9, r7
 801b9f2:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b9f6:	f53f af57 	bmi.w	801b8a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b9fa:	4561      	cmp	r1, ip
 801b9fc:	dd5c      	ble.n	801bab8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801b9fe:	fb08 280a 	mla	r8, r8, sl, r2
 801ba02:	ea5f 4828 	movs.w	r8, r8, asr #16
 801ba06:	d457      	bmi.n	801bab8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ba08:	45a8      	cmp	r8, r5
 801ba0a:	da55      	bge.n	801bab8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	f77f af4b 	ble.w	801b8a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ba12:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801ba16:	e001      	b.n	801ba1c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ba18:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 801ba1c:	9801      	ldr	r0, [sp, #4]
 801ba1e:	1413      	asrs	r3, r2, #16
 801ba20:	fb01 0303 	mla	r3, r1, r3, r0
 801ba24:	1439      	asrs	r1, r7, #16
 801ba26:	5c5b      	ldrb	r3, [r3, r1]
 801ba28:	9902      	ldr	r1, [sp, #8]
 801ba2a:	444f      	add	r7, r9
 801ba2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ba30:	4452      	add	r2, sl
 801ba32:	0e18      	lsrs	r0, r3, #24
 801ba34:	d03b      	beq.n	801baae <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801ba36:	9905      	ldr	r1, [sp, #20]
 801ba38:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801ba3c:	fb01 f100 	mul.w	r1, r1, r0
 801ba40:	1c48      	adds	r0, r1, #1
 801ba42:	eb00 2021 	add.w	r0, r0, r1, asr #8
 801ba46:	1200      	asrs	r0, r0, #8
 801ba48:	43c1      	mvns	r1, r0
 801ba4a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801ba4e:	b280      	uxth	r0, r0
 801ba50:	b2db      	uxtb	r3, r3
 801ba52:	f8be 5000 	ldrh.w	r5, [lr]
 801ba56:	fb16 f600 	smulbb	r6, r6, r0
 801ba5a:	fb1c fc00 	smulbb	ip, ip, r0
 801ba5e:	fb13 f300 	smulbb	r3, r3, r0
 801ba62:	122c      	asrs	r4, r5, #8
 801ba64:	10e8      	asrs	r0, r5, #3
 801ba66:	00ed      	lsls	r5, r5, #3
 801ba68:	b2c9      	uxtb	r1, r1
 801ba6a:	b2ed      	uxtb	r5, r5
 801ba6c:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801ba70:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801ba74:	fb00 6001 	mla	r0, r0, r1, r6
 801ba78:	fb05 3301 	mla	r3, r5, r1, r3
 801ba7c:	fb04 c401 	mla	r4, r4, r1, ip
 801ba80:	b280      	uxth	r0, r0
 801ba82:	b2a4      	uxth	r4, r4
 801ba84:	b29b      	uxth	r3, r3
 801ba86:	1c65      	adds	r5, r4, #1
 801ba88:	1c5e      	adds	r6, r3, #1
 801ba8a:	1c41      	adds	r1, r0, #1
 801ba8c:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801ba90:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ba94:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801ba98:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801ba9c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801baa0:	0949      	lsrs	r1, r1, #5
 801baa2:	431c      	orrs	r4, r3
 801baa4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801baa8:	430c      	orrs	r4, r1
 801baaa:	f8ae 4000 	strh.w	r4, [lr]
 801baae:	f10e 0e02 	add.w	lr, lr, #2
 801bab2:	45c6      	cmp	lr, r8
 801bab4:	d1b0      	bne.n	801ba18 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801bab6:	e6f7      	b.n	801b8a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bab8:	2b00      	cmp	r3, #0
 801baba:	f77f aef5 	ble.w	801b8a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801babe:	4675      	mov	r5, lr
 801bac0:	1438      	asrs	r0, r7, #16
 801bac2:	e730      	b.n	801b926 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>

0801bac4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bac4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bacc:	b085      	sub	sp, #20
 801bace:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801bad2:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	@ 0x4c
 801bad6:	e9dd 0b15 	ldrd	r0, fp, [sp, #84]	@ 0x54
 801bada:	6854      	ldr	r4, [r2, #4]
 801badc:	e9dd 9a11 	ldrd	r9, sl, [sp, #68]	@ 0x44
 801bae0:	fb04 1000 	mla	r0, r4, r0, r1
 801bae4:	6814      	ldr	r4, [r2, #0]
 801bae6:	e9db 2500 	ldrd	r2, r5, [fp]
 801baea:	eb04 0e40 	add.w	lr, r4, r0, lsl #1
 801baee:	1d28      	adds	r0, r5, #4
 801baf0:	9001      	str	r0, [sp, #4]
 801baf2:	9200      	str	r2, [sp, #0]
 801baf4:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	@ 0x3c
 801baf8:	9802      	ldr	r0, [sp, #8]
 801bafa:	2800      	cmp	r0, #0
 801bafc:	dc03      	bgt.n	801bb06 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801bafe:	9803      	ldr	r0, [sp, #12]
 801bb00:	2800      	cmp	r0, #0
 801bb02:	f340 80b8 	ble.w	801bc76 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801bb06:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801bb10:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bb14:	b228      	sxth	r0, r5
 801bb16:	b237      	sxth	r7, r6
 801bb18:	f340 80b0 	ble.w	801bc7c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801bb1c:	140c      	asrs	r4, r1, #16
 801bb1e:	d406      	bmi.n	801bb2e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bb20:	4284      	cmp	r4, r0
 801bb22:	da04      	bge.n	801bb2e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bb24:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801bb28:	d401      	bmi.n	801bb2e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bb2a:	45bc      	cmp	ip, r7
 801bb2c:	db3c      	blt.n	801bba8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801bb2e:	3b01      	subs	r3, #1
 801bb30:	4449      	add	r1, r9
 801bb32:	4452      	add	r2, sl
 801bb34:	f10e 0e02 	add.w	lr, lr, #2
 801bb38:	d1f0      	bne.n	801bb1c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801bb3a:	9b02      	ldr	r3, [sp, #8]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	f340 809a 	ble.w	801bc76 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801bb42:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb4a:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801bb4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb52:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801bb56:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb5a:	ee76 6a62 	vsub.f32	s13, s12, s5
 801bb5e:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801bb62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bb66:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801bb6a:	ee16 2a90 	vmov	r2, s13
 801bb6e:	3b01      	subs	r3, #1
 801bb70:	9302      	str	r3, [sp, #8]
 801bb72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bb74:	9803      	ldr	r0, [sp, #12]
 801bb76:	fb92 f9f3 	sdiv	r9, r2, r3
 801bb7a:	ee17 2a10 	vmov	r2, s14
 801bb7e:	eeb0 7a43 	vmov.f32	s14, s6
 801bb82:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801bb86:	fb92 faf3 	sdiv	sl, r2, r3
 801bb8a:	ee17 2a10 	vmov	r2, s14
 801bb8e:	eeb0 7a62 	vmov.f32	s14, s5
 801bb92:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801bb96:	eeb0 3a67 	vmov.f32	s6, s15
 801bb9a:	ee17 1a10 	vmov	r1, s14
 801bb9e:	eef0 2a46 	vmov.f32	s5, s12
 801bba2:	bf08      	it	eq
 801bba4:	4603      	moveq	r3, r0
 801bba6:	e7a7      	b.n	801baf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801bba8:	f103 38ff 	add.w	r8, r3, #4294967295
 801bbac:	fb08 1c09 	mla	ip, r8, r9, r1
 801bbb0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801bbb4:	d56c      	bpl.n	801bc90 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 801bbb6:	4677      	mov	r7, lr
 801bbb8:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801bbbc:	e002      	b.n	801bbc4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801bbbe:	140c      	asrs	r4, r1, #16
 801bbc0:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801bbc4:	2c00      	cmp	r4, #0
 801bbc6:	db4d      	blt.n	801bc64 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801bbc8:	42ac      	cmp	r4, r5
 801bbca:	da4b      	bge.n	801bc64 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801bbcc:	1413      	asrs	r3, r2, #16
 801bbce:	d449      	bmi.n	801bc64 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801bbd0:	42b3      	cmp	r3, r6
 801bbd2:	b22d      	sxth	r5, r5
 801bbd4:	da46      	bge.n	801bc64 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801bbd6:	9800      	ldr	r0, [sp, #0]
 801bbd8:	fb03 0505 	mla	r5, r3, r5, r0
 801bbdc:	9801      	ldr	r0, [sp, #4]
 801bbde:	5d2b      	ldrb	r3, [r5, r4]
 801bbe0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bbe4:	0e18      	lsrs	r0, r3, #24
 801bbe6:	28ff      	cmp	r0, #255	@ 0xff
 801bbe8:	f000 80c0 	beq.w	801bd6c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801bbec:	b2c4      	uxtb	r4, r0
 801bbee:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801bbf2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801bbf6:	b2a5      	uxth	r5, r4
 801bbf8:	b2db      	uxtb	r3, r3
 801bbfa:	b398      	cbz	r0, 801bc64 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801bbfc:	43e4      	mvns	r4, r4
 801bbfe:	f8b7 8000 	ldrh.w	r8, [r7]
 801bc02:	fb16 f605 	smulbb	r6, r6, r5
 801bc06:	fb1c fc05 	smulbb	ip, ip, r5
 801bc0a:	fb13 f505 	smulbb	r5, r3, r5
 801bc0e:	ea4f 2028 	mov.w	r0, r8, asr #8
 801bc12:	b2e3      	uxtb	r3, r4
 801bc14:	ea4f 04e8 	mov.w	r4, r8, asr #3
 801bc18:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801bc1c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801bc20:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801bc24:	fa5f f888 	uxtb.w	r8, r8
 801bc28:	fb04 6403 	mla	r4, r4, r3, r6
 801bc2c:	fb00 cc03 	mla	ip, r0, r3, ip
 801bc30:	fb08 5303 	mla	r3, r8, r3, r5
 801bc34:	fa1f fc8c 	uxth.w	ip, ip
 801bc38:	b298      	uxth	r0, r3
 801bc3a:	b2a5      	uxth	r5, r4
 801bc3c:	f10c 0301 	add.w	r3, ip, #1
 801bc40:	1c44      	adds	r4, r0, #1
 801bc42:	1c6e      	adds	r6, r5, #1
 801bc44:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801bc48:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801bc4c:	eb06 2015 	add.w	r0, r6, r5, lsr #8
 801bc50:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801bc54:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801bc58:	0940      	lsrs	r0, r0, #5
 801bc5a:	4323      	orrs	r3, r4
 801bc5c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801bc60:	4303      	orrs	r3, r0
 801bc62:	803b      	strh	r3, [r7, #0]
 801bc64:	3702      	adds	r7, #2
 801bc66:	4577      	cmp	r7, lr
 801bc68:	4449      	add	r1, r9
 801bc6a:	4452      	add	r2, sl
 801bc6c:	d1a7      	bne.n	801bbbe <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801bc6e:	9b02      	ldr	r3, [sp, #8]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	f73f af66 	bgt.w	801bb42 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bc76:	b005      	add	sp, #20
 801bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc7c:	f43f af5d 	beq.w	801bb3a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc80:	f103 38ff 	add.w	r8, r3, #4294967295
 801bc84:	fb08 1c09 	mla	ip, r8, r9, r1
 801bc88:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801bc8c:	f53f af55 	bmi.w	801bb3a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc90:	4560      	cmp	r0, ip
 801bc92:	dd65      	ble.n	801bd60 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801bc94:	fb08 280a 	mla	r8, r8, sl, r2
 801bc98:	ea5f 4828 	movs.w	r8, r8, asr #16
 801bc9c:	d460      	bmi.n	801bd60 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801bc9e:	45b8      	cmp	r8, r7
 801bca0:	da5e      	bge.n	801bd60 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	f77f af49 	ble.w	801bb3a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bca8:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801bcac:	e03f      	b.n	801bd2e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801bcae:	b2f0      	uxtb	r0, r6
 801bcb0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801bcb4:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801bcb8:	b284      	uxth	r4, r0
 801bcba:	b2db      	uxtb	r3, r3
 801bcbc:	b376      	cbz	r6, 801bd1c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801bcbe:	43c0      	mvns	r0, r0
 801bcc0:	f8be 6000 	ldrh.w	r6, [lr]
 801bcc4:	fb17 f704 	smulbb	r7, r7, r4
 801bcc8:	fb1c fc04 	smulbb	ip, ip, r4
 801bccc:	fb13 f304 	smulbb	r3, r3, r4
 801bcd0:	1235      	asrs	r5, r6, #8
 801bcd2:	10f4      	asrs	r4, r6, #3
 801bcd4:	00f6      	lsls	r6, r6, #3
 801bcd6:	b2c0      	uxtb	r0, r0
 801bcd8:	b2f6      	uxtb	r6, r6
 801bcda:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801bcde:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801bce2:	fb04 7400 	mla	r4, r4, r0, r7
 801bce6:	fb06 3300 	mla	r3, r6, r0, r3
 801bcea:	fb05 c500 	mla	r5, r5, r0, ip
 801bcee:	b2a4      	uxth	r4, r4
 801bcf0:	b2ad      	uxth	r5, r5
 801bcf2:	b29b      	uxth	r3, r3
 801bcf4:	1c6e      	adds	r6, r5, #1
 801bcf6:	1c5f      	adds	r7, r3, #1
 801bcf8:	1c60      	adds	r0, r4, #1
 801bcfa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801bcfe:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801bd02:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801bd06:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801bd0a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801bd0e:	0940      	lsrs	r0, r0, #5
 801bd10:	432b      	orrs	r3, r5
 801bd12:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801bd16:	4303      	orrs	r3, r0
 801bd18:	f8ae 3000 	strh.w	r3, [lr]
 801bd1c:	f10e 0e02 	add.w	lr, lr, #2
 801bd20:	45c6      	cmp	lr, r8
 801bd22:	4449      	add	r1, r9
 801bd24:	4452      	add	r2, sl
 801bd26:	f43f af08 	beq.w	801bb3a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bd2a:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801bd2e:	9c00      	ldr	r4, [sp, #0]
 801bd30:	1413      	asrs	r3, r2, #16
 801bd32:	fb00 4303 	mla	r3, r0, r3, r4
 801bd36:	1408      	asrs	r0, r1, #16
 801bd38:	5c1b      	ldrb	r3, [r3, r0]
 801bd3a:	9801      	ldr	r0, [sp, #4]
 801bd3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801bd40:	0e1e      	lsrs	r6, r3, #24
 801bd42:	2eff      	cmp	r6, #255	@ 0xff
 801bd44:	d1b3      	bne.n	801bcae <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bd46:	0958      	lsrs	r0, r3, #5
 801bd48:	f400 64fc 	and.w	r4, r0, #2016	@ 0x7e0
 801bd4c:	480d      	ldr	r0, [pc, #52]	@ (801bd84 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801bd4e:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801bd52:	4320      	orrs	r0, r4
 801bd54:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801bd58:	4303      	orrs	r3, r0
 801bd5a:	f8ae 3000 	strh.w	r3, [lr]
 801bd5e:	e7dd      	b.n	801bd1c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	f77f aeea 	ble.w	801bb3a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bd66:	4677      	mov	r7, lr
 801bd68:	140c      	asrs	r4, r1, #16
 801bd6a:	e725      	b.n	801bbb8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801bd6c:	0958      	lsrs	r0, r3, #5
 801bd6e:	f400 64fc 	and.w	r4, r0, #2016	@ 0x7e0
 801bd72:	4804      	ldr	r0, [pc, #16]	@ (801bd84 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801bd74:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801bd78:	4320      	orrs	r0, r4
 801bd7a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801bd7e:	4303      	orrs	r3, r0
 801bd80:	803b      	strh	r3, [r7, #0]
 801bd82:	e76f      	b.n	801bc64 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801bd84:	fffff800 	.word	0xfffff800

0801bd88 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd8c:	b089      	sub	sp, #36	@ 0x24
 801bd8e:	f89d 506c 	ldrb.w	r5, [sp, #108]	@ 0x6c
 801bd92:	9104      	str	r1, [sp, #16]
 801bd94:	ea6f 0c05 	mvn.w	ip, r5
 801bd98:	e9dd 4117 	ldrd	r4, r1, [sp, #92]	@ 0x5c
 801bd9c:	e9dd 6715 	ldrd	r6, r7, [sp, #84]	@ 0x54
 801bda0:	6860      	ldr	r0, [r4, #4]
 801bda2:	9205      	str	r2, [sp, #20]
 801bda4:	e9dd 2b19 	ldrd	r2, fp, [sp, #100]	@ 0x64
 801bda8:	fb00 1102 	mla	r1, r0, r2, r1
 801bdac:	6824      	ldr	r4, [r4, #0]
 801bdae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bdb2:	4421      	add	r1, r4
 801bdb4:	f8db 4004 	ldr.w	r4, [fp, #4]
 801bdb8:	f8db 2000 	ldr.w	r2, [fp]
 801bdbc:	3404      	adds	r4, #4
 801bdbe:	fa5f fc8c 	uxtb.w	ip, ip
 801bdc2:	fa1f f985 	uxth.w	r9, r5
 801bdc6:	9407      	str	r4, [sp, #28]
 801bdc8:	9202      	str	r2, [sp, #8]
 801bdca:	e9dd 2013 	ldrd	r2, r0, [sp, #76]	@ 0x4c
 801bdce:	9c04      	ldr	r4, [sp, #16]
 801bdd0:	2c00      	cmp	r4, #0
 801bdd2:	dc03      	bgt.n	801bddc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801bdd4:	9c05      	ldr	r4, [sp, #20]
 801bdd6:	2c00      	cmp	r4, #0
 801bdd8:	f340 80b1 	ble.w	801bf3e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801bddc:	e9db e802 	ldrd	lr, r8, [fp, #8]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	fa0f f588 	sxth.w	r5, r8
 801bde6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801bdea:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 801bdee:	fa0f f48e 	sxth.w	r4, lr
 801bdf2:	9503      	str	r5, [sp, #12]
 801bdf4:	f340 80a6 	ble.w	801bf44 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801bdf8:	46f2      	mov	sl, lr
 801bdfa:	9401      	str	r4, [sp, #4]
 801bdfc:	1415      	asrs	r5, r2, #16
 801bdfe:	d408      	bmi.n	801be12 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801be00:	9c01      	ldr	r4, [sp, #4]
 801be02:	42a5      	cmp	r5, r4
 801be04:	da05      	bge.n	801be12 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801be06:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801be0a:	d402      	bmi.n	801be12 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801be0c:	9c03      	ldr	r4, [sp, #12]
 801be0e:	45a6      	cmp	lr, r4
 801be10:	db3e      	blt.n	801be90 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801be12:	3b01      	subs	r3, #1
 801be14:	4432      	add	r2, r6
 801be16:	4438      	add	r0, r7
 801be18:	f101 0103 	add.w	r1, r1, #3
 801be1c:	d1ee      	bne.n	801bdfc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801be1e:	9b04      	ldr	r3, [sp, #16]
 801be20:	2b00      	cmp	r3, #0
 801be22:	f340 808c 	ble.w	801bf3e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801be26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801be2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801be36:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be3a:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801be3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be42:	ee76 6a62 	vsub.f32	s13, s12, s5
 801be46:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801be4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be4e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801be52:	ee16 2a90 	vmov	r2, s13
 801be56:	3b01      	subs	r3, #1
 801be58:	9304      	str	r3, [sp, #16]
 801be5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801be5c:	9c05      	ldr	r4, [sp, #20]
 801be5e:	fb92 f6f3 	sdiv	r6, r2, r3
 801be62:	ee17 2a10 	vmov	r2, s14
 801be66:	eeb0 7a43 	vmov.f32	s14, s6
 801be6a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801be6e:	ee17 0a10 	vmov	r0, s14
 801be72:	eeb0 7a62 	vmov.f32	s14, s5
 801be76:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801be7a:	fb92 f7f3 	sdiv	r7, r2, r3
 801be7e:	eeb0 3a67 	vmov.f32	s6, s15
 801be82:	ee17 2a10 	vmov	r2, s14
 801be86:	eef0 2a46 	vmov.f32	s5, s12
 801be8a:	bf08      	it	eq
 801be8c:	4623      	moveq	r3, r4
 801be8e:	e79e      	b.n	801bdce <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801be90:	9506      	str	r5, [sp, #24]
 801be92:	1e5d      	subs	r5, r3, #1
 801be94:	46d6      	mov	lr, sl
 801be96:	fb05 2a06 	mla	sl, r5, r6, r2
 801be9a:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801be9e:	9c01      	ldr	r4, [sp, #4]
 801bea0:	9501      	str	r5, [sp, #4]
 801bea2:	d559      	bpl.n	801bf58 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801bea4:	460c      	mov	r4, r1
 801bea6:	9d06      	ldr	r5, [sp, #24]
 801bea8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801beac:	4419      	add	r1, r3
 801beae:	4673      	mov	r3, lr
 801beb0:	46b6      	mov	lr, r6
 801beb2:	4646      	mov	r6, r8
 801beb4:	e002      	b.n	801bebc <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801beb6:	1415      	asrs	r5, r2, #16
 801beb8:	e9db 3602 	ldrd	r3, r6, [fp, #8]
 801bebc:	2d00      	cmp	r5, #0
 801bebe:	4472      	add	r2, lr
 801bec0:	db35      	blt.n	801bf2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bec2:	429d      	cmp	r5, r3
 801bec4:	da33      	bge.n	801bf2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bec6:	ea5f 4820 	movs.w	r8, r0, asr #16
 801beca:	d430      	bmi.n	801bf2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801becc:	45b0      	cmp	r8, r6
 801bece:	b21b      	sxth	r3, r3
 801bed0:	da2d      	bge.n	801bf2e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bed2:	9e02      	ldr	r6, [sp, #8]
 801bed4:	fb08 6303 	mla	r3, r8, r3, r6
 801bed8:	7826      	ldrb	r6, [r4, #0]
 801beda:	5d5b      	ldrb	r3, [r3, r5]
 801bedc:	fb16 f80c 	smulbb	r8, r6, ip
 801bee0:	9d07      	ldr	r5, [sp, #28]
 801bee2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bee6:	5cee      	ldrb	r6, [r5, r3]
 801bee8:	442b      	add	r3, r5
 801beea:	fb06 8609 	mla	r6, r6, r9, r8
 801beee:	b2b6      	uxth	r6, r6
 801bef0:	7865      	ldrb	r5, [r4, #1]
 801bef2:	f106 0801 	add.w	r8, r6, #1
 801bef6:	eb08 2616 	add.w	r6, r8, r6, lsr #8
 801befa:	1236      	asrs	r6, r6, #8
 801befc:	fb15 f80c 	smulbb	r8, r5, ip
 801bf00:	7026      	strb	r6, [r4, #0]
 801bf02:	785d      	ldrb	r5, [r3, #1]
 801bf04:	78a6      	ldrb	r6, [r4, #2]
 801bf06:	fb05 8509 	mla	r5, r5, r9, r8
 801bf0a:	b2ad      	uxth	r5, r5
 801bf0c:	f105 0801 	add.w	r8, r5, #1
 801bf10:	eb08 2515 	add.w	r5, r8, r5, lsr #8
 801bf14:	122d      	asrs	r5, r5, #8
 801bf16:	fb16 f60c 	smulbb	r6, r6, ip
 801bf1a:	7065      	strb	r5, [r4, #1]
 801bf1c:	789b      	ldrb	r3, [r3, #2]
 801bf1e:	fb03 6309 	mla	r3, r3, r9, r6
 801bf22:	b29b      	uxth	r3, r3
 801bf24:	1c5d      	adds	r5, r3, #1
 801bf26:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801bf2a:	121b      	asrs	r3, r3, #8
 801bf2c:	70a3      	strb	r3, [r4, #2]
 801bf2e:	3403      	adds	r4, #3
 801bf30:	428c      	cmp	r4, r1
 801bf32:	4438      	add	r0, r7
 801bf34:	d1bf      	bne.n	801beb6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801bf36:	9b04      	ldr	r3, [sp, #16]
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	f73f af74 	bgt.w	801be26 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bf3e:	b009      	add	sp, #36	@ 0x24
 801bf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf44:	f43f af6b 	beq.w	801be1e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf48:	1e5d      	subs	r5, r3, #1
 801bf4a:	fb05 2a06 	mla	sl, r5, r6, r2
 801bf4e:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801bf52:	9501      	str	r5, [sp, #4]
 801bf54:	f53f af63 	bmi.w	801be1e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf58:	4554      	cmp	r4, sl
 801bf5a:	dd54      	ble.n	801c006 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bf5c:	9d01      	ldr	r5, [sp, #4]
 801bf5e:	fb05 0507 	mla	r5, r5, r7, r0
 801bf62:	ea5f 4a25 	movs.w	sl, r5, asr #16
 801bf66:	d44e      	bmi.n	801c006 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bf68:	9d03      	ldr	r5, [sp, #12]
 801bf6a:	45aa      	cmp	sl, r5
 801bf6c:	da4b      	bge.n	801c006 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	f77f af55 	ble.w	801be1e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf78:	eb01 0e03 	add.w	lr, r1, r3
 801bf7c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801bf80:	3103      	adds	r1, #3
 801bf82:	e002      	b.n	801bf8a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801bf84:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801bf88:	3103      	adds	r1, #3
 801bf8a:	9d02      	ldr	r5, [sp, #8]
 801bf8c:	1403      	asrs	r3, r0, #16
 801bf8e:	fb04 5303 	mla	r3, r4, r3, r5
 801bf92:	1415      	asrs	r5, r2, #16
 801bf94:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 801bf98:	5d5b      	ldrb	r3, [r3, r5]
 801bf9a:	fb14 f40c 	smulbb	r4, r4, ip
 801bf9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bfa2:	f818 5003 	ldrb.w	r5, [r8, r3]
 801bfa6:	4443      	add	r3, r8
 801bfa8:	fb05 4509 	mla	r5, r5, r9, r4
 801bfac:	b2ad      	uxth	r5, r5
 801bfae:	f105 0a01 	add.w	sl, r5, #1
 801bfb2:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 801bfb6:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801bfba:	122d      	asrs	r5, r5, #8
 801bfbc:	fb14 f40c 	smulbb	r4, r4, ip
 801bfc0:	f801 5c03 	strb.w	r5, [r1, #-3]
 801bfc4:	785d      	ldrb	r5, [r3, #1]
 801bfc6:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 801bfca:	fb05 4409 	mla	r4, r5, r9, r4
 801bfce:	b2a4      	uxth	r4, r4
 801bfd0:	1c65      	adds	r5, r4, #1
 801bfd2:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801bfd6:	1224      	asrs	r4, r4, #8
 801bfd8:	fb1a fa0c 	smulbb	sl, sl, ip
 801bfdc:	f801 4c02 	strb.w	r4, [r1, #-2]
 801bfe0:	789b      	ldrb	r3, [r3, #2]
 801bfe2:	458e      	cmp	lr, r1
 801bfe4:	fb03 aa09 	mla	sl, r3, r9, sl
 801bfe8:	fa1f fa8a 	uxth.w	sl, sl
 801bfec:	f10a 0301 	add.w	r3, sl, #1
 801bff0:	eb03 2a1a 	add.w	sl, r3, sl, lsr #8
 801bff4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bff8:	4438      	add	r0, r7
 801bffa:	4432      	add	r2, r6
 801bffc:	f801 ac01 	strb.w	sl, [r1, #-1]
 801c000:	d1c0      	bne.n	801bf84 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c002:	4671      	mov	r1, lr
 801c004:	e70b      	b.n	801be1e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c006:	2b00      	cmp	r3, #0
 801c008:	f77f af09 	ble.w	801be1e <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c00c:	1415      	asrs	r5, r2, #16
 801c00e:	460c      	mov	r4, r1
 801c010:	9506      	str	r5, [sp, #24]
 801c012:	e749      	b.n	801bea8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>

0801c014 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c018:	4689      	mov	r9, r1
 801c01a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c01e:	46c8      	mov	r8, r9
 801c020:	b087      	sub	sp, #28
 801c022:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	@ 0x54
 801c026:	684c      	ldr	r4, [r1, #4]
 801c028:	9203      	str	r2, [sp, #12]
 801c02a:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	@ 0x5c
 801c02e:	fb04 0202 	mla	r2, r4, r2, r0
 801c032:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801c036:	680d      	ldr	r5, [r1, #0]
 801c038:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c03c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801c040:	f8dc 2000 	ldr.w	r2, [ip]
 801c044:	4428      	add	r0, r5
 801c046:	f104 0b04 	add.w	fp, r4, #4
 801c04a:	9205      	str	r2, [sp, #20]
 801c04c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801c050:	f1b8 0f00 	cmp.w	r8, #0
 801c054:	dc03      	bgt.n	801c05e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c056:	9c03      	ldr	r4, [sp, #12]
 801c058:	2c00      	cmp	r4, #0
 801c05a:	f340 808d 	ble.w	801c178 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c05e:	e9dc ea02 	ldrd	lr, sl, [ip, #8]
 801c062:	2b00      	cmp	r3, #0
 801c064:	fa0f f58a 	sxth.w	r5, sl
 801c068:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c06c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801c070:	fa0f f48e 	sxth.w	r4, lr
 801c074:	9502      	str	r5, [sp, #8]
 801c076:	f340 8082 	ble.w	801c17e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c07a:	46f1      	mov	r9, lr
 801c07c:	9401      	str	r4, [sp, #4]
 801c07e:	1415      	asrs	r5, r2, #16
 801c080:	d408      	bmi.n	801c094 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c082:	9c01      	ldr	r4, [sp, #4]
 801c084:	42a5      	cmp	r5, r4
 801c086:	da05      	bge.n	801c094 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c088:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801c08c:	d402      	bmi.n	801c094 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c08e:	9c02      	ldr	r4, [sp, #8]
 801c090:	45a6      	cmp	lr, r4
 801c092:	db3b      	blt.n	801c10c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801c094:	3b01      	subs	r3, #1
 801c096:	4432      	add	r2, r6
 801c098:	4439      	add	r1, r7
 801c09a:	f100 0003 	add.w	r0, r0, #3
 801c09e:	d1ee      	bne.n	801c07e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c0a0:	f1b8 0f00 	cmp.w	r8, #0
 801c0a4:	dd68      	ble.n	801c178 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c0a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c0aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c0ae:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801c0b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c0b6:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801c0ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0be:	ee76 6a62 	vsub.f32	s13, s12, s5
 801c0c2:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801c0c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0ca:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c0ce:	ee16 2a90 	vmov	r2, s13
 801c0d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c0d4:	9c03      	ldr	r4, [sp, #12]
 801c0d6:	fb92 f6f3 	sdiv	r6, r2, r3
 801c0da:	ee17 2a10 	vmov	r2, s14
 801c0de:	eeb0 7a43 	vmov.f32	s14, s6
 801c0e2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c0e6:	ee17 1a10 	vmov	r1, s14
 801c0ea:	eeb0 7a62 	vmov.f32	s14, s5
 801c0ee:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c0f2:	f1b8 0801 	subs.w	r8, r8, #1
 801c0f6:	fb92 f7f3 	sdiv	r7, r2, r3
 801c0fa:	eeb0 3a67 	vmov.f32	s6, s15
 801c0fe:	ee17 2a10 	vmov	r2, s14
 801c102:	eef0 2a46 	vmov.f32	s5, s12
 801c106:	bf08      	it	eq
 801c108:	4623      	moveq	r3, r4
 801c10a:	e7a1      	b.n	801c050 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c10c:	9c01      	ldr	r4, [sp, #4]
 801c10e:	9501      	str	r5, [sp, #4]
 801c110:	1e5d      	subs	r5, r3, #1
 801c112:	46ce      	mov	lr, r9
 801c114:	fb06 2905 	mla	r9, r6, r5, r2
 801c118:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c11c:	9504      	str	r5, [sp, #16]
 801c11e:	d536      	bpl.n	801c18e <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801c120:	4604      	mov	r4, r0
 801c122:	9d01      	ldr	r5, [sp, #4]
 801c124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c128:	4418      	add	r0, r3
 801c12a:	4673      	mov	r3, lr
 801c12c:	46b6      	mov	lr, r6
 801c12e:	4656      	mov	r6, sl
 801c130:	e002      	b.n	801c138 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c132:	1415      	asrs	r5, r2, #16
 801c134:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801c138:	2d00      	cmp	r5, #0
 801c13a:	4472      	add	r2, lr
 801c13c:	db15      	blt.n	801c16a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c13e:	429d      	cmp	r5, r3
 801c140:	da13      	bge.n	801c16a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c142:	ea5f 4921 	movs.w	r9, r1, asr #16
 801c146:	d410      	bmi.n	801c16a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c148:	45b1      	cmp	r9, r6
 801c14a:	da0e      	bge.n	801c16a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c14c:	9e05      	ldr	r6, [sp, #20]
 801c14e:	b21b      	sxth	r3, r3
 801c150:	fb09 6303 	mla	r3, r9, r3, r6
 801c154:	5d5b      	ldrb	r3, [r3, r5]
 801c156:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c15a:	f81b 5003 	ldrb.w	r5, [fp, r3]
 801c15e:	445b      	add	r3, fp
 801c160:	7025      	strb	r5, [r4, #0]
 801c162:	785d      	ldrb	r5, [r3, #1]
 801c164:	7065      	strb	r5, [r4, #1]
 801c166:	789b      	ldrb	r3, [r3, #2]
 801c168:	70a3      	strb	r3, [r4, #2]
 801c16a:	3403      	adds	r4, #3
 801c16c:	4284      	cmp	r4, r0
 801c16e:	4439      	add	r1, r7
 801c170:	d1df      	bne.n	801c132 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c172:	f1b8 0f00 	cmp.w	r8, #0
 801c176:	dc96      	bgt.n	801c0a6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c178:	b007      	add	sp, #28
 801c17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c17e:	d08f      	beq.n	801c0a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c180:	1e5d      	subs	r5, r3, #1
 801c182:	fb06 2905 	mla	r9, r6, r5, r2
 801c186:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c18a:	9504      	str	r5, [sp, #16]
 801c18c:	d488      	bmi.n	801c0a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c18e:	45a1      	cmp	r9, r4
 801c190:	da2d      	bge.n	801c1ee <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801c192:	9d04      	ldr	r5, [sp, #16]
 801c194:	fb07 1505 	mla	r5, r7, r5, r1
 801c198:	ea5f 4925 	movs.w	r9, r5, asr #16
 801c19c:	d427      	bmi.n	801c1ee <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801c19e:	9d02      	ldr	r5, [sp, #8]
 801c1a0:	454d      	cmp	r5, r9
 801c1a2:	dd24      	ble.n	801c1ee <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801c1a4:	2b00      	cmp	r3, #0
 801c1a6:	f77f af7b 	ble.w	801c0a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c1aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1ae:	18c5      	adds	r5, r0, r3
 801c1b0:	f8dd e014 	ldr.w	lr, [sp, #20]
 801c1b4:	3003      	adds	r0, #3
 801c1b6:	e002      	b.n	801c1be <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c1b8:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801c1bc:	3003      	adds	r0, #3
 801c1be:	140b      	asrs	r3, r1, #16
 801c1c0:	fb04 e303 	mla	r3, r4, r3, lr
 801c1c4:	1414      	asrs	r4, r2, #16
 801c1c6:	5d1b      	ldrb	r3, [r3, r4]
 801c1c8:	4285      	cmp	r5, r0
 801c1ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1ce:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801c1d2:	445b      	add	r3, fp
 801c1d4:	f800 4c03 	strb.w	r4, [r0, #-3]
 801c1d8:	785c      	ldrb	r4, [r3, #1]
 801c1da:	4439      	add	r1, r7
 801c1dc:	f800 4c02 	strb.w	r4, [r0, #-2]
 801c1e0:	789b      	ldrb	r3, [r3, #2]
 801c1e2:	4432      	add	r2, r6
 801c1e4:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c1e8:	d1e6      	bne.n	801c1b8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c1ea:	4628      	mov	r0, r5
 801c1ec:	e758      	b.n	801c0a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	f77f af56 	ble.w	801c0a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c1f4:	1415      	asrs	r5, r2, #16
 801c1f6:	4604      	mov	r4, r0
 801c1f8:	9501      	str	r5, [sp, #4]
 801c1fa:	e793      	b.n	801c124 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>

0801c1fc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c200:	b087      	sub	sp, #28
 801c202:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c206:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	@ 0x54
 801c20a:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	@ 0x5c
 801c20e:	684c      	ldr	r4, [r1, #4]
 801c210:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c214:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801c218:	fb04 0202 	mla	r2, r4, r2, r0
 801c21c:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801c220:	f8dc 2000 	ldr.w	r2, [ip]
 801c224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c228:	9201      	str	r2, [sp, #4]
 801c22a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c22e:	6808      	ldr	r0, [r1, #0]
 801c230:	9204      	str	r2, [sp, #16]
 801c232:	1d22      	adds	r2, r4, #4
 801c234:	e9dd e111 	ldrd	lr, r1, [sp, #68]	@ 0x44
 801c238:	9205      	str	r2, [sp, #20]
 801c23a:	4672      	mov	r2, lr
 801c23c:	4428      	add	r0, r5
 801c23e:	9c02      	ldr	r4, [sp, #8]
 801c240:	2c00      	cmp	r4, #0
 801c242:	dc03      	bgt.n	801c24c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c244:	9c03      	ldr	r4, [sp, #12]
 801c246:	2c00      	cmp	r4, #0
 801c248:	f340 80ba 	ble.w	801c3c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801c24c:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801c250:	2b00      	cmp	r3, #0
 801c252:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c256:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801c25a:	fa0f f48e 	sxth.w	r4, lr
 801c25e:	fa0f f988 	sxth.w	r9, r8
 801c262:	f340 80b0 	ble.w	801c3c6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801c266:	1415      	asrs	r5, r2, #16
 801c268:	d406      	bmi.n	801c278 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c26a:	42a5      	cmp	r5, r4
 801c26c:	da04      	bge.n	801c278 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c26e:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801c272:	d401      	bmi.n	801c278 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c274:	45ca      	cmp	sl, r9
 801c276:	db3c      	blt.n	801c2f2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801c278:	3b01      	subs	r3, #1
 801c27a:	4432      	add	r2, r6
 801c27c:	4439      	add	r1, r7
 801c27e:	f100 0003 	add.w	r0, r0, #3
 801c282:	d1f0      	bne.n	801c266 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c284:	9b02      	ldr	r3, [sp, #8]
 801c286:	2b00      	cmp	r3, #0
 801c288:	f340 809a 	ble.w	801c3c0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801c28c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c290:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c294:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801c298:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c29c:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801c2a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c2a4:	ee76 6a62 	vsub.f32	s13, s12, s5
 801c2a8:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801c2ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c2b0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c2b4:	ee16 2a90 	vmov	r2, s13
 801c2b8:	3b01      	subs	r3, #1
 801c2ba:	9302      	str	r3, [sp, #8]
 801c2bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c2be:	9c03      	ldr	r4, [sp, #12]
 801c2c0:	fb92 f6f3 	sdiv	r6, r2, r3
 801c2c4:	ee17 2a10 	vmov	r2, s14
 801c2c8:	eeb0 7a43 	vmov.f32	s14, s6
 801c2cc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c2d0:	ee17 1a10 	vmov	r1, s14
 801c2d4:	eeb0 7a62 	vmov.f32	s14, s5
 801c2d8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c2dc:	fb92 f7f3 	sdiv	r7, r2, r3
 801c2e0:	eeb0 3a67 	vmov.f32	s6, s15
 801c2e4:	ee17 2a10 	vmov	r2, s14
 801c2e8:	eef0 2a46 	vmov.f32	s5, s12
 801c2ec:	bf08      	it	eq
 801c2ee:	4623      	moveq	r3, r4
 801c2f0:	e7a5      	b.n	801c23e <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c2f2:	f103 3bff 	add.w	fp, r3, #4294967295
 801c2f6:	fb0b 2a06 	mla	sl, fp, r6, r2
 801c2fa:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801c2fe:	d56c      	bpl.n	801c3da <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801c300:	4604      	mov	r4, r0
 801c302:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c306:	4418      	add	r0, r3
 801c308:	4673      	mov	r3, lr
 801c30a:	46b6      	mov	lr, r6
 801c30c:	4646      	mov	r6, r8
 801c30e:	e002      	b.n	801c316 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801c310:	1415      	asrs	r5, r2, #16
 801c312:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801c316:	2d00      	cmp	r5, #0
 801c318:	4472      	add	r2, lr
 801c31a:	db49      	blt.n	801c3b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c31c:	429d      	cmp	r5, r3
 801c31e:	da47      	bge.n	801c3b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c320:	ea5f 4821 	movs.w	r8, r1, asr #16
 801c324:	d444      	bmi.n	801c3b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c326:	45b0      	cmp	r8, r6
 801c328:	b21b      	sxth	r3, r3
 801c32a:	da41      	bge.n	801c3b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c32c:	9e01      	ldr	r6, [sp, #4]
 801c32e:	fb08 6303 	mla	r3, r8, r3, r6
 801c332:	5d5b      	ldrb	r3, [r3, r5]
 801c334:	9d05      	ldr	r5, [sp, #20]
 801c336:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c33a:	0e1d      	lsrs	r5, r3, #24
 801c33c:	d038      	beq.n	801c3b0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c33e:	9e04      	ldr	r6, [sp, #16]
 801c340:	fa5f f983 	uxtb.w	r9, r3
 801c344:	fb06 f605 	mul.w	r6, r6, r5
 801c348:	1c75      	adds	r5, r6, #1
 801c34a:	eb05 2526 	add.w	r5, r5, r6, asr #8
 801c34e:	122d      	asrs	r5, r5, #8
 801c350:	43ee      	mvns	r6, r5
 801c352:	b2ad      	uxth	r5, r5
 801c354:	fb19 f905 	smulbb	r9, r9, r5
 801c358:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801c35c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c360:	f894 a000 	ldrb.w	sl, [r4]
 801c364:	fb18 f805 	smulbb	r8, r8, r5
 801c368:	fb13 f305 	smulbb	r3, r3, r5
 801c36c:	b2f5      	uxtb	r5, r6
 801c36e:	fb0a 9605 	mla	r6, sl, r5, r9
 801c372:	f894 b001 	ldrb.w	fp, [r4, #1]
 801c376:	f894 9002 	ldrb.w	r9, [r4, #2]
 801c37a:	fb0b 8805 	mla	r8, fp, r5, r8
 801c37e:	fb09 3305 	mla	r3, r9, r5, r3
 801c382:	fa1f fa86 	uxth.w	sl, r6
 801c386:	fa1f f888 	uxth.w	r8, r8
 801c38a:	b29b      	uxth	r3, r3
 801c38c:	f10a 0601 	add.w	r6, sl, #1
 801c390:	f108 0501 	add.w	r5, r8, #1
 801c394:	f103 0901 	add.w	r9, r3, #1
 801c398:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 801c39c:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801c3a0:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 801c3a4:	1236      	asrs	r6, r6, #8
 801c3a6:	122d      	asrs	r5, r5, #8
 801c3a8:	121b      	asrs	r3, r3, #8
 801c3aa:	7026      	strb	r6, [r4, #0]
 801c3ac:	7065      	strb	r5, [r4, #1]
 801c3ae:	70a3      	strb	r3, [r4, #2]
 801c3b0:	3403      	adds	r4, #3
 801c3b2:	4284      	cmp	r4, r0
 801c3b4:	4439      	add	r1, r7
 801c3b6:	d1ab      	bne.n	801c310 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c3b8:	9b02      	ldr	r3, [sp, #8]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	f73f af66 	bgt.w	801c28c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c3c0:	b007      	add	sp, #28
 801c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c6:	f43f af5d 	beq.w	801c284 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c3ca:	f103 3bff 	add.w	fp, r3, #4294967295
 801c3ce:	fb0b 2a06 	mla	sl, fp, r6, r2
 801c3d2:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801c3d6:	f53f af55 	bmi.w	801c284 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c3da:	4554      	cmp	r4, sl
 801c3dc:	dd64      	ble.n	801c4a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801c3de:	fb0b 1b07 	mla	fp, fp, r7, r1
 801c3e2:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801c3e6:	d45f      	bmi.n	801c4a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801c3e8:	45cb      	cmp	fp, r9
 801c3ea:	da5d      	bge.n	801c4a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	f77f af49 	ble.w	801c284 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c3f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3f6:	eb00 0e03 	add.w	lr, r0, r3
 801c3fa:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c3fe:	3003      	adds	r0, #3
 801c400:	e002      	b.n	801c408 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801c402:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801c406:	3003      	adds	r0, #3
 801c408:	9d01      	ldr	r5, [sp, #4]
 801c40a:	140b      	asrs	r3, r1, #16
 801c40c:	fb04 5303 	mla	r3, r4, r3, r5
 801c410:	1414      	asrs	r4, r2, #16
 801c412:	5d1b      	ldrb	r3, [r3, r4]
 801c414:	4432      	add	r2, r6
 801c416:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801c41a:	4439      	add	r1, r7
 801c41c:	ea5f 6a13 	movs.w	sl, r3, lsr #24
 801c420:	d03e      	beq.n	801c4a0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801c422:	9c04      	ldr	r4, [sp, #16]
 801c424:	fa5f f983 	uxtb.w	r9, r3
 801c428:	fb04 f40a 	mul.w	r4, r4, sl
 801c42c:	f104 0a01 	add.w	sl, r4, #1
 801c430:	eb0a 2a24 	add.w	sl, sl, r4, asr #8
 801c434:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c438:	ea6f 040a 	mvn.w	r4, sl
 801c43c:	fa1f fa8a 	uxth.w	sl, sl
 801c440:	fb19 f90a 	smulbb	r9, r9, sl
 801c444:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801c448:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c44c:	fb15 fb0a 	smulbb	fp, r5, sl
 801c450:	fb13 f30a 	smulbb	r3, r3, sl
 801c454:	f810 ac03 	ldrb.w	sl, [r0, #-3]
 801c458:	b2e4      	uxtb	r4, r4
 801c45a:	fb0a 9904 	mla	r9, sl, r4, r9
 801c45e:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 801c462:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 801c466:	fb05 b504 	mla	r5, r5, r4, fp
 801c46a:	fb0a 3304 	mla	r3, sl, r4, r3
 801c46e:	fa1f f989 	uxth.w	r9, r9
 801c472:	b2ad      	uxth	r5, r5
 801c474:	b29b      	uxth	r3, r3
 801c476:	f109 0b01 	add.w	fp, r9, #1
 801c47a:	f105 0a01 	add.w	sl, r5, #1
 801c47e:	1c5c      	adds	r4, r3, #1
 801c480:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c484:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801c488:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c48c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c490:	122d      	asrs	r5, r5, #8
 801c492:	121b      	asrs	r3, r3, #8
 801c494:	f800 9c03 	strb.w	r9, [r0, #-3]
 801c498:	f800 5c02 	strb.w	r5, [r0, #-2]
 801c49c:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c4a0:	4586      	cmp	lr, r0
 801c4a2:	d1ae      	bne.n	801c402 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c4a4:	4670      	mov	r0, lr
 801c4a6:	e6ed      	b.n	801c284 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	f77f aeeb 	ble.w	801c284 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c4ae:	4604      	mov	r4, r0
 801c4b0:	1415      	asrs	r5, r2, #16
 801c4b2:	e726      	b.n	801c302 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>

0801c4b4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4b4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4bc:	b087      	sub	sp, #28
 801c4be:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801c4c2:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	@ 0x54
 801c4c6:	e9dd 2b17 	ldrd	r2, fp, [sp, #92]	@ 0x5c
 801c4ca:	684c      	ldr	r4, [r1, #4]
 801c4cc:	680d      	ldr	r5, [r1, #0]
 801c4ce:	fb04 0202 	mla	r2, r4, r2, r0
 801c4d2:	e9dd 8913 	ldrd	r8, r9, [sp, #76]	@ 0x4c
 801c4d6:	f8db 4004 	ldr.w	r4, [fp, #4]
 801c4da:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801c4de:	3404      	adds	r4, #4
 801c4e0:	f8db 2000 	ldr.w	r2, [fp]
 801c4e4:	4428      	add	r0, r5
 801c4e6:	9402      	str	r4, [sp, #8]
 801c4e8:	9201      	str	r2, [sp, #4]
 801c4ea:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801c4ee:	9c03      	ldr	r4, [sp, #12]
 801c4f0:	2c00      	cmp	r4, #0
 801c4f2:	dc03      	bgt.n	801c4fc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c4f4:	9c04      	ldr	r4, [sp, #16]
 801c4f6:	2c00      	cmp	r4, #0
 801c4f8:	f340 80b7 	ble.w	801c66a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c4fc:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801c500:	2b00      	cmp	r3, #0
 801c502:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c506:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801c50a:	b234      	sxth	r4, r6
 801c50c:	fa0f fc87 	sxth.w	ip, r7
 801c510:	f340 80ae 	ble.w	801c670 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801c514:	1415      	asrs	r5, r2, #16
 801c516:	d406      	bmi.n	801c526 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c518:	42a5      	cmp	r5, r4
 801c51a:	da04      	bge.n	801c526 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c51c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801c520:	d401      	bmi.n	801c526 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c522:	45e6      	cmp	lr, ip
 801c524:	db3c      	blt.n	801c5a0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801c526:	3b01      	subs	r3, #1
 801c528:	4442      	add	r2, r8
 801c52a:	4449      	add	r1, r9
 801c52c:	f100 0003 	add.w	r0, r0, #3
 801c530:	d1f0      	bne.n	801c514 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c532:	9b03      	ldr	r3, [sp, #12]
 801c534:	2b00      	cmp	r3, #0
 801c536:	f340 8098 	ble.w	801c66a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c53a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c53e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c542:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801c546:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c54a:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801c54e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c552:	ee76 6a62 	vsub.f32	s13, s12, s5
 801c556:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801c55a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c55e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c562:	ee16 2a90 	vmov	r2, s13
 801c566:	3b01      	subs	r3, #1
 801c568:	9303      	str	r3, [sp, #12]
 801c56a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c56c:	9c04      	ldr	r4, [sp, #16]
 801c56e:	fb92 f8f3 	sdiv	r8, r2, r3
 801c572:	ee17 2a10 	vmov	r2, s14
 801c576:	eeb0 7a43 	vmov.f32	s14, s6
 801c57a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c57e:	ee17 1a10 	vmov	r1, s14
 801c582:	eeb0 7a62 	vmov.f32	s14, s5
 801c586:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c58a:	fb92 f9f3 	sdiv	r9, r2, r3
 801c58e:	eeb0 3a67 	vmov.f32	s6, s15
 801c592:	ee17 2a10 	vmov	r2, s14
 801c596:	eef0 2a46 	vmov.f32	s5, s12
 801c59a:	bf08      	it	eq
 801c59c:	4623      	moveq	r3, r4
 801c59e:	e7a6      	b.n	801c4ee <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c5a0:	f103 3aff 	add.w	sl, r3, #4294967295
 801c5a4:	fb0a 2e08 	mla	lr, sl, r8, r2
 801c5a8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c5ac:	d56a      	bpl.n	801c684 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801c5ae:	4604      	mov	r4, r0
 801c5b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5b4:	4418      	add	r0, r3
 801c5b6:	e002      	b.n	801c5be <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801c5b8:	1415      	asrs	r5, r2, #16
 801c5ba:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801c5be:	2d00      	cmp	r5, #0
 801c5c0:	db4a      	blt.n	801c658 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c5c2:	42b5      	cmp	r5, r6
 801c5c4:	da48      	bge.n	801c658 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c5c6:	140b      	asrs	r3, r1, #16
 801c5c8:	d446      	bmi.n	801c658 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c5ca:	42bb      	cmp	r3, r7
 801c5cc:	b236      	sxth	r6, r6
 801c5ce:	da43      	bge.n	801c658 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c5d0:	9f01      	ldr	r7, [sp, #4]
 801c5d2:	fb03 7606 	mla	r6, r3, r6, r7
 801c5d6:	5d73      	ldrb	r3, [r6, r5]
 801c5d8:	9d02      	ldr	r5, [sp, #8]
 801c5da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801c5de:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c5e2:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801c5e6:	f000 80be 	beq.w	801c766 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801c5ea:	b2df      	uxtb	r7, r3
 801c5ec:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801c5f0:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801c5f4:	fa5f f38c 	uxtb.w	r3, ip
 801c5f8:	b29d      	uxth	r5, r3
 801c5fa:	f1bc 0f00 	cmp.w	ip, #0
 801c5fe:	d02b      	beq.n	801c658 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c600:	43db      	mvns	r3, r3
 801c602:	b2db      	uxtb	r3, r3
 801c604:	9305      	str	r3, [sp, #20]
 801c606:	f894 e001 	ldrb.w	lr, [r4, #1]
 801c60a:	fb17 f305 	smulbb	r3, r7, r5
 801c60e:	9f05      	ldr	r7, [sp, #20]
 801c610:	f894 c002 	ldrb.w	ip, [r4, #2]
 801c614:	fb1e fe07 	smulbb	lr, lr, r7
 801c618:	fb1c fc07 	smulbb	ip, ip, r7
 801c61c:	fb06 ee05 	mla	lr, r6, r5, lr
 801c620:	7827      	ldrb	r7, [r4, #0]
 801c622:	9e05      	ldr	r6, [sp, #20]
 801c624:	fb0a c505 	mla	r5, sl, r5, ip
 801c628:	fb07 3706 	mla	r7, r7, r6, r3
 801c62c:	b2ab      	uxth	r3, r5
 801c62e:	b2bf      	uxth	r7, r7
 801c630:	fa1f f68e 	uxth.w	r6, lr
 801c634:	1c7d      	adds	r5, r7, #1
 801c636:	f106 0e01 	add.w	lr, r6, #1
 801c63a:	f103 0c01 	add.w	ip, r3, #1
 801c63e:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801c642:	eb0c 2613 	add.w	r6, ip, r3, lsr #8
 801c646:	eb05 2317 	add.w	r3, r5, r7, lsr #8
 801c64a:	121b      	asrs	r3, r3, #8
 801c64c:	ea4f 272e 	mov.w	r7, lr, asr #8
 801c650:	1235      	asrs	r5, r6, #8
 801c652:	7067      	strb	r7, [r4, #1]
 801c654:	70a5      	strb	r5, [r4, #2]
 801c656:	7023      	strb	r3, [r4, #0]
 801c658:	3403      	adds	r4, #3
 801c65a:	4284      	cmp	r4, r0
 801c65c:	4442      	add	r2, r8
 801c65e:	4449      	add	r1, r9
 801c660:	d1aa      	bne.n	801c5b8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801c662:	9b03      	ldr	r3, [sp, #12]
 801c664:	2b00      	cmp	r3, #0
 801c666:	f73f af68 	bgt.w	801c53a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c66a:	b007      	add	sp, #28
 801c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c670:	f43f af5f 	beq.w	801c532 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c674:	f103 3aff 	add.w	sl, r3, #4294967295
 801c678:	fb0a 2e08 	mla	lr, sl, r8, r2
 801c67c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801c680:	f53f af57 	bmi.w	801c532 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c684:	4574      	cmp	r4, lr
 801c686:	dd68      	ble.n	801c75a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801c688:	fb0a 1a09 	mla	sl, sl, r9, r1
 801c68c:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801c690:	d463      	bmi.n	801c75a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801c692:	45e2      	cmp	sl, ip
 801c694:	da61      	bge.n	801c75a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801c696:	2b00      	cmp	r3, #0
 801c698:	f77f af4b 	ble.w	801c532 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c69c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c6a0:	eb00 0e03 	add.w	lr, r0, r3
 801c6a4:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 801c6a8:	3003      	adds	r0, #3
 801c6aa:	e03b      	b.n	801c724 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801c6ac:	b2fc      	uxtb	r4, r7
 801c6ae:	fa5f fc83 	uxtb.w	ip, r3
 801c6b2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801c6b6:	b2a5      	uxth	r5, r4
 801c6b8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c6bc:	b357      	cbz	r7, 801c714 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801c6be:	43e4      	mvns	r4, r4
 801c6c0:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 801c6c4:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801c6c8:	b2e4      	uxtb	r4, r4
 801c6ca:	fb1c fc05 	smulbb	ip, ip, r5
 801c6ce:	fb18 f804 	smulbb	r8, r8, r4
 801c6d2:	fb1a fa04 	smulbb	sl, sl, r4
 801c6d6:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 801c6da:	fb03 8305 	mla	r3, r3, r5, r8
 801c6de:	fb06 a605 	mla	r6, r6, r5, sl
 801c6e2:	fb07 c404 	mla	r4, r7, r4, ip
 801c6e6:	b2b6      	uxth	r6, r6
 801c6e8:	b2a4      	uxth	r4, r4
 801c6ea:	b29b      	uxth	r3, r3
 801c6ec:	f106 0c01 	add.w	ip, r6, #1
 801c6f0:	f103 0801 	add.w	r8, r3, #1
 801c6f4:	1c65      	adds	r5, r4, #1
 801c6f6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c6fa:	eb08 2313 	add.w	r3, r8, r3, lsr #8
 801c6fe:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801c702:	1236      	asrs	r6, r6, #8
 801c704:	121b      	asrs	r3, r3, #8
 801c706:	122d      	asrs	r5, r5, #8
 801c708:	f800 6c02 	strb.w	r6, [r0, #-2]
 801c70c:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c710:	f800 5c03 	strb.w	r5, [r0, #-3]
 801c714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c716:	4586      	cmp	lr, r0
 801c718:	441a      	add	r2, r3
 801c71a:	4449      	add	r1, r9
 801c71c:	d01b      	beq.n	801c756 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c71e:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801c722:	3003      	adds	r0, #3
 801c724:	9d01      	ldr	r5, [sp, #4]
 801c726:	140b      	asrs	r3, r1, #16
 801c728:	fb04 5303 	mla	r3, r4, r3, r5
 801c72c:	1414      	asrs	r4, r2, #16
 801c72e:	5d1b      	ldrb	r3, [r3, r4]
 801c730:	9c02      	ldr	r4, [sp, #8]
 801c732:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c736:	0e1f      	lsrs	r7, r3, #24
 801c738:	2fff      	cmp	r7, #255	@ 0xff
 801c73a:	d1b7      	bne.n	801c6ac <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801c73c:	0a1d      	lsrs	r5, r3, #8
 801c73e:	0c1c      	lsrs	r4, r3, #16
 801c740:	f800 3c03 	strb.w	r3, [r0, #-3]
 801c744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c746:	4586      	cmp	lr, r0
 801c748:	f800 5c02 	strb.w	r5, [r0, #-2]
 801c74c:	f800 4c01 	strb.w	r4, [r0, #-1]
 801c750:	441a      	add	r2, r3
 801c752:	4449      	add	r1, r9
 801c754:	d1e3      	bne.n	801c71e <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c756:	4670      	mov	r0, lr
 801c758:	e6eb      	b.n	801c532 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	f77f aee9 	ble.w	801c532 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c760:	4604      	mov	r4, r0
 801c762:	1415      	asrs	r5, r2, #16
 801c764:	e724      	b.n	801c5b0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801c766:	0a1e      	lsrs	r6, r3, #8
 801c768:	0c1d      	lsrs	r5, r3, #16
 801c76a:	7023      	strb	r3, [r4, #0]
 801c76c:	7066      	strb	r6, [r4, #1]
 801c76e:	70a5      	strb	r5, [r4, #2]
 801c770:	e772      	b.n	801c658 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c772:	bf00      	nop

0801c774 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c778:	b089      	sub	sp, #36	@ 0x24
 801c77a:	f89d 006c 	ldrb.w	r0, [sp, #108]	@ 0x6c
 801c77e:	9101      	str	r1, [sp, #4]
 801c780:	ea6f 0a00 	mvn.w	sl, r0
 801c784:	e9dd e815 	ldrd	lr, r8, [sp, #84]	@ 0x54
 801c788:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801c78a:	9202      	str	r2, [sp, #8]
 801c78c:	e9dd 5217 	ldrd	r5, r2, [sp, #92]	@ 0x5c
 801c790:	686c      	ldr	r4, [r5, #4]
 801c792:	682f      	ldr	r7, [r5, #0]
 801c794:	fb04 2401 	mla	r4, r4, r1, r2
 801c798:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c79a:	b280      	uxth	r0, r0
 801c79c:	e9d2 2100 	ldrd	r2, r1, [r2]
 801c7a0:	3104      	adds	r1, #4
 801c7a2:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801c7a6:	fa5f fa8a 	uxtb.w	sl, sl
 801c7aa:	9007      	str	r0, [sp, #28]
 801c7ac:	9105      	str	r1, [sp, #20]
 801c7ae:	9200      	str	r2, [sp, #0]
 801c7b0:	e9dd 2513 	ldrd	r2, r5, [sp, #76]	@ 0x4c
 801c7b4:	9901      	ldr	r1, [sp, #4]
 801c7b6:	2900      	cmp	r1, #0
 801c7b8:	dc03      	bgt.n	801c7c2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801c7ba:	9902      	ldr	r1, [sp, #8]
 801c7bc:	2900      	cmp	r1, #0
 801c7be:	f340 80b6 	ble.w	801c92e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c7c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801c7ca:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c7ce:	f505 4500 	add.w	r5, r5, #32768	@ 0x8000
 801c7d2:	b221      	sxth	r1, r4
 801c7d4:	fa0f fc86 	sxth.w	ip, r6
 801c7d8:	f340 80ac 	ble.w	801c934 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801c7dc:	1410      	asrs	r0, r2, #16
 801c7de:	d406      	bmi.n	801c7ee <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c7e0:	4288      	cmp	r0, r1
 801c7e2:	da04      	bge.n	801c7ee <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c7e4:	ea5f 4925 	movs.w	r9, r5, asr #16
 801c7e8:	d401      	bmi.n	801c7ee <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c7ea:	45e1      	cmp	r9, ip
 801c7ec:	db3e      	blt.n	801c86c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801c7ee:	3b01      	subs	r3, #1
 801c7f0:	4472      	add	r2, lr
 801c7f2:	4445      	add	r5, r8
 801c7f4:	f107 0704 	add.w	r7, r7, #4
 801c7f8:	d1f0      	bne.n	801c7dc <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c7fa:	9b01      	ldr	r3, [sp, #4]
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	f340 8096 	ble.w	801c92e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c802:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c806:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c80a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c80e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c812:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c816:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801c81a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c81e:	ee76 6a62 	vsub.f32	s13, s12, s5
 801c822:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801c826:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c82a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c82e:	ee16 2a90 	vmov	r2, s13
 801c832:	3b01      	subs	r3, #1
 801c834:	9301      	str	r3, [sp, #4]
 801c836:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c838:	9902      	ldr	r1, [sp, #8]
 801c83a:	fb92 fef3 	sdiv	lr, r2, r3
 801c83e:	ee17 2a10 	vmov	r2, s14
 801c842:	eeb0 7a43 	vmov.f32	s14, s6
 801c846:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c84a:	ee17 5a10 	vmov	r5, s14
 801c84e:	eeb0 7a62 	vmov.f32	s14, s5
 801c852:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c856:	fb92 f8f3 	sdiv	r8, r2, r3
 801c85a:	eeb0 3a67 	vmov.f32	s6, s15
 801c85e:	ee17 2a10 	vmov	r2, s14
 801c862:	eef0 2a46 	vmov.f32	s5, s12
 801c866:	bf08      	it	eq
 801c868:	460b      	moveq	r3, r1
 801c86a:	e7a3      	b.n	801c7b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c86c:	f103 39ff 	add.w	r9, r3, #4294967295
 801c870:	fb09 2b0e 	mla	fp, r9, lr, r2
 801c874:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801c878:	d566      	bpl.n	801c948 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801c87a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801c87e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c880:	e002      	b.n	801c888 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c882:	1410      	asrs	r0, r2, #16
 801c884:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801c888:	2800      	cmp	r0, #0
 801c88a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c88e:	4472      	add	r2, lr
 801c890:	db3f      	blt.n	801c912 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c892:	42a0      	cmp	r0, r4
 801c894:	da3d      	bge.n	801c912 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c896:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801c89a:	d43a      	bmi.n	801c912 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c89c:	45b4      	cmp	ip, r6
 801c89e:	da38      	bge.n	801c912 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c8a0:	9e00      	ldr	r6, [sp, #0]
 801c8a2:	b224      	sxth	r4, r4
 801c8a4:	fb0c 6404 	mla	r4, ip, r4, r6
 801c8a8:	f814 b000 	ldrb.w	fp, [r4, r0]
 801c8ac:	7838      	ldrb	r0, [r7, #0]
 801c8ae:	9c05      	ldr	r4, [sp, #20]
 801c8b0:	fb10 f30a 	smulbb	r3, r0, sl
 801c8b4:	9306      	str	r3, [sp, #24]
 801c8b6:	9b07      	ldr	r3, [sp, #28]
 801c8b8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c8bc:	4618      	mov	r0, r3
 801c8be:	eb04 060b 	add.w	r6, r4, fp
 801c8c2:	78b4      	ldrb	r4, [r6, #2]
 801c8c4:	7876      	ldrb	r6, [r6, #1]
 801c8c6:	fb14 fc03 	smulbb	ip, r4, r3
 801c8ca:	9c05      	ldr	r4, [sp, #20]
 801c8cc:	fb16 f603 	smulbb	r6, r6, r3
 801c8d0:	f814 400b 	ldrb.w	r4, [r4, fp]
 801c8d4:	9b06      	ldr	r3, [sp, #24]
 801c8d6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c8da:	fb04 3000 	mla	r0, r4, r0, r3
 801c8de:	78bc      	ldrb	r4, [r7, #2]
 801c8e0:	fb0b 660a 	mla	r6, fp, sl, r6
 801c8e4:	fb04 c40a 	mla	r4, r4, sl, ip
 801c8e8:	b2b6      	uxth	r6, r6
 801c8ea:	b280      	uxth	r0, r0
 801c8ec:	b2a4      	uxth	r4, r4
 801c8ee:	f106 0c01 	add.w	ip, r6, #1
 801c8f2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c8f6:	f104 0b01 	add.w	fp, r4, #1
 801c8fa:	f100 0c01 	add.w	ip, r0, #1
 801c8fe:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801c902:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801c906:	1236      	asrs	r6, r6, #8
 801c908:	1224      	asrs	r4, r4, #8
 801c90a:	1200      	asrs	r0, r0, #8
 801c90c:	707e      	strb	r6, [r7, #1]
 801c90e:	70bc      	strb	r4, [r7, #2]
 801c910:	7038      	strb	r0, [r7, #0]
 801c912:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c916:	f107 0704 	add.w	r7, r7, #4
 801c91a:	4445      	add	r5, r8
 801c91c:	d1b1      	bne.n	801c882 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801c91e:	e9dd b303 	ldrd	fp, r3, [sp, #12]
 801c922:	eb0b 0783 	add.w	r7, fp, r3, lsl #2
 801c926:	9b01      	ldr	r3, [sp, #4]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	f73f af6a 	bgt.w	801c802 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c92e:	b009      	add	sp, #36	@ 0x24
 801c930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c934:	f43f af61 	beq.w	801c7fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c938:	f103 39ff 	add.w	r9, r3, #4294967295
 801c93c:	fb09 2b0e 	mla	fp, r9, lr, r2
 801c940:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801c944:	f53f af59 	bmi.w	801c7fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c948:	4559      	cmp	r1, fp
 801c94a:	dd57      	ble.n	801c9fc <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c94c:	fb09 5008 	mla	r0, r9, r8, r5
 801c950:	1400      	asrs	r0, r0, #16
 801c952:	d453      	bmi.n	801c9fc <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c954:	4560      	cmp	r0, ip
 801c956:	da51      	bge.n	801c9fc <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c958:	2b00      	cmp	r3, #0
 801c95a:	f77f af4e 	ble.w	801c7fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c95e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801c962:	f107 0c04 	add.w	ip, r7, #4
 801c966:	f8dd b014 	ldr.w	fp, [sp, #20]
 801c96a:	460b      	mov	r3, r1
 801c96c:	9f07      	ldr	r7, [sp, #28]
 801c96e:	e002      	b.n	801c976 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801c970:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c972:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c976:	9800      	ldr	r0, [sp, #0]
 801c978:	1429      	asrs	r1, r5, #16
 801c97a:	fb03 0301 	mla	r3, r3, r1, r0
 801c97e:	1411      	asrs	r1, r2, #16
 801c980:	5c5e      	ldrb	r6, [r3, r1]
 801c982:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801c986:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c98a:	eb0b 0006 	add.w	r0, fp, r6
 801c98e:	7881      	ldrb	r1, [r0, #2]
 801c990:	7840      	ldrb	r0, [r0, #1]
 801c992:	fb13 f30a 	smulbb	r3, r3, sl
 801c996:	fb10 f007 	smulbb	r0, r0, r7
 801c99a:	fb11 f407 	smulbb	r4, r1, r7
 801c99e:	f81b 1006 	ldrb.w	r1, [fp, r6]
 801c9a2:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 801c9a6:	fb01 3307 	mla	r3, r1, r7, r3
 801c9aa:	f81c 1c02 	ldrb.w	r1, [ip, #-2]
 801c9ae:	fb06 000a 	mla	r0, r6, sl, r0
 801c9b2:	fb01 410a 	mla	r1, r1, sl, r4
 801c9b6:	b280      	uxth	r0, r0
 801c9b8:	b29b      	uxth	r3, r3
 801c9ba:	b289      	uxth	r1, r1
 801c9bc:	1c44      	adds	r4, r0, #1
 801c9be:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c9c2:	1c4e      	adds	r6, r1, #1
 801c9c4:	1c5c      	adds	r4, r3, #1
 801c9c6:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801c9ca:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c9ce:	f109 39ff 	add.w	r9, r9, #4294967295
 801c9d2:	1200      	asrs	r0, r0, #8
 801c9d4:	1209      	asrs	r1, r1, #8
 801c9d6:	121b      	asrs	r3, r3, #8
 801c9d8:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c9dc:	f80c 0c03 	strb.w	r0, [ip, #-3]
 801c9e0:	f80c 1c02 	strb.w	r1, [ip, #-2]
 801c9e4:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801c9e8:	4445      	add	r5, r8
 801c9ea:	4472      	add	r2, lr
 801c9ec:	f10c 0c04 	add.w	ip, ip, #4
 801c9f0:	d1be      	bne.n	801c970 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801c9f2:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 801c9f6:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801c9fa:	e6fe      	b.n	801c7fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	f77f aefc 	ble.w	801c7fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ca02:	1410      	asrs	r0, r2, #16
 801ca04:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801ca08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ca0a:	e73d      	b.n	801c888 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>

0801ca0c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca10:	468a      	mov	sl, r1
 801ca12:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801ca16:	46d1      	mov	r9, sl
 801ca18:	b087      	sub	sp, #28
 801ca1a:	e9dd 1415 	ldrd	r1, r4, [sp, #84]	@ 0x54
 801ca1e:	684d      	ldr	r5, [r1, #4]
 801ca20:	9203      	str	r2, [sp, #12]
 801ca22:	e9dd 2e17 	ldrd	r2, lr, [sp, #92]	@ 0x5c
 801ca26:	fb05 4402 	mla	r4, r5, r2, r4
 801ca2a:	e9de 2000 	ldrd	r2, r0, [lr]
 801ca2e:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801ca32:	680d      	ldr	r5, [r1, #0]
 801ca34:	f100 0b04 	add.w	fp, r0, #4
 801ca38:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801ca3c:	9205      	str	r2, [sp, #20]
 801ca3e:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801ca42:	f1b9 0f00 	cmp.w	r9, #0
 801ca46:	dc03      	bgt.n	801ca50 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ca48:	9803      	ldr	r0, [sp, #12]
 801ca4a:	2800      	cmp	r0, #0
 801ca4c:	f340 8091 	ble.w	801cb72 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ca50:	e9de 8a02 	ldrd	r8, sl, [lr, #8]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	fa0f f088 	sxth.w	r0, r8
 801ca5a:	fa0f f48a 	sxth.w	r4, sl
 801ca5e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ca62:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801ca66:	9001      	str	r0, [sp, #4]
 801ca68:	9402      	str	r4, [sp, #8]
 801ca6a:	f340 8085 	ble.w	801cb78 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ca6e:	1414      	asrs	r4, r2, #16
 801ca70:	d408      	bmi.n	801ca84 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ca72:	9801      	ldr	r0, [sp, #4]
 801ca74:	4284      	cmp	r4, r0
 801ca76:	da05      	bge.n	801ca84 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ca78:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801ca7c:	d402      	bmi.n	801ca84 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ca7e:	9802      	ldr	r0, [sp, #8]
 801ca80:	4584      	cmp	ip, r0
 801ca82:	db3b      	blt.n	801cafc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801ca84:	3b01      	subs	r3, #1
 801ca86:	4432      	add	r2, r6
 801ca88:	4439      	add	r1, r7
 801ca8a:	f105 0504 	add.w	r5, r5, #4
 801ca8e:	d1ee      	bne.n	801ca6e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ca90:	f1b9 0f00 	cmp.w	r9, #0
 801ca94:	dd6d      	ble.n	801cb72 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ca96:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca9e:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801caa2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801caa6:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801caaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801caae:	ee76 6a62 	vsub.f32	s13, s12, s5
 801cab2:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801cab6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801caba:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cabe:	ee16 2a90 	vmov	r2, s13
 801cac2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cac4:	9803      	ldr	r0, [sp, #12]
 801cac6:	fb92 f6f3 	sdiv	r6, r2, r3
 801caca:	ee17 2a10 	vmov	r2, s14
 801cace:	eeb0 7a43 	vmov.f32	s14, s6
 801cad2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cad6:	ee17 1a10 	vmov	r1, s14
 801cada:	eeb0 7a62 	vmov.f32	s14, s5
 801cade:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cae2:	f1b9 0901 	subs.w	r9, r9, #1
 801cae6:	fb92 f7f3 	sdiv	r7, r2, r3
 801caea:	eeb0 3a67 	vmov.f32	s6, s15
 801caee:	ee17 2a10 	vmov	r2, s14
 801caf2:	eef0 2a46 	vmov.f32	s5, s12
 801caf6:	bf08      	it	eq
 801caf8:	4603      	moveq	r3, r0
 801cafa:	e7a2      	b.n	801ca42 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801cafc:	f103 3cff 	add.w	ip, r3, #4294967295
 801cb00:	9404      	str	r4, [sp, #16]
 801cb02:	fb06 240c 	mla	r4, r6, ip, r2
 801cb06:	1424      	asrs	r4, r4, #16
 801cb08:	d578      	bpl.n	801cbfc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cb0a:	9613      	str	r6, [sp, #76]	@ 0x4c
 801cb0c:	2000      	movs	r0, #0
 801cb0e:	4646      	mov	r6, r8
 801cb10:	46d4      	mov	ip, sl
 801cb12:	9c04      	ldr	r4, [sp, #16]
 801cb14:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801cb18:	e002      	b.n	801cb20 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801cb1a:	1414      	asrs	r4, r2, #16
 801cb1c:	e9de 6c02 	ldrd	r6, ip, [lr, #8]
 801cb20:	2c00      	cmp	r4, #0
 801cb22:	4442      	add	r2, r8
 801cb24:	db1c      	blt.n	801cb60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cb26:	42b4      	cmp	r4, r6
 801cb28:	da1a      	bge.n	801cb60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cb2a:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801cb2e:	d417      	bmi.n	801cb60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cb30:	45e2      	cmp	sl, ip
 801cb32:	da15      	bge.n	801cb60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cb34:	fa0f fc86 	sxth.w	ip, r6
 801cb38:	9e05      	ldr	r6, [sp, #20]
 801cb3a:	fb0a 6c0c 	mla	ip, sl, ip, r6
 801cb3e:	f81c 4004 	ldrb.w	r4, [ip, r4]
 801cb42:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801cb46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cb4a:	f81b c004 	ldrb.w	ip, [fp, r4]
 801cb4e:	445c      	add	r4, fp
 801cb50:	f805 c020 	strb.w	ip, [r5, r0, lsl #2]
 801cb54:	f894 c001 	ldrb.w	ip, [r4, #1]
 801cb58:	f886 c001 	strb.w	ip, [r6, #1]
 801cb5c:	78a4      	ldrb	r4, [r4, #2]
 801cb5e:	70b4      	strb	r4, [r6, #2]
 801cb60:	3001      	adds	r0, #1
 801cb62:	4283      	cmp	r3, r0
 801cb64:	4439      	add	r1, r7
 801cb66:	d1d8      	bne.n	801cb1a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801cb68:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801cb6c:	f1b9 0f00 	cmp.w	r9, #0
 801cb70:	dc91      	bgt.n	801ca96 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cb72:	b007      	add	sp, #28
 801cb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb78:	d08a      	beq.n	801ca90 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801cb7a:	f103 3cff 	add.w	ip, r3, #4294967295
 801cb7e:	fb0c 2406 	mla	r4, ip, r6, r2
 801cb82:	1424      	asrs	r4, r4, #16
 801cb84:	d484      	bmi.n	801ca90 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801cb86:	42a0      	cmp	r0, r4
 801cb88:	dd32      	ble.n	801cbf0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801cb8a:	fb07 140c 	mla	r4, r7, ip, r1
 801cb8e:	1420      	asrs	r0, r4, #16
 801cb90:	d42e      	bmi.n	801cbf0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801cb92:	9c02      	ldr	r4, [sp, #8]
 801cb94:	4284      	cmp	r4, r0
 801cb96:	dd2b      	ble.n	801cbf0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	f77f af79 	ble.w	801ca90 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801cb9e:	1d2c      	adds	r4, r5, #4
 801cba0:	f8dd a014 	ldr.w	sl, [sp, #20]
 801cba4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cba8:	e001      	b.n	801cbae <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801cbaa:	f9be 8008 	ldrsh.w	r8, [lr, #8]
 801cbae:	1408      	asrs	r0, r1, #16
 801cbb0:	fb08 a000 	mla	r0, r8, r0, sl
 801cbb4:	ea4f 4822 	mov.w	r8, r2, asr #16
 801cbb8:	f810 0008 	ldrb.w	r0, [r0, r8]
 801cbbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cbc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cbc4:	f81b 8000 	ldrb.w	r8, [fp, r0]
 801cbc8:	4458      	add	r0, fp
 801cbca:	f804 8c04 	strb.w	r8, [r4, #-4]
 801cbce:	f890 8001 	ldrb.w	r8, [r0, #1]
 801cbd2:	f1bc 3fff 	cmp.w	ip, #4294967295
 801cbd6:	f804 8c03 	strb.w	r8, [r4, #-3]
 801cbda:	7880      	ldrb	r0, [r0, #2]
 801cbdc:	4439      	add	r1, r7
 801cbde:	f804 0c02 	strb.w	r0, [r4, #-2]
 801cbe2:	4432      	add	r2, r6
 801cbe4:	f104 0404 	add.w	r4, r4, #4
 801cbe8:	d1df      	bne.n	801cbaa <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cbea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801cbee:	e7bd      	b.n	801cb6c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	f77f af4d 	ble.w	801ca90 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801cbf6:	1410      	asrs	r0, r2, #16
 801cbf8:	9004      	str	r0, [sp, #16]
 801cbfa:	e786      	b.n	801cb0a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>
 801cbfc:	9801      	ldr	r0, [sp, #4]
 801cbfe:	e7c2      	b.n	801cb86 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>

0801cc00 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cc00:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc08:	b08b      	sub	sp, #44	@ 0x2c
 801cc0a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801cc0e:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	@ 0x64
 801cc12:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801cc14:	6854      	ldr	r4, [r2, #4]
 801cc16:	6816      	ldr	r6, [r2, #0]
 801cc18:	fb04 1000 	mla	r0, r4, r0, r1
 801cc1c:	e9dd 4b17 	ldrd	r4, fp, [sp, #92]	@ 0x5c
 801cc20:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801cc22:	f89d 7074 	ldrb.w	r7, [sp, #116]	@ 0x74
 801cc26:	e9d2 2500 	ldrd	r2, r5, [r2]
 801cc2a:	3504      	adds	r5, #4
 801cc2c:	9703      	str	r7, [sp, #12]
 801cc2e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801cc32:	9507      	str	r5, [sp, #28]
 801cc34:	9206      	str	r2, [sp, #24]
 801cc36:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	@ 0x54
 801cc3a:	9d01      	ldr	r5, [sp, #4]
 801cc3c:	2d00      	cmp	r5, #0
 801cc3e:	dc03      	bgt.n	801cc48 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cc40:	9d02      	ldr	r5, [sp, #8]
 801cc42:	2d00      	cmp	r5, #0
 801cc44:	f340 80d5 	ble.w	801cdf2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801cc48:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	e9d5 7c02 	ldrd	r7, ip, [r5, #8]
 801cc50:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801cc54:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801cc58:	b23d      	sxth	r5, r7
 801cc5a:	fa0f fe8c 	sxth.w	lr, ip
 801cc5e:	f340 80cb 	ble.w	801cdf8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801cc62:	1416      	asrs	r6, r2, #16
 801cc64:	d406      	bmi.n	801cc74 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cc66:	42ae      	cmp	r6, r5
 801cc68:	da04      	bge.n	801cc74 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cc6a:	ea5f 4821 	movs.w	r8, r1, asr #16
 801cc6e:	d401      	bmi.n	801cc74 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cc70:	45f0      	cmp	r8, lr
 801cc72:	db3c      	blt.n	801ccee <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801cc74:	3b01      	subs	r3, #1
 801cc76:	4422      	add	r2, r4
 801cc78:	4459      	add	r1, fp
 801cc7a:	f100 0004 	add.w	r0, r0, #4
 801cc7e:	d1f0      	bne.n	801cc62 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cc80:	9b01      	ldr	r3, [sp, #4]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	f340 80b5 	ble.w	801cdf2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801cc88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cc8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cc90:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801cc94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc98:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801cc9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cca0:	ee76 6a62 	vsub.f32	s13, s12, s5
 801cca4:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801cca8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ccac:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ccb0:	ee16 2a90 	vmov	r2, s13
 801ccb4:	3b01      	subs	r3, #1
 801ccb6:	9301      	str	r3, [sp, #4]
 801ccb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ccba:	9d02      	ldr	r5, [sp, #8]
 801ccbc:	fb92 f4f3 	sdiv	r4, r2, r3
 801ccc0:	ee17 2a10 	vmov	r2, s14
 801ccc4:	eeb0 7a43 	vmov.f32	s14, s6
 801ccc8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cccc:	ee17 1a10 	vmov	r1, s14
 801ccd0:	eeb0 7a62 	vmov.f32	s14, s5
 801ccd4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ccd8:	fb92 fbf3 	sdiv	fp, r2, r3
 801ccdc:	eeb0 3a67 	vmov.f32	s6, s15
 801cce0:	ee17 2a10 	vmov	r2, s14
 801cce4:	eef0 2a46 	vmov.f32	s5, s12
 801cce8:	bf08      	it	eq
 801ccea:	462b      	moveq	r3, r5
 801ccec:	e7a5      	b.n	801cc3a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ccee:	f103 38ff 	add.w	r8, r3, #4294967295
 801ccf2:	fb08 2904 	mla	r9, r8, r4, r2
 801ccf6:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ccfa:	f140 8087 	bpl.w	801ce0c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ccfe:	f1c3 0900 	rsb	r9, r3, #0
 801cd02:	4698      	mov	r8, r3
 801cd04:	2500      	movs	r5, #0
 801cd06:	9004      	str	r0, [sp, #16]
 801cd08:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801cd0a:	e002      	b.n	801cd12 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801cd0c:	1416      	asrs	r6, r2, #16
 801cd0e:	e9d3 7c02 	ldrd	r7, ip, [r3, #8]
 801cd12:	2e00      	cmp	r6, #0
 801cd14:	4422      	add	r2, r4
 801cd16:	db61      	blt.n	801cddc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cd18:	42be      	cmp	r6, r7
 801cd1a:	da5f      	bge.n	801cddc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cd1c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801cd20:	d45c      	bmi.n	801cddc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cd22:	45e6      	cmp	lr, ip
 801cd24:	b23f      	sxth	r7, r7
 801cd26:	da59      	bge.n	801cddc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cd28:	9806      	ldr	r0, [sp, #24]
 801cd2a:	fb0e 0707 	mla	r7, lr, r7, r0
 801cd2e:	9807      	ldr	r0, [sp, #28]
 801cd30:	5dbe      	ldrb	r6, [r7, r6]
 801cd32:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 801cd36:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 801cd3a:	9804      	ldr	r0, [sp, #16]
 801cd3c:	9705      	str	r7, [sp, #20]
 801cd3e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801cd42:	0e37      	lsrs	r7, r6, #24
 801cd44:	9008      	str	r0, [sp, #32]
 801cd46:	d049      	beq.n	801cddc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cd48:	9803      	ldr	r0, [sp, #12]
 801cd4a:	fa5f fa86 	uxtb.w	sl, r6
 801cd4e:	fb00 f707 	mul.w	r7, r0, r7
 801cd52:	9805      	ldr	r0, [sp, #20]
 801cd54:	f107 0c01 	add.w	ip, r7, #1
 801cd58:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
 801cd5c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cd60:	4686      	mov	lr, r0
 801cd62:	ea6f 070c 	mvn.w	r7, ip
 801cd66:	fa1f fc8c 	uxth.w	ip, ip
 801cd6a:	fb1a fa0c 	smulbb	sl, sl, ip
 801cd6e:	9804      	ldr	r0, [sp, #16]
 801cd70:	b2ff      	uxtb	r7, r7
 801cd72:	f810 e02e 	ldrb.w	lr, [r0, lr, lsl #2]
 801cd76:	9805      	ldr	r0, [sp, #20]
 801cd78:	fb0e ae07 	mla	lr, lr, r7, sl
 801cd7c:	fa1f fe8e 	uxth.w	lr, lr
 801cd80:	f10e 0a01 	add.w	sl, lr, #1
 801cd84:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801cd88:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 801cd8c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cd90:	fb16 f60c 	smulbb	r6, r6, ip
 801cd94:	9609      	str	r6, [sp, #36]	@ 0x24
 801cd96:	4606      	mov	r6, r0
 801cd98:	9804      	ldr	r0, [sp, #16]
 801cd9a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cd9e:	f800 e026 	strb.w	lr, [r0, r6, lsl #2]
 801cda2:	fb1a fa0c 	smulbb	sl, sl, ip
 801cda6:	9808      	ldr	r0, [sp, #32]
 801cda8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801cdaa:	f890 e002 	ldrb.w	lr, [r0, #2]
 801cdae:	f890 c001 	ldrb.w	ip, [r0, #1]
 801cdb2:	fb0e 6607 	mla	r6, lr, r7, r6
 801cdb6:	fb0c ac07 	mla	ip, ip, r7, sl
 801cdba:	b2b6      	uxth	r6, r6
 801cdbc:	fa1f fe8c 	uxth.w	lr, ip
 801cdc0:	1c77      	adds	r7, r6, #1
 801cdc2:	f10e 0c01 	add.w	ip, lr, #1
 801cdc6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cdca:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801cdce:	ea4f 272c 	mov.w	r7, ip, asr #8
 801cdd2:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801cdd6:	7047      	strb	r7, [r0, #1]
 801cdd8:	f880 c002 	strb.w	ip, [r0, #2]
 801cddc:	3d01      	subs	r5, #1
 801cdde:	45a9      	cmp	r9, r5
 801cde0:	4459      	add	r1, fp
 801cde2:	d193      	bne.n	801cd0c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801cde4:	9b01      	ldr	r3, [sp, #4]
 801cde6:	9804      	ldr	r0, [sp, #16]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801cdee:	f73f af4b 	bgt.w	801cc88 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801cdf2:	b00b      	add	sp, #44	@ 0x2c
 801cdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdf8:	f43f af42 	beq.w	801cc80 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cdfc:	f103 38ff 	add.w	r8, r3, #4294967295
 801ce00:	fb08 2904 	mla	r9, r8, r4, r2
 801ce04:	ea5f 4929 	movs.w	r9, r9, asr #16
 801ce08:	f53f af3a 	bmi.w	801cc80 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ce0c:	454d      	cmp	r5, r9
 801ce0e:	dd68      	ble.n	801cee2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ce10:	fb08 160b 	mla	r6, r8, fp, r1
 801ce14:	1436      	asrs	r6, r6, #16
 801ce16:	d464      	bmi.n	801cee2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ce18:	4576      	cmp	r6, lr
 801ce1a:	da62      	bge.n	801cee2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	f77f af2f 	ble.w	801cc80 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ce22:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801ce26:	f100 0e04 	add.w	lr, r0, #4
 801ce2a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801ce2e:	e002      	b.n	801ce36 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801ce30:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ce32:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801ce36:	140b      	asrs	r3, r1, #16
 801ce38:	fb05 6303 	mla	r3, r5, r3, r6
 801ce3c:	1410      	asrs	r0, r2, #16
 801ce3e:	5c1b      	ldrb	r3, [r3, r0]
 801ce40:	f108 38ff 	add.w	r8, r8, #4294967295
 801ce44:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801ce48:	4422      	add	r2, r4
 801ce4a:	0e18      	lsrs	r0, r3, #24
 801ce4c:	4459      	add	r1, fp
 801ce4e:	d03e      	beq.n	801cece <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801ce50:	9d03      	ldr	r5, [sp, #12]
 801ce52:	fa5f fc83 	uxtb.w	ip, r3
 801ce56:	fb05 f000 	mul.w	r0, r5, r0
 801ce5a:	f100 0901 	add.w	r9, r0, #1
 801ce5e:	eb09 2920 	add.w	r9, r9, r0, asr #8
 801ce62:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce66:	ea6f 0009 	mvn.w	r0, r9
 801ce6a:	fa1f f989 	uxth.w	r9, r9
 801ce6e:	fb1c fc09 	smulbb	ip, ip, r9
 801ce72:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801ce76:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ce7a:	fb15 fa09 	smulbb	sl, r5, r9
 801ce7e:	fb13 f309 	smulbb	r3, r3, r9
 801ce82:	f81e 9c04 	ldrb.w	r9, [lr, #-4]
 801ce86:	b2c0      	uxtb	r0, r0
 801ce88:	fb09 cc00 	mla	ip, r9, r0, ip
 801ce8c:	f81e 5c03 	ldrb.w	r5, [lr, #-3]
 801ce90:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801ce94:	fb05 a500 	mla	r5, r5, r0, sl
 801ce98:	fb09 3300 	mla	r3, r9, r0, r3
 801ce9c:	fa1f fc8c 	uxth.w	ip, ip
 801cea0:	b2ad      	uxth	r5, r5
 801cea2:	b29b      	uxth	r3, r3
 801cea4:	f10c 0a01 	add.w	sl, ip, #1
 801cea8:	f105 0901 	add.w	r9, r5, #1
 801ceac:	1c58      	adds	r0, r3, #1
 801ceae:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ceb2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ceb6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ceba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cebe:	122d      	asrs	r5, r5, #8
 801cec0:	121b      	asrs	r3, r3, #8
 801cec2:	f80e cc04 	strb.w	ip, [lr, #-4]
 801cec6:	f80e 5c03 	strb.w	r5, [lr, #-3]
 801ceca:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801cece:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ced2:	f10e 0e04 	add.w	lr, lr, #4
 801ced6:	d1ab      	bne.n	801ce30 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ced8:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801cedc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801cee0:	e6ce      	b.n	801cc80 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	f77f aecc 	ble.w	801cc80 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cee8:	1416      	asrs	r6, r2, #16
 801ceea:	e708      	b.n	801ccfe <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>

0801ceec <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ceec:	4770      	bx	lr
 801ceee:	bf00      	nop

0801cef0 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cef0:	4770      	bx	lr
 801cef2:	bf00      	nop

0801cef4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cef4:	4770      	bx	lr
 801cef6:	bf00      	nop

0801cef8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cef8:	4770      	bx	lr
 801cefa:	bf00      	nop

0801cefc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cefc:	4770      	bx	lr
 801cefe:	bf00      	nop

0801cf00 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cf00:	4770      	bx	lr
 801cf02:	bf00      	nop

0801cf04 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cf04:	4770      	bx	lr
 801cf06:	bf00      	nop

0801cf08 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cf08:	4770      	bx	lr
 801cf0a:	bf00      	nop

0801cf0c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cf0c:	4770      	bx	lr
 801cf0e:	bf00      	nop

0801cf10 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cf10:	4770      	bx	lr
 801cf12:	bf00      	nop

0801cf14 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cf14:	4770      	bx	lr
 801cf16:	bf00      	nop

0801cf18 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cf18:	4770      	bx	lr
 801cf1a:	bf00      	nop

0801cf1c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cf1c:	4770      	bx	lr
 801cf1e:	bf00      	nop

0801cf20 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cf20:	4770      	bx	lr
 801cf22:	bf00      	nop

0801cf24 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cf24:	4770      	bx	lr
 801cf26:	bf00      	nop

0801cf28 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cf28:	4770      	bx	lr
 801cf2a:	bf00      	nop

0801cf2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cf2c:	4770      	bx	lr
 801cf2e:	bf00      	nop

0801cf30 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cf30:	4770      	bx	lr
 801cf32:	bf00      	nop

0801cf34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cf34:	4770      	bx	lr
 801cf36:	bf00      	nop

0801cf38 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cf38:	4770      	bx	lr
 801cf3a:	bf00      	nop

0801cf3c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cf3c:	4770      	bx	lr
 801cf3e:	bf00      	nop

0801cf40 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cf40:	4770      	bx	lr
 801cf42:	bf00      	nop

0801cf44 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv>:
 801cf44:	b508      	push	{r3, lr}
 801cf46:	4b0d      	ldr	r3, [pc, #52]	@ (801cf7c <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x38>)
 801cf48:	881b      	ldrh	r3, [r3, #0]
 801cf4a:	b17b      	cbz	r3, 801cf6c <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x28>
 801cf4c:	7b02      	ldrb	r2, [r0, #12]
 801cf4e:	2a02      	cmp	r2, #2
 801cf50:	d007      	beq.n	801cf62 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x1e>
 801cf52:	2a01      	cmp	r2, #1
 801cf54:	bf0c      	ite	eq
 801cf56:	2003      	moveq	r0, #3
 801cf58:	2002      	movne	r0, #2
 801cf5a:	fb13 f000 	smulbb	r0, r3, r0
 801cf5e:	b280      	uxth	r0, r0
 801cf60:	bd08      	pop	{r3, pc}
 801cf62:	2004      	movs	r0, #4
 801cf64:	fb13 f000 	smulbb	r0, r3, r0
 801cf68:	b280      	uxth	r0, r0
 801cf6a:	bd08      	pop	{r3, pc}
 801cf6c:	4b04      	ldr	r3, [pc, #16]	@ (801cf80 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x3c>)
 801cf6e:	4a05      	ldr	r2, [pc, #20]	@ (801cf84 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x40>)
 801cf70:	f240 110f 	movw	r1, #271	@ 0x10f
 801cf74:	4804      	ldr	r0, [pc, #16]	@ (801cf88 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x44>)
 801cf76:	f00d ff39 	bl	802adec <__assert_func>
 801cf7a:	bf00      	nop
 801cf7c:	20087456 	.word	0x20087456
 801cf80:	0802e3a8 	.word	0x0802e3a8
 801cf84:	0802fb6c 	.word	0x0802fb6c
 801cf88:	0802e3ec 	.word	0x0802e3ec

0801cf8c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv>:
 801cf8c:	b530      	push	{r4, r5, lr}
 801cf8e:	4b26      	ldr	r3, [pc, #152]	@ (801d028 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x9c>)
 801cf90:	b083      	sub	sp, #12
 801cf92:	681c      	ldr	r4, [r3, #0]
 801cf94:	2c00      	cmp	r4, #0
 801cf96:	d040      	beq.n	801d01a <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x8e>
 801cf98:	4b24      	ldr	r3, [pc, #144]	@ (801d02c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa0>)
 801cf9a:	4605      	mov	r5, r0
 801cf9c:	781b      	ldrb	r3, [r3, #0]
 801cf9e:	b9f3      	cbnz	r3, 801cfde <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x52>
 801cfa0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cfa2:	7b2a      	ldrb	r2, [r5, #12]
 801cfa4:	2a01      	cmp	r2, #1
 801cfa6:	d025      	beq.n	801cff4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x68>
 801cfa8:	d30d      	bcc.n	801cfc6 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x3a>
 801cfaa:	2a02      	cmp	r2, #2
 801cfac:	d12f      	bne.n	801d00e <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x82>
 801cfae:	4920      	ldr	r1, [pc, #128]	@ (801d030 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801cfb0:	4a20      	ldr	r2, [pc, #128]	@ (801d034 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801cfb2:	8809      	ldrh	r1, [r1, #0]
 801cfb4:	8812      	ldrh	r2, [r2, #0]
 801cfb6:	008c      	lsls	r4, r1, #2
 801cfb8:	4618      	mov	r0, r3
 801cfba:	9400      	str	r4, [sp, #0]
 801cfbc:	2310      	movs	r3, #16
 801cfbe:	f7fb ff75 	bl	8018eac <nema_bind_dst_tex>
 801cfc2:	b003      	add	sp, #12
 801cfc4:	bd30      	pop	{r4, r5, pc}
 801cfc6:	491a      	ldr	r1, [pc, #104]	@ (801d030 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801cfc8:	4a1a      	ldr	r2, [pc, #104]	@ (801d034 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801cfca:	8809      	ldrh	r1, [r1, #0]
 801cfcc:	8812      	ldrh	r2, [r2, #0]
 801cfce:	004c      	lsls	r4, r1, #1
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	9400      	str	r4, [sp, #0]
 801cfd4:	2304      	movs	r3, #4
 801cfd6:	f7fb ff69 	bl	8018eac <nema_bind_dst_tex>
 801cfda:	b003      	add	sp, #12
 801cfdc:	bd30      	pop	{r4, r5, pc}
 801cfde:	6823      	ldr	r3, [r4, #0]
 801cfe0:	4620      	mov	r0, r4
 801cfe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cfe4:	4798      	blx	r3
 801cfe6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cfe8:	4283      	cmp	r3, r0
 801cfea:	d1da      	bne.n	801cfa2 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x16>
 801cfec:	7b2a      	ldrb	r2, [r5, #12]
 801cfee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cff0:	2a01      	cmp	r2, #1
 801cff2:	d1d9      	bne.n	801cfa8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x1c>
 801cff4:	490e      	ldr	r1, [pc, #56]	@ (801d030 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801cff6:	4a0f      	ldr	r2, [pc, #60]	@ (801d034 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801cff8:	8809      	ldrh	r1, [r1, #0]
 801cffa:	8812      	ldrh	r2, [r2, #0]
 801cffc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801d000:	4618      	mov	r0, r3
 801d002:	9400      	str	r4, [sp, #0]
 801d004:	2339      	movs	r3, #57	@ 0x39
 801d006:	f7fb ff51 	bl	8018eac <nema_bind_dst_tex>
 801d00a:	b003      	add	sp, #12
 801d00c:	bd30      	pop	{r4, r5, pc}
 801d00e:	4b0a      	ldr	r3, [pc, #40]	@ (801d038 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xac>)
 801d010:	4a0a      	ldr	r2, [pc, #40]	@ (801d03c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb0>)
 801d012:	2141      	movs	r1, #65	@ 0x41
 801d014:	480a      	ldr	r0, [pc, #40]	@ (801d040 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb4>)
 801d016:	f00d fee9 	bl	802adec <__assert_func>
 801d01a:	4b0a      	ldr	r3, [pc, #40]	@ (801d044 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb8>)
 801d01c:	4a0a      	ldr	r2, [pc, #40]	@ (801d048 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xbc>)
 801d01e:	217c      	movs	r1, #124	@ 0x7c
 801d020:	480a      	ldr	r0, [pc, #40]	@ (801d04c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xc0>)
 801d022:	f00d fee3 	bl	802adec <__assert_func>
 801d026:	bf00      	nop
 801d028:	200875c8 	.word	0x200875c8
 801d02c:	2008745a 	.word	0x2008745a
 801d030:	20087456 	.word	0x20087456
 801d034:	20087458 	.word	0x20087458
 801d038:	0802de28 	.word	0x0802de28
 801d03c:	0802e9a0 	.word	0x0802e9a0
 801d040:	0802de70 	.word	0x0802de70
 801d044:	0802ddcc 	.word	0x0802ddcc
 801d048:	0802e638 	.word	0x0802e638
 801d04c:	0802ddf4 	.word	0x0802ddf4

0801d050 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh>:
 801d050:	2b00      	cmp	r3, #0
 801d052:	d05b      	beq.n	801d10c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xbc>
 801d054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d058:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 801d05c:	b085      	sub	sp, #20
 801d05e:	2c00      	cmp	r4, #0
 801d060:	dd51      	ble.n	801d106 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801d062:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 801d066:	2c00      	cmp	r4, #0
 801d068:	dd4d      	ble.n	801d106 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801d06a:	4616      	mov	r6, r2
 801d06c:	4605      	mov	r5, r0
 801d06e:	6808      	ldr	r0, [r1, #0]
 801d070:	6849      	ldr	r1, [r1, #4]
 801d072:	461c      	mov	r4, r3
 801d074:	4f29      	ldr	r7, [pc, #164]	@ (801d11c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xcc>)
 801d076:	ab02      	add	r3, sp, #8
 801d078:	c303      	stmia	r3!, {r0, r1}
 801d07a:	a802      	add	r0, sp, #8
 801d07c:	f7f8 fb3c 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d080:	6838      	ldr	r0, [r7, #0]
 801d082:	f3c6 4807 	ubfx	r8, r6, #16, #8
 801d086:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801d08a:	b2f6      	uxtb	r6, r6
 801d08c:	2800      	cmp	r0, #0
 801d08e:	d03e      	beq.n	801d10e <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xbe>
 801d090:	f7fe f8f8 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801d094:	682b      	ldr	r3, [r5, #0]
 801d096:	4628      	mov	r0, r5
 801d098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d09a:	4798      	blx	r3
 801d09c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801d0a0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d0a4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d0a8:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801d0ac:	f7fb fe3e 	bl	8018d2c <nema_set_clip>
 801d0b0:	f04f 33ff 	mov.w	r3, #4294967295
 801d0b4:	2cff      	cmp	r4, #255	@ 0xff
 801d0b6:	bf0c      	ite	eq
 801d0b8:	2001      	moveq	r0, #1
 801d0ba:	4819      	ldrne	r0, [pc, #100]	@ (801d120 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd0>)
 801d0bc:	461a      	mov	r2, r3
 801d0be:	2100      	movs	r1, #0
 801d0c0:	f7fd fc14 	bl	801a8ec <nema_set_blend>
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	4623      	mov	r3, r4
 801d0c8:	4611      	mov	r1, r2
 801d0ca:	4610      	mov	r0, r2
 801d0cc:	f7fb fe62 	bl	8018d94 <nema_rgba>
 801d0d0:	f7fd ffd2 	bl	801b078 <nema_set_const_color>
 801d0d4:	4632      	mov	r2, r6
 801d0d6:	4649      	mov	r1, r9
 801d0d8:	4640      	mov	r0, r8
 801d0da:	23ff      	movs	r3, #255	@ 0xff
 801d0dc:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801d0e0:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801d0e4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d0e8:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801d0ec:	f7fb fe52 	bl	8018d94 <nema_rgba>
 801d0f0:	4643      	mov	r3, r8
 801d0f2:	9000      	str	r0, [sp, #0]
 801d0f4:	4632      	mov	r2, r6
 801d0f6:	4620      	mov	r0, r4
 801d0f8:	4629      	mov	r1, r5
 801d0fa:	f7fb ffcd 	bl	8019098 <nema_fill_rect>
 801d0fe:	6838      	ldr	r0, [r7, #0]
 801d100:	b128      	cbz	r0, 801d10e <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xbe>
 801d102:	f7fe f8df 	bl	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801d106:	b005      	add	sp, #20
 801d108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d10c:	4770      	bx	lr
 801d10e:	4b05      	ldr	r3, [pc, #20]	@ (801d124 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd4>)
 801d110:	4a05      	ldr	r2, [pc, #20]	@ (801d128 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd8>)
 801d112:	217c      	movs	r1, #124	@ 0x7c
 801d114:	4805      	ldr	r0, [pc, #20]	@ (801d12c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xdc>)
 801d116:	f00d fe69 	bl	802adec <__assert_func>
 801d11a:	bf00      	nop
 801d11c:	200875c8 	.word	0x200875c8
 801d120:	08000504 	.word	0x08000504
 801d124:	0802ddcc 	.word	0x0802ddcc
 801d128:	0802e638 	.word	0x0802e638
 801d12c:	0802ddf4 	.word	0x0802ddf4

0801d130 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d134:	b085      	sub	sp, #20
 801d136:	f89d 403c 	ldrb.w	r4, [sp, #60]	@ 0x3c
 801d13a:	2c00      	cmp	r4, #0
 801d13c:	d063      	beq.n	801d206 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801d13e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801d142:	2d00      	cmp	r5, #0
 801d144:	dd5f      	ble.n	801d206 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801d146:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801d14a:	2d00      	cmp	r5, #0
 801d14c:	dd5b      	ble.n	801d206 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801d14e:	460f      	mov	r7, r1
 801d150:	4606      	mov	r6, r0
 801d152:	6859      	ldr	r1, [r3, #4]
 801d154:	6818      	ldr	r0, [r3, #0]
 801d156:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 801d27c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 801d15a:	ab02      	add	r3, sp, #8
 801d15c:	c303      	stmia	r3!, {r0, r1}
 801d15e:	a802      	add	r0, sp, #8
 801d160:	4690      	mov	r8, r2
 801d162:	f7f8 fac9 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d168:	f8d9 0000 	ldr.w	r0, [r9]
 801d16c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801d170:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801d174:	b2dd      	uxtb	r5, r3
 801d176:	2800      	cmp	r0, #0
 801d178:	d060      	beq.n	801d23c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801d17a:	f7fe f883 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801d17e:	7b33      	ldrb	r3, [r6, #12]
 801d180:	2b01      	cmp	r3, #1
 801d182:	d043      	beq.n	801d20c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xdc>
 801d184:	d34e      	bcc.n	801d224 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801d186:	2b02      	cmp	r3, #2
 801d188:	d15e      	bne.n	801d248 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801d18a:	4b33      	ldr	r3, [pc, #204]	@ (801d258 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801d18c:	4a33      	ldr	r2, [pc, #204]	@ (801d25c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801d18e:	8819      	ldrh	r1, [r3, #0]
 801d190:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801d194:	8812      	ldrh	r2, [r2, #0]
 801d196:	4638      	mov	r0, r7
 801d198:	9300      	str	r3, [sp, #0]
 801d19a:	2310      	movs	r3, #16
 801d19c:	f7fb fe86 	bl	8018eac <nema_bind_dst_tex>
 801d1a0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d1a4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d1a8:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801d1ac:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801d1b0:	f7fb fdbc 	bl	8018d2c <nema_set_clip>
 801d1b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d1b8:	2100      	movs	r1, #0
 801d1ba:	461a      	mov	r2, r3
 801d1bc:	4828      	ldr	r0, [pc, #160]	@ (801d260 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>)
 801d1be:	f7fd fb95 	bl	801a8ec <nema_set_blend>
 801d1c2:	2200      	movs	r2, #0
 801d1c4:	4623      	mov	r3, r4
 801d1c6:	4611      	mov	r1, r2
 801d1c8:	4610      	mov	r0, r2
 801d1ca:	f7fb fde3 	bl	8018d94 <nema_rgba>
 801d1ce:	f7fd ff53 	bl	801b078 <nema_set_const_color>
 801d1d2:	462a      	mov	r2, r5
 801d1d4:	4659      	mov	r1, fp
 801d1d6:	23ff      	movs	r3, #255	@ 0xff
 801d1d8:	4650      	mov	r0, sl
 801d1da:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801d1de:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801d1e2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801d1e6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801d1ea:	f7fb fdd3 	bl	8018d94 <nema_rgba>
 801d1ee:	463b      	mov	r3, r7
 801d1f0:	9000      	str	r0, [sp, #0]
 801d1f2:	4632      	mov	r2, r6
 801d1f4:	4620      	mov	r0, r4
 801d1f6:	4629      	mov	r1, r5
 801d1f8:	f7fb ff4e 	bl	8019098 <nema_fill_rect>
 801d1fc:	f8d9 0000 	ldr.w	r0, [r9]
 801d200:	b1e0      	cbz	r0, 801d23c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801d202:	f7fe f85f 	bl	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801d206:	b005      	add	sp, #20
 801d208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d20c:	4b12      	ldr	r3, [pc, #72]	@ (801d258 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801d20e:	4a13      	ldr	r2, [pc, #76]	@ (801d25c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801d210:	8819      	ldrh	r1, [r3, #0]
 801d212:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d216:	8812      	ldrh	r2, [r2, #0]
 801d218:	4638      	mov	r0, r7
 801d21a:	9300      	str	r3, [sp, #0]
 801d21c:	2339      	movs	r3, #57	@ 0x39
 801d21e:	f7fb fe45 	bl	8018eac <nema_bind_dst_tex>
 801d222:	e7bd      	b.n	801d1a0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801d224:	4b0c      	ldr	r3, [pc, #48]	@ (801d258 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801d226:	4a0d      	ldr	r2, [pc, #52]	@ (801d25c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801d228:	8819      	ldrh	r1, [r3, #0]
 801d22a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d22e:	8812      	ldrh	r2, [r2, #0]
 801d230:	4638      	mov	r0, r7
 801d232:	9300      	str	r3, [sp, #0]
 801d234:	2304      	movs	r3, #4
 801d236:	f7fb fe39 	bl	8018eac <nema_bind_dst_tex>
 801d23a:	e7b1      	b.n	801d1a0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801d23c:	4b09      	ldr	r3, [pc, #36]	@ (801d264 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>)
 801d23e:	4a0a      	ldr	r2, [pc, #40]	@ (801d268 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x138>)
 801d240:	217c      	movs	r1, #124	@ 0x7c
 801d242:	480a      	ldr	r0, [pc, #40]	@ (801d26c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>)
 801d244:	f00d fdd2 	bl	802adec <__assert_func>
 801d248:	4b09      	ldr	r3, [pc, #36]	@ (801d270 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x140>)
 801d24a:	4a0a      	ldr	r2, [pc, #40]	@ (801d274 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>)
 801d24c:	f240 11a5 	movw	r1, #421	@ 0x1a5
 801d250:	4809      	ldr	r0, [pc, #36]	@ (801d278 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>)
 801d252:	f00d fdcb 	bl	802adec <__assert_func>
 801d256:	bf00      	nop
 801d258:	20087456 	.word	0x20087456
 801d25c:	20087458 	.word	0x20087458
 801d260:	08000504 	.word	0x08000504
 801d264:	0802ddcc 	.word	0x0802ddcc
 801d268:	0802e638 	.word	0x0802e638
 801d26c:	0802ddf4 	.word	0x0802ddf4
 801d270:	0802de28 	.word	0x0802de28
 801d274:	0802e6f4 	.word	0x0802e6f4
 801d278:	0802de70 	.word	0x0802de70
 801d27c:	200875c8 	.word	0x200875c8

0801d280 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d284:	b091      	sub	sp, #68	@ 0x44
 801d286:	f89d 108c 	ldrb.w	r1, [sp, #140]	@ 0x8c
 801d28a:	ac0a      	add	r4, sp, #40	@ 0x28
 801d28c:	e884 000c 	stmia.w	r4, {r2, r3}
 801d290:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801d294:	1e4f      	subs	r7, r1, #1
 801d296:	fa5f fc87 	uxtb.w	ip, r7
 801d29a:	4682      	mov	sl, r0
 801d29c:	9303      	str	r3, [sp, #12]
 801d29e:	f89d 0090 	ldrb.w	r0, [sp, #144]	@ 0x90
 801d2a2:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 801d2a6:	f1bc 0f01 	cmp.w	ip, #1
 801d2aa:	9304      	str	r3, [sp, #16]
 801d2ac:	f9bd 8068 	ldrsh.w	r8, [sp, #104]	@ 0x68
 801d2b0:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	@ 0x6c
 801d2b4:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d2b6:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 801d2ba:	9005      	str	r0, [sp, #20]
 801d2bc:	f89d 6094 	ldrb.w	r6, [sp, #148]	@ 0x94
 801d2c0:	d905      	bls.n	801d2ce <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801d2c2:	2904      	cmp	r1, #4
 801d2c4:	f000 80d0 	beq.w	801d468 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 801d2c8:	2908      	cmp	r1, #8
 801d2ca:	f040 816f 	bne.w	801d5ac <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32c>
 801d2ce:	7b53      	ldrb	r3, [r2, #13]
 801d2d0:	7990      	ldrb	r0, [r2, #6]
 801d2d2:	0159      	lsls	r1, r3, #5
 801d2d4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801d2d8:	ea50 0901 	orrs.w	r9, r0, r1
 801d2dc:	f000 80c1 	beq.w	801d462 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801d2e0:	011b      	lsls	r3, r3, #4
 801d2e2:	79d0      	ldrb	r0, [r2, #7]
 801d2e4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d2e8:	ea50 0301 	orrs.w	r3, r0, r1
 801d2ec:	9306      	str	r3, [sp, #24]
 801d2ee:	f000 80b8 	beq.w	801d462 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801d2f2:	f992 3009 	ldrsb.w	r3, [r2, #9]
 801d2f6:	9a03      	ldr	r2, [sp, #12]
 801d2f8:	b29b      	uxth	r3, r3
 801d2fa:	2a00      	cmp	r2, #0
 801d2fc:	f040 80be 	bne.w	801d47c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fc>
 801d300:	4498      	add	r8, r3
 801d302:	fa0f f888 	sxth.w	r8, r8
 801d306:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d308:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d30c:	4543      	cmp	r3, r8
 801d30e:	dd06      	ble.n	801d31e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x9e>
 801d310:	9a03      	ldr	r2, [sp, #12]
 801d312:	441a      	add	r2, r3
 801d314:	eba2 0508 	sub.w	r5, r2, r8
 801d318:	4698      	mov	r8, r3
 801d31a:	b2ab      	uxth	r3, r5
 801d31c:	9303      	str	r3, [sp, #12]
 801d31e:	f8df c30c 	ldr.w	ip, [pc, #780]	@ 801d62c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801d322:	465a      	mov	r2, fp
 801d324:	f89c 5000 	ldrb.w	r5, [ip]
 801d328:	4641      	mov	r1, r8
 801d32a:	4633      	mov	r3, r6
 801d32c:	4620      	mov	r0, r4
 801d32e:	9507      	str	r5, [sp, #28]
 801d330:	f7f8 f856 	bl	80153e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d334:	465a      	mov	r2, fp
 801d336:	4641      	mov	r1, r8
 801d338:	4633      	mov	r3, r6
 801d33a:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801d33e:	4620      	mov	r0, r4
 801d340:	f7f8 f86b 	bl	801541a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d344:	a910      	add	r1, sp, #64	@ 0x40
 801d346:	f821 0d0a 	strh.w	r0, [r1, #-10]!
 801d34a:	a80d      	add	r0, sp, #52	@ 0x34
 801d34c:	f7f8 f992 	bl	8015674 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d350:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d352:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d356:	9308      	str	r3, [sp, #32]
 801d358:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d35a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801d35e:	fa5f f883 	uxtb.w	r8, r3
 801d362:	2f07      	cmp	r7, #7
 801d364:	f200 811f 	bhi.w	801d5a6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x326>
 801d368:	e8df f017 	tbh	[pc, r7, lsl #1]
 801d36c:	009b00a1 	.word	0x009b00a1
 801d370:	0095011d 	.word	0x0095011d
 801d374:	011d011d 	.word	0x011d011d
 801d378:	0008011d 	.word	0x0008011d
 801d37c:	2708      	movs	r7, #8
 801d37e:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801d382:	4ca1      	ldr	r4, [pc, #644]	@ (801d608 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801d384:	6820      	ldr	r0, [r4, #0]
 801d386:	2800      	cmp	r0, #0
 801d388:	f000 8137 	beq.w	801d5fa <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801d38c:	f7fd ff7a 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801d390:	f8da 3000 	ldr.w	r3, [sl]
 801d394:	4650      	mov	r0, sl
 801d396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d398:	4798      	blx	r3
 801d39a:	2e02      	cmp	r6, #2
 801d39c:	f000 80e6 	beq.w	801d56c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801d3a0:	2e03      	cmp	r6, #3
 801d3a2:	f000 80c7 	beq.w	801d534 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b4>
 801d3a6:	2e01      	cmp	r6, #1
 801d3a8:	f000 80a8 	beq.w	801d4fc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 801d3ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d3ae:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801d3b2:	8819      	ldrh	r1, [r3, #0]
 801d3b4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801d3b8:	440a      	add	r2, r1
 801d3ba:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d3bc:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801d3c0:	8848      	ldrh	r0, [r1, #2]
 801d3c2:	6849      	ldr	r1, [r1, #4]
 801d3c4:	4403      	add	r3, r0
 801d3c6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d3ca:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d3cc:	a80e      	add	r0, sp, #56	@ 0x38
 801d3ce:	f7f8 f993 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3d2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801d3d6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801d3da:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801d3de:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801d3e2:	f7fb fca3 	bl	8018d2c <nema_set_clip>
 801d3e6:	2200      	movs	r2, #0
 801d3e8:	9d05      	ldr	r5, [sp, #20]
 801d3ea:	4611      	mov	r1, r2
 801d3ec:	462b      	mov	r3, r5
 801d3ee:	4610      	mov	r0, r2
 801d3f0:	f7fb fcd0 	bl	8018d94 <nema_rgba>
 801d3f4:	f7fd fe40 	bl	801b078 <nema_set_const_color>
 801d3f8:	462b      	mov	r3, r5
 801d3fa:	4642      	mov	r2, r8
 801d3fc:	4659      	mov	r1, fp
 801d3fe:	9808      	ldr	r0, [sp, #32]
 801d400:	f7fb fcc8 	bl	8018d94 <nema_rgba>
 801d404:	f7fb fc86 	bl	8018d14 <nema_set_tex_color>
 801d408:	f04f 33ff 	mov.w	r3, #4294967295
 801d40c:	2201      	movs	r2, #1
 801d40e:	2100      	movs	r1, #0
 801d410:	487e      	ldr	r0, [pc, #504]	@ (801d60c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801d412:	f7fd fa6b 	bl	801a8ec <nema_set_blend>
 801d416:	2200      	movs	r2, #0
 801d418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d41a:	9201      	str	r2, [sp, #4]
 801d41c:	9300      	str	r3, [sp, #0]
 801d41e:	4649      	mov	r1, r9
 801d420:	463b      	mov	r3, r7
 801d422:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801d424:	9a06      	ldr	r2, [sp, #24]
 801d426:	f7fb fcbd 	bl	8018da4 <nema_bind_src_tex>
 801d42a:	9b07      	ldr	r3, [sp, #28]
 801d42c:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801d430:	2b01      	cmp	r3, #1
 801d432:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801d436:	d040      	beq.n	801d4ba <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 801d438:	2e02      	cmp	r6, #2
 801d43a:	d051      	beq.n	801d4e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801d43c:	2e03      	cmp	r6, #3
 801d43e:	f000 80c7 	beq.w	801d5d0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801d442:	2e01      	cmp	r6, #1
 801d444:	9b04      	ldr	r3, [sp, #16]
 801d446:	f000 80b8 	beq.w	801d5ba <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801d44a:	1ac9      	subs	r1, r1, r3
 801d44c:	9b03      	ldr	r3, [sp, #12]
 801d44e:	1ac0      	subs	r0, r0, r3
 801d450:	f7fb fe34 	bl	80190bc <nema_blit>
 801d454:	6823      	ldr	r3, [r4, #0]
 801d456:	2b00      	cmp	r3, #0
 801d458:	f000 80cf 	beq.w	801d5fa <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801d45c:	2201      	movs	r2, #1
 801d45e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 801d462:	b011      	add	sp, #68	@ 0x44
 801d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d468:	2b00      	cmp	r3, #0
 801d46a:	f47f af30 	bne.w	801d2ce <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801d46e:	4b68      	ldr	r3, [pc, #416]	@ (801d610 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801d470:	4a68      	ldr	r2, [pc, #416]	@ (801d614 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801d472:	f240 11bb 	movw	r1, #443	@ 0x1bb
 801d476:	4868      	ldr	r0, [pc, #416]	@ (801d618 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801d478:	f00d fcb8 	bl	802adec <__assert_func>
 801d47c:	1ad5      	subs	r5, r2, r3
 801d47e:	b2ab      	uxth	r3, r5
 801d480:	041a      	lsls	r2, r3, #16
 801d482:	9303      	str	r3, [sp, #12]
 801d484:	f57f af3f 	bpl.w	801d306 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801d488:	eba8 0803 	sub.w	r8, r8, r3
 801d48c:	2300      	movs	r3, #0
 801d48e:	fa0f f888 	sxth.w	r8, r8
 801d492:	9303      	str	r3, [sp, #12]
 801d494:	e737      	b.n	801d306 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801d496:	f109 0301 	add.w	r3, r9, #1
 801d49a:	105b      	asrs	r3, r3, #1
 801d49c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d49e:	2729      	movs	r7, #41	@ 0x29
 801d4a0:	e76f      	b.n	801d382 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801d4a2:	f109 0303 	add.w	r3, r9, #3
 801d4a6:	109b      	asrs	r3, r3, #2
 801d4a8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4aa:	2728      	movs	r7, #40	@ 0x28
 801d4ac:	e769      	b.n	801d382 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801d4ae:	f109 0307 	add.w	r3, r9, #7
 801d4b2:	10db      	asrs	r3, r3, #3
 801d4b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4b6:	2727      	movs	r7, #39	@ 0x27
 801d4b8:	e763      	b.n	801d382 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801d4ba:	2e02      	cmp	r6, #2
 801d4bc:	f000 8093 	beq.w	801d5e6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 801d4c0:	2e03      	cmp	r6, #3
 801d4c2:	d00d      	beq.n	801d4e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801d4c4:	2e01      	cmp	r6, #1
 801d4c6:	f000 8091 	beq.w	801d5ec <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801d4ca:	461a      	mov	r2, r3
 801d4cc:	9b03      	ldr	r3, [sp, #12]
 801d4ce:	4419      	add	r1, r3
 801d4d0:	9b04      	ldr	r3, [sp, #16]
 801d4d2:	eba1 0109 	sub.w	r1, r1, r9
 801d4d6:	3101      	adds	r1, #1
 801d4d8:	1ac0      	subs	r0, r0, r3
 801d4da:	f7fb fe09 	bl	80190f0 <nema_blit_rotate>
 801d4de:	e7b9      	b.n	801d454 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801d4e0:	9b04      	ldr	r3, [sp, #16]
 801d4e2:	2202      	movs	r2, #2
 801d4e4:	4419      	add	r1, r3
 801d4e6:	9b03      	ldr	r3, [sp, #12]
 801d4e8:	4418      	add	r0, r3
 801d4ea:	9b06      	ldr	r3, [sp, #24]
 801d4ec:	eba0 0009 	sub.w	r0, r0, r9
 801d4f0:	1ac9      	subs	r1, r1, r3
 801d4f2:	3101      	adds	r1, #1
 801d4f4:	3001      	adds	r0, #1
 801d4f6:	f7fb fdfb 	bl	80190f0 <nema_blit_rotate>
 801d4fa:	e7ab      	b.n	801d454 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801d4fc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801d500:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d504:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d506:	440b      	add	r3, r1
 801d508:	8852      	ldrh	r2, [r2, #2]
 801d50a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d50c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d50e:	1a9b      	subs	r3, r3, r2
 801d510:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 801d514:	f8b0 c000 	ldrh.w	ip, [r0]
 801d518:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801d51c:	8880      	ldrh	r0, [r0, #4]
 801d51e:	1a5b      	subs	r3, r3, r1
 801d520:	4462      	add	r2, ip
 801d522:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801d526:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c
 801d52a:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801d52e:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 801d532:	e74b      	b.n	801d3cc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801d534:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801d538:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801d53c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d53e:	440b      	add	r3, r1
 801d540:	8812      	ldrh	r2, [r2, #0]
 801d542:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d544:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d546:	1a9b      	subs	r3, r3, r2
 801d548:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 801d54c:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 801d550:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801d554:	88c0      	ldrh	r0, [r0, #6]
 801d556:	1a5b      	subs	r3, r3, r1
 801d558:	4462      	add	r2, ip
 801d55a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d55e:	f8ad 103e 	strh.w	r1, [sp, #62]	@ 0x3e
 801d562:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801d566:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 801d56a:	e72f      	b.n	801d3cc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801d56c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801d570:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801d574:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801d578:	440a      	add	r2, r1
 801d57a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d57c:	8808      	ldrh	r0, [r1, #0]
 801d57e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801d582:	1a12      	subs	r2, r2, r0
 801d584:	440b      	add	r3, r1
 801d586:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d588:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d58a:	8849      	ldrh	r1, [r1, #2]
 801d58c:	8880      	ldrh	r0, [r0, #4]
 801d58e:	1a5b      	subs	r3, r3, r1
 801d590:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d592:	1a12      	subs	r2, r2, r0
 801d594:	88c8      	ldrh	r0, [r1, #6]
 801d596:	6849      	ldr	r1, [r1, #4]
 801d598:	1a1b      	subs	r3, r3, r0
 801d59a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801d59e:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d5a2:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d5a4:	e712      	b.n	801d3cc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801d5a6:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801d5aa:	e6ea      	b.n	801d382 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801d5ac:	4b1b      	ldr	r3, [pc, #108]	@ (801d61c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801d5ae:	4a19      	ldr	r2, [pc, #100]	@ (801d614 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801d5b0:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
 801d5b4:	4818      	ldr	r0, [pc, #96]	@ (801d618 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801d5b6:	f00d fc19 	bl	802adec <__assert_func>
 801d5ba:	4403      	add	r3, r0
 801d5bc:	4618      	mov	r0, r3
 801d5be:	9b06      	ldr	r3, [sp, #24]
 801d5c0:	2203      	movs	r2, #3
 801d5c2:	1ac0      	subs	r0, r0, r3
 801d5c4:	9b03      	ldr	r3, [sp, #12]
 801d5c6:	3001      	adds	r0, #1
 801d5c8:	1ac9      	subs	r1, r1, r3
 801d5ca:	f7fb fd91 	bl	80190f0 <nema_blit_rotate>
 801d5ce:	e741      	b.n	801d454 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801d5d0:	9b03      	ldr	r3, [sp, #12]
 801d5d2:	2201      	movs	r2, #1
 801d5d4:	4419      	add	r1, r3
 801d5d6:	9b04      	ldr	r3, [sp, #16]
 801d5d8:	eba1 0109 	sub.w	r1, r1, r9
 801d5dc:	3101      	adds	r1, #1
 801d5de:	1ac0      	subs	r0, r0, r3
 801d5e0:	f7fb fd86 	bl	80190f0 <nema_blit_rotate>
 801d5e4:	e736      	b.n	801d454 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801d5e6:	9b04      	ldr	r3, [sp, #16]
 801d5e8:	4418      	add	r0, r3
 801d5ea:	e7e8      	b.n	801d5be <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801d5ec:	9b04      	ldr	r3, [sp, #16]
 801d5ee:	1ac9      	subs	r1, r1, r3
 801d5f0:	9b03      	ldr	r3, [sp, #12]
 801d5f2:	1ac0      	subs	r0, r0, r3
 801d5f4:	f7fb fd62 	bl	80190bc <nema_blit>
 801d5f8:	e72c      	b.n	801d454 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801d5fa:	4b09      	ldr	r3, [pc, #36]	@ (801d620 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801d5fc:	4a09      	ldr	r2, [pc, #36]	@ (801d624 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801d5fe:	217c      	movs	r1, #124	@ 0x7c
 801d600:	4809      	ldr	r0, [pc, #36]	@ (801d628 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801d602:	f00d fbf3 	bl	802adec <__assert_func>
 801d606:	bf00      	nop
 801d608:	200875c8 	.word	0x200875c8
 801d60c:	08000504 	.word	0x08000504
 801d610:	0802e340 	.word	0x0802e340
 801d614:	0802fa74 	.word	0x0802fa74
 801d618:	0802de70 	.word	0x0802de70
 801d61c:	0802e2b0 	.word	0x0802e2b0
 801d620:	0802ddcc 	.word	0x0802ddcc
 801d624:	0802e638 	.word	0x0802e638
 801d628:	0802ddf4 	.word	0x0802ddf4
 801d62c:	20087454 	.word	0x20087454

0801d630 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d634:	ed2d 8b08 	vpush	{d8-d11}
 801d638:	b08b      	sub	sp, #44	@ 0x2c
 801d63a:	f89d 707c 	ldrb.w	r7, [sp, #124]	@ 0x7c
 801d63e:	e9dd 951c 	ldrd	r9, r5, [sp, #112]	@ 0x70
 801d642:	f8bd 8078 	ldrh.w	r8, [sp, #120]	@ 0x78
 801d646:	f8bd e080 	ldrh.w	lr, [sp, #128]	@ 0x80
 801d64a:	2f00      	cmp	r7, #0
 801d64c:	d067      	beq.n	801d71e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xee>
 801d64e:	f9b5 a004 	ldrsh.w	sl, [r5, #4]
 801d652:	f1ba 0f00 	cmp.w	sl, #0
 801d656:	dd62      	ble.n	801d71e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xee>
 801d658:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801d65c:	f1ba 0f00 	cmp.w	sl, #0
 801d660:	dd5d      	ble.n	801d71e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xee>
 801d662:	f3c8 0a87 	ubfx	sl, r8, #2, #8
 801d666:	f1ba 0f0b 	cmp.w	sl, #11
 801d66a:	d05d      	beq.n	801d728 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xf8>
 801d66c:	461c      	mov	r4, r3
 801d66e:	4bcd      	ldr	r3, [pc, #820]	@ (801d9a4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x374>)
 801d670:	4616      	mov	r6, r2
 801d672:	781b      	ldrb	r3, [r3, #0]
 801d674:	6862      	ldr	r2, [r4, #4]
 801d676:	2b01      	cmp	r3, #1
 801d678:	9205      	str	r2, [sp, #20]
 801d67a:	4684      	mov	ip, r0
 801d67c:	e9d4 b202 	ldrd	fp, r2, [r4, #8]
 801d680:	9202      	str	r2, [sp, #8]
 801d682:	d102      	bne.n	801d68a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5a>
 801d684:	f8cd b008 	str.w	fp, [sp, #8]
 801d688:	4693      	mov	fp, r2
 801d68a:	f1ba 0f0d 	cmp.w	sl, #13
 801d68e:	d03d      	beq.n	801d70c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xdc>
 801d690:	4623      	mov	r3, r4
 801d692:	4cc5      	ldr	r4, [pc, #788]	@ (801d9a8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x378>)
 801d694:	6820      	ldr	r0, [r4, #0]
 801d696:	2800      	cmp	r0, #0
 801d698:	f000 8243 	beq.w	801db22 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4f2>
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	f8cd c010 	str.w	ip, [sp, #16]
 801d6a2:	9303      	str	r3, [sp, #12]
 801d6a4:	f7fd fdee 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801d6a8:	9a04      	ldr	r2, [sp, #16]
 801d6aa:	6813      	ldr	r3, [r2, #0]
 801d6ac:	4610      	mov	r0, r2
 801d6ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d6b0:	4798      	blx	r3
 801d6b2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801d6b6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801d6ba:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801d6be:	f9b5 0000 	ldrsh.w	r0, [r5]
 801d6c2:	f7fb fb33 	bl	8018d2c <nema_set_clip>
 801d6c6:	2200      	movs	r2, #0
 801d6c8:	463b      	mov	r3, r7
 801d6ca:	4611      	mov	r1, r2
 801d6cc:	4610      	mov	r0, r2
 801d6ce:	f7fb fb61 	bl	8018d94 <nema_rgba>
 801d6d2:	f7fd fcd1 	bl	801b078 <nema_set_const_color>
 801d6d6:	f04f 33ff 	mov.w	r3, #4294967295
 801d6da:	2201      	movs	r2, #1
 801d6dc:	2100      	movs	r1, #0
 801d6de:	48b3      	ldr	r0, [pc, #716]	@ (801d9ac <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37c>)
 801d6e0:	f7fd f904 	bl	801a8ec <nema_set_blend>
 801d6e4:	f1ba 0f0d 	cmp.w	sl, #13
 801d6e8:	f200 8221 	bhi.w	801db2e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4fe>
 801d6ec:	e8df f01a 	tbh	[pc, sl, lsl #1]
 801d6f0:	01720027 	.word	0x01720027
 801d6f4:	021f0170 	.word	0x021f0170
 801d6f8:	021f021f 	.word	0x021f021f
 801d6fc:	021f021f 	.word	0x021f021f
 801d700:	021f021f 	.word	0x021f021f
 801d704:	021f021f 	.word	0x021f021f
 801d708:	01570162 	.word	0x01570162
 801d70c:	9b05      	ldr	r3, [sp, #20]
 801d70e:	b133      	cbz	r3, 801d71e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xee>
 801d710:	781b      	ldrb	r3, [r3, #0]
 801d712:	f1a3 0216 	sub.w	r2, r3, #22
 801d716:	2a01      	cmp	r2, #1
 801d718:	d9ba      	bls.n	801d690 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x60>
 801d71a:	2b12      	cmp	r3, #18
 801d71c:	d0b8      	beq.n	801d690 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x60>
 801d71e:	b00b      	add	sp, #44	@ 0x2c
 801d720:	ecbd 8b08 	vpop	{d8-d11}
 801d724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d728:	e9cd 7e1f 	strd	r7, lr, [sp, #124]	@ 0x7c
 801d72c:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
 801d730:	b00b      	add	sp, #44	@ 0x2c
 801d732:	ecbd 8b08 	vpop	{d8-d11}
 801d736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d73a:	f7f7 b94b 	b.w	80149d4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 801d73e:	2304      	movs	r3, #4
 801d740:	f04f 31ff 	mov.w	r1, #4294967295
 801d744:	f008 0201 	and.w	r2, r8, #1
 801d748:	9201      	str	r2, [sp, #4]
 801d74a:	9803      	ldr	r0, [sp, #12]
 801d74c:	9a02      	ldr	r2, [sp, #8]
 801d74e:	9100      	str	r1, [sp, #0]
 801d750:	4659      	mov	r1, fp
 801d752:	f7fb fb27 	bl	8018da4 <nema_bind_src_tex>
 801d756:	2001      	movs	r0, #1
 801d758:	f7fc f992 	bl	8019a80 <nema_enable_tiling>
 801d75c:	2301      	movs	r3, #1
 801d75e:	461a      	mov	r2, r3
 801d760:	4619      	mov	r1, r3
 801d762:	4618      	mov	r0, r3
 801d764:	f7fc f9b4 	bl	8019ad0 <nema_enable_aa>
 801d768:	edd6 7a03 	vldr	s15, [r6, #12]
 801d76c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d770:	ed96 7a04 	vldr	s14, [r6, #16]
 801d774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d778:	4607      	mov	r7, r0
 801d77a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d77e:	f240 81aa 	bls.w	801dad6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a6>
 801d782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d786:	bf94      	ite	ls
 801d788:	2301      	movls	r3, #1
 801d78a:	2302      	movhi	r3, #2
 801d78c:	edd6 7a08 	vldr	s15, [r6, #32]
 801d790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d794:	2200      	movs	r2, #0
 801d796:	ed96 7a09 	vldr	s14, [r6, #36]	@ 0x24
 801d79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d79e:	a90a      	add	r1, sp, #40	@ 0x28
 801d7a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d7a4:	f843 2c10 	str.w	r2, [r3, #-16]
 801d7a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d7ac:	f240 818d 	bls.w	801daca <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x49a>
 801d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7b4:	bf94      	ite	ls
 801d7b6:	2301      	movls	r3, #1
 801d7b8:	2302      	movhi	r3, #2
 801d7ba:	edd6 7a0d 	vldr	s15, [r6, #52]	@ 0x34
 801d7be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d7c2:	2201      	movs	r2, #1
 801d7c4:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 801d7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7cc:	a90a      	add	r1, sp, #40	@ 0x28
 801d7ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d7d2:	f843 2c10 	str.w	r2, [r3, #-16]
 801d7d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d7da:	f240 8188 	bls.w	801daee <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4be>
 801d7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7e2:	bf94      	ite	ls
 801d7e4:	2301      	movls	r3, #1
 801d7e6:	2302      	movhi	r3, #2
 801d7e8:	edd6 7a12 	vldr	s15, [r6, #72]	@ 0x48
 801d7ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d7f0:	2202      	movs	r2, #2
 801d7f2:	ed96 7a13 	vldr	s14, [r6, #76]	@ 0x4c
 801d7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7fa:	a90a      	add	r1, sp, #40	@ 0x28
 801d7fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d800:	f843 2c10 	str.w	r2, [r3, #-16]
 801d804:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801d808:	f240 816b 	bls.w	801dae2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4b2>
 801d80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d810:	bf94      	ite	ls
 801d812:	2301      	movls	r3, #1
 801d814:	2302      	movhi	r3, #2
 801d816:	2203      	movs	r2, #3
 801d818:	a90a      	add	r1, sp, #40	@ 0x28
 801d81a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d81e:	f843 2c10 	str.w	r2, [r3, #-16]
 801d822:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801d826:	9907      	ldr	r1, [sp, #28]
 801d828:	f340 80d6 	ble.w	801d9d8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801d82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d82e:	9808      	ldr	r0, [sp, #32]
 801d830:	9a06      	ldr	r2, [sp, #24]
 801d832:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d836:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801d83a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d83e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801d842:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d846:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 801d84a:	eb06 080e 	add.w	r8, r6, lr
 801d84e:	0089      	lsls	r1, r1, #2
 801d850:	0080      	lsls	r0, r0, #2
 801d852:	1872      	adds	r2, r6, r1
 801d854:	eb06 0a00 	add.w	sl, r6, r0
 801d858:	eb06 030c 	add.w	r3, r6, ip
 801d85c:	5871      	ldr	r1, [r6, r1]
 801d85e:	5830      	ldr	r0, [r6, r0]
 801d860:	f856 c00c 	ldr.w	ip, [r6, ip]
 801d864:	edd8 4a01 	vldr	s9, [r8, #4]
 801d868:	f856 800e 	ldr.w	r8, [r6, lr]
 801d86c:	9e02      	ldr	r6, [sp, #8]
 801d86e:	6852      	ldr	r2, [r2, #4]
 801d870:	2eff      	cmp	r6, #255	@ 0xff
 801d872:	ed9a 5a01 	vldr	s10, [sl, #4]
 801d876:	685b      	ldr	r3, [r3, #4]
 801d878:	f340 80d2 	ble.w	801da20 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3f0>
 801d87c:	429a      	cmp	r2, r3
 801d87e:	f000 815d 	beq.w	801db3c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x50c>
 801d882:	f9b9 6000 	ldrsh.w	r6, [r9]
 801d886:	ee07 ca90 	vmov	s15, ip
 801d88a:	ee08 6a90 	vmov	s17, r6
 801d88e:	f9b9 6002 	ldrsh.w	r6, [r9, #2]
 801d892:	ee04 3a10 	vmov	s8, r3
 801d896:	ee08 6a10 	vmov	s16, r6
 801d89a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801d89e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801d8a2:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801d8a6:	eef8 3ac4 	vcvt.f32.s32	s7, s8
 801d8aa:	ee07 1a90 	vmov	s15, r1
 801d8ae:	ee07 0a10 	vmov	s14, r0
 801d8b2:	ee06 8a10 	vmov	s12, r8
 801d8b6:	ee04 2a10 	vmov	s8, r2
 801d8ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801d9b0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801d8be:	eef0 ba68 	vmov.f32	s23, s17
 801d8c2:	eeb0 ba68 	vmov.f32	s22, s17
 801d8c6:	eef0 aa68 	vmov.f32	s21, s17
 801d8ca:	eeb0 aa48 	vmov.f32	s20, s16
 801d8ce:	eef0 9a48 	vmov.f32	s19, s16
 801d8d2:	eeb0 9a48 	vmov.f32	s18, s16
 801d8d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8de:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801d8e2:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801d8e6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801d8ea:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801d8ee:	f9b5 b006 	ldrsh.w	fp, [r5, #6]
 801d8f2:	eee5 baa6 	vfma.f32	s23, s11, s13
 801d8f6:	f1bb 0f00 	cmp.w	fp, #0
 801d8fa:	eea7 baa6 	vfma.f32	s22, s15, s13
 801d8fe:	eee7 aa26 	vfma.f32	s21, s14, s13
 801d902:	eee6 8a26 	vfma.f32	s17, s12, s13
 801d906:	eea3 aaa6 	vfma.f32	s20, s7, s13
 801d90a:	eee4 9a26 	vfma.f32	s19, s8, s13
 801d90e:	eea5 9a26 	vfma.f32	s18, s10, s13
 801d912:	eea4 8aa6 	vfma.f32	s16, s9, s13
 801d916:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 801d91a:	dd38      	ble.n	801d98e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35e>
 801d91c:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 801d920:	f1bb 0f80 	cmp.w	fp, #128	@ 0x80
 801d924:	46da      	mov	sl, fp
 801d926:	bfa8      	it	ge
 801d928:	f04f 0a80 	movge.w	sl, #128	@ 0x80
 801d92c:	2e00      	cmp	r6, #0
 801d92e:	f9b5 8000 	ldrsh.w	r8, [r5]
 801d932:	dd25      	ble.n	801d980 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x350>
 801d934:	2e80      	cmp	r6, #128	@ 0x80
 801d936:	4632      	mov	r2, r6
 801d938:	4640      	mov	r0, r8
 801d93a:	4653      	mov	r3, sl
 801d93c:	bfa8      	it	ge
 801d93e:	2280      	movge	r2, #128	@ 0x80
 801d940:	4649      	mov	r1, r9
 801d942:	f7fb f9f3 	bl	8018d2c <nema_set_clip>
 801d946:	eef0 3a48 	vmov.f32	s7, s16
 801d94a:	eeb0 3a68 	vmov.f32	s6, s17
 801d94e:	eef0 2a49 	vmov.f32	s5, s18
 801d952:	eeb0 2a6a 	vmov.f32	s4, s21
 801d956:	eef0 1a69 	vmov.f32	s3, s19
 801d95a:	eeb0 1a4b 	vmov.f32	s2, s22
 801d95e:	eef0 0a4a 	vmov.f32	s1, s20
 801d962:	eeb0 0a6b 	vmov.f32	s0, s23
 801d966:	f7fb fd23 	bl	80193b0 <nema_blit_quad_fit>
 801d96a:	6820      	ldr	r0, [r4, #0]
 801d96c:	2800      	cmp	r0, #0
 801d96e:	f000 80d8 	beq.w	801db22 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4f2>
 801d972:	3e80      	subs	r6, #128	@ 0x80
 801d974:	f7fd fca6 	bl	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801d978:	2e00      	cmp	r6, #0
 801d97a:	f108 0880 	add.w	r8, r8, #128	@ 0x80
 801d97e:	dcd9      	bgt.n	801d934 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>
 801d980:	f1ab 0b80 	sub.w	fp, fp, #128	@ 0x80
 801d984:	f1bb 0f00 	cmp.w	fp, #0
 801d988:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 801d98c:	dcc6      	bgt.n	801d91c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ec>
 801d98e:	4638      	mov	r0, r7
 801d990:	b00b      	add	sp, #44	@ 0x2c
 801d992:	ecbd 8b08 	vpop	{d8-d11}
 801d996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d99a:	f7fc b8bb 	b.w	8019b14 <nema_enable_aa_flags>
 801d99e:	9b05      	ldr	r3, [sp, #20]
 801d9a0:	781b      	ldrb	r3, [r3, #0]
 801d9a2:	e6cd      	b.n	801d740 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x110>
 801d9a4:	20087454 	.word	0x20087454
 801d9a8:	200875c8 	.word	0x200875c8
 801d9ac:	08000504 	.word	0x08000504
 801d9b0:	3d800000 	.word	0x3d800000
 801d9b4:	4a65      	ldr	r2, [pc, #404]	@ (801db4c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x51c>)
 801d9b6:	23ff      	movs	r3, #255	@ 0xff
 801d9b8:	6810      	ldr	r0, [r2, #0]
 801d9ba:	b2c2      	uxtb	r2, r0
 801d9bc:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801d9c0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801d9c4:	f7fb f9e6 	bl	8018d94 <nema_rgba>
 801d9c8:	f7fb f9a4 	bl	8018d14 <nema_set_tex_color>
 801d9cc:	2329      	movs	r3, #41	@ 0x29
 801d9ce:	e6b7      	b.n	801d740 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x110>
 801d9d0:	2310      	movs	r3, #16
 801d9d2:	e6b5      	b.n	801d740 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x110>
 801d9d4:	2339      	movs	r3, #57	@ 0x39
 801d9d6:	e6b3      	b.n	801d740 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x110>
 801d9d8:	9b08      	ldr	r3, [sp, #32]
 801d9da:	9806      	ldr	r0, [sp, #24]
 801d9dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d9de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d9e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d9e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801d9ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d9ee:	009b      	lsls	r3, r3, #2
 801d9f0:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 801d9f4:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 801d9f8:	0089      	lsls	r1, r1, #2
 801d9fa:	18f0      	adds	r0, r6, r3
 801d9fc:	1872      	adds	r2, r6, r1
 801d9fe:	eb06 0a0c 	add.w	sl, r6, ip
 801da02:	eb06 080e 	add.w	r8, r6, lr
 801da06:	ed90 5a01 	vldr	s10, [r0, #4]
 801da0a:	edd8 4a01 	vldr	s9, [r8, #4]
 801da0e:	58f0      	ldr	r0, [r6, r3]
 801da10:	6852      	ldr	r2, [r2, #4]
 801da12:	5871      	ldr	r1, [r6, r1]
 801da14:	f8da 3004 	ldr.w	r3, [sl, #4]
 801da18:	f856 c00c 	ldr.w	ip, [r6, ip]
 801da1c:	f856 800e 	ldr.w	r8, [r6, lr]
 801da20:	429a      	cmp	r2, r3
 801da22:	d06a      	beq.n	801dafa <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ca>
 801da24:	ee07 8a90 	vmov	s15, r8
 801da28:	f9b9 5000 	ldrsh.w	r5, [r9]
 801da2c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801da30:	ee00 5a10 	vmov	s0, r5
 801da34:	ee07 0a90 	vmov	s15, r0
 801da38:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 801da3c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801da40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801da44:	ee00 5a90 	vmov	s1, r5
 801da48:	ee07 1a90 	vmov	s15, r1
 801da4c:	eddf 6a40 	vldr	s13, [pc, #256]	@ 801db50 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x520>
 801da50:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801da54:	ee04 2a10 	vmov	s8, r2
 801da58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da5c:	eeb0 1a40 	vmov.f32	s2, s0
 801da60:	eef8 1ac4 	vcvt.f32.s32	s3, s8
 801da64:	ee05 ca90 	vmov	s11, ip
 801da68:	ee04 3a10 	vmov	s8, r3
 801da6c:	eea7 1aa6 	vfma.f32	s2, s15, s13
 801da70:	eef0 7a60 	vmov.f32	s15, s1
 801da74:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801da78:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801da7c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801da80:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801da84:	eeb0 3a40 	vmov.f32	s6, s0
 801da88:	eeb0 2a40 	vmov.f32	s4, s0
 801da8c:	eef0 3a60 	vmov.f32	s7, s1
 801da90:	eef0 2a60 	vmov.f32	s5, s1
 801da94:	eee1 7aa6 	vfma.f32	s15, s3, s13
 801da98:	eea6 3a26 	vfma.f32	s6, s12, s13
 801da9c:	eea7 2a26 	vfma.f32	s4, s14, s13
 801daa0:	eea5 0aa6 	vfma.f32	s0, s11, s13
 801daa4:	eee4 3aa6 	vfma.f32	s7, s9, s13
 801daa8:	eee5 2a26 	vfma.f32	s5, s10, s13
 801daac:	eef0 1a67 	vmov.f32	s3, s15
 801dab0:	eee4 0a26 	vfma.f32	s1, s8, s13
 801dab4:	f7fb fc7c 	bl	80193b0 <nema_blit_quad_fit>
 801dab8:	6820      	ldr	r0, [r4, #0]
 801daba:	b390      	cbz	r0, 801db22 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4f2>
 801dabc:	b00b      	add	sp, #44	@ 0x2c
 801dabe:	ecbd 8b08 	vpop	{d8-d11}
 801dac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac6:	f7fd bbfd 	b.w	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801daca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dace:	bf94      	ite	ls
 801dad0:	4613      	movls	r3, r2
 801dad2:	2303      	movhi	r3, #3
 801dad4:	e671      	b.n	801d7ba <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x18a>
 801dad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dada:	bf94      	ite	ls
 801dadc:	2300      	movls	r3, #0
 801dade:	2303      	movhi	r3, #3
 801dae0:	e654      	b.n	801d78c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x15c>
 801dae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dae6:	bf94      	ite	ls
 801dae8:	2300      	movls	r3, #0
 801daea:	2303      	movhi	r3, #3
 801daec:	e693      	b.n	801d816 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e6>
 801daee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daf2:	bf94      	ite	ls
 801daf4:	2300      	movls	r3, #0
 801daf6:	2303      	movhi	r3, #3
 801daf8:	e676      	b.n	801d7e8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b8>
 801dafa:	4281      	cmp	r1, r0
 801dafc:	d192      	bne.n	801da24 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3f4>
 801dafe:	2200      	movs	r2, #0
 801db00:	ee15 6a10 	vmov	r6, s10
 801db04:	ee14 ea90 	vmov	lr, s9
 801db08:	4576      	cmp	r6, lr
 801db0a:	d002      	beq.n	801db12 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4e2>
 801db0c:	b1da      	cbz	r2, 801db46 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x516>
 801db0e:	461a      	mov	r2, r3
 801db10:	e6b7      	b.n	801d882 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x252>
 801db12:	45c4      	cmp	ip, r8
 801db14:	d1fa      	bne.n	801db0c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4dc>
 801db16:	460d      	mov	r5, r1
 801db18:	46e0      	mov	r8, ip
 801db1a:	4601      	mov	r1, r0
 801db1c:	461a      	mov	r2, r3
 801db1e:	4628      	mov	r0, r5
 801db20:	e780      	b.n	801da24 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3f4>
 801db22:	4b0c      	ldr	r3, [pc, #48]	@ (801db54 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x524>)
 801db24:	4a0c      	ldr	r2, [pc, #48]	@ (801db58 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x528>)
 801db26:	217c      	movs	r1, #124	@ 0x7c
 801db28:	480c      	ldr	r0, [pc, #48]	@ (801db5c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x52c>)
 801db2a:	f00d f95f 	bl	802adec <__assert_func>
 801db2e:	4b0c      	ldr	r3, [pc, #48]	@ (801db60 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x530>)
 801db30:	4a0c      	ldr	r2, [pc, #48]	@ (801db64 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x534>)
 801db32:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 801db36:	480c      	ldr	r0, [pc, #48]	@ (801db68 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x538>)
 801db38:	f00d f958 	bl	802adec <__assert_func>
 801db3c:	4281      	cmp	r1, r0
 801db3e:	f47f aea0 	bne.w	801d882 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x252>
 801db42:	2201      	movs	r2, #1
 801db44:	e7dc      	b.n	801db00 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d0>
 801db46:	461a      	mov	r2, r3
 801db48:	e76c      	b.n	801da24 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3f4>
 801db4a:	bf00      	nop
 801db4c:	20087464 	.word	0x20087464
 801db50:	3d800000 	.word	0x3d800000
 801db54:	0802ddcc 	.word	0x0802ddcc
 801db58:	0802e638 	.word	0x0802e638
 801db5c:	0802ddf4 	.word	0x0802ddf4
 801db60:	0802dcc4 	.word	0x0802dcc4
 801db64:	0802e7f0 	.word	0x0802e7f0
 801db68:	0802de70 	.word	0x0802de70

0801db6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801db6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db70:	4680      	mov	r8, r0
 801db72:	460f      	mov	r7, r1
 801db74:	4614      	mov	r4, r2
 801db76:	461e      	mov	r6, r3
 801db78:	4db2      	ldr	r5, [pc, #712]	@ (801de44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2d8>)
 801db7a:	e8d5 3f8f 	ldab	r3, [r5]
 801db7e:	07da      	lsls	r2, r3, #31
 801db80:	f140 823a 	bpl.w	801dff8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48c>
 801db84:	4db0      	ldr	r5, [pc, #704]	@ (801de48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2dc>)
 801db86:	e8d5 3f8f 	ldab	r3, [r5]
 801db8a:	07db      	lsls	r3, r3, #31
 801db8c:	f140 8225 	bpl.w	801dfda <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46e>
 801db90:	4dae      	ldr	r5, [pc, #696]	@ (801de4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e0>)
 801db92:	e8d5 3f8f 	ldab	r3, [r5]
 801db96:	07d8      	lsls	r0, r3, #31
 801db98:	f140 8210 	bpl.w	801dfbc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x450>
 801db9c:	4dac      	ldr	r5, [pc, #688]	@ (801de50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e4>)
 801db9e:	e8d5 3f8f 	ldab	r3, [r5]
 801dba2:	07d9      	lsls	r1, r3, #31
 801dba4:	f140 81fb 	bpl.w	801df9e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x432>
 801dba8:	4daa      	ldr	r5, [pc, #680]	@ (801de54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e8>)
 801dbaa:	e8d5 3f8f 	ldab	r3, [r5]
 801dbae:	07da      	lsls	r2, r3, #31
 801dbb0:	f140 81e6 	bpl.w	801df80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x414>
 801dbb4:	4da8      	ldr	r5, [pc, #672]	@ (801de58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2ec>)
 801dbb6:	e8d5 3f8f 	ldab	r3, [r5]
 801dbba:	07db      	lsls	r3, r3, #31
 801dbbc:	f140 81d1 	bpl.w	801df62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3f6>
 801dbc0:	4da6      	ldr	r5, [pc, #664]	@ (801de5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f0>)
 801dbc2:	e8d5 3f8f 	ldab	r3, [r5]
 801dbc6:	07d8      	lsls	r0, r3, #31
 801dbc8:	f140 81bc 	bpl.w	801df44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3d8>
 801dbcc:	4da4      	ldr	r5, [pc, #656]	@ (801de60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f4>)
 801dbce:	e8d5 3f8f 	ldab	r3, [r5]
 801dbd2:	07d9      	lsls	r1, r3, #31
 801dbd4:	f140 81a7 	bpl.w	801df26 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3ba>
 801dbd8:	4da2      	ldr	r5, [pc, #648]	@ (801de64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f8>)
 801dbda:	e8d5 3f8f 	ldab	r3, [r5]
 801dbde:	07da      	lsls	r2, r3, #31
 801dbe0:	f140 8192 	bpl.w	801df08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x39c>
 801dbe4:	4da0      	ldr	r5, [pc, #640]	@ (801de68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2fc>)
 801dbe6:	e8d5 3f8f 	ldab	r3, [r5]
 801dbea:	07db      	lsls	r3, r3, #31
 801dbec:	f140 811a 	bpl.w	801de24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2b8>
 801dbf0:	4d9e      	ldr	r5, [pc, #632]	@ (801de6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x300>)
 801dbf2:	e8d5 3f8f 	ldab	r3, [r5]
 801dbf6:	07d8      	lsls	r0, r3, #31
 801dbf8:	f140 8105 	bpl.w	801de06 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x29a>
 801dbfc:	4d9c      	ldr	r5, [pc, #624]	@ (801de70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x304>)
 801dbfe:	e8d5 3f8f 	ldab	r3, [r5]
 801dc02:	07d9      	lsls	r1, r3, #31
 801dc04:	f140 80f0 	bpl.w	801dde8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x27c>
 801dc08:	4d9a      	ldr	r5, [pc, #616]	@ (801de74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x308>)
 801dc0a:	e8d5 3f8f 	ldab	r3, [r5]
 801dc0e:	07da      	lsls	r2, r3, #31
 801dc10:	f140 80db 	bpl.w	801ddca <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x25e>
 801dc14:	4d98      	ldr	r5, [pc, #608]	@ (801de78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30c>)
 801dc16:	e8d5 3f8f 	ldab	r3, [r5]
 801dc1a:	07db      	lsls	r3, r3, #31
 801dc1c:	f140 80c6 	bpl.w	801ddac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x240>
 801dc20:	4d96      	ldr	r5, [pc, #600]	@ (801de7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x310>)
 801dc22:	e8d5 3f8f 	ldab	r3, [r5]
 801dc26:	07d8      	lsls	r0, r3, #31
 801dc28:	f140 80b1 	bpl.w	801dd8e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x222>
 801dc2c:	4d94      	ldr	r5, [pc, #592]	@ (801de80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x314>)
 801dc2e:	e8d5 3f8f 	ldab	r3, [r5]
 801dc32:	07d9      	lsls	r1, r3, #31
 801dc34:	f140 809c 	bpl.w	801dd70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x204>
 801dc38:	4d92      	ldr	r5, [pc, #584]	@ (801de84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x318>)
 801dc3a:	e8d5 3f8f 	ldab	r3, [r5]
 801dc3e:	07da      	lsls	r2, r3, #31
 801dc40:	f140 8087 	bpl.w	801dd52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e6>
 801dc44:	4d90      	ldr	r5, [pc, #576]	@ (801de88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x31c>)
 801dc46:	e8d5 3f8f 	ldab	r3, [r5]
 801dc4a:	07db      	lsls	r3, r3, #31
 801dc4c:	d573      	bpl.n	801dd36 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ca>
 801dc4e:	4d8f      	ldr	r5, [pc, #572]	@ (801de8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x320>)
 801dc50:	e8d5 3f8f 	ldab	r3, [r5]
 801dc54:	07d8      	lsls	r0, r3, #31
 801dc56:	d560      	bpl.n	801dd1a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ae>
 801dc58:	4d8d      	ldr	r5, [pc, #564]	@ (801de90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x324>)
 801dc5a:	e8d5 3f8f 	ldab	r3, [r5]
 801dc5e:	07d9      	lsls	r1, r3, #31
 801dc60:	d54d      	bpl.n	801dcfe <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 801dc62:	4d8c      	ldr	r5, [pc, #560]	@ (801de94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x328>)
 801dc64:	e8d5 3f8f 	ldab	r3, [r5]
 801dc68:	07da      	lsls	r2, r3, #31
 801dc6a:	d53a      	bpl.n	801dce2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801dc6c:	4d8a      	ldr	r5, [pc, #552]	@ (801de98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32c>)
 801dc6e:	e8d5 3f8f 	ldab	r3, [r5]
 801dc72:	07db      	lsls	r3, r3, #31
 801dc74:	d517      	bpl.n	801dca6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801dc76:	f898 300c 	ldrb.w	r3, [r8, #12]
 801dc7a:	2b01      	cmp	r3, #1
 801dc7c:	d024      	beq.n	801dcc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 801dc7e:	f0c0 81ca 	bcc.w	801e016 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4aa>
 801dc82:	2b02      	cmp	r3, #2
 801dc84:	d002      	beq.n	801dc8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801dc86:	2000      	movs	r0, #0
 801dc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc8c:	2eff      	cmp	r6, #255	@ 0xff
 801dc8e:	f1a4 042c 	sub.w	r4, r4, #44	@ 0x2c
 801dc92:	f000 81cb 	beq.w	801e02c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c0>
 801dc96:	2c03      	cmp	r4, #3
 801dc98:	d8f5      	bhi.n	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801dc9a:	e8df f014 	tbh	[pc, r4, lsl #1]
 801dc9e:	01ff      	.short	0x01ff
 801dca0:	01e701ee 	.word	0x01e701ee
 801dca4:	01e0      	.short	0x01e0
 801dca6:	4628      	mov	r0, r5
 801dca8:	f00d f875 	bl	802ad96 <__cxa_guard_acquire>
 801dcac:	2800      	cmp	r0, #0
 801dcae:	d0e2      	beq.n	801dc76 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10a>
 801dcb0:	4628      	mov	r0, r5
 801dcb2:	f00d f87c 	bl	802adae <__cxa_guard_release>
 801dcb6:	4a79      	ldr	r2, [pc, #484]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801dcb8:	4979      	ldr	r1, [pc, #484]	@ (801dea0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x334>)
 801dcba:	487a      	ldr	r0, [pc, #488]	@ (801dea4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x338>)
 801dcbc:	f00d f864 	bl	802ad88 <__aeabi_atexit>
 801dcc0:	f898 300c 	ldrb.w	r3, [r8, #12]
 801dcc4:	2b01      	cmp	r3, #1
 801dcc6:	d1da      	bne.n	801dc7e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 801dcc8:	2eff      	cmp	r6, #255	@ 0xff
 801dcca:	f1a4 042c 	sub.w	r4, r4, #44	@ 0x2c
 801dcce:	f000 81b6 	beq.w	801e03e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4d2>
 801dcd2:	2c03      	cmp	r4, #3
 801dcd4:	d8d7      	bhi.n	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801dcd6:	e8df f014 	tbh	[pc, r4, lsl #1]
 801dcda:	0233      	.short	0x0233
 801dcdc:	021b0222 	.word	0x021b0222
 801dce0:	0214      	.short	0x0214
 801dce2:	4628      	mov	r0, r5
 801dce4:	f00d f857 	bl	802ad96 <__cxa_guard_acquire>
 801dce8:	2800      	cmp	r0, #0
 801dcea:	d0bf      	beq.n	801dc6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801dcec:	4628      	mov	r0, r5
 801dcee:	f00d f85e 	bl	802adae <__cxa_guard_release>
 801dcf2:	4a6a      	ldr	r2, [pc, #424]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801dcf4:	496c      	ldr	r1, [pc, #432]	@ (801dea8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x33c>)
 801dcf6:	486d      	ldr	r0, [pc, #436]	@ (801deac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x340>)
 801dcf8:	f00d f846 	bl	802ad88 <__aeabi_atexit>
 801dcfc:	e7b6      	b.n	801dc6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801dcfe:	4628      	mov	r0, r5
 801dd00:	f00d f849 	bl	802ad96 <__cxa_guard_acquire>
 801dd04:	2800      	cmp	r0, #0
 801dd06:	d0ac      	beq.n	801dc62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801dd08:	4628      	mov	r0, r5
 801dd0a:	f00d f850 	bl	802adae <__cxa_guard_release>
 801dd0e:	4a63      	ldr	r2, [pc, #396]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801dd10:	4967      	ldr	r1, [pc, #412]	@ (801deb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x344>)
 801dd12:	4868      	ldr	r0, [pc, #416]	@ (801deb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x348>)
 801dd14:	f00d f838 	bl	802ad88 <__aeabi_atexit>
 801dd18:	e7a3      	b.n	801dc62 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801dd1a:	4628      	mov	r0, r5
 801dd1c:	f00d f83b 	bl	802ad96 <__cxa_guard_acquire>
 801dd20:	2800      	cmp	r0, #0
 801dd22:	d099      	beq.n	801dc58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801dd24:	4628      	mov	r0, r5
 801dd26:	f00d f842 	bl	802adae <__cxa_guard_release>
 801dd2a:	4a5c      	ldr	r2, [pc, #368]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801dd2c:	4962      	ldr	r1, [pc, #392]	@ (801deb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x34c>)
 801dd2e:	4863      	ldr	r0, [pc, #396]	@ (801debc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x350>)
 801dd30:	f00d f82a 	bl	802ad88 <__aeabi_atexit>
 801dd34:	e790      	b.n	801dc58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801dd36:	4628      	mov	r0, r5
 801dd38:	f00d f82d 	bl	802ad96 <__cxa_guard_acquire>
 801dd3c:	2800      	cmp	r0, #0
 801dd3e:	d086      	beq.n	801dc4e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801dd40:	4628      	mov	r0, r5
 801dd42:	f00d f834 	bl	802adae <__cxa_guard_release>
 801dd46:	4a55      	ldr	r2, [pc, #340]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801dd48:	495d      	ldr	r1, [pc, #372]	@ (801dec0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x354>)
 801dd4a:	485e      	ldr	r0, [pc, #376]	@ (801dec4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x358>)
 801dd4c:	f00d f81c 	bl	802ad88 <__aeabi_atexit>
 801dd50:	e77d      	b.n	801dc4e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801dd52:	4628      	mov	r0, r5
 801dd54:	f00d f81f 	bl	802ad96 <__cxa_guard_acquire>
 801dd58:	2800      	cmp	r0, #0
 801dd5a:	f43f af73 	beq.w	801dc44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801dd5e:	4628      	mov	r0, r5
 801dd60:	f00d f825 	bl	802adae <__cxa_guard_release>
 801dd64:	4a4d      	ldr	r2, [pc, #308]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801dd66:	4958      	ldr	r1, [pc, #352]	@ (801dec8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x35c>)
 801dd68:	4858      	ldr	r0, [pc, #352]	@ (801decc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x360>)
 801dd6a:	f00d f80d 	bl	802ad88 <__aeabi_atexit>
 801dd6e:	e769      	b.n	801dc44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801dd70:	4628      	mov	r0, r5
 801dd72:	f00d f810 	bl	802ad96 <__cxa_guard_acquire>
 801dd76:	2800      	cmp	r0, #0
 801dd78:	f43f af5e 	beq.w	801dc38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801dd7c:	4628      	mov	r0, r5
 801dd7e:	f00d f816 	bl	802adae <__cxa_guard_release>
 801dd82:	4a46      	ldr	r2, [pc, #280]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801dd84:	4952      	ldr	r1, [pc, #328]	@ (801ded0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x364>)
 801dd86:	4853      	ldr	r0, [pc, #332]	@ (801ded4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x368>)
 801dd88:	f00c fffe 	bl	802ad88 <__aeabi_atexit>
 801dd8c:	e754      	b.n	801dc38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801dd8e:	4628      	mov	r0, r5
 801dd90:	f00d f801 	bl	802ad96 <__cxa_guard_acquire>
 801dd94:	2800      	cmp	r0, #0
 801dd96:	f43f af49 	beq.w	801dc2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801dd9a:	4628      	mov	r0, r5
 801dd9c:	f00d f807 	bl	802adae <__cxa_guard_release>
 801dda0:	4a3e      	ldr	r2, [pc, #248]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801dda2:	494d      	ldr	r1, [pc, #308]	@ (801ded8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x36c>)
 801dda4:	484d      	ldr	r0, [pc, #308]	@ (801dedc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x370>)
 801dda6:	f00c ffef 	bl	802ad88 <__aeabi_atexit>
 801ddaa:	e73f      	b.n	801dc2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801ddac:	4628      	mov	r0, r5
 801ddae:	f00c fff2 	bl	802ad96 <__cxa_guard_acquire>
 801ddb2:	2800      	cmp	r0, #0
 801ddb4:	f43f af34 	beq.w	801dc20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801ddb8:	4628      	mov	r0, r5
 801ddba:	f00c fff8 	bl	802adae <__cxa_guard_release>
 801ddbe:	4a37      	ldr	r2, [pc, #220]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801ddc0:	4947      	ldr	r1, [pc, #284]	@ (801dee0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x374>)
 801ddc2:	4848      	ldr	r0, [pc, #288]	@ (801dee4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x378>)
 801ddc4:	f00c ffe0 	bl	802ad88 <__aeabi_atexit>
 801ddc8:	e72a      	b.n	801dc20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801ddca:	4628      	mov	r0, r5
 801ddcc:	f00c ffe3 	bl	802ad96 <__cxa_guard_acquire>
 801ddd0:	2800      	cmp	r0, #0
 801ddd2:	f43f af1f 	beq.w	801dc14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801ddd6:	4628      	mov	r0, r5
 801ddd8:	f00c ffe9 	bl	802adae <__cxa_guard_release>
 801dddc:	4a2f      	ldr	r2, [pc, #188]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801ddde:	4942      	ldr	r1, [pc, #264]	@ (801dee8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x37c>)
 801dde0:	4842      	ldr	r0, [pc, #264]	@ (801deec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x380>)
 801dde2:	f00c ffd1 	bl	802ad88 <__aeabi_atexit>
 801dde6:	e715      	b.n	801dc14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801dde8:	4628      	mov	r0, r5
 801ddea:	f00c ffd4 	bl	802ad96 <__cxa_guard_acquire>
 801ddee:	2800      	cmp	r0, #0
 801ddf0:	f43f af0a 	beq.w	801dc08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801ddf4:	4628      	mov	r0, r5
 801ddf6:	f00c ffda 	bl	802adae <__cxa_guard_release>
 801ddfa:	4a28      	ldr	r2, [pc, #160]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801ddfc:	493c      	ldr	r1, [pc, #240]	@ (801def0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x384>)
 801ddfe:	483d      	ldr	r0, [pc, #244]	@ (801def4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x388>)
 801de00:	f00c ffc2 	bl	802ad88 <__aeabi_atexit>
 801de04:	e700      	b.n	801dc08 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801de06:	4628      	mov	r0, r5
 801de08:	f00c ffc5 	bl	802ad96 <__cxa_guard_acquire>
 801de0c:	2800      	cmp	r0, #0
 801de0e:	f43f aef5 	beq.w	801dbfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801de12:	4628      	mov	r0, r5
 801de14:	f00c ffcb 	bl	802adae <__cxa_guard_release>
 801de18:	4a20      	ldr	r2, [pc, #128]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801de1a:	4937      	ldr	r1, [pc, #220]	@ (801def8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x38c>)
 801de1c:	4837      	ldr	r0, [pc, #220]	@ (801defc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x390>)
 801de1e:	f00c ffb3 	bl	802ad88 <__aeabi_atexit>
 801de22:	e6eb      	b.n	801dbfc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801de24:	4628      	mov	r0, r5
 801de26:	f00c ffb6 	bl	802ad96 <__cxa_guard_acquire>
 801de2a:	2800      	cmp	r0, #0
 801de2c:	f43f aee0 	beq.w	801dbf0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801de30:	4628      	mov	r0, r5
 801de32:	f00c ffbc 	bl	802adae <__cxa_guard_release>
 801de36:	4a19      	ldr	r2, [pc, #100]	@ (801de9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801de38:	4931      	ldr	r1, [pc, #196]	@ (801df00 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x394>)
 801de3a:	4832      	ldr	r0, [pc, #200]	@ (801df04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x398>)
 801de3c:	f00c ffa4 	bl	802ad88 <__aeabi_atexit>
 801de40:	e6d6      	b.n	801dbf0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801de42:	bf00      	nop
 801de44:	200875f0 	.word	0x200875f0
 801de48:	20087604 	.word	0x20087604
 801de4c:	200875cc 	.word	0x200875cc
 801de50:	200875d8 	.word	0x200875d8
 801de54:	20087610 	.word	0x20087610
 801de58:	2008761c 	.word	0x2008761c
 801de5c:	200875e4 	.word	0x200875e4
 801de60:	200875fc 	.word	0x200875fc
 801de64:	200875f4 	.word	0x200875f4
 801de68:	20087608 	.word	0x20087608
 801de6c:	200875d0 	.word	0x200875d0
 801de70:	200875dc 	.word	0x200875dc
 801de74:	20087614 	.word	0x20087614
 801de78:	20087620 	.word	0x20087620
 801de7c:	200875e8 	.word	0x200875e8
 801de80:	20087600 	.word	0x20087600
 801de84:	200875f8 	.word	0x200875f8
 801de88:	2008760c 	.word	0x2008760c
 801de8c:	200875d4 	.word	0x200875d4
 801de90:	200875e0 	.word	0x200875e0
 801de94:	20087618 	.word	0x20087618
 801de98:	200875ec 	.word	0x200875ec
 801de9c:	20000000 	.word	0x20000000
 801dea0:	0801cef1 	.word	0x0801cef1
 801dea4:	2000011c 	.word	0x2000011c
 801dea8:	0801ceed 	.word	0x0801ceed
 801deac:	20000148 	.word	0x20000148
 801deb0:	0801cefd 	.word	0x0801cefd
 801deb4:	20000110 	.word	0x20000110
 801deb8:	0801cf01 	.word	0x0801cf01
 801debc:	20000104 	.word	0x20000104
 801dec0:	0801cef5 	.word	0x0801cef5
 801dec4:	2000013c 	.word	0x2000013c
 801dec8:	0801cef9 	.word	0x0801cef9
 801decc:	20000128 	.word	0x20000128
 801ded0:	0801cf0d 	.word	0x0801cf0d
 801ded4:	20000130 	.word	0x20000130
 801ded8:	0801cf11 	.word	0x0801cf11
 801dedc:	20000118 	.word	0x20000118
 801dee0:	0801cf05 	.word	0x0801cf05
 801dee4:	20000150 	.word	0x20000150
 801dee8:	0801cf09 	.word	0x0801cf09
 801deec:	20000144 	.word	0x20000144
 801def0:	0801cf1d 	.word	0x0801cf1d
 801def4:	2000010c 	.word	0x2000010c
 801def8:	0801cf21 	.word	0x0801cf21
 801defc:	20000100 	.word	0x20000100
 801df00:	0801cf15 	.word	0x0801cf15
 801df04:	20000138 	.word	0x20000138
 801df08:	4628      	mov	r0, r5
 801df0a:	f00c ff44 	bl	802ad96 <__cxa_guard_acquire>
 801df0e:	2800      	cmp	r0, #0
 801df10:	f43f ae68 	beq.w	801dbe4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801df14:	4628      	mov	r0, r5
 801df16:	f00c ff4a 	bl	802adae <__cxa_guard_release>
 801df1a:	4aa6      	ldr	r2, [pc, #664]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801df1c:	49a6      	ldr	r1, [pc, #664]	@ (801e1b8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64c>)
 801df1e:	48a7      	ldr	r0, [pc, #668]	@ (801e1bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x650>)
 801df20:	f00c ff32 	bl	802ad88 <__aeabi_atexit>
 801df24:	e65e      	b.n	801dbe4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801df26:	4628      	mov	r0, r5
 801df28:	f00c ff35 	bl	802ad96 <__cxa_guard_acquire>
 801df2c:	2800      	cmp	r0, #0
 801df2e:	f43f ae53 	beq.w	801dbd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801df32:	4628      	mov	r0, r5
 801df34:	f00c ff3b 	bl	802adae <__cxa_guard_release>
 801df38:	4a9e      	ldr	r2, [pc, #632]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801df3a:	49a1      	ldr	r1, [pc, #644]	@ (801e1c0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x654>)
 801df3c:	48a1      	ldr	r0, [pc, #644]	@ (801e1c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801df3e:	f00c ff23 	bl	802ad88 <__aeabi_atexit>
 801df42:	e649      	b.n	801dbd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801df44:	4628      	mov	r0, r5
 801df46:	f00c ff26 	bl	802ad96 <__cxa_guard_acquire>
 801df4a:	2800      	cmp	r0, #0
 801df4c:	f43f ae3e 	beq.w	801dbcc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801df50:	4628      	mov	r0, r5
 801df52:	f00c ff2c 	bl	802adae <__cxa_guard_release>
 801df56:	4a97      	ldr	r2, [pc, #604]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801df58:	499b      	ldr	r1, [pc, #620]	@ (801e1c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x65c>)
 801df5a:	489c      	ldr	r0, [pc, #624]	@ (801e1cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801df5c:	f00c ff14 	bl	802ad88 <__aeabi_atexit>
 801df60:	e634      	b.n	801dbcc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801df62:	4628      	mov	r0, r5
 801df64:	f00c ff17 	bl	802ad96 <__cxa_guard_acquire>
 801df68:	2800      	cmp	r0, #0
 801df6a:	f43f ae29 	beq.w	801dbc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801df6e:	4628      	mov	r0, r5
 801df70:	f00c ff1d 	bl	802adae <__cxa_guard_release>
 801df74:	4a8f      	ldr	r2, [pc, #572]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801df76:	4996      	ldr	r1, [pc, #600]	@ (801e1d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x664>)
 801df78:	4896      	ldr	r0, [pc, #600]	@ (801e1d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801df7a:	f00c ff05 	bl	802ad88 <__aeabi_atexit>
 801df7e:	e61f      	b.n	801dbc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801df80:	4628      	mov	r0, r5
 801df82:	f00c ff08 	bl	802ad96 <__cxa_guard_acquire>
 801df86:	2800      	cmp	r0, #0
 801df88:	f43f ae14 	beq.w	801dbb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801df8c:	4628      	mov	r0, r5
 801df8e:	f00c ff0e 	bl	802adae <__cxa_guard_release>
 801df92:	4a88      	ldr	r2, [pc, #544]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801df94:	4990      	ldr	r1, [pc, #576]	@ (801e1d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66c>)
 801df96:	4891      	ldr	r0, [pc, #580]	@ (801e1dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801df98:	f00c fef6 	bl	802ad88 <__aeabi_atexit>
 801df9c:	e60a      	b.n	801dbb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801df9e:	4628      	mov	r0, r5
 801dfa0:	f00c fef9 	bl	802ad96 <__cxa_guard_acquire>
 801dfa4:	2800      	cmp	r0, #0
 801dfa6:	f43f adff 	beq.w	801dba8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801dfaa:	4628      	mov	r0, r5
 801dfac:	f00c feff 	bl	802adae <__cxa_guard_release>
 801dfb0:	4a80      	ldr	r2, [pc, #512]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801dfb2:	498b      	ldr	r1, [pc, #556]	@ (801e1e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x674>)
 801dfb4:	488b      	ldr	r0, [pc, #556]	@ (801e1e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801dfb6:	f00c fee7 	bl	802ad88 <__aeabi_atexit>
 801dfba:	e5f5      	b.n	801dba8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801dfbc:	4628      	mov	r0, r5
 801dfbe:	f00c feea 	bl	802ad96 <__cxa_guard_acquire>
 801dfc2:	2800      	cmp	r0, #0
 801dfc4:	f43f adea 	beq.w	801db9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801dfc8:	4628      	mov	r0, r5
 801dfca:	f00c fef0 	bl	802adae <__cxa_guard_release>
 801dfce:	4a79      	ldr	r2, [pc, #484]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801dfd0:	4985      	ldr	r1, [pc, #532]	@ (801e1e8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x67c>)
 801dfd2:	4886      	ldr	r0, [pc, #536]	@ (801e1ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801dfd4:	f00c fed8 	bl	802ad88 <__aeabi_atexit>
 801dfd8:	e5e0      	b.n	801db9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801dfda:	4628      	mov	r0, r5
 801dfdc:	f00c fedb 	bl	802ad96 <__cxa_guard_acquire>
 801dfe0:	2800      	cmp	r0, #0
 801dfe2:	f43f add5 	beq.w	801db90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfe6:	4628      	mov	r0, r5
 801dfe8:	f00c fee1 	bl	802adae <__cxa_guard_release>
 801dfec:	4a71      	ldr	r2, [pc, #452]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801dfee:	4980      	ldr	r1, [pc, #512]	@ (801e1f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x684>)
 801dff0:	4880      	ldr	r0, [pc, #512]	@ (801e1f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801dff2:	f00c fec9 	bl	802ad88 <__aeabi_atexit>
 801dff6:	e5cb      	b.n	801db90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dff8:	4628      	mov	r0, r5
 801dffa:	f00c fecc 	bl	802ad96 <__cxa_guard_acquire>
 801dffe:	2800      	cmp	r0, #0
 801e000:	f43f adc0 	beq.w	801db84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e004:	4628      	mov	r0, r5
 801e006:	f00c fed2 	bl	802adae <__cxa_guard_release>
 801e00a:	4a6a      	ldr	r2, [pc, #424]	@ (801e1b4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801e00c:	497a      	ldr	r1, [pc, #488]	@ (801e1f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68c>)
 801e00e:	487b      	ldr	r0, [pc, #492]	@ (801e1fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801e010:	f00c feba 	bl	802ad88 <__aeabi_atexit>
 801e014:	e5b6      	b.n	801db84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801e016:	2eff      	cmp	r6, #255	@ 0xff
 801e018:	f1a4 042c 	sub.w	r4, r4, #44	@ 0x2c
 801e01c:	d018      	beq.n	801e050 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e4>
 801e01e:	2c03      	cmp	r4, #3
 801e020:	f63f ae31 	bhi.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e024:	e8df f004 	tbb	[pc, r4]
 801e028:	4b525963 	.word	0x4b525963
 801e02c:	2c03      	cmp	r4, #3
 801e02e:	f63f ae2a 	bhi.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e032:	e8df f014 	tbh	[pc, r4, lsl #1]
 801e036:	012d      	.short	0x012d
 801e038:	001b011e 	.word	0x001b011e
 801e03c:	0014      	.short	0x0014
 801e03e:	2c03      	cmp	r4, #3
 801e040:	f63f ae21 	bhi.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e044:	e8df f014 	tbh	[pc, r4, lsl #1]
 801e048:	00f000ff 	.word	0x00f000ff
 801e04c:	00af010e 	.word	0x00af010e
 801e050:	2c03      	cmp	r4, #3
 801e052:	f63f ae18 	bhi.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e056:	e8df f004 	tbb	[pc, r4]
 801e05a:	929c      	.short	0x929c
 801e05c:	848b      	.short	0x848b
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	4867      	ldr	r0, [pc, #412]	@ (801e200 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x694>)
 801e062:	781b      	ldrb	r3, [r3, #0]
 801e064:	2b00      	cmp	r3, #0
 801e066:	bf18      	it	ne
 801e068:	2000      	movne	r0, #0
 801e06a:	e60d      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	4865      	ldr	r0, [pc, #404]	@ (801e204 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x698>)
 801e070:	781b      	ldrb	r3, [r3, #0]
 801e072:	2b00      	cmp	r3, #0
 801e074:	bf18      	it	ne
 801e076:	2000      	movne	r0, #0
 801e078:	e606      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	781b      	ldrb	r3, [r3, #0]
 801e07e:	2b01      	cmp	r3, #1
 801e080:	f000 811b 	beq.w	801e2ba <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74e>
 801e084:	f0c0 8113 	bcc.w	801e2ae <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801e088:	2b02      	cmp	r3, #2
 801e08a:	f47f adfc 	bne.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e08e:	4b5e      	ldr	r3, [pc, #376]	@ (801e208 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801e090:	4a5e      	ldr	r2, [pc, #376]	@ (801e20c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801e092:	f241 3133 	movw	r1, #4915	@ 0x1333
 801e096:	485e      	ldr	r0, [pc, #376]	@ (801e210 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801e098:	f00c fea8 	bl	802adec <__assert_func>
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	781b      	ldrb	r3, [r3, #0]
 801e0a0:	2b01      	cmp	r3, #1
 801e0a2:	f000 8108 	beq.w	801e2b6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74a>
 801e0a6:	f0c0 8104 	bcc.w	801e2b2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801e0aa:	2b02      	cmp	r3, #2
 801e0ac:	f47f adeb 	bne.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e0b0:	4b55      	ldr	r3, [pc, #340]	@ (801e208 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801e0b2:	4a56      	ldr	r2, [pc, #344]	@ (801e20c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801e0b4:	f241 313f 	movw	r1, #4927	@ 0x133f
 801e0b8:	4855      	ldr	r0, [pc, #340]	@ (801e210 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801e0ba:	f00c fe97 	bl	802adec <__assert_func>
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	4846      	ldr	r0, [pc, #280]	@ (801e1dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801e0c2:	781b      	ldrb	r3, [r3, #0]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	bf18      	it	ne
 801e0c8:	2000      	movne	r0, #0
 801e0ca:	e5dd      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	483f      	ldr	r0, [pc, #252]	@ (801e1cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801e0d0:	781b      	ldrb	r3, [r3, #0]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	bf18      	it	ne
 801e0d6:	2000      	movne	r0, #0
 801e0d8:	e5d6      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	781b      	ldrb	r3, [r3, #0]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	f000 80ed 	beq.w	801e2be <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x752>
 801e0e4:	2b01      	cmp	r3, #1
 801e0e6:	4845      	ldr	r0, [pc, #276]	@ (801e1fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801e0e8:	bf18      	it	ne
 801e0ea:	2000      	movne	r0, #0
 801e0ec:	e5cc      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	781b      	ldrb	r3, [r3, #0]
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	f000 80e5 	beq.w	801e2c2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x756>
 801e0f8:	2b01      	cmp	r3, #1
 801e0fa:	483c      	ldr	r0, [pc, #240]	@ (801e1ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801e0fc:	bf18      	it	ne
 801e0fe:	2000      	movne	r0, #0
 801e100:	e5c2      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	4843      	ldr	r0, [pc, #268]	@ (801e214 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a8>)
 801e106:	781b      	ldrb	r3, [r3, #0]
 801e108:	2b00      	cmp	r3, #0
 801e10a:	bf18      	it	ne
 801e10c:	2000      	movne	r0, #0
 801e10e:	e5bb      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	4841      	ldr	r0, [pc, #260]	@ (801e218 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6ac>)
 801e114:	781b      	ldrb	r3, [r3, #0]
 801e116:	2b00      	cmp	r3, #0
 801e118:	bf18      	it	ne
 801e11a:	2000      	movne	r0, #0
 801e11c:	e5b4      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	781b      	ldrb	r3, [r3, #0]
 801e122:	2b01      	cmp	r3, #1
 801e124:	f000 80d5 	beq.w	801e2d2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x766>
 801e128:	f0c0 80d1 	bcc.w	801e2ce <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x762>
 801e12c:	2b02      	cmp	r3, #2
 801e12e:	f47f adaa 	bne.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e132:	4b3a      	ldr	r3, [pc, #232]	@ (801e21c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b0>)
 801e134:	4a35      	ldr	r2, [pc, #212]	@ (801e20c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801e136:	f241 21d8 	movw	r1, #4824	@ 0x12d8
 801e13a:	4835      	ldr	r0, [pc, #212]	@ (801e210 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801e13c:	f00c fe56 	bl	802adec <__assert_func>
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	781b      	ldrb	r3, [r3, #0]
 801e144:	2b01      	cmp	r3, #1
 801e146:	f000 80c0 	beq.w	801e2ca <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75e>
 801e14a:	f0c0 80bc 	bcc.w	801e2c6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75a>
 801e14e:	2b02      	cmp	r3, #2
 801e150:	f47f ad99 	bne.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e154:	4b32      	ldr	r3, [pc, #200]	@ (801e220 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b4>)
 801e156:	4a2d      	ldr	r2, [pc, #180]	@ (801e20c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801e158:	f241 21e4 	movw	r1, #4836	@ 0x12e4
 801e15c:	482c      	ldr	r0, [pc, #176]	@ (801e210 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801e15e:	f00c fe45 	bl	802adec <__assert_func>
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	481b      	ldr	r0, [pc, #108]	@ (801e1d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801e166:	781b      	ldrb	r3, [r3, #0]
 801e168:	2b00      	cmp	r3, #0
 801e16a:	bf18      	it	ne
 801e16c:	2000      	movne	r0, #0
 801e16e:	e58b      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	4814      	ldr	r0, [pc, #80]	@ (801e1c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801e174:	781b      	ldrb	r3, [r3, #0]
 801e176:	2b00      	cmp	r3, #0
 801e178:	bf18      	it	ne
 801e17a:	2000      	movne	r0, #0
 801e17c:	e584      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	781b      	ldrb	r3, [r3, #0]
 801e182:	2b00      	cmp	r3, #0
 801e184:	f000 80af 	beq.w	801e2e6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77a>
 801e188:	2b01      	cmp	r3, #1
 801e18a:	481a      	ldr	r0, [pc, #104]	@ (801e1f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801e18c:	bf18      	it	ne
 801e18e:	2000      	movne	r0, #0
 801e190:	e57a      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	781b      	ldrb	r3, [r3, #0]
 801e196:	2b00      	cmp	r3, #0
 801e198:	f000 80a7 	beq.w	801e2ea <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77e>
 801e19c:	2b01      	cmp	r3, #1
 801e19e:	4811      	ldr	r0, [pc, #68]	@ (801e1e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801e1a0:	bf18      	it	ne
 801e1a2:	2000      	movne	r0, #0
 801e1a4:	e570      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	481e      	ldr	r0, [pc, #120]	@ (801e224 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b8>)
 801e1aa:	781b      	ldrb	r3, [r3, #0]
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	bf18      	it	ne
 801e1b0:	2000      	movne	r0, #0
 801e1b2:	e569      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e1b4:	20000000 	.word	0x20000000
 801e1b8:	0801cf19 	.word	0x0801cf19
 801e1bc:	20000124 	.word	0x20000124
 801e1c0:	0801cf2d 	.word	0x0801cf2d
 801e1c4:	2000012c 	.word	0x2000012c
 801e1c8:	0801cf31 	.word	0x0801cf31
 801e1cc:	20000114 	.word	0x20000114
 801e1d0:	0801cf25 	.word	0x0801cf25
 801e1d4:	2000014c 	.word	0x2000014c
 801e1d8:	0801cf29 	.word	0x0801cf29
 801e1dc:	20000140 	.word	0x20000140
 801e1e0:	0801cf3d 	.word	0x0801cf3d
 801e1e4:	20000108 	.word	0x20000108
 801e1e8:	0801cf41 	.word	0x0801cf41
 801e1ec:	200000fc 	.word	0x200000fc
 801e1f0:	0801cf35 	.word	0x0801cf35
 801e1f4:	20000134 	.word	0x20000134
 801e1f8:	0801cf39 	.word	0x0801cf39
 801e1fc:	20000120 	.word	0x20000120
 801e200:	20000148 	.word	0x20000148
 801e204:	2000011c 	.word	0x2000011c
 801e208:	0802e028 	.word	0x0802e028
 801e20c:	0802f4b4 	.word	0x0802f4b4
 801e210:	0802de70 	.word	0x0802de70
 801e214:	20000144 	.word	0x20000144
 801e218:	20000118 	.word	0x20000118
 801e21c:	0802df94 	.word	0x0802df94
 801e220:	0802dfdc 	.word	0x0802dfdc
 801e224:	20000150 	.word	0x20000150
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	781b      	ldrb	r3, [r3, #0]
 801e22c:	2b01      	cmp	r3, #1
 801e22e:	d060      	beq.n	801e2f2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x786>
 801e230:	d35d      	bcc.n	801e2ee <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x782>
 801e232:	2b02      	cmp	r3, #2
 801e234:	f47f ad27 	bne.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e238:	4b2f      	ldr	r3, [pc, #188]	@ (801e2f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801e23a:	4a30      	ldr	r2, [pc, #192]	@ (801e2fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801e23c:	f241 3103 	movw	r1, #4867	@ 0x1303
 801e240:	482f      	ldr	r0, [pc, #188]	@ (801e300 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801e242:	f00c fdd3 	bl	802adec <__assert_func>
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	781b      	ldrb	r3, [r3, #0]
 801e24a:	2b01      	cmp	r3, #1
 801e24c:	d049      	beq.n	801e2e2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x776>
 801e24e:	d346      	bcc.n	801e2de <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x772>
 801e250:	2b02      	cmp	r3, #2
 801e252:	f47f ad18 	bne.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e256:	4b28      	ldr	r3, [pc, #160]	@ (801e2f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801e258:	4a28      	ldr	r2, [pc, #160]	@ (801e2fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801e25a:	f241 310f 	movw	r1, #4879	@ 0x130f
 801e25e:	4828      	ldr	r0, [pc, #160]	@ (801e300 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801e260:	f00c fdc4 	bl	802adec <__assert_func>
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	4827      	ldr	r0, [pc, #156]	@ (801e304 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801e268:	781b      	ldrb	r3, [r3, #0]
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	bf18      	it	ne
 801e26e:	2000      	movne	r0, #0
 801e270:	e50a      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	781b      	ldrb	r3, [r3, #0]
 801e276:	2b01      	cmp	r3, #1
 801e278:	d02d      	beq.n	801e2d6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76a>
 801e27a:	d318      	bcc.n	801e2ae <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801e27c:	2b02      	cmp	r3, #2
 801e27e:	f47f ad02 	bne.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e282:	4b1d      	ldr	r3, [pc, #116]	@ (801e2f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801e284:	4a1d      	ldr	r2, [pc, #116]	@ (801e2fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801e286:	f44f 519b 	mov.w	r1, #4960	@ 0x1360
 801e28a:	481d      	ldr	r0, [pc, #116]	@ (801e300 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801e28c:	f00c fdae 	bl	802adec <__assert_func>
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	781b      	ldrb	r3, [r3, #0]
 801e294:	2b01      	cmp	r3, #1
 801e296:	d020      	beq.n	801e2da <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76e>
 801e298:	d30b      	bcc.n	801e2b2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801e29a:	2b02      	cmp	r3, #2
 801e29c:	f47f acf3 	bne.w	801dc86 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801e2a0:	4b15      	ldr	r3, [pc, #84]	@ (801e2f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801e2a2:	4a16      	ldr	r2, [pc, #88]	@ (801e2fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801e2a4:	f241 316c 	movw	r1, #4972	@ 0x136c
 801e2a8:	4815      	ldr	r0, [pc, #84]	@ (801e300 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801e2aa:	f00c fd9f 	bl	802adec <__assert_func>
 801e2ae:	4816      	ldr	r0, [pc, #88]	@ (801e308 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x79c>)
 801e2b0:	e4ea      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2b2:	4816      	ldr	r0, [pc, #88]	@ (801e30c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a0>)
 801e2b4:	e4e8      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2b6:	4816      	ldr	r0, [pc, #88]	@ (801e310 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a4>)
 801e2b8:	e4e6      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2ba:	4816      	ldr	r0, [pc, #88]	@ (801e314 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a8>)
 801e2bc:	e4e4      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2be:	4816      	ldr	r0, [pc, #88]	@ (801e318 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7ac>)
 801e2c0:	e4e2      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2c2:	4816      	ldr	r0, [pc, #88]	@ (801e31c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b0>)
 801e2c4:	e4e0      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2c6:	4816      	ldr	r0, [pc, #88]	@ (801e320 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b4>)
 801e2c8:	e4de      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2ca:	4816      	ldr	r0, [pc, #88]	@ (801e324 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b8>)
 801e2cc:	e4dc      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2ce:	4816      	ldr	r0, [pc, #88]	@ (801e328 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7bc>)
 801e2d0:	e4da      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2d2:	4816      	ldr	r0, [pc, #88]	@ (801e32c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c0>)
 801e2d4:	e4d8      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2d6:	4816      	ldr	r0, [pc, #88]	@ (801e330 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c4>)
 801e2d8:	e4d6      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2da:	4816      	ldr	r0, [pc, #88]	@ (801e334 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c8>)
 801e2dc:	e4d4      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2de:	4809      	ldr	r0, [pc, #36]	@ (801e304 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801e2e0:	e4d2      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2e2:	4815      	ldr	r0, [pc, #84]	@ (801e338 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7cc>)
 801e2e4:	e4d0      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2e6:	4815      	ldr	r0, [pc, #84]	@ (801e33c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d0>)
 801e2e8:	e4ce      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2ea:	4815      	ldr	r0, [pc, #84]	@ (801e340 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d4>)
 801e2ec:	e4cc      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2ee:	4815      	ldr	r0, [pc, #84]	@ (801e344 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d8>)
 801e2f0:	e4ca      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2f2:	4815      	ldr	r0, [pc, #84]	@ (801e348 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7dc>)
 801e2f4:	e4c8      	b.n	801dc88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801e2f6:	bf00      	nop
 801e2f8:	0802dfdc 	.word	0x0802dfdc
 801e2fc:	0802f4b4 	.word	0x0802f4b4
 801e300:	0802de70 	.word	0x0802de70
 801e304:	20000130 	.word	0x20000130
 801e308:	20000148 	.word	0x20000148
 801e30c:	2000011c 	.word	0x2000011c
 801e310:	20000104 	.word	0x20000104
 801e314:	20000128 	.word	0x20000128
 801e318:	20000140 	.word	0x20000140
 801e31c:	20000114 	.word	0x20000114
 801e320:	20000118 	.word	0x20000118
 801e324:	20000100 	.word	0x20000100
 801e328:	20000144 	.word	0x20000144
 801e32c:	20000124 	.word	0x20000124
 801e330:	2000013c 	.word	0x2000013c
 801e334:	20000110 	.word	0x20000110
 801e338:	2000010c 	.word	0x2000010c
 801e33c:	2000014c 	.word	0x2000014c
 801e340:	2000012c 	.word	0x2000012c
 801e344:	20000150 	.word	0x20000150
 801e348:	20000138 	.word	0x20000138

0801e34c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e34c:	b510      	push	{r4, lr}
 801e34e:	4604      	mov	r4, r0
 801e350:	2104      	movs	r1, #4
 801e352:	f00c fd1e 	bl	802ad92 <_ZdlPvj>
 801e356:	4620      	mov	r0, r4
 801e358:	bd10      	pop	{r4, pc}
 801e35a:	bf00      	nop

0801e35c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e35c:	b510      	push	{r4, lr}
 801e35e:	4604      	mov	r4, r0
 801e360:	2104      	movs	r1, #4
 801e362:	f00c fd16 	bl	802ad92 <_ZdlPvj>
 801e366:	4620      	mov	r0, r4
 801e368:	bd10      	pop	{r4, pc}
 801e36a:	bf00      	nop

0801e36c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e36c:	b510      	push	{r4, lr}
 801e36e:	4604      	mov	r4, r0
 801e370:	2104      	movs	r1, #4
 801e372:	f00c fd0e 	bl	802ad92 <_ZdlPvj>
 801e376:	4620      	mov	r0, r4
 801e378:	bd10      	pop	{r4, pc}
 801e37a:	bf00      	nop

0801e37c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e37c:	b510      	push	{r4, lr}
 801e37e:	4604      	mov	r4, r0
 801e380:	2104      	movs	r1, #4
 801e382:	f00c fd06 	bl	802ad92 <_ZdlPvj>
 801e386:	4620      	mov	r0, r4
 801e388:	bd10      	pop	{r4, pc}
 801e38a:	bf00      	nop

0801e38c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e38c:	b510      	push	{r4, lr}
 801e38e:	4604      	mov	r4, r0
 801e390:	2104      	movs	r1, #4
 801e392:	f00c fcfe 	bl	802ad92 <_ZdlPvj>
 801e396:	4620      	mov	r0, r4
 801e398:	bd10      	pop	{r4, pc}
 801e39a:	bf00      	nop

0801e39c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e39c:	b510      	push	{r4, lr}
 801e39e:	4604      	mov	r4, r0
 801e3a0:	2104      	movs	r1, #4
 801e3a2:	f00c fcf6 	bl	802ad92 <_ZdlPvj>
 801e3a6:	4620      	mov	r0, r4
 801e3a8:	bd10      	pop	{r4, pc}
 801e3aa:	bf00      	nop

0801e3ac <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e3ac:	b510      	push	{r4, lr}
 801e3ae:	4604      	mov	r4, r0
 801e3b0:	2104      	movs	r1, #4
 801e3b2:	f00c fcee 	bl	802ad92 <_ZdlPvj>
 801e3b6:	4620      	mov	r0, r4
 801e3b8:	bd10      	pop	{r4, pc}
 801e3ba:	bf00      	nop

0801e3bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e3bc:	b510      	push	{r4, lr}
 801e3be:	4604      	mov	r4, r0
 801e3c0:	2104      	movs	r1, #4
 801e3c2:	f00c fce6 	bl	802ad92 <_ZdlPvj>
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	bd10      	pop	{r4, pc}
 801e3ca:	bf00      	nop

0801e3cc <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801e3cc:	b510      	push	{r4, lr}
 801e3ce:	4604      	mov	r4, r0
 801e3d0:	2104      	movs	r1, #4
 801e3d2:	f00c fcde 	bl	802ad92 <_ZdlPvj>
 801e3d6:	4620      	mov	r0, r4
 801e3d8:	bd10      	pop	{r4, pc}
 801e3da:	bf00      	nop

0801e3dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e3dc:	b510      	push	{r4, lr}
 801e3de:	4604      	mov	r4, r0
 801e3e0:	2104      	movs	r1, #4
 801e3e2:	f00c fcd6 	bl	802ad92 <_ZdlPvj>
 801e3e6:	4620      	mov	r0, r4
 801e3e8:	bd10      	pop	{r4, pc}
 801e3ea:	bf00      	nop

0801e3ec <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801e3ec:	b510      	push	{r4, lr}
 801e3ee:	4604      	mov	r4, r0
 801e3f0:	2104      	movs	r1, #4
 801e3f2:	f00c fcce 	bl	802ad92 <_ZdlPvj>
 801e3f6:	4620      	mov	r0, r4
 801e3f8:	bd10      	pop	{r4, pc}
 801e3fa:	bf00      	nop

0801e3fc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e3fc:	b510      	push	{r4, lr}
 801e3fe:	4604      	mov	r4, r0
 801e400:	2104      	movs	r1, #4
 801e402:	f00c fcc6 	bl	802ad92 <_ZdlPvj>
 801e406:	4620      	mov	r0, r4
 801e408:	bd10      	pop	{r4, pc}
 801e40a:	bf00      	nop

0801e40c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e40c:	b510      	push	{r4, lr}
 801e40e:	4604      	mov	r4, r0
 801e410:	2104      	movs	r1, #4
 801e412:	f00c fcbe 	bl	802ad92 <_ZdlPvj>
 801e416:	4620      	mov	r0, r4
 801e418:	bd10      	pop	{r4, pc}
 801e41a:	bf00      	nop

0801e41c <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e41c:	b510      	push	{r4, lr}
 801e41e:	4604      	mov	r4, r0
 801e420:	2104      	movs	r1, #4
 801e422:	f00c fcb6 	bl	802ad92 <_ZdlPvj>
 801e426:	4620      	mov	r0, r4
 801e428:	bd10      	pop	{r4, pc}
 801e42a:	bf00      	nop

0801e42c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e42c:	b510      	push	{r4, lr}
 801e42e:	4604      	mov	r4, r0
 801e430:	2104      	movs	r1, #4
 801e432:	f00c fcae 	bl	802ad92 <_ZdlPvj>
 801e436:	4620      	mov	r0, r4
 801e438:	bd10      	pop	{r4, pc}
 801e43a:	bf00      	nop

0801e43c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e43c:	b510      	push	{r4, lr}
 801e43e:	4604      	mov	r4, r0
 801e440:	2104      	movs	r1, #4
 801e442:	f00c fca6 	bl	802ad92 <_ZdlPvj>
 801e446:	4620      	mov	r0, r4
 801e448:	bd10      	pop	{r4, pc}
 801e44a:	bf00      	nop

0801e44c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801e44c:	b510      	push	{r4, lr}
 801e44e:	4604      	mov	r4, r0
 801e450:	2104      	movs	r1, #4
 801e452:	f00c fc9e 	bl	802ad92 <_ZdlPvj>
 801e456:	4620      	mov	r0, r4
 801e458:	bd10      	pop	{r4, pc}
 801e45a:	bf00      	nop

0801e45c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801e45c:	b510      	push	{r4, lr}
 801e45e:	4604      	mov	r4, r0
 801e460:	2104      	movs	r1, #4
 801e462:	f00c fc96 	bl	802ad92 <_ZdlPvj>
 801e466:	4620      	mov	r0, r4
 801e468:	bd10      	pop	{r4, pc}
 801e46a:	bf00      	nop

0801e46c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801e46c:	b510      	push	{r4, lr}
 801e46e:	4604      	mov	r4, r0
 801e470:	2104      	movs	r1, #4
 801e472:	f00c fc8e 	bl	802ad92 <_ZdlPvj>
 801e476:	4620      	mov	r0, r4
 801e478:	bd10      	pop	{r4, pc}
 801e47a:	bf00      	nop

0801e47c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801e47c:	b510      	push	{r4, lr}
 801e47e:	4604      	mov	r4, r0
 801e480:	2104      	movs	r1, #4
 801e482:	f00c fc86 	bl	802ad92 <_ZdlPvj>
 801e486:	4620      	mov	r0, r4
 801e488:	bd10      	pop	{r4, pc}
 801e48a:	bf00      	nop

0801e48c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801e48c:	b510      	push	{r4, lr}
 801e48e:	4604      	mov	r4, r0
 801e490:	2104      	movs	r1, #4
 801e492:	f00c fc7e 	bl	802ad92 <_ZdlPvj>
 801e496:	4620      	mov	r0, r4
 801e498:	bd10      	pop	{r4, pc}
 801e49a:	bf00      	nop

0801e49c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801e49c:	b510      	push	{r4, lr}
 801e49e:	4604      	mov	r4, r0
 801e4a0:	2104      	movs	r1, #4
 801e4a2:	f00c fc76 	bl	802ad92 <_ZdlPvj>
 801e4a6:	4620      	mov	r0, r4
 801e4a8:	bd10      	pop	{r4, pc}
 801e4aa:	bf00      	nop

0801e4ac <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>:
 801e4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e4b0:	461c      	mov	r4, r3
 801e4b2:	4617      	mov	r7, r2
 801e4b4:	b086      	sub	sp, #24
 801e4b6:	4606      	mov	r6, r0
 801e4b8:	4688      	mov	r8, r1
 801e4ba:	6818      	ldr	r0, [r3, #0]
 801e4bc:	6859      	ldr	r1, [r3, #4]
 801e4be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4c0:	ad02      	add	r5, sp, #8
 801e4c2:	c503      	stmia	r5!, {r0, r1}
 801e4c4:	6818      	ldr	r0, [r3, #0]
 801e4c6:	6859      	ldr	r1, [r3, #4]
 801e4c8:	ad04      	add	r5, sp, #16
 801e4ca:	c503      	stmia	r5!, {r0, r1}
 801e4cc:	a802      	add	r0, sp, #8
 801e4ce:	f89d a03c 	ldrb.w	sl, [sp, #60]	@ 0x3c
 801e4d2:	f7f7 f911 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e4d6:	4621      	mov	r1, r4
 801e4d8:	a804      	add	r0, sp, #16
 801e4da:	f7f7 f935 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e4de:	2f01      	cmp	r7, #1
 801e4e0:	d05c      	beq.n	801e59c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf0>
 801e4e2:	d357      	bcc.n	801e594 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xe8>
 801e4e4:	2f02      	cmp	r7, #2
 801e4e6:	d163      	bne.n	801e5b0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x104>
 801e4e8:	f04f 0910 	mov.w	r9, #16
 801e4ec:	2504      	movs	r5, #4
 801e4ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e4f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e4f6:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801e4fa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e4fe:	fb14 2403 	smlabb	r4, r4, r3, r2
 801e502:	4f2e      	ldr	r7, [pc, #184]	@ (801e5bc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x110>)
 801e504:	440a      	add	r2, r1
 801e506:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e50a:	6838      	ldr	r0, [r7, #0]
 801e50c:	440b      	add	r3, r1
 801e50e:	fb05 8404 	mla	r4, r5, r4, r8
 801e512:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e516:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e51a:	2800      	cmp	r0, #0
 801e51c:	d042      	beq.n	801e5a4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 801e51e:	f7fc feb1 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801e522:	6833      	ldr	r3, [r6, #0]
 801e524:	4630      	mov	r0, r6
 801e526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e528:	4798      	blx	r3
 801e52a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e52e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801e532:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801e536:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801e53a:	f7fa fbf7 	bl	8018d2c <nema_set_clip>
 801e53e:	2200      	movs	r2, #0
 801e540:	2600      	movs	r6, #0
 801e542:	4611      	mov	r1, r2
 801e544:	4653      	mov	r3, sl
 801e546:	4610      	mov	r0, r2
 801e548:	f7fa fc24 	bl	8018d94 <nema_rgba>
 801e54c:	f7fc fd94 	bl	801b078 <nema_set_const_color>
 801e550:	f04f 33ff 	mov.w	r3, #4294967295
 801e554:	2201      	movs	r2, #1
 801e556:	2100      	movs	r1, #0
 801e558:	4819      	ldr	r0, [pc, #100]	@ (801e5c0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x114>)
 801e55a:	f7fc f9c7 	bl	801a8ec <nema_set_blend>
 801e55e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e562:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801e566:	fb05 f503 	mul.w	r5, r5, r3
 801e56a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 801e56e:	464b      	mov	r3, r9
 801e570:	4620      	mov	r0, r4
 801e572:	e9cd 5600 	strd	r5, r6, [sp]
 801e576:	f7fa fc15 	bl	8018da4 <nema_bind_src_tex>
 801e57a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801e57e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801e582:	f7fa fd9b 	bl	80190bc <nema_blit>
 801e586:	6838      	ldr	r0, [r7, #0]
 801e588:	b160      	cbz	r0, 801e5a4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 801e58a:	f7fc fe9b 	bl	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801e58e:	b006      	add	sp, #24
 801e590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e594:	f04f 0904 	mov.w	r9, #4
 801e598:	2502      	movs	r5, #2
 801e59a:	e7a8      	b.n	801e4ee <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 801e59c:	f04f 0939 	mov.w	r9, #57	@ 0x39
 801e5a0:	2503      	movs	r5, #3
 801e5a2:	e7a4      	b.n	801e4ee <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 801e5a4:	4b07      	ldr	r3, [pc, #28]	@ (801e5c4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x118>)
 801e5a6:	4a08      	ldr	r2, [pc, #32]	@ (801e5c8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x11c>)
 801e5a8:	217c      	movs	r1, #124	@ 0x7c
 801e5aa:	4808      	ldr	r0, [pc, #32]	@ (801e5cc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x120>)
 801e5ac:	f00c fc1e 	bl	802adec <__assert_func>
 801e5b0:	4b07      	ldr	r3, [pc, #28]	@ (801e5d0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x124>)
 801e5b2:	4a08      	ldr	r2, [pc, #32]	@ (801e5d4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x128>)
 801e5b4:	21c9      	movs	r1, #201	@ 0xc9
 801e5b6:	4808      	ldr	r0, [pc, #32]	@ (801e5d8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x12c>)
 801e5b8:	f00c fc18 	bl	802adec <__assert_func>
 801e5bc:	200875c8 	.word	0x200875c8
 801e5c0:	08000504 	.word	0x08000504
 801e5c4:	0802ddcc 	.word	0x0802ddcc
 801e5c8:	0802e638 	.word	0x0802e638
 801e5cc:	0802ddf4 	.word	0x0802ddf4
 801e5d0:	0802e278 	.word	0x0802e278
 801e5d4:	0802f9dc 	.word	0x0802f9dc
 801e5d8:	0802de70 	.word	0x0802de70

0801e5dc <_ZNK8touchgfx8LCDGPU2D22blendPixelRGB888_32BPPEPKhPmh.constprop.19>:
 801e5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5de:	680c      	ldr	r4, [r1, #0]
 801e5e0:	7805      	ldrb	r5, [r0, #0]
 801e5e2:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801e5e6:	7847      	ldrb	r7, [r0, #1]
 801e5e8:	7883      	ldrb	r3, [r0, #2]
 801e5ea:	d02e      	beq.n	801e64a <_ZNK8touchgfx8LCDGPU2D22blendPixelRGB888_32BPPEPKhPmh.constprop.19+0x6e>
 801e5ec:	fb02 f60c 	mul.w	r6, r2, ip
 801e5f0:	fb12 f303 	smulbb	r3, r2, r3
 801e5f4:	1c70      	adds	r0, r6, #1
 801e5f6:	fb15 f502 	smulbb	r5, r5, r2
 801e5fa:	eb00 2026 	add.w	r0, r0, r6, asr #8
 801e5fe:	1200      	asrs	r0, r0, #8
 801e600:	fb12 f707 	smulbb	r7, r2, r7
 801e604:	ebac 0600 	sub.w	r6, ip, r0
 801e608:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801e60c:	fb06 330e 	mla	r3, r6, lr, r3
 801e610:	fa5f fe84 	uxtb.w	lr, r4
 801e614:	fb06 550e 	mla	r5, r6, lr, r5
 801e618:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e61c:	fb06 7404 	mla	r4, r6, r4, r7
 801e620:	4462      	add	r2, ip
 801e622:	1a12      	subs	r2, r2, r0
 801e624:	b2d0      	uxtb	r0, r2
 801e626:	fbb3 f2f0 	udiv	r2, r3, r0
 801e62a:	fbb5 f5f0 	udiv	r5, r5, r0
 801e62e:	fbb4 f3f0 	udiv	r3, r4, r0
 801e632:	0412      	lsls	r2, r2, #16
 801e634:	b2ec      	uxtb	r4, r5
 801e636:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 801e63a:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 801e63e:	021b      	lsls	r3, r3, #8
 801e640:	4302      	orrs	r2, r0
 801e642:	b29b      	uxth	r3, r3
 801e644:	431a      	orrs	r2, r3
 801e646:	600a      	str	r2, [r1, #0]
 801e648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e64a:	041b      	lsls	r3, r3, #16
 801e64c:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 801e650:	432a      	orrs	r2, r5
 801e652:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 801e656:	600a      	str	r2, [r1, #0]
 801e658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e65a:	bf00      	nop

0801e65c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb>:
 801e65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e660:	4c1e      	ldr	r4, [pc, #120]	@ (801e6dc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x80>)
 801e662:	6806      	ldr	r6, [r0, #0]
 801e664:	6824      	ldr	r4, [r4, #0]
 801e666:	4605      	mov	r5, r0
 801e668:	f894 0058 	ldrb.w	r0, [r4, #88]	@ 0x58
 801e66c:	b087      	sub	sp, #28
 801e66e:	6937      	ldr	r7, [r6, #16]
 801e670:	4690      	mov	r8, r2
 801e672:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801e676:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 801e67a:	b170      	cbz	r0, 801e69a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 801e67c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801e67e:	b160      	cbz	r0, 801e69a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 801e680:	6804      	ldr	r4, [r0, #0]
 801e682:	4a17      	ldr	r2, [pc, #92]	@ (801e6e0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 801e684:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 801e686:	4294      	cmp	r4, r2
 801e688:	d10d      	bne.n	801e6a6 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x4a>
 801e68a:	4c16      	ldr	r4, [pc, #88]	@ (801e6e4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 801e68c:	7b02      	ldrb	r2, [r0, #12]
 801e68e:	42a7      	cmp	r7, r4
 801e690:	d112      	bne.n	801e6b8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x5c>
 801e692:	b9d6      	cbnz	r6, 801e6ca <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x6e>
 801e694:	b007      	add	sp, #28
 801e696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e69a:	68a0      	ldr	r0, [r4, #8]
 801e69c:	4a10      	ldr	r2, [pc, #64]	@ (801e6e0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 801e69e:	6804      	ldr	r4, [r0, #0]
 801e6a0:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 801e6a2:	4294      	cmp	r4, r2
 801e6a4:	d0f1      	beq.n	801e68a <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x2e>
 801e6a6:	e9cd 1304 	strd	r1, r3, [sp, #16]
 801e6aa:	47a0      	blx	r4
 801e6ac:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 801e6b0:	4c0c      	ldr	r4, [pc, #48]	@ (801e6e4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 801e6b2:	4602      	mov	r2, r0
 801e6b4:	42a7      	cmp	r7, r4
 801e6b6:	d0ec      	beq.n	801e692 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x36>
 801e6b8:	9300      	str	r3, [sp, #0]
 801e6ba:	e9cd 6901 	strd	r6, r9, [sp, #4]
 801e6be:	4643      	mov	r3, r8
 801e6c0:	4628      	mov	r0, r5
 801e6c2:	47b8      	blx	r7
 801e6c4:	b007      	add	sp, #28
 801e6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6ca:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
 801e6ce:	4628      	mov	r0, r5
 801e6d0:	4643      	mov	r3, r8
 801e6d2:	b007      	add	sp, #28
 801e6d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e6d8:	f7ff bee8 	b.w	801e4ac <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 801e6dc:	2008745c 	.word	0x2008745c
 801e6e0:	0801b365 	.word	0x0801b365
 801e6e4:	0801e6e9 	.word	0x0801e6e9

0801e6e8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e6e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e6ec:	b087      	sub	sp, #28
 801e6ee:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 801e6f2:	b915      	cbnz	r5, 801e6fa <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12>
 801e6f4:	b007      	add	sp, #28
 801e6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6fa:	461c      	mov	r4, r3
 801e6fc:	4617      	mov	r7, r2
 801e6fe:	4688      	mov	r8, r1
 801e700:	4606      	mov	r6, r0
 801e702:	6859      	ldr	r1, [r3, #4]
 801e704:	6818      	ldr	r0, [r3, #0]
 801e706:	ab02      	add	r3, sp, #8
 801e708:	c303      	stmia	r3!, {r0, r1}
 801e70a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e70c:	6818      	ldr	r0, [r3, #0]
 801e70e:	6859      	ldr	r1, [r3, #4]
 801e710:	ab04      	add	r3, sp, #16
 801e712:	c303      	stmia	r3!, {r0, r1}
 801e714:	a802      	add	r0, sp, #8
 801e716:	f7f6 ffef 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e71a:	4621      	mov	r1, r4
 801e71c:	a804      	add	r0, sp, #16
 801e71e:	f7f7 f813 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e722:	2f01      	cmp	r7, #1
 801e724:	d05c      	beq.n	801e7e0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf8>
 801e726:	d357      	bcc.n	801e7d8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf0>
 801e728:	2f02      	cmp	r7, #2
 801e72a:	d163      	bne.n	801e7f4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x10c>
 801e72c:	f04f 0910 	mov.w	r9, #16
 801e730:	2404      	movs	r4, #4
 801e732:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801e736:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801e73a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e73e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 801e742:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e746:	4f2e      	ldr	r7, [pc, #184]	@ (801e800 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x118>)
 801e748:	fb04 8801 	mla	r8, r4, r1, r8
 801e74c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801e750:	4402      	add	r2, r0
 801e752:	6838      	ldr	r0, [r7, #0]
 801e754:	440b      	add	r3, r1
 801e756:	f8ad 2010 	strh.w	r2, [sp, #16]
 801e75a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801e75e:	2800      	cmp	r0, #0
 801e760:	d042      	beq.n	801e7e8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 801e762:	f7fc fd8f 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801e766:	6833      	ldr	r3, [r6, #0]
 801e768:	4630      	mov	r0, r6
 801e76a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e76c:	4798      	blx	r3
 801e76e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801e772:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801e776:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801e77a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801e77e:	f7fa fad5 	bl	8018d2c <nema_set_clip>
 801e782:	2200      	movs	r2, #0
 801e784:	462b      	mov	r3, r5
 801e786:	2500      	movs	r5, #0
 801e788:	4611      	mov	r1, r2
 801e78a:	4610      	mov	r0, r2
 801e78c:	f7fa fb02 	bl	8018d94 <nema_rgba>
 801e790:	f7fc fc72 	bl	801b078 <nema_set_const_color>
 801e794:	f04f 33ff 	mov.w	r3, #4294967295
 801e798:	2201      	movs	r2, #1
 801e79a:	2100      	movs	r1, #0
 801e79c:	4819      	ldr	r0, [pc, #100]	@ (801e804 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x11c>)
 801e79e:	f7fc f8a5 	bl	801a8ec <nema_set_blend>
 801e7a2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801e7a6:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801e7aa:	fb04 f403 	mul.w	r4, r4, r3
 801e7ae:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 801e7b2:	464b      	mov	r3, r9
 801e7b4:	4640      	mov	r0, r8
 801e7b6:	e9cd 4500 	strd	r4, r5, [sp]
 801e7ba:	f7fa faf3 	bl	8018da4 <nema_bind_src_tex>
 801e7be:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801e7c2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801e7c6:	f7fa fc79 	bl	80190bc <nema_blit>
 801e7ca:	6838      	ldr	r0, [r7, #0]
 801e7cc:	b160      	cbz	r0, 801e7e8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 801e7ce:	f7fc fd79 	bl	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801e7d2:	b007      	add	sp, #28
 801e7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7d8:	f04f 0904 	mov.w	r9, #4
 801e7dc:	2402      	movs	r4, #2
 801e7de:	e7a8      	b.n	801e732 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 801e7e0:	f04f 0939 	mov.w	r9, #57	@ 0x39
 801e7e4:	2403      	movs	r4, #3
 801e7e6:	e7a4      	b.n	801e732 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 801e7e8:	4b07      	ldr	r3, [pc, #28]	@ (801e808 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x120>)
 801e7ea:	4a08      	ldr	r2, [pc, #32]	@ (801e80c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x124>)
 801e7ec:	217c      	movs	r1, #124	@ 0x7c
 801e7ee:	4808      	ldr	r0, [pc, #32]	@ (801e810 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x128>)
 801e7f0:	f00c fafc 	bl	802adec <__assert_func>
 801e7f4:	4b07      	ldr	r3, [pc, #28]	@ (801e814 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12c>)
 801e7f6:	4a08      	ldr	r2, [pc, #32]	@ (801e818 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x130>)
 801e7f8:	21c9      	movs	r1, #201	@ 0xc9
 801e7fa:	4808      	ldr	r0, [pc, #32]	@ (801e81c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x134>)
 801e7fc:	f00c faf6 	bl	802adec <__assert_func>
 801e800:	200875c8 	.word	0x200875c8
 801e804:	08000504 	.word	0x08000504
 801e808:	0802ddcc 	.word	0x0802ddcc
 801e80c:	0802e638 	.word	0x0802e638
 801e810:	0802ddf4 	.word	0x0802ddf4
 801e814:	0802e278 	.word	0x0802e278
 801e818:	0802f9dc 	.word	0x0802f9dc
 801e81c:	0802de70 	.word	0x0802de70

0801e820 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e824:	4682      	mov	sl, r0
 801e826:	4851      	ldr	r0, [pc, #324]	@ (801e96c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x14c>)
 801e828:	b08f      	sub	sp, #60	@ 0x3c
 801e82a:	6800      	ldr	r0, [r0, #0]
 801e82c:	9104      	str	r1, [sp, #16]
 801e82e:	f890 1048 	ldrb.w	r1, [r0, #72]	@ 0x48
 801e832:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	@ 0x64
 801e836:	2902      	cmp	r1, #2
 801e838:	9003      	str	r0, [sp, #12]
 801e83a:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	@ 0x68
 801e83e:	9006      	str	r0, [sp, #24]
 801e840:	f000 81cd 	beq.w	801ebde <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3be>
 801e844:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801e846:	2900      	cmp	r1, #0
 801e848:	f000 81c3 	beq.w	801ebd2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3b2>
 801e84c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e850:	8899      	ldrh	r1, [r3, #4]
 801e852:	b2ae      	uxth	r6, r5
 801e854:	4431      	add	r1, r6
 801e856:	b289      	uxth	r1, r1
 801e858:	fa0f fc81 	sxth.w	ip, r1
 801e85c:	4565      	cmp	r5, ip
 801e85e:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801e862:	da28      	bge.n	801e8b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 801e864:	9803      	ldr	r0, [sp, #12]
 801e866:	1830      	adds	r0, r6, r0
 801e868:	b280      	uxth	r0, r0
 801e86a:	9005      	str	r0, [sp, #20]
 801e86c:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801e870:	4575      	cmp	r5, lr
 801e872:	da20      	bge.n	801e8b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 801e874:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 801e878:	b2a7      	uxth	r7, r4
 801e87a:	4638      	mov	r0, r7
 801e87c:	4447      	add	r7, r8
 801e87e:	b2bf      	uxth	r7, r7
 801e880:	fa0f f987 	sxth.w	r9, r7
 801e884:	454c      	cmp	r4, r9
 801e886:	da16      	bge.n	801e8b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 801e888:	4680      	mov	r8, r0
 801e88a:	9007      	str	r0, [sp, #28]
 801e88c:	9806      	ldr	r0, [sp, #24]
 801e88e:	4480      	add	r8, r0
 801e890:	fa1f f888 	uxth.w	r8, r8
 801e894:	fa0f fb88 	sxth.w	fp, r8
 801e898:	455c      	cmp	r4, fp
 801e89a:	da0c      	bge.n	801e8b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 801e89c:	9805      	ldr	r0, [sp, #20]
 801e89e:	45d9      	cmp	r9, fp
 801e8a0:	bfc8      	it	gt
 801e8a2:	4647      	movgt	r7, r8
 801e8a4:	45f4      	cmp	ip, lr
 801e8a6:	bfc8      	it	gt
 801e8a8:	4601      	movgt	r1, r0
 801e8aa:	9807      	ldr	r0, [sp, #28]
 801e8ac:	1b89      	subs	r1, r1, r6
 801e8ae:	1a3f      	subs	r7, r7, r0
 801e8b0:	b209      	sxth	r1, r1
 801e8b2:	b23f      	sxth	r7, r7
 801e8b4:	e005      	b.n	801e8c2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xa2>
 801e8b6:	2700      	movs	r7, #0
 801e8b8:	463c      	mov	r4, r7
 801e8ba:	4639      	mov	r1, r7
 801e8bc:	463e      	mov	r6, r7
 801e8be:	463d      	mov	r5, r7
 801e8c0:	9707      	str	r7, [sp, #28]
 801e8c2:	f9b2 b000 	ldrsh.w	fp, [r2]
 801e8c6:	8890      	ldrh	r0, [r2, #4]
 801e8c8:	4458      	add	r0, fp
 801e8ca:	b280      	uxth	r0, r0
 801e8cc:	fa0f fc80 	sxth.w	ip, r0
 801e8d0:	45ac      	cmp	ip, r5
 801e8d2:	dd51      	ble.n	801e978 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 801e8d4:	4431      	add	r1, r6
 801e8d6:	b289      	uxth	r1, r1
 801e8d8:	fa0f fe81 	sxth.w	lr, r1
 801e8dc:	45f3      	cmp	fp, lr
 801e8de:	da4b      	bge.n	801e978 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 801e8e0:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 801e8e4:	88d6      	ldrh	r6, [r2, #6]
 801e8e6:	4446      	add	r6, r8
 801e8e8:	b2b6      	uxth	r6, r6
 801e8ea:	fa0f f986 	sxth.w	r9, r6
 801e8ee:	454c      	cmp	r4, r9
 801e8f0:	da42      	bge.n	801e978 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 801e8f2:	9a07      	ldr	r2, [sp, #28]
 801e8f4:	443a      	add	r2, r7
 801e8f6:	b297      	uxth	r7, r2
 801e8f8:	b23a      	sxth	r2, r7
 801e8fa:	4590      	cmp	r8, r2
 801e8fc:	9205      	str	r2, [sp, #20]
 801e8fe:	da3b      	bge.n	801e978 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 801e900:	45ab      	cmp	fp, r5
 801e902:	bfb8      	it	lt
 801e904:	46ab      	movlt	fp, r5
 801e906:	4544      	cmp	r4, r8
 801e908:	bfb8      	it	lt
 801e90a:	4644      	movlt	r4, r8
 801e90c:	45f4      	cmp	ip, lr
 801e90e:	bfc8      	it	gt
 801e910:	4608      	movgt	r0, r1
 801e912:	9905      	ldr	r1, [sp, #20]
 801e914:	465a      	mov	r2, fp
 801e916:	4589      	cmp	r9, r1
 801e918:	bfc8      	it	gt
 801e91a:	463e      	movgt	r6, r7
 801e91c:	f8df c054 	ldr.w	ip, [pc, #84]	@ 801e974 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x154>
 801e920:	4f13      	ldr	r7, [pc, #76]	@ (801e970 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x150>)
 801e922:	fa1f f58b 	uxth.w	r5, fp
 801e926:	1b36      	subs	r6, r6, r4
 801e928:	1b41      	subs	r1, r0, r5
 801e92a:	f8bc c000 	ldrh.w	ip, [ip]
 801e92e:	883f      	ldrh	r7, [r7, #0]
 801e930:	fa0f fb86 	sxth.w	fp, r6
 801e934:	fa0f f981 	sxth.w	r9, r1
 801e938:	2a00      	cmp	r2, #0
 801e93a:	f8ad b026 	strh.w	fp, [sp, #38]	@ 0x26
 801e93e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e942:	f8ad 4022 	strh.w	r4, [sp, #34]	@ 0x22
 801e946:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 801e94a:	fa0f f68c 	sxth.w	r6, ip
 801e94e:	b239      	sxth	r1, r7
 801e950:	f280 812b 	bge.w	801ebaa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38a>
 801e954:	f04f 0e00 	mov.w	lr, #0
 801e958:	fa0f f980 	sxth.w	r9, r0
 801e95c:	4675      	mov	r5, lr
 801e95e:	4672      	mov	r2, lr
 801e960:	4648      	mov	r0, r9
 801e962:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 801e966:	f8ad e020 	strh.w	lr, [sp, #32]
 801e96a:	e015      	b.n	801e998 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 801e96c:	2008745c 	.word	0x2008745c
 801e970:	20087452 	.word	0x20087452
 801e974:	20087450 	.word	0x20087450
 801e978:	2200      	movs	r2, #0
 801e97a:	48a3      	ldr	r0, [pc, #652]	@ (801ec08 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e8>)
 801e97c:	4615      	mov	r5, r2
 801e97e:	f8b0 c000 	ldrh.w	ip, [r0]
 801e982:	4693      	mov	fp, r2
 801e984:	4614      	mov	r4, r2
 801e986:	4610      	mov	r0, r2
 801e988:	4691      	mov	r9, r2
 801e98a:	49a0      	ldr	r1, [pc, #640]	@ (801ec0c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ec>)
 801e98c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801e990:	880f      	ldrh	r7, [r1, #0]
 801e992:	fa0f f68c 	sxth.w	r6, ip
 801e996:	b239      	sxth	r1, r7
 801e998:	1ab2      	subs	r2, r6, r2
 801e99a:	4282      	cmp	r2, r0
 801e99c:	da05      	bge.n	801e9aa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x18a>
 801e99e:	ebac 0c05 	sub.w	ip, ip, r5
 801e9a2:	fa0f f98c 	sxth.w	r9, ip
 801e9a6:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 801e9aa:	2c00      	cmp	r4, #0
 801e9ac:	f2c0 80e8 	blt.w	801eb80 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x360>
 801e9b0:	4622      	mov	r2, r4
 801e9b2:	1a89      	subs	r1, r1, r2
 801e9b4:	458b      	cmp	fp, r1
 801e9b6:	dd04      	ble.n	801e9c2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 801e9b8:	1b3f      	subs	r7, r7, r4
 801e9ba:	fa0f fb87 	sxth.w	fp, r7
 801e9be:	f8ad b026 	strh.w	fp, [sp, #38]	@ 0x26
 801e9c2:	f1b9 0f00 	cmp.w	r9, #0
 801e9c6:	f340 80d2 	ble.w	801eb6e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 801e9ca:	f1bb 0f00 	cmp.w	fp, #0
 801e9ce:	f340 80ce 	ble.w	801eb6e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 801e9d2:	2200      	movs	r2, #0
 801e9d4:	8819      	ldrh	r1, [r3, #0]
 801e9d6:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 801e9da:	9b03      	ldr	r3, [sp, #12]
 801e9dc:	1a6d      	subs	r5, r5, r1
 801e9de:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801e9e2:	eba4 0408 	sub.w	r4, r4, r8
 801e9e6:	9b06      	ldr	r3, [sp, #24]
 801e9e8:	a90c      	add	r1, sp, #48	@ 0x30
 801e9ea:	a80a      	add	r0, sp, #40	@ 0x28
 801e9ec:	b22d      	sxth	r5, r5
 801e9ee:	b224      	sxth	r4, r4
 801e9f0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801e9f4:	920c      	str	r2, [sp, #48]	@ 0x30
 801e9f6:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801e9fa:	f8ad b02e 	strh.w	fp, [sp, #46]	@ 0x2e
 801e9fe:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 801ea02:	f8ad 402a 	strh.w	r4, [sp, #42]	@ 0x2a
 801ea06:	f7f6 fe9f 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ea0a:	a808      	add	r0, sp, #32
 801ea0c:	f7f6 fe74 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ea10:	a80c      	add	r0, sp, #48	@ 0x30
 801ea12:	f7f6 fe71 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ea16:	4b7e      	ldr	r3, [pc, #504]	@ (801ec10 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801ea1e:	2a00      	cmp	r2, #0
 801ea20:	f040 80ba 	bne.w	801eb98 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x378>
 801ea24:	6898      	ldr	r0, [r3, #8]
 801ea26:	6803      	ldr	r3, [r0, #0]
 801ea28:	4a7a      	ldr	r2, [pc, #488]	@ (801ec14 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f4>)
 801ea2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ea2c:	4293      	cmp	r3, r2
 801ea2e:	f040 80c4 	bne.w	801ebba <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39a>
 801ea32:	7b00      	ldrb	r0, [r0, #12]
 801ea34:	2801      	cmp	r0, #1
 801ea36:	f000 80ba 	beq.w	801ebae <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38e>
 801ea3a:	f0c0 80b2 	bcc.w	801eba2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x382>
 801ea3e:	2802      	cmp	r0, #2
 801ea40:	f040 80da 	bne.w	801ebf8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3d8>
 801ea44:	2310      	movs	r3, #16
 801ea46:	2604      	movs	r6, #4
 801ea48:	9305      	str	r3, [sp, #20]
 801ea4a:	9b04      	ldr	r3, [sp, #16]
 801ea4c:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	@ 0x34
 801ea50:	681b      	ldr	r3, [r3, #0]
 801ea52:	fb06 f101 	mul.w	r1, r6, r1
 801ea56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea58:	4a6f      	ldr	r2, [pc, #444]	@ (801ec18 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f8>)
 801ea5a:	9103      	str	r1, [sp, #12]
 801ea5c:	4293      	cmp	r3, r2
 801ea5e:	f040 80ae 	bne.w	801ebbe <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39e>
 801ea62:	4b6e      	ldr	r3, [pc, #440]	@ (801ec1c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3fc>)
 801ea64:	881f      	ldrh	r7, [r3, #0]
 801ea66:	2f00      	cmp	r7, #0
 801ea68:	f000 80bf 	beq.w	801ebea <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ca>
 801ea6c:	9b04      	ldr	r3, [sp, #16]
 801ea6e:	7b1b      	ldrb	r3, [r3, #12]
 801ea70:	2b02      	cmp	r3, #2
 801ea72:	f000 80a0 	beq.w	801ebb6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x396>
 801ea76:	2b01      	cmp	r3, #1
 801ea78:	bf14      	ite	ne
 801ea7a:	2302      	movne	r3, #2
 801ea7c:	2303      	moveq	r3, #3
 801ea7e:	fb17 f703 	smulbb	r7, r7, r3
 801ea82:	b2bf      	uxth	r7, r7
 801ea84:	4a62      	ldr	r2, [pc, #392]	@ (801ec10 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 801ea86:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801ea8a:	6810      	ldr	r0, [r2, #0]
 801ea8c:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801ea90:	9a03      	ldr	r2, [sp, #12]
 801ea92:	fb02 3808 	mla	r8, r2, r8, r3
 801ea96:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ea98:	6803      	ldr	r3, [r0, #0]
 801ea9a:	4442      	add	r2, r8
 801ea9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea9e:	9204      	str	r2, [sp, #16]
 801eaa0:	4798      	blx	r3
 801eaa2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 801eaa6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801eaaa:	fb07 f202 	mul.w	r2, r7, r2
 801eaae:	fb06 2303 	mla	r3, r6, r3, r2
 801eab2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 801ec4c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x42c>
 801eab6:	18c3      	adds	r3, r0, r3
 801eab8:	f8d8 2000 	ldr.w	r2, [r8]
 801eabc:	9306      	str	r3, [sp, #24]
 801eabe:	2a00      	cmp	r2, #0
 801eac0:	f000 8081 	beq.w	801ebc6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 801eac4:	2600      	movs	r6, #0
 801eac6:	4610      	mov	r0, r2
 801eac8:	f7fc fbdc 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801eacc:	9b03      	ldr	r3, [sp, #12]
 801eace:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801ead2:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801ead6:	9300      	str	r3, [sp, #0]
 801ead8:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801eadc:	f7fa f9e6 	bl	8018eac <nema_bind_dst_tex>
 801eae0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801eae4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801eae8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801eaec:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801eaf0:	f7fa f91c 	bl	8018d2c <nema_set_clip>
 801eaf4:	f04f 33ff 	mov.w	r3, #4294967295
 801eaf8:	2201      	movs	r2, #1
 801eafa:	4631      	mov	r1, r6
 801eafc:	f240 5004 	movw	r0, #1284	@ 0x504
 801eb00:	f7fb fef4 	bl	801a8ec <nema_set_blend>
 801eb04:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 801eb08:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	@ 0x26
 801eb0c:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	@ 0x24
 801eb10:	9700      	str	r7, [sp, #0]
 801eb12:	9601      	str	r6, [sp, #4]
 801eb14:	f7fa f946 	bl	8018da4 <nema_bind_src_tex>
 801eb18:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801eb1c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801eb20:	f7fa facc 	bl	80190bc <nema_blit>
 801eb24:	f8d8 0000 	ldr.w	r0, [r8]
 801eb28:	2800      	cmp	r0, #0
 801eb2a:	d04c      	beq.n	801ebc6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 801eb2c:	f7fc fbca 	bl	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801eb30:	f8d8 0000 	ldr.w	r0, [r8]
 801eb34:	2800      	cmp	r0, #0
 801eb36:	d046      	beq.n	801ebc6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 801eb38:	6803      	ldr	r3, [r0, #0]
 801eb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb3c:	4798      	blx	r3
 801eb3e:	f8d8 0000 	ldr.w	r0, [r8]
 801eb42:	2800      	cmp	r0, #0
 801eb44:	d03f      	beq.n	801ebc6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 801eb46:	6803      	ldr	r3, [r0, #0]
 801eb48:	4637      	mov	r7, r6
 801eb4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb4c:	4798      	blx	r3
 801eb4e:	4650      	mov	r0, sl
 801eb50:	f365 060f 	bfi	r6, r5, #0, #16
 801eb54:	f369 070f 	bfi	r7, r9, #0, #16
 801eb58:	f364 461f 	bfi	r6, r4, #16, #16
 801eb5c:	f36b 471f 	bfi	r7, fp, #16, #16
 801eb60:	f8ca 6000 	str.w	r6, [sl]
 801eb64:	f8ca 7004 	str.w	r7, [sl, #4]
 801eb68:	b00f      	add	sp, #60	@ 0x3c
 801eb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb6e:	2300      	movs	r3, #0
 801eb70:	4650      	mov	r0, sl
 801eb72:	f8ca 3000 	str.w	r3, [sl]
 801eb76:	f8ca 3004 	str.w	r3, [sl, #4]
 801eb7a:	b00f      	add	sp, #60	@ 0x3c
 801eb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb80:	2000      	movs	r0, #0
 801eb82:	eb0b 0604 	add.w	r6, fp, r4
 801eb86:	fa0f fb86 	sxth.w	fp, r6
 801eb8a:	4604      	mov	r4, r0
 801eb8c:	4602      	mov	r2, r0
 801eb8e:	f8ad b026 	strh.w	fp, [sp, #38]	@ 0x26
 801eb92:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801eb96:	e70c      	b.n	801e9b2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 801eb98:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801eb9a:	2800      	cmp	r0, #0
 801eb9c:	f47f af43 	bne.w	801ea26 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x206>
 801eba0:	e740      	b.n	801ea24 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>
 801eba2:	2304      	movs	r3, #4
 801eba4:	2602      	movs	r6, #2
 801eba6:	9305      	str	r3, [sp, #20]
 801eba8:	e74f      	b.n	801ea4a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 801ebaa:	4648      	mov	r0, r9
 801ebac:	e6f4      	b.n	801e998 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 801ebae:	2339      	movs	r3, #57	@ 0x39
 801ebb0:	2603      	movs	r6, #3
 801ebb2:	9305      	str	r3, [sp, #20]
 801ebb4:	e749      	b.n	801ea4a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 801ebb6:	2304      	movs	r3, #4
 801ebb8:	e761      	b.n	801ea7e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25e>
 801ebba:	4798      	blx	r3
 801ebbc:	e73a      	b.n	801ea34 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>
 801ebbe:	9804      	ldr	r0, [sp, #16]
 801ebc0:	4798      	blx	r3
 801ebc2:	4607      	mov	r7, r0
 801ebc4:	e75e      	b.n	801ea84 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>
 801ebc6:	4b16      	ldr	r3, [pc, #88]	@ (801ec20 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x400>)
 801ebc8:	4a16      	ldr	r2, [pc, #88]	@ (801ec24 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x404>)
 801ebca:	217c      	movs	r1, #124	@ 0x7c
 801ebcc:	4816      	ldr	r0, [pc, #88]	@ (801ec28 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x408>)
 801ebce:	f00c f90d 	bl	802adec <__assert_func>
 801ebd2:	4b16      	ldr	r3, [pc, #88]	@ (801ec2c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40c>)
 801ebd4:	4a16      	ldr	r2, [pc, #88]	@ (801ec30 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 801ebd6:	21f9      	movs	r1, #249	@ 0xf9
 801ebd8:	4816      	ldr	r0, [pc, #88]	@ (801ec34 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 801ebda:	f00c f907 	bl	802adec <__assert_func>
 801ebde:	4b16      	ldr	r3, [pc, #88]	@ (801ec38 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x418>)
 801ebe0:	4a13      	ldr	r2, [pc, #76]	@ (801ec30 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 801ebe2:	21f8      	movs	r1, #248	@ 0xf8
 801ebe4:	4813      	ldr	r0, [pc, #76]	@ (801ec34 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 801ebe6:	f00c f901 	bl	802adec <__assert_func>
 801ebea:	4b14      	ldr	r3, [pc, #80]	@ (801ec3c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x41c>)
 801ebec:	4a14      	ldr	r2, [pc, #80]	@ (801ec40 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x420>)
 801ebee:	f240 110f 	movw	r1, #271	@ 0x10f
 801ebf2:	4814      	ldr	r0, [pc, #80]	@ (801ec44 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x424>)
 801ebf4:	f00c f8fa 	bl	802adec <__assert_func>
 801ebf8:	4b13      	ldr	r3, [pc, #76]	@ (801ec48 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x428>)
 801ebfa:	4a0d      	ldr	r2, [pc, #52]	@ (801ec30 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 801ebfc:	f44f 7191 	mov.w	r1, #290	@ 0x122
 801ec00:	480c      	ldr	r0, [pc, #48]	@ (801ec34 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 801ec02:	f00c f8f3 	bl	802adec <__assert_func>
 801ec06:	bf00      	nop
 801ec08:	20087450 	.word	0x20087450
 801ec0c:	20087452 	.word	0x20087452
 801ec10:	2008745c 	.word	0x2008745c
 801ec14:	0801b365 	.word	0x0801b365
 801ec18:	0801cf45 	.word	0x0801cf45
 801ec1c:	20087456 	.word	0x20087456
 801ec20:	0802ddcc 	.word	0x0802ddcc
 801ec24:	0802e638 	.word	0x0802e638
 801ec28:	0802ddf4 	.word	0x0802ddf4
 801ec2c:	0802e128 	.word	0x0802e128
 801ec30:	0802f710 	.word	0x0802f710
 801ec34:	0802de70 	.word	0x0802de70
 801ec38:	0802e074 	.word	0x0802e074
 801ec3c:	0802e3a8 	.word	0x0802e3a8
 801ec40:	0802fb6c 	.word	0x0802fb6c
 801ec44:	0802e3ec 	.word	0x0802e3ec
 801ec48:	0802e178 	.word	0x0802e178
 801ec4c:	200875c8 	.word	0x200875c8

0801ec50 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec54:	b085      	sub	sp, #20
 801ec56:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801ec5a:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	@ 0x38
 801ec5e:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
 801ec62:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 801ec66:	2e00      	cmp	r6, #0
 801ec68:	d05b      	beq.n	801ed22 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 801ec6a:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 801ec6e:	f1be 0f00 	cmp.w	lr, #0
 801ec72:	dd56      	ble.n	801ed22 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 801ec74:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801ec78:	f1be 0f00 	cmp.w	lr, #0
 801ec7c:	dd51      	ble.n	801ed22 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 801ec7e:	f3c8 0b87 	ubfx	fp, r8, #2, #8
 801ec82:	f1bb 0f0b 	cmp.w	fp, #11
 801ec86:	f000 815f 	beq.w	801ef48 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2f8>
 801ec8a:	f1bb 0f0d 	cmp.w	fp, #13
 801ec8e:	4684      	mov	ip, r0
 801ec90:	4614      	mov	r4, r2
 801ec92:	461f      	mov	r7, r3
 801ec94:	d03c      	beq.n	801ed10 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc0>
 801ec96:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801eff4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a4>
 801ec9a:	f8da 0000 	ldr.w	r0, [sl]
 801ec9e:	2800      	cmp	r0, #0
 801eca0:	f000 8187 	beq.w	801efb2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 801eca4:	f8cd c00c 	str.w	ip, [sp, #12]
 801eca8:	f7fc faec 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801ecac:	9b03      	ldr	r3, [sp, #12]
 801ecae:	681a      	ldr	r2, [r3, #0]
 801ecb0:	4618      	mov	r0, r3
 801ecb2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 801ecb4:	4798      	blx	r3
 801ecb6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ecba:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801ecbe:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801ecc2:	f9b5 0000 	ldrsh.w	r0, [r5]
 801ecc6:	f7fa f831 	bl	8018d2c <nema_set_clip>
 801ecca:	2200      	movs	r2, #0
 801eccc:	4633      	mov	r3, r6
 801ecce:	4611      	mov	r1, r2
 801ecd0:	4610      	mov	r0, r2
 801ecd2:	f7fa f85f 	bl	8018d94 <nema_rgba>
 801ecd6:	f7fc f9cf 	bl	801b078 <nema_set_const_color>
 801ecda:	f04f 33ff 	mov.w	r3, #4294967295
 801ecde:	2201      	movs	r2, #1
 801ece0:	2100      	movs	r1, #0
 801ece2:	48ba      	ldr	r0, [pc, #744]	@ (801efcc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37c>)
 801ece4:	f7fb fe02 	bl	801a8ec <nema_set_blend>
 801ece8:	f1bb 0f0d 	cmp.w	fp, #13
 801ecec:	f200 8167 	bhi.w	801efbe <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801ecf0:	e8df f01b 	tbh	[pc, fp, lsl #1]
 801ecf4:	00c100cd 	.word	0x00c100cd
 801ecf8:	016500d6 	.word	0x016500d6
 801ecfc:	01650165 	.word	0x01650165
 801ed00:	01650165 	.word	0x01650165
 801ed04:	01650165 	.word	0x01650165
 801ed08:	01650165 	.word	0x01650165
 801ed0c:	001a00ac 	.word	0x001a00ac
 801ed10:	685b      	ldr	r3, [r3, #4]
 801ed12:	b133      	cbz	r3, 801ed22 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 801ed14:	781b      	ldrb	r3, [r3, #0]
 801ed16:	f1a3 0216 	sub.w	r2, r3, #22
 801ed1a:	2a01      	cmp	r2, #1
 801ed1c:	d9bb      	bls.n	801ec96 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 801ed1e:	2b12      	cmp	r3, #18
 801ed20:	d0b9      	beq.n	801ec96 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 801ed22:	b005      	add	sp, #20
 801ed24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed28:	f04f 36ff 	mov.w	r6, #4294967295
 801ed2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	6838      	ldr	r0, [r7, #0]
 801ed34:	781b      	ldrb	r3, [r3, #0]
 801ed36:	f008 0501 	and.w	r5, r8, #1
 801ed3a:	e9cd 6500 	strd	r6, r5, [sp]
 801ed3e:	f7fa f831 	bl	8018da4 <nema_bind_src_tex>
 801ed42:	2001      	movs	r0, #1
 801ed44:	f7fa fe9c 	bl	8019a80 <nema_enable_tiling>
 801ed48:	f9b9 3000 	ldrsh.w	r3, [r9]
 801ed4c:	edd4 7a00 	vldr	s15, [r4]
 801ed50:	ee02 3a10 	vmov	s4, r3
 801ed54:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 801ed58:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801ed5c:	ee02 3a90 	vmov	s5, r3
 801ed60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ed64:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 801efd0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801ed68:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801ed6c:	edd4 7a01 	vldr	s15, [r4, #4]
 801ed70:	eeb0 0a42 	vmov.f32	s0, s4
 801ed74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed78:	eea7 0a26 	vfma.f32	s0, s14, s13
 801ed7c:	eef0 0a62 	vmov.f32	s1, s5
 801ed80:	ed94 7a03 	vldr	s14, [r4, #12]
 801ed84:	4b93      	ldr	r3, [pc, #588]	@ (801efd4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x384>)
 801ed86:	eee7 0aa6 	vfma.f32	s1, s15, s13
 801ed8a:	781b      	ldrb	r3, [r3, #0]
 801ed8c:	edd4 7a04 	vldr	s15, [r4, #16]
 801ed90:	2b01      	cmp	r3, #1
 801ed92:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801ed96:	f000 808c 	beq.w	801eeb2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x262>
 801ed9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801eda2:	f240 80ea 	bls.w	801ef7a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32a>
 801eda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edaa:	bf94      	ite	ls
 801edac:	2001      	movls	r0, #1
 801edae:	2002      	movhi	r0, #2
 801edb0:	edd4 7a05 	vldr	s15, [r4, #20]
 801edb4:	ed94 6a08 	vldr	s12, [r4, #32]
 801edb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801edbc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801edc0:	edd4 7a06 	vldr	s15, [r4, #24]
 801edc4:	eddf 6a82 	vldr	s13, [pc, #520]	@ 801efd0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801edc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801edcc:	eeb0 1a42 	vmov.f32	s2, s4
 801edd0:	eef0 1a62 	vmov.f32	s3, s5
 801edd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edd8:	eee7 1aa6 	vfma.f32	s3, s15, s13
 801eddc:	eea7 1a26 	vfma.f32	s2, s14, s13
 801ede0:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801ede4:	f240 80c1 	bls.w	801ef6a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x31a>
 801ede8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801edec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edf0:	bf94      	ite	ls
 801edf2:	2101      	movls	r1, #1
 801edf4:	2102      	movhi	r1, #2
 801edf6:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 801edfa:	ed94 6a0d 	vldr	s12, [r4, #52]	@ 0x34
 801edfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ee02:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801ee06:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801ee0a:	eddf 6a71 	vldr	s13, [pc, #452]	@ 801efd0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801ee0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ee12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee16:	eee7 2aa6 	vfma.f32	s5, s15, s13
 801ee1a:	eea7 2a26 	vfma.f32	s4, s14, s13
 801ee1e:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 801ee22:	f240 809a 	bls.w	801ef5a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30a>
 801ee26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ee2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee2e:	bf94      	ite	ls
 801ee30:	2201      	movls	r2, #1
 801ee32:	2202      	movhi	r2, #2
 801ee34:	f7fa fa38 	bl	80192a8 <nema_blit_tri_fit>
 801ee38:	f8da 0000 	ldr.w	r0, [sl]
 801ee3c:	2800      	cmp	r0, #0
 801ee3e:	f000 80b8 	beq.w	801efb2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 801ee42:	b005      	add	sp, #20
 801ee44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee48:	f7fc ba3c 	b.w	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801ee4c:	4a62      	ldr	r2, [pc, #392]	@ (801efd8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x388>)
 801ee4e:	23ff      	movs	r3, #255	@ 0xff
 801ee50:	6810      	ldr	r0, [r2, #0]
 801ee52:	f008 0501 	and.w	r5, r8, #1
 801ee56:	b2c2      	uxtb	r2, r0
 801ee58:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801ee5c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801ee60:	f7f9 ff98 	bl	8018d94 <nema_rgba>
 801ee64:	f7f9 ff56 	bl	8018d14 <nema_set_tex_color>
 801ee68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801ee6c:	6838      	ldr	r0, [r7, #0]
 801ee6e:	2329      	movs	r3, #41	@ 0x29
 801ee70:	f04f 36ff 	mov.w	r6, #4294967295
 801ee74:	e761      	b.n	801ed3a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 801ee76:	2339      	movs	r3, #57	@ 0x39
 801ee78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801ee7c:	f04f 0c03 	mov.w	ip, #3
 801ee80:	6838      	ldr	r0, [r7, #0]
 801ee82:	f008 0501 	and.w	r5, r8, #1
 801ee86:	693e      	ldr	r6, [r7, #16]
 801ee88:	fb06 f60c 	mul.w	r6, r6, ip
 801ee8c:	e755      	b.n	801ed3a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 801ee8e:	f008 0501 	and.w	r5, r8, #1
 801ee92:	6838      	ldr	r0, [r7, #0]
 801ee94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801ee98:	2304      	movs	r3, #4
 801ee9a:	f04f 0c02 	mov.w	ip, #2
 801ee9e:	e7f2      	b.n	801ee86 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x236>
 801eea0:	2310      	movs	r3, #16
 801eea2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801eea6:	f04f 0c04 	mov.w	ip, #4
 801eeaa:	6838      	ldr	r0, [r7, #0]
 801eeac:	f008 0501 	and.w	r5, r8, #1
 801eeb0:	e7e9      	b.n	801ee86 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x236>
 801eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eeb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801eeba:	d974      	bls.n	801efa6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x356>
 801eebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eec0:	bf94      	ite	ls
 801eec2:	2002      	movls	r0, #2
 801eec4:	2003      	movhi	r0, #3
 801eec6:	edd4 7a05 	vldr	s15, [r4, #20]
 801eeca:	ed94 6a08 	vldr	s12, [r4, #32]
 801eece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801eed2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801eed6:	edd4 7a06 	vldr	s15, [r4, #24]
 801eeda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801efd0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801eede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eee2:	eeb0 1a42 	vmov.f32	s2, s4
 801eee6:	eef0 1a62 	vmov.f32	s3, s5
 801eeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eeee:	eee7 1aa6 	vfma.f32	s3, s15, s13
 801eef2:	eea7 1a26 	vfma.f32	s2, s14, s13
 801eef6:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801eefa:	d94c      	bls.n	801ef96 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x346>
 801eefc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ef00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef04:	bf94      	ite	ls
 801ef06:	2102      	movls	r1, #2
 801ef08:	2103      	movhi	r1, #3
 801ef0a:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 801ef0e:	ed94 6a0d 	vldr	s12, [r4, #52]	@ 0x34
 801ef12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ef16:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801ef1a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801ef1e:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 801efd0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801ef22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef2a:	eee7 2aa6 	vfma.f32	s5, s15, s13
 801ef2e:	eea7 2a26 	vfma.f32	s4, s14, s13
 801ef32:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 801ef36:	d926      	bls.n	801ef86 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801ef38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ef3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef40:	bf94      	ite	ls
 801ef42:	2202      	movls	r2, #2
 801ef44:	2203      	movhi	r2, #3
 801ef46:	e775      	b.n	801ee34 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e4>
 801ef48:	e9cd 6a11 	strd	r6, sl, [sp, #68]	@ 0x44
 801ef4c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 801ef50:	b005      	add	sp, #20
 801ef52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef56:	f7f5 be7f 	b.w	8014c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 801ef5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ef5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef62:	bf94      	ite	ls
 801ef64:	2200      	movls	r2, #0
 801ef66:	2203      	movhi	r2, #3
 801ef68:	e764      	b.n	801ee34 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e4>
 801ef6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ef6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef72:	bf94      	ite	ls
 801ef74:	2100      	movls	r1, #0
 801ef76:	2103      	movhi	r1, #3
 801ef78:	e73d      	b.n	801edf6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a6>
 801ef7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef7e:	bf94      	ite	ls
 801ef80:	2000      	movls	r0, #0
 801ef82:	2003      	movhi	r0, #3
 801ef84:	e714      	b.n	801edb0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x160>
 801ef86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ef8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef8e:	bf94      	ite	ls
 801ef90:	2201      	movls	r2, #1
 801ef92:	2200      	movhi	r2, #0
 801ef94:	e74e      	b.n	801ee34 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e4>
 801ef96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ef9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef9e:	bf94      	ite	ls
 801efa0:	2101      	movls	r1, #1
 801efa2:	2100      	movhi	r1, #0
 801efa4:	e7b1      	b.n	801ef0a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ba>
 801efa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efaa:	bf94      	ite	ls
 801efac:	2001      	movls	r0, #1
 801efae:	2000      	movhi	r0, #0
 801efb0:	e789      	b.n	801eec6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x276>
 801efb2:	4b0a      	ldr	r3, [pc, #40]	@ (801efdc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>)
 801efb4:	4a0a      	ldr	r2, [pc, #40]	@ (801efe0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x390>)
 801efb6:	217c      	movs	r1, #124	@ 0x7c
 801efb8:	480a      	ldr	r0, [pc, #40]	@ (801efe4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x394>)
 801efba:	f00b ff17 	bl	802adec <__assert_func>
 801efbe:	4b0a      	ldr	r3, [pc, #40]	@ (801efe8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>)
 801efc0:	4a0a      	ldr	r2, [pc, #40]	@ (801efec <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x39c>)
 801efc2:	f240 21e2 	movw	r1, #738	@ 0x2e2
 801efc6:	480a      	ldr	r0, [pc, #40]	@ (801eff0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a0>)
 801efc8:	f00b ff10 	bl	802adec <__assert_func>
 801efcc:	08000504 	.word	0x08000504
 801efd0:	3d800000 	.word	0x3d800000
 801efd4:	20087454 	.word	0x20087454
 801efd8:	20087464 	.word	0x20087464
 801efdc:	0802ddcc 	.word	0x0802ddcc
 801efe0:	0802e638 	.word	0x0802e638
 801efe4:	0802ddf4 	.word	0x0802ddf4
 801efe8:	0802dcc4 	.word	0x0802dcc4
 801efec:	0802e9dc 	.word	0x0802e9dc
 801eff0:	0802de70 	.word	0x0802de70
 801eff4:	200875c8 	.word	0x200875c8

0801eff8 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801eff8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 801effc:	2700      	movs	r7, #0
 801effe:	4a2b      	ldr	r2, [pc, #172]	@ (801f0ac <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb4>)
 801f000:	4b2b      	ldr	r3, [pc, #172]	@ (801f0b0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb8>)
 801f002:	4d2c      	ldr	r5, [pc, #176]	@ (801f0b4 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xbc>)
 801f004:	8812      	ldrh	r2, [r2, #0]
 801f006:	881b      	ldrh	r3, [r3, #0]
 801f008:	b088      	sub	sp, #32
 801f00a:	4604      	mov	r4, r0
 801f00c:	6828      	ldr	r0, [r5, #0]
 801f00e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f012:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f016:	9706      	str	r7, [sp, #24]
 801f018:	6803      	ldr	r3, [r0, #0]
 801f01a:	4689      	mov	r9, r1
 801f01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f01e:	4798      	blx	r3
 801f020:	6823      	ldr	r3, [r4, #0]
 801f022:	4a25      	ldr	r2, [pc, #148]	@ (801f0b8 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc0>)
 801f024:	68de      	ldr	r6, [r3, #12]
 801f026:	4601      	mov	r1, r0
 801f028:	4296      	cmp	r6, r2
 801f02a:	d134      	bne.n	801f096 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x9e>
 801f02c:	682a      	ldr	r2, [r5, #0]
 801f02e:	691d      	ldr	r5, [r3, #16]
 801f030:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 801f034:	b9a3      	cbnz	r3, 801f060 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x68>
 801f036:	6890      	ldr	r0, [r2, #8]
 801f038:	4a20      	ldr	r2, [pc, #128]	@ (801f0bc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 801f03a:	6803      	ldr	r3, [r0, #0]
 801f03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f03e:	4293      	cmp	r3, r2
 801f040:	d116      	bne.n	801f070 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x78>
 801f042:	4b1f      	ldr	r3, [pc, #124]	@ (801f0c0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 801f044:	7b02      	ldrb	r2, [r0, #12]
 801f046:	429d      	cmp	r5, r3
 801f048:	d119      	bne.n	801f07e <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801f04a:	23ff      	movs	r3, #255	@ 0xff
 801f04c:	f8cd 9000 	str.w	r9, [sp]
 801f050:	9301      	str	r3, [sp, #4]
 801f052:	4620      	mov	r0, r4
 801f054:	ab06      	add	r3, sp, #24
 801f056:	f7ff fa29 	bl	801e4ac <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 801f05a:	b008      	add	sp, #32
 801f05c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801f060:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 801f062:	2800      	cmp	r0, #0
 801f064:	d0e7      	beq.n	801f036 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x3e>
 801f066:	6803      	ldr	r3, [r0, #0]
 801f068:	4a14      	ldr	r2, [pc, #80]	@ (801f0bc <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 801f06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f06c:	4293      	cmp	r3, r2
 801f06e:	d0e8      	beq.n	801f042 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 801f070:	9105      	str	r1, [sp, #20]
 801f072:	4798      	blx	r3
 801f074:	4b12      	ldr	r3, [pc, #72]	@ (801f0c0 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 801f076:	4602      	mov	r2, r0
 801f078:	429d      	cmp	r5, r3
 801f07a:	9905      	ldr	r1, [sp, #20]
 801f07c:	d0e5      	beq.n	801f04a <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x52>
 801f07e:	2600      	movs	r6, #0
 801f080:	23ff      	movs	r3, #255	@ 0xff
 801f082:	f8cd 9000 	str.w	r9, [sp]
 801f086:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801f08a:	4620      	mov	r0, r4
 801f08c:	ab06      	add	r3, sp, #24
 801f08e:	47a8      	blx	r5
 801f090:	b008      	add	sp, #32
 801f092:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801f096:	22ff      	movs	r2, #255	@ 0xff
 801f098:	9701      	str	r7, [sp, #4]
 801f09a:	9200      	str	r2, [sp, #0]
 801f09c:	464b      	mov	r3, r9
 801f09e:	4620      	mov	r0, r4
 801f0a0:	aa06      	add	r2, sp, #24
 801f0a2:	47b0      	blx	r6
 801f0a4:	b008      	add	sp, #32
 801f0a6:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801f0aa:	bf00      	nop
 801f0ac:	20087456 	.word	0x20087456
 801f0b0:	20087458 	.word	0x20087458
 801f0b4:	2008745c 	.word	0x2008745c
 801f0b8:	0801e65d 	.word	0x0801e65d
 801f0bc:	0801b365 	.word	0x0801b365
 801f0c0:	0801e6e9 	.word	0x0801e6e9

0801f0c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0c8:	4604      	mov	r4, r0
 801f0ca:	4865      	ldr	r0, [pc, #404]	@ (801f260 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 801f0cc:	460f      	mov	r7, r1
 801f0ce:	6800      	ldr	r0, [r0, #0]
 801f0d0:	b093      	sub	sp, #76	@ 0x4c
 801f0d2:	f890 1048 	ldrb.w	r1, [r0, #72]	@ 0x48
 801f0d6:	2902      	cmp	r1, #2
 801f0d8:	f000 81f2 	beq.w	801f4c0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3fc>
 801f0dc:	f10d 0948 	add.w	r9, sp, #72	@ 0x48
 801f0e0:	f829 3d1c 	strh.w	r3, [r9, #-28]!
 801f0e4:	4648      	mov	r0, r9
 801f0e6:	4615      	mov	r5, r2
 801f0e8:	f7f9 fa44 	bl	8018574 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f0ec:	6823      	ldr	r3, [r4, #0]
 801f0ee:	4a5d      	ldr	r2, [pc, #372]	@ (801f264 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a0>)
 801f0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0f2:	4680      	mov	r8, r0
 801f0f4:	4293      	cmp	r3, r2
 801f0f6:	f040 81b5 	bne.w	801f464 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a0>
 801f0fa:	7b20      	ldrb	r0, [r4, #12]
 801f0fc:	4580      	cmp	r8, r0
 801f0fe:	f040 81d9 	bne.w	801f4b4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3f0>
 801f102:	4648      	mov	r0, r9
 801f104:	f7f9 f9b2 	bl	801846c <_ZNK8touchgfx6Bitmap7getDataEv>
 801f108:	4683      	mov	fp, r0
 801f10a:	2800      	cmp	r0, #0
 801f10c:	f000 81cc 	beq.w	801f4a8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3e4>
 801f110:	6823      	ldr	r3, [r4, #0]
 801f112:	4648      	mov	r0, r9
 801f114:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801f118:	f7f9 f8ee 	bl	80182f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f11c:	9005      	str	r0, [sp, #20]
 801f11e:	4648      	mov	r0, r9
 801f120:	f7f9 f91e 	bl	8018360 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f124:	4b50      	ldr	r3, [pc, #320]	@ (801f268 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a4>)
 801f126:	9006      	str	r0, [sp, #24]
 801f128:	4598      	cmp	r8, r3
 801f12a:	f040 818e 	bne.w	801f44a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x386>
 801f12e:	4b4c      	ldr	r3, [pc, #304]	@ (801f260 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801f136:	2b02      	cmp	r3, #2
 801f138:	f000 81c8 	beq.w	801f4cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x408>
 801f13c:	f9b5 8000 	ldrsh.w	r8, [r5]
 801f140:	88ab      	ldrh	r3, [r5, #4]
 801f142:	fa1f fe88 	uxth.w	lr, r8
 801f146:	4473      	add	r3, lr
 801f148:	b29b      	uxth	r3, r3
 801f14a:	b218      	sxth	r0, r3
 801f14c:	4580      	cmp	r8, r0
 801f14e:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 801f152:	da2a      	bge.n	801f1aa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 801f154:	9a05      	ldr	r2, [sp, #20]
 801f156:	eb0e 0102 	add.w	r1, lr, r2
 801f15a:	b28a      	uxth	r2, r1
 801f15c:	9207      	str	r2, [sp, #28]
 801f15e:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 801f162:	45e0      	cmp	r8, ip
 801f164:	da21      	bge.n	801f1aa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 801f166:	88ea      	ldrh	r2, [r5, #6]
 801f168:	fa1f f68a 	uxth.w	r6, sl
 801f16c:	4432      	add	r2, r6
 801f16e:	b292      	uxth	r2, r2
 801f170:	b211      	sxth	r1, r2
 801f172:	458a      	cmp	sl, r1
 801f174:	9108      	str	r1, [sp, #32]
 801f176:	da18      	bge.n	801f1aa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 801f178:	9906      	ldr	r1, [sp, #24]
 801f17a:	eb06 0901 	add.w	r9, r6, r1
 801f17e:	fa1f f989 	uxth.w	r9, r9
 801f182:	fa0f f189 	sxth.w	r1, r9
 801f186:	458a      	cmp	sl, r1
 801f188:	9109      	str	r1, [sp, #36]	@ 0x24
 801f18a:	da0e      	bge.n	801f1aa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 801f18c:	9907      	ldr	r1, [sp, #28]
 801f18e:	4560      	cmp	r0, ip
 801f190:	bfc8      	it	gt
 801f192:	460b      	movgt	r3, r1
 801f194:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 801f198:	4281      	cmp	r1, r0
 801f19a:	bfc8      	it	gt
 801f19c:	464a      	movgt	r2, r9
 801f19e:	eba3 030e 	sub.w	r3, r3, lr
 801f1a2:	1b92      	subs	r2, r2, r6
 801f1a4:	b21b      	sxth	r3, r3
 801f1a6:	b212      	sxth	r2, r2
 801f1a8:	e005      	b.n	801f1b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf2>
 801f1aa:	2200      	movs	r2, #0
 801f1ac:	4616      	mov	r6, r2
 801f1ae:	4692      	mov	sl, r2
 801f1b0:	4613      	mov	r3, r2
 801f1b2:	4696      	mov	lr, r2
 801f1b4:	4690      	mov	r8, r2
 801f1b6:	f9b7 0000 	ldrsh.w	r0, [r7]
 801f1ba:	88b9      	ldrh	r1, [r7, #4]
 801f1bc:	4401      	add	r1, r0
 801f1be:	b289      	uxth	r1, r1
 801f1c0:	fa0f f981 	sxth.w	r9, r1
 801f1c4:	45c8      	cmp	r8, r9
 801f1c6:	da55      	bge.n	801f274 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 801f1c8:	449e      	add	lr, r3
 801f1ca:	fa1f fe8e 	uxth.w	lr, lr
 801f1ce:	fa0f f38e 	sxth.w	r3, lr
 801f1d2:	4298      	cmp	r0, r3
 801f1d4:	9307      	str	r3, [sp, #28]
 801f1d6:	da4d      	bge.n	801f274 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 801f1d8:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
 801f1dc:	88fb      	ldrh	r3, [r7, #6]
 801f1de:	4463      	add	r3, ip
 801f1e0:	b29b      	uxth	r3, r3
 801f1e2:	b21f      	sxth	r7, r3
 801f1e4:	45ba      	cmp	sl, r7
 801f1e6:	da45      	bge.n	801f274 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 801f1e8:	4416      	add	r6, r2
 801f1ea:	b2b2      	uxth	r2, r6
 801f1ec:	b216      	sxth	r6, r2
 801f1ee:	45b4      	cmp	ip, r6
 801f1f0:	9608      	str	r6, [sp, #32]
 801f1f2:	da3f      	bge.n	801f274 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 801f1f4:	4540      	cmp	r0, r8
 801f1f6:	9e07      	ldr	r6, [sp, #28]
 801f1f8:	bfb8      	it	lt
 801f1fa:	4640      	movlt	r0, r8
 801f1fc:	45d4      	cmp	ip, sl
 801f1fe:	bfb8      	it	lt
 801f200:	46d4      	movlt	ip, sl
 801f202:	45b1      	cmp	r9, r6
 801f204:	bfc8      	it	gt
 801f206:	4671      	movgt	r1, lr
 801f208:	9e08      	ldr	r6, [sp, #32]
 801f20a:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 801f26c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a8>
 801f20e:	42b7      	cmp	r7, r6
 801f210:	bfc8      	it	gt
 801f212:	4613      	movgt	r3, r2
 801f214:	f8df e058 	ldr.w	lr, [pc, #88]	@ 801f270 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 801f218:	b282      	uxth	r2, r0
 801f21a:	eba3 030c 	sub.w	r3, r3, ip
 801f21e:	1a8f      	subs	r7, r1, r2
 801f220:	f8b8 a000 	ldrh.w	sl, [r8]
 801f224:	f8be 9000 	ldrh.w	r9, [lr]
 801f228:	b21b      	sxth	r3, r3
 801f22a:	b23f      	sxth	r7, r7
 801f22c:	2800      	cmp	r0, #0
 801f22e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801f232:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801f236:	f8ad c032 	strh.w	ip, [sp, #50]	@ 0x32
 801f23a:	f8ad 7034 	strh.w	r7, [sp, #52]	@ 0x34
 801f23e:	fa0f f88a 	sxth.w	r8, sl
 801f242:	fa0f fe89 	sxth.w	lr, r9
 801f246:	f280 8115 	bge.w	801f474 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b0>
 801f24a:	2200      	movs	r2, #0
 801f24c:	f04f 0600 	mov.w	r6, #0
 801f250:	b20f      	sxth	r7, r1
 801f252:	4610      	mov	r0, r2
 801f254:	4639      	mov	r1, r7
 801f256:	f8ad 7034 	strh.w	r7, [sp, #52]	@ 0x34
 801f25a:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 801f25e:	e01b      	b.n	801f298 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 801f260:	2008745c 	.word	0x2008745c
 801f264:	0801b365 	.word	0x0801b365
 801f268:	0801e821 	.word	0x0801e821
 801f26c:	20087450 	.word	0x20087450
 801f270:	20087452 	.word	0x20087452
 801f274:	2300      	movs	r3, #0
 801f276:	489f      	ldr	r0, [pc, #636]	@ (801f4f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x430>)
 801f278:	499f      	ldr	r1, [pc, #636]	@ (801f4f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x434>)
 801f27a:	f8b0 a000 	ldrh.w	sl, [r0]
 801f27e:	f8b1 9000 	ldrh.w	r9, [r1]
 801f282:	461a      	mov	r2, r3
 801f284:	469c      	mov	ip, r3
 801f286:	4618      	mov	r0, r3
 801f288:	4619      	mov	r1, r3
 801f28a:	461f      	mov	r7, r3
 801f28c:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 801f290:	fa0f f88a 	sxth.w	r8, sl
 801f294:	fa0f fe89 	sxth.w	lr, r9
 801f298:	eba8 0000 	sub.w	r0, r8, r0
 801f29c:	4288      	cmp	r0, r1
 801f29e:	da04      	bge.n	801f2aa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e6>
 801f2a0:	ebaa 0702 	sub.w	r7, sl, r2
 801f2a4:	b23f      	sxth	r7, r7
 801f2a6:	f8ad 7034 	strh.w	r7, [sp, #52]	@ 0x34
 801f2aa:	f1bc 0f00 	cmp.w	ip, #0
 801f2ae:	f2c0 80c2 	blt.w	801f436 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x372>
 801f2b2:	4661      	mov	r1, ip
 801f2b4:	ebae 0e01 	sub.w	lr, lr, r1
 801f2b8:	4573      	cmp	r3, lr
 801f2ba:	dd04      	ble.n	801f2c6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x202>
 801f2bc:	eba9 030c 	sub.w	r3, r9, ip
 801f2c0:	b21b      	sxth	r3, r3
 801f2c2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801f2c6:	2f00      	cmp	r7, #0
 801f2c8:	f340 80b1 	ble.w	801f42e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	f340 80ae 	ble.w	801f42e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 801f2d2:	f04f 0e00 	mov.w	lr, #0
 801f2d6:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801f2da:	9b05      	ldr	r3, [sp, #20]
 801f2dc:	8868      	ldrh	r0, [r5, #2]
 801f2de:	8829      	ldrh	r1, [r5, #0]
 801f2e0:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801f2e4:	9b06      	ldr	r3, [sp, #24]
 801f2e6:	1a52      	subs	r2, r2, r1
 801f2e8:	ebac 0c00 	sub.w	ip, ip, r0
 801f2ec:	a910      	add	r1, sp, #64	@ 0x40
 801f2ee:	a80e      	add	r0, sp, #56	@ 0x38
 801f2f0:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
 801f2f4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801f2f8:	f8ad c03a 	strh.w	ip, [sp, #58]	@ 0x3a
 801f2fc:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
 801f300:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801f304:	f7f6 fa20 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f308:	a80c      	add	r0, sp, #48	@ 0x30
 801f30a:	f7f6 f9f5 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f30e:	a810      	add	r0, sp, #64	@ 0x40
 801f310:	f7f6 f9f2 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f314:	4b79      	ldr	r3, [pc, #484]	@ (801f4fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801f31c:	2a00      	cmp	r2, #0
 801f31e:	f040 80a4 	bne.w	801f46a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a6>
 801f322:	6898      	ldr	r0, [r3, #8]
 801f324:	6803      	ldr	r3, [r0, #0]
 801f326:	4a76      	ldr	r2, [pc, #472]	@ (801f500 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x43c>)
 801f328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f32a:	4293      	cmp	r3, r2
 801f32c:	f040 80b0 	bne.w	801f490 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3cc>
 801f330:	7b00      	ldrb	r0, [r0, #12]
 801f332:	2801      	cmp	r0, #1
 801f334:	f000 80a5 	beq.w	801f482 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3be>
 801f338:	f0c0 809e 	bcc.w	801f478 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b4>
 801f33c:	2802      	cmp	r0, #2
 801f33e:	f040 80d2 	bne.w	801f4e6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x422>
 801f342:	f04f 0810 	mov.w	r8, #16
 801f346:	f04f 0a04 	mov.w	sl, #4
 801f34a:	6823      	ldr	r3, [r4, #0]
 801f34c:	4a6d      	ldr	r2, [pc, #436]	@ (801f504 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x440>)
 801f34e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f350:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	@ 0x44
 801f354:	4293      	cmp	r3, r2
 801f356:	fb0a f707 	mul.w	r7, sl, r7
 801f35a:	f040 809b 	bne.w	801f494 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d0>
 801f35e:	4b6a      	ldr	r3, [pc, #424]	@ (801f508 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x444>)
 801f360:	881b      	ldrh	r3, [r3, #0]
 801f362:	2b00      	cmp	r3, #0
 801f364:	f000 80b8 	beq.w	801f4d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x414>
 801f368:	7b22      	ldrb	r2, [r4, #12]
 801f36a:	2a02      	cmp	r2, #2
 801f36c:	f000 808e 	beq.w	801f48c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3c8>
 801f370:	2a01      	cmp	r2, #1
 801f372:	bf14      	ite	ne
 801f374:	2402      	movne	r4, #2
 801f376:	2403      	moveq	r4, #3
 801f378:	fb13 f404 	smulbb	r4, r3, r4
 801f37c:	b2a4      	uxth	r4, r4
 801f37e:	4a5f      	ldr	r2, [pc, #380]	@ (801f4fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 801f380:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801f384:	f9bd 903a 	ldrsh.w	r9, [sp, #58]	@ 0x3a
 801f388:	6810      	ldr	r0, [r2, #0]
 801f38a:	fb07 3909 	mla	r9, r7, r9, r3
 801f38e:	6803      	ldr	r3, [r0, #0]
 801f390:	4e5e      	ldr	r6, [pc, #376]	@ (801f50c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x448>)
 801f392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f394:	4798      	blx	r3
 801f396:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801f39a:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	@ 0x30
 801f39e:	fb04 f303 	mul.w	r3, r4, r3
 801f3a2:	fb0a 3505 	mla	r5, sl, r5, r3
 801f3a6:	4405      	add	r5, r0
 801f3a8:	6830      	ldr	r0, [r6, #0]
 801f3aa:	44d9      	add	r9, fp
 801f3ac:	2800      	cmp	r0, #0
 801f3ae:	d075      	beq.n	801f49c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 801f3b0:	f7fb ff68 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f3b4:	9700      	str	r7, [sp, #0]
 801f3b6:	2700      	movs	r7, #0
 801f3b8:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	@ 0x3e
 801f3bc:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 801f3c0:	4648      	mov	r0, r9
 801f3c2:	4643      	mov	r3, r8
 801f3c4:	f7f9 fd72 	bl	8018eac <nema_bind_dst_tex>
 801f3c8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801f3cc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801f3d0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801f3d4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801f3d8:	f7f9 fca8 	bl	8018d2c <nema_set_clip>
 801f3dc:	f04f 33ff 	mov.w	r3, #4294967295
 801f3e0:	2201      	movs	r2, #1
 801f3e2:	2100      	movs	r1, #0
 801f3e4:	f240 5004 	movw	r0, #1284	@ 0x504
 801f3e8:	f7fb fa80 	bl	801a8ec <nema_set_blend>
 801f3ec:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	@ 0x36
 801f3f0:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	@ 0x34
 801f3f4:	4643      	mov	r3, r8
 801f3f6:	4628      	mov	r0, r5
 801f3f8:	9400      	str	r4, [sp, #0]
 801f3fa:	9701      	str	r7, [sp, #4]
 801f3fc:	f7f9 fcd2 	bl	8018da4 <nema_bind_src_tex>
 801f400:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801f404:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801f408:	f7f9 fe58 	bl	80190bc <nema_blit>
 801f40c:	6830      	ldr	r0, [r6, #0]
 801f40e:	2800      	cmp	r0, #0
 801f410:	d044      	beq.n	801f49c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 801f412:	f7fb ff57 	bl	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f416:	6830      	ldr	r0, [r6, #0]
 801f418:	2800      	cmp	r0, #0
 801f41a:	d03f      	beq.n	801f49c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 801f41c:	6803      	ldr	r3, [r0, #0]
 801f41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f420:	4798      	blx	r3
 801f422:	6830      	ldr	r0, [r6, #0]
 801f424:	2800      	cmp	r0, #0
 801f426:	d039      	beq.n	801f49c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 801f428:	6803      	ldr	r3, [r0, #0]
 801f42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f42c:	4798      	blx	r3
 801f42e:	4658      	mov	r0, fp
 801f430:	b013      	add	sp, #76	@ 0x4c
 801f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f436:	2000      	movs	r0, #0
 801f438:	4463      	add	r3, ip
 801f43a:	b21b      	sxth	r3, r3
 801f43c:	4684      	mov	ip, r0
 801f43e:	4601      	mov	r1, r0
 801f440:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801f444:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801f448:	e734      	b.n	801f2b4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f0>
 801f44a:	9b05      	ldr	r3, [sp, #20]
 801f44c:	9002      	str	r0, [sp, #8]
 801f44e:	e9cd b300 	strd	fp, r3, [sp]
 801f452:	a810      	add	r0, sp, #64	@ 0x40
 801f454:	462b      	mov	r3, r5
 801f456:	463a      	mov	r2, r7
 801f458:	4621      	mov	r1, r4
 801f45a:	47c0      	blx	r8
 801f45c:	4658      	mov	r0, fp
 801f45e:	b013      	add	sp, #76	@ 0x4c
 801f460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f464:	4620      	mov	r0, r4
 801f466:	4798      	blx	r3
 801f468:	e648      	b.n	801f0fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x38>
 801f46a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801f46c:	2800      	cmp	r0, #0
 801f46e:	f47f af59 	bne.w	801f324 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 801f472:	e756      	b.n	801f322 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801f474:	4639      	mov	r1, r7
 801f476:	e70f      	b.n	801f298 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 801f478:	f04f 0804 	mov.w	r8, #4
 801f47c:	f04f 0a02 	mov.w	sl, #2
 801f480:	e763      	b.n	801f34a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 801f482:	f04f 0839 	mov.w	r8, #57	@ 0x39
 801f486:	f04f 0a03 	mov.w	sl, #3
 801f48a:	e75e      	b.n	801f34a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 801f48c:	2404      	movs	r4, #4
 801f48e:	e773      	b.n	801f378 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>
 801f490:	4798      	blx	r3
 801f492:	e74e      	b.n	801f332 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26e>
 801f494:	4620      	mov	r0, r4
 801f496:	4798      	blx	r3
 801f498:	4604      	mov	r4, r0
 801f49a:	e770      	b.n	801f37e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ba>
 801f49c:	4b1c      	ldr	r3, [pc, #112]	@ (801f510 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x44c>)
 801f49e:	4a1d      	ldr	r2, [pc, #116]	@ (801f514 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x450>)
 801f4a0:	217c      	movs	r1, #124	@ 0x7c
 801f4a2:	481d      	ldr	r0, [pc, #116]	@ (801f518 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x454>)
 801f4a4:	f00b fca2 	bl	802adec <__assert_func>
 801f4a8:	4b1c      	ldr	r3, [pc, #112]	@ (801f51c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x458>)
 801f4aa:	4a1d      	ldr	r2, [pc, #116]	@ (801f520 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 801f4ac:	21f1      	movs	r1, #241	@ 0xf1
 801f4ae:	481d      	ldr	r0, [pc, #116]	@ (801f524 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 801f4b0:	f00b fc9c 	bl	802adec <__assert_func>
 801f4b4:	4b1c      	ldr	r3, [pc, #112]	@ (801f528 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x464>)
 801f4b6:	4a1a      	ldr	r2, [pc, #104]	@ (801f520 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 801f4b8:	21ef      	movs	r1, #239	@ 0xef
 801f4ba:	481a      	ldr	r0, [pc, #104]	@ (801f524 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 801f4bc:	f00b fc96 	bl	802adec <__assert_func>
 801f4c0:	4b1a      	ldr	r3, [pc, #104]	@ (801f52c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 801f4c2:	4a17      	ldr	r2, [pc, #92]	@ (801f520 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 801f4c4:	21ed      	movs	r1, #237	@ 0xed
 801f4c6:	4817      	ldr	r0, [pc, #92]	@ (801f524 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 801f4c8:	f00b fc90 	bl	802adec <__assert_func>
 801f4cc:	4b17      	ldr	r3, [pc, #92]	@ (801f52c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 801f4ce:	4a18      	ldr	r2, [pc, #96]	@ (801f530 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 801f4d0:	21f8      	movs	r1, #248	@ 0xf8
 801f4d2:	4814      	ldr	r0, [pc, #80]	@ (801f524 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 801f4d4:	f00b fc8a 	bl	802adec <__assert_func>
 801f4d8:	4b16      	ldr	r3, [pc, #88]	@ (801f534 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x470>)
 801f4da:	4a17      	ldr	r2, [pc, #92]	@ (801f538 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x474>)
 801f4dc:	f240 110f 	movw	r1, #271	@ 0x10f
 801f4e0:	4816      	ldr	r0, [pc, #88]	@ (801f53c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x478>)
 801f4e2:	f00b fc83 	bl	802adec <__assert_func>
 801f4e6:	4b16      	ldr	r3, [pc, #88]	@ (801f540 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x47c>)
 801f4e8:	4a11      	ldr	r2, [pc, #68]	@ (801f530 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 801f4ea:	f44f 7191 	mov.w	r1, #290	@ 0x122
 801f4ee:	480d      	ldr	r0, [pc, #52]	@ (801f524 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 801f4f0:	f00b fc7c 	bl	802adec <__assert_func>
 801f4f4:	20087450 	.word	0x20087450
 801f4f8:	20087452 	.word	0x20087452
 801f4fc:	2008745c 	.word	0x2008745c
 801f500:	0801b365 	.word	0x0801b365
 801f504:	0801cf45 	.word	0x0801cf45
 801f508:	20087456 	.word	0x20087456
 801f50c:	200875c8 	.word	0x200875c8
 801f510:	0802ddcc 	.word	0x0802ddcc
 801f514:	0802e638 	.word	0x0802e638
 801f518:	0802ddf4 	.word	0x0802ddf4
 801f51c:	0802e224 	.word	0x0802e224
 801f520:	0802f7a4 	.word	0x0802f7a4
 801f524:	0802de70 	.word	0x0802de70
 801f528:	0802e1cc 	.word	0x0802e1cc
 801f52c:	0802e074 	.word	0x0802e074
 801f530:	0802f710 	.word	0x0802f710
 801f534:	0802e3a8 	.word	0x0802e3a8
 801f538:	0802fb6c 	.word	0x0802fb6c
 801f53c:	0802e3ec 	.word	0x0802e3ec
 801f540:	0802e178 	.word	0x0802e178

0801f544 <_ZN8touchgfx8LCDGPU2DC1Ev>:
 801f544:	b410      	push	{r4}
 801f546:	240d      	movs	r4, #13
 801f548:	2200      	movs	r2, #0
 801f54a:	4904      	ldr	r1, [pc, #16]	@ (801f55c <_ZN8touchgfx8LCDGPU2DC1Ev+0x18>)
 801f54c:	7304      	strb	r4, [r0, #12]
 801f54e:	e9c0 1200 	strd	r1, r2, [r0]
 801f552:	6082      	str	r2, [r0, #8]
 801f554:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f558:	4770      	bx	lr
 801f55a:	bf00      	nop
 801f55c:	0802e5e0 	.word	0x0802e5e0

0801f560 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>:
 801f560:	2902      	cmp	r1, #2
 801f562:	d906      	bls.n	801f572 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x12>
 801f564:	b508      	push	{r3, lr}
 801f566:	4a04      	ldr	r2, [pc, #16]	@ (801f578 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x18>)
 801f568:	4b04      	ldr	r3, [pc, #16]	@ (801f57c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x1c>)
 801f56a:	212b      	movs	r1, #43	@ 0x2b
 801f56c:	4804      	ldr	r0, [pc, #16]	@ (801f580 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x20>)
 801f56e:	f00b fc3d 	bl	802adec <__assert_func>
 801f572:	7301      	strb	r1, [r0, #12]
 801f574:	4770      	bx	lr
 801f576:	bf00      	nop
 801f578:	0802e950 	.word	0x0802e950
 801f57c:	0802dd04 	.word	0x0802dd04
 801f580:	0802de70 	.word	0x0802de70

0801f584 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 801f584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f588:	b093      	sub	sp, #76	@ 0x4c
 801f58a:	4691      	mov	r9, r2
 801f58c:	468a      	mov	sl, r1
 801f58e:	8812      	ldrh	r2, [r2, #0]
 801f590:	f89d 1074 	ldrb.w	r1, [sp, #116]	@ 0x74
 801f594:	461c      	mov	r4, r3
 801f596:	910a      	str	r1, [sp, #40]	@ 0x28
 801f598:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f59a:	2a00      	cmp	r2, #0
 801f59c:	f040 8109 	bne.w	801f7b2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 801f5a0:	6820      	ldr	r0, [r4, #0]
 801f5a2:	6861      	ldr	r1, [r4, #4]
 801f5a4:	aa0e      	add	r2, sp, #56	@ 0x38
 801f5a6:	c203      	stmia	r2!, {r0, r1}
 801f5a8:	6818      	ldr	r0, [r3, #0]
 801f5aa:	6859      	ldr	r1, [r3, #4]
 801f5ac:	aa10      	add	r2, sp, #64	@ 0x40
 801f5ae:	c203      	stmia	r2!, {r0, r1}
 801f5b0:	a80e      	add	r0, sp, #56	@ 0x38
 801f5b2:	f7f6 f8a1 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f5b6:	4621      	mov	r1, r4
 801f5b8:	a810      	add	r0, sp, #64	@ 0x40
 801f5ba:	f7f6 f8c5 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f5be:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	@ 0x40
 801f5c2:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	@ 0x42
 801f5c6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801f5ca:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801f5ce:	487c      	ldr	r0, [pc, #496]	@ (801f7c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 801f5d0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 801f5d4:	4422      	add	r2, r4
 801f5d6:	442b      	add	r3, r5
 801f5d8:	6800      	ldr	r0, [r0, #0]
 801f5da:	fb11 4105 	smlabb	r1, r1, r5, r4
 801f5de:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801f5e2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801f5e6:	6802      	ldr	r2, [r0, #0]
 801f5e8:	4d76      	ldr	r5, [pc, #472]	@ (801f7c4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 801f5ea:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 801f5ee:	448a      	add	sl, r1
 801f5f0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 801f5f4:	42ab      	cmp	r3, r5
 801f5f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f5f8:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	@ 0x46
 801f5fc:	f040 80a6 	bne.w	801f74c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 801f600:	6841      	ldr	r1, [r0, #4]
 801f602:	4d71      	ldr	r5, [pc, #452]	@ (801f7c8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 801f604:	680b      	ldr	r3, [r1, #0]
 801f606:	699b      	ldr	r3, [r3, #24]
 801f608:	42ab      	cmp	r3, r5
 801f60a:	f040 80c4 	bne.w	801f796 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 801f60e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801f610:	4798      	blx	r3
 801f612:	4b6e      	ldr	r3, [pc, #440]	@ (801f7cc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 801f614:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801f618:	881b      	ldrh	r3, [r3, #0]
 801f61a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 801f61e:	fb03 f404 	mul.w	r4, r3, r4
 801f622:	fb03 1202 	mla	r2, r3, r2, r1
 801f626:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f62a:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 801f62e:	4290      	cmp	r0, r2
 801f630:	920c      	str	r2, [sp, #48]	@ 0x30
 801f632:	f080 8083 	bcs.w	801f73c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 801f636:	f04f 0b04 	mov.w	fp, #4
 801f63a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f63c:	0052      	lsls	r2, r2, #1
 801f63e:	920d      	str	r2, [sp, #52]	@ 0x34
 801f640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f642:	eb00 0802 	add.w	r8, r0, r2
 801f646:	4580      	cmp	r8, r0
 801f648:	d96d      	bls.n	801f726 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 801f64a:	4684      	mov	ip, r0
 801f64c:	f10a 3eff 	add.w	lr, sl, #4294967295
 801f650:	e03e      	b.n	801f6d0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 801f652:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f654:	f3c5 4707 	ubfx	r7, r5, #16, #8
 801f658:	fb02 f303 	mul.w	r3, r2, r3
 801f65c:	1c59      	adds	r1, r3, #1
 801f65e:	eb01 2323 	add.w	r3, r1, r3, asr #8
 801f662:	121b      	asrs	r3, r3, #8
 801f664:	43da      	mvns	r2, r3
 801f666:	b299      	uxth	r1, r3
 801f668:	b2f6      	uxtb	r6, r6
 801f66a:	b2eb      	uxtb	r3, r5
 801f66c:	fb17 f701 	smulbb	r7, r7, r1
 801f670:	f8bc 5000 	ldrh.w	r5, [ip]
 801f674:	fb13 f301 	smulbb	r3, r3, r1
 801f678:	fb16 f601 	smulbb	r6, r6, r1
 801f67c:	122c      	asrs	r4, r5, #8
 801f67e:	10e9      	asrs	r1, r5, #3
 801f680:	00ed      	lsls	r5, r5, #3
 801f682:	b2d2      	uxtb	r2, r2
 801f684:	b2ed      	uxtb	r5, r5
 801f686:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801f68a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801f68e:	fb04 7402 	mla	r4, r4, r2, r7
 801f692:	fb01 6102 	mla	r1, r1, r2, r6
 801f696:	fb05 3202 	mla	r2, r5, r2, r3
 801f69a:	b2a4      	uxth	r4, r4
 801f69c:	b292      	uxth	r2, r2
 801f69e:	b289      	uxth	r1, r1
 801f6a0:	1c55      	adds	r5, r2, #1
 801f6a2:	1c67      	adds	r7, r4, #1
 801f6a4:	1c4b      	adds	r3, r1, #1
 801f6a6:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 801f6aa:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801f6ae:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f6b2:	f404 4278 	and.w	r2, r4, #63488	@ 0xf800
 801f6b6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f6ba:	095b      	lsrs	r3, r3, #5
 801f6bc:	432a      	orrs	r2, r5
 801f6be:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f6c2:	431a      	orrs	r2, r3
 801f6c4:	f8ac 2000 	strh.w	r2, [ip]
 801f6c8:	f10c 0c02 	add.w	ip, ip, #2
 801f6cc:	45e0      	cmp	r8, ip
 801f6ce:	d91f      	bls.n	801f710 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 801f6d0:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 801f6d4:	fb1b b303 	smlabb	r3, fp, r3, fp
 801f6d8:	f859 5003 	ldr.w	r5, [r9, r3]
 801f6dc:	0e2b      	lsrs	r3, r5, #24
 801f6de:	d0f3      	beq.n	801f6c8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x144>
 801f6e0:	2bff      	cmp	r3, #255	@ 0xff
 801f6e2:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801f6e6:	d1b4      	bne.n	801f652 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 801f6e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f6ea:	2aff      	cmp	r2, #255	@ 0xff
 801f6ec:	d1b1      	bne.n	801f652 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 801f6ee:	096b      	lsrs	r3, r5, #5
 801f6f0:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801f6f4:	f026 0607 	bic.w	r6, r6, #7
 801f6f8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f6fc:	431e      	orrs	r6, r3
 801f6fe:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f702:	4335      	orrs	r5, r6
 801f704:	f8ac 5000 	strh.w	r5, [ip]
 801f708:	f10c 0c02 	add.w	ip, ip, #2
 801f70c:	45e0      	cmp	r8, ip
 801f70e:	d8df      	bhi.n	801f6d0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 801f710:	43c3      	mvns	r3, r0
 801f712:	4498      	add	r8, r3
 801f714:	4b2d      	ldr	r3, [pc, #180]	@ (801f7cc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 801f716:	ea4f 0858 	mov.w	r8, r8, lsr #1
 801f71a:	f108 0801 	add.w	r8, r8, #1
 801f71e:	881b      	ldrh	r3, [r3, #0]
 801f720:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 801f724:	44c2      	add	sl, r8
 801f726:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f728:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801f72c:	1b19      	subs	r1, r3, r4
 801f72e:	1b12      	subs	r2, r2, r4
 801f730:	4492      	add	sl, r2
 801f732:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f734:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f738:	4282      	cmp	r2, r0
 801f73a:	d881      	bhi.n	801f640 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 801f73c:	4b20      	ldr	r3, [pc, #128]	@ (801f7c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 801f73e:	6818      	ldr	r0, [r3, #0]
 801f740:	6803      	ldr	r3, [r0, #0]
 801f742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f744:	4798      	blx	r3
 801f746:	b013      	add	sp, #76	@ 0x4c
 801f748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f74c:	4798      	blx	r3
 801f74e:	4603      	mov	r3, r0
 801f750:	2b01      	cmp	r3, #1
 801f752:	d124      	bne.n	801f79e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 801f754:	4a1e      	ldr	r2, [pc, #120]	@ (801f7d0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 801f756:	6810      	ldr	r0, [r2, #0]
 801f758:	b328      	cbz	r0, 801f7a6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 801f75a:	2700      	movs	r7, #0
 801f75c:	260b      	movs	r6, #11
 801f75e:	4a1b      	ldr	r2, [pc, #108]	@ (801f7cc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 801f760:	b2a1      	uxth	r1, r4
 801f762:	8814      	ldrh	r4, [r2, #0]
 801f764:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801f768:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 801f76c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801f770:	9406      	str	r4, [sp, #24]
 801f772:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f774:	f8bd 4042 	ldrh.w	r4, [sp, #66]	@ 0x42
 801f778:	9305      	str	r3, [sp, #20]
 801f77a:	9204      	str	r2, [sp, #16]
 801f77c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801f780:	464a      	mov	r2, r9
 801f782:	4651      	mov	r1, sl
 801f784:	e9cd 6707 	strd	r6, r7, [sp, #28]
 801f788:	9503      	str	r5, [sp, #12]
 801f78a:	9400      	str	r4, [sp, #0]
 801f78c:	f7fb fda2 	bl	801b2d4 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f790:	b013      	add	sp, #76	@ 0x4c
 801f792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f796:	4608      	mov	r0, r1
 801f798:	4798      	blx	r3
 801f79a:	4603      	mov	r3, r0
 801f79c:	e7d8      	b.n	801f750 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 801f79e:	4b08      	ldr	r3, [pc, #32]	@ (801f7c0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 801f7a0:	6818      	ldr	r0, [r3, #0]
 801f7a2:	6802      	ldr	r2, [r0, #0]
 801f7a4:	e733      	b.n	801f60e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 801f7a6:	4b0b      	ldr	r3, [pc, #44]	@ (801f7d4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 801f7a8:	4a0b      	ldr	r2, [pc, #44]	@ (801f7d8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 801f7aa:	217c      	movs	r1, #124	@ 0x7c
 801f7ac:	480b      	ldr	r0, [pc, #44]	@ (801f7dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 801f7ae:	f00b fb1d 	bl	802adec <__assert_func>
 801f7b2:	4b0b      	ldr	r3, [pc, #44]	@ (801f7e0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 801f7b4:	4a0b      	ldr	r2, [pc, #44]	@ (801f7e4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 801f7b6:	f240 4182 	movw	r1, #1154	@ 0x482
 801f7ba:	480b      	ldr	r0, [pc, #44]	@ (801f7e8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 801f7bc:	f00b fb16 	bl	802adec <__assert_func>
 801f7c0:	2008745c 	.word	0x2008745c
 801f7c4:	0801176d 	.word	0x0801176d
 801f7c8:	0801457f 	.word	0x0801457f
 801f7cc:	20087456 	.word	0x20087456
 801f7d0:	200875c8 	.word	0x200875c8
 801f7d4:	0802ddcc 	.word	0x0802ddcc
 801f7d8:	0802e638 	.word	0x0802e638
 801f7dc:	0802ddf4 	.word	0x0802ddf4
 801f7e0:	0802dee4 	.word	0x0802dee4
 801f7e4:	0802ec68 	.word	0x0802ec68
 801f7e8:	0802de70 	.word	0x0802de70

0801f7ec <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih>:
 801f7ec:	b4f0      	push	{r4, r5, r6, r7}
 801f7ee:	7b05      	ldrb	r5, [r0, #12]
 801f7f0:	f89d 6010 	ldrb.w	r6, [sp, #16]
 801f7f4:	3d01      	subs	r5, #1
 801f7f6:	2eff      	cmp	r6, #255	@ 0xff
 801f7f8:	fa5f fc81 	uxtb.w	ip, r1
 801f7fc:	ea4f 2711 	mov.w	r7, r1, lsr #8
 801f800:	b2ed      	uxtb	r5, r5
 801f802:	ea4f 4111 	mov.w	r1, r1, lsr #16
 801f806:	d041      	beq.n	801f88c <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0xa0>
 801f808:	fb16 f603 	smulbb	r6, r6, r3
 801f80c:	b2b6      	uxth	r6, r6
 801f80e:	1c74      	adds	r4, r6, #1
 801f810:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f814:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f818:	43e6      	mvns	r6, r4
 801f81a:	b2a4      	uxth	r4, r4
 801f81c:	fb1c fc04 	smulbb	ip, ip, r4
 801f820:	b2ff      	uxtb	r7, r7
 801f822:	fb17 f704 	smulbb	r7, r7, r4
 801f826:	00d0      	lsls	r0, r2, #3
 801f828:	b2c0      	uxtb	r0, r0
 801f82a:	10d3      	asrs	r3, r2, #3
 801f82c:	b2f6      	uxtb	r6, r6
 801f82e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801f832:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801f836:	fb00 c006 	mla	r0, r0, r6, ip
 801f83a:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801f83e:	fb03 7306 	mla	r3, r3, r6, r7
 801f842:	b280      	uxth	r0, r0
 801f844:	b29b      	uxth	r3, r3
 801f846:	1c47      	adds	r7, r0, #1
 801f848:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801f84c:	f103 0c01 	add.w	ip, r3, #1
 801f850:	2d01      	cmp	r5, #1
 801f852:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801f856:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801f85a:	d926      	bls.n	801f8aa <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0xbe>
 801f85c:	b2c9      	uxtb	r1, r1
 801f85e:	fb11 f404 	smulbb	r4, r1, r4
 801f862:	1212      	asrs	r2, r2, #8
 801f864:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801f868:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f86c:	fb02 4206 	mla	r2, r2, r6, r4
 801f870:	b292      	uxth	r2, r2
 801f872:	1c50      	adds	r0, r2, #1
 801f874:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801f878:	095b      	lsrs	r3, r3, #5
 801f87a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 801f87e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801f882:	ea40 00d7 	orr.w	r0, r0, r7, lsr #3
 801f886:	4318      	orrs	r0, r3
 801f888:	bcf0      	pop	{r4, r5, r6, r7}
 801f88a:	4770      	bx	lr
 801f88c:	2bff      	cmp	r3, #255	@ 0xff
 801f88e:	d1bb      	bne.n	801f808 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0x1c>
 801f890:	2d01      	cmp	r5, #1
 801f892:	d910      	bls.n	801f8b6 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0xca>
 801f894:	4a0a      	ldr	r2, [pc, #40]	@ (801f8c0 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0xd4>)
 801f896:	00f8      	lsls	r0, r7, #3
 801f898:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801f89c:	f400 67fc 	and.w	r7, r0, #2016	@ 0x7e0
 801f8a0:	ea41 00dc 	orr.w	r0, r1, ip, lsr #3
 801f8a4:	4338      	orrs	r0, r7
 801f8a6:	b280      	uxth	r0, r0
 801f8a8:	e7ee      	b.n	801f888 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0x9c>
 801f8aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f8ae:	ea43 0007 	orr.w	r0, r3, r7
 801f8b2:	bcf0      	pop	{r4, r5, r6, r7}
 801f8b4:	4770      	bx	lr
 801f8b6:	ea4c 2007 	orr.w	r0, ip, r7, lsl #8
 801f8ba:	b280      	uxth	r0, r0
 801f8bc:	e7e4      	b.n	801f888 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0x9c>
 801f8be:	bf00      	nop
 801f8c0:	fffff800 	.word	0xfffff800

0801f8c4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 801f8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8c8:	b093      	sub	sp, #76	@ 0x4c
 801f8ca:	4614      	mov	r4, r2
 801f8cc:	460d      	mov	r5, r1
 801f8ce:	7812      	ldrb	r2, [r2, #0]
 801f8d0:	f89d 1074 	ldrb.w	r1, [sp, #116]	@ 0x74
 801f8d4:	461e      	mov	r6, r3
 801f8d6:	9002      	str	r0, [sp, #8]
 801f8d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f8da:	9109      	str	r1, [sp, #36]	@ 0x24
 801f8dc:	2a00      	cmp	r2, #0
 801f8de:	f040 81c9 	bne.w	801fc74 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3b0>
 801f8e2:	6830      	ldr	r0, [r6, #0]
 801f8e4:	6871      	ldr	r1, [r6, #4]
 801f8e6:	aa0e      	add	r2, sp, #56	@ 0x38
 801f8e8:	c203      	stmia	r2!, {r0, r1}
 801f8ea:	6818      	ldr	r0, [r3, #0]
 801f8ec:	6859      	ldr	r1, [r3, #4]
 801f8ee:	aa10      	add	r2, sp, #64	@ 0x40
 801f8f0:	c203      	stmia	r2!, {r0, r1}
 801f8f2:	a80e      	add	r0, sp, #56	@ 0x38
 801f8f4:	f7f5 ff00 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8f8:	4631      	mov	r1, r6
 801f8fa:	a810      	add	r0, sp, #64	@ 0x40
 801f8fc:	f7f5 ff24 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f900:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801f904:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 801f908:	f003 0201 	and.w	r2, r3, #1
 801f90c:	4617      	mov	r7, r2
 801f90e:	920a      	str	r2, [sp, #40]	@ 0x28
 801f910:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801f914:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 801f918:	443b      	add	r3, r7
 801f91a:	fb02 1303 	mla	r3, r2, r3, r1
 801f91e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 801f922:	4402      	add	r2, r0
 801f924:	48d0      	ldr	r0, [pc, #832]	@ (801fc68 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3a4>)
 801f926:	440e      	add	r6, r1
 801f928:	6800      	ldr	r0, [r0, #0]
 801f92a:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 801f92e:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801f932:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801f936:	eb05 0363 	add.w	r3, r5, r3, asr #1
 801f93a:	6802      	ldr	r2, [r0, #0]
 801f93c:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	@ 0x44
 801f940:	9304      	str	r3, [sp, #16]
 801f942:	f001 0301 	and.w	r3, r1, #1
 801f946:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801f948:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f94a:	9608      	str	r6, [sp, #32]
 801f94c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801f950:	4790      	blx	r2
 801f952:	4ac6      	ldr	r2, [pc, #792]	@ (801fc6c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3a8>)
 801f954:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801f958:	8812      	ldrh	r2, [r2, #0]
 801f95a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 801f95e:	fb05 f502 	mul.w	r5, r5, r2
 801f962:	fb02 1303 	mla	r3, r2, r3, r1
 801f966:	eb00 0843 	add.w	r8, r0, r3, lsl #1
 801f96a:	eb08 0345 	add.w	r3, r8, r5, lsl #1
 801f96e:	4598      	cmp	r8, r3
 801f970:	930c      	str	r3, [sp, #48]	@ 0x30
 801f972:	f104 0404 	add.w	r4, r4, #4
 801f976:	f080 8144 	bcs.w	801fc02 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x33e>
 801f97a:	1e73      	subs	r3, r6, #1
 801f97c:	930d      	str	r3, [sp, #52]	@ 0x34
 801f97e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f980:	2b00      	cmp	r3, #0
 801f982:	f000 8164 	beq.w	801fc4e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x38a>
 801f986:	9a04      	ldr	r2, [sp, #16]
 801f988:	7813      	ldrb	r3, [r2, #0]
 801f98a:	3201      	adds	r2, #1
 801f98c:	f003 030f 	and.w	r3, r3, #15
 801f990:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801f994:	9203      	str	r2, [sp, #12]
 801f996:	0e0b      	lsrs	r3, r1, #24
 801f998:	d008      	beq.n	801f9ac <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xe8>
 801f99a:	f8b8 2000 	ldrh.w	r2, [r8]
 801f99e:	9802      	ldr	r0, [sp, #8]
 801f9a0:	9300      	str	r3, [sp, #0]
 801f9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9a4:	f7ff ff22 	bl	801f7ec <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih>
 801f9a8:	f8a8 0000 	strh.w	r0, [r8]
 801f9ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f9ae:	f108 0802 	add.w	r8, r8, #2
 801f9b2:	2b01      	cmp	r3, #1
 801f9b4:	f340 80fd 	ble.w	801fbb2 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ee>
 801f9b8:	3b02      	subs	r3, #2
 801f9ba:	9a03      	ldr	r2, [sp, #12]
 801f9bc:	9306      	str	r3, [sp, #24]
 801f9be:	085b      	lsrs	r3, r3, #1
 801f9c0:	9305      	str	r3, [sp, #20]
 801f9c2:	eb02 0e03 	add.w	lr, r2, r3
 801f9c6:	f108 0704 	add.w	r7, r8, #4
 801f9ca:	f102 3cff 	add.w	ip, r2, #4294967295
 801f9ce:	f8cd 801c 	str.w	r8, [sp, #28]
 801f9d2:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 801f9d6:	e0b2      	b.n	801fb3e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x27a>
 801f9d8:	fb05 f50a 	mul.w	r5, r5, sl
 801f9dc:	1c6a      	adds	r2, r5, #1
 801f9de:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801f9e2:	122d      	asrs	r5, r5, #8
 801f9e4:	43ee      	mvns	r6, r5
 801f9e6:	b2ad      	uxth	r5, r5
 801f9e8:	fa5f fb8b 	uxtb.w	fp, fp
 801f9ec:	fb13 f305 	smulbb	r3, r3, r5
 801f9f0:	fb1b fb05 	smulbb	fp, fp, r5
 801f9f4:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 801f9f8:	b2c0      	uxtb	r0, r0
 801f9fa:	ea4f 02e8 	mov.w	r2, r8, asr #3
 801f9fe:	b2f6      	uxtb	r6, r6
 801fa00:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801fa04:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801fa08:	fb00 3306 	mla	r3, r0, r6, r3
 801fa0c:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801fa10:	fb02 bb06 	mla	fp, r2, r6, fp
 801fa14:	b29b      	uxth	r3, r3
 801fa16:	fa1f fb8b 	uxth.w	fp, fp
 801fa1a:	1c58      	adds	r0, r3, #1
 801fa1c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fa20:	f10b 0201 	add.w	r2, fp, #1
 801fa24:	f1b9 0f01 	cmp.w	r9, #1
 801fa28:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa2c:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 801fa30:	f240 8108 	bls.w	801fc44 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x380>
 801fa34:	b2c9      	uxtb	r1, r1
 801fa36:	fb11 f505 	smulbb	r5, r1, r5
 801fa3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fa3e:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801fa42:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801fa46:	fb08 5806 	mla	r8, r8, r6, r5
 801fa4a:	fa1f f888 	uxth.w	r8, r8
 801fa4e:	f108 0101 	add.w	r1, r8, #1
 801fa52:	eb01 2118 	add.w	r1, r1, r8, lsr #8
 801fa56:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801fa5a:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801fa5e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801fa62:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 801fa66:	ea43 030b 	orr.w	r3, r3, fp
 801fa6a:	f827 3c04 	strh.w	r3, [r7, #-4]
 801fa6e:	f89c 2000 	ldrb.w	r2, [ip]
 801fa72:	f002 020f 	and.w	r2, r2, #15
 801fa76:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 801fa7a:	0e1d      	lsrs	r5, r3, #24
 801fa7c:	d05b      	beq.n	801fb36 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x272>
 801fa7e:	9a02      	ldr	r2, [sp, #8]
 801fa80:	2dff      	cmp	r5, #255	@ 0xff
 801fa82:	f892 900c 	ldrb.w	r9, [r2, #12]
 801fa86:	ea4f 4113 	mov.w	r1, r3, lsr #16
 801fa8a:	f109 39ff 	add.w	r9, r9, #4294967295
 801fa8e:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 801fa92:	f837 8c02 	ldrh.w	r8, [r7, #-2]
 801fa96:	fa5f f989 	uxtb.w	r9, r9
 801fa9a:	b2db      	uxtb	r3, r3
 801fa9c:	f000 80b9 	beq.w	801fc12 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x34e>
 801faa0:	fb05 f50a 	mul.w	r5, r5, sl
 801faa4:	1c6a      	adds	r2, r5, #1
 801faa6:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801faaa:	122d      	asrs	r5, r5, #8
 801faac:	43ee      	mvns	r6, r5
 801faae:	b2ad      	uxth	r5, r5
 801fab0:	fa5f fb8b 	uxtb.w	fp, fp
 801fab4:	fb13 f305 	smulbb	r3, r3, r5
 801fab8:	fb1b fb05 	smulbb	fp, fp, r5
 801fabc:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 801fac0:	b2c0      	uxtb	r0, r0
 801fac2:	ea4f 02e8 	mov.w	r2, r8, asr #3
 801fac6:	b2f6      	uxtb	r6, r6
 801fac8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801facc:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801fad0:	fb00 3306 	mla	r3, r0, r6, r3
 801fad4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801fad8:	fb02 bb06 	mla	fp, r2, r6, fp
 801fadc:	b29b      	uxth	r3, r3
 801fade:	fa1f fb8b 	uxth.w	fp, fp
 801fae2:	1c58      	adds	r0, r3, #1
 801fae4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fae8:	f10b 0201 	add.w	r2, fp, #1
 801faec:	f1b9 0f01 	cmp.w	r9, #1
 801faf0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801faf4:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 801faf8:	f240 809f 	bls.w	801fc3a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x376>
 801fafc:	b2c9      	uxtb	r1, r1
 801fafe:	fb11 f505 	smulbb	r5, r1, r5
 801fb02:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fb06:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 801fb0a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801fb0e:	fb08 5806 	mla	r8, r8, r6, r5
 801fb12:	fa1f f888 	uxth.w	r8, r8
 801fb16:	f108 0101 	add.w	r1, r8, #1
 801fb1a:	eb01 2118 	add.w	r1, r1, r8, lsr #8
 801fb1e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801fb22:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801fb26:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801fb2a:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 801fb2e:	ea43 030b 	orr.w	r3, r3, fp
 801fb32:	f827 3c02 	strh.w	r3, [r7, #-2]
 801fb36:	45e6      	cmp	lr, ip
 801fb38:	f107 0704 	add.w	r7, r7, #4
 801fb3c:	d02b      	beq.n	801fb96 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2d2>
 801fb3e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 801fb42:	0913      	lsrs	r3, r2, #4
 801fb44:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fb48:	0e1d      	lsrs	r5, r3, #24
 801fb4a:	d092      	beq.n	801fa72 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1ae>
 801fb4c:	9a02      	ldr	r2, [sp, #8]
 801fb4e:	2dff      	cmp	r5, #255	@ 0xff
 801fb50:	f892 900c 	ldrb.w	r9, [r2, #12]
 801fb54:	ea4f 4113 	mov.w	r1, r3, lsr #16
 801fb58:	f109 39ff 	add.w	r9, r9, #4294967295
 801fb5c:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 801fb60:	f837 8c04 	ldrh.w	r8, [r7, #-4]
 801fb64:	fa5f f989 	uxtb.w	r9, r9
 801fb68:	b2db      	uxtb	r3, r3
 801fb6a:	f47f af35 	bne.w	801f9d8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x114>
 801fb6e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801fb72:	f47f af31 	bne.w	801f9d8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x114>
 801fb76:	f1b9 0f01 	cmp.w	r9, #1
 801fb7a:	d970      	bls.n	801fc5e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x39a>
 801fb7c:	4a3c      	ldr	r2, [pc, #240]	@ (801fc70 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3ac>)
 801fb7e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801fb82:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801fb86:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 801fb8a:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801fb8e:	ea43 030b 	orr.w	r3, r3, fp
 801fb92:	b29b      	uxth	r3, r3
 801fb94:	e769      	b.n	801fa6a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a6>
 801fb96:	9b05      	ldr	r3, [sp, #20]
 801fb98:	9903      	ldr	r1, [sp, #12]
 801fb9a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801fb9e:	1c5a      	adds	r2, r3, #1
 801fba0:	4411      	add	r1, r2
 801fba2:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 801fba6:	9a06      	ldr	r2, [sp, #24]
 801fba8:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 801fbac:	9103      	str	r1, [sp, #12]
 801fbae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fbb2:	2b01      	cmp	r3, #1
 801fbb4:	d111      	bne.n	801fbda <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x316>
 801fbb6:	9b03      	ldr	r3, [sp, #12]
 801fbb8:	781b      	ldrb	r3, [r3, #0]
 801fbba:	091b      	lsrs	r3, r3, #4
 801fbbc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801fbc0:	0e0b      	lsrs	r3, r1, #24
 801fbc2:	d008      	beq.n	801fbd6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x312>
 801fbc4:	f8b8 2000 	ldrh.w	r2, [r8]
 801fbc8:	9802      	ldr	r0, [sp, #8]
 801fbca:	9300      	str	r3, [sp, #0]
 801fbcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbce:	f7ff fe0d 	bl	801f7ec <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih>
 801fbd2:	f8a8 0000 	strh.w	r0, [r8]
 801fbd6:	f108 0802 	add.w	r8, r8, #2
 801fbda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fbdc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801fbe0:	4a22      	ldr	r2, [pc, #136]	@ (801fc6c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3a8>)
 801fbe2:	440b      	add	r3, r1
 801fbe4:	8812      	ldrh	r2, [r2, #0]
 801fbe6:	9908      	ldr	r1, [sp, #32]
 801fbe8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801fbec:	1a52      	subs	r2, r2, r1
 801fbee:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801fbf2:	9a04      	ldr	r2, [sp, #16]
 801fbf4:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801fbf8:	9304      	str	r3, [sp, #16]
 801fbfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fbfc:	4543      	cmp	r3, r8
 801fbfe:	f63f aebe 	bhi.w	801f97e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xba>
 801fc02:	4b19      	ldr	r3, [pc, #100]	@ (801fc68 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3a4>)
 801fc04:	6818      	ldr	r0, [r3, #0]
 801fc06:	6803      	ldr	r3, [r0, #0]
 801fc08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc0a:	4798      	blx	r3
 801fc0c:	b013      	add	sp, #76	@ 0x4c
 801fc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc12:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801fc16:	f47f af43 	bne.w	801faa0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1dc>
 801fc1a:	f1b9 0f01 	cmp.w	r9, #1
 801fc1e:	d91a      	bls.n	801fc56 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x392>
 801fc20:	4a13      	ldr	r2, [pc, #76]	@ (801fc70 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3ac>)
 801fc22:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801fc26:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801fc2a:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 801fc2e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801fc32:	ea43 030b 	orr.w	r3, r3, fp
 801fc36:	b29b      	uxth	r3, r3
 801fc38:	e77b      	b.n	801fb32 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x26e>
 801fc3a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801fc3e:	ea4b 0303 	orr.w	r3, fp, r3
 801fc42:	e776      	b.n	801fb32 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x26e>
 801fc44:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801fc48:	ea4b 0303 	orr.w	r3, fp, r3
 801fc4c:	e70d      	b.n	801fa6a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a6>
 801fc4e:	9b04      	ldr	r3, [sp, #16]
 801fc50:	9303      	str	r3, [sp, #12]
 801fc52:	9b08      	ldr	r3, [sp, #32]
 801fc54:	e6ad      	b.n	801f9b2 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xee>
 801fc56:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 801fc5a:	b29b      	uxth	r3, r3
 801fc5c:	e769      	b.n	801fb32 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x26e>
 801fc5e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 801fc62:	b29b      	uxth	r3, r3
 801fc64:	e701      	b.n	801fa6a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a6>
 801fc66:	bf00      	nop
 801fc68:	2008745c 	.word	0x2008745c
 801fc6c:	20087456 	.word	0x20087456
 801fc70:	fffff800 	.word	0xfffff800
 801fc74:	4b03      	ldr	r3, [pc, #12]	@ (801fc84 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c0>)
 801fc76:	4a04      	ldr	r2, [pc, #16]	@ (801fc88 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c4>)
 801fc78:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 801fc7c:	4803      	ldr	r0, [pc, #12]	@ (801fc8c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c8>)
 801fc7e:	f00b f8b5 	bl	802adec <__assert_func>
 801fc82:	bf00      	nop
 801fc84:	0802df64 	.word	0x0802df64
 801fc88:	0802f154 	.word	0x0802f154
 801fc8c:	0802de70 	.word	0x0802de70

0801fc90 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 801fc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc94:	b08f      	sub	sp, #60	@ 0x3c
 801fc96:	9206      	str	r2, [sp, #24]
 801fc98:	461c      	mov	r4, r3
 801fc9a:	7812      	ldrb	r2, [r2, #0]
 801fc9c:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801fca0:	e9cd 1000 	strd	r1, r0, [sp]
 801fca4:	9305      	str	r3, [sp, #20]
 801fca6:	2a00      	cmp	r2, #0
 801fca8:	f040 81ad 	bne.w	8020006 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x376>
 801fcac:	b913      	cbnz	r3, 801fcb4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24>
 801fcae:	b00f      	add	sp, #60	@ 0x3c
 801fcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcb4:	6820      	ldr	r0, [r4, #0]
 801fcb6:	6861      	ldr	r1, [r4, #4]
 801fcb8:	ab0a      	add	r3, sp, #40	@ 0x28
 801fcba:	c303      	stmia	r3!, {r0, r1}
 801fcbc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fcbe:	6818      	ldr	r0, [r3, #0]
 801fcc0:	6859      	ldr	r1, [r3, #4]
 801fcc2:	ab0c      	add	r3, sp, #48	@ 0x30
 801fcc4:	c303      	stmia	r3!, {r0, r1}
 801fcc6:	a80a      	add	r0, sp, #40	@ 0x28
 801fcc8:	f7f5 fd16 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fccc:	4621      	mov	r1, r4
 801fcce:	a80c      	add	r0, sp, #48	@ 0x30
 801fcd0:	f7f5 fd3a 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fcd4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801fcd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fcdc:	dd71      	ble.n	801fdc2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x132>
 801fcde:	2201      	movs	r2, #1
 801fce0:	b299      	uxth	r1, r3
 801fce2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801fce6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801fcea:	fb93 f6f2 	sdiv	r6, r3, r2
 801fcee:	b2b5      	uxth	r5, r6
 801fcf0:	fb02 3415 	mls	r4, r2, r5, r3
 801fcf4:	fb14 0101 	smlabb	r1, r4, r1, r0
 801fcf8:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	@ 0x2e
 801fcfc:	fa1f fb81 	uxth.w	fp, r1
 801fd00:	4414      	add	r4, r2
 801fd02:	3c01      	subs	r4, #1
 801fd04:	fb94 f4f2 	sdiv	r4, r4, r2
 801fd08:	b135      	cbz	r5, 801fd18 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x88>
 801fd0a:	9a06      	ldr	r2, [sp, #24]
 801fd0c:	9900      	ldr	r1, [sp, #0]
 801fd0e:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801fd12:	ba12      	rev	r2, r2
 801fd14:	4411      	add	r1, r2
 801fd16:	9100      	str	r1, [sp, #0]
 801fd18:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801fd1c:	f8bd 102a 	ldrh.w	r1, [sp, #42]	@ 0x2a
 801fd20:	4402      	add	r2, r0
 801fd22:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801fd26:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801fd2a:	440b      	add	r3, r1
 801fd2c:	4616      	mov	r6, r2
 801fd2e:	49b9      	ldr	r1, [pc, #740]	@ (8020014 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x384>)
 801fd30:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801fd34:	6808      	ldr	r0, [r1, #0]
 801fd36:	9209      	str	r2, [sp, #36]	@ 0x24
 801fd38:	6803      	ldr	r3, [r0, #0]
 801fd3a:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 801fd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd40:	4798      	blx	r3
 801fd42:	f1bb 0f00 	cmp.w	fp, #0
 801fd46:	bf0c      	ite	eq
 801fd48:	4633      	moveq	r3, r6
 801fd4a:	2300      	movne	r3, #0
 801fd4c:	49b2      	ldr	r1, [pc, #712]	@ (8020018 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x388>)
 801fd4e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801fd52:	8809      	ldrh	r1, [r1, #0]
 801fd54:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	@ 0x30
 801fd58:	fb01 f505 	mul.w	r5, r1, r5
 801fd5c:	fb01 6202 	mla	r2, r1, r2, r6
 801fd60:	b2a4      	uxth	r4, r4
 801fd62:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fd66:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801fd6a:	00a4      	lsls	r4, r4, #2
 801fd6c:	1d21      	adds	r1, r4, #4
 801fd6e:	4290      	cmp	r0, r2
 801fd70:	9202      	str	r2, [sp, #8]
 801fd72:	9108      	str	r1, [sp, #32]
 801fd74:	fa1f fa83 	uxth.w	sl, r3
 801fd78:	d21b      	bcs.n	801fdb2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x122>
 801fd7a:	2300      	movs	r3, #0
 801fd7c:	465e      	mov	r6, fp
 801fd7e:	461d      	mov	r5, r3
 801fd80:	9303      	str	r3, [sp, #12]
 801fd82:	b965      	cbnz	r5, 801fd9e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x10e>
 801fd84:	9900      	ldr	r1, [sp, #0]
 801fd86:	780b      	ldrb	r3, [r1, #0]
 801fd88:	099d      	lsrs	r5, r3, #6
 801fd8a:	1e6a      	subs	r2, r5, #1
 801fd8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801fd90:	2a02      	cmp	r2, #2
 801fd92:	9303      	str	r3, [sp, #12]
 801fd94:	f200 80ce 	bhi.w	801ff34 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>
 801fd98:	3101      	adds	r1, #1
 801fd9a:	9100      	str	r1, [sp, #0]
 801fd9c:	b2ad      	uxth	r5, r5
 801fd9e:	b1b6      	cbz	r6, 801fdce <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x13e>
 801fda0:	42b5      	cmp	r5, r6
 801fda2:	f080 80c1 	bcs.w	801ff28 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>
 801fda6:	1b75      	subs	r5, r6, r5
 801fda8:	b2ae      	uxth	r6, r5
 801fdaa:	2500      	movs	r5, #0
 801fdac:	9b02      	ldr	r3, [sp, #8]
 801fdae:	4283      	cmp	r3, r0
 801fdb0:	d8e7      	bhi.n	801fd82 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xf2>
 801fdb2:	4b98      	ldr	r3, [pc, #608]	@ (8020014 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x384>)
 801fdb4:	6818      	ldr	r0, [r3, #0]
 801fdb6:	6803      	ldr	r3, [r0, #0]
 801fdb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fdba:	4798      	blx	r3
 801fdbc:	b00f      	add	sp, #60	@ 0x3c
 801fdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdc2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 801fdc6:	b299      	uxth	r1, r3
 801fdc8:	fb94 f2f1 	sdiv	r2, r4, r1
 801fdcc:	e789      	b.n	801fce2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x52>
 801fdce:	2304      	movs	r3, #4
 801fdd0:	4619      	mov	r1, r3
 801fdd2:	9a08      	ldr	r2, [sp, #32]
 801fdd4:	9b03      	ldr	r3, [sp, #12]
 801fdd6:	4555      	cmp	r5, sl
 801fdd8:	fb11 2303 	smlabb	r3, r1, r3, r2
 801fddc:	9a06      	ldr	r2, [sp, #24]
 801fdde:	58d1      	ldr	r1, [r2, r3]
 801fde0:	ea4f 6211 	mov.w	r2, r1, lsr #24
 801fde4:	f0c0 8099 	bcc.w	801ff1a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x28a>
 801fde8:	eba5 030a 	sub.w	r3, r5, sl
 801fdec:	b29b      	uxth	r3, r3
 801fdee:	9304      	str	r3, [sp, #16]
 801fdf0:	4653      	mov	r3, sl
 801fdf2:	9607      	str	r6, [sp, #28]
 801fdf4:	2a00      	cmp	r2, #0
 801fdf6:	f000 808d 	beq.w	801ff14 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>
 801fdfa:	2aff      	cmp	r2, #255	@ 0xff
 801fdfc:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 801fe00:	ea4f 2911 	mov.w	r9, r1, lsr #8
 801fe04:	fa5f f881 	uxtb.w	r8, r1
 801fe08:	d103      	bne.n	801fe12 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x182>
 801fe0a:	9905      	ldr	r1, [sp, #20]
 801fe0c:	29ff      	cmp	r1, #255	@ 0xff
 801fe0e:	f000 8096 	beq.w	801ff3e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ae>
 801fe12:	9905      	ldr	r1, [sp, #20]
 801fe14:	fa5f fb8b 	uxtb.w	fp, fp
 801fe18:	fb01 f202 	mul.w	r2, r1, r2
 801fe1c:	1c51      	adds	r1, r2, #1
 801fe1e:	eb01 2222 	add.w	r2, r1, r2, asr #8
 801fe22:	1212      	asrs	r2, r2, #8
 801fe24:	ea6f 0c02 	mvn.w	ip, r2
 801fe28:	fa5f f989 	uxtb.w	r9, r9
 801fe2c:	fa5f fc8c 	uxtb.w	ip, ip
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	d04d      	beq.n	801fed0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 801fe34:	b292      	uxth	r2, r2
 801fe36:	fb1b fb02 	smulbb	fp, fp, r2
 801fe3a:	fb19 f902 	smulbb	r9, r9, r2
 801fe3e:	fb18 f802 	smulbb	r8, r8, r2
 801fe42:	f103 3eff 	add.w	lr, r3, #4294967295
 801fe46:	fa1f fe8e 	uxth.w	lr, lr
 801fe4a:	f10e 0e01 	add.w	lr, lr, #1
 801fe4e:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801fe52:	fa1f fb8b 	uxth.w	fp, fp
 801fe56:	fa1f f989 	uxth.w	r9, r9
 801fe5a:	fa1f f888 	uxth.w	r8, r8
 801fe5e:	fa1f fc8c 	uxth.w	ip, ip
 801fe62:	f830 1b02 	ldrh.w	r1, [r0], #2
 801fe66:	9b01      	ldr	r3, [sp, #4]
 801fe68:	00ca      	lsls	r2, r1, #3
 801fe6a:	7b1f      	ldrb	r7, [r3, #12]
 801fe6c:	b2d2      	uxtb	r2, r2
 801fe6e:	10cb      	asrs	r3, r1, #3
 801fe70:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fe74:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801fe78:	fb02 820c 	mla	r2, r2, ip, r8
 801fe7c:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 801fe80:	fb03 930c 	mla	r3, r3, ip, r9
 801fe84:	b292      	uxth	r2, r2
 801fe86:	1c54      	adds	r4, r2, #1
 801fe88:	b29b      	uxth	r3, r3
 801fe8a:	3f01      	subs	r7, #1
 801fe8c:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801fe90:	2f01      	cmp	r7, #1
 801fe92:	f103 0401 	add.w	r4, r3, #1
 801fe96:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fe9a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801fe9e:	d92d      	bls.n	801fefc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x26c>
 801fea0:	1209      	asrs	r1, r1, #8
 801fea2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801fea6:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801feaa:	fb01 b10c 	mla	r1, r1, ip, fp
 801feae:	b289      	uxth	r1, r1
 801feb0:	1c4c      	adds	r4, r1, #1
 801feb2:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 801feb6:	095b      	lsrs	r3, r3, #5
 801feb8:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 801febc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801fec0:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
 801fec4:	431a      	orrs	r2, r3
 801fec6:	4586      	cmp	lr, r0
 801fec8:	f820 2c02 	strh.w	r2, [r0, #-2]
 801fecc:	d1c9      	bne.n	801fe62 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 801fece:	4670      	mov	r0, lr
 801fed0:	4555      	cmp	r5, sl
 801fed2:	d31b      	bcc.n	801ff0c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x27c>
 801fed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fed6:	f8bd 602c 	ldrh.w	r6, [sp, #44]	@ 0x2c
 801feda:	4b4f      	ldr	r3, [pc, #316]	@ (8020018 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x388>)
 801fedc:	fa1f fa82 	uxth.w	sl, r2
 801fee0:	eba6 060a 	sub.w	r6, r6, sl
 801fee4:	881b      	ldrh	r3, [r3, #0]
 801fee6:	b2b6      	uxth	r6, r6
 801fee8:	2e00      	cmp	r6, #0
 801feea:	eba3 0302 	sub.w	r3, r3, r2
 801feee:	9d04      	ldr	r5, [sp, #16]
 801fef0:	bf18      	it	ne
 801fef2:	f04f 0a00 	movne.w	sl, #0
 801fef6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fefa:	e757      	b.n	801fdac <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x11c>
 801fefc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ff00:	431a      	orrs	r2, r3
 801ff02:	4586      	cmp	lr, r0
 801ff04:	f820 2c02 	strh.w	r2, [r0, #-2]
 801ff08:	d1ab      	bne.n	801fe62 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 801ff0a:	e7e0      	b.n	801fece <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23e>
 801ff0c:	9d04      	ldr	r5, [sp, #16]
 801ff0e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ff12:	e74b      	b.n	801fdac <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x11c>
 801ff14:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ff18:	e7da      	b.n	801fed0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 801ff1a:	ebaa 0405 	sub.w	r4, sl, r5
 801ff1e:	b2a4      	uxth	r4, r4
 801ff20:	462b      	mov	r3, r5
 801ff22:	9604      	str	r6, [sp, #16]
 801ff24:	9407      	str	r4, [sp, #28]
 801ff26:	e765      	b.n	801fdf4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x164>
 801ff28:	1bad      	subs	r5, r5, r6
 801ff2a:	b2ad      	uxth	r5, r5
 801ff2c:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 801ff30:	2600      	movs	r6, #0
 801ff32:	e73b      	b.n	801fdac <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x11c>
 801ff34:	460b      	mov	r3, r1
 801ff36:	3302      	adds	r3, #2
 801ff38:	784d      	ldrb	r5, [r1, #1]
 801ff3a:	9300      	str	r3, [sp, #0]
 801ff3c:	e72f      	b.n	801fd9e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x10e>
 801ff3e:	9a01      	ldr	r2, [sp, #4]
 801ff40:	7b12      	ldrb	r2, [r2, #12]
 801ff42:	3a01      	subs	r2, #1
 801ff44:	2a01      	cmp	r2, #1
 801ff46:	d954      	bls.n	801fff2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x362>
 801ff48:	4a34      	ldr	r2, [pc, #208]	@ (802001c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x38c>)
 801ff4a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ff4e:	ea02 2b0b 	and.w	fp, r2, fp, lsl #8
 801ff52:	ea4b 08d8 	orr.w	r8, fp, r8, lsr #3
 801ff56:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801ff5a:	ea48 0809 	orr.w	r8, r8, r9
 801ff5e:	fa1f fe88 	uxth.w	lr, r8
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d0b4      	beq.n	801fed0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 801ff66:	1e5a      	subs	r2, r3, #1
 801ff68:	fa1f fb82 	uxth.w	fp, r2
 801ff6c:	f1bb 0f04 	cmp.w	fp, #4
 801ff70:	f3c0 0140 	ubfx	r1, r0, #1, #1
 801ff74:	d945      	bls.n	8020002 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x372>
 801ff76:	2900      	cmp	r1, #0
 801ff78:	d040      	beq.n	801fffc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x36c>
 801ff7a:	46d8      	mov	r8, fp
 801ff7c:	f8a0 e000 	strh.w	lr, [r0]
 801ff80:	f100 0902 	add.w	r9, r0, #2
 801ff84:	2700      	movs	r7, #0
 801ff86:	1a5b      	subs	r3, r3, r1
 801ff88:	463a      	mov	r2, r7
 801ff8a:	fa1f fc83 	uxth.w	ip, r3
 801ff8e:	f36e 070f 	bfi	r7, lr, #0, #16
 801ff92:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ff96:	ea4f 035c 	mov.w	r3, ip, lsr #1
 801ff9a:	f36e 471f 	bfi	r7, lr, #16, #16
 801ff9e:	3201      	adds	r2, #1
 801ffa0:	b294      	uxth	r4, r2
 801ffa2:	42a3      	cmp	r3, r4
 801ffa4:	f841 7b04 	str.w	r7, [r1], #4
 801ffa8:	d8f9      	bhi.n	801ff9e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x30e>
 801ffaa:	f02c 0201 	bic.w	r2, ip, #1
 801ffae:	b292      	uxth	r2, r2
 801ffb0:	eba8 0302 	sub.w	r3, r8, r2
 801ffb4:	4562      	cmp	r2, ip
 801ffb6:	b29b      	uxth	r3, r3
 801ffb8:	eb09 0142 	add.w	r1, r9, r2, lsl #1
 801ffbc:	d014      	beq.n	801ffe8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 801ffbe:	1e5a      	subs	r2, r3, #1
 801ffc0:	b292      	uxth	r2, r2
 801ffc2:	f8a1 e000 	strh.w	lr, [r1]
 801ffc6:	b17a      	cbz	r2, 801ffe8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 801ffc8:	1e9a      	subs	r2, r3, #2
 801ffca:	b292      	uxth	r2, r2
 801ffcc:	f8a1 e002 	strh.w	lr, [r1, #2]
 801ffd0:	b152      	cbz	r2, 801ffe8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 801ffd2:	1eda      	subs	r2, r3, #3
 801ffd4:	b292      	uxth	r2, r2
 801ffd6:	f8a1 e004 	strh.w	lr, [r1, #4]
 801ffda:	b12a      	cbz	r2, 801ffe8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 801ffdc:	2b04      	cmp	r3, #4
 801ffde:	f8a1 e006 	strh.w	lr, [r1, #6]
 801ffe2:	d001      	beq.n	801ffe8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 801ffe4:	f8a1 e008 	strh.w	lr, [r1, #8]
 801ffe8:	f10b 0b01 	add.w	fp, fp, #1
 801ffec:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 801fff0:	e76e      	b.n	801fed0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 801fff2:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
 801fff6:	fa1f fe88 	uxth.w	lr, r8
 801fffa:	e7b2      	b.n	801ff62 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2d2>
 801fffc:	4681      	mov	r9, r0
 801fffe:	4698      	mov	r8, r3
 8020000:	e7c0      	b.n	801ff84 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2f4>
 8020002:	4601      	mov	r1, r0
 8020004:	e7dc      	b.n	801ffc0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x330>
 8020006:	4b06      	ldr	r3, [pc, #24]	@ (8020020 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x390>)
 8020008:	4a06      	ldr	r2, [pc, #24]	@ (8020024 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x394>)
 802000a:	f44f 61aa 	mov.w	r1, #1360	@ 0x550
 802000e:	4806      	ldr	r0, [pc, #24]	@ (8020028 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x398>)
 8020010:	f00a feec 	bl	802adec <__assert_func>
 8020014:	2008745c 	.word	0x2008745c
 8020018:	20087456 	.word	0x20087456
 802001c:	fffff800 	.word	0xfffff800
 8020020:	0802df64 	.word	0x0802df64
 8020024:	0802f560 	.word	0x0802f560
 8020028:	0802de70 	.word	0x0802de70

0802002c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 802002c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020030:	b09f      	sub	sp, #124	@ 0x7c
 8020032:	9201      	str	r2, [sp, #4]
 8020034:	461c      	mov	r4, r3
 8020036:	7812      	ldrb	r2, [r2, #0]
 8020038:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802003c:	9116      	str	r1, [sp, #88]	@ 0x58
 802003e:	9305      	str	r3, [sp, #20]
 8020040:	2a00      	cmp	r2, #0
 8020042:	f040 823c 	bne.w	80204be <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x492>
 8020046:	b913      	cbnz	r3, 802004e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8020048:	b01f      	add	sp, #124	@ 0x7c
 802004a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802004e:	6861      	ldr	r1, [r4, #4]
 8020050:	4683      	mov	fp, r0
 8020052:	6820      	ldr	r0, [r4, #0]
 8020054:	ab1a      	add	r3, sp, #104	@ 0x68
 8020056:	c303      	stmia	r3!, {r0, r1}
 8020058:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802005a:	6818      	ldr	r0, [r3, #0]
 802005c:	6859      	ldr	r1, [r3, #4]
 802005e:	ab1c      	add	r3, sp, #112	@ 0x70
 8020060:	c303      	stmia	r3!, {r0, r1}
 8020062:	a81a      	add	r0, sp, #104	@ 0x68
 8020064:	f7f5 fb48 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020068:	4621      	mov	r1, r4
 802006a:	a81c      	add	r0, sp, #112	@ 0x70
 802006c:	f7f5 fb6c 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020070:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	@ 0x6c
 8020074:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8020078:	f340 8152 	ble.w	8020320 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2f4>
 802007c:	2301      	movs	r3, #1
 802007e:	b289      	uxth	r1, r1
 8020080:	9318      	str	r3, [sp, #96]	@ 0x60
 8020082:	f9bd 0072 	ldrsh.w	r0, [sp, #114]	@ 0x72
 8020086:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	@ 0x6e
 802008a:	fb90 f4f3 	sdiv	r4, r0, r3
 802008e:	441a      	add	r2, r3
 8020090:	3a01      	subs	r2, #1
 8020092:	fb92 f2f3 	sdiv	r2, r2, r3
 8020096:	b2a4      	uxth	r4, r4
 8020098:	fb03 0314 	mls	r3, r3, r4, r0
 802009c:	9417      	str	r4, [sp, #92]	@ 0x5c
 802009e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80200a2:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 80200a6:	fb13 4101 	smlabb	r1, r3, r1, r4
 80200aa:	f8bd 506a 	ldrh.w	r5, [sp, #106]	@ 0x6a
 80200ae:	4bbb      	ldr	r3, [pc, #748]	@ (802039c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x370>)
 80200b0:	4434      	add	r4, r6
 80200b2:	4405      	add	r5, r0
 80200b4:	6818      	ldr	r0, [r3, #0]
 80200b6:	f8ad 4070 	strh.w	r4, [sp, #112]	@ 0x70
 80200ba:	f8ad 5072 	strh.w	r5, [sp, #114]	@ 0x72
 80200be:	f9bd 6074 	ldrsh.w	r6, [sp, #116]	@ 0x74
 80200c2:	6803      	ldr	r3, [r0, #0]
 80200c4:	3201      	adds	r2, #1
 80200c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80200c8:	960b      	str	r6, [sp, #44]	@ 0x2c
 80200ca:	fa1f fa81 	uxth.w	sl, r1
 80200ce:	b294      	uxth	r4, r2
 80200d0:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	@ 0x76
 80200d4:	4798      	blx	r3
 80200d6:	2300      	movs	r3, #0
 80200d8:	f1ba 0f00 	cmp.w	sl, #0
 80200dc:	bf0c      	ite	eq
 80200de:	4632      	moveq	r2, r6
 80200e0:	2200      	movne	r2, #0
 80200e2:	49af      	ldr	r1, [pc, #700]	@ (80203a0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x374>)
 80200e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80200e6:	8809      	ldrh	r1, [r1, #0]
 80200e8:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	@ 0x72
 80200ec:	f9bd 6070 	ldrsh.w	r6, [sp, #112]	@ 0x70
 80200f0:	fb01 f505 	mul.w	r5, r1, r5
 80200f4:	fb01 6303 	mla	r3, r1, r3, r6
 80200f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80200fc:	9300      	str	r3, [sp, #0]
 80200fe:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8020102:	9307      	str	r3, [sp, #28]
 8020104:	b293      	uxth	r3, r2
 8020106:	9302      	str	r3, [sp, #8]
 8020108:	f10b 030e 	add.w	r3, fp, #14
 802010c:	9319      	str	r3, [sp, #100]	@ 0x64
 802010e:	465b      	mov	r3, fp
 8020110:	46d3      	mov	fp, sl
 8020112:	469a      	mov	sl, r3
 8020114:	00a4      	lsls	r4, r4, #2
 8020116:	1d21      	adds	r1, r4, #4
 8020118:	9113      	str	r1, [sp, #76]	@ 0x4c
 802011a:	9b07      	ldr	r3, [sp, #28]
 802011c:	9a00      	ldr	r2, [sp, #0]
 802011e:	4293      	cmp	r3, r2
 8020120:	f240 8134 	bls.w	802038c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x360>
 8020124:	2601      	movs	r6, #1
 8020126:	2700      	movs	r7, #0
 8020128:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802012a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802012c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8020130:	fa11 f482 	uxtah	r4, r1, r2
 8020134:	00a4      	lsls	r4, r4, #2
 8020136:	9a01      	ldr	r2, [sp, #4]
 8020138:	3404      	adds	r4, #4
 802013a:	1911      	adds	r1, r2, r4
 802013c:	788a      	ldrb	r2, [r1, #2]
 802013e:	784d      	ldrb	r5, [r1, #1]
 8020140:	0212      	lsls	r2, r2, #8
 8020142:	78c9      	ldrb	r1, [r1, #3]
 8020144:	ea42 4005 	orr.w	r0, r2, r5, lsl #16
 8020148:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802014a:	4308      	orrs	r0, r1
 802014c:	4629      	mov	r1, r5
 802014e:	fbbb f3f3 	udiv	r3, fp, r3
 8020152:	46bc      	mov	ip, r7
 8020154:	46b1      	mov	r9, r6
 8020156:	4401      	add	r1, r0
 8020158:	784a      	ldrb	r2, [r1, #1]
 802015a:	5c28      	ldrb	r0, [r5, r0]
 802015c:	0212      	lsls	r2, r2, #8
 802015e:	9d01      	ldr	r5, [sp, #4]
 8020160:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020164:	4302      	orrs	r2, r0
 8020166:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8020168:	5d2c      	ldrb	r4, [r5, r4]
 802016a:	f88a 200d 	strb.w	r2, [sl, #13]
 802016e:	b292      	uxth	r2, r2
 8020170:	1ac3      	subs	r3, r0, r3
 8020172:	9209      	str	r2, [sp, #36]	@ 0x24
 8020174:	198a      	adds	r2, r1, r6
 8020176:	9203      	str	r2, [sp, #12]
 8020178:	b29b      	uxth	r3, r3
 802017a:	19a2      	adds	r2, r4, r6
 802017c:	9712      	str	r7, [sp, #72]	@ 0x48
 802017e:	960a      	str	r6, [sp, #40]	@ 0x28
 8020180:	940e      	str	r4, [sp, #56]	@ 0x38
 8020182:	9206      	str	r2, [sp, #24]
 8020184:	9314      	str	r3, [sp, #80]	@ 0x50
 8020186:	9604      	str	r6, [sp, #16]
 8020188:	f1bb 0f00 	cmp.w	fp, #0
 802018c:	d037      	beq.n	80201fe <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 802018e:	45d9      	cmp	r9, fp
 8020190:	f080 80ce 	bcs.w	8020330 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x304>
 8020194:	ebab 0b09 	sub.w	fp, fp, r9
 8020198:	fa1f fb8b 	uxth.w	fp, fp
 802019c:	9b07      	ldr	r3, [sp, #28]
 802019e:	9a00      	ldr	r2, [sp, #0]
 80201a0:	4293      	cmp	r3, r2
 80201a2:	f240 80f3 	bls.w	802038c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x360>
 80201a6:	9803      	ldr	r0, [sp, #12]
 80201a8:	9c04      	ldr	r4, [sp, #16]
 80201aa:	7842      	ldrb	r2, [r0, #1]
 80201ac:	f1c4 0107 	rsb	r1, r4, #7
 80201b0:	7803      	ldrb	r3, [r0, #0]
 80201b2:	408a      	lsls	r2, r1
 80201b4:	0052      	lsls	r2, r2, #1
 80201b6:	4123      	asrs	r3, r4
 80201b8:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80201bc:	1c61      	adds	r1, r4, #1
 80201be:	b2db      	uxtb	r3, r3
 80201c0:	4313      	orrs	r3, r2
 80201c2:	b2ca      	uxtb	r2, r1
 80201c4:	4611      	mov	r1, r2
 80201c6:	2908      	cmp	r1, #8
 80201c8:	9204      	str	r2, [sp, #16]
 80201ca:	b29a      	uxth	r2, r3
 80201cc:	f000 811a 	beq.w	8020404 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3d8>
 80201d0:	3001      	adds	r0, #1
 80201d2:	9003      	str	r0, [sp, #12]
 80201d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80201d6:	4291      	cmp	r1, r2
 80201d8:	f0c0 80e6 	bcc.w	80203a8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x37c>
 80201dc:	f04f 0901 	mov.w	r9, #1
 80201e0:	b2db      	uxtb	r3, r3
 80201e2:	f88a 300d 	strb.w	r3, [sl, #13]
 80201e6:	9906      	ldr	r1, [sp, #24]
 80201e8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80201ec:	f0c0 8132 	bcc.w	8020454 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x428>
 80201f0:	e9cd 2909 	strd	r2, r9, [sp, #36]	@ 0x24
 80201f4:	f04f 0c00 	mov.w	ip, #0
 80201f8:	f1bb 0f00 	cmp.w	fp, #0
 80201fc:	d1c7      	bne.n	802018e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x162>
 80201fe:	9b02      	ldr	r3, [sp, #8]
 8020200:	4599      	cmp	r9, r3
 8020202:	461a      	mov	r2, r3
 8020204:	f0c0 80f0 	bcc.w	80203e8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3bc>
 8020208:	eba9 0303 	sub.w	r3, r9, r3
 802020c:	b29b      	uxth	r3, r3
 802020e:	930c      	str	r3, [sp, #48]	@ 0x30
 8020210:	2a00      	cmp	r2, #0
 8020212:	f000 80fd 	beq.w	8020410 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3e4>
 8020216:	4613      	mov	r3, r2
 8020218:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 802021c:	9208      	str	r2, [sp, #32]
 802021e:	4463      	add	r3, ip
 8020220:	b29b      	uxth	r3, r3
 8020222:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 8020226:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 802022a:	f8dd e000 	ldr.w	lr, [sp]
 802022e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020230:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 8020234:	469b      	mov	fp, r3
 8020236:	e048      	b.n	80202ca <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x29e>
 8020238:	9905      	ldr	r1, [sp, #20]
 802023a:	f8be 5000 	ldrh.w	r5, [lr]
 802023e:	fb01 f202 	mul.w	r2, r1, r2
 8020242:	1c50      	adds	r0, r2, #1
 8020244:	eb00 2022 	add.w	r0, r0, r2, asr #8
 8020248:	1200      	asrs	r0, r0, #8
 802024a:	43c4      	mvns	r4, r0
 802024c:	b280      	uxth	r0, r0
 802024e:	b2ff      	uxtb	r7, r7
 8020250:	fb13 f300 	smulbb	r3, r3, r0
 8020254:	fb17 f700 	smulbb	r7, r7, r0
 8020258:	00e9      	lsls	r1, r5, #3
 802025a:	b2c9      	uxtb	r1, r1
 802025c:	10ea      	asrs	r2, r5, #3
 802025e:	b2e4      	uxtb	r4, r4
 8020260:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020264:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8020268:	fb01 3304 	mla	r3, r1, r4, r3
 802026c:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020270:	fb02 7704 	mla	r7, r2, r4, r7
 8020274:	b29b      	uxth	r3, r3
 8020276:	b2bf      	uxth	r7, r7
 8020278:	1c59      	adds	r1, r3, #1
 802027a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802027e:	1c7a      	adds	r2, r7, #1
 8020280:	2e01      	cmp	r6, #1
 8020282:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020286:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802028a:	d966      	bls.n	802035a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x32e>
 802028c:	fa5f f888 	uxtb.w	r8, r8
 8020290:	fb18 f800 	smulbb	r8, r8, r0
 8020294:	122d      	asrs	r5, r5, #8
 8020296:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802029a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802029e:	fb05 8804 	mla	r8, r5, r4, r8
 80202a2:	fa1f f888 	uxth.w	r8, r8
 80202a6:	f108 0101 	add.w	r1, r8, #1
 80202aa:	eb01 2118 	add.w	r1, r1, r8, lsr #8
 80202ae:	097f      	lsrs	r7, r7, #5
 80202b0:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80202b4:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80202b8:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 80202bc:	433b      	orrs	r3, r7
 80202be:	f8ae 3000 	strh.w	r3, [lr]
 80202c2:	45dc      	cmp	ip, fp
 80202c4:	f10e 0e02 	add.w	lr, lr, #2
 80202c8:	d04b      	beq.n	8020362 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x336>
 80202ca:	2204      	movs	r2, #4
 80202cc:	eb0a 030c 	add.w	r3, sl, ip
 80202d0:	7b5b      	ldrb	r3, [r3, #13]
 80202d2:	f10c 0c01 	add.w	ip, ip, #1
 80202d6:	fb12 9303 	smlabb	r3, r2, r3, r9
 80202da:	9a01      	ldr	r2, [sp, #4]
 80202dc:	fa1f fc8c 	uxth.w	ip, ip
 80202e0:	58d3      	ldr	r3, [r2, r3]
 80202e2:	0e1a      	lsrs	r2, r3, #24
 80202e4:	d0ed      	beq.n	80202c2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x296>
 80202e6:	f89a 600c 	ldrb.w	r6, [sl, #12]
 80202ea:	2aff      	cmp	r2, #255	@ 0xff
 80202ec:	f106 36ff 	add.w	r6, r6, #4294967295
 80202f0:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80202f4:	ea4f 2713 	mov.w	r7, r3, lsr #8
 80202f8:	b2f6      	uxtb	r6, r6
 80202fa:	b2db      	uxtb	r3, r3
 80202fc:	d19c      	bne.n	8020238 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 80202fe:	9905      	ldr	r1, [sp, #20]
 8020300:	29ff      	cmp	r1, #255	@ 0xff
 8020302:	d199      	bne.n	8020238 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8020304:	2e01      	cmp	r6, #1
 8020306:	f240 80c4 	bls.w	8020492 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x466>
 802030a:	4a26      	ldr	r2, [pc, #152]	@ (80203a4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x378>)
 802030c:	00ff      	lsls	r7, r7, #3
 802030e:	ea02 2808 	and.w	r8, r2, r8, lsl #8
 8020312:	ea48 03d3 	orr.w	r3, r8, r3, lsr #3
 8020316:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802031a:	433b      	orrs	r3, r7
 802031c:	b29b      	uxth	r3, r3
 802031e:	e7ce      	b.n	80202be <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x292>
 8020320:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020324:	b289      	uxth	r1, r1
 8020326:	fb93 f3f1 	sdiv	r3, r3, r1
 802032a:	b29a      	uxth	r2, r3
 802032c:	9218      	str	r2, [sp, #96]	@ 0x60
 802032e:	e6a8      	b.n	8020082 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x56>
 8020330:	eba9 090b 	sub.w	r9, r9, fp
 8020334:	44dc      	add	ip, fp
 8020336:	f04f 0b00 	mov.w	fp, #0
 802033a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 802033e:	fa1f f989 	uxth.w	r9, r9
 8020342:	fa1f fc8c 	uxth.w	ip, ip
 8020346:	9302      	str	r3, [sp, #8]
 8020348:	9b07      	ldr	r3, [sp, #28]
 802034a:	9a00      	ldr	r2, [sp, #0]
 802034c:	4293      	cmp	r3, r2
 802034e:	d91d      	bls.n	802038c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x360>
 8020350:	f1b9 0f00 	cmp.w	r9, #0
 8020354:	f47f af18 	bne.w	8020188 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 8020358:	e725      	b.n	80201a6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 802035a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802035e:	433b      	orrs	r3, r7
 8020360:	e7ad      	b.n	80202be <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x292>
 8020362:	9b08      	ldr	r3, [sp, #32]
 8020364:	9a00      	ldr	r2, [sp, #0]
 8020366:	3b01      	subs	r3, #1
 8020368:	b29b      	uxth	r3, r3
 802036a:	3301      	adds	r3, #1
 802036c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020370:	9300      	str	r3, [sp, #0]
 8020372:	9b02      	ldr	r3, [sp, #8]
 8020374:	e9dd 9b0f 	ldrd	r9, fp, [sp, #60]	@ 0x3c
 8020378:	4599      	cmp	r9, r3
 802037a:	d24b      	bcs.n	8020414 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3e8>
 802037c:	e9dd 9c0c 	ldrd	r9, ip, [sp, #48]	@ 0x30
 8020380:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020382:	9a00      	ldr	r2, [sp, #0]
 8020384:	9302      	str	r3, [sp, #8]
 8020386:	9b07      	ldr	r3, [sp, #28]
 8020388:	4293      	cmp	r3, r2
 802038a:	d8e1      	bhi.n	8020350 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x324>
 802038c:	4b03      	ldr	r3, [pc, #12]	@ (802039c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x370>)
 802038e:	6818      	ldr	r0, [r3, #0]
 8020390:	6803      	ldr	r3, [r0, #0]
 8020392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020394:	4798      	blx	r3
 8020396:	b01f      	add	sp, #124	@ 0x7c
 8020398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802039c:	2008745c 	.word	0x2008745c
 80203a0:	20087456 	.word	0x20087456
 80203a4:	fffff800 	.word	0xfffff800
 80203a8:	9b06      	ldr	r3, [sp, #24]
 80203aa:	429a      	cmp	r2, r3
 80203ac:	d355      	bcc.n	802045a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x42e>
 80203ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80203b0:	f89a 100d 	ldrb.w	r1, [sl, #13]
 80203b4:	eb0a 0300 	add.w	r3, sl, r0
 80203b8:	7359      	strb	r1, [r3, #13]
 80203ba:	f89a 300d 	ldrb.w	r3, [sl, #13]
 80203be:	1c41      	adds	r1, r0, #1
 80203c0:	fa1f f981 	uxth.w	r9, r1
 80203c4:	9c06      	ldr	r4, [sp, #24]
 80203c6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80203c8:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
 80203cc:	3401      	adds	r4, #1
 80203ce:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 80203d2:	b2a3      	uxth	r3, r4
 80203d4:	f8a0 5050 	strh.w	r5, [r0, #80]	@ 0x50
 80203d8:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 80203dc:	9306      	str	r3, [sp, #24]
 80203de:	e9cd 2909 	strd	r2, r9, [sp, #36]	@ 0x24
 80203e2:	f04f 0c00 	mov.w	ip, #0
 80203e6:	e6cf      	b.n	8020188 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 80203e8:	eba3 0309 	sub.w	r3, r3, r9
 80203ec:	b29b      	uxth	r3, r3
 80203ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80203f0:	f1b9 0f00 	cmp.w	r9, #0
 80203f4:	f43f aed2 	beq.w	802019c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x170>
 80203f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80203fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8020400:	464b      	mov	r3, r9
 8020402:	e70c      	b.n	802021e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 8020404:	2100      	movs	r1, #0
 8020406:	9104      	str	r1, [sp, #16]
 8020408:	9903      	ldr	r1, [sp, #12]
 802040a:	3102      	adds	r1, #2
 802040c:	9103      	str	r1, [sp, #12]
 802040e:	e6e1      	b.n	80201d4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8020410:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8020414:	4b2d      	ldr	r3, [pc, #180]	@ (80204cc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x4a0>)
 8020416:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020418:	881b      	ldrh	r3, [r3, #0]
 802041a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802041c:	1a5b      	subs	r3, r3, r1
 802041e:	9900      	ldr	r1, [sp, #0]
 8020420:	3201      	adds	r2, #1
 8020422:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8020426:	9300      	str	r3, [sp, #0]
 8020428:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802042a:	9212      	str	r2, [sp, #72]	@ 0x48
 802042c:	429a      	cmp	r2, r3
 802042e:	d034      	beq.n	802049a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x46e>
 8020430:	e9dd 9c0c 	ldrd	r9, ip, [sp, #48]	@ 0x30
 8020434:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8020438:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 802043c:	ebab 0b03 	sub.w	fp, fp, r3
 8020440:	fa1f fb8b 	uxth.w	fp, fp
 8020444:	f1bb 0f00 	cmp.w	fp, #0
 8020448:	bf14      	ite	ne
 802044a:	2300      	movne	r3, #0
 802044c:	f04f 0b00 	moveq.w	fp, #0
 8020450:	9302      	str	r3, [sp, #8]
 8020452:	e779      	b.n	8020348 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x31c>
 8020454:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020456:	3101      	adds	r1, #1
 8020458:	e7b4      	b.n	80203c4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x398>
 802045a:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
 802045e:	f893 904f 	ldrb.w	r9, [r3, #79]	@ 0x4f
 8020462:	4613      	mov	r3, r2
 8020464:	f1b9 0f01 	cmp.w	r9, #1
 8020468:	d90d      	bls.n	8020486 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x45a>
 802046a:	f109 010d 	add.w	r1, r9, #13
 802046e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8020470:	4451      	add	r1, sl
 8020472:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020476:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 802047a:	f801 0d01 	strb.w	r0, [r1, #-1]!
 802047e:	428c      	cmp	r4, r1
 8020480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8020484:	d1f5      	bne.n	8020472 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x446>
 8020486:	b2db      	uxtb	r3, r3
 8020488:	f88a 300d 	strb.w	r3, [sl, #13]
 802048c:	fa1f f989 	uxth.w	r9, r9
 8020490:	e6a9      	b.n	80201e6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 8020492:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8020496:	b29b      	uxth	r3, r3
 8020498:	e711      	b.n	80202be <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x292>
 802049a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 802049e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	@ 0x68
 80204a2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80204a4:	1a9b      	subs	r3, r3, r2
 80204a6:	fa1f fb83 	uxth.w	fp, r3
 80204aa:	f1bb 0f00 	cmp.w	fp, #0
 80204ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80204b0:	bf18      	it	ne
 80204b2:	2300      	movne	r3, #0
 80204b4:	3101      	adds	r1, #1
 80204b6:	b29b      	uxth	r3, r3
 80204b8:	9115      	str	r1, [sp, #84]	@ 0x54
 80204ba:	9302      	str	r3, [sp, #8]
 80204bc:	e62d      	b.n	802011a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xee>
 80204be:	4b04      	ldr	r3, [pc, #16]	@ (80204d0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x4a4>)
 80204c0:	4a04      	ldr	r2, [pc, #16]	@ (80204d4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x4a8>)
 80204c2:	f240 51f3 	movw	r1, #1523	@ 0x5f3
 80204c6:	4804      	ldr	r0, [pc, #16]	@ (80204d8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x4ac>)
 80204c8:	f00a fc90 	bl	802adec <__assert_func>
 80204cc:	20087456 	.word	0x20087456
 80204d0:	0802df64 	.word	0x0802df64
 80204d4:	0802f82c 	.word	0x0802f82c
 80204d8:	0802de70 	.word	0x0802de70

080204dc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 80204dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204e0:	4691      	mov	r9, r2
 80204e2:	8812      	ldrh	r2, [r2, #0]
 80204e4:	b093      	sub	sp, #76	@ 0x4c
 80204e6:	2a01      	cmp	r2, #1
 80204e8:	f89d 4074 	ldrb.w	r4, [sp, #116]	@ 0x74
 80204ec:	f040 8129 	bne.w	8020742 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x266>
 80204f0:	b914      	cbnz	r4, 80204f8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 80204f2:	b013      	add	sp, #76	@ 0x4c
 80204f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204f8:	461d      	mov	r5, r3
 80204fa:	468a      	mov	sl, r1
 80204fc:	6818      	ldr	r0, [r3, #0]
 80204fe:	6859      	ldr	r1, [r3, #4]
 8020500:	ab0e      	add	r3, sp, #56	@ 0x38
 8020502:	c303      	stmia	r3!, {r0, r1}
 8020504:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020506:	6818      	ldr	r0, [r3, #0]
 8020508:	6859      	ldr	r1, [r3, #4]
 802050a:	ab10      	add	r3, sp, #64	@ 0x40
 802050c:	c303      	stmia	r3!, {r0, r1}
 802050e:	a80e      	add	r0, sp, #56	@ 0x38
 8020510:	f7f5 f8f2 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020514:	4629      	mov	r1, r5
 8020516:	a810      	add	r0, sp, #64	@ 0x40
 8020518:	f7f5 f916 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802051c:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	@ 0x40
 8020520:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	@ 0x42
 8020524:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8020528:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 802052c:	488b      	ldr	r0, [pc, #556]	@ (802075c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802052e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8020532:	442a      	add	r2, r5
 8020534:	4433      	add	r3, r6
 8020536:	6800      	ldr	r0, [r0, #0]
 8020538:	fb11 5106 	smlabb	r1, r1, r6, r5
 802053c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8020540:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8020544:	6802      	ldr	r2, [r0, #0]
 8020546:	4e86      	ldr	r6, [pc, #536]	@ (8020760 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>)
 8020548:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 802054c:	448a      	add	sl, r1
 802054e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8020552:	42b3      	cmp	r3, r6
 8020554:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020556:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802055a:	f040 80c8 	bne.w	80206ee <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802055e:	6841      	ldr	r1, [r0, #4]
 8020560:	4e80      	ldr	r6, [pc, #512]	@ (8020764 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>)
 8020562:	680b      	ldr	r3, [r1, #0]
 8020564:	699b      	ldr	r3, [r3, #24]
 8020566:	42b3      	cmp	r3, r6
 8020568:	f040 80e4 	bne.w	8020734 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>
 802056c:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 802056e:	4798      	blx	r3
 8020570:	4b7d      	ldr	r3, [pc, #500]	@ (8020768 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8020572:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8020576:	881b      	ldrh	r3, [r3, #0]
 8020578:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 802057c:	2cff      	cmp	r4, #255	@ 0xff
 802057e:	fb03 1202 	mla	r2, r3, r2, r1
 8020582:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020586:	d06f      	beq.n	8020668 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 8020588:	43e2      	mvns	r2, r4
 802058a:	fb05 f503 	mul.w	r5, r5, r3
 802058e:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8020592:	4288      	cmp	r0, r1
 8020594:	910c      	str	r1, [sp, #48]	@ 0x30
 8020596:	b2d2      	uxtb	r2, r2
 8020598:	d25e      	bcs.n	8020658 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 802059a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802059c:	fa1f f884 	uxth.w	r8, r4
 80205a0:	0049      	lsls	r1, r1, #1
 80205a2:	b292      	uxth	r2, r2
 80205a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80205a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80205a8:	eb00 0b01 	add.w	fp, r0, r1
 80205ac:	4583      	cmp	fp, r0
 80205ae:	d948      	bls.n	8020642 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x166>
 80205b0:	4684      	mov	ip, r0
 80205b2:	f10a 3eff 	add.w	lr, sl, #4294967295
 80205b6:	2103      	movs	r1, #3
 80205b8:	2404      	movs	r4, #4
 80205ba:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
 80205be:	f8bc 3000 	ldrh.w	r3, [ip]
 80205c2:	fb11 4606 	smlabb	r6, r1, r6, r4
 80205c6:	eb09 0106 	add.w	r1, r9, r6
 80205ca:	788d      	ldrb	r5, [r1, #2]
 80205cc:	784f      	ldrb	r7, [r1, #1]
 80205ce:	00dc      	lsls	r4, r3, #3
 80205d0:	b2e4      	uxtb	r4, r4
 80205d2:	fb14 f402 	smulbb	r4, r4, r2
 80205d6:	fb15 f508 	smulbb	r5, r5, r8
 80205da:	fb17 f708 	smulbb	r7, r7, r8
 80205de:	f819 6006 	ldrb.w	r6, [r9, r6]
 80205e2:	1219      	asrs	r1, r3, #8
 80205e4:	10db      	asrs	r3, r3, #3
 80205e6:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80205ea:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80205ee:	fb06 4608 	mla	r6, r6, r8, r4
 80205f2:	fb01 5102 	mla	r1, r1, r2, r5
 80205f6:	fb03 7302 	mla	r3, r3, r2, r7
 80205fa:	b2b6      	uxth	r6, r6
 80205fc:	b29b      	uxth	r3, r3
 80205fe:	b28d      	uxth	r5, r1
 8020600:	1c5c      	adds	r4, r3, #1
 8020602:	1c69      	adds	r1, r5, #1
 8020604:	1c77      	adds	r7, r6, #1
 8020606:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802060a:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 802060e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8020612:	f401 4378 	and.w	r3, r1, #63488	@ 0xf800
 8020616:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802061a:	0961      	lsrs	r1, r4, #5
 802061c:	4333      	orrs	r3, r6
 802061e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020622:	430b      	orrs	r3, r1
 8020624:	f82c 3b02 	strh.w	r3, [ip], #2
 8020628:	45e3      	cmp	fp, ip
 802062a:	d8c4      	bhi.n	80205b6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xda>
 802062c:	43c3      	mvns	r3, r0
 802062e:	449b      	add	fp, r3
 8020630:	4b4d      	ldr	r3, [pc, #308]	@ (8020768 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8020632:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8020636:	f10b 0b01 	add.w	fp, fp, #1
 802063a:	881b      	ldrh	r3, [r3, #0]
 802063c:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 8020640:	44da      	add	sl, fp
 8020642:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8020644:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8020648:	1b5c      	subs	r4, r3, r5
 802064a:	1b49      	subs	r1, r1, r5
 802064c:	448a      	add	sl, r1
 802064e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020650:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8020654:	4281      	cmp	r1, r0
 8020656:	d8a6      	bhi.n	80205a6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xca>
 8020658:	4b40      	ldr	r3, [pc, #256]	@ (802075c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802065a:	6818      	ldr	r0, [r3, #0]
 802065c:	6803      	ldr	r3, [r0, #0]
 802065e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020660:	4798      	blx	r3
 8020662:	b013      	add	sp, #76	@ 0x4c
 8020664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020668:	fb05 f503 	mul.w	r5, r5, r3
 802066c:	eb00 0e45 	add.w	lr, r0, r5, lsl #1
 8020670:	4570      	cmp	r0, lr
 8020672:	d2f1      	bcs.n	8020658 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8020674:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020676:	f04f 0c03 	mov.w	ip, #3
 802067a:	2704      	movs	r7, #4
 802067c:	4693      	mov	fp, r2
 802067e:	0051      	lsls	r1, r2, #1
 8020680:	4e3a      	ldr	r6, [pc, #232]	@ (802076c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 8020682:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020684:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020686:	eb00 0802 	add.w	r8, r0, r2
 802068a:	4580      	cmp	r8, r0
 802068c:	d923      	bls.n	80206d6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 802068e:	4604      	mov	r4, r0
 8020690:	f10a 35ff 	add.w	r5, sl, #4294967295
 8020694:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8020698:	fb1c 7202 	smlabb	r2, ip, r2, r7
 802069c:	eb09 0302 	add.w	r3, r9, r2
 80206a0:	7859      	ldrb	r1, [r3, #1]
 80206a2:	789b      	ldrb	r3, [r3, #2]
 80206a4:	00c9      	lsls	r1, r1, #3
 80206a6:	f819 2002 	ldrb.w	r2, [r9, r2]
 80206aa:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80206ae:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 80206b2:	430b      	orrs	r3, r1
 80206b4:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 80206b8:	f824 3b02 	strh.w	r3, [r4], #2
 80206bc:	45a0      	cmp	r8, r4
 80206be:	d8e9      	bhi.n	8020694 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 80206c0:	43c3      	mvns	r3, r0
 80206c2:	4498      	add	r8, r3
 80206c4:	4b28      	ldr	r3, [pc, #160]	@ (8020768 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80206c6:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80206ca:	f108 0801 	add.w	r8, r8, #1
 80206ce:	881b      	ldrh	r3, [r3, #0]
 80206d0:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 80206d4:	44c2      	add	sl, r8
 80206d6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80206da:	eba3 010b 	sub.w	r1, r3, fp
 80206de:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80206e2:	eba2 020b 	sub.w	r2, r2, fp
 80206e6:	4586      	cmp	lr, r0
 80206e8:	4492      	add	sl, r2
 80206ea:	d8cb      	bhi.n	8020684 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80206ec:	e7b4      	b.n	8020658 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80206ee:	4798      	blx	r3
 80206f0:	2801      	cmp	r0, #1
 80206f2:	d122      	bne.n	802073a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 80206f4:	4b1e      	ldr	r3, [pc, #120]	@ (8020770 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 80206f6:	6818      	ldr	r0, [r3, #0]
 80206f8:	b350      	cbz	r0, 8020750 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x274>
 80206fa:	2600      	movs	r6, #0
 80206fc:	270b      	movs	r7, #11
 80206fe:	4b1a      	ldr	r3, [pc, #104]	@ (8020768 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8020700:	b2aa      	uxth	r2, r5
 8020702:	881d      	ldrh	r5, [r3, #0]
 8020704:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8020708:	9404      	str	r4, [sp, #16]
 802070a:	9506      	str	r5, [sp, #24]
 802070c:	f8bd 4042 	ldrh.w	r4, [sp, #66]	@ 0x42
 8020710:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8020714:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8020718:	4651      	mov	r1, sl
 802071a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802071e:	464a      	mov	r2, r9
 8020720:	9608      	str	r6, [sp, #32]
 8020722:	9605      	str	r6, [sp, #20]
 8020724:	9707      	str	r7, [sp, #28]
 8020726:	9503      	str	r5, [sp, #12]
 8020728:	9400      	str	r4, [sp, #0]
 802072a:	f7fa fdd3 	bl	801b2d4 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802072e:	b013      	add	sp, #76	@ 0x4c
 8020730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020734:	4608      	mov	r0, r1
 8020736:	4798      	blx	r3
 8020738:	e7da      	b.n	80206f0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x214>
 802073a:	4b08      	ldr	r3, [pc, #32]	@ (802075c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 802073c:	6818      	ldr	r0, [r3, #0]
 802073e:	6802      	ldr	r2, [r0, #0]
 8020740:	e714      	b.n	802056c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x90>
 8020742:	4b0c      	ldr	r3, [pc, #48]	@ (8020774 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8020744:	4a0c      	ldr	r2, [pc, #48]	@ (8020778 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 8020746:	f240 61d9 	movw	r1, #1753	@ 0x6d9
 802074a:	480c      	ldr	r0, [pc, #48]	@ (802077c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a0>)
 802074c:	f00a fb4e 	bl	802adec <__assert_func>
 8020750:	4b0b      	ldr	r3, [pc, #44]	@ (8020780 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>)
 8020752:	4a0c      	ldr	r2, [pc, #48]	@ (8020784 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a8>)
 8020754:	217c      	movs	r1, #124	@ 0x7c
 8020756:	480c      	ldr	r0, [pc, #48]	@ (8020788 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8020758:	f00a fb48 	bl	802adec <__assert_func>
 802075c:	2008745c 	.word	0x2008745c
 8020760:	0801176d 	.word	0x0801176d
 8020764:	0801457f 	.word	0x0801457f
 8020768:	20087456 	.word	0x20087456
 802076c:	fffff800 	.word	0xfffff800
 8020770:	200875c8 	.word	0x200875c8
 8020774:	0802de94 	.word	0x0802de94
 8020778:	0802ead0 	.word	0x0802ead0
 802077c:	0802de70 	.word	0x0802de70
 8020780:	0802ddcc 	.word	0x0802ddcc
 8020784:	0802e638 	.word	0x0802e638
 8020788:	0802ddf4 	.word	0x0802ddf4

0802078c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 802078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020790:	4693      	mov	fp, r2
 8020792:	7812      	ldrb	r2, [r2, #0]
 8020794:	b08d      	sub	sp, #52	@ 0x34
 8020796:	2a01      	cmp	r2, #1
 8020798:	f89d 705c 	ldrb.w	r7, [sp, #92]	@ 0x5c
 802079c:	f040 8252 	bne.w	8020c44 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4b8>
 80207a0:	b917      	cbnz	r7, 80207a8 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 80207a2:	b00d      	add	sp, #52	@ 0x34
 80207a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207a8:	461e      	mov	r6, r3
 80207aa:	6818      	ldr	r0, [r3, #0]
 80207ac:	460c      	mov	r4, r1
 80207ae:	6859      	ldr	r1, [r3, #4]
 80207b0:	ab08      	add	r3, sp, #32
 80207b2:	c303      	stmia	r3!, {r0, r1}
 80207b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80207b6:	f10b 0b04 	add.w	fp, fp, #4
 80207ba:	6818      	ldr	r0, [r3, #0]
 80207bc:	6859      	ldr	r1, [r3, #4]
 80207be:	ab0a      	add	r3, sp, #40	@ 0x28
 80207c0:	c303      	stmia	r3!, {r0, r1}
 80207c2:	a808      	add	r0, sp, #32
 80207c4:	f7f4 ff98 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80207c8:	4631      	mov	r1, r6
 80207ca:	a80a      	add	r0, sp, #40	@ 0x28
 80207cc:	f7f4 ffbc 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80207d0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80207d4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80207d8:	f003 0201 	and.w	r2, r3, #1
 80207dc:	4615      	mov	r5, r2
 80207de:	9204      	str	r2, [sp, #16]
 80207e0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80207e4:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 80207e8:	442b      	add	r3, r5
 80207ea:	fb02 1303 	mla	r3, r2, r3, r1
 80207ee:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80207f2:	4402      	add	r2, r0
 80207f4:	48b9      	ldr	r0, [pc, #740]	@ (8020adc <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x350>)
 80207f6:	440e      	add	r6, r1
 80207f8:	6800      	ldr	r0, [r0, #0]
 80207fa:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80207fe:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8020802:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8020806:	eb04 0363 	add.w	r3, r4, r3, asr #1
 802080a:	6802      	ldr	r2, [r0, #0]
 802080c:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	@ 0x2c
 8020810:	9301      	str	r3, [sp, #4]
 8020812:	f001 0301 	and.w	r3, r1, #1
 8020816:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8020818:	9303      	str	r3, [sp, #12]
 802081a:	9502      	str	r5, [sp, #8]
 802081c:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	@ 0x2e
 8020820:	4790      	blx	r2
 8020822:	4baf      	ldr	r3, [pc, #700]	@ (8020ae0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x354>)
 8020824:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8020828:	881b      	ldrh	r3, [r3, #0]
 802082a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 802082e:	2fff      	cmp	r7, #255	@ 0xff
 8020830:	fb03 1202 	mla	r2, r3, r2, r1
 8020834:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8020838:	f000 8154 	beq.w	8020ae4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 802083c:	ea6f 0c07 	mvn.w	ip, r7
 8020840:	fb03 f404 	mul.w	r4, r3, r4
 8020844:	eb0a 0344 	add.w	r3, sl, r4, lsl #1
 8020848:	459a      	cmp	sl, r3
 802084a:	9306      	str	r3, [sp, #24]
 802084c:	fa5f fc8c 	uxtb.w	ip, ip
 8020850:	f080 80b6 	bcs.w	80209c0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x234>
 8020854:	1e6b      	subs	r3, r5, #1
 8020856:	b2bf      	uxth	r7, r7
 8020858:	fa1f fc8c 	uxth.w	ip, ip
 802085c:	9307      	str	r3, [sp, #28]
 802085e:	9b03      	ldr	r3, [sp, #12]
 8020860:	2b00      	cmp	r3, #0
 8020862:	f040 80fc 	bne.w	8020a5e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2d2>
 8020866:	9b01      	ldr	r3, [sp, #4]
 8020868:	f8dd 9008 	ldr.w	r9, [sp, #8]
 802086c:	9300      	str	r3, [sp, #0]
 802086e:	f1b9 0f01 	cmp.w	r9, #1
 8020872:	f340 808e 	ble.w	8020992 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x206>
 8020876:	f1a9 0302 	sub.w	r3, r9, #2
 802087a:	ea4f 0953 	mov.w	r9, r3, lsr #1
 802087e:	9305      	str	r3, [sp, #20]
 8020880:	9b00      	ldr	r3, [sp, #0]
 8020882:	f10a 0808 	add.w	r8, sl, #8
 8020886:	eb08 0889 	add.w	r8, r8, r9, lsl #2
 802088a:	f10a 0604 	add.w	r6, sl, #4
 802088e:	f103 3eff 	add.w	lr, r3, #4294967295
 8020892:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8020896:	f836 3c04 	ldrh.w	r3, [r6, #-4]
 802089a:	0909      	lsrs	r1, r1, #4
 802089c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80208a0:	eb0b 0001 	add.w	r0, fp, r1
 80208a4:	7882      	ldrb	r2, [r0, #2]
 80208a6:	7844      	ldrb	r4, [r0, #1]
 80208a8:	00dd      	lsls	r5, r3, #3
 80208aa:	b2ed      	uxtb	r5, r5
 80208ac:	fb12 f207 	smulbb	r2, r2, r7
 80208b0:	fb15 f50c 	smulbb	r5, r5, ip
 80208b4:	fb14 f407 	smulbb	r4, r4, r7
 80208b8:	f81b 1001 	ldrb.w	r1, [fp, r1]
 80208bc:	1218      	asrs	r0, r3, #8
 80208be:	10db      	asrs	r3, r3, #3
 80208c0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80208c4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80208c8:	fb00 200c 	mla	r0, r0, ip, r2
 80208cc:	fb01 5507 	mla	r5, r1, r7, r5
 80208d0:	fb03 440c 	mla	r4, r3, ip, r4
 80208d4:	b281      	uxth	r1, r0
 80208d6:	b2ad      	uxth	r5, r5
 80208d8:	b2a4      	uxth	r4, r4
 80208da:	1c68      	adds	r0, r5, #1
 80208dc:	1c4b      	adds	r3, r1, #1
 80208de:	1c62      	adds	r2, r4, #1
 80208e0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80208e4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80208e8:	eb00 2115 	add.w	r1, r0, r5, lsr #8
 80208ec:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80208f0:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80208f4:	0952      	lsrs	r2, r2, #5
 80208f6:	430b      	orrs	r3, r1
 80208f8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80208fc:	4313      	orrs	r3, r2
 80208fe:	f826 3c04 	strh.w	r3, [r6, #-4]
 8020902:	f89e 1000 	ldrb.w	r1, [lr]
 8020906:	f836 3c02 	ldrh.w	r3, [r6, #-2]
 802090a:	f001 010f 	and.w	r1, r1, #15
 802090e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020912:	eb0b 0001 	add.w	r0, fp, r1
 8020916:	7882      	ldrb	r2, [r0, #2]
 8020918:	00dd      	lsls	r5, r3, #3
 802091a:	7840      	ldrb	r0, [r0, #1]
 802091c:	b2ed      	uxtb	r5, r5
 802091e:	fb12 f207 	smulbb	r2, r2, r7
 8020922:	fb10 f007 	smulbb	r0, r0, r7
 8020926:	fb15 f50c 	smulbb	r5, r5, ip
 802092a:	f81b 1001 	ldrb.w	r1, [fp, r1]
 802092e:	121c      	asrs	r4, r3, #8
 8020930:	10db      	asrs	r3, r3, #3
 8020932:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8020936:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802093a:	fb04 240c 	mla	r4, r4, ip, r2
 802093e:	fb01 5507 	mla	r5, r1, r7, r5
 8020942:	fb03 020c 	mla	r2, r3, ip, r0
 8020946:	b2a1      	uxth	r1, r4
 8020948:	b2ad      	uxth	r5, r5
 802094a:	b290      	uxth	r0, r2
 802094c:	1c4b      	adds	r3, r1, #1
 802094e:	1c6c      	adds	r4, r5, #1
 8020950:	1c42      	adds	r2, r0, #1
 8020952:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020956:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802095a:	eb04 2115 	add.w	r1, r4, r5, lsr #8
 802095e:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8020962:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8020966:	0952      	lsrs	r2, r2, #5
 8020968:	430b      	orrs	r3, r1
 802096a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802096e:	4313      	orrs	r3, r2
 8020970:	f826 3c02 	strh.w	r3, [r6, #-2]
 8020974:	3604      	adds	r6, #4
 8020976:	45b0      	cmp	r8, r6
 8020978:	d18b      	bne.n	8020892 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x106>
 802097a:	9a00      	ldr	r2, [sp, #0]
 802097c:	f109 0301 	add.w	r3, r9, #1
 8020980:	441a      	add	r2, r3
 8020982:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8020986:	9b05      	ldr	r3, [sp, #20]
 8020988:	ebc9 79c9 	rsb	r9, r9, r9, lsl #31
 802098c:	9200      	str	r2, [sp, #0]
 802098e:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8020992:	f1b9 0f01 	cmp.w	r9, #1
 8020996:	d01b      	beq.n	80209d0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>
 8020998:	9904      	ldr	r1, [sp, #16]
 802099a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802099e:	4a50      	ldr	r2, [pc, #320]	@ (8020ae0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x354>)
 80209a0:	440b      	add	r3, r1
 80209a2:	8812      	ldrh	r2, [r2, #0]
 80209a4:	9902      	ldr	r1, [sp, #8]
 80209a6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80209aa:	1a52      	subs	r2, r2, r1
 80209ac:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 80209b0:	9a01      	ldr	r2, [sp, #4]
 80209b2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80209b6:	9301      	str	r3, [sp, #4]
 80209b8:	9b06      	ldr	r3, [sp, #24]
 80209ba:	4553      	cmp	r3, sl
 80209bc:	f63f af4f 	bhi.w	802085e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xd2>
 80209c0:	4b46      	ldr	r3, [pc, #280]	@ (8020adc <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x350>)
 80209c2:	6818      	ldr	r0, [r3, #0]
 80209c4:	6803      	ldr	r3, [r0, #0]
 80209c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80209c8:	4798      	blx	r3
 80209ca:	b00d      	add	sp, #52	@ 0x34
 80209cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209d0:	9b00      	ldr	r3, [sp, #0]
 80209d2:	781e      	ldrb	r6, [r3, #0]
 80209d4:	f8ba 3000 	ldrh.w	r3, [sl]
 80209d8:	0936      	lsrs	r6, r6, #4
 80209da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80209de:	eb0b 0006 	add.w	r0, fp, r6
 80209e2:	7881      	ldrb	r1, [r0, #2]
 80209e4:	7845      	ldrb	r5, [r0, #1]
 80209e6:	00dc      	lsls	r4, r3, #3
 80209e8:	b2e4      	uxtb	r4, r4
 80209ea:	fb14 f40c 	smulbb	r4, r4, ip
 80209ee:	fb11 f107 	smulbb	r1, r1, r7
 80209f2:	fb15 f507 	smulbb	r5, r5, r7
 80209f6:	f81b 0006 	ldrb.w	r0, [fp, r6]
 80209fa:	121a      	asrs	r2, r3, #8
 80209fc:	10db      	asrs	r3, r3, #3
 80209fe:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020a02:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8020a06:	fb00 4007 	mla	r0, r0, r7, r4
 8020a0a:	fb02 120c 	mla	r2, r2, ip, r1
 8020a0e:	fb03 530c 	mla	r3, r3, ip, r5
 8020a12:	b291      	uxth	r1, r2
 8020a14:	b29b      	uxth	r3, r3
 8020a16:	b280      	uxth	r0, r0
 8020a18:	1c4a      	adds	r2, r1, #1
 8020a1a:	1c5d      	adds	r5, r3, #1
 8020a1c:	1c44      	adds	r4, r0, #1
 8020a1e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020a22:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020a26:	eb05 2113 	add.w	r1, r5, r3, lsr #8
 8020a2a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020a2e:	f402 4378 	and.w	r3, r2, #63488	@ 0xf800
 8020a32:	094a      	lsrs	r2, r1, #5
 8020a34:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020a38:	4303      	orrs	r3, r0
 8020a3a:	4313      	orrs	r3, r2
 8020a3c:	f8aa 3000 	strh.w	r3, [sl]
 8020a40:	4b27      	ldr	r3, [pc, #156]	@ (8020ae0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x354>)
 8020a42:	9902      	ldr	r1, [sp, #8]
 8020a44:	881a      	ldrh	r2, [r3, #0]
 8020a46:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8020a4a:	1a52      	subs	r2, r2, r1
 8020a4c:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8020a50:	9a04      	ldr	r2, [sp, #16]
 8020a52:	f10a 0a02 	add.w	sl, sl, #2
 8020a56:	4413      	add	r3, r2
 8020a58:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8020a5c:	e7a8      	b.n	80209b0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x224>
 8020a5e:	9b01      	ldr	r3, [sp, #4]
 8020a60:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020a64:	781e      	ldrb	r6, [r3, #0]
 8020a66:	f8ba 3000 	ldrh.w	r3, [sl]
 8020a6a:	f006 060f 	and.w	r6, r6, #15
 8020a6e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020a72:	eb0b 0006 	add.w	r0, fp, r6
 8020a76:	7881      	ldrb	r1, [r0, #2]
 8020a78:	7845      	ldrb	r5, [r0, #1]
 8020a7a:	00dc      	lsls	r4, r3, #3
 8020a7c:	b2e4      	uxtb	r4, r4
 8020a7e:	fb14 f40c 	smulbb	r4, r4, ip
 8020a82:	fb11 f107 	smulbb	r1, r1, r7
 8020a86:	fb15 f507 	smulbb	r5, r5, r7
 8020a8a:	f81b 0006 	ldrb.w	r0, [fp, r6]
 8020a8e:	121a      	asrs	r2, r3, #8
 8020a90:	10db      	asrs	r3, r3, #3
 8020a92:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020a96:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8020a9a:	fb00 4007 	mla	r0, r0, r7, r4
 8020a9e:	fb02 120c 	mla	r2, r2, ip, r1
 8020aa2:	fb03 530c 	mla	r3, r3, ip, r5
 8020aa6:	b291      	uxth	r1, r2
 8020aa8:	b29b      	uxth	r3, r3
 8020aaa:	b280      	uxth	r0, r0
 8020aac:	1c4a      	adds	r2, r1, #1
 8020aae:	1c5d      	adds	r5, r3, #1
 8020ab0:	1c44      	adds	r4, r0, #1
 8020ab2:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020ab6:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020aba:	eb05 2113 	add.w	r1, r5, r3, lsr #8
 8020abe:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020ac2:	f402 4378 	and.w	r3, r2, #63488	@ 0xf800
 8020ac6:	094a      	lsrs	r2, r1, #5
 8020ac8:	4303      	orrs	r3, r0
 8020aca:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020ace:	4313      	orrs	r3, r2
 8020ad0:	f82a 3b02 	strh.w	r3, [sl], #2
 8020ad4:	9b01      	ldr	r3, [sp, #4]
 8020ad6:	3301      	adds	r3, #1
 8020ad8:	9300      	str	r3, [sp, #0]
 8020ada:	e6c8      	b.n	802086e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xe2>
 8020adc:	2008745c 	.word	0x2008745c
 8020ae0:	20087456 	.word	0x20087456
 8020ae4:	fb03 f304 	mul.w	r3, r3, r4
 8020ae8:	eb0a 0843 	add.w	r8, sl, r3, lsl #1
 8020aec:	45c2      	cmp	sl, r8
 8020aee:	f4bf af67 	bcs.w	80209c0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x234>
 8020af2:	9b02      	ldr	r3, [sp, #8]
 8020af4:	4f57      	ldr	r7, [pc, #348]	@ (8020c54 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4c8>)
 8020af6:	3b01      	subs	r3, #1
 8020af8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020afc:	9300      	str	r3, [sp, #0]
 8020afe:	9b03      	ldr	r3, [sp, #12]
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	f000 808a 	beq.w	8020c1a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x48e>
 8020b06:	f899 2000 	ldrb.w	r2, [r9]
 8020b0a:	9e00      	ldr	r6, [sp, #0]
 8020b0c:	f002 020f 	and.w	r2, r2, #15
 8020b10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b14:	eb0b 0302 	add.w	r3, fp, r2
 8020b18:	7859      	ldrb	r1, [r3, #1]
 8020b1a:	789b      	ldrb	r3, [r3, #2]
 8020b1c:	00c9      	lsls	r1, r1, #3
 8020b1e:	f81b 0002 	ldrb.w	r0, [fp, r2]
 8020b22:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 8020b26:	f401 62fc 	and.w	r2, r1, #2016	@ 0x7e0
 8020b2a:	4313      	orrs	r3, r2
 8020b2c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8020b30:	f109 0e01 	add.w	lr, r9, #1
 8020b34:	f82a 3b02 	strh.w	r3, [sl], #2
 8020b38:	2e01      	cmp	r6, #1
 8020b3a:	dd40      	ble.n	8020bbe <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x432>
 8020b3c:	3e02      	subs	r6, #2
 8020b3e:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 8020b42:	f10a 0508 	add.w	r5, sl, #8
 8020b46:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8020b4a:	f10a 0004 	add.w	r0, sl, #4
 8020b4e:	f10e 34ff 	add.w	r4, lr, #4294967295
 8020b52:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8020b56:	3004      	adds	r0, #4
 8020b58:	0912      	lsrs	r2, r2, #4
 8020b5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b5e:	eb0b 0302 	add.w	r3, fp, r2
 8020b62:	7859      	ldrb	r1, [r3, #1]
 8020b64:	789b      	ldrb	r3, [r3, #2]
 8020b66:	00c9      	lsls	r1, r1, #3
 8020b68:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8020b6c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020b70:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 8020b74:	430b      	orrs	r3, r1
 8020b76:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8020b7a:	f820 3c08 	strh.w	r3, [r0, #-8]
 8020b7e:	7822      	ldrb	r2, [r4, #0]
 8020b80:	f002 020f 	and.w	r2, r2, #15
 8020b84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b88:	eb0b 0302 	add.w	r3, fp, r2
 8020b8c:	7859      	ldrb	r1, [r3, #1]
 8020b8e:	789b      	ldrb	r3, [r3, #2]
 8020b90:	00c9      	lsls	r1, r1, #3
 8020b92:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8020b96:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8020b9a:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 8020b9e:	430b      	orrs	r3, r1
 8020ba0:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8020ba4:	f820 3c06 	strh.w	r3, [r0, #-6]
 8020ba8:	4285      	cmp	r5, r0
 8020baa:	d1d2      	bne.n	8020b52 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c6>
 8020bac:	f10c 0301 	add.w	r3, ip, #1
 8020bb0:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
 8020bb4:	449e      	add	lr, r3
 8020bb6:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8020bba:	eb06 064c 	add.w	r6, r6, ip, lsl #1
 8020bbe:	2e01      	cmp	r6, #1
 8020bc0:	d12e      	bne.n	8020c20 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x494>
 8020bc2:	f89e 2000 	ldrb.w	r2, [lr]
 8020bc6:	0912      	lsrs	r2, r2, #4
 8020bc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020bcc:	eb0b 0302 	add.w	r3, fp, r2
 8020bd0:	7859      	ldrb	r1, [r3, #1]
 8020bd2:	789b      	ldrb	r3, [r3, #2]
 8020bd4:	00c9      	lsls	r1, r1, #3
 8020bd6:	f81b 0002 	ldrb.w	r0, [fp, r2]
 8020bda:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 8020bde:	f401 62fc 	and.w	r2, r1, #2016	@ 0x7e0
 8020be2:	4313      	orrs	r3, r2
 8020be4:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8020be8:	f8aa 3000 	strh.w	r3, [sl]
 8020bec:	4b1a      	ldr	r3, [pc, #104]	@ (8020c58 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4cc>)
 8020bee:	9902      	ldr	r1, [sp, #8]
 8020bf0:	881a      	ldrh	r2, [r3, #0]
 8020bf2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8020bf6:	1a52      	subs	r2, r2, r1
 8020bf8:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8020bfc:	9a04      	ldr	r2, [sp, #16]
 8020bfe:	f10a 0a02 	add.w	sl, sl, #2
 8020c02:	4413      	add	r3, r2
 8020c04:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8020c08:	45d0      	cmp	r8, sl
 8020c0a:	eb09 0963 	add.w	r9, r9, r3, asr #1
 8020c0e:	f67f aed7 	bls.w	80209c0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x234>
 8020c12:	9b03      	ldr	r3, [sp, #12]
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	f47f af76 	bne.w	8020b06 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x37a>
 8020c1a:	46ce      	mov	lr, r9
 8020c1c:	9e02      	ldr	r6, [sp, #8]
 8020c1e:	e78b      	b.n	8020b38 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3ac>
 8020c20:	9904      	ldr	r1, [sp, #16]
 8020c22:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8020c26:	4a0c      	ldr	r2, [pc, #48]	@ (8020c58 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4cc>)
 8020c28:	440b      	add	r3, r1
 8020c2a:	8812      	ldrh	r2, [r2, #0]
 8020c2c:	9902      	ldr	r1, [sp, #8]
 8020c2e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8020c32:	1a52      	subs	r2, r2, r1
 8020c34:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8020c38:	45d0      	cmp	r8, sl
 8020c3a:	eb09 0963 	add.w	r9, r9, r3, asr #1
 8020c3e:	f63f af5e 	bhi.w	8020afe <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x372>
 8020c42:	e6bd      	b.n	80209c0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x234>
 8020c44:	4b05      	ldr	r3, [pc, #20]	@ (8020c5c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4d0>)
 8020c46:	4a06      	ldr	r2, [pc, #24]	@ (8020c60 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4d4>)
 8020c48:	f44f 61e9 	mov.w	r1, #1864	@ 0x748
 8020c4c:	4805      	ldr	r0, [pc, #20]	@ (8020c64 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4d8>)
 8020c4e:	f00a f8cd 	bl	802adec <__assert_func>
 8020c52:	bf00      	nop
 8020c54:	fffff800 	.word	0xfffff800
 8020c58:	20087456 	.word	0x20087456
 8020c5c:	0802df34 	.word	0x0802df34
 8020c60:	0802ee0c 	.word	0x0802ee0c
 8020c64:	0802de70 	.word	0x0802de70

08020c68 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8020c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c6c:	b08f      	sub	sp, #60	@ 0x3c
 8020c6e:	7814      	ldrb	r4, [r2, #0]
 8020c70:	461d      	mov	r5, r3
 8020c72:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8020c76:	2c01      	cmp	r4, #1
 8020c78:	9206      	str	r2, [sp, #24]
 8020c7a:	9101      	str	r1, [sp, #4]
 8020c7c:	9304      	str	r3, [sp, #16]
 8020c7e:	f040 8142 	bne.w	8020f06 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29e>
 8020c82:	b913      	cbnz	r3, 8020c8a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8020c84:	b00f      	add	sp, #60	@ 0x3c
 8020c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c8a:	6828      	ldr	r0, [r5, #0]
 8020c8c:	6869      	ldr	r1, [r5, #4]
 8020c8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8020c90:	c303      	stmia	r3!, {r0, r1}
 8020c92:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020c94:	6818      	ldr	r0, [r3, #0]
 8020c96:	6859      	ldr	r1, [r3, #4]
 8020c98:	ab0c      	add	r3, sp, #48	@ 0x30
 8020c9a:	c303      	stmia	r3!, {r0, r1}
 8020c9c:	a80a      	add	r0, sp, #40	@ 0x28
 8020c9e:	f7f4 fd2b 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020ca2:	4629      	mov	r1, r5
 8020ca4:	a80c      	add	r0, sp, #48	@ 0x30
 8020ca6:	f7f4 fd4f 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020caa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020cae:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8020cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020cb6:	bfdd      	ittte	le
 8020cb8:	f44f 6480 	movle.w	r4, #1024	@ 0x400
 8020cbc:	b29a      	uxthle	r2, r3
 8020cbe:	fb94 f4f2 	sdivle	r4, r4, r2
 8020cc2:	b29a      	uxthgt	r2, r3
 8020cc4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8020cc8:	fb93 f0f4 	sdiv	r0, r3, r4
 8020ccc:	b285      	uxth	r5, r0
 8020cce:	fb04 3c15 	mls	ip, r4, r5, r3
 8020cd2:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8020cd6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8020cda:	fa1f fb8c 	uxth.w	fp, ip
 8020cde:	4422      	add	r2, r4
 8020ce0:	3a01      	subs	r2, #1
 8020ce2:	fb92 f4f4 	sdiv	r4, r2, r4
 8020ce6:	2d00      	cmp	r5, #0
 8020ce8:	f040 8105 	bne.w	8020ef6 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28e>
 8020cec:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8020cf0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8020cf4:	4413      	add	r3, r2
 8020cf6:	4a87      	ldr	r2, [pc, #540]	@ (8020f14 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8020cf8:	4401      	add	r1, r0
 8020cfa:	6810      	ldr	r0, [r2, #0]
 8020cfc:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8020d00:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8020d04:	4616      	mov	r6, r2
 8020d06:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020d0a:	6803      	ldr	r3, [r0, #0]
 8020d0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8020d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020d10:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8020d14:	4798      	blx	r3
 8020d16:	9f04      	ldr	r7, [sp, #16]
 8020d18:	f1bb 0f00 	cmp.w	fp, #0
 8020d1c:	bf0c      	ite	eq
 8020d1e:	4633      	moveq	r3, r6
 8020d20:	2300      	movne	r3, #0
 8020d22:	ea6f 0807 	mvn.w	r8, r7
 8020d26:	497c      	ldr	r1, [pc, #496]	@ (8020f18 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2b0>)
 8020d28:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020d2c:	8809      	ldrh	r1, [r1, #0]
 8020d2e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	@ 0x30
 8020d32:	fb01 f505 	mul.w	r5, r1, r5
 8020d36:	fb01 6202 	mla	r2, r1, r2, r6
 8020d3a:	b2a4      	uxth	r4, r4
 8020d3c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020d40:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8020d44:	00a4      	lsls	r4, r4, #2
 8020d46:	1d21      	adds	r1, r4, #4
 8020d48:	4290      	cmp	r0, r2
 8020d4a:	9202      	str	r2, [sp, #8]
 8020d4c:	9108      	str	r1, [sp, #32]
 8020d4e:	fa1f fa83 	uxth.w	sl, r3
 8020d52:	fa5f f888 	uxtb.w	r8, r8
 8020d56:	d228      	bcs.n	8020daa <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x142>
 8020d58:	2300      	movs	r3, #0
 8020d5a:	469c      	mov	ip, r3
 8020d5c:	9303      	str	r3, [sp, #12]
 8020d5e:	fa1f f888 	uxth.w	r8, r8
 8020d62:	fa1f f987 	uxth.w	r9, r7
 8020d66:	f1bc 0f00 	cmp.w	ip, #0
 8020d6a:	d10f      	bne.n	8020d8c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x124>
 8020d6c:	9901      	ldr	r1, [sp, #4]
 8020d6e:	780a      	ldrb	r2, [r1, #0]
 8020d70:	ea4f 1c92 	mov.w	ip, r2, lsr #6
 8020d74:	f10c 33ff 	add.w	r3, ip, #4294967295
 8020d78:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8020d7c:	2b02      	cmp	r3, #2
 8020d7e:	9203      	str	r2, [sp, #12]
 8020d80:	f200 80b3 	bhi.w	8020eea <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x282>
 8020d84:	3101      	adds	r1, #1
 8020d86:	9101      	str	r1, [sp, #4]
 8020d88:	fa1f fc8c 	uxth.w	ip, ip
 8020d8c:	f1bb 0f00 	cmp.w	fp, #0
 8020d90:	d013      	beq.n	8020dba <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x152>
 8020d92:	45dc      	cmp	ip, fp
 8020d94:	f080 80a0 	bcs.w	8020ed8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x270>
 8020d98:	ebab 0c0c 	sub.w	ip, fp, ip
 8020d9c:	fa1f fb8c 	uxth.w	fp, ip
 8020da0:	f04f 0c00 	mov.w	ip, #0
 8020da4:	9b02      	ldr	r3, [sp, #8]
 8020da6:	4283      	cmp	r3, r0
 8020da8:	d8dd      	bhi.n	8020d66 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xfe>
 8020daa:	4b5a      	ldr	r3, [pc, #360]	@ (8020f14 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8020dac:	6818      	ldr	r0, [r3, #0]
 8020dae:	6803      	ldr	r3, [r0, #0]
 8020db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020db2:	4798      	blx	r3
 8020db4:	b00f      	add	sp, #60	@ 0x3c
 8020db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dba:	2303      	movs	r3, #3
 8020dbc:	4619      	mov	r1, r3
 8020dbe:	9a08      	ldr	r2, [sp, #32]
 8020dc0:	9b03      	ldr	r3, [sp, #12]
 8020dc2:	45d4      	cmp	ip, sl
 8020dc4:	fb11 2703 	smlabb	r7, r1, r3, r2
 8020dc8:	9b06      	ldr	r3, [sp, #24]
 8020dca:	441f      	add	r7, r3
 8020dcc:	d362      	bcc.n	8020e94 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x22c>
 8020dce:	ebac 030a 	sub.w	r3, ip, sl
 8020dd2:	b29b      	uxth	r3, r3
 8020dd4:	9305      	str	r3, [sp, #20]
 8020dd6:	9b04      	ldr	r3, [sp, #16]
 8020dd8:	4654      	mov	r4, sl
 8020dda:	2bff      	cmp	r3, #255	@ 0xff
 8020ddc:	f8cd b01c 	str.w	fp, [sp, #28]
 8020de0:	d062      	beq.n	8020ea8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 8020de2:	2c00      	cmp	r4, #0
 8020de4:	d038      	beq.n	8020e58 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1f0>
 8020de6:	f104 3eff 	add.w	lr, r4, #4294967295
 8020dea:	fa1f fe8e 	uxth.w	lr, lr
 8020dee:	f10e 0e01 	add.w	lr, lr, #1
 8020df2:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8020df6:	8802      	ldrh	r2, [r0, #0]
 8020df8:	78bd      	ldrb	r5, [r7, #2]
 8020dfa:	00d4      	lsls	r4, r2, #3
 8020dfc:	7879      	ldrb	r1, [r7, #1]
 8020dfe:	b2e4      	uxtb	r4, r4
 8020e00:	fb14 f408 	smulbb	r4, r4, r8
 8020e04:	fb15 f509 	smulbb	r5, r5, r9
 8020e08:	fb11 f109 	smulbb	r1, r1, r9
 8020e0c:	783e      	ldrb	r6, [r7, #0]
 8020e0e:	1213      	asrs	r3, r2, #8
 8020e10:	10d2      	asrs	r2, r2, #3
 8020e12:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8020e16:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8020e1a:	fb06 4409 	mla	r4, r6, r9, r4
 8020e1e:	fb03 5308 	mla	r3, r3, r8, r5
 8020e22:	fb02 1208 	mla	r2, r2, r8, r1
 8020e26:	b2a4      	uxth	r4, r4
 8020e28:	b291      	uxth	r1, r2
 8020e2a:	b29d      	uxth	r5, r3
 8020e2c:	1c62      	adds	r2, r4, #1
 8020e2e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8020e32:	1c6b      	adds	r3, r5, #1
 8020e34:	1c4a      	adds	r2, r1, #1
 8020e36:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8020e3a:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8020e3e:	f3c4 21c4 	ubfx	r1, r4, #11, #5
 8020e42:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8020e46:	0952      	lsrs	r2, r2, #5
 8020e48:	430b      	orrs	r3, r1
 8020e4a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020e4e:	4313      	orrs	r3, r2
 8020e50:	f820 3b02 	strh.w	r3, [r0], #2
 8020e54:	4570      	cmp	r0, lr
 8020e56:	d1ce      	bne.n	8020df6 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18e>
 8020e58:	45d4      	cmp	ip, sl
 8020e5a:	d316      	bcc.n	8020e8a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 8020e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020e5e:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 8020e62:	4b2d      	ldr	r3, [pc, #180]	@ (8020f18 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2b0>)
 8020e64:	fa1f fa82 	uxth.w	sl, r2
 8020e68:	ebab 0b0a 	sub.w	fp, fp, sl
 8020e6c:	881b      	ldrh	r3, [r3, #0]
 8020e6e:	fa1f fb8b 	uxth.w	fp, fp
 8020e72:	f1bb 0f00 	cmp.w	fp, #0
 8020e76:	eba3 0302 	sub.w	r3, r3, r2
 8020e7a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8020e7e:	bf18      	it	ne
 8020e80:	f04f 0a00 	movne.w	sl, #0
 8020e84:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020e88:	e78c      	b.n	8020da4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8020e8a:	f8dd c014 	ldr.w	ip, [sp, #20]
 8020e8e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020e92:	e787      	b.n	8020da4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8020e94:	ebaa 020c 	sub.w	r2, sl, ip
 8020e98:	b293      	uxth	r3, r2
 8020e9a:	9307      	str	r3, [sp, #28]
 8020e9c:	9b04      	ldr	r3, [sp, #16]
 8020e9e:	4664      	mov	r4, ip
 8020ea0:	2bff      	cmp	r3, #255	@ 0xff
 8020ea2:	f8cd b014 	str.w	fp, [sp, #20]
 8020ea6:	d19c      	bne.n	8020de2 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 8020ea8:	2c00      	cmp	r4, #0
 8020eaa:	d0d5      	beq.n	8020e58 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1f0>
 8020eac:	3c01      	subs	r4, #1
 8020eae:	b2a4      	uxth	r4, r4
 8020eb0:	3401      	adds	r4, #1
 8020eb2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020eb6:	787a      	ldrb	r2, [r7, #1]
 8020eb8:	78bb      	ldrb	r3, [r7, #2]
 8020eba:	4918      	ldr	r1, [pc, #96]	@ (8020f1c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2b4>)
 8020ebc:	00d2      	lsls	r2, r2, #3
 8020ebe:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8020ec2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020ec6:	7839      	ldrb	r1, [r7, #0]
 8020ec8:	4313      	orrs	r3, r2
 8020eca:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8020ece:	f820 3b02 	strh.w	r3, [r0], #2
 8020ed2:	42a0      	cmp	r0, r4
 8020ed4:	d1ef      	bne.n	8020eb6 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x24e>
 8020ed6:	e7bf      	b.n	8020e58 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1f0>
 8020ed8:	ebac 0c0b 	sub.w	ip, ip, fp
 8020edc:	fa1f fc8c 	uxth.w	ip, ip
 8020ee0:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 8020ee4:	f04f 0b00 	mov.w	fp, #0
 8020ee8:	e75c      	b.n	8020da4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8020eea:	460b      	mov	r3, r1
 8020eec:	3302      	adds	r3, #2
 8020eee:	f891 c001 	ldrb.w	ip, [r1, #1]
 8020ef2:	9301      	str	r3, [sp, #4]
 8020ef4:	e74a      	b.n	8020d8c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x124>
 8020ef6:	9a06      	ldr	r2, [sp, #24]
 8020ef8:	9801      	ldr	r0, [sp, #4]
 8020efa:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8020efe:	ba12      	rev	r2, r2
 8020f00:	4410      	add	r0, r2
 8020f02:	9001      	str	r0, [sp, #4]
 8020f04:	e6f2      	b.n	8020cec <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x84>
 8020f06:	4b06      	ldr	r3, [pc, #24]	@ (8020f20 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2b8>)
 8020f08:	4a06      	ldr	r2, [pc, #24]	@ (8020f24 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2bc>)
 8020f0a:	f240 71c2 	movw	r1, #1986	@ 0x7c2
 8020f0e:	4806      	ldr	r0, [pc, #24]	@ (8020f28 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2c0>)
 8020f10:	f009 ff6c 	bl	802adec <__assert_func>
 8020f14:	2008745c 	.word	0x2008745c
 8020f18:	20087456 	.word	0x20087456
 8020f1c:	fffff800 	.word	0xfffff800
 8020f20:	0802df34 	.word	0x0802df34
 8020f24:	0802efb0 	.word	0x0802efb0
 8020f28:	0802de70 	.word	0x0802de70

08020f2c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8020f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f30:	b09d      	sub	sp, #116	@ 0x74
 8020f32:	7814      	ldrb	r4, [r2, #0]
 8020f34:	461d      	mov	r5, r3
 8020f36:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8020f3a:	2c01      	cmp	r4, #1
 8020f3c:	9211      	str	r2, [sp, #68]	@ 0x44
 8020f3e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020f40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020f42:	f040 820a 	bne.w	802135a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x42e>
 8020f46:	b913      	cbnz	r3, 8020f4e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8020f48:	b01d      	add	sp, #116	@ 0x74
 8020f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f4e:	6869      	ldr	r1, [r5, #4]
 8020f50:	4683      	mov	fp, r0
 8020f52:	6828      	ldr	r0, [r5, #0]
 8020f54:	ab18      	add	r3, sp, #96	@ 0x60
 8020f56:	c303      	stmia	r3!, {r0, r1}
 8020f58:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020f5a:	6818      	ldr	r0, [r3, #0]
 8020f5c:	6859      	ldr	r1, [r3, #4]
 8020f5e:	ab1a      	add	r3, sp, #104	@ 0x68
 8020f60:	c303      	stmia	r3!, {r0, r1}
 8020f62:	a818      	add	r0, sp, #96	@ 0x60
 8020f64:	f7f4 fbc8 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f68:	4629      	mov	r1, r5
 8020f6a:	a81a      	add	r0, sp, #104	@ 0x68
 8020f6c:	f7f4 fbec 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f70:	f9bd 6064 	ldrsh.w	r6, [sp, #100]	@ 0x64
 8020f74:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020f78:	f340 814b 	ble.w	8021212 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2e6>
 8020f7c:	b2b0      	uxth	r0, r6
 8020f7e:	9416      	str	r4, [sp, #88]	@ 0x58
 8020f80:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	@ 0x6a
 8020f84:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	@ 0x66
 8020f88:	fb93 f1f4 	sdiv	r1, r3, r4
 8020f8c:	4422      	add	r2, r4
 8020f8e:	3a01      	subs	r2, #1
 8020f90:	fb92 f2f4 	sdiv	r2, r2, r4
 8020f94:	b289      	uxth	r1, r1
 8020f96:	fb04 3411 	mls	r4, r4, r1, r3
 8020f9a:	9114      	str	r1, [sp, #80]	@ 0x50
 8020f9c:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8020fa0:	f8bd 7060 	ldrh.w	r7, [sp, #96]	@ 0x60
 8020fa4:	fb14 1600 	smlabb	r6, r4, r0, r1
 8020fa8:	f8bd 5062 	ldrh.w	r5, [sp, #98]	@ 0x62
 8020fac:	48a4      	ldr	r0, [pc, #656]	@ (8021240 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x314>)
 8020fae:	4439      	add	r1, r7
 8020fb0:	442b      	add	r3, r5
 8020fb2:	6800      	ldr	r0, [r0, #0]
 8020fb4:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8020fb8:	f8ad 306a 	strh.w	r3, [sp, #106]	@ 0x6a
 8020fbc:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	@ 0x6c
 8020fc0:	6803      	ldr	r3, [r0, #0]
 8020fc2:	b2b5      	uxth	r5, r6
 8020fc4:	3201      	adds	r2, #1
 8020fc6:	9501      	str	r5, [sp, #4]
 8020fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020fca:	970b      	str	r7, [sp, #44]	@ 0x2c
 8020fcc:	b294      	uxth	r4, r2
 8020fce:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8020fd2:	4798      	blx	r3
 8020fd4:	2100      	movs	r1, #0
 8020fd6:	2d00      	cmp	r5, #0
 8020fd8:	4d9a      	ldr	r5, [pc, #616]	@ (8021244 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x318>)
 8020fda:	bf08      	it	eq
 8020fdc:	463a      	moveq	r2, r7
 8020fde:	882d      	ldrh	r5, [r5, #0]
 8020fe0:	9112      	str	r1, [sp, #72]	@ 0x48
 8020fe2:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8020fe6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8020fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020fec:	fb05 7101 	mla	r1, r5, r1, r7
 8020ff0:	ea6f 0c03 	mvn.w	ip, r3
 8020ff4:	fb05 f306 	mul.w	r3, r5, r6
 8020ff8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020ffc:	9100      	str	r1, [sp, #0]
 8020ffe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8021002:	f10b 030e 	add.w	r3, fp, #14
 8021006:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021008:	465b      	mov	r3, fp
 802100a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802100c:	bf18      	it	ne
 802100e:	2200      	movne	r2, #0
 8021010:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8021014:	f104 0904 	add.w	r9, r4, #4
 8021018:	46cb      	mov	fp, r9
 802101a:	4699      	mov	r9, r3
 802101c:	460b      	mov	r3, r1
 802101e:	b292      	uxth	r2, r2
 8021020:	9202      	str	r2, [sp, #8]
 8021022:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8021026:	fa5f f28c 	uxtb.w	r2, ip
 802102a:	9107      	str	r1, [sp, #28]
 802102c:	9215      	str	r2, [sp, #84]	@ 0x54
 802102e:	9a00      	ldr	r2, [sp, #0]
 8021030:	4293      	cmp	r3, r2
 8021032:	f240 80fd 	bls.w	8021230 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x304>
 8021036:	9a01      	ldr	r2, [sp, #4]
 8021038:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 802103c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021042:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021044:	2701      	movs	r7, #1
 8021046:	fa11 f482 	uxtah	r4, r1, r2
 802104a:	00a4      	lsls	r4, r4, #2
 802104c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802104e:	3404      	adds	r4, #4
 8021050:	1911      	adds	r1, r2, r4
 8021052:	788a      	ldrb	r2, [r1, #2]
 8021054:	784d      	ldrb	r5, [r1, #1]
 8021056:	0212      	lsls	r2, r2, #8
 8021058:	78c9      	ldrb	r1, [r1, #3]
 802105a:	ea42 4005 	orr.w	r0, r2, r5, lsl #16
 802105e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021060:	4308      	orrs	r0, r1
 8021062:	4629      	mov	r1, r5
 8021064:	2600      	movs	r6, #0
 8021066:	4401      	add	r1, r0
 8021068:	784a      	ldrb	r2, [r1, #1]
 802106a:	5c28      	ldrb	r0, [r5, r0]
 802106c:	0212      	lsls	r2, r2, #8
 802106e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021070:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8021074:	4302      	orrs	r2, r0
 8021076:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021078:	5d2c      	ldrb	r4, [r5, r4]
 802107a:	f889 200d 	strb.w	r2, [r9, #13]
 802107e:	b292      	uxth	r2, r2
 8021080:	1ac3      	subs	r3, r0, r3
 8021082:	9209      	str	r2, [sp, #36]	@ 0x24
 8021084:	19ca      	adds	r2, r1, r7
 8021086:	9205      	str	r2, [sp, #20]
 8021088:	b29b      	uxth	r3, r3
 802108a:	19e2      	adds	r2, r4, r7
 802108c:	f8bd e054 	ldrh.w	lr, [sp, #84]	@ 0x54
 8021090:	960e      	str	r6, [sp, #56]	@ 0x38
 8021092:	970a      	str	r7, [sp, #40]	@ 0x28
 8021094:	940d      	str	r4, [sp, #52]	@ 0x34
 8021096:	9206      	str	r2, [sp, #24]
 8021098:	9310      	str	r3, [sp, #64]	@ 0x40
 802109a:	9704      	str	r7, [sp, #16]
 802109c:	9b01      	ldr	r3, [sp, #4]
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d034      	beq.n	802110c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1e0>
 80210a2:	42bb      	cmp	r3, r7
 80210a4:	f240 811a 	bls.w	80212dc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3b0>
 80210a8:	1bdf      	subs	r7, r3, r7
 80210aa:	b2bb      	uxth	r3, r7
 80210ac:	9301      	str	r3, [sp, #4]
 80210ae:	9a00      	ldr	r2, [sp, #0]
 80210b0:	9b07      	ldr	r3, [sp, #28]
 80210b2:	4293      	cmp	r3, r2
 80210b4:	f240 80bc 	bls.w	8021230 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x304>
 80210b8:	9805      	ldr	r0, [sp, #20]
 80210ba:	9c04      	ldr	r4, [sp, #16]
 80210bc:	7842      	ldrb	r2, [r0, #1]
 80210be:	f1c4 0107 	rsb	r1, r4, #7
 80210c2:	7803      	ldrb	r3, [r0, #0]
 80210c4:	408a      	lsls	r2, r1
 80210c6:	0052      	lsls	r2, r2, #1
 80210c8:	4123      	asrs	r3, r4
 80210ca:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80210ce:	1c61      	adds	r1, r4, #1
 80210d0:	b2db      	uxtb	r3, r3
 80210d2:	4313      	orrs	r3, r2
 80210d4:	b2ca      	uxtb	r2, r1
 80210d6:	4611      	mov	r1, r2
 80210d8:	2908      	cmp	r1, #8
 80210da:	9204      	str	r2, [sp, #16]
 80210dc:	b29a      	uxth	r2, r3
 80210de:	f000 8107 	beq.w	80212f0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c4>
 80210e2:	3001      	adds	r0, #1
 80210e4:	9005      	str	r0, [sp, #20]
 80210e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80210e8:	4291      	cmp	r1, r2
 80210ea:	f0c0 80d9 	bcc.w	80212a0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x374>
 80210ee:	2701      	movs	r7, #1
 80210f0:	b2db      	uxtb	r3, r3
 80210f2:	f889 300d 	strb.w	r3, [r9, #13]
 80210f6:	9906      	ldr	r1, [sp, #24]
 80210f8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80210fc:	f0c0 80fe 	bcc.w	80212fc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3d0>
 8021100:	9b01      	ldr	r3, [sp, #4]
 8021102:	e9cd 2709 	strd	r2, r7, [sp, #36]	@ 0x24
 8021106:	2600      	movs	r6, #0
 8021108:	2b00      	cmp	r3, #0
 802110a:	d1ca      	bne.n	80210a2 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x176>
 802110c:	9b02      	ldr	r3, [sp, #8]
 802110e:	429f      	cmp	r7, r3
 8021110:	461a      	mov	r2, r3
 8021112:	f0c0 8099 	bcc.w	8021248 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x31c>
 8021116:	1afb      	subs	r3, r7, r3
 8021118:	b29b      	uxth	r3, r3
 802111a:	9308      	str	r3, [sp, #32]
 802111c:	9b01      	ldr	r3, [sp, #4]
 802111e:	9203      	str	r2, [sp, #12]
 8021120:	930c      	str	r3, [sp, #48]	@ 0x30
 8021122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021124:	2bff      	cmp	r3, #255	@ 0xff
 8021126:	9b03      	ldr	r3, [sp, #12]
 8021128:	f000 809a 	beq.w	8021260 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x334>
 802112c:	2b00      	cmp	r3, #0
 802112e:	d049      	beq.n	80211c4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8021130:	eb06 0803 	add.w	r8, r6, r3
 8021134:	f8dd c000 	ldr.w	ip, [sp]
 8021138:	fa1f f888 	uxth.w	r8, r8
 802113c:	eb09 0306 	add.w	r3, r9, r6
 8021140:	7b5c      	ldrb	r4, [r3, #13]
 8021142:	f8bc 3000 	ldrh.w	r3, [ip]
 8021146:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802114a:	eb0b 0204 	add.w	r2, fp, r4
 802114e:	7890      	ldrb	r0, [r2, #2]
 8021150:	7855      	ldrb	r5, [r2, #1]
 8021152:	00d9      	lsls	r1, r3, #3
 8021154:	b2c9      	uxtb	r1, r1
 8021156:	fb11 f10e 	smulbb	r1, r1, lr
 802115a:	fb10 f00a 	smulbb	r0, r0, sl
 802115e:	fb15 f50a 	smulbb	r5, r5, sl
 8021162:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021166:	121a      	asrs	r2, r3, #8
 8021168:	10db      	asrs	r3, r3, #3
 802116a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 802116e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8021172:	fb04 140a 	mla	r4, r4, sl, r1
 8021176:	fb02 020e 	mla	r2, r2, lr, r0
 802117a:	fb03 530e 	mla	r3, r3, lr, r5
 802117e:	b2a4      	uxth	r4, r4
 8021180:	b29b      	uxth	r3, r3
 8021182:	b290      	uxth	r0, r2
 8021184:	1c59      	adds	r1, r3, #1
 8021186:	1c42      	adds	r2, r0, #1
 8021188:	1c65      	adds	r5, r4, #1
 802118a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802118e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021192:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8021196:	f402 4378 	and.w	r3, r2, #63488	@ 0xf800
 802119a:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 802119e:	094a      	lsrs	r2, r1, #5
 80211a0:	3601      	adds	r6, #1
 80211a2:	4323      	orrs	r3, r4
 80211a4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80211a8:	b2b6      	uxth	r6, r6
 80211aa:	4313      	orrs	r3, r2
 80211ac:	4546      	cmp	r6, r8
 80211ae:	f82c 3b02 	strh.w	r3, [ip], #2
 80211b2:	d1c3      	bne.n	802113c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x210>
 80211b4:	9b03      	ldr	r3, [sp, #12]
 80211b6:	9a00      	ldr	r2, [sp, #0]
 80211b8:	3b01      	subs	r3, #1
 80211ba:	b29b      	uxth	r3, r3
 80211bc:	3301      	adds	r3, #1
 80211be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80211c2:	9300      	str	r3, [sp, #0]
 80211c4:	9b02      	ldr	r3, [sp, #8]
 80211c6:	429f      	cmp	r7, r3
 80211c8:	d32b      	bcc.n	8021222 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2f6>
 80211ca:	4b1e      	ldr	r3, [pc, #120]	@ (8021244 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x318>)
 80211cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80211ce:	881b      	ldrh	r3, [r3, #0]
 80211d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80211d2:	1a5b      	subs	r3, r3, r1
 80211d4:	9900      	ldr	r1, [sp, #0]
 80211d6:	3201      	adds	r2, #1
 80211d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80211dc:	9300      	str	r3, [sp, #0]
 80211de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80211e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80211e2:	429a      	cmp	r2, r3
 80211e4:	f000 80a7 	beq.w	8021336 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x40a>
 80211e8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80211ec:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80211f0:	9f08      	ldr	r7, [sp, #32]
 80211f2:	1a9b      	subs	r3, r3, r2
 80211f4:	b29b      	uxth	r3, r3
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	bf14      	ite	ne
 80211fa:	2200      	movne	r2, #0
 80211fc:	2300      	moveq	r3, #0
 80211fe:	9202      	str	r2, [sp, #8]
 8021200:	9301      	str	r3, [sp, #4]
 8021202:	9b07      	ldr	r3, [sp, #28]
 8021204:	9a00      	ldr	r2, [sp, #0]
 8021206:	4293      	cmp	r3, r2
 8021208:	d912      	bls.n	8021230 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x304>
 802120a:	2f00      	cmp	r7, #0
 802120c:	f47f af46 	bne.w	802109c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x170>
 8021210:	e752      	b.n	80210b8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 8021212:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8021216:	b2b0      	uxth	r0, r6
 8021218:	fb94 f4f0 	sdiv	r4, r4, r0
 802121c:	b2a3      	uxth	r3, r4
 802121e:	9316      	str	r3, [sp, #88]	@ 0x58
 8021220:	e6ae      	b.n	8020f80 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x54>
 8021222:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021224:	9a00      	ldr	r2, [sp, #0]
 8021226:	9302      	str	r3, [sp, #8]
 8021228:	9b07      	ldr	r3, [sp, #28]
 802122a:	9f08      	ldr	r7, [sp, #32]
 802122c:	4293      	cmp	r3, r2
 802122e:	d8ec      	bhi.n	802120a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2de>
 8021230:	4b03      	ldr	r3, [pc, #12]	@ (8021240 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x314>)
 8021232:	6818      	ldr	r0, [r3, #0]
 8021234:	6803      	ldr	r3, [r0, #0]
 8021236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021238:	4798      	blx	r3
 802123a:	b01d      	add	sp, #116	@ 0x74
 802123c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021240:	2008745c 	.word	0x2008745c
 8021244:	20087456 	.word	0x20087456
 8021248:	9b01      	ldr	r3, [sp, #4]
 802124a:	9703      	str	r7, [sp, #12]
 802124c:	9308      	str	r3, [sp, #32]
 802124e:	9b02      	ldr	r3, [sp, #8]
 8021250:	1bdb      	subs	r3, r3, r7
 8021252:	b29b      	uxth	r3, r3
 8021254:	930c      	str	r3, [sp, #48]	@ 0x30
 8021256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021258:	2bff      	cmp	r3, #255	@ 0xff
 802125a:	9b03      	ldr	r3, [sp, #12]
 802125c:	f47f af66 	bne.w	802112c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x200>
 8021260:	2b00      	cmp	r3, #0
 8021262:	d0af      	beq.n	80211c4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8021264:	18f4      	adds	r4, r6, r3
 8021266:	9800      	ldr	r0, [sp, #0]
 8021268:	b2a4      	uxth	r4, r4
 802126a:	eb09 0306 	add.w	r3, r9, r6
 802126e:	7b59      	ldrb	r1, [r3, #13]
 8021270:	4d3d      	ldr	r5, [pc, #244]	@ (8021368 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x43c>)
 8021272:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021276:	eb0b 0301 	add.w	r3, fp, r1
 802127a:	785a      	ldrb	r2, [r3, #1]
 802127c:	789b      	ldrb	r3, [r3, #2]
 802127e:	00d2      	lsls	r2, r2, #3
 8021280:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8021284:	3601      	adds	r6, #1
 8021286:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802128a:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 802128e:	4313      	orrs	r3, r2
 8021290:	b2b6      	uxth	r6, r6
 8021292:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8021296:	42a6      	cmp	r6, r4
 8021298:	f820 3b02 	strh.w	r3, [r0], #2
 802129c:	d1e5      	bne.n	802126a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x33e>
 802129e:	e789      	b.n	80211b4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>
 80212a0:	9b06      	ldr	r3, [sp, #24]
 80212a2:	429a      	cmp	r2, r3
 80212a4:	d32d      	bcc.n	8021302 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3d6>
 80212a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80212a8:	f899 100d 	ldrb.w	r1, [r9, #13]
 80212ac:	eb09 0300 	add.w	r3, r9, r0
 80212b0:	7359      	strb	r1, [r3, #13]
 80212b2:	f899 300d 	ldrb.w	r3, [r9, #13]
 80212b6:	1c41      	adds	r1, r0, #1
 80212b8:	b28f      	uxth	r7, r1
 80212ba:	9c06      	ldr	r4, [sp, #24]
 80212bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80212be:	eb09 0084 	add.w	r0, r9, r4, lsl #2
 80212c2:	3401      	adds	r4, #1
 80212c4:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 80212c8:	b2a3      	uxth	r3, r4
 80212ca:	f8a0 5050 	strh.w	r5, [r0, #80]	@ 0x50
 80212ce:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 80212d2:	9306      	str	r3, [sp, #24]
 80212d4:	e9cd 2709 	strd	r2, r7, [sp, #36]	@ 0x24
 80212d8:	2600      	movs	r6, #0
 80212da:	e6df      	b.n	802109c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x170>
 80212dc:	1aff      	subs	r7, r7, r3
 80212de:	441e      	add	r6, r3
 80212e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80212e4:	b2bf      	uxth	r7, r7
 80212e6:	9302      	str	r3, [sp, #8]
 80212e8:	2300      	movs	r3, #0
 80212ea:	b2b6      	uxth	r6, r6
 80212ec:	9301      	str	r3, [sp, #4]
 80212ee:	e788      	b.n	8021202 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2d6>
 80212f0:	2100      	movs	r1, #0
 80212f2:	9104      	str	r1, [sp, #16]
 80212f4:	9905      	ldr	r1, [sp, #20]
 80212f6:	3102      	adds	r1, #2
 80212f8:	9105      	str	r1, [sp, #20]
 80212fa:	e6f4      	b.n	80210e6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 80212fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80212fe:	3101      	adds	r1, #1
 8021300:	e7db      	b.n	80212ba <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x38e>
 8021302:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8021306:	f893 704f 	ldrb.w	r7, [r3, #79]	@ 0x4f
 802130a:	4613      	mov	r3, r2
 802130c:	2f01      	cmp	r7, #1
 802130e:	d90d      	bls.n	802132c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x400>
 8021310:	f107 010d 	add.w	r1, r7, #13
 8021314:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021316:	4449      	add	r1, r9
 8021318:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 802131c:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8021320:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8021324:	428c      	cmp	r4, r1
 8021326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 802132a:	d1f5      	bne.n	8021318 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3ec>
 802132c:	b2db      	uxtb	r3, r3
 802132e:	f889 300d 	strb.w	r3, [r9, #13]
 8021332:	b2bf      	uxth	r7, r7
 8021334:	e6df      	b.n	80210f6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1ca>
 8021336:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 802133a:	f8bd 2060 	ldrh.w	r2, [sp, #96]	@ 0x60
 802133e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021340:	1a9b      	subs	r3, r3, r2
 8021342:	b29b      	uxth	r3, r3
 8021344:	2b00      	cmp	r3, #0
 8021346:	9301      	str	r3, [sp, #4]
 8021348:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802134a:	bf18      	it	ne
 802134c:	2300      	movne	r3, #0
 802134e:	3101      	adds	r1, #1
 8021350:	b29b      	uxth	r3, r3
 8021352:	9302      	str	r3, [sp, #8]
 8021354:	9112      	str	r1, [sp, #72]	@ 0x48
 8021356:	9b07      	ldr	r3, [sp, #28]
 8021358:	e669      	b.n	802102e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x102>
 802135a:	4b04      	ldr	r3, [pc, #16]	@ (802136c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x440>)
 802135c:	4a04      	ldr	r2, [pc, #16]	@ (8021370 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x444>)
 802135e:	f640 0167 	movw	r1, #2151	@ 0x867
 8021362:	4804      	ldr	r0, [pc, #16]	@ (8021374 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x448>)
 8021364:	f009 fd42 	bl	802adec <__assert_func>
 8021368:	fffff800 	.word	0xfffff800
 802136c:	0802df34 	.word	0x0802df34
 8021370:	0802f304 	.word	0x0802f304
 8021374:	0802de70 	.word	0x0802de70

08021378 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8021378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802137c:	4690      	mov	r8, r2
 802137e:	8812      	ldrh	r2, [r2, #0]
 8021380:	b093      	sub	sp, #76	@ 0x4c
 8021382:	461c      	mov	r4, r3
 8021384:	f89d a074 	ldrb.w	sl, [sp, #116]	@ 0x74
 8021388:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802138a:	2a00      	cmp	r2, #0
 802138c:	f040 80fb 	bne.w	8021586 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8021390:	4689      	mov	r9, r1
 8021392:	6820      	ldr	r0, [r4, #0]
 8021394:	6861      	ldr	r1, [r4, #4]
 8021396:	aa0e      	add	r2, sp, #56	@ 0x38
 8021398:	c203      	stmia	r2!, {r0, r1}
 802139a:	6818      	ldr	r0, [r3, #0]
 802139c:	6859      	ldr	r1, [r3, #4]
 802139e:	aa10      	add	r2, sp, #64	@ 0x40
 80213a0:	c203      	stmia	r2!, {r0, r1}
 80213a2:	a80e      	add	r0, sp, #56	@ 0x38
 80213a4:	f7f4 f9a8 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80213a8:	4621      	mov	r1, r4
 80213aa:	a810      	add	r0, sp, #64	@ 0x40
 80213ac:	f7f4 f9cc 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80213b0:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	@ 0x40
 80213b4:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	@ 0x42
 80213b8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80213bc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80213c0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80213c4:	4873      	ldr	r0, [pc, #460]	@ (8021594 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 80213c6:	fb11 4105 	smlabb	r1, r1, r5, r4
 80213ca:	4422      	add	r2, r4
 80213cc:	442b      	add	r3, r5
 80213ce:	6800      	ldr	r0, [r0, #0]
 80213d0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80213d4:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80213d8:	6802      	ldr	r2, [r0, #0]
 80213da:	4489      	add	r9, r1
 80213dc:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80213e0:	4c6d      	ldr	r4, [pc, #436]	@ (8021598 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x220>)
 80213e2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80213e6:	910a      	str	r1, [sp, #40]	@ 0x28
 80213e8:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	@ 0x46
 80213ec:	42a3      	cmp	r3, r4
 80213ee:	910c      	str	r1, [sp, #48]	@ 0x30
 80213f0:	f040 8096 	bne.w	8021520 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80213f4:	6841      	ldr	r1, [r0, #4]
 80213f6:	4c69      	ldr	r4, [pc, #420]	@ (802159c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x224>)
 80213f8:	680b      	ldr	r3, [r1, #0]
 80213fa:	699b      	ldr	r3, [r3, #24]
 80213fc:	42a3      	cmp	r3, r4
 80213fe:	f040 80b4 	bne.w	802156a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 8021402:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8021404:	4798      	blx	r3
 8021406:	4b66      	ldr	r3, [pc, #408]	@ (80215a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8021408:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 802140c:	881b      	ldrh	r3, [r3, #0]
 802140e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8021412:	fb01 2303 	mla	r3, r1, r3, r2
 8021416:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802141a:	4418      	add	r0, r3
 802141c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802141e:	2b00      	cmp	r3, #0
 8021420:	dd76      	ble.n	8021510 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8021422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021424:	2b00      	cmp	r3, #0
 8021426:	dd73      	ble.n	8021510 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 8021428:	2200      	movs	r2, #0
 802142a:	2104      	movs	r1, #4
 802142c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021430:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021432:	930d      	str	r3, [sp, #52]	@ 0x34
 8021434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021436:	464e      	mov	r6, r9
 8021438:	1cc5      	adds	r5, r0, #3
 802143a:	eb09 0c03 	add.w	ip, r9, r3
 802143e:	e039      	b.n	80214b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8021440:	fb0a f303 	mul.w	r3, sl, r3
 8021444:	1c5a      	adds	r2, r3, #1
 8021446:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802144a:	121b      	asrs	r3, r3, #8
 802144c:	43df      	mvns	r7, r3
 802144e:	b29b      	uxth	r3, r3
 8021450:	fb1e f203 	smulbb	r2, lr, r3
 8021454:	f815 ec03 	ldrb.w	lr, [r5, #-3]
 8021458:	b2ff      	uxtb	r7, r7
 802145a:	fb0e 2e07 	mla	lr, lr, r7, r2
 802145e:	fa1f fe8e 	uxth.w	lr, lr
 8021462:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8021466:	f10e 0b01 	add.w	fp, lr, #1
 802146a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802146e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021472:	fb12 fb07 	smulbb	fp, r2, r7
 8021476:	f805 ec03 	strb.w	lr, [r5, #-3]
 802147a:	7862      	ldrb	r2, [r4, #1]
 802147c:	f815 ec01 	ldrb.w	lr, [r5, #-1]
 8021480:	fb02 b203 	mla	r2, r2, r3, fp
 8021484:	b292      	uxth	r2, r2
 8021486:	f102 0b01 	add.w	fp, r2, #1
 802148a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802148e:	1212      	asrs	r2, r2, #8
 8021490:	fb1e f707 	smulbb	r7, lr, r7
 8021494:	f805 2c02 	strb.w	r2, [r5, #-2]
 8021498:	78a2      	ldrb	r2, [r4, #2]
 802149a:	fb02 7303 	mla	r3, r2, r3, r7
 802149e:	b29b      	uxth	r3, r3
 80214a0:	1c5a      	adds	r2, r3, #1
 80214a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80214a6:	121b      	asrs	r3, r3, #8
 80214a8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80214ac:	45b4      	cmp	ip, r6
 80214ae:	f105 0503 	add.w	r5, r5, #3
 80214b2:	d01b      	beq.n	80214ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x174>
 80214b4:	f816 2b01 	ldrb.w	r2, [r6], #1
 80214b8:	fb11 1202 	smlabb	r2, r1, r2, r1
 80214bc:	eb08 0402 	add.w	r4, r8, r2
 80214c0:	78e3      	ldrb	r3, [r4, #3]
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	d0f2      	beq.n	80214ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x134>
 80214c6:	2bff      	cmp	r3, #255	@ 0xff
 80214c8:	f818 e002 	ldrb.w	lr, [r8, r2]
 80214cc:	d1b8      	bne.n	8021440 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 80214ce:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80214d2:	d1b5      	bne.n	8021440 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 80214d4:	f805 ec03 	strb.w	lr, [r5, #-3]
 80214d8:	7863      	ldrb	r3, [r4, #1]
 80214da:	45b4      	cmp	ip, r6
 80214dc:	f805 3c02 	strb.w	r3, [r5, #-2]
 80214e0:	78a3      	ldrb	r3, [r4, #2]
 80214e2:	f105 0503 	add.w	r5, r5, #3
 80214e6:	f805 3c04 	strb.w	r3, [r5, #-4]
 80214ea:	d1e3      	bne.n	80214b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 80214ec:	4b2c      	ldr	r3, [pc, #176]	@ (80215a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 80214ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80214f0:	881b      	ldrh	r3, [r3, #0]
 80214f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80214f4:	1a9b      	subs	r3, r3, r2
 80214f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80214fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80214fc:	442b      	add	r3, r5
 80214fe:	4418      	add	r0, r3
 8021500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021502:	3401      	adds	r4, #1
 8021504:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021508:	42a3      	cmp	r3, r4
 802150a:	940b      	str	r4, [sp, #44]	@ 0x2c
 802150c:	4491      	add	r9, r2
 802150e:	d191      	bne.n	8021434 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8021510:	4b20      	ldr	r3, [pc, #128]	@ (8021594 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8021512:	6818      	ldr	r0, [r3, #0]
 8021514:	6803      	ldr	r3, [r0, #0]
 8021516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021518:	4798      	blx	r3
 802151a:	b013      	add	sp, #76	@ 0x4c
 802151c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021520:	4798      	blx	r3
 8021522:	4602      	mov	r2, r0
 8021524:	2a01      	cmp	r2, #1
 8021526:	d124      	bne.n	8021572 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 8021528:	4b1e      	ldr	r3, [pc, #120]	@ (80215a4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22c>)
 802152a:	6818      	ldr	r0, [r3, #0]
 802152c:	b328      	cbz	r0, 802157a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 802152e:	260b      	movs	r6, #11
 8021530:	4b1b      	ldr	r3, [pc, #108]	@ (80215a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 8021532:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021536:	881f      	ldrh	r7, [r3, #0]
 8021538:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 802153c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021540:	f8bd 4042 	ldrh.w	r4, [sp, #66]	@ 0x42
 8021544:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8021548:	9208      	str	r2, [sp, #32]
 802154a:	9205      	str	r2, [sp, #20]
 802154c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8021550:	f8cd a010 	str.w	sl, [sp, #16]
 8021554:	4642      	mov	r2, r8
 8021556:	4649      	mov	r1, r9
 8021558:	e9cd 7606 	strd	r7, r6, [sp, #24]
 802155c:	9503      	str	r5, [sp, #12]
 802155e:	9400      	str	r4, [sp, #0]
 8021560:	f7f9 feb8 	bl	801b2d4 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8021564:	b013      	add	sp, #76	@ 0x4c
 8021566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802156a:	4608      	mov	r0, r1
 802156c:	4798      	blx	r3
 802156e:	4602      	mov	r2, r0
 8021570:	e7d8      	b.n	8021524 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 8021572:	4b08      	ldr	r3, [pc, #32]	@ (8021594 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8021574:	6818      	ldr	r0, [r3, #0]
 8021576:	6802      	ldr	r2, [r0, #0]
 8021578:	e743      	b.n	8021402 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 802157a:	4b0b      	ldr	r3, [pc, #44]	@ (80215a8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x230>)
 802157c:	4a0b      	ldr	r2, [pc, #44]	@ (80215ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 802157e:	217c      	movs	r1, #124	@ 0x7c
 8021580:	480b      	ldr	r0, [pc, #44]	@ (80215b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8021582:	f009 fc33 	bl	802adec <__assert_func>
 8021586:	4b0b      	ldr	r3, [pc, #44]	@ (80215b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8021588:	4a0b      	ldr	r2, [pc, #44]	@ (80215b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 802158a:	f640 1155 	movw	r1, #2389	@ 0x955
 802158e:	480b      	ldr	r0, [pc, #44]	@ (80215bc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8021590:	f009 fc2c 	bl	802adec <__assert_func>
 8021594:	2008745c 	.word	0x2008745c
 8021598:	0801176d 	.word	0x0801176d
 802159c:	0801457f 	.word	0x0801457f
 80215a0:	20087456 	.word	0x20087456
 80215a4:	200875c8 	.word	0x200875c8
 80215a8:	0802ddcc 	.word	0x0802ddcc
 80215ac:	0802e638 	.word	0x0802e638
 80215b0:	0802ddf4 	.word	0x0802ddf4
 80215b4:	0802dee4 	.word	0x0802dee4
 80215b8:	0802ecf4 	.word	0x0802ecf4
 80215bc:	0802de70 	.word	0x0802de70

080215c0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 80215c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c4:	4614      	mov	r4, r2
 80215c6:	7812      	ldrb	r2, [r2, #0]
 80215c8:	b08d      	sub	sp, #52	@ 0x34
 80215ca:	461e      	mov	r6, r3
 80215cc:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
 80215d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80215d2:	2a00      	cmp	r2, #0
 80215d4:	f040 81e0 	bne.w	8021998 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3d8>
 80215d8:	6830      	ldr	r0, [r6, #0]
 80215da:	460d      	mov	r5, r1
 80215dc:	6871      	ldr	r1, [r6, #4]
 80215de:	aa08      	add	r2, sp, #32
 80215e0:	c203      	stmia	r2!, {r0, r1}
 80215e2:	6818      	ldr	r0, [r3, #0]
 80215e4:	6859      	ldr	r1, [r3, #4]
 80215e6:	aa0a      	add	r2, sp, #40	@ 0x28
 80215e8:	c203      	stmia	r2!, {r0, r1}
 80215ea:	a808      	add	r0, sp, #32
 80215ec:	f7f4 f884 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215f0:	4631      	mov	r1, r6
 80215f2:	a80a      	add	r0, sp, #40	@ 0x28
 80215f4:	f7f4 f8a8 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80215f8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80215fc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8021600:	f003 0201 	and.w	r2, r3, #1
 8021604:	4617      	mov	r7, r2
 8021606:	9204      	str	r2, [sp, #16]
 8021608:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 802160c:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 8021610:	443b      	add	r3, r7
 8021612:	fb02 1303 	mla	r3, r2, r3, r1
 8021616:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802161a:	4402      	add	r2, r0
 802161c:	48d6      	ldr	r0, [pc, #856]	@ (8021978 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3b8>)
 802161e:	440e      	add	r6, r1
 8021620:	6800      	ldr	r0, [r0, #0]
 8021622:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8021626:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 802162a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802162e:	eb05 0363 	add.w	r3, r5, r3, asr #1
 8021632:	6802      	ldr	r2, [r0, #0]
 8021634:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8021638:	9301      	str	r3, [sp, #4]
 802163a:	f001 0301 	and.w	r3, r1, #1
 802163e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8021640:	9305      	str	r3, [sp, #20]
 8021642:	9703      	str	r7, [sp, #12]
 8021644:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8021648:	4790      	blx	r2
 802164a:	4acc      	ldr	r2, [pc, #816]	@ (802197c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3bc>)
 802164c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8021650:	8811      	ldrh	r1, [r2, #0]
 8021652:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8021656:	fb05 f201 	mul.w	r2, r5, r1
 802165a:	fb01 6303 	mla	r3, r1, r3, r6
 802165e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021662:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021666:	4418      	add	r0, r3
 8021668:	1883      	adds	r3, r0, r2
 802166a:	4298      	cmp	r0, r3
 802166c:	9306      	str	r3, [sp, #24]
 802166e:	f104 0204 	add.w	r2, r4, #4
 8021672:	f080 80f1 	bcs.w	8021858 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8021676:	1e7b      	subs	r3, r7, #1
 8021678:	4647      	mov	r7, r8
 802167a:	9307      	str	r3, [sp, #28]
 802167c:	9b05      	ldr	r3, [sp, #20]
 802167e:	2b00      	cmp	r3, #0
 8021680:	f000 8106 	beq.w	8021890 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2d0>
 8021684:	9901      	ldr	r1, [sp, #4]
 8021686:	780b      	ldrb	r3, [r1, #0]
 8021688:	1c4d      	adds	r5, r1, #1
 802168a:	f003 030f 	and.w	r3, r3, #15
 802168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021692:	0e19      	lsrs	r1, r3, #24
 8021694:	f040 8136 	bne.w	8021904 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x344>
 8021698:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802169c:	3003      	adds	r0, #3
 802169e:	f1bc 0f01 	cmp.w	ip, #1
 80216a2:	f340 80ba 	ble.w	802181a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x25a>
 80216a6:	f1ac 0302 	sub.w	r3, ip, #2
 80216aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80216ae:	f10c 0e01 	add.w	lr, ip, #1
 80216b2:	9302      	str	r3, [sp, #8]
 80216b4:	eb05 060e 	add.w	r6, r5, lr
 80216b8:	1d84      	adds	r4, r0, #6
 80216ba:	e00b      	b.n	80216d4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 80216bc:	f003 030f 	and.w	r3, r3, #15
 80216c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80216c4:	3501      	adds	r5, #1
 80216c6:	0e19      	lsrs	r1, r3, #24
 80216c8:	d155      	bne.n	8021776 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1b6>
 80216ca:	42b5      	cmp	r5, r6
 80216cc:	f104 0406 	add.w	r4, r4, #6
 80216d0:	f000 809a 	beq.w	8021808 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>
 80216d4:	782b      	ldrb	r3, [r5, #0]
 80216d6:	0919      	lsrs	r1, r3, #4
 80216d8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80216dc:	ea5f 6811 	movs.w	r8, r1, lsr #24
 80216e0:	d0ec      	beq.n	80216bc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xfc>
 80216e2:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80216e6:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80216ea:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80216ee:	fa5f f38a 	uxtb.w	r3, sl
 80216f2:	b2c9      	uxtb	r1, r1
 80216f4:	fa5f fb89 	uxtb.w	fp, r9
 80216f8:	f000 80bf 	beq.w	802187a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2ba>
 80216fc:	fb08 f807 	mul.w	r8, r8, r7
 8021700:	f108 0901 	add.w	r9, r8, #1
 8021704:	eb09 2828 	add.w	r8, r9, r8, asr #8
 8021708:	ea4f 2828 	mov.w	r8, r8, asr #8
 802170c:	ea6f 0908 	mvn.w	r9, r8
 8021710:	fa1f f888 	uxth.w	r8, r8
 8021714:	fb11 f108 	smulbb	r1, r1, r8
 8021718:	fb13 f308 	smulbb	r3, r3, r8
 802171c:	fb1b f808 	smulbb	r8, fp, r8
 8021720:	f814 bc06 	ldrb.w	fp, [r4, #-6]
 8021724:	fa5f f989 	uxtb.w	r9, r9
 8021728:	f814 ac05 	ldrb.w	sl, [r4, #-5]
 802172c:	fb0b 1109 	mla	r1, fp, r9, r1
 8021730:	f814 bc04 	ldrb.w	fp, [r4, #-4]
 8021734:	fb0a 3309 	mla	r3, sl, r9, r3
 8021738:	fb0b 8809 	mla	r8, fp, r9, r8
 802173c:	b289      	uxth	r1, r1
 802173e:	fa1f fa83 	uxth.w	sl, r3
 8021742:	fa1f f888 	uxth.w	r8, r8
 8021746:	f101 0b01 	add.w	fp, r1, #1
 802174a:	f10a 0301 	add.w	r3, sl, #1
 802174e:	f108 0901 	add.w	r9, r8, #1
 8021752:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8021756:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802175a:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 802175e:	121b      	asrs	r3, r3, #8
 8021760:	1209      	asrs	r1, r1, #8
 8021762:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021766:	f804 1c06 	strb.w	r1, [r4, #-6]
 802176a:	f804 3c05 	strb.w	r3, [r4, #-5]
 802176e:	f804 8c04 	strb.w	r8, [r4, #-4]
 8021772:	782b      	ldrb	r3, [r5, #0]
 8021774:	e7a2      	b.n	80216bc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xfc>
 8021776:	f3c3 2a07 	ubfx	sl, r3, #8, #8
 802177a:	f3c3 4907 	ubfx	r9, r3, #16, #8
 802177e:	29ff      	cmp	r1, #255	@ 0xff
 8021780:	fa5f f88a 	uxtb.w	r8, sl
 8021784:	b2db      	uxtb	r3, r3
 8021786:	fa5f fb89 	uxtb.w	fp, r9
 802178a:	d06d      	beq.n	8021868 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2a8>
 802178c:	fb01 f107 	mul.w	r1, r1, r7
 8021790:	f101 0901 	add.w	r9, r1, #1
 8021794:	eb09 2121 	add.w	r1, r9, r1, asr #8
 8021798:	1209      	asrs	r1, r1, #8
 802179a:	ea6f 0901 	mvn.w	r9, r1
 802179e:	b289      	uxth	r1, r1
 80217a0:	fb13 f301 	smulbb	r3, r3, r1
 80217a4:	fb18 f801 	smulbb	r8, r8, r1
 80217a8:	fb1b f101 	smulbb	r1, fp, r1
 80217ac:	f814 bc03 	ldrb.w	fp, [r4, #-3]
 80217b0:	fa5f f989 	uxtb.w	r9, r9
 80217b4:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 80217b8:	fb0b 3309 	mla	r3, fp, r9, r3
 80217bc:	f814 bc01 	ldrb.w	fp, [r4, #-1]
 80217c0:	fb0a 8809 	mla	r8, sl, r9, r8
 80217c4:	fb0b 1109 	mla	r1, fp, r9, r1
 80217c8:	fa1f fa88 	uxth.w	sl, r8
 80217cc:	fa1f fb83 	uxth.w	fp, r3
 80217d0:	b289      	uxth	r1, r1
 80217d2:	f10b 0801 	add.w	r8, fp, #1
 80217d6:	f10a 0301 	add.w	r3, sl, #1
 80217da:	f101 0901 	add.w	r9, r1, #1
 80217de:	eb08 2b1b 	add.w	fp, r8, fp, lsr #8
 80217e2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80217e6:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80217ea:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80217ee:	121b      	asrs	r3, r3, #8
 80217f0:	1209      	asrs	r1, r1, #8
 80217f2:	42b5      	cmp	r5, r6
 80217f4:	f804 bc03 	strb.w	fp, [r4, #-3]
 80217f8:	f804 3c02 	strb.w	r3, [r4, #-2]
 80217fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8021800:	f104 0406 	add.w	r4, r4, #6
 8021804:	f47f af66 	bne.w	80216d4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 8021808:	9b02      	ldr	r3, [sp, #8]
 802180a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802180e:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
 8021812:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 8021816:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802181a:	f1bc 0f01 	cmp.w	ip, #1
 802181e:	d106      	bne.n	802182e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x26e>
 8021820:	782b      	ldrb	r3, [r5, #0]
 8021822:	091b      	lsrs	r3, r3, #4
 8021824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021828:	0e19      	lsrs	r1, r3, #24
 802182a:	d135      	bne.n	8021898 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2d8>
 802182c:	3003      	adds	r0, #3
 802182e:	4b53      	ldr	r3, [pc, #332]	@ (802197c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3bc>)
 8021830:	9c03      	ldr	r4, [sp, #12]
 8021832:	8819      	ldrh	r1, [r3, #0]
 8021834:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8021838:	1b09      	subs	r1, r1, r4
 802183a:	9c04      	ldr	r4, [sp, #16]
 802183c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021840:	4408      	add	r0, r1
 8021842:	4423      	add	r3, r4
 8021844:	9901      	ldr	r1, [sp, #4]
 8021846:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802184a:	eb01 0363 	add.w	r3, r1, r3, asr #1
 802184e:	9301      	str	r3, [sp, #4]
 8021850:	9b06      	ldr	r3, [sp, #24]
 8021852:	4283      	cmp	r3, r0
 8021854:	f63f af12 	bhi.w	802167c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8021858:	4b47      	ldr	r3, [pc, #284]	@ (8021978 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3b8>)
 802185a:	6818      	ldr	r0, [r3, #0]
 802185c:	6803      	ldr	r3, [r0, #0]
 802185e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021860:	4798      	blx	r3
 8021862:	b00d      	add	sp, #52	@ 0x34
 8021864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021868:	2fff      	cmp	r7, #255	@ 0xff
 802186a:	d18f      	bne.n	802178c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 802186c:	f804 3c03 	strb.w	r3, [r4, #-3]
 8021870:	f804 ac02 	strb.w	sl, [r4, #-2]
 8021874:	f804 9c01 	strb.w	r9, [r4, #-1]
 8021878:	e727      	b.n	80216ca <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x10a>
 802187a:	2fff      	cmp	r7, #255	@ 0xff
 802187c:	f47f af3e 	bne.w	80216fc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8021880:	f804 1c06 	strb.w	r1, [r4, #-6]
 8021884:	f804 ac05 	strb.w	sl, [r4, #-5]
 8021888:	f804 9c04 	strb.w	r9, [r4, #-4]
 802188c:	782b      	ldrb	r3, [r5, #0]
 802188e:	e715      	b.n	80216bc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xfc>
 8021890:	9d01      	ldr	r5, [sp, #4]
 8021892:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8021896:	e702      	b.n	802169e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xde>
 8021898:	f3c3 2507 	ubfx	r5, r3, #8, #8
 802189c:	f3c3 4407 	ubfx	r4, r3, #16, #8
 80218a0:	29ff      	cmp	r1, #255	@ 0xff
 80218a2:	fa5f fc85 	uxtb.w	ip, r5
 80218a6:	b2db      	uxtb	r3, r3
 80218a8:	b2e6      	uxtb	r6, r4
 80218aa:	d069      	beq.n	8021980 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c0>
 80218ac:	fb01 f107 	mul.w	r1, r1, r7
 80218b0:	1c4c      	adds	r4, r1, #1
 80218b2:	eb04 2121 	add.w	r1, r4, r1, asr #8
 80218b6:	120c      	asrs	r4, r1, #8
 80218b8:	43e1      	mvns	r1, r4
 80218ba:	b2a4      	uxth	r4, r4
 80218bc:	fb13 f304 	smulbb	r3, r3, r4
 80218c0:	fb1c fc04 	smulbb	ip, ip, r4
 80218c4:	fb16 f404 	smulbb	r4, r6, r4
 80218c8:	7806      	ldrb	r6, [r0, #0]
 80218ca:	b2c9      	uxtb	r1, r1
 80218cc:	fb06 3301 	mla	r3, r6, r1, r3
 80218d0:	7845      	ldrb	r5, [r0, #1]
 80218d2:	7886      	ldrb	r6, [r0, #2]
 80218d4:	fb05 c501 	mla	r5, r5, r1, ip
 80218d8:	fb06 4401 	mla	r4, r6, r1, r4
 80218dc:	b29b      	uxth	r3, r3
 80218de:	b2ad      	uxth	r5, r5
 80218e0:	b2a4      	uxth	r4, r4
 80218e2:	1c5e      	adds	r6, r3, #1
 80218e4:	f105 0c01 	add.w	ip, r5, #1
 80218e8:	1c61      	adds	r1, r4, #1
 80218ea:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80218ee:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80218f2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80218f6:	121b      	asrs	r3, r3, #8
 80218f8:	122d      	asrs	r5, r5, #8
 80218fa:	1209      	asrs	r1, r1, #8
 80218fc:	7003      	strb	r3, [r0, #0]
 80218fe:	7045      	strb	r5, [r0, #1]
 8021900:	7081      	strb	r1, [r0, #2]
 8021902:	e793      	b.n	802182c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x26c>
 8021904:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8021908:	f3c3 4407 	ubfx	r4, r3, #16, #8
 802190c:	29ff      	cmp	r1, #255	@ 0xff
 802190e:	fa5f fe86 	uxtb.w	lr, r6
 8021912:	b2db      	uxtb	r3, r3
 8021914:	fa5f fc84 	uxtb.w	ip, r4
 8021918:	d038      	beq.n	802198c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3cc>
 802191a:	fb01 f107 	mul.w	r1, r1, r7
 802191e:	1c4c      	adds	r4, r1, #1
 8021920:	eb04 2421 	add.w	r4, r4, r1, asr #8
 8021924:	1224      	asrs	r4, r4, #8
 8021926:	43e1      	mvns	r1, r4
 8021928:	b2a4      	uxth	r4, r4
 802192a:	fb13 f304 	smulbb	r3, r3, r4
 802192e:	fb1e fe04 	smulbb	lr, lr, r4
 8021932:	fb1c f404 	smulbb	r4, ip, r4
 8021936:	f890 c000 	ldrb.w	ip, [r0]
 802193a:	b2c9      	uxtb	r1, r1
 802193c:	fb0c 3301 	mla	r3, ip, r1, r3
 8021940:	7846      	ldrb	r6, [r0, #1]
 8021942:	f890 c002 	ldrb.w	ip, [r0, #2]
 8021946:	fb06 e601 	mla	r6, r6, r1, lr
 802194a:	fb0c 4401 	mla	r4, ip, r1, r4
 802194e:	b29b      	uxth	r3, r3
 8021950:	b2b6      	uxth	r6, r6
 8021952:	b2a4      	uxth	r4, r4
 8021954:	f103 0c01 	add.w	ip, r3, #1
 8021958:	f106 0e01 	add.w	lr, r6, #1
 802195c:	1c61      	adds	r1, r4, #1
 802195e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021962:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021966:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 802196a:	121b      	asrs	r3, r3, #8
 802196c:	1236      	asrs	r6, r6, #8
 802196e:	1209      	asrs	r1, r1, #8
 8021970:	7003      	strb	r3, [r0, #0]
 8021972:	7046      	strb	r6, [r0, #1]
 8021974:	7081      	strb	r1, [r0, #2]
 8021976:	e68f      	b.n	8021698 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xd8>
 8021978:	2008745c 	.word	0x2008745c
 802197c:	20087456 	.word	0x20087456
 8021980:	2fff      	cmp	r7, #255	@ 0xff
 8021982:	d193      	bne.n	80218ac <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2ec>
 8021984:	7003      	strb	r3, [r0, #0]
 8021986:	7045      	strb	r5, [r0, #1]
 8021988:	7084      	strb	r4, [r0, #2]
 802198a:	e74f      	b.n	802182c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x26c>
 802198c:	2fff      	cmp	r7, #255	@ 0xff
 802198e:	d1c4      	bne.n	802191a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x35a>
 8021990:	7003      	strb	r3, [r0, #0]
 8021992:	7046      	strb	r6, [r0, #1]
 8021994:	7084      	strb	r4, [r0, #2]
 8021996:	e67f      	b.n	8021698 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xd8>
 8021998:	4b03      	ldr	r3, [pc, #12]	@ (80219a8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3e8>)
 802199a:	4a04      	ldr	r2, [pc, #16]	@ (80219ac <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3ec>)
 802199c:	f640 11b5 	movw	r1, #2485	@ 0x9b5
 80219a0:	4803      	ldr	r0, [pc, #12]	@ (80219b0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3f0>)
 80219a2:	f009 fa23 	bl	802adec <__assert_func>
 80219a6:	bf00      	nop
 80219a8:	0802df64 	.word	0x0802df64
 80219ac:	0802f1e4 	.word	0x0802f1e4
 80219b0:	0802de70 	.word	0x0802de70

080219b4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 80219b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219b8:	b091      	sub	sp, #68	@ 0x44
 80219ba:	9208      	str	r2, [sp, #32]
 80219bc:	9100      	str	r1, [sp, #0]
 80219be:	7812      	ldrb	r2, [r2, #0]
 80219c0:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 80219c4:	461c      	mov	r4, r3
 80219c6:	9106      	str	r1, [sp, #24]
 80219c8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80219ca:	2a00      	cmp	r2, #0
 80219cc:	f040 8211 	bne.w	8021df2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x43e>
 80219d0:	6820      	ldr	r0, [r4, #0]
 80219d2:	6861      	ldr	r1, [r4, #4]
 80219d4:	aa0c      	add	r2, sp, #48	@ 0x30
 80219d6:	c203      	stmia	r2!, {r0, r1}
 80219d8:	6818      	ldr	r0, [r3, #0]
 80219da:	6859      	ldr	r1, [r3, #4]
 80219dc:	aa0e      	add	r2, sp, #56	@ 0x38
 80219de:	c203      	stmia	r2!, {r0, r1}
 80219e0:	a80c      	add	r0, sp, #48	@ 0x30
 80219e2:	f7f3 fe89 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219e6:	4621      	mov	r1, r4
 80219e8:	a80e      	add	r0, sp, #56	@ 0x38
 80219ea:	f7f3 fead 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219ee:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80219f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80219f6:	f340 815b 	ble.w	8021cb0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2fc>
 80219fa:	2201      	movs	r2, #1
 80219fc:	b299      	uxth	r1, r3
 80219fe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8021a02:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8021a06:	fb93 f5f2 	sdiv	r5, r3, r2
 8021a0a:	b2ae      	uxth	r6, r5
 8021a0c:	fb02 3416 	mls	r4, r2, r6, r3
 8021a10:	fb14 0101 	smlabb	r1, r4, r1, r0
 8021a14:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8021a18:	fa1f f881 	uxth.w	r8, r1
 8021a1c:	4414      	add	r4, r2
 8021a1e:	3c01      	subs	r4, #1
 8021a20:	fb94 f4f2 	sdiv	r4, r4, r2
 8021a24:	b136      	cbz	r6, 8021a34 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x80>
 8021a26:	9a08      	ldr	r2, [sp, #32]
 8021a28:	9900      	ldr	r1, [sp, #0]
 8021a2a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8021a2e:	ba12      	rev	r2, r2
 8021a30:	4411      	add	r1, r2
 8021a32:	9100      	str	r1, [sp, #0]
 8021a34:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8021a38:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8021a3c:	4402      	add	r2, r0
 8021a3e:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8021a42:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8021a46:	440b      	add	r3, r1
 8021a48:	4616      	mov	r6, r2
 8021a4a:	499c      	ldr	r1, [pc, #624]	@ (8021cbc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 8021a4c:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8021a50:	6808      	ldr	r0, [r1, #0]
 8021a52:	9205      	str	r2, [sp, #20]
 8021a54:	6803      	ldr	r3, [r0, #0]
 8021a56:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8021a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021a5c:	4798      	blx	r3
 8021a5e:	f1b8 0f00 	cmp.w	r8, #0
 8021a62:	bf0c      	ite	eq
 8021a64:	4633      	moveq	r3, r6
 8021a66:	2300      	movne	r3, #0
 8021a68:	4995      	ldr	r1, [pc, #596]	@ (8021cc0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>)
 8021a6a:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 8021a6e:	8809      	ldrh	r1, [r1, #0]
 8021a70:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8021a74:	fb05 f501 	mul.w	r5, r5, r1
 8021a78:	fb01 6202 	mla	r2, r1, r2, r6
 8021a7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021a80:	4410      	add	r0, r2
 8021a82:	b2a4      	uxth	r4, r4
 8021a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021a88:	1942      	adds	r2, r0, r5
 8021a8a:	00a4      	lsls	r4, r4, #2
 8021a8c:	1d21      	adds	r1, r4, #4
 8021a8e:	4290      	cmp	r0, r2
 8021a90:	9201      	str	r2, [sp, #4]
 8021a92:	9109      	str	r1, [sp, #36]	@ 0x24
 8021a94:	b29f      	uxth	r7, r3
 8021a96:	d21a      	bcs.n	8021ace <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x11a>
 8021a98:	2300      	movs	r3, #0
 8021a9a:	4641      	mov	r1, r8
 8021a9c:	9302      	str	r3, [sp, #8]
 8021a9e:	b963      	cbnz	r3, 8021aba <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x106>
 8021aa0:	9d00      	ldr	r5, [sp, #0]
 8021aa2:	782a      	ldrb	r2, [r5, #0]
 8021aa4:	0993      	lsrs	r3, r2, #6
 8021aa6:	1e5c      	subs	r4, r3, #1
 8021aa8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021aac:	2c02      	cmp	r4, #2
 8021aae:	9202      	str	r2, [sp, #8]
 8021ab0:	f200 8099 	bhi.w	8021be6 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x232>
 8021ab4:	3501      	adds	r5, #1
 8021ab6:	9500      	str	r5, [sp, #0]
 8021ab8:	b29b      	uxth	r3, r3
 8021aba:	b181      	cbz	r1, 8021ade <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x12a>
 8021abc:	428b      	cmp	r3, r1
 8021abe:	f080 808c 	bcs.w	8021bda <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8021ac2:	1acb      	subs	r3, r1, r3
 8021ac4:	b299      	uxth	r1, r3
 8021ac6:	2300      	movs	r3, #0
 8021ac8:	9a01      	ldr	r2, [sp, #4]
 8021aca:	4290      	cmp	r0, r2
 8021acc:	d3e7      	bcc.n	8021a9e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xea>
 8021ace:	4b7b      	ldr	r3, [pc, #492]	@ (8021cbc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 8021ad0:	6818      	ldr	r0, [r3, #0]
 8021ad2:	6803      	ldr	r3, [r0, #0]
 8021ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021ad6:	4798      	blx	r3
 8021ad8:	b011      	add	sp, #68	@ 0x44
 8021ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ade:	2204      	movs	r2, #4
 8021ae0:	4615      	mov	r5, r2
 8021ae2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021ae4:	9a02      	ldr	r2, [sp, #8]
 8021ae6:	42bb      	cmp	r3, r7
 8021ae8:	fb15 4202 	smlabb	r2, r5, r2, r4
 8021aec:	9c08      	ldr	r4, [sp, #32]
 8021aee:	58a5      	ldr	r5, [r4, r2]
 8021af0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021af4:	f0c0 808d 	bcc.w	8021c12 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 8021af8:	1bda      	subs	r2, r3, r7
 8021afa:	b292      	uxth	r2, r2
 8021afc:	9203      	str	r2, [sp, #12]
 8021afe:	2f00      	cmp	r7, #0
 8021b00:	d076      	beq.n	8021bf0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8021b02:	9704      	str	r7, [sp, #16]
 8021b04:	9107      	str	r1, [sp, #28]
 8021b06:	9a06      	ldr	r2, [sp, #24]
 8021b08:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021b0c:	fb02 f408 	mul.w	r4, r2, r8
 8021b10:	1c62      	adds	r2, r4, #1
 8021b12:	eb02 2224 	add.w	r2, r2, r4, asr #8
 8021b16:	1212      	asrs	r2, r2, #8
 8021b18:	43d4      	mvns	r4, r2
 8021b1a:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 8021b1e:	b292      	uxth	r2, r2
 8021b20:	b2ed      	uxtb	r5, r5
 8021b22:	fa5f f98b 	uxtb.w	r9, fp
 8021b26:	fa5f fa86 	uxtb.w	sl, r6
 8021b2a:	fb15 fc02 	smulbb	ip, r5, r2
 8021b2e:	fb19 fe02 	smulbb	lr, r9, r2
 8021b32:	fb1a f202 	smulbb	r2, sl, r2
 8021b36:	f88d 602b 	strb.w	r6, [sp, #43]	@ 0x2b
 8021b3a:	b2e4      	uxtb	r4, r4
 8021b3c:	fa1f fc8c 	uxth.w	ip, ip
 8021b40:	fa1f fe8e 	uxth.w	lr, lr
 8021b44:	b292      	uxth	r2, r2
 8021b46:	f1b8 0f00 	cmp.w	r8, #0
 8021b4a:	d06b      	beq.n	8021c24 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x270>
 8021b4c:	9e06      	ldr	r6, [sp, #24]
 8021b4e:	2eff      	cmp	r6, #255	@ 0xff
 8021b50:	d070      	beq.n	8021c34 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x280>
 8021b52:	9d04      	ldr	r5, [sp, #16]
 8021b54:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021b58:	f105 36ff 	add.w	r6, r5, #4294967295
 8021b5c:	b2b5      	uxth	r5, r6
 8021b5e:	9504      	str	r5, [sp, #16]
 8021b60:	f000 810e 	beq.w	8021d80 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3cc>
 8021b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021b68:	f100 0a06 	add.w	sl, r0, #6
 8021b6c:	44aa      	add	sl, r5
 8021b6e:	f100 0903 	add.w	r9, r0, #3
 8021b72:	f819 8c03 	ldrb.w	r8, [r9, #-3]
 8021b76:	f819 6c02 	ldrb.w	r6, [r9, #-2]
 8021b7a:	f819 5c01 	ldrb.w	r5, [r9, #-1]
 8021b7e:	fb08 c804 	mla	r8, r8, r4, ip
 8021b82:	fb06 e604 	mla	r6, r6, r4, lr
 8021b86:	fb05 2504 	mla	r5, r5, r4, r2
 8021b8a:	fa1f f888 	uxth.w	r8, r8
 8021b8e:	b2b6      	uxth	r6, r6
 8021b90:	f108 0b01 	add.w	fp, r8, #1
 8021b94:	b2ad      	uxth	r5, r5
 8021b96:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021b9a:	f106 0b01 	add.w	fp, r6, #1
 8021b9e:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8021ba2:	f105 0b01 	add.w	fp, r5, #1
 8021ba6:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8021baa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021bae:	1236      	asrs	r6, r6, #8
 8021bb0:	122d      	asrs	r5, r5, #8
 8021bb2:	f809 8c03 	strb.w	r8, [r9, #-3]
 8021bb6:	f809 6c02 	strb.w	r6, [r9, #-2]
 8021bba:	f809 5c01 	strb.w	r5, [r9, #-1]
 8021bbe:	f109 0903 	add.w	r9, r9, #3
 8021bc2:	45ca      	cmp	sl, r9
 8021bc4:	d1d5      	bne.n	8021b72 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8021bc6:	9e04      	ldr	r6, [sp, #16]
 8021bc8:	3601      	adds	r6, #1
 8021bca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021bce:	4430      	add	r0, r6
 8021bd0:	42bb      	cmp	r3, r7
 8021bd2:	d20d      	bcs.n	8021bf0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8021bd4:	9b03      	ldr	r3, [sp, #12]
 8021bd6:	9f07      	ldr	r7, [sp, #28]
 8021bd8:	e776      	b.n	8021ac8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 8021bda:	1a5b      	subs	r3, r3, r1
 8021bdc:	b29b      	uxth	r3, r3
 8021bde:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 8021be2:	2100      	movs	r1, #0
 8021be4:	e770      	b.n	8021ac8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 8021be6:	462a      	mov	r2, r5
 8021be8:	3202      	adds	r2, #2
 8021bea:	786b      	ldrb	r3, [r5, #1]
 8021bec:	9200      	str	r2, [sp, #0]
 8021bee:	e764      	b.n	8021aba <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x106>
 8021bf0:	9c05      	ldr	r4, [sp, #20]
 8021bf2:	4b33      	ldr	r3, [pc, #204]	@ (8021cc0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>)
 8021bf4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8021bf8:	b2a7      	uxth	r7, r4
 8021bfa:	881a      	ldrh	r2, [r3, #0]
 8021bfc:	1bc9      	subs	r1, r1, r7
 8021bfe:	b289      	uxth	r1, r1
 8021c00:	1b12      	subs	r2, r2, r4
 8021c02:	2900      	cmp	r1, #0
 8021c04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c08:	9b03      	ldr	r3, [sp, #12]
 8021c0a:	bf18      	it	ne
 8021c0c:	2700      	movne	r7, #0
 8021c0e:	4410      	add	r0, r2
 8021c10:	e75a      	b.n	8021ac8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 8021c12:	1afa      	subs	r2, r7, r3
 8021c14:	b292      	uxth	r2, r2
 8021c16:	9207      	str	r2, [sp, #28]
 8021c18:	2b00      	cmp	r3, #0
 8021c1a:	f000 80f1 	beq.w	8021e00 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x44c>
 8021c1e:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8021c22:	e770      	b.n	8021b06 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x152>
 8021c24:	9a04      	ldr	r2, [sp, #16]
 8021c26:	3a01      	subs	r2, #1
 8021c28:	b292      	uxth	r2, r2
 8021c2a:	3201      	adds	r2, #1
 8021c2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c30:	4410      	add	r0, r2
 8021c32:	e7cd      	b.n	8021bd0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8021c34:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8021c38:	d044      	beq.n	8021cc4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x310>
 8021c3a:	9d04      	ldr	r5, [sp, #16]
 8021c3c:	f100 0a06 	add.w	sl, r0, #6
 8021c40:	1e6e      	subs	r6, r5, #1
 8021c42:	b2b5      	uxth	r5, r6
 8021c44:	9504      	str	r5, [sp, #16]
 8021c46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021c4a:	44aa      	add	sl, r5
 8021c4c:	f100 0903 	add.w	r9, r0, #3
 8021c50:	f819 8c03 	ldrb.w	r8, [r9, #-3]
 8021c54:	f819 6c02 	ldrb.w	r6, [r9, #-2]
 8021c58:	f819 5c01 	ldrb.w	r5, [r9, #-1]
 8021c5c:	fb08 c804 	mla	r8, r8, r4, ip
 8021c60:	fb06 e604 	mla	r6, r6, r4, lr
 8021c64:	fb05 2504 	mla	r5, r5, r4, r2
 8021c68:	fa1f f888 	uxth.w	r8, r8
 8021c6c:	b2b6      	uxth	r6, r6
 8021c6e:	f108 0b01 	add.w	fp, r8, #1
 8021c72:	b2ad      	uxth	r5, r5
 8021c74:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021c78:	f106 0b01 	add.w	fp, r6, #1
 8021c7c:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8021c80:	f105 0b01 	add.w	fp, r5, #1
 8021c84:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8021c88:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021c8c:	1236      	asrs	r6, r6, #8
 8021c8e:	122d      	asrs	r5, r5, #8
 8021c90:	f809 8c03 	strb.w	r8, [r9, #-3]
 8021c94:	f809 6c02 	strb.w	r6, [r9, #-2]
 8021c98:	f809 5c01 	strb.w	r5, [r9, #-1]
 8021c9c:	f109 0903 	add.w	r9, r9, #3
 8021ca0:	45ca      	cmp	sl, r9
 8021ca2:	d1d5      	bne.n	8021c50 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x29c>
 8021ca4:	9a04      	ldr	r2, [sp, #16]
 8021ca6:	3201      	adds	r2, #1
 8021ca8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021cac:	4410      	add	r0, r2
 8021cae:	e78f      	b.n	8021bd0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8021cb0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8021cb4:	b299      	uxth	r1, r3
 8021cb6:	fb94 f2f1 	sdiv	r2, r4, r1
 8021cba:	e6a0      	b.n	80219fe <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x4a>
 8021cbc:	2008745c 	.word	0x2008745c
 8021cc0:	20087456 	.word	0x20087456
 8021cc4:	9e04      	ldr	r6, [sp, #16]
 8021cc6:	1e72      	subs	r2, r6, #1
 8021cc8:	b292      	uxth	r2, r2
 8021cca:	2a02      	cmp	r2, #2
 8021ccc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021cce:	f240 808d 	bls.w	8021dec <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x438>
 8021cd2:	f04f 0800 	mov.w	r8, #0
 8021cd6:	46c6      	mov	lr, r8
 8021cd8:	46c4      	mov	ip, r8
 8021cda:	4602      	mov	r2, r0
 8021cdc:	4644      	mov	r4, r8
 8021cde:	f369 0e07 	bfi	lr, r9, #0, #8
 8021ce2:	f36a 0807 	bfi	r8, sl, #0, #8
 8021ce6:	f365 0c07 	bfi	ip, r5, #0, #8
 8021cea:	f36a 2e0f 	bfi	lr, sl, #8, #8
 8021cee:	f365 280f 	bfi	r8, r5, #8, #8
 8021cf2:	f369 2c0f 	bfi	ip, r9, #8, #8
 8021cf6:	f36a 4c17 	bfi	ip, sl, #16, #8
 8021cfa:	f369 4817 	bfi	r8, r9, #16, #8
 8021cfe:	f365 4e17 	bfi	lr, r5, #16, #8
 8021d02:	f36a 681f 	bfi	r8, sl, #24, #8
 8021d06:	9004      	str	r0, [sp, #16]
 8021d08:	f369 6e1f 	bfi	lr, r9, #24, #8
 8021d0c:	f365 6c1f 	bfi	ip, r5, #24, #8
 8021d10:	f3c6 0a8f 	ubfx	sl, r6, #2, #16
 8021d14:	3401      	adds	r4, #1
 8021d16:	fa1f f984 	uxth.w	r9, r4
 8021d1a:	45d1      	cmp	r9, sl
 8021d1c:	f8c2 c000 	str.w	ip, [r2]
 8021d20:	f8c2 e004 	str.w	lr, [r2, #4]
 8021d24:	f8c2 8008 	str.w	r8, [r2, #8]
 8021d28:	f102 020c 	add.w	r2, r2, #12
 8021d2c:	d3f2      	bcc.n	8021d14 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x360>
 8021d2e:	f026 0403 	bic.w	r4, r6, #3
 8021d32:	b2a4      	uxth	r4, r4
 8021d34:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8021d38:	eba6 0c04 	sub.w	ip, r6, r4
 8021d3c:	42a6      	cmp	r6, r4
 8021d3e:	9604      	str	r6, [sp, #16]
 8021d40:	eb0e 0200 	add.w	r2, lr, r0
 8021d44:	fa1f fc8c 	uxth.w	ip, ip
 8021d48:	d014      	beq.n	8021d74 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c0>
 8021d4a:	f10c 34ff 	add.w	r4, ip, #4294967295
 8021d4e:	f89d 602b 	ldrb.w	r6, [sp, #43]	@ 0x2b
 8021d52:	b2a4      	uxth	r4, r4
 8021d54:	7015      	strb	r5, [r2, #0]
 8021d56:	f882 b001 	strb.w	fp, [r2, #1]
 8021d5a:	7096      	strb	r6, [r2, #2]
 8021d5c:	b154      	cbz	r4, 8021d74 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c0>
 8021d5e:	f1bc 0f02 	cmp.w	ip, #2
 8021d62:	70d5      	strb	r5, [r2, #3]
 8021d64:	f882 b004 	strb.w	fp, [r2, #4]
 8021d68:	7156      	strb	r6, [r2, #5]
 8021d6a:	d003      	beq.n	8021d74 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c0>
 8021d6c:	7195      	strb	r5, [r2, #6]
 8021d6e:	f882 b007 	strb.w	fp, [r2, #7]
 8021d72:	7216      	strb	r6, [r2, #8]
 8021d74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021d76:	3201      	adds	r2, #1
 8021d78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021d7c:	4410      	add	r0, r2
 8021d7e:	e727      	b.n	8021bd0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8021d80:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
 8021d84:	1d85      	adds	r5, r0, #6
 8021d86:	44aa      	add	sl, r5
 8021d88:	f100 0903 	add.w	r9, r0, #3
 8021d8c:	f819 8c03 	ldrb.w	r8, [r9, #-3]
 8021d90:	f819 6c02 	ldrb.w	r6, [r9, #-2]
 8021d94:	f819 5c01 	ldrb.w	r5, [r9, #-1]
 8021d98:	fb08 c804 	mla	r8, r8, r4, ip
 8021d9c:	fb06 e604 	mla	r6, r6, r4, lr
 8021da0:	fb05 2504 	mla	r5, r5, r4, r2
 8021da4:	fa1f f888 	uxth.w	r8, r8
 8021da8:	b2b6      	uxth	r6, r6
 8021daa:	f108 0b01 	add.w	fp, r8, #1
 8021dae:	b2ad      	uxth	r5, r5
 8021db0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021db4:	f106 0b01 	add.w	fp, r6, #1
 8021db8:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8021dbc:	f105 0b01 	add.w	fp, r5, #1
 8021dc0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8021dc4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021dc8:	1236      	asrs	r6, r6, #8
 8021dca:	122d      	asrs	r5, r5, #8
 8021dcc:	f809 8c03 	strb.w	r8, [r9, #-3]
 8021dd0:	f809 6c02 	strb.w	r6, [r9, #-2]
 8021dd4:	f809 5c01 	strb.w	r5, [r9, #-1]
 8021dd8:	f109 0903 	add.w	r9, r9, #3
 8021ddc:	45d1      	cmp	r9, sl
 8021dde:	d1d5      	bne.n	8021d8c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3d8>
 8021de0:	9a04      	ldr	r2, [sp, #16]
 8021de2:	3201      	adds	r2, #1
 8021de4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021de8:	4410      	add	r0, r2
 8021dea:	e6f1      	b.n	8021bd0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8021dec:	46b4      	mov	ip, r6
 8021dee:	4602      	mov	r2, r0
 8021df0:	e7ab      	b.n	8021d4a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x396>
 8021df2:	4b05      	ldr	r3, [pc, #20]	@ (8021e08 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x454>)
 8021df4:	4a05      	ldr	r2, [pc, #20]	@ (8021e0c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x458>)
 8021df6:	f640 2118 	movw	r1, #2584	@ 0xa18
 8021dfa:	4805      	ldr	r0, [pc, #20]	@ (8021e10 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x45c>)
 8021dfc:	f008 fff6 	bl	802adec <__assert_func>
 8021e00:	9f07      	ldr	r7, [sp, #28]
 8021e02:	4619      	mov	r1, r3
 8021e04:	e660      	b.n	8021ac8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 8021e06:	bf00      	nop
 8021e08:	0802df64 	.word	0x0802df64
 8021e0c:	0802f5f0 	.word	0x0802f5f0
 8021e10:	0802de70 	.word	0x0802de70

08021e14 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8021e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e18:	b09d      	sub	sp, #116	@ 0x74
 8021e1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8021e1c:	461c      	mov	r4, r3
 8021e1e:	7812      	ldrb	r2, [r2, #0]
 8021e20:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8021e24:	9114      	str	r1, [sp, #80]	@ 0x50
 8021e26:	9304      	str	r3, [sp, #16]
 8021e28:	2a00      	cmp	r2, #0
 8021e2a:	f040 8207 	bne.w	802223c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x428>
 8021e2e:	b913      	cbnz	r3, 8021e36 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8021e30:	b01d      	add	sp, #116	@ 0x74
 8021e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e36:	6861      	ldr	r1, [r4, #4]
 8021e38:	4681      	mov	r9, r0
 8021e3a:	6820      	ldr	r0, [r4, #0]
 8021e3c:	ab18      	add	r3, sp, #96	@ 0x60
 8021e3e:	c303      	stmia	r3!, {r0, r1}
 8021e40:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021e42:	6818      	ldr	r0, [r3, #0]
 8021e44:	6859      	ldr	r1, [r3, #4]
 8021e46:	ab1a      	add	r3, sp, #104	@ 0x68
 8021e48:	c303      	stmia	r3!, {r0, r1}
 8021e4a:	a818      	add	r0, sp, #96	@ 0x60
 8021e4c:	f7f3 fc54 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e50:	4621      	mov	r1, r4
 8021e52:	a81a      	add	r0, sp, #104	@ 0x68
 8021e54:	f7f3 fc78 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e58:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	@ 0x64
 8021e5c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8021e60:	f340 8151 	ble.w	8022106 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2f2>
 8021e64:	2301      	movs	r3, #1
 8021e66:	b289      	uxth	r1, r1
 8021e68:	9316      	str	r3, [sp, #88]	@ 0x58
 8021e6a:	f9bd 006a 	ldrsh.w	r0, [sp, #106]	@ 0x6a
 8021e6e:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	@ 0x66
 8021e72:	fb90 f4f3 	sdiv	r4, r0, r3
 8021e76:	441a      	add	r2, r3
 8021e78:	3a01      	subs	r2, #1
 8021e7a:	fb92 f2f3 	sdiv	r2, r2, r3
 8021e7e:	b2a4      	uxth	r4, r4
 8021e80:	fb03 0314 	mls	r3, r3, r4, r0
 8021e84:	9415      	str	r4, [sp, #84]	@ 0x54
 8021e86:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 8021e8a:	f8bd 6060 	ldrh.w	r6, [sp, #96]	@ 0x60
 8021e8e:	fb13 4101 	smlabb	r1, r3, r1, r4
 8021e92:	f8bd 5062 	ldrh.w	r5, [sp, #98]	@ 0x62
 8021e96:	4bba      	ldr	r3, [pc, #744]	@ (8022180 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x36c>)
 8021e98:	4434      	add	r4, r6
 8021e9a:	4405      	add	r5, r0
 8021e9c:	6818      	ldr	r0, [r3, #0]
 8021e9e:	f8ad 4068 	strh.w	r4, [sp, #104]	@ 0x68
 8021ea2:	f8ad 506a 	strh.w	r5, [sp, #106]	@ 0x6a
 8021ea6:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	@ 0x6c
 8021eaa:	6803      	ldr	r3, [r0, #0]
 8021eac:	3201      	adds	r2, #1
 8021eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021eb0:	9609      	str	r6, [sp, #36]	@ 0x24
 8021eb2:	fa1f f881 	uxth.w	r8, r1
 8021eb6:	b294      	uxth	r4, r2
 8021eb8:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	@ 0x6e
 8021ebc:	4798      	blx	r3
 8021ebe:	2200      	movs	r2, #0
 8021ec0:	f1b8 0f00 	cmp.w	r8, #0
 8021ec4:	bf0c      	ite	eq
 8021ec6:	4633      	moveq	r3, r6
 8021ec8:	2300      	movne	r3, #0
 8021eca:	49ae      	ldr	r1, [pc, #696]	@ (8022184 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x370>)
 8021ecc:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021ece:	8809      	ldrh	r1, [r1, #0]
 8021ed0:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8021ed4:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	@ 0x68
 8021ed8:	fb01 f505 	mul.w	r5, r1, r5
 8021edc:	fb01 6202 	mla	r2, r1, r2, r6
 8021ee0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021ee4:	1882      	adds	r2, r0, r2
 8021ee6:	b29b      	uxth	r3, r3
 8021ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021eec:	9200      	str	r2, [sp, #0]
 8021eee:	9302      	str	r3, [sp, #8]
 8021ef0:	442a      	add	r2, r5
 8021ef2:	f109 030e 	add.w	r3, r9, #14
 8021ef6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021ef8:	4647      	mov	r7, r8
 8021efa:	4613      	mov	r3, r2
 8021efc:	00a4      	lsls	r4, r4, #2
 8021efe:	1d21      	adds	r1, r4, #4
 8021f00:	9111      	str	r1, [sp, #68]	@ 0x44
 8021f02:	9206      	str	r2, [sp, #24]
 8021f04:	9a00      	ldr	r2, [sp, #0]
 8021f06:	4293      	cmp	r3, r2
 8021f08:	f240 80f5 	bls.w	80220f6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2e2>
 8021f0c:	2301      	movs	r3, #1
 8021f0e:	2600      	movs	r6, #0
 8021f10:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021f12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021f14:	9307      	str	r3, [sp, #28]
 8021f16:	fa10 f282 	uxtah	r2, r0, r2
 8021f1a:	0092      	lsls	r2, r2, #2
 8021f1c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021f1e:	3204      	adds	r2, #4
 8021f20:	4410      	add	r0, r2
 8021f22:	7883      	ldrb	r3, [r0, #2]
 8021f24:	7845      	ldrb	r5, [r0, #1]
 8021f26:	021b      	lsls	r3, r3, #8
 8021f28:	78c0      	ldrb	r0, [r0, #3]
 8021f2a:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8021f2e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021f30:	4304      	orrs	r4, r0
 8021f32:	1928      	adds	r0, r5, r4
 8021f34:	7843      	ldrb	r3, [r0, #1]
 8021f36:	3001      	adds	r0, #1
 8021f38:	9610      	str	r6, [sp, #64]	@ 0x40
 8021f3a:	9003      	str	r0, [sp, #12]
 8021f3c:	4630      	mov	r0, r6
 8021f3e:	2601      	movs	r6, #1
 8021f40:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8021f44:	46b0      	mov	r8, r6
 8021f46:	fbb7 f1f1 	udiv	r1, r7, r1
 8021f4a:	5d2c      	ldrb	r4, [r5, r4]
 8021f4c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021f4e:	021b      	lsls	r3, r3, #8
 8021f50:	5caa      	ldrb	r2, [r5, r2]
 8021f52:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8021f54:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8021f58:	431c      	orrs	r4, r3
 8021f5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021f5c:	1a69      	subs	r1, r5, r1
 8021f5e:	3201      	adds	r2, #1
 8021f60:	f889 400d 	strb.w	r4, [r9, #13]
 8021f64:	9205      	str	r2, [sp, #20]
 8021f66:	b2a4      	uxth	r4, r4
 8021f68:	b28a      	uxth	r2, r1
 8021f6a:	9408      	str	r4, [sp, #32]
 8021f6c:	9212      	str	r2, [sp, #72]	@ 0x48
 8021f6e:	2f00      	cmp	r7, #0
 8021f70:	d034      	beq.n	8021fdc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 8021f72:	42be      	cmp	r6, r7
 8021f74:	f080 80cf 	bcs.w	8022116 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x302>
 8021f78:	1bbf      	subs	r7, r7, r6
 8021f7a:	b2bf      	uxth	r7, r7
 8021f7c:	9b06      	ldr	r3, [sp, #24]
 8021f7e:	9a00      	ldr	r2, [sp, #0]
 8021f80:	4293      	cmp	r3, r2
 8021f82:	f240 80b8 	bls.w	80220f6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2e2>
 8021f86:	9803      	ldr	r0, [sp, #12]
 8021f88:	f1c8 0107 	rsb	r1, r8, #7
 8021f8c:	7842      	ldrb	r2, [r0, #1]
 8021f8e:	7803      	ldrb	r3, [r0, #0]
 8021f90:	408a      	lsls	r2, r1
 8021f92:	fa43 f308 	asr.w	r3, r3, r8
 8021f96:	0052      	lsls	r2, r2, #1
 8021f98:	f108 0801 	add.w	r8, r8, #1
 8021f9c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8021fa0:	b2db      	uxtb	r3, r3
 8021fa2:	fa5f f888 	uxtb.w	r8, r8
 8021fa6:	4313      	orrs	r3, r2
 8021fa8:	f1b8 0f08 	cmp.w	r8, #8
 8021fac:	b29a      	uxth	r2, r3
 8021fae:	f000 80e0 	beq.w	8022172 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x35e>
 8021fb2:	3001      	adds	r0, #1
 8021fb4:	9003      	str	r0, [sp, #12]
 8021fb6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021fb8:	4291      	cmp	r1, r2
 8021fba:	f0c0 80bc 	bcc.w	8022136 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x322>
 8021fbe:	9905      	ldr	r1, [sp, #20]
 8021fc0:	b2db      	uxtb	r3, r3
 8021fc2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021fc6:	f889 300d 	strb.w	r3, [r9, #13]
 8021fca:	f04f 0601 	mov.w	r6, #1
 8021fce:	f0c0 8121 	bcc.w	8022214 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x400>
 8021fd2:	e9cd 6207 	strd	r6, r2, [sp, #28]
 8021fd6:	2000      	movs	r0, #0
 8021fd8:	2f00      	cmp	r7, #0
 8021fda:	d1ca      	bne.n	8021f72 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x15e>
 8021fdc:	9b02      	ldr	r3, [sp, #8]
 8021fde:	429e      	cmp	r6, r3
 8021fe0:	461a      	mov	r2, r3
 8021fe2:	f0c0 80f0 	bcc.w	80221c6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3b2>
 8021fe6:	1af3      	subs	r3, r6, r3
 8021fe8:	b29b      	uxth	r3, r3
 8021fea:	930a      	str	r3, [sp, #40]	@ 0x28
 8021fec:	2a00      	cmp	r2, #0
 8021fee:	f000 80cb 	beq.w	8022188 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x374>
 8021ff2:	4694      	mov	ip, r2
 8021ff4:	970f      	str	r7, [sp, #60]	@ 0x3c
 8021ff6:	9b00      	ldr	r3, [sp, #0]
 8021ff8:	eb00 0e0c 	add.w	lr, r0, ip
 8021ffc:	960c      	str	r6, [sp, #48]	@ 0x30
 8021ffe:	970d      	str	r7, [sp, #52]	@ 0x34
 8022000:	fa1f fe8e 	uxth.w	lr, lr
 8022004:	1cdd      	adds	r5, r3, #3
 8022006:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8022008:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 802200a:	e037      	b.n	802207c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x268>
 802200c:	9a04      	ldr	r2, [sp, #16]
 802200e:	9b01      	ldr	r3, [sp, #4]
 8022010:	fb02 f101 	mul.w	r1, r2, r1
 8022014:	1c4a      	adds	r2, r1, #1
 8022016:	eb02 2121 	add.w	r1, r2, r1, asr #8
 802201a:	1209      	asrs	r1, r1, #8
 802201c:	43ca      	mvns	r2, r1
 802201e:	b289      	uxth	r1, r1
 8022020:	fb13 f301 	smulbb	r3, r3, r1
 8022024:	fb1b fb01 	smulbb	fp, fp, r1
 8022028:	fb1a f101 	smulbb	r1, sl, r1
 802202c:	f815 ac03 	ldrb.w	sl, [r5, #-3]
 8022030:	b2d2      	uxtb	r2, r2
 8022032:	fb0a 3302 	mla	r3, sl, r2, r3
 8022036:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 802203a:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 802203e:	fb04 b402 	mla	r4, r4, r2, fp
 8022042:	fb0a 1102 	mla	r1, sl, r2, r1
 8022046:	b29b      	uxth	r3, r3
 8022048:	b2a4      	uxth	r4, r4
 802204a:	b289      	uxth	r1, r1
 802204c:	f103 0a01 	add.w	sl, r3, #1
 8022050:	f104 0b01 	add.w	fp, r4, #1
 8022054:	1c4a      	adds	r2, r1, #1
 8022056:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 802205a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 802205e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022062:	121b      	asrs	r3, r3, #8
 8022064:	1224      	asrs	r4, r4, #8
 8022066:	1209      	asrs	r1, r1, #8
 8022068:	f805 3c03 	strb.w	r3, [r5, #-3]
 802206c:	f805 4c02 	strb.w	r4, [r5, #-2]
 8022070:	f805 1c01 	strb.w	r1, [r5, #-1]
 8022074:	4570      	cmp	r0, lr
 8022076:	f105 0503 	add.w	r5, r5, #3
 802207a:	d024      	beq.n	80220c6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2b2>
 802207c:	2204      	movs	r2, #4
 802207e:	eb09 0300 	add.w	r3, r9, r0
 8022082:	7b5b      	ldrb	r3, [r3, #13]
 8022084:	3001      	adds	r0, #1
 8022086:	fb12 6303 	smlabb	r3, r2, r3, r6
 802208a:	58fb      	ldr	r3, [r7, r3]
 802208c:	b280      	uxth	r0, r0
 802208e:	0e19      	lsrs	r1, r3, #24
 8022090:	d0f0      	beq.n	8022074 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x260>
 8022092:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8022096:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802209a:	29ff      	cmp	r1, #255	@ 0xff
 802209c:	b2db      	uxtb	r3, r3
 802209e:	fa5f fb84 	uxtb.w	fp, r4
 80220a2:	9301      	str	r3, [sp, #4]
 80220a4:	fa5f fa82 	uxtb.w	sl, r2
 80220a8:	d1b0      	bne.n	802200c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f8>
 80220aa:	9b04      	ldr	r3, [sp, #16]
 80220ac:	2bff      	cmp	r3, #255	@ 0xff
 80220ae:	d1ad      	bne.n	802200c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f8>
 80220b0:	9b01      	ldr	r3, [sp, #4]
 80220b2:	4570      	cmp	r0, lr
 80220b4:	f805 3c03 	strb.w	r3, [r5, #-3]
 80220b8:	f805 4c02 	strb.w	r4, [r5, #-2]
 80220bc:	f805 2c01 	strb.w	r2, [r5, #-1]
 80220c0:	f105 0503 	add.w	r5, r5, #3
 80220c4:	d1da      	bne.n	802207c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x268>
 80220c6:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	@ 0x30
 80220ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80220ce:	fa1f fc8c 	uxth.w	ip, ip
 80220d2:	9b00      	ldr	r3, [sp, #0]
 80220d4:	f10c 0c01 	add.w	ip, ip, #1
 80220d8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80220dc:	4463      	add	r3, ip
 80220de:	9300      	str	r3, [sp, #0]
 80220e0:	9b02      	ldr	r3, [sp, #8]
 80220e2:	429e      	cmp	r6, r3
 80220e4:	d251      	bcs.n	802218a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x376>
 80220e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80220e8:	9a00      	ldr	r2, [sp, #0]
 80220ea:	9302      	str	r3, [sp, #8]
 80220ec:	9b06      	ldr	r3, [sp, #24]
 80220ee:	4670      	mov	r0, lr
 80220f0:	4293      	cmp	r3, r2
 80220f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80220f4:	d81b      	bhi.n	802212e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x31a>
 80220f6:	4b22      	ldr	r3, [pc, #136]	@ (8022180 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x36c>)
 80220f8:	6818      	ldr	r0, [r3, #0]
 80220fa:	6803      	ldr	r3, [r0, #0]
 80220fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80220fe:	4798      	blx	r3
 8022100:	b01d      	add	sp, #116	@ 0x74
 8022102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802210a:	b289      	uxth	r1, r1
 802210c:	fb93 f3f1 	sdiv	r3, r3, r1
 8022110:	b29a      	uxth	r2, r3
 8022112:	9216      	str	r2, [sp, #88]	@ 0x58
 8022114:	e6a9      	b.n	8021e6a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x56>
 8022116:	1bf6      	subs	r6, r6, r7
 8022118:	4438      	add	r0, r7
 802211a:	2700      	movs	r7, #0
 802211c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8022120:	b2b6      	uxth	r6, r6
 8022122:	b280      	uxth	r0, r0
 8022124:	9302      	str	r3, [sp, #8]
 8022126:	9b06      	ldr	r3, [sp, #24]
 8022128:	9a00      	ldr	r2, [sp, #0]
 802212a:	4293      	cmp	r3, r2
 802212c:	d9e3      	bls.n	80220f6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2e2>
 802212e:	2e00      	cmp	r6, #0
 8022130:	f47f af1d 	bne.w	8021f6e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x15a>
 8022134:	e727      	b.n	8021f86 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x172>
 8022136:	9b05      	ldr	r3, [sp, #20]
 8022138:	429a      	cmp	r2, r3
 802213a:	d34d      	bcc.n	80221d8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c4>
 802213c:	9807      	ldr	r0, [sp, #28]
 802213e:	f899 100d 	ldrb.w	r1, [r9, #13]
 8022142:	eb09 0300 	add.w	r3, r9, r0
 8022146:	7359      	strb	r1, [r3, #13]
 8022148:	f899 300d 	ldrb.w	r3, [r9, #13]
 802214c:	1c41      	adds	r1, r0, #1
 802214e:	b28e      	uxth	r6, r1
 8022150:	9c05      	ldr	r4, [sp, #20]
 8022152:	9d08      	ldr	r5, [sp, #32]
 8022154:	eb09 0084 	add.w	r0, r9, r4, lsl #2
 8022158:	3401      	adds	r4, #1
 802215a:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 802215e:	b2a3      	uxth	r3, r4
 8022160:	f8a0 5050 	strh.w	r5, [r0, #80]	@ 0x50
 8022164:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 8022168:	9305      	str	r3, [sp, #20]
 802216a:	e9cd 6207 	strd	r6, r2, [sp, #28]
 802216e:	2000      	movs	r0, #0
 8022170:	e6fd      	b.n	8021f6e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x15a>
 8022172:	4601      	mov	r1, r0
 8022174:	3102      	adds	r1, #2
 8022176:	f04f 0800 	mov.w	r8, #0
 802217a:	9103      	str	r1, [sp, #12]
 802217c:	e71b      	b.n	8021fb6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 802217e:	bf00      	nop
 8022180:	2008745c 	.word	0x2008745c
 8022184:	20087456 	.word	0x20087456
 8022188:	4686      	mov	lr, r0
 802218a:	4b30      	ldr	r3, [pc, #192]	@ (802224c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x438>)
 802218c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802218e:	881b      	ldrh	r3, [r3, #0]
 8022190:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022192:	1a5b      	subs	r3, r3, r1
 8022194:	9900      	ldr	r1, [sp, #0]
 8022196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802219a:	4419      	add	r1, r3
 802219c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802219e:	3201      	adds	r2, #1
 80221a0:	429a      	cmp	r2, r3
 80221a2:	9210      	str	r2, [sp, #64]	@ 0x40
 80221a4:	9100      	str	r1, [sp, #0]
 80221a6:	d038      	beq.n	802221a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x406>
 80221a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 80221ac:	f8bd 7064 	ldrh.w	r7, [sp, #100]	@ 0x64
 80221b0:	4670      	mov	r0, lr
 80221b2:	1aff      	subs	r7, r7, r3
 80221b4:	b2bf      	uxth	r7, r7
 80221b6:	2f00      	cmp	r7, #0
 80221b8:	bf18      	it	ne
 80221ba:	2300      	movne	r3, #0
 80221bc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80221be:	9302      	str	r3, [sp, #8]
 80221c0:	bf08      	it	eq
 80221c2:	2700      	moveq	r7, #0
 80221c4:	e7af      	b.n	8022126 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x312>
 80221c6:	1b9b      	subs	r3, r3, r6
 80221c8:	b29b      	uxth	r3, r3
 80221ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80221cc:	2e00      	cmp	r6, #0
 80221ce:	f43f aed5 	beq.w	8021f7c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x168>
 80221d2:	970a      	str	r7, [sp, #40]	@ 0x28
 80221d4:	46b4      	mov	ip, r6
 80221d6:	e70e      	b.n	8021ff6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e2>
 80221d8:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 80221dc:	f893 604f 	ldrb.w	r6, [r3, #79]	@ 0x4f
 80221e0:	4613      	mov	r3, r2
 80221e2:	2e01      	cmp	r6, #1
 80221e4:	d90d      	bls.n	8022202 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3ee>
 80221e6:	f106 010d 	add.w	r1, r6, #13
 80221ea:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80221ec:	4449      	add	r1, r9
 80221ee:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80221f2:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 80221f6:	f801 0d01 	strb.w	r0, [r1, #-1]!
 80221fa:	428c      	cmp	r4, r1
 80221fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8022200:	d1f5      	bne.n	80221ee <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3da>
 8022202:	9905      	ldr	r1, [sp, #20]
 8022204:	b2db      	uxtb	r3, r3
 8022206:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802220a:	f889 300d 	strb.w	r3, [r9, #13]
 802220e:	b2b6      	uxth	r6, r6
 8022210:	f4bf aedf 	bcs.w	8021fd2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8022214:	9907      	ldr	r1, [sp, #28]
 8022216:	3101      	adds	r1, #1
 8022218:	e79a      	b.n	8022150 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x33c>
 802221a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 802221e:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 8022222:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022224:	1aff      	subs	r7, r7, r3
 8022226:	b2bf      	uxth	r7, r7
 8022228:	2f00      	cmp	r7, #0
 802222a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802222c:	bf18      	it	ne
 802222e:	2300      	movne	r3, #0
 8022230:	3201      	adds	r2, #1
 8022232:	b29b      	uxth	r3, r3
 8022234:	9302      	str	r3, [sp, #8]
 8022236:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022238:	9b06      	ldr	r3, [sp, #24]
 802223a:	e663      	b.n	8021f04 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xf0>
 802223c:	4b04      	ldr	r3, [pc, #16]	@ (8022250 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x43c>)
 802223e:	4a05      	ldr	r2, [pc, #20]	@ (8022254 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x440>)
 8022240:	f640 21ae 	movw	r1, #2734	@ 0xaae
 8022244:	4804      	ldr	r0, [pc, #16]	@ (8022258 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x444>)
 8022246:	f008 fdd1 	bl	802adec <__assert_func>
 802224a:	bf00      	nop
 802224c:	20087456 	.word	0x20087456
 8022250:	0802df64 	.word	0x0802df64
 8022254:	0802f8bc 	.word	0x0802f8bc
 8022258:	0802de70 	.word	0x0802de70

0802225c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 802225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022260:	4617      	mov	r7, r2
 8022262:	b095      	sub	sp, #84	@ 0x54
 8022264:	8812      	ldrh	r2, [r2, #0]
 8022266:	4688      	mov	r8, r1
 8022268:	f89d 107c 	ldrb.w	r1, [sp, #124]	@ 0x7c
 802226c:	2a01      	cmp	r2, #1
 802226e:	461c      	mov	r4, r3
 8022270:	910d      	str	r1, [sp, #52]	@ 0x34
 8022272:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022274:	f040 8105 	bne.w	8022482 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8022278:	6820      	ldr	r0, [r4, #0]
 802227a:	6861      	ldr	r1, [r4, #4]
 802227c:	aa10      	add	r2, sp, #64	@ 0x40
 802227e:	c203      	stmia	r2!, {r0, r1}
 8022280:	6818      	ldr	r0, [r3, #0]
 8022282:	6859      	ldr	r1, [r3, #4]
 8022284:	aa12      	add	r2, sp, #72	@ 0x48
 8022286:	c203      	stmia	r2!, {r0, r1}
 8022288:	a810      	add	r0, sp, #64	@ 0x40
 802228a:	f7f3 fa35 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802228e:	4621      	mov	r1, r4
 8022290:	a812      	add	r0, sp, #72	@ 0x48
 8022292:	f7f3 fa59 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022296:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	@ 0x48
 802229a:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	@ 0x4a
 802229e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80222a2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 80222a6:	487a      	ldr	r0, [pc, #488]	@ (8022490 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80222a8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 80222ac:	4422      	add	r2, r4
 80222ae:	442b      	add	r3, r5
 80222b0:	6800      	ldr	r0, [r0, #0]
 80222b2:	fb11 4105 	smlabb	r1, r1, r5, r4
 80222b6:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 80222ba:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 80222be:	6802      	ldr	r2, [r0, #0]
 80222c0:	4c74      	ldr	r4, [pc, #464]	@ (8022494 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 80222c2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80222c6:	4488      	add	r8, r1
 80222c8:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 80222cc:	42a3      	cmp	r3, r4
 80222ce:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	@ 0x4c
 80222d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80222d4:	f040 809f 	bne.w	8022416 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 80222d8:	6841      	ldr	r1, [r0, #4]
 80222da:	4c6f      	ldr	r4, [pc, #444]	@ (8022498 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80222dc:	680b      	ldr	r3, [r1, #0]
 80222de:	699b      	ldr	r3, [r3, #24]
 80222e0:	42a3      	cmp	r3, r4
 80222e2:	f040 80c0 	bne.w	8022466 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20a>
 80222e6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80222e8:	4798      	blx	r3
 80222ea:	4a6c      	ldr	r2, [pc, #432]	@ (802249c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80222ec:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 80222f0:	8814      	ldrh	r4, [r2, #0]
 80222f2:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	@ 0x48
 80222f6:	fb04 2303 	mla	r3, r4, r3, r2
 80222fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222fe:	4418      	add	r0, r3
 8022300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022302:	2b00      	cmp	r3, #0
 8022304:	dd67      	ble.n	80223d6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 8022306:	2300      	movs	r3, #0
 8022308:	f04f 0903 	mov.w	r9, #3
 802230c:	2104      	movs	r1, #4
 802230e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8022310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022312:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8022316:	930e      	str	r3, [sp, #56]	@ 0x38
 8022318:	f1c5 02ff 	rsb	r2, r5, #255	@ 0xff
 802231c:	444b      	add	r3, r9
 802231e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022320:	b292      	uxth	r2, r2
 8022322:	fa1f fc85 	uxth.w	ip, r5
 8022326:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 802232a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802232c:	2b00      	cmp	r3, #0
 802232e:	dd43      	ble.n	80223b8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 8022330:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022332:	2bff      	cmp	r3, #255	@ 0xff
 8022334:	d057      	beq.n	80223e6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8022336:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022338:	1cc5      	adds	r5, r0, #3
 802233a:	f108 3eff 	add.w	lr, r8, #4294967295
 802233e:	eb00 0a03 	add.w	sl, r0, r3
 8022342:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8022346:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 802234a:	fb19 1303 	smlabb	r3, r9, r3, r1
 802234e:	fb16 f402 	smulbb	r4, r6, r2
 8022352:	5cfe      	ldrb	r6, [r7, r3]
 8022354:	443b      	add	r3, r7
 8022356:	fb06 460c 	mla	r6, r6, ip, r4
 802235a:	b2b6      	uxth	r6, r6
 802235c:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 8022360:	f106 0b01 	add.w	fp, r6, #1
 8022364:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8022368:	1236      	asrs	r6, r6, #8
 802236a:	fb14 fb02 	smulbb	fp, r4, r2
 802236e:	f805 6c03 	strb.w	r6, [r5, #-3]
 8022372:	785c      	ldrb	r4, [r3, #1]
 8022374:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8022378:	fb04 b40c 	mla	r4, r4, ip, fp
 802237c:	b2a4      	uxth	r4, r4
 802237e:	f104 0b01 	add.w	fp, r4, #1
 8022382:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022386:	1224      	asrs	r4, r4, #8
 8022388:	fb16 f602 	smulbb	r6, r6, r2
 802238c:	f805 4c02 	strb.w	r4, [r5, #-2]
 8022390:	789b      	ldrb	r3, [r3, #2]
 8022392:	3503      	adds	r5, #3
 8022394:	fb03 630c 	mla	r3, r3, ip, r6
 8022398:	b29b      	uxth	r3, r3
 802239a:	1c5c      	adds	r4, r3, #1
 802239c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80223a0:	121b      	asrs	r3, r3, #8
 80223a2:	f805 3c04 	strb.w	r3, [r5, #-4]
 80223a6:	45aa      	cmp	sl, r5
 80223a8:	d1cb      	bne.n	8022342 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 80223aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80223ac:	4418      	add	r0, r3
 80223ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80223b0:	4498      	add	r8, r3
 80223b2:	4b3a      	ldr	r3, [pc, #232]	@ (802249c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80223b4:	881c      	ldrh	r4, [r3, #0]
 80223b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80223b8:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	@ 0x44
 80223bc:	eba4 0e03 	sub.w	lr, r4, r3
 80223c0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80223c2:	1aed      	subs	r5, r5, r3
 80223c4:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 80223c8:	4418      	add	r0, r3
 80223ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223cc:	3601      	adds	r6, #1
 80223ce:	42b3      	cmp	r3, r6
 80223d0:	960b      	str	r6, [sp, #44]	@ 0x2c
 80223d2:	44a8      	add	r8, r5
 80223d4:	d1a9      	bne.n	802232a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80223d6:	4b2e      	ldr	r3, [pc, #184]	@ (8022490 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80223d8:	6818      	ldr	r0, [r3, #0]
 80223da:	6803      	ldr	r3, [r0, #0]
 80223dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223de:	4798      	blx	r3
 80223e0:	b015      	add	sp, #84	@ 0x54
 80223e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80223e8:	1cc4      	adds	r4, r0, #3
 80223ea:	f108 35ff 	add.w	r5, r8, #4294967295
 80223ee:	eb00 0e03 	add.w	lr, r0, r3
 80223f2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80223f6:	3403      	adds	r4, #3
 80223f8:	fb19 1303 	smlabb	r3, r9, r3, r1
 80223fc:	5cfe      	ldrb	r6, [r7, r3]
 80223fe:	443b      	add	r3, r7
 8022400:	f804 6c06 	strb.w	r6, [r4, #-6]
 8022404:	785e      	ldrb	r6, [r3, #1]
 8022406:	f804 6c05 	strb.w	r6, [r4, #-5]
 802240a:	789b      	ldrb	r3, [r3, #2]
 802240c:	f804 3c04 	strb.w	r3, [r4, #-4]
 8022410:	45a6      	cmp	lr, r4
 8022412:	d1ee      	bne.n	80223f2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x196>
 8022414:	e7c9      	b.n	80223aa <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x14e>
 8022416:	4798      	blx	r3
 8022418:	4603      	mov	r3, r0
 802241a:	2b01      	cmp	r3, #1
 802241c:	d127      	bne.n	802246e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802241e:	4a20      	ldr	r2, [pc, #128]	@ (80224a0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8022420:	6810      	ldr	r0, [r2, #0]
 8022422:	b340      	cbz	r0, 8022476 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8022424:	f04f 0c0b 	mov.w	ip, #11
 8022428:	2600      	movs	r6, #0
 802242a:	4a1c      	ldr	r2, [pc, #112]	@ (802249c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 802242c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022430:	8814      	ldrh	r4, [r2, #0]
 8022432:	fa1f f28a 	uxth.w	r2, sl
 8022436:	e9cd 2101 	strd	r2, r1, [sp, #4]
 802243a:	f8bd 5044 	ldrh.w	r5, [sp, #68]	@ 0x44
 802243e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022440:	9406      	str	r4, [sp, #24]
 8022442:	f8bd 404a 	ldrh.w	r4, [sp, #74]	@ 0x4a
 8022446:	9308      	str	r3, [sp, #32]
 8022448:	9204      	str	r2, [sp, #16]
 802244a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 802244e:	463a      	mov	r2, r7
 8022450:	4641      	mov	r1, r8
 8022452:	f8cd c01c 	str.w	ip, [sp, #28]
 8022456:	9605      	str	r6, [sp, #20]
 8022458:	9503      	str	r5, [sp, #12]
 802245a:	9400      	str	r4, [sp, #0]
 802245c:	f7f8 ff3a 	bl	801b2d4 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022460:	b015      	add	sp, #84	@ 0x54
 8022462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022466:	4608      	mov	r0, r1
 8022468:	4798      	blx	r3
 802246a:	4603      	mov	r3, r0
 802246c:	e7d5      	b.n	802241a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 802246e:	4b08      	ldr	r3, [pc, #32]	@ (8022490 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8022470:	6818      	ldr	r0, [r3, #0]
 8022472:	6802      	ldr	r2, [r0, #0]
 8022474:	e737      	b.n	80222e6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022476:	4b0b      	ldr	r3, [pc, #44]	@ (80224a4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8022478:	4a0b      	ldr	r2, [pc, #44]	@ (80224a8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802247a:	217c      	movs	r1, #124	@ 0x7c
 802247c:	480b      	ldr	r0, [pc, #44]	@ (80224ac <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 802247e:	f008 fcb5 	bl	802adec <__assert_func>
 8022482:	4b0b      	ldr	r3, [pc, #44]	@ (80224b0 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8022484:	4a0b      	ldr	r2, [pc, #44]	@ (80224b4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8022486:	f640 3191 	movw	r1, #2961	@ 0xb91
 802248a:	480b      	ldr	r0, [pc, #44]	@ (80224b8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 802248c:	f008 fcae 	bl	802adec <__assert_func>
 8022490:	2008745c 	.word	0x2008745c
 8022494:	0801176d 	.word	0x0801176d
 8022498:	0801457f 	.word	0x0801457f
 802249c:	20087456 	.word	0x20087456
 80224a0:	200875c8 	.word	0x200875c8
 80224a4:	0802ddcc 	.word	0x0802ddcc
 80224a8:	0802e638 	.word	0x0802e638
 80224ac:	0802ddf4 	.word	0x0802ddf4
 80224b0:	0802de94 	.word	0x0802de94
 80224b4:	0802eb58 	.word	0x0802eb58
 80224b8:	0802de70 	.word	0x0802de70

080224bc <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 80224bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224c0:	4615      	mov	r5, r2
 80224c2:	7812      	ldrb	r2, [r2, #0]
 80224c4:	b08b      	sub	sp, #44	@ 0x2c
 80224c6:	2a01      	cmp	r2, #1
 80224c8:	461f      	mov	r7, r3
 80224ca:	f89d 6054 	ldrb.w	r6, [sp, #84]	@ 0x54
 80224ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80224d0:	f040 8213 	bne.w	80228fa <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x43e>
 80224d4:	6838      	ldr	r0, [r7, #0]
 80224d6:	468a      	mov	sl, r1
 80224d8:	6879      	ldr	r1, [r7, #4]
 80224da:	aa06      	add	r2, sp, #24
 80224dc:	c203      	stmia	r2!, {r0, r1}
 80224de:	6818      	ldr	r0, [r3, #0]
 80224e0:	6859      	ldr	r1, [r3, #4]
 80224e2:	aa08      	add	r2, sp, #32
 80224e4:	c203      	stmia	r2!, {r0, r1}
 80224e6:	a806      	add	r0, sp, #24
 80224e8:	f7f3 f906 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224ec:	4639      	mov	r1, r7
 80224ee:	a808      	add	r0, sp, #32
 80224f0:	f7f3 f92a 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80224f4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80224f8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80224fc:	f003 0201 	and.w	r2, r3, #1
 8022500:	4614      	mov	r4, r2
 8022502:	9202      	str	r2, [sp, #8]
 8022504:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 8022508:	4423      	add	r3, r4
 802250a:	fb02 1303 	mla	r3, r2, r3, r1
 802250e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8022512:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8022516:	4402      	add	r2, r0
 8022518:	48a9      	ldr	r0, [pc, #676]	@ (80227c0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x304>)
 802251a:	440f      	add	r7, r1
 802251c:	6800      	ldr	r0, [r0, #0]
 802251e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8022522:	f8ad 7020 	strh.w	r7, [sp, #32]
 8022526:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 802252a:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 802252e:	f001 0301 	and.w	r3, r1, #1
 8022532:	6802      	ldr	r2, [r0, #0]
 8022534:	9301      	str	r3, [sp, #4]
 8022536:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802253a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 802253c:	9300      	str	r3, [sp, #0]
 802253e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8022542:	4790      	blx	r2
 8022544:	4a9f      	ldr	r2, [pc, #636]	@ (80227c4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 8022546:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 802254a:	8811      	ldrh	r1, [r2, #0]
 802254c:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 8022550:	2eff      	cmp	r6, #255	@ 0xff
 8022552:	fb01 7303 	mla	r3, r1, r3, r7
 8022556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802255a:	f105 0204 	add.w	r2, r5, #4
 802255e:	4418      	add	r0, r3
 8022560:	f000 8132 	beq.w	80227c8 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>
 8022564:	fb04 f401 	mul.w	r4, r4, r1
 8022568:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802256c:	1901      	adds	r1, r0, r4
 802256e:	4288      	cmp	r0, r1
 8022570:	9104      	str	r1, [sp, #16]
 8022572:	f080 80aa 	bcs.w	80226ca <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8022576:	9b00      	ldr	r3, [sp, #0]
 8022578:	f1c6 07ff 	rsb	r7, r6, #255	@ 0xff
 802257c:	3b01      	subs	r3, #1
 802257e:	b2bf      	uxth	r7, r7
 8022580:	b2b6      	uxth	r6, r6
 8022582:	9305      	str	r3, [sp, #20]
 8022584:	9b01      	ldr	r3, [sp, #4]
 8022586:	2b00      	cmp	r3, #0
 8022588:	f040 80e8 	bne.w	802275c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2a0>
 802258c:	46d1      	mov	r9, sl
 802258e:	f8dd 8000 	ldr.w	r8, [sp]
 8022592:	f1b8 0f01 	cmp.w	r8, #1
 8022596:	f340 8082 	ble.w	802269e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e2>
 802259a:	f1a8 0302 	sub.w	r3, r8, #2
 802259e:	ea4f 0853 	mov.w	r8, r3, lsr #1
 80225a2:	9303      	str	r3, [sp, #12]
 80225a4:	f100 0e0c 	add.w	lr, r0, #12
 80225a8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80225ac:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 80225b0:	1d84      	adds	r4, r0, #6
 80225b2:	f109 3cff 	add.w	ip, r9, #4294967295
 80225b6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80225ba:	f814 5c06 	ldrb.w	r5, [r4, #-6]
 80225be:	091b      	lsrs	r3, r3, #4
 80225c0:	fb15 f507 	smulbb	r5, r5, r7
 80225c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225c8:	5cd1      	ldrb	r1, [r2, r3]
 80225ca:	4413      	add	r3, r2
 80225cc:	fb01 5506 	mla	r5, r1, r6, r5
 80225d0:	b2ad      	uxth	r5, r5
 80225d2:	f814 1c05 	ldrb.w	r1, [r4, #-5]
 80225d6:	f105 0b01 	add.w	fp, r5, #1
 80225da:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80225de:	122d      	asrs	r5, r5, #8
 80225e0:	fb11 fb07 	smulbb	fp, r1, r7
 80225e4:	f804 5c06 	strb.w	r5, [r4, #-6]
 80225e8:	7859      	ldrb	r1, [r3, #1]
 80225ea:	f814 5c04 	ldrb.w	r5, [r4, #-4]
 80225ee:	fb01 b106 	mla	r1, r1, r6, fp
 80225f2:	b289      	uxth	r1, r1
 80225f4:	f101 0b01 	add.w	fp, r1, #1
 80225f8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80225fc:	1209      	asrs	r1, r1, #8
 80225fe:	fb15 f507 	smulbb	r5, r5, r7
 8022602:	f804 1c05 	strb.w	r1, [r4, #-5]
 8022606:	789b      	ldrb	r3, [r3, #2]
 8022608:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802260c:	fb03 5306 	mla	r3, r3, r6, r5
 8022610:	b29b      	uxth	r3, r3
 8022612:	1c5d      	adds	r5, r3, #1
 8022614:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8022618:	121b      	asrs	r3, r3, #8
 802261a:	f804 3c04 	strb.w	r3, [r4, #-4]
 802261e:	f89c 3000 	ldrb.w	r3, [ip]
 8022622:	fb11 f107 	smulbb	r1, r1, r7
 8022626:	f003 030f 	and.w	r3, r3, #15
 802262a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802262e:	5cd5      	ldrb	r5, [r2, r3]
 8022630:	4413      	add	r3, r2
 8022632:	fb05 1106 	mla	r1, r5, r6, r1
 8022636:	b28d      	uxth	r5, r1
 8022638:	f105 0b01 	add.w	fp, r5, #1
 802263c:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8022640:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022644:	122d      	asrs	r5, r5, #8
 8022646:	fb11 fb07 	smulbb	fp, r1, r7
 802264a:	f804 5c03 	strb.w	r5, [r4, #-3]
 802264e:	7859      	ldrb	r1, [r3, #1]
 8022650:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8022654:	fb01 b106 	mla	r1, r1, r6, fp
 8022658:	b289      	uxth	r1, r1
 802265a:	f101 0b01 	add.w	fp, r1, #1
 802265e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022662:	1209      	asrs	r1, r1, #8
 8022664:	fb15 f507 	smulbb	r5, r5, r7
 8022668:	f804 1c02 	strb.w	r1, [r4, #-2]
 802266c:	789b      	ldrb	r3, [r3, #2]
 802266e:	3406      	adds	r4, #6
 8022670:	fb03 5306 	mla	r3, r3, r6, r5
 8022674:	b29b      	uxth	r3, r3
 8022676:	1c59      	adds	r1, r3, #1
 8022678:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802267c:	121b      	asrs	r3, r3, #8
 802267e:	f804 3c07 	strb.w	r3, [r4, #-7]
 8022682:	45a6      	cmp	lr, r4
 8022684:	d197      	bne.n	80225b6 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xfa>
 8022686:	f108 0301 	add.w	r3, r8, #1
 802268a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 802268e:	4499      	add	r9, r3
 8022690:	9b03      	ldr	r3, [sp, #12]
 8022692:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 8022696:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802269a:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 802269e:	f1b8 0f01 	cmp.w	r8, #1
 80226a2:	d01a      	beq.n	80226da <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21e>
 80226a4:	4b47      	ldr	r3, [pc, #284]	@ (80227c4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 80226a6:	9c00      	ldr	r4, [sp, #0]
 80226a8:	8819      	ldrh	r1, [r3, #0]
 80226aa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80226ae:	1b09      	subs	r1, r1, r4
 80226b0:	9c02      	ldr	r4, [sp, #8]
 80226b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80226b6:	4423      	add	r3, r4
 80226b8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80226bc:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 80226c0:	9b04      	ldr	r3, [sp, #16]
 80226c2:	4408      	add	r0, r1
 80226c4:	4283      	cmp	r3, r0
 80226c6:	f63f af5d 	bhi.w	8022584 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 80226ca:	4b3d      	ldr	r3, [pc, #244]	@ (80227c0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x304>)
 80226cc:	6818      	ldr	r0, [r3, #0]
 80226ce:	6803      	ldr	r3, [r0, #0]
 80226d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80226d2:	4798      	blx	r3
 80226d4:	b00b      	add	sp, #44	@ 0x2c
 80226d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226da:	f899 3000 	ldrb.w	r3, [r9]
 80226de:	7801      	ldrb	r1, [r0, #0]
 80226e0:	091b      	lsrs	r3, r3, #4
 80226e2:	fb11 f407 	smulbb	r4, r1, r7
 80226e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80226ea:	5cd1      	ldrb	r1, [r2, r3]
 80226ec:	4413      	add	r3, r2
 80226ee:	fb01 4106 	mla	r1, r1, r6, r4
 80226f2:	b289      	uxth	r1, r1
 80226f4:	7844      	ldrb	r4, [r0, #1]
 80226f6:	1c4d      	adds	r5, r1, #1
 80226f8:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80226fc:	1209      	asrs	r1, r1, #8
 80226fe:	fb14 f507 	smulbb	r5, r4, r7
 8022702:	7001      	strb	r1, [r0, #0]
 8022704:	785c      	ldrb	r4, [r3, #1]
 8022706:	7881      	ldrb	r1, [r0, #2]
 8022708:	fb04 5406 	mla	r4, r4, r6, r5
 802270c:	b2a4      	uxth	r4, r4
 802270e:	1c65      	adds	r5, r4, #1
 8022710:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8022714:	1224      	asrs	r4, r4, #8
 8022716:	fb11 f507 	smulbb	r5, r1, r7
 802271a:	7044      	strb	r4, [r0, #1]
 802271c:	7899      	ldrb	r1, [r3, #2]
 802271e:	4b29      	ldr	r3, [pc, #164]	@ (80227c4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 8022720:	fb01 5106 	mla	r1, r1, r6, r5
 8022724:	b289      	uxth	r1, r1
 8022726:	1c4c      	adds	r4, r1, #1
 8022728:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 802272c:	881b      	ldrh	r3, [r3, #0]
 802272e:	9c00      	ldr	r4, [sp, #0]
 8022730:	1209      	asrs	r1, r1, #8
 8022732:	1b1b      	subs	r3, r3, r4
 8022734:	7081      	strb	r1, [r0, #2]
 8022736:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802273a:	3303      	adds	r3, #3
 802273c:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8022740:	9c02      	ldr	r4, [sp, #8]
 8022742:	4418      	add	r0, r3
 8022744:	9b04      	ldr	r3, [sp, #16]
 8022746:	4421      	add	r1, r4
 8022748:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 802274c:	4283      	cmp	r3, r0
 802274e:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
 8022752:	d9ba      	bls.n	80226ca <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8022754:	9b01      	ldr	r3, [sp, #4]
 8022756:	2b00      	cmp	r3, #0
 8022758:	f43f af18 	beq.w	802258c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xd0>
 802275c:	f89a 3000 	ldrb.w	r3, [sl]
 8022760:	7804      	ldrb	r4, [r0, #0]
 8022762:	f003 030f 	and.w	r3, r3, #15
 8022766:	fb14 f107 	smulbb	r1, r4, r7
 802276a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802276e:	5cd4      	ldrb	r4, [r2, r3]
 8022770:	4413      	add	r3, r2
 8022772:	fb04 1406 	mla	r4, r4, r6, r1
 8022776:	b2a4      	uxth	r4, r4
 8022778:	7841      	ldrb	r1, [r0, #1]
 802277a:	1c65      	adds	r5, r4, #1
 802277c:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8022780:	1224      	asrs	r4, r4, #8
 8022782:	fb11 fc07 	smulbb	ip, r1, r7
 8022786:	7004      	strb	r4, [r0, #0]
 8022788:	7859      	ldrb	r1, [r3, #1]
 802278a:	7885      	ldrb	r5, [r0, #2]
 802278c:	fb01 c106 	mla	r1, r1, r6, ip
 8022790:	b289      	uxth	r1, r1
 8022792:	1c4c      	adds	r4, r1, #1
 8022794:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8022798:	1209      	asrs	r1, r1, #8
 802279a:	fb15 f407 	smulbb	r4, r5, r7
 802279e:	7041      	strb	r1, [r0, #1]
 80227a0:	789b      	ldrb	r3, [r3, #2]
 80227a2:	f10a 0901 	add.w	r9, sl, #1
 80227a6:	fb03 4306 	mla	r3, r3, r6, r4
 80227aa:	b29b      	uxth	r3, r3
 80227ac:	1c59      	adds	r1, r3, #1
 80227ae:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80227b2:	121b      	asrs	r3, r3, #8
 80227b4:	7083      	strb	r3, [r0, #2]
 80227b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80227ba:	3003      	adds	r0, #3
 80227bc:	e6e9      	b.n	8022592 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xd6>
 80227be:	bf00      	nop
 80227c0:	2008745c 	.word	0x2008745c
 80227c4:	20087456 	.word	0x20087456
 80227c8:	fb04 f101 	mul.w	r1, r4, r1
 80227cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80227d0:	eb00 0e01 	add.w	lr, r0, r1
 80227d4:	4570      	cmp	r0, lr
 80227d6:	f4bf af78 	bcs.w	80226ca <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 80227da:	9b00      	ldr	r3, [sp, #0]
 80227dc:	4698      	mov	r8, r3
 80227de:	f103 39ff 	add.w	r9, r3, #4294967295
 80227e2:	9b01      	ldr	r3, [sp, #4]
 80227e4:	2b00      	cmp	r3, #0
 80227e6:	d072      	beq.n	80228ce <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x412>
 80227e8:	464e      	mov	r6, r9
 80227ea:	f89a 3000 	ldrb.w	r3, [sl]
 80227ee:	f10a 0c01 	add.w	ip, sl, #1
 80227f2:	f003 030f 	and.w	r3, r3, #15
 80227f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80227fa:	5cd1      	ldrb	r1, [r2, r3]
 80227fc:	4413      	add	r3, r2
 80227fe:	7001      	strb	r1, [r0, #0]
 8022800:	7859      	ldrb	r1, [r3, #1]
 8022802:	3003      	adds	r0, #3
 8022804:	f800 1c02 	strb.w	r1, [r0, #-2]
 8022808:	789b      	ldrb	r3, [r3, #2]
 802280a:	f800 3c01 	strb.w	r3, [r0, #-1]
 802280e:	2e01      	cmp	r6, #1
 8022810:	dd39      	ble.n	8022886 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3ca>
 8022812:	3e02      	subs	r6, #2
 8022814:	0877      	lsrs	r7, r6, #1
 8022816:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 802281a:	f100 050c 	add.w	r5, r0, #12
 802281e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8022822:	1d81      	adds	r1, r0, #6
 8022824:	f10c 34ff 	add.w	r4, ip, #4294967295
 8022828:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802282c:	3106      	adds	r1, #6
 802282e:	091b      	lsrs	r3, r3, #4
 8022830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022834:	f812 b003 	ldrb.w	fp, [r2, r3]
 8022838:	4413      	add	r3, r2
 802283a:	f801 bc0c 	strb.w	fp, [r1, #-12]
 802283e:	f893 b001 	ldrb.w	fp, [r3, #1]
 8022842:	f801 bc0b 	strb.w	fp, [r1, #-11]
 8022846:	789b      	ldrb	r3, [r3, #2]
 8022848:	f801 3c0a 	strb.w	r3, [r1, #-10]
 802284c:	7823      	ldrb	r3, [r4, #0]
 802284e:	f003 030f 	and.w	r3, r3, #15
 8022852:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022856:	f812 b003 	ldrb.w	fp, [r2, r3]
 802285a:	4413      	add	r3, r2
 802285c:	f801 bc09 	strb.w	fp, [r1, #-9]
 8022860:	f893 b001 	ldrb.w	fp, [r3, #1]
 8022864:	f801 bc08 	strb.w	fp, [r1, #-8]
 8022868:	789b      	ldrb	r3, [r3, #2]
 802286a:	f801 3c07 	strb.w	r3, [r1, #-7]
 802286e:	428d      	cmp	r5, r1
 8022870:	d1da      	bne.n	8022828 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x36c>
 8022872:	1c7b      	adds	r3, r7, #1
 8022874:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8022878:	ebc7 77c7 	rsb	r7, r7, r7, lsl #31
 802287c:	449c      	add	ip, r3
 802287e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022882:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 8022886:	2e01      	cmp	r6, #1
 8022888:	d124      	bne.n	80228d4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x418>
 802288a:	f89c 3000 	ldrb.w	r3, [ip]
 802288e:	9c02      	ldr	r4, [sp, #8]
 8022890:	091b      	lsrs	r3, r3, #4
 8022892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022896:	5cd1      	ldrb	r1, [r2, r3]
 8022898:	4413      	add	r3, r2
 802289a:	7001      	strb	r1, [r0, #0]
 802289c:	7859      	ldrb	r1, [r3, #1]
 802289e:	7041      	strb	r1, [r0, #1]
 80228a0:	7899      	ldrb	r1, [r3, #2]
 80228a2:	4b19      	ldr	r3, [pc, #100]	@ (8022908 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x44c>)
 80228a4:	7081      	strb	r1, [r0, #2]
 80228a6:	881b      	ldrh	r3, [r3, #0]
 80228a8:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 80228ac:	eba3 0308 	sub.w	r3, r3, r8
 80228b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80228b4:	3303      	adds	r3, #3
 80228b6:	4421      	add	r1, r4
 80228b8:	4418      	add	r0, r3
 80228ba:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80228be:	4586      	cmp	lr, r0
 80228c0:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
 80228c4:	f67f af01 	bls.w	80226ca <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 80228c8:	9b01      	ldr	r3, [sp, #4]
 80228ca:	2b00      	cmp	r3, #0
 80228cc:	d18c      	bne.n	80227e8 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x32c>
 80228ce:	46d4      	mov	ip, sl
 80228d0:	4646      	mov	r6, r8
 80228d2:	e79c      	b.n	802280e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x352>
 80228d4:	4b0c      	ldr	r3, [pc, #48]	@ (8022908 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x44c>)
 80228d6:	9c02      	ldr	r4, [sp, #8]
 80228d8:	8819      	ldrh	r1, [r3, #0]
 80228da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80228de:	eba1 0108 	sub.w	r1, r1, r8
 80228e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80228e6:	4423      	add	r3, r4
 80228e8:	4408      	add	r0, r1
 80228ea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80228ee:	4586      	cmp	lr, r0
 80228f0:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 80228f4:	f63f af75 	bhi.w	80227e2 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x326>
 80228f8:	e6e7      	b.n	80226ca <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 80228fa:	4b04      	ldr	r3, [pc, #16]	@ (802290c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x450>)
 80228fc:	4a04      	ldr	r2, [pc, #16]	@ (8022910 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x454>)
 80228fe:	f640 31da 	movw	r1, #3034	@ 0xbda
 8022902:	4804      	ldr	r0, [pc, #16]	@ (8022914 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x458>)
 8022904:	f008 fa72 	bl	802adec <__assert_func>
 8022908:	20087456 	.word	0x20087456
 802290c:	0802df34 	.word	0x0802df34
 8022910:	0802ee98 	.word	0x0802ee98
 8022914:	0802de70 	.word	0x0802de70

08022918 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802291c:	b08d      	sub	sp, #52	@ 0x34
 802291e:	7814      	ldrb	r4, [r2, #0]
 8022920:	461d      	mov	r5, r3
 8022922:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
 8022926:	2c01      	cmp	r4, #1
 8022928:	9204      	str	r2, [sp, #16]
 802292a:	9302      	str	r3, [sp, #8]
 802292c:	f040 8133 	bne.w	8022b96 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x27e>
 8022930:	b913      	cbnz	r3, 8022938 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20>
 8022932:	b00d      	add	sp, #52	@ 0x34
 8022934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022938:	6828      	ldr	r0, [r5, #0]
 802293a:	4689      	mov	r9, r1
 802293c:	6869      	ldr	r1, [r5, #4]
 802293e:	ab08      	add	r3, sp, #32
 8022940:	c303      	stmia	r3!, {r0, r1}
 8022942:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022944:	6818      	ldr	r0, [r3, #0]
 8022946:	6859      	ldr	r1, [r3, #4]
 8022948:	ab0a      	add	r3, sp, #40	@ 0x28
 802294a:	c303      	stmia	r3!, {r0, r1}
 802294c:	a808      	add	r0, sp, #32
 802294e:	f7f2 fed3 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022952:	4629      	mov	r1, r5
 8022954:	a80a      	add	r0, sp, #40	@ 0x28
 8022956:	f7f2 fef7 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802295a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802295e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022966:	bfdd      	ittte	le
 8022968:	f44f 6480 	movle.w	r4, #1024	@ 0x400
 802296c:	b29a      	uxthle	r2, r3
 802296e:	fb94 f4f2 	sdivle	r4, r4, r2
 8022972:	b29a      	uxthgt	r2, r3
 8022974:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8022978:	fb93 f0f4 	sdiv	r0, r3, r4
 802297c:	b286      	uxth	r6, r0
 802297e:	fb04 3816 	mls	r8, r4, r6, r3
 8022982:	fb18 1802 	smlabb	r8, r8, r2, r1
 8022986:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	@ 0x26
 802298a:	fa1f f888 	uxth.w	r8, r8
 802298e:	4422      	add	r2, r4
 8022990:	3a01      	subs	r2, #1
 8022992:	fb92 f4f4 	sdiv	r4, r2, r4
 8022996:	2e00      	cmp	r6, #0
 8022998:	f040 80f7 	bne.w	8022b8a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x272>
 802299c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80229a0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 80229a4:	4413      	add	r3, r2
 80229a6:	4a7f      	ldr	r2, [pc, #508]	@ (8022ba4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80229a8:	4401      	add	r1, r0
 80229aa:	6810      	ldr	r0, [r2, #0]
 80229ac:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80229b0:	f8ad 1028 	strh.w	r1, [sp, #40]	@ 0x28
 80229b4:	4616      	mov	r6, r2
 80229b6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80229ba:	6803      	ldr	r3, [r0, #0]
 80229bc:	9207      	str	r2, [sp, #28]
 80229be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80229c0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80229c4:	4798      	blx	r3
 80229c6:	f1b8 0f00 	cmp.w	r8, #0
 80229ca:	bf0c      	ite	eq
 80229cc:	4633      	moveq	r3, r6
 80229ce:	2300      	movne	r3, #0
 80229d0:	4975      	ldr	r1, [pc, #468]	@ (8022ba8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 80229d2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80229d6:	8809      	ldrh	r1, [r1, #0]
 80229d8:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80229dc:	fb01 f505 	mul.w	r5, r1, r5
 80229e0:	fb01 6202 	mla	r2, r1, r2, r6
 80229e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229e8:	4410      	add	r0, r2
 80229ea:	b2a4      	uxth	r4, r4
 80229ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80229f0:	1942      	adds	r2, r0, r5
 80229f2:	00a4      	lsls	r4, r4, #2
 80229f4:	1d21      	adds	r1, r4, #4
 80229f6:	4290      	cmp	r0, r2
 80229f8:	9200      	str	r2, [sp, #0]
 80229fa:	9106      	str	r1, [sp, #24]
 80229fc:	fa1f fa83 	uxth.w	sl, r3
 8022a00:	d225      	bcs.n	8022a4e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x136>
 8022a02:	2500      	movs	r5, #0
 8022a04:	4686      	mov	lr, r0
 8022a06:	4640      	mov	r0, r8
 8022a08:	9b02      	ldr	r3, [sp, #8]
 8022a0a:	9501      	str	r5, [sp, #4]
 8022a0c:	f1c3 07ff 	rsb	r7, r3, #255	@ 0xff
 8022a10:	b2bf      	uxth	r7, r7
 8022a12:	fa1f fc83 	uxth.w	ip, r3
 8022a16:	b985      	cbnz	r5, 8022a3a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x122>
 8022a18:	f899 2000 	ldrb.w	r2, [r9]
 8022a1c:	0995      	lsrs	r5, r2, #6
 8022a1e:	1e6b      	subs	r3, r5, #1
 8022a20:	2b02      	cmp	r3, #2
 8022a22:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022a26:	bf88      	it	hi
 8022a28:	f899 5001 	ldrbhi.w	r5, [r9, #1]
 8022a2c:	9201      	str	r2, [sp, #4]
 8022a2e:	bf9a      	itte	ls
 8022a30:	f109 0901 	addls.w	r9, r9, #1
 8022a34:	b2ad      	uxthls	r5, r5
 8022a36:	f109 0902 	addhi.w	r9, r9, #2
 8022a3a:	b180      	cbz	r0, 8022a5e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x146>
 8022a3c:	4285      	cmp	r5, r0
 8022a3e:	f080 809e 	bcs.w	8022b7e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x266>
 8022a42:	1b40      	subs	r0, r0, r5
 8022a44:	2500      	movs	r5, #0
 8022a46:	b280      	uxth	r0, r0
 8022a48:	9b00      	ldr	r3, [sp, #0]
 8022a4a:	4573      	cmp	r3, lr
 8022a4c:	d8e3      	bhi.n	8022a16 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xfe>
 8022a4e:	4b55      	ldr	r3, [pc, #340]	@ (8022ba4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8022a50:	6818      	ldr	r0, [r3, #0]
 8022a52:	6803      	ldr	r3, [r0, #0]
 8022a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022a56:	4798      	blx	r3
 8022a58:	b00d      	add	sp, #52	@ 0x34
 8022a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a5e:	2303      	movs	r3, #3
 8022a60:	4619      	mov	r1, r3
 8022a62:	9a06      	ldr	r2, [sp, #24]
 8022a64:	9b01      	ldr	r3, [sp, #4]
 8022a66:	4555      	cmp	r5, sl
 8022a68:	fb11 2403 	smlabb	r4, r1, r3, r2
 8022a6c:	9b04      	ldr	r3, [sp, #16]
 8022a6e:	441c      	add	r4, r3
 8022a70:	d360      	bcc.n	8022b34 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8022a72:	eba5 030a 	sub.w	r3, r5, sl
 8022a76:	b29b      	uxth	r3, r3
 8022a78:	9303      	str	r3, [sp, #12]
 8022a7a:	9b02      	ldr	r3, [sp, #8]
 8022a7c:	4656      	mov	r6, sl
 8022a7e:	2bff      	cmp	r3, #255	@ 0xff
 8022a80:	9005      	str	r0, [sp, #20]
 8022a82:	d060      	beq.n	8022b46 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 8022a84:	2e00      	cmp	r6, #0
 8022a86:	d03b      	beq.n	8022b00 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e8>
 8022a88:	3e01      	subs	r6, #1
 8022a8a:	b2b6      	uxth	r6, r6
 8022a8c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8022a90:	f10e 0806 	add.w	r8, lr, #6
 8022a94:	4498      	add	r8, r3
 8022a96:	f10e 0103 	add.w	r1, lr, #3
 8022a9a:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8022a9e:	7823      	ldrb	r3, [r4, #0]
 8022aa0:	fb12 f207 	smulbb	r2, r2, r7
 8022aa4:	fb03 230c 	mla	r3, r3, ip, r2
 8022aa8:	b29b      	uxth	r3, r3
 8022aaa:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 8022aae:	f103 0b01 	add.w	fp, r3, #1
 8022ab2:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8022ab6:	121b      	asrs	r3, r3, #8
 8022ab8:	fb12 fb07 	smulbb	fp, r2, r7
 8022abc:	f801 3c03 	strb.w	r3, [r1, #-3]
 8022ac0:	7862      	ldrb	r2, [r4, #1]
 8022ac2:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8022ac6:	fb02 b20c 	mla	r2, r2, ip, fp
 8022aca:	b292      	uxth	r2, r2
 8022acc:	f102 0b01 	add.w	fp, r2, #1
 8022ad0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022ad4:	1212      	asrs	r2, r2, #8
 8022ad6:	fb13 fb07 	smulbb	fp, r3, r7
 8022ada:	f801 2c02 	strb.w	r2, [r1, #-2]
 8022ade:	78a3      	ldrb	r3, [r4, #2]
 8022ae0:	3103      	adds	r1, #3
 8022ae2:	fb03 b30c 	mla	r3, r3, ip, fp
 8022ae6:	b29b      	uxth	r3, r3
 8022ae8:	1c5a      	adds	r2, r3, #1
 8022aea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022aee:	121b      	asrs	r3, r3, #8
 8022af0:	f801 3c04 	strb.w	r3, [r1, #-4]
 8022af4:	4541      	cmp	r1, r8
 8022af6:	d1d0      	bne.n	8022a9a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x182>
 8022af8:	3601      	adds	r6, #1
 8022afa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022afe:	44b6      	add	lr, r6
 8022b00:	4555      	cmp	r5, sl
 8022b02:	d313      	bcc.n	8022b2c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x214>
 8022b04:	9a07      	ldr	r2, [sp, #28]
 8022b06:	4b28      	ldr	r3, [pc, #160]	@ (8022ba8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 8022b08:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 8022b0c:	fa1f fa82 	uxth.w	sl, r2
 8022b10:	881b      	ldrh	r3, [r3, #0]
 8022b12:	eba0 000a 	sub.w	r0, r0, sl
 8022b16:	b280      	uxth	r0, r0
 8022b18:	1a9b      	subs	r3, r3, r2
 8022b1a:	2800      	cmp	r0, #0
 8022b1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b20:	9d03      	ldr	r5, [sp, #12]
 8022b22:	bf18      	it	ne
 8022b24:	f04f 0a00 	movne.w	sl, #0
 8022b28:	449e      	add	lr, r3
 8022b2a:	e78d      	b.n	8022a48 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x130>
 8022b2c:	9d03      	ldr	r5, [sp, #12]
 8022b2e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8022b32:	e789      	b.n	8022a48 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x130>
 8022b34:	ebaa 0305 	sub.w	r3, sl, r5
 8022b38:	b29b      	uxth	r3, r3
 8022b3a:	9305      	str	r3, [sp, #20]
 8022b3c:	9b02      	ldr	r3, [sp, #8]
 8022b3e:	462e      	mov	r6, r5
 8022b40:	2bff      	cmp	r3, #255	@ 0xff
 8022b42:	9003      	str	r0, [sp, #12]
 8022b44:	d19e      	bne.n	8022a84 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x16c>
 8022b46:	2e00      	cmp	r6, #0
 8022b48:	d0da      	beq.n	8022b00 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e8>
 8022b4a:	3e01      	subs	r6, #1
 8022b4c:	b2b2      	uxth	r2, r6
 8022b4e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8022b52:	f10e 0606 	add.w	r6, lr, #6
 8022b56:	441e      	add	r6, r3
 8022b58:	f10e 0303 	add.w	r3, lr, #3
 8022b5c:	7821      	ldrb	r1, [r4, #0]
 8022b5e:	3303      	adds	r3, #3
 8022b60:	f803 1c06 	strb.w	r1, [r3, #-6]
 8022b64:	7861      	ldrb	r1, [r4, #1]
 8022b66:	f803 1c05 	strb.w	r1, [r3, #-5]
 8022b6a:	78a1      	ldrb	r1, [r4, #2]
 8022b6c:	f803 1c04 	strb.w	r1, [r3, #-4]
 8022b70:	429e      	cmp	r6, r3
 8022b72:	d1f3      	bne.n	8022b5c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>
 8022b74:	3201      	adds	r2, #1
 8022b76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b7a:	4496      	add	lr, r2
 8022b7c:	e7c0      	b.n	8022b00 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e8>
 8022b7e:	1a2d      	subs	r5, r5, r0
 8022b80:	b2ad      	uxth	r5, r5
 8022b82:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8022b86:	2000      	movs	r0, #0
 8022b88:	e75e      	b.n	8022a48 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x130>
 8022b8a:	9a04      	ldr	r2, [sp, #16]
 8022b8c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8022b90:	ba12      	rev	r2, r2
 8022b92:	4491      	add	r9, r2
 8022b94:	e702      	b.n	802299c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x84>
 8022b96:	4b05      	ldr	r3, [pc, #20]	@ (8022bac <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 8022b98:	4a05      	ldr	r2, [pc, #20]	@ (8022bb0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8022b9a:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 8022b9e:	4805      	ldr	r0, [pc, #20]	@ (8022bb4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 8022ba0:	f008 f924 	bl	802adec <__assert_func>
 8022ba4:	2008745c 	.word	0x2008745c
 8022ba8:	20087456 	.word	0x20087456
 8022bac:	0802df34 	.word	0x0802df34
 8022bb0:	0802f03c 	.word	0x0802f03c
 8022bb4:	0802de70 	.word	0x0802de70

08022bb8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bbc:	b09b      	sub	sp, #108	@ 0x6c
 8022bbe:	7814      	ldrb	r4, [r2, #0]
 8022bc0:	461d      	mov	r5, r3
 8022bc2:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8022bc6:	2c01      	cmp	r4, #1
 8022bc8:	9210      	str	r2, [sp, #64]	@ 0x40
 8022bca:	9112      	str	r1, [sp, #72]	@ 0x48
 8022bcc:	930d      	str	r3, [sp, #52]	@ 0x34
 8022bce:	f040 820f 	bne.w	8022ff0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x438>
 8022bd2:	b913      	cbnz	r3, 8022bda <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8022bd4:	b01b      	add	sp, #108	@ 0x6c
 8022bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bda:	6869      	ldr	r1, [r5, #4]
 8022bdc:	4681      	mov	r9, r0
 8022bde:	6828      	ldr	r0, [r5, #0]
 8022be0:	ab16      	add	r3, sp, #88	@ 0x58
 8022be2:	c303      	stmia	r3!, {r0, r1}
 8022be4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022be6:	6818      	ldr	r0, [r3, #0]
 8022be8:	6859      	ldr	r1, [r3, #4]
 8022bea:	ab18      	add	r3, sp, #96	@ 0x60
 8022bec:	c303      	stmia	r3!, {r0, r1}
 8022bee:	a816      	add	r0, sp, #88	@ 0x58
 8022bf0:	f7f2 fd82 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022bf4:	4629      	mov	r1, r5
 8022bf6:	a818      	add	r0, sp, #96	@ 0x60
 8022bf8:	f7f2 fda6 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022bfc:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	@ 0x5c
 8022c00:	f5ba 6f80 	cmp.w	sl, #1024	@ 0x400
 8022c04:	f340 814e 	ble.w	8022ea4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2ec>
 8022c08:	fa1f f08a 	uxth.w	r0, sl
 8022c0c:	9414      	str	r4, [sp, #80]	@ 0x50
 8022c0e:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	@ 0x62
 8022c12:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 8022c16:	fb93 f1f4 	sdiv	r1, r3, r4
 8022c1a:	4422      	add	r2, r4
 8022c1c:	3a01      	subs	r2, #1
 8022c1e:	fb92 f2f4 	sdiv	r2, r2, r4
 8022c22:	b289      	uxth	r1, r1
 8022c24:	fb04 3411 	mls	r4, r4, r1, r3
 8022c28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8022c2a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8022c2e:	f8bd 6058 	ldrh.w	r6, [sp, #88]	@ 0x58
 8022c32:	fb14 1a00 	smlabb	sl, r4, r0, r1
 8022c36:	f8bd 505a 	ldrh.w	r5, [sp, #90]	@ 0x5a
 8022c3a:	48bc      	ldr	r0, [pc, #752]	@ (8022f2c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x374>)
 8022c3c:	4431      	add	r1, r6
 8022c3e:	442b      	add	r3, r5
 8022c40:	6800      	ldr	r0, [r0, #0]
 8022c42:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8022c46:	f8ad 3062 	strh.w	r3, [sp, #98]	@ 0x62
 8022c4a:	f9bd 7064 	ldrsh.w	r7, [sp, #100]	@ 0x64
 8022c4e:	6803      	ldr	r3, [r0, #0]
 8022c50:	3201      	adds	r2, #1
 8022c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022c54:	970a      	str	r7, [sp, #40]	@ 0x28
 8022c56:	b294      	uxth	r4, r2
 8022c58:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8022c5c:	4798      	blx	r3
 8022c5e:	2200      	movs	r2, #0
 8022c60:	fa1f f68a 	uxth.w	r6, sl
 8022c64:	2e00      	cmp	r6, #0
 8022c66:	bf0c      	ite	eq
 8022c68:	463b      	moveq	r3, r7
 8022c6a:	2300      	movne	r3, #0
 8022c6c:	49b0      	ldr	r1, [pc, #704]	@ (8022f30 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x378>)
 8022c6e:	9602      	str	r6, [sp, #8]
 8022c70:	8809      	ldrh	r1, [r1, #0]
 8022c72:	9211      	str	r2, [sp, #68]	@ 0x44
 8022c74:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	@ 0x60
 8022c78:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8022c7c:	fb01 f505 	mul.w	r5, r1, r5
 8022c80:	fb01 6202 	mla	r2, r1, r2, r6
 8022c84:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022c86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c8a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022c8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c92:	1881      	adds	r1, r0, r2
 8022c94:	9101      	str	r1, [sp, #4]
 8022c96:	fa1f fe83 	uxth.w	lr, r3
 8022c9a:	4429      	add	r1, r5
 8022c9c:	f109 030e 	add.w	r3, r9, #14
 8022ca0:	9315      	str	r3, [sp, #84]	@ 0x54
 8022ca2:	460b      	mov	r3, r1
 8022ca4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022ca6:	464f      	mov	r7, r9
 8022ca8:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8022cac:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8022cb0:	f104 0c04 	add.w	ip, r4, #4
 8022cb4:	9106      	str	r1, [sp, #24]
 8022cb6:	fa1f f882 	uxth.w	r8, r2
 8022cba:	9a01      	ldr	r2, [sp, #4]
 8022cbc:	4293      	cmp	r3, r2
 8022cbe:	f240 8101 	bls.w	8022ec4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>
 8022cc2:	2200      	movs	r2, #0
 8022cc4:	2601      	movs	r6, #1
 8022cc6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022cc8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022cca:	920c      	str	r2, [sp, #48]	@ 0x30
 8022ccc:	fa10 f481 	uxtah	r4, r0, r1
 8022cd0:	00a4      	lsls	r4, r4, #2
 8022cd2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022cd4:	3404      	adds	r4, #4
 8022cd6:	4421      	add	r1, r4
 8022cd8:	788a      	ldrb	r2, [r1, #2]
 8022cda:	784d      	ldrb	r5, [r1, #1]
 8022cdc:	0212      	lsls	r2, r2, #8
 8022cde:	78c9      	ldrb	r1, [r1, #3]
 8022ce0:	ea42 4005 	orr.w	r0, r2, r5, lsl #16
 8022ce4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8022ce6:	4308      	orrs	r0, r1
 8022ce8:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8022cec:	1829      	adds	r1, r5, r0
 8022cee:	5c28      	ldrb	r0, [r5, r0]
 8022cf0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022cf2:	fbb9 f3f3 	udiv	r3, r9, r3
 8022cf6:	5d2c      	ldrb	r4, [r5, r4]
 8022cf8:	784a      	ldrb	r2, [r1, #1]
 8022cfa:	4431      	add	r1, r6
 8022cfc:	940e      	str	r4, [sp, #56]	@ 0x38
 8022cfe:	9104      	str	r1, [sp, #16]
 8022d00:	f04f 0a00 	mov.w	sl, #0
 8022d04:	19a1      	adds	r1, r4, r6
 8022d06:	4634      	mov	r4, r6
 8022d08:	0212      	lsls	r2, r2, #8
 8022d0a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022d0e:	4302      	orrs	r2, r0
 8022d10:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8022d12:	f8bd 5034 	ldrh.w	r5, [sp, #52]	@ 0x34
 8022d16:	1ac3      	subs	r3, r0, r3
 8022d18:	b29b      	uxth	r3, r3
 8022d1a:	b290      	uxth	r0, r2
 8022d1c:	9609      	str	r6, [sp, #36]	@ 0x24
 8022d1e:	737a      	strb	r2, [r7, #13]
 8022d20:	9008      	str	r0, [sp, #32]
 8022d22:	9105      	str	r1, [sp, #20]
 8022d24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022d26:	9603      	str	r6, [sp, #12]
 8022d28:	f1b9 0f00 	cmp.w	r9, #0
 8022d2c:	d035      	beq.n	8022d9a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e2>
 8022d2e:	45a1      	cmp	r9, r4
 8022d30:	f240 8100 	bls.w	8022f34 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x37c>
 8022d34:	9b06      	ldr	r3, [sp, #24]
 8022d36:	9a01      	ldr	r2, [sp, #4]
 8022d38:	eba9 0904 	sub.w	r9, r9, r4
 8022d3c:	4293      	cmp	r3, r2
 8022d3e:	fa1f f989 	uxth.w	r9, r9
 8022d42:	f240 80bf 	bls.w	8022ec4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>
 8022d46:	9804      	ldr	r0, [sp, #16]
 8022d48:	9c03      	ldr	r4, [sp, #12]
 8022d4a:	7842      	ldrb	r2, [r0, #1]
 8022d4c:	f1c4 0107 	rsb	r1, r4, #7
 8022d50:	7803      	ldrb	r3, [r0, #0]
 8022d52:	408a      	lsls	r2, r1
 8022d54:	0052      	lsls	r2, r2, #1
 8022d56:	4123      	asrs	r3, r4
 8022d58:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022d5c:	1c61      	adds	r1, r4, #1
 8022d5e:	b2db      	uxtb	r3, r3
 8022d60:	4313      	orrs	r3, r2
 8022d62:	b2ca      	uxtb	r2, r1
 8022d64:	4611      	mov	r1, r2
 8022d66:	2908      	cmp	r1, #8
 8022d68:	9203      	str	r2, [sp, #12]
 8022d6a:	b29a      	uxth	r2, r3
 8022d6c:	f000 810b 	beq.w	8022f86 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3ce>
 8022d70:	3001      	adds	r0, #1
 8022d72:	9004      	str	r0, [sp, #16]
 8022d74:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022d76:	4291      	cmp	r1, r2
 8022d78:	f0c0 80e7 	bcc.w	8022f4a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x392>
 8022d7c:	2401      	movs	r4, #1
 8022d7e:	b2db      	uxtb	r3, r3
 8022d80:	737b      	strb	r3, [r7, #13]
 8022d82:	9905      	ldr	r1, [sp, #20]
 8022d84:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022d88:	f0c0 8103 	bcc.w	8022f92 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3da>
 8022d8c:	e9cd 2408 	strd	r2, r4, [sp, #32]
 8022d90:	f04f 0a00 	mov.w	sl, #0
 8022d94:	f1b9 0f00 	cmp.w	r9, #0
 8022d98:	d1c9      	bne.n	8022d2e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x176>
 8022d9a:	4574      	cmp	r4, lr
 8022d9c:	f0c0 809a 	bcc.w	8022ed4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x31c>
 8022da0:	eba4 030e 	sub.w	r3, r4, lr
 8022da4:	b29b      	uxth	r3, r3
 8022da6:	9307      	str	r3, [sp, #28]
 8022da8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022daa:	f8cd e008 	str.w	lr, [sp, #8]
 8022dae:	2bff      	cmp	r3, #255	@ 0xff
 8022db0:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8022db4:	9b02      	ldr	r3, [sp, #8]
 8022db6:	f000 8099 	beq.w	8022eec <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x334>
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	d048      	beq.n	8022e50 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8022dbe:	eb0a 0603 	add.w	r6, sl, r3
 8022dc2:	9b01      	ldr	r3, [sp, #4]
 8022dc4:	b2b6      	uxth	r6, r6
 8022dc6:	1cd8      	adds	r0, r3, #3
 8022dc8:	f810 1c03 	ldrb.w	r1, [r0, #-3]
 8022dcc:	eb07 030a 	add.w	r3, r7, sl
 8022dd0:	7b5b      	ldrb	r3, [r3, #13]
 8022dd2:	fb11 f208 	smulbb	r2, r1, r8
 8022dd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022dda:	f81c 1003 	ldrb.w	r1, [ip, r3]
 8022dde:	4463      	add	r3, ip
 8022de0:	fb01 2105 	mla	r1, r1, r5, r2
 8022de4:	b289      	uxth	r1, r1
 8022de6:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 8022dea:	f101 0b01 	add.w	fp, r1, #1
 8022dee:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022df2:	1209      	asrs	r1, r1, #8
 8022df4:	fb12 fb08 	smulbb	fp, r2, r8
 8022df8:	f800 1c03 	strb.w	r1, [r0, #-3]
 8022dfc:	785a      	ldrb	r2, [r3, #1]
 8022dfe:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 8022e02:	fb02 b205 	mla	r2, r2, r5, fp
 8022e06:	b292      	uxth	r2, r2
 8022e08:	f102 0b01 	add.w	fp, r2, #1
 8022e0c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022e10:	1212      	asrs	r2, r2, #8
 8022e12:	fb11 f108 	smulbb	r1, r1, r8
 8022e16:	f800 2c02 	strb.w	r2, [r0, #-2]
 8022e1a:	789b      	ldrb	r3, [r3, #2]
 8022e1c:	f10a 0a01 	add.w	sl, sl, #1
 8022e20:	fb03 1305 	mla	r3, r3, r5, r1
 8022e24:	b29b      	uxth	r3, r3
 8022e26:	1c5a      	adds	r2, r3, #1
 8022e28:	fa1f fa8a 	uxth.w	sl, sl
 8022e2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022e30:	121b      	asrs	r3, r3, #8
 8022e32:	45b2      	cmp	sl, r6
 8022e34:	f800 3c01 	strb.w	r3, [r0, #-1]
 8022e38:	f100 0003 	add.w	r0, r0, #3
 8022e3c:	d1c4      	bne.n	8022dc8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x210>
 8022e3e:	9b02      	ldr	r3, [sp, #8]
 8022e40:	9a01      	ldr	r2, [sp, #4]
 8022e42:	3b01      	subs	r3, #1
 8022e44:	b29b      	uxth	r3, r3
 8022e46:	3301      	adds	r3, #1
 8022e48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e4c:	441a      	add	r2, r3
 8022e4e:	9201      	str	r2, [sp, #4]
 8022e50:	4574      	cmp	r4, lr
 8022e52:	d330      	bcc.n	8022eb6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8022e54:	4b36      	ldr	r3, [pc, #216]	@ (8022f30 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x378>)
 8022e56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022e58:	881b      	ldrh	r3, [r3, #0]
 8022e5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022e5c:	1a5b      	subs	r3, r3, r1
 8022e5e:	9901      	ldr	r1, [sp, #4]
 8022e60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e64:	4419      	add	r1, r3
 8022e66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022e68:	3201      	adds	r2, #1
 8022e6a:	429a      	cmp	r2, r3
 8022e6c:	920c      	str	r2, [sp, #48]	@ 0x30
 8022e6e:	9101      	str	r1, [sp, #4]
 8022e70:	f000 80ab 	beq.w	8022fca <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x412>
 8022e74:	f8bd e028 	ldrh.w	lr, [sp, #40]	@ 0x28
 8022e78:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 8022e7c:	9c07      	ldr	r4, [sp, #28]
 8022e7e:	eba9 090e 	sub.w	r9, r9, lr
 8022e82:	fa1f f989 	uxth.w	r9, r9
 8022e86:	f1b9 0f00 	cmp.w	r9, #0
 8022e8a:	bf14      	ite	ne
 8022e8c:	f04f 0e00 	movne.w	lr, #0
 8022e90:	f04f 0900 	moveq.w	r9, #0
 8022e94:	9b06      	ldr	r3, [sp, #24]
 8022e96:	9a01      	ldr	r2, [sp, #4]
 8022e98:	4293      	cmp	r3, r2
 8022e9a:	d913      	bls.n	8022ec4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>
 8022e9c:	2c00      	cmp	r4, #0
 8022e9e:	f47f af43 	bne.w	8022d28 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x170>
 8022ea2:	e750      	b.n	8022d46 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18e>
 8022ea4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8022ea8:	fa1f f08a 	uxth.w	r0, sl
 8022eac:	fb94 f4f0 	sdiv	r4, r4, r0
 8022eb0:	b2a3      	uxth	r3, r4
 8022eb2:	9314      	str	r3, [sp, #80]	@ 0x50
 8022eb4:	e6ab      	b.n	8022c0e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x56>
 8022eb6:	9b06      	ldr	r3, [sp, #24]
 8022eb8:	9a01      	ldr	r2, [sp, #4]
 8022eba:	9c07      	ldr	r4, [sp, #28]
 8022ebc:	4293      	cmp	r3, r2
 8022ebe:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 8022ec2:	d8eb      	bhi.n	8022e9c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2e4>
 8022ec4:	4b19      	ldr	r3, [pc, #100]	@ (8022f2c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x374>)
 8022ec6:	6818      	ldr	r0, [r3, #0]
 8022ec8:	6803      	ldr	r3, [r0, #0]
 8022eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022ecc:	4798      	blx	r3
 8022ece:	b01b      	add	sp, #108	@ 0x6c
 8022ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ed4:	ebae 0304 	sub.w	r3, lr, r4
 8022ed8:	b29b      	uxth	r3, r3
 8022eda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022edc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022ede:	9402      	str	r4, [sp, #8]
 8022ee0:	2bff      	cmp	r3, #255	@ 0xff
 8022ee2:	f8cd 901c 	str.w	r9, [sp, #28]
 8022ee6:	9b02      	ldr	r3, [sp, #8]
 8022ee8:	f47f af67 	bne.w	8022dba <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d0af      	beq.n	8022e50 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8022ef0:	eb0a 0003 	add.w	r0, sl, r3
 8022ef4:	9b01      	ldr	r3, [sp, #4]
 8022ef6:	b280      	uxth	r0, r0
 8022ef8:	1cda      	adds	r2, r3, #3
 8022efa:	eb07 030a 	add.w	r3, r7, sl
 8022efe:	7b5b      	ldrb	r3, [r3, #13]
 8022f00:	f10a 0a01 	add.w	sl, sl, #1
 8022f04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f08:	f81c 1003 	ldrb.w	r1, [ip, r3]
 8022f0c:	4463      	add	r3, ip
 8022f0e:	f802 1c03 	strb.w	r1, [r2, #-3]
 8022f12:	7859      	ldrb	r1, [r3, #1]
 8022f14:	fa1f fa8a 	uxth.w	sl, sl
 8022f18:	f802 1c02 	strb.w	r1, [r2, #-2]
 8022f1c:	789b      	ldrb	r3, [r3, #2]
 8022f1e:	4582      	cmp	sl, r0
 8022f20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022f24:	f102 0203 	add.w	r2, r2, #3
 8022f28:	d1e7      	bne.n	8022efa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x342>
 8022f2a:	e788      	b.n	8022e3e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x286>
 8022f2c:	2008745c 	.word	0x2008745c
 8022f30:	20087456 	.word	0x20087456
 8022f34:	eba4 0409 	sub.w	r4, r4, r9
 8022f38:	44ca      	add	sl, r9
 8022f3a:	b2a4      	uxth	r4, r4
 8022f3c:	fa1f fa8a 	uxth.w	sl, sl
 8022f40:	f8bd e028 	ldrh.w	lr, [sp, #40]	@ 0x28
 8022f44:	f04f 0900 	mov.w	r9, #0
 8022f48:	e7a4      	b.n	8022e94 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2dc>
 8022f4a:	9b05      	ldr	r3, [sp, #20]
 8022f4c:	429a      	cmp	r2, r3
 8022f4e:	d323      	bcc.n	8022f98 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3e0>
 8022f50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022f52:	7b79      	ldrb	r1, [r7, #13]
 8022f54:	183b      	adds	r3, r7, r0
 8022f56:	7359      	strb	r1, [r3, #13]
 8022f58:	7b7b      	ldrb	r3, [r7, #13]
 8022f5a:	1c41      	adds	r1, r0, #1
 8022f5c:	b28c      	uxth	r4, r1
 8022f5e:	9e05      	ldr	r6, [sp, #20]
 8022f60:	eb07 0086 	add.w	r0, r7, r6, lsl #2
 8022f64:	f106 0a01 	add.w	sl, r6, #1
 8022f68:	9e08      	ldr	r6, [sp, #32]
 8022f6a:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 8022f6e:	fa1f f38a 	uxth.w	r3, sl
 8022f72:	f8a0 6050 	strh.w	r6, [r0, #80]	@ 0x50
 8022f76:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 8022f7a:	9305      	str	r3, [sp, #20]
 8022f7c:	e9cd 2408 	strd	r2, r4, [sp, #32]
 8022f80:	f04f 0a00 	mov.w	sl, #0
 8022f84:	e6d0      	b.n	8022d28 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x170>
 8022f86:	2100      	movs	r1, #0
 8022f88:	9103      	str	r1, [sp, #12]
 8022f8a:	9904      	ldr	r1, [sp, #16]
 8022f8c:	3102      	adds	r1, #2
 8022f8e:	9104      	str	r1, [sp, #16]
 8022f90:	e6f0      	b.n	8022d74 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1bc>
 8022f92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022f94:	3101      	adds	r1, #1
 8022f96:	e7e2      	b.n	8022f5e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3a6>
 8022f98:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8022f9c:	f893 404f 	ldrb.w	r4, [r3, #79]	@ 0x4f
 8022fa0:	4613      	mov	r3, r2
 8022fa2:	2c01      	cmp	r4, #1
 8022fa4:	d90d      	bls.n	8022fc2 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x40a>
 8022fa6:	f104 010d 	add.w	r1, r4, #13
 8022faa:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8022fac:	4439      	add	r1, r7
 8022fae:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8022fb2:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8022fb6:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8022fba:	428e      	cmp	r6, r1
 8022fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8022fc0:	d1f5      	bne.n	8022fae <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3f6>
 8022fc2:	b2db      	uxtb	r3, r3
 8022fc4:	737b      	strb	r3, [r7, #13]
 8022fc6:	b2a4      	uxth	r4, r4
 8022fc8:	e6db      	b.n	8022d82 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ca>
 8022fca:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8022fce:	f8bd 2058 	ldrh.w	r2, [sp, #88]	@ 0x58
 8022fd2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022fd4:	1a9b      	subs	r3, r3, r2
 8022fd6:	fa1f f983 	uxth.w	r9, r3
 8022fda:	f1b9 0f00 	cmp.w	r9, #0
 8022fde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022fe0:	bf18      	it	ne
 8022fe2:	2300      	movne	r3, #0
 8022fe4:	3101      	adds	r1, #1
 8022fe6:	fa1f fe83 	uxth.w	lr, r3
 8022fea:	9111      	str	r1, [sp, #68]	@ 0x44
 8022fec:	9b06      	ldr	r3, [sp, #24]
 8022fee:	e664      	b.n	8022cba <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x102>
 8022ff0:	4b03      	ldr	r3, [pc, #12]	@ (8023000 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x448>)
 8022ff2:	4a04      	ldr	r2, [pc, #16]	@ (8023004 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x44c>)
 8022ff4:	f640 41f6 	movw	r1, #3318	@ 0xcf6
 8022ff8:	4803      	ldr	r0, [pc, #12]	@ (8023008 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x450>)
 8022ffa:	f007 fef7 	bl	802adec <__assert_func>
 8022ffe:	bf00      	nop
 8023000:	0802df34 	.word	0x0802df34
 8023004:	0802f394 	.word	0x0802f394
 8023008:	0802de70 	.word	0x0802de70

0802300c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 802300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023010:	4690      	mov	r8, r2
 8023012:	8812      	ldrh	r2, [r2, #0]
 8023014:	b095      	sub	sp, #84	@ 0x54
 8023016:	2a01      	cmp	r2, #1
 8023018:	461c      	mov	r4, r3
 802301a:	f89d 907c 	ldrb.w	r9, [sp, #124]	@ 0x7c
 802301e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023020:	f040 8107 	bne.w	8023232 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8023024:	468a      	mov	sl, r1
 8023026:	6820      	ldr	r0, [r4, #0]
 8023028:	6861      	ldr	r1, [r4, #4]
 802302a:	aa10      	add	r2, sp, #64	@ 0x40
 802302c:	c203      	stmia	r2!, {r0, r1}
 802302e:	6818      	ldr	r0, [r3, #0]
 8023030:	6859      	ldr	r1, [r3, #4]
 8023032:	aa12      	add	r2, sp, #72	@ 0x48
 8023034:	c203      	stmia	r2!, {r0, r1}
 8023036:	a810      	add	r0, sp, #64	@ 0x40
 8023038:	f7f2 fb5e 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802303c:	4621      	mov	r1, r4
 802303e:	a812      	add	r0, sp, #72	@ 0x48
 8023040:	f7f2 fb82 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023044:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	@ 0x48
 8023048:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	@ 0x4a
 802304c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8023050:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8023054:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8023058:	4879      	ldr	r0, [pc, #484]	@ (8023240 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 802305a:	fb11 4105 	smlabb	r1, r1, r5, r4
 802305e:	4422      	add	r2, r4
 8023060:	442b      	add	r3, r5
 8023062:	6800      	ldr	r0, [r0, #0]
 8023064:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8023068:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 802306c:	6802      	ldr	r2, [r0, #0]
 802306e:	448a      	add	sl, r1
 8023070:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 8023074:	4c73      	ldr	r4, [pc, #460]	@ (8023244 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8023076:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 802307a:	910c      	str	r1, [sp, #48]	@ 0x30
 802307c:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 8023080:	42a3      	cmp	r3, r4
 8023082:	910e      	str	r1, [sp, #56]	@ 0x38
 8023084:	f040 80a2 	bne.w	80231cc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c0>
 8023088:	6841      	ldr	r1, [r0, #4]
 802308a:	4c6f      	ldr	r4, [pc, #444]	@ (8023248 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802308c:	680b      	ldr	r3, [r1, #0]
 802308e:	699b      	ldr	r3, [r3, #24]
 8023090:	42a3      	cmp	r3, r4
 8023092:	f040 80c1 	bne.w	8023218 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8023096:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8023098:	4798      	blx	r3
 802309a:	4b6c      	ldr	r3, [pc, #432]	@ (802324c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 802309c:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	@ 0x4a
 80230a0:	881b      	ldrh	r3, [r3, #0]
 80230a2:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	@ 0x48
 80230a6:	fb01 2303 	mla	r3, r1, r3, r2
 80230aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80230ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80230b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80230b2:	2b00      	cmp	r3, #0
 80230b4:	f340 8082 	ble.w	80231bc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 80230b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	dd7e      	ble.n	80231bc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 80230be:	2200      	movs	r2, #0
 80230c0:	f04f 0e03 	mov.w	lr, #3
 80230c4:	f04f 0c04 	mov.w	ip, #4
 80230c8:	f1c9 07ff 	rsb	r7, r9, #255	@ 0xff
 80230cc:	009b      	lsls	r3, r3, #2
 80230ce:	920d      	str	r2, [sp, #52]	@ 0x34
 80230d0:	b2bf      	uxth	r7, r7
 80230d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80230d4:	fa1f f289 	uxth.w	r2, r9
 80230d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80230da:	4655      	mov	r5, sl
 80230dc:	1d18      	adds	r0, r3, #4
 80230de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230e0:	eb0a 0603 	add.w	r6, sl, r3
 80230e4:	e03e      	b.n	8023164 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 80230e6:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 80230ea:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 80230ee:	fb13 f307 	smulbb	r3, r3, r7
 80230f2:	fb0b 3302 	mla	r3, fp, r2, r3
 80230f6:	b29b      	uxth	r3, r3
 80230f8:	f103 0b01 	add.w	fp, r3, #1
 80230fc:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8023100:	121b      	asrs	r3, r3, #8
 8023102:	fb14 f407 	smulbb	r4, r4, r7
 8023106:	f800 3c04 	strb.w	r3, [r0, #-4]
 802310a:	784b      	ldrb	r3, [r1, #1]
 802310c:	f810 bc02 	ldrb.w	fp, [r0, #-2]
 8023110:	fb03 4302 	mla	r3, r3, r2, r4
 8023114:	b29b      	uxth	r3, r3
 8023116:	1c5c      	adds	r4, r3, #1
 8023118:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802311c:	121b      	asrs	r3, r3, #8
 802311e:	fb1b fb07 	smulbb	fp, fp, r7
 8023122:	f800 3c03 	strb.w	r3, [r0, #-3]
 8023126:	788c      	ldrb	r4, [r1, #2]
 8023128:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 802312c:	fb04 b402 	mla	r4, r4, r2, fp
 8023130:	b2a4      	uxth	r4, r4
 8023132:	f104 0b01 	add.w	fp, r4, #1
 8023136:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 802313a:	1224      	asrs	r4, r4, #8
 802313c:	fb13 fb07 	smulbb	fp, r3, r7
 8023140:	f800 4c02 	strb.w	r4, [r0, #-2]
 8023144:	78cb      	ldrb	r3, [r1, #3]
 8023146:	42ae      	cmp	r6, r5
 8023148:	fb03 b302 	mla	r3, r3, r2, fp
 802314c:	b29b      	uxth	r3, r3
 802314e:	f103 0101 	add.w	r1, r3, #1
 8023152:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023156:	ea4f 2323 	mov.w	r3, r3, asr #8
 802315a:	f800 3c01 	strb.w	r3, [r0, #-1]
 802315e:	f100 0004 	add.w	r0, r0, #4
 8023162:	d018      	beq.n	8023196 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8023164:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023168:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802316c:	fb1e c303 	smlabb	r3, lr, r3, ip
 8023170:	eb08 0103 	add.w	r1, r8, r3
 8023174:	f818 b003 	ldrb.w	fp, [r8, r3]
 8023178:	d1b5      	bne.n	80230e6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 802317a:	f800 bc04 	strb.w	fp, [r0, #-4]
 802317e:	784b      	ldrb	r3, [r1, #1]
 8023180:	42ae      	cmp	r6, r5
 8023182:	f800 3c03 	strb.w	r3, [r0, #-3]
 8023186:	788b      	ldrb	r3, [r1, #2]
 8023188:	f100 0004 	add.w	r0, r0, #4
 802318c:	f800 9c05 	strb.w	r9, [r0, #-5]
 8023190:	f800 3c06 	strb.w	r3, [r0, #-6]
 8023194:	d1e6      	bne.n	8023164 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8023196:	4b2d      	ldr	r3, [pc, #180]	@ (802324c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8023198:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802319a:	881b      	ldrh	r3, [r3, #0]
 802319c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802319e:	1a1b      	subs	r3, r3, r0
 80231a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80231a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80231a6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80231a8:	441c      	add	r4, r3
 80231aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80231ac:	3001      	adds	r0, #1
 80231ae:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80231b2:	4283      	cmp	r3, r0
 80231b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80231b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80231b8:	448a      	add	sl, r1
 80231ba:	d18d      	bne.n	80230d8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 80231bc:	4b20      	ldr	r3, [pc, #128]	@ (8023240 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80231be:	6818      	ldr	r0, [r3, #0]
 80231c0:	6803      	ldr	r3, [r0, #0]
 80231c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80231c4:	4798      	blx	r3
 80231c6:	b015      	add	sp, #84	@ 0x54
 80231c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231cc:	4798      	blx	r3
 80231ce:	2801      	cmp	r0, #1
 80231d0:	d125      	bne.n	802321e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x212>
 80231d2:	4b1f      	ldr	r3, [pc, #124]	@ (8023250 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 80231d4:	6818      	ldr	r0, [r3, #0]
 80231d6:	b330      	cbz	r0, 8023226 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 80231d8:	2502      	movs	r5, #2
 80231da:	240b      	movs	r4, #11
 80231dc:	2600      	movs	r6, #0
 80231de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80231e2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80231e6:	9302      	str	r3, [sp, #8]
 80231e8:	4b18      	ldr	r3, [pc, #96]	@ (802324c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80231ea:	9201      	str	r2, [sp, #4]
 80231ec:	881b      	ldrh	r3, [r3, #0]
 80231ee:	9508      	str	r5, [sp, #32]
 80231f0:	9407      	str	r4, [sp, #28]
 80231f2:	f8bd 5044 	ldrh.w	r5, [sp, #68]	@ 0x44
 80231f6:	f8bd 404a 	ldrh.w	r4, [sp, #74]	@ 0x4a
 80231fa:	9306      	str	r3, [sp, #24]
 80231fc:	f8cd 9010 	str.w	r9, [sp, #16]
 8023200:	4642      	mov	r2, r8
 8023202:	4651      	mov	r1, sl
 8023204:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8023208:	9605      	str	r6, [sp, #20]
 802320a:	9503      	str	r5, [sp, #12]
 802320c:	9400      	str	r4, [sp, #0]
 802320e:	f7f8 f861 	bl	801b2d4 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8023212:	b015      	add	sp, #84	@ 0x54
 8023214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023218:	4608      	mov	r0, r1
 802321a:	4798      	blx	r3
 802321c:	e7d7      	b.n	80231ce <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 802321e:	4b08      	ldr	r3, [pc, #32]	@ (8023240 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8023220:	6818      	ldr	r0, [r3, #0]
 8023222:	6802      	ldr	r2, [r0, #0]
 8023224:	e737      	b.n	8023096 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8023226:	4b0b      	ldr	r3, [pc, #44]	@ (8023254 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8023228:	4a0b      	ldr	r2, [pc, #44]	@ (8023258 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802322a:	217c      	movs	r1, #124	@ 0x7c
 802322c:	480b      	ldr	r0, [pc, #44]	@ (802325c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 802322e:	f007 fddd 	bl	802adec <__assert_func>
 8023232:	4b0b      	ldr	r3, [pc, #44]	@ (8023260 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8023234:	4a0b      	ldr	r2, [pc, #44]	@ (8023264 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8023236:	f640 51d3 	movw	r1, #3539	@ 0xdd3
 802323a:	480b      	ldr	r0, [pc, #44]	@ (8023268 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 802323c:	f007 fdd6 	bl	802adec <__assert_func>
 8023240:	2008745c 	.word	0x2008745c
 8023244:	0801176d 	.word	0x0801176d
 8023248:	0801457f 	.word	0x0801457f
 802324c:	20087456 	.word	0x20087456
 8023250:	200875c8 	.word	0x200875c8
 8023254:	0802ddcc 	.word	0x0802ddcc
 8023258:	0802e638 	.word	0x0802e638
 802325c:	0802ddf4 	.word	0x0802ddf4
 8023260:	0802de94 	.word	0x0802de94
 8023264:	0802ebe0 	.word	0x0802ebe0
 8023268:	0802de70 	.word	0x0802de70

0802326c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 802326c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023270:	4617      	mov	r7, r2
 8023272:	7812      	ldrb	r2, [r2, #0]
 8023274:	b08f      	sub	sp, #60	@ 0x3c
 8023276:	2a01      	cmp	r2, #1
 8023278:	461e      	mov	r6, r3
 802327a:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 802327e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023280:	f040 8203 	bne.w	802368a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x41e>
 8023284:	6830      	ldr	r0, [r6, #0]
 8023286:	460d      	mov	r5, r1
 8023288:	6871      	ldr	r1, [r6, #4]
 802328a:	aa0a      	add	r2, sp, #40	@ 0x28
 802328c:	c203      	stmia	r2!, {r0, r1}
 802328e:	6818      	ldr	r0, [r3, #0]
 8023290:	6859      	ldr	r1, [r3, #4]
 8023292:	aa0c      	add	r2, sp, #48	@ 0x30
 8023294:	c203      	stmia	r2!, {r0, r1}
 8023296:	a80a      	add	r0, sp, #40	@ 0x28
 8023298:	f7f2 fa2e 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802329c:	4631      	mov	r1, r6
 802329e:	a80c      	add	r0, sp, #48	@ 0x30
 80232a0:	f7f2 fa52 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80232a4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80232a8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80232ac:	f003 0201 	and.w	r2, r3, #1
 80232b0:	4614      	mov	r4, r2
 80232b2:	9206      	str	r2, [sp, #24]
 80232b4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80232b8:	4423      	add	r3, r4
 80232ba:	fb02 1303 	mla	r3, r2, r3, r1
 80232be:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 80232c2:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 80232c6:	4402      	add	r2, r0
 80232c8:	489d      	ldr	r0, [pc, #628]	@ (8023540 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d4>)
 80232ca:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80232ce:	440e      	add	r6, r1
 80232d0:	eb05 0363 	add.w	r3, r5, r3, asr #1
 80232d4:	6800      	ldr	r0, [r0, #0]
 80232d6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80232da:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 80232de:	9302      	str	r3, [sp, #8]
 80232e0:	f001 0301 	and.w	r3, r1, #1
 80232e4:	6802      	ldr	r2, [r0, #0]
 80232e6:	9305      	str	r3, [sp, #20]
 80232e8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80232ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80232ee:	9303      	str	r3, [sp, #12]
 80232f0:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 80232f4:	4790      	blx	r2
 80232f6:	4a93      	ldr	r2, [pc, #588]	@ (8023544 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d8>)
 80232f8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80232fc:	8812      	ldrh	r2, [r2, #0]
 80232fe:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8023302:	fb05 f502 	mul.w	r5, r5, r2
 8023306:	fb02 1303 	mla	r3, r2, r3, r1
 802330a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802330e:	461a      	mov	r2, r3
 8023310:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8023314:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8023318:	f107 0704 	add.w	r7, r7, #4
 802331c:	9304      	str	r3, [sp, #16]
 802331e:	f000 8113 	beq.w	8023548 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2dc>
 8023322:	4614      	mov	r4, r2
 8023324:	9a04      	ldr	r2, [sp, #16]
 8023326:	4294      	cmp	r4, r2
 8023328:	f080 80c2 	bcs.w	80234b0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>
 802332c:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8023330:	9300      	str	r3, [sp, #0]
 8023332:	9b03      	ldr	r3, [sp, #12]
 8023334:	3b01      	subs	r3, #1
 8023336:	9309      	str	r3, [sp, #36]	@ 0x24
 8023338:	9b05      	ldr	r3, [sp, #20]
 802333a:	2b00      	cmp	r3, #0
 802333c:	f040 80ef 	bne.w	802351e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2b2>
 8023340:	9b02      	ldr	r3, [sp, #8]
 8023342:	9301      	str	r3, [sp, #4]
 8023344:	9b03      	ldr	r3, [sp, #12]
 8023346:	2b01      	cmp	r3, #1
 8023348:	f340 809c 	ble.w	8023484 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x218>
 802334c:	3b02      	subs	r3, #2
 802334e:	9308      	str	r3, [sp, #32]
 8023350:	f104 0e10 	add.w	lr, r4, #16
 8023354:	085b      	lsrs	r3, r3, #1
 8023356:	9307      	str	r3, [sp, #28]
 8023358:	eb0e 0ec3 	add.w	lr, lr, r3, lsl #3
 802335c:	9b01      	ldr	r3, [sp, #4]
 802335e:	f104 0608 	add.w	r6, r4, #8
 8023362:	f103 3cff 	add.w	ip, r3, #4294967295
 8023366:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 802336a:	f856 1c08 	ldr.w	r1, [r6, #-8]
 802336e:	091b      	lsrs	r3, r3, #4
 8023370:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023374:	18f8      	adds	r0, r7, r3
 8023376:	5cfa      	ldrb	r2, [r7, r3]
 8023378:	f890 9001 	ldrb.w	r9, [r0, #1]
 802337c:	7883      	ldrb	r3, [r0, #2]
 802337e:	0e08      	lsrs	r0, r1, #24
 8023380:	f000 80ae 	beq.w	80234e0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>
 8023384:	fb08 f500 	mul.w	r5, r8, r0
 8023388:	fb18 fb03 	smulbb	fp, r8, r3
 802338c:	1c6b      	adds	r3, r5, #1
 802338e:	eb03 2525 	add.w	r5, r3, r5, asr #8
 8023392:	fb18 f202 	smulbb	r2, r8, r2
 8023396:	122d      	asrs	r5, r5, #8
 8023398:	fb18 f909 	smulbb	r9, r8, r9
 802339c:	eba0 0a05 	sub.w	sl, r0, r5
 80233a0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80233a4:	fb0a b303 	mla	r3, sl, r3, fp
 80233a8:	fa5f fb81 	uxtb.w	fp, r1
 80233ac:	fb0a 220b 	mla	r2, sl, fp, r2
 80233b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80233b4:	4440      	add	r0, r8
 80233b6:	fb0a 9101 	mla	r1, sl, r1, r9
 80233ba:	1b40      	subs	r0, r0, r5
 80233bc:	b2c0      	uxtb	r0, r0
 80233be:	fbb3 f3f0 	udiv	r3, r3, r0
 80233c2:	fbb2 f2f0 	udiv	r2, r2, r0
 80233c6:	fbb1 f1f0 	udiv	r1, r1, r0
 80233ca:	041b      	lsls	r3, r3, #16
 80233cc:	b2d2      	uxtb	r2, r2
 80233ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80233d2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80233d6:	0209      	lsls	r1, r1, #8
 80233d8:	4303      	orrs	r3, r0
 80233da:	b289      	uxth	r1, r1
 80233dc:	430b      	orrs	r3, r1
 80233de:	f846 3c08 	str.w	r3, [r6, #-8]
 80233e2:	f89c 2000 	ldrb.w	r2, [ip]
 80233e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80233ea:	f002 020f 	and.w	r2, r2, #15
 80233ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80233f2:	0e18      	lsrs	r0, r3, #24
 80233f4:	eb07 0102 	add.w	r1, r7, r2
 80233f8:	d062      	beq.n	80234c0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>
 80233fa:	fb08 f500 	mul.w	r5, r8, r0
 80233fe:	f105 0901 	add.w	r9, r5, #1
 8023402:	eb09 2925 	add.w	r9, r9, r5, asr #8
 8023406:	ea4f 2929 	mov.w	r9, r9, asr #8
 802340a:	eba0 0b09 	sub.w	fp, r0, r9
 802340e:	788d      	ldrb	r5, [r1, #2]
 8023410:	f891 a001 	ldrb.w	sl, [r1, #1]
 8023414:	b2d9      	uxtb	r1, r3
 8023416:	fb0b f101 	mul.w	r1, fp, r1
 802341a:	fb15 f508 	smulbb	r5, r5, r8
 802341e:	5cba      	ldrb	r2, [r7, r2]
 8023420:	fb1a fa08 	smulbb	sl, sl, r8
 8023424:	fb02 1108 	mla	r1, r2, r8, r1
 8023428:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802342c:	fb0b 5502 	mla	r5, fp, r2, r5
 8023430:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8023434:	4440      	add	r0, r8
 8023436:	fb0b a202 	mla	r2, fp, r2, sl
 802343a:	eba0 0009 	sub.w	r0, r0, r9
 802343e:	b2c0      	uxtb	r0, r0
 8023440:	fbb1 f3f0 	udiv	r3, r1, r0
 8023444:	fbb5 f5f0 	udiv	r5, r5, r0
 8023448:	fbb2 f2f0 	udiv	r2, r2, r0
 802344c:	b2db      	uxtb	r3, r3
 802344e:	042d      	lsls	r5, r5, #16
 8023450:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8023454:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 8023458:	0212      	lsls	r2, r2, #8
 802345a:	432b      	orrs	r3, r5
 802345c:	b292      	uxth	r2, r2
 802345e:	4313      	orrs	r3, r2
 8023460:	f846 3c04 	str.w	r3, [r6, #-4]
 8023464:	3608      	adds	r6, #8
 8023466:	4576      	cmp	r6, lr
 8023468:	f47f af7d 	bne.w	8023366 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xfa>
 802346c:	9b07      	ldr	r3, [sp, #28]
 802346e:	9901      	ldr	r1, [sp, #4]
 8023470:	1c5a      	adds	r2, r3, #1
 8023472:	4411      	add	r1, r2
 8023474:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 8023478:	9a08      	ldr	r2, [sp, #32]
 802347a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 802347e:	9101      	str	r1, [sp, #4]
 8023480:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023484:	2b01      	cmp	r3, #1
 8023486:	d032      	beq.n	80234ee <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x282>
 8023488:	9906      	ldr	r1, [sp, #24]
 802348a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802348e:	4a2d      	ldr	r2, [pc, #180]	@ (8023544 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d8>)
 8023490:	440b      	add	r3, r1
 8023492:	8812      	ldrh	r2, [r2, #0]
 8023494:	9903      	ldr	r1, [sp, #12]
 8023496:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802349a:	1a52      	subs	r2, r2, r1
 802349c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80234a0:	9a02      	ldr	r2, [sp, #8]
 80234a2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80234a6:	9302      	str	r3, [sp, #8]
 80234a8:	9b04      	ldr	r3, [sp, #16]
 80234aa:	42a3      	cmp	r3, r4
 80234ac:	f63f af44 	bhi.w	8023338 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 80234b0:	4b23      	ldr	r3, [pc, #140]	@ (8023540 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d4>)
 80234b2:	6818      	ldr	r0, [r3, #0]
 80234b4:	6803      	ldr	r3, [r0, #0]
 80234b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80234b8:	4798      	blx	r3
 80234ba:	b00f      	add	sp, #60	@ 0x3c
 80234bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234c0:	5cbb      	ldrb	r3, [r7, r2]
 80234c2:	9a00      	ldr	r2, [sp, #0]
 80234c4:	7888      	ldrb	r0, [r1, #2]
 80234c6:	4313      	orrs	r3, r2
 80234c8:	784a      	ldrb	r2, [r1, #1]
 80234ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80234ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80234d2:	f846 3c04 	str.w	r3, [r6, #-4]
 80234d6:	3608      	adds	r6, #8
 80234d8:	45b6      	cmp	lr, r6
 80234da:	f47f af44 	bne.w	8023366 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xfa>
 80234de:	e7c5      	b.n	802346c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x200>
 80234e0:	9900      	ldr	r1, [sp, #0]
 80234e2:	430a      	orrs	r2, r1
 80234e4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80234e8:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 80234ec:	e777      	b.n	80233de <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x172>
 80234ee:	9b01      	ldr	r3, [sp, #4]
 80234f0:	4621      	mov	r1, r4
 80234f2:	7818      	ldrb	r0, [r3, #0]
 80234f4:	4642      	mov	r2, r8
 80234f6:	0900      	lsrs	r0, r0, #4
 80234f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80234fc:	4438      	add	r0, r7
 80234fe:	f7fb f86d 	bl	801e5dc <_ZNK8touchgfx8LCDGPU2D22blendPixelRGB888_32BPPEPKhPmh.constprop.19>
 8023502:	4b10      	ldr	r3, [pc, #64]	@ (8023544 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d8>)
 8023504:	9903      	ldr	r1, [sp, #12]
 8023506:	881a      	ldrh	r2, [r3, #0]
 8023508:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802350c:	1a52      	subs	r2, r2, r1
 802350e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8023512:	9a06      	ldr	r2, [sp, #24]
 8023514:	3404      	adds	r4, #4
 8023516:	4413      	add	r3, r2
 8023518:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802351c:	e7c0      	b.n	80234a0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>
 802351e:	9d02      	ldr	r5, [sp, #8]
 8023520:	4621      	mov	r1, r4
 8023522:	7828      	ldrb	r0, [r5, #0]
 8023524:	4642      	mov	r2, r8
 8023526:	f000 000f 	and.w	r0, r0, #15
 802352a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802352e:	4438      	add	r0, r7
 8023530:	f7fb f854 	bl	801e5dc <_ZNK8touchgfx8LCDGPU2D22blendPixelRGB888_32BPPEPKhPmh.constprop.19>
 8023534:	1c6b      	adds	r3, r5, #1
 8023536:	9301      	str	r3, [sp, #4]
 8023538:	3404      	adds	r4, #4
 802353a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802353c:	e703      	b.n	8023346 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 802353e:	bf00      	nop
 8023540:	2008745c 	.word	0x2008745c
 8023544:	20087456 	.word	0x20087456
 8023548:	4615      	mov	r5, r2
 802354a:	9a04      	ldr	r2, [sp, #16]
 802354c:	4295      	cmp	r5, r2
 802354e:	d2af      	bcs.n	80234b0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>
 8023550:	9b03      	ldr	r3, [sp, #12]
 8023552:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8023556:	469a      	mov	sl, r3
 8023558:	f103 38ff 	add.w	r8, r3, #4294967295
 802355c:	9b05      	ldr	r3, [sp, #20]
 802355e:	2b00      	cmp	r3, #0
 8023560:	d07d      	beq.n	802365e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3f2>
 8023562:	4646      	mov	r6, r8
 8023564:	f899 3000 	ldrb.w	r3, [r9]
 8023568:	f109 0e01 	add.w	lr, r9, #1
 802356c:	f003 030f 	and.w	r3, r3, #15
 8023570:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023574:	18fa      	adds	r2, r7, r3
 8023576:	5cfb      	ldrb	r3, [r7, r3]
 8023578:	7891      	ldrb	r1, [r2, #2]
 802357a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802357e:	7852      	ldrb	r2, [r2, #1]
 8023580:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8023584:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023588:	f845 3b04 	str.w	r3, [r5], #4
 802358c:	2e01      	cmp	r6, #1
 802358e:	dd3e      	ble.n	802360e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3a2>
 8023590:	3e02      	subs	r6, #2
 8023592:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 8023596:	f105 0410 	add.w	r4, r5, #16
 802359a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 802359e:	f105 0108 	add.w	r1, r5, #8
 80235a2:	f10e 30ff 	add.w	r0, lr, #4294967295
 80235a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80235aa:	3108      	adds	r1, #8
 80235ac:	091b      	lsrs	r3, r3, #4
 80235ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235b2:	5cfa      	ldrb	r2, [r7, r3]
 80235b4:	eb07 0b03 	add.w	fp, r7, r3
 80235b8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80235bc:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80235c0:	f89b b001 	ldrb.w	fp, [fp, #1]
 80235c4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80235c8:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 80235cc:	f841 3c10 	str.w	r3, [r1, #-16]
 80235d0:	7803      	ldrb	r3, [r0, #0]
 80235d2:	f003 030f 	and.w	r3, r3, #15
 80235d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235da:	5cfa      	ldrb	r2, [r7, r3]
 80235dc:	eb07 0b03 	add.w	fp, r7, r3
 80235e0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80235e4:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80235e8:	f89b b001 	ldrb.w	fp, [fp, #1]
 80235ec:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80235f0:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 80235f4:	f841 3c0c 	str.w	r3, [r1, #-12]
 80235f8:	428c      	cmp	r4, r1
 80235fa:	d1d4      	bne.n	80235a6 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x33a>
 80235fc:	f10c 0301 	add.w	r3, ip, #1
 8023600:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
 8023604:	449e      	add	lr, r3
 8023606:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 802360a:	eb06 064c 	add.w	r6, r6, ip, lsl #1
 802360e:	2e01      	cmp	r6, #1
 8023610:	d128      	bne.n	8023664 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3f8>
 8023612:	f89e 3000 	ldrb.w	r3, [lr]
 8023616:	091b      	lsrs	r3, r3, #4
 8023618:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802361c:	18fa      	adds	r2, r7, r3
 802361e:	5cfb      	ldrb	r3, [r7, r3]
 8023620:	7891      	ldrb	r1, [r2, #2]
 8023622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8023626:	7852      	ldrb	r2, [r2, #1]
 8023628:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802362c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023630:	602b      	str	r3, [r5, #0]
 8023632:	4b19      	ldr	r3, [pc, #100]	@ (8023698 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x42c>)
 8023634:	881a      	ldrh	r2, [r3, #0]
 8023636:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802363a:	eba2 020a 	sub.w	r2, r2, sl
 802363e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8023642:	9a06      	ldr	r2, [sp, #24]
 8023644:	3504      	adds	r5, #4
 8023646:	4413      	add	r3, r2
 8023648:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802364c:	eb09 0963 	add.w	r9, r9, r3, asr #1
 8023650:	9b04      	ldr	r3, [sp, #16]
 8023652:	42ab      	cmp	r3, r5
 8023654:	f67f af2c 	bls.w	80234b0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>
 8023658:	9b05      	ldr	r3, [sp, #20]
 802365a:	2b00      	cmp	r3, #0
 802365c:	d181      	bne.n	8023562 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f6>
 802365e:	46ce      	mov	lr, r9
 8023660:	4656      	mov	r6, sl
 8023662:	e793      	b.n	802358c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x320>
 8023664:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8023668:	4a0b      	ldr	r2, [pc, #44]	@ (8023698 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x42c>)
 802366a:	9906      	ldr	r1, [sp, #24]
 802366c:	8812      	ldrh	r2, [r2, #0]
 802366e:	440b      	add	r3, r1
 8023670:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8023674:	eba2 020a 	sub.w	r2, r2, sl
 8023678:	eb09 0963 	add.w	r9, r9, r3, asr #1
 802367c:	9b04      	ldr	r3, [sp, #16]
 802367e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8023682:	42ab      	cmp	r3, r5
 8023684:	f63f af6a 	bhi.w	802355c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f0>
 8023688:	e712      	b.n	80234b0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>
 802368a:	4b04      	ldr	r3, [pc, #16]	@ (802369c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x430>)
 802368c:	4a04      	ldr	r2, [pc, #16]	@ (80236a0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x434>)
 802368e:	f640 612c 	movw	r1, #3628	@ 0xe2c
 8023692:	4804      	ldr	r0, [pc, #16]	@ (80236a4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x438>)
 8023694:	f007 fbaa 	bl	802adec <__assert_func>
 8023698:	20087456 	.word	0x20087456
 802369c:	0802df34 	.word	0x0802df34
 80236a0:	0802ef24 	.word	0x0802ef24
 80236a4:	0802de70 	.word	0x0802de70

080236a8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 80236a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236ac:	7814      	ldrb	r4, [r2, #0]
 80236ae:	b091      	sub	sp, #68	@ 0x44
 80236b0:	2c01      	cmp	r4, #1
 80236b2:	461d      	mov	r5, r3
 80236b4:	9208      	str	r2, [sp, #32]
 80236b6:	9102      	str	r1, [sp, #8]
 80236b8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80236ba:	f89d a06c 	ldrb.w	sl, [sp, #108]	@ 0x6c
 80236be:	f040 814b 	bne.w	8023958 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2b0>
 80236c2:	6828      	ldr	r0, [r5, #0]
 80236c4:	6869      	ldr	r1, [r5, #4]
 80236c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80236c8:	c203      	stmia	r2!, {r0, r1}
 80236ca:	6818      	ldr	r0, [r3, #0]
 80236cc:	6859      	ldr	r1, [r3, #4]
 80236ce:	aa0e      	add	r2, sp, #56	@ 0x38
 80236d0:	c203      	stmia	r2!, {r0, r1}
 80236d2:	a80c      	add	r0, sp, #48	@ 0x30
 80236d4:	f7f2 f810 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80236d8:	4629      	mov	r1, r5
 80236da:	a80e      	add	r0, sp, #56	@ 0x38
 80236dc:	f7f2 f834 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80236e0:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80236e4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80236e8:	f340 8130 	ble.w	802394c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a4>
 80236ec:	4623      	mov	r3, r4
 80236ee:	b291      	uxth	r1, r2
 80236f0:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 80236f4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 80236f8:	fb92 f5f3 	sdiv	r5, r2, r3
 80236fc:	b2ae      	uxth	r6, r5
 80236fe:	fb03 2416 	mls	r4, r3, r6, r2
 8023702:	fb14 0101 	smlabb	r1, r4, r1, r0
 8023706:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 802370a:	b289      	uxth	r1, r1
 802370c:	441c      	add	r4, r3
 802370e:	3c01      	subs	r4, #1
 8023710:	9100      	str	r1, [sp, #0]
 8023712:	fb94 f4f3 	sdiv	r4, r4, r3
 8023716:	b136      	cbz	r6, 8023726 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x7e>
 8023718:	9b08      	ldr	r3, [sp, #32]
 802371a:	9902      	ldr	r1, [sp, #8]
 802371c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8023720:	ba1b      	rev	r3, r3
 8023722:	4419      	add	r1, r3
 8023724:	9102      	str	r1, [sp, #8]
 8023726:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 802372a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 802372e:	440a      	add	r2, r1
 8023730:	498d      	ldr	r1, [pc, #564]	@ (8023968 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c0>)
 8023732:	4403      	add	r3, r0
 8023734:	6808      	ldr	r0, [r1, #0]
 8023736:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 802373a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 802373e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8023742:	6803      	ldr	r3, [r0, #0]
 8023744:	960a      	str	r6, [sp, #40]	@ 0x28
 8023746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023748:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 802374c:	4798      	blx	r3
 802374e:	9b00      	ldr	r3, [sp, #0]
 8023750:	4986      	ldr	r1, [pc, #536]	@ (802396c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c4>)
 8023752:	2b00      	cmp	r3, #0
 8023754:	bf0c      	ite	eq
 8023756:	4633      	moveq	r3, r6
 8023758:	2300      	movne	r3, #0
 802375a:	8809      	ldrh	r1, [r1, #0]
 802375c:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 8023760:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8023764:	fb05 f501 	mul.w	r5, r5, r1
 8023768:	fb01 6202 	mla	r2, r1, r2, r6
 802376c:	b2a4      	uxth	r4, r4
 802376e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8023772:	eb08 0285 	add.w	r2, r8, r5, lsl #2
 8023776:	00a4      	lsls	r4, r4, #2
 8023778:	1d21      	adds	r1, r4, #4
 802377a:	4590      	cmp	r8, r2
 802377c:	9203      	str	r2, [sp, #12]
 802377e:	9109      	str	r1, [sp, #36]	@ 0x24
 8023780:	fa1f f983 	uxth.w	r9, r3
 8023784:	d227      	bcs.n	80237d6 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x12e>
 8023786:	2300      	movs	r3, #0
 8023788:	469b      	mov	fp, r3
 802378a:	ea4f 620a 	mov.w	r2, sl, lsl #24
 802378e:	9304      	str	r3, [sp, #16]
 8023790:	9205      	str	r2, [sp, #20]
 8023792:	f1bb 0f00 	cmp.w	fp, #0
 8023796:	d10f      	bne.n	80237b8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x110>
 8023798:	9902      	ldr	r1, [sp, #8]
 802379a:	780b      	ldrb	r3, [r1, #0]
 802379c:	ea4f 1b93 	mov.w	fp, r3, lsr #6
 80237a0:	f10b 32ff 	add.w	r2, fp, #4294967295
 80237a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80237a8:	2a02      	cmp	r2, #2
 80237aa:	9304      	str	r3, [sp, #16]
 80237ac:	f200 80c8 	bhi.w	8023940 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x298>
 80237b0:	3101      	adds	r1, #1
 80237b2:	9102      	str	r1, [sp, #8]
 80237b4:	fa1f fb8b 	uxth.w	fp, fp
 80237b8:	9b00      	ldr	r3, [sp, #0]
 80237ba:	b1a3      	cbz	r3, 80237e6 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x13e>
 80237bc:	459b      	cmp	fp, r3
 80237be:	f080 80b6 	bcs.w	802392e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x286>
 80237c2:	eba3 0b0b 	sub.w	fp, r3, fp
 80237c6:	fa1f f38b 	uxth.w	r3, fp
 80237ca:	f04f 0b00 	mov.w	fp, #0
 80237ce:	9300      	str	r3, [sp, #0]
 80237d0:	9b03      	ldr	r3, [sp, #12]
 80237d2:	4543      	cmp	r3, r8
 80237d4:	d8dd      	bhi.n	8023792 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xea>
 80237d6:	4b64      	ldr	r3, [pc, #400]	@ (8023968 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c0>)
 80237d8:	6818      	ldr	r0, [r3, #0]
 80237da:	6803      	ldr	r3, [r0, #0]
 80237dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80237de:	4798      	blx	r3
 80237e0:	b011      	add	sp, #68	@ 0x44
 80237e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237e6:	2303      	movs	r3, #3
 80237e8:	4619      	mov	r1, r3
 80237ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80237ec:	9b04      	ldr	r3, [sp, #16]
 80237ee:	45cb      	cmp	fp, r9
 80237f0:	fb11 2c03 	smlabb	ip, r1, r3, r2
 80237f4:	9b08      	ldr	r3, [sp, #32]
 80237f6:	449c      	add	ip, r3
 80237f8:	d377      	bcc.n	80238ea <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x242>
 80237fa:	ebab 0309 	sub.w	r3, fp, r9
 80237fe:	9a00      	ldr	r2, [sp, #0]
 8023800:	b29b      	uxth	r3, r3
 8023802:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8023806:	9306      	str	r3, [sp, #24]
 8023808:	9207      	str	r2, [sp, #28]
 802380a:	464b      	mov	r3, r9
 802380c:	d077      	beq.n	80238fe <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x256>
 802380e:	b303      	cbz	r3, 8023852 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1aa>
 8023810:	3b01      	subs	r3, #1
 8023812:	b29b      	uxth	r3, r3
 8023814:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023816:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 802381a:	9301      	str	r3, [sp, #4]
 802381c:	f1a8 0e04 	sub.w	lr, r8, #4
 8023820:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8023824:	f89c 4000 	ldrb.w	r4, [ip]
 8023828:	0e18      	lsrs	r0, r3, #24
 802382a:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802382e:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8023832:	d126      	bne.n	8023882 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1da>
 8023834:	9b05      	ldr	r3, [sp, #20]
 8023836:	431c      	orrs	r4, r3
 8023838:	9b01      	ldr	r3, [sp, #4]
 802383a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 802383e:	ea44 2606 	orr.w	r6, r4, r6, lsl #8
 8023842:	459e      	cmp	lr, r3
 8023844:	f8ce 6000 	str.w	r6, [lr]
 8023848:	d1ea      	bne.n	8023820 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x178>
 802384a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802384c:	3301      	adds	r3, #1
 802384e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8023852:	45cb      	cmp	fp, r9
 8023854:	d346      	bcc.n	80238e4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8023856:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023858:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802385c:	4b43      	ldr	r3, [pc, #268]	@ (802396c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c4>)
 802385e:	fa1f f981 	uxth.w	r9, r1
 8023862:	eba2 0209 	sub.w	r2, r2, r9
 8023866:	881b      	ldrh	r3, [r3, #0]
 8023868:	b292      	uxth	r2, r2
 802386a:	2a00      	cmp	r2, #0
 802386c:	eba3 0301 	sub.w	r3, r3, r1
 8023870:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023874:	bf18      	it	ne
 8023876:	f04f 0900 	movne.w	r9, #0
 802387a:	9200      	str	r2, [sp, #0]
 802387c:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 8023880:	e7a6      	b.n	80237d0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x128>
 8023882:	fb0a f200 	mul.w	r2, sl, r0
 8023886:	fb1a f101 	smulbb	r1, sl, r1
 802388a:	1c55      	adds	r5, r2, #1
 802388c:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8023890:	fb1a f404 	smulbb	r4, sl, r4
 8023894:	122d      	asrs	r5, r5, #8
 8023896:	fb1a f606 	smulbb	r6, sl, r6
 802389a:	1b47      	subs	r7, r0, r5
 802389c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80238a0:	fb07 1102 	mla	r1, r7, r2, r1
 80238a4:	b2da      	uxtb	r2, r3
 80238a6:	fb07 4402 	mla	r4, r7, r2, r4
 80238aa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80238ae:	4450      	add	r0, sl
 80238b0:	fb07 6202 	mla	r2, r7, r2, r6
 80238b4:	1b45      	subs	r5, r0, r5
 80238b6:	b2ed      	uxtb	r5, r5
 80238b8:	fbb1 f3f5 	udiv	r3, r1, r5
 80238bc:	fbb4 f4f5 	udiv	r4, r4, r5
 80238c0:	fbb2 f2f5 	udiv	r2, r2, r5
 80238c4:	041b      	lsls	r3, r3, #16
 80238c6:	b2e4      	uxtb	r4, r4
 80238c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80238cc:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 80238d0:	0212      	lsls	r2, r2, #8
 80238d2:	432b      	orrs	r3, r5
 80238d4:	b292      	uxth	r2, r2
 80238d6:	4313      	orrs	r3, r2
 80238d8:	f8ce 3000 	str.w	r3, [lr]
 80238dc:	9b01      	ldr	r3, [sp, #4]
 80238de:	459e      	cmp	lr, r3
 80238e0:	d19e      	bne.n	8023820 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x178>
 80238e2:	e7b2      	b.n	802384a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 80238e4:	e9dd b906 	ldrd	fp, r9, [sp, #24]
 80238e8:	e772      	b.n	80237d0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x128>
 80238ea:	9a00      	ldr	r2, [sp, #0]
 80238ec:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80238f0:	9206      	str	r2, [sp, #24]
 80238f2:	eba9 020b 	sub.w	r2, r9, fp
 80238f6:	b292      	uxth	r2, r2
 80238f8:	465b      	mov	r3, fp
 80238fa:	9207      	str	r2, [sp, #28]
 80238fc:	d187      	bne.n	802380e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x166>
 80238fe:	2b00      	cmp	r3, #0
 8023900:	d0a7      	beq.n	8023852 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1aa>
 8023902:	1e58      	subs	r0, r3, #1
 8023904:	b280      	uxth	r0, r0
 8023906:	3001      	adds	r0, #1
 8023908:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 802390c:	f89c 3000 	ldrb.w	r3, [ip]
 8023910:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8023914:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8023918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802391c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8023920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023924:	f848 3b04 	str.w	r3, [r8], #4
 8023928:	4540      	cmp	r0, r8
 802392a:	d1ef      	bne.n	802390c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>
 802392c:	e791      	b.n	8023852 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1aa>
 802392e:	ebab 0b03 	sub.w	fp, fp, r3
 8023932:	2300      	movs	r3, #0
 8023934:	fa1f fb8b 	uxth.w	fp, fp
 8023938:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 802393c:	9300      	str	r3, [sp, #0]
 802393e:	e747      	b.n	80237d0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x128>
 8023940:	460b      	mov	r3, r1
 8023942:	3302      	adds	r3, #2
 8023944:	f891 b001 	ldrb.w	fp, [r1, #1]
 8023948:	9302      	str	r3, [sp, #8]
 802394a:	e735      	b.n	80237b8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x110>
 802394c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8023950:	b291      	uxth	r1, r2
 8023952:	fb94 f3f1 	sdiv	r3, r4, r1
 8023956:	e6cb      	b.n	80236f0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x48>
 8023958:	4b05      	ldr	r3, [pc, #20]	@ (8023970 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c8>)
 802395a:	4a06      	ldr	r2, [pc, #24]	@ (8023974 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2cc>)
 802395c:	f640 61a3 	movw	r1, #3747	@ 0xea3
 8023960:	4805      	ldr	r0, [pc, #20]	@ (8023978 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d0>)
 8023962:	f007 fa43 	bl	802adec <__assert_func>
 8023966:	bf00      	nop
 8023968:	2008745c 	.word	0x2008745c
 802396c:	20087456 	.word	0x20087456
 8023970:	0802df34 	.word	0x0802df34
 8023974:	0802f0c8 	.word	0x0802f0c8
 8023978:	0802de70 	.word	0x0802de70

0802397c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 802397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023980:	7814      	ldrb	r4, [r2, #0]
 8023982:	b09f      	sub	sp, #124	@ 0x7c
 8023984:	2c01      	cmp	r4, #1
 8023986:	461d      	mov	r5, r3
 8023988:	9214      	str	r2, [sp, #80]	@ 0x50
 802398a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802398c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802398e:	f89d a0a4 	ldrb.w	sl, [sp, #164]	@ 0xa4
 8023992:	f040 8232 	bne.w	8023dfa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x47e>
 8023996:	6869      	ldr	r1, [r5, #4]
 8023998:	4683      	mov	fp, r0
 802399a:	6828      	ldr	r0, [r5, #0]
 802399c:	aa1a      	add	r2, sp, #104	@ 0x68
 802399e:	c203      	stmia	r2!, {r0, r1}
 80239a0:	6818      	ldr	r0, [r3, #0]
 80239a2:	6859      	ldr	r1, [r3, #4]
 80239a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80239a6:	c203      	stmia	r2!, {r0, r1}
 80239a8:	a81a      	add	r0, sp, #104	@ 0x68
 80239aa:	f7f1 fea5 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239ae:	4629      	mov	r1, r5
 80239b0:	a81c      	add	r0, sp, #112	@ 0x70
 80239b2:	f7f1 fec9 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80239b6:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	@ 0x6c
 80239ba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80239be:	f340 8214 	ble.w	8023dea <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x46e>
 80239c2:	4623      	mov	r3, r4
 80239c4:	b292      	uxth	r2, r2
 80239c6:	9418      	str	r4, [sp, #96]	@ 0x60
 80239c8:	f9bd 0072 	ldrsh.w	r0, [sp, #114]	@ 0x72
 80239cc:	f9bd 106e 	ldrsh.w	r1, [sp, #110]	@ 0x6e
 80239d0:	fb90 f4f3 	sdiv	r4, r0, r3
 80239d4:	4419      	add	r1, r3
 80239d6:	3901      	subs	r1, #1
 80239d8:	fb91 f1f3 	sdiv	r1, r1, r3
 80239dc:	b2a4      	uxth	r4, r4
 80239de:	fb03 0314 	mls	r3, r3, r4, r0
 80239e2:	9416      	str	r4, [sp, #88]	@ 0x58
 80239e4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80239e8:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 80239ec:	fb13 4202 	smlabb	r2, r3, r2, r4
 80239f0:	f8bd 506a 	ldrh.w	r5, [sp, #106]	@ 0x6a
 80239f4:	4bae      	ldr	r3, [pc, #696]	@ (8023cb0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x334>)
 80239f6:	4434      	add	r4, r6
 80239f8:	4405      	add	r5, r0
 80239fa:	6818      	ldr	r0, [r3, #0]
 80239fc:	f8ad 4070 	strh.w	r4, [sp, #112]	@ 0x70
 8023a00:	f8ad 5072 	strh.w	r5, [sp, #114]	@ 0x72
 8023a04:	f9bd 7074 	ldrsh.w	r7, [sp, #116]	@ 0x74
 8023a08:	6803      	ldr	r3, [r0, #0]
 8023a0a:	b296      	uxth	r6, r2
 8023a0c:	3101      	adds	r1, #1
 8023a0e:	9602      	str	r6, [sp, #8]
 8023a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a12:	970d      	str	r7, [sp, #52]	@ 0x34
 8023a14:	b28c      	uxth	r4, r1
 8023a16:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	@ 0x76
 8023a1a:	4798      	blx	r3
 8023a1c:	2300      	movs	r3, #0
 8023a1e:	2e00      	cmp	r6, #0
 8023a20:	bf0c      	ite	eq
 8023a22:	463a      	moveq	r2, r7
 8023a24:	2200      	movne	r2, #0
 8023a26:	49a3      	ldr	r1, [pc, #652]	@ (8023cb4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x338>)
 8023a28:	9315      	str	r3, [sp, #84]	@ 0x54
 8023a2a:	8809      	ldrh	r1, [r1, #0]
 8023a2c:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	@ 0x72
 8023a30:	f9bd 6070 	ldrsh.w	r6, [sp, #112]	@ 0x70
 8023a34:	fb05 f501 	mul.w	r5, r5, r1
 8023a38:	fb01 6303 	mla	r3, r1, r3, r6
 8023a3c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023a40:	9301      	str	r3, [sp, #4]
 8023a42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8023a46:	9308      	str	r3, [sp, #32]
 8023a48:	b293      	uxth	r3, r2
 8023a4a:	9303      	str	r3, [sp, #12]
 8023a4c:	ea4f 630a 	mov.w	r3, sl, lsl #24
 8023a50:	930a      	str	r3, [sp, #40]	@ 0x28
 8023a52:	f10b 030e 	add.w	r3, fp, #14
 8023a56:	9319      	str	r3, [sp, #100]	@ 0x64
 8023a58:	4653      	mov	r3, sl
 8023a5a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8023a5c:	46da      	mov	sl, fp
 8023a5e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8023a62:	f104 0904 	add.w	r9, r4, #4
 8023a66:	46cb      	mov	fp, r9
 8023a68:	4699      	mov	r9, r3
 8023a6a:	9b01      	ldr	r3, [sp, #4]
 8023a6c:	9a08      	ldr	r2, [sp, #32]
 8023a6e:	4293      	cmp	r3, r2
 8023a70:	f080 8116 	bcs.w	8023ca0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x324>
 8023a74:	2601      	movs	r6, #1
 8023a76:	2700      	movs	r7, #0
 8023a78:	9b02      	ldr	r3, [sp, #8]
 8023a7a:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8023a7e:	46bc      	mov	ip, r7
 8023a80:	fbb3 f1f1 	udiv	r1, r3, r1
 8023a84:	e9dd 3215 	ldrd	r3, r2, [sp, #84]	@ 0x54
 8023a88:	fa12 f283 	uxtah	r2, r2, r3
 8023a8c:	0092      	lsls	r2, r2, #2
 8023a8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023a90:	3204      	adds	r2, #4
 8023a92:	1898      	adds	r0, r3, r2
 8023a94:	7883      	ldrb	r3, [r0, #2]
 8023a96:	7845      	ldrb	r5, [r0, #1]
 8023a98:	021b      	lsls	r3, r3, #8
 8023a9a:	78c0      	ldrb	r0, [r0, #3]
 8023a9c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8023aa0:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8023aa2:	4304      	orrs	r4, r0
 8023aa4:	4628      	mov	r0, r5
 8023aa6:	46b0      	mov	r8, r6
 8023aa8:	4420      	add	r0, r4
 8023aaa:	7843      	ldrb	r3, [r0, #1]
 8023aac:	5d2c      	ldrb	r4, [r5, r4]
 8023aae:	021b      	lsls	r3, r3, #8
 8023ab0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8023ab4:	431c      	orrs	r4, r3
 8023ab6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8023ab8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023aba:	5caa      	ldrb	r2, [r5, r2]
 8023abc:	1a59      	subs	r1, r3, r1
 8023abe:	b2a3      	uxth	r3, r4
 8023ac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023ac2:	1983      	adds	r3, r0, r6
 8023ac4:	9306      	str	r3, [sp, #24]
 8023ac6:	1993      	adds	r3, r2, r6
 8023ac8:	9307      	str	r3, [sp, #28]
 8023aca:	b28b      	uxth	r3, r1
 8023acc:	9710      	str	r7, [sp, #64]	@ 0x40
 8023ace:	960c      	str	r6, [sp, #48]	@ 0x30
 8023ad0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8023ad2:	f88a 400d 	strb.w	r4, [sl, #13]
 8023ad6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023ad8:	9605      	str	r6, [sp, #20]
 8023ada:	9b02      	ldr	r3, [sp, #8]
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d038      	beq.n	8023b52 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 8023ae0:	4598      	cmp	r8, r3
 8023ae2:	f080 813f 	bcs.w	8023d64 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3e8>
 8023ae6:	eba3 0808 	sub.w	r8, r3, r8
 8023aea:	fa1f f388 	uxth.w	r3, r8
 8023aee:	9302      	str	r3, [sp, #8]
 8023af0:	9a08      	ldr	r2, [sp, #32]
 8023af2:	9b01      	ldr	r3, [sp, #4]
 8023af4:	4293      	cmp	r3, r2
 8023af6:	f080 80d3 	bcs.w	8023ca0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x324>
 8023afa:	9806      	ldr	r0, [sp, #24]
 8023afc:	9c05      	ldr	r4, [sp, #20]
 8023afe:	7842      	ldrb	r2, [r0, #1]
 8023b00:	f1c4 0107 	rsb	r1, r4, #7
 8023b04:	7803      	ldrb	r3, [r0, #0]
 8023b06:	408a      	lsls	r2, r1
 8023b08:	0052      	lsls	r2, r2, #1
 8023b0a:	4123      	asrs	r3, r4
 8023b0c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8023b10:	1c61      	adds	r1, r4, #1
 8023b12:	b2db      	uxtb	r3, r3
 8023b14:	4313      	orrs	r3, r2
 8023b16:	b2ca      	uxtb	r2, r1
 8023b18:	4611      	mov	r1, r2
 8023b1a:	2908      	cmp	r1, #8
 8023b1c:	9205      	str	r2, [sp, #20]
 8023b1e:	b29a      	uxth	r2, r3
 8023b20:	f000 812d 	beq.w	8023d7e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x402>
 8023b24:	3001      	adds	r0, #1
 8023b26:	9006      	str	r0, [sp, #24]
 8023b28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023b2a:	4291      	cmp	r1, r2
 8023b2c:	f0c0 80fa 	bcc.w	8023d24 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3a8>
 8023b30:	f04f 0801 	mov.w	r8, #1
 8023b34:	b2db      	uxtb	r3, r3
 8023b36:	f88a 300d 	strb.w	r3, [sl, #13]
 8023b3a:	9907      	ldr	r1, [sp, #28]
 8023b3c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8023b40:	f0c0 8123 	bcc.w	8023d8a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x40e>
 8023b44:	9b02      	ldr	r3, [sp, #8]
 8023b46:	e9cd 280b 	strd	r2, r8, [sp, #44]	@ 0x2c
 8023b4a:	f04f 0c00 	mov.w	ip, #0
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	d1c6      	bne.n	8023ae0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x164>
 8023b52:	9b03      	ldr	r3, [sp, #12]
 8023b54:	4598      	cmp	r8, r3
 8023b56:	461a      	mov	r2, r3
 8023b58:	f0c0 80ae 	bcc.w	8023cb8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x33c>
 8023b5c:	eba8 0303 	sub.w	r3, r8, r3
 8023b60:	b29b      	uxth	r3, r3
 8023b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b64:	9b02      	ldr	r3, [sp, #8]
 8023b66:	9204      	str	r2, [sp, #16]
 8023b68:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8023b6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8023b6e:	9b04      	ldr	r3, [sp, #16]
 8023b70:	f000 80b0 	beq.w	8023cd4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x358>
 8023b74:	b393      	cbz	r3, 8023bdc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>
 8023b76:	4463      	add	r3, ip
 8023b78:	b29b      	uxth	r3, r3
 8023b7a:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8023b7e:	4698      	mov	r8, r3
 8023b80:	9a01      	ldr	r2, [sp, #4]
 8023b82:	9311      	str	r3, [sp, #68]	@ 0x44
 8023b84:	f1a2 0e04 	sub.w	lr, r2, #4
 8023b88:	eb0a 030c 	add.w	r3, sl, ip
 8023b8c:	7b5a      	ldrb	r2, [r3, #13]
 8023b8e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 8023b92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b96:	eb0b 0102 	add.w	r1, fp, r2
 8023b9a:	f10c 0c01 	add.w	ip, ip, #1
 8023b9e:	f81b 0002 	ldrb.w	r0, [fp, r2]
 8023ba2:	784d      	ldrb	r5, [r1, #1]
 8023ba4:	788a      	ldrb	r2, [r1, #2]
 8023ba6:	0e19      	lsrs	r1, r3, #24
 8023ba8:	fa1f fc8c 	uxth.w	ip, ip
 8023bac:	d13f      	bne.n	8023c2e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2b2>
 8023bae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023bb0:	45c4      	cmp	ip, r8
 8023bb2:	ea40 0003 	orr.w	r0, r0, r3
 8023bb6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023bba:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
 8023bbe:	f8ce 5000 	str.w	r5, [lr]
 8023bc2:	d1e1      	bne.n	8023b88 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8023bc4:	9b04      	ldr	r3, [sp, #16]
 8023bc6:	9a01      	ldr	r2, [sp, #4]
 8023bc8:	3b01      	subs	r3, #1
 8023bca:	b29b      	uxth	r3, r3
 8023bcc:	3301      	adds	r3, #1
 8023bce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023bd2:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8023bd6:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 8023bda:	9301      	str	r3, [sp, #4]
 8023bdc:	9b03      	ldr	r3, [sp, #12]
 8023bde:	4598      	cmp	r8, r3
 8023be0:	d356      	bcc.n	8023c90 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x314>
 8023be2:	4b34      	ldr	r3, [pc, #208]	@ (8023cb4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x338>)
 8023be4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023be6:	881b      	ldrh	r3, [r3, #0]
 8023be8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023bea:	1a5b      	subs	r3, r3, r1
 8023bec:	9901      	ldr	r1, [sp, #4]
 8023bee:	3201      	adds	r2, #1
 8023bf0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023bf4:	9301      	str	r3, [sp, #4]
 8023bf6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023bf8:	9210      	str	r2, [sp, #64]	@ 0x40
 8023bfa:	4293      	cmp	r3, r2
 8023bfc:	f000 80e4 	beq.w	8023dc8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x44c>
 8023c00:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8023c04:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8023c08:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8023c0c:	1a9b      	subs	r3, r3, r2
 8023c0e:	b29b      	uxth	r3, r3
 8023c10:	2b00      	cmp	r3, #0
 8023c12:	bf14      	ite	ne
 8023c14:	2200      	movne	r2, #0
 8023c16:	2300      	moveq	r3, #0
 8023c18:	9203      	str	r2, [sp, #12]
 8023c1a:	9302      	str	r3, [sp, #8]
 8023c1c:	9b01      	ldr	r3, [sp, #4]
 8023c1e:	9a08      	ldr	r2, [sp, #32]
 8023c20:	4293      	cmp	r3, r2
 8023c22:	d23d      	bcs.n	8023ca0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x324>
 8023c24:	f1b8 0f00 	cmp.w	r8, #0
 8023c28:	f47f af57 	bne.w	8023ada <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x15e>
 8023c2c:	e765      	b.n	8023afa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x17e>
 8023c2e:	fb09 f601 	mul.w	r6, r9, r1
 8023c32:	fb19 f702 	smulbb	r7, r9, r2
 8023c36:	1c74      	adds	r4, r6, #1
 8023c38:	eb04 2426 	add.w	r4, r4, r6, asr #8
 8023c3c:	fb19 f000 	smulbb	r0, r9, r0
 8023c40:	1224      	asrs	r4, r4, #8
 8023c42:	fb19 f505 	smulbb	r5, r9, r5
 8023c46:	1b0e      	subs	r6, r1, r4
 8023c48:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8023c4c:	fb06 7202 	mla	r2, r6, r2, r7
 8023c50:	b2df      	uxtb	r7, r3
 8023c52:	fb06 0007 	mla	r0, r6, r7, r0
 8023c56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023c5a:	fb06 5503 	mla	r5, r6, r3, r5
 8023c5e:	4449      	add	r1, r9
 8023c60:	1b09      	subs	r1, r1, r4
 8023c62:	b2c9      	uxtb	r1, r1
 8023c64:	fbb2 f2f1 	udiv	r2, r2, r1
 8023c68:	fbb0 f0f1 	udiv	r0, r0, r1
 8023c6c:	fbb5 f5f1 	udiv	r5, r5, r1
 8023c70:	0413      	lsls	r3, r2, #16
 8023c72:	b2c0      	uxtb	r0, r0
 8023c74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023c78:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 8023c7c:	022d      	lsls	r5, r5, #8
 8023c7e:	430b      	orrs	r3, r1
 8023c80:	b2ad      	uxth	r5, r5
 8023c82:	432b      	orrs	r3, r5
 8023c84:	45c4      	cmp	ip, r8
 8023c86:	f8ce 3000 	str.w	r3, [lr]
 8023c8a:	f47f af7d 	bne.w	8023b88 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8023c8e:	e799      	b.n	8023bc4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>
 8023c90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023c92:	9a08      	ldr	r2, [sp, #32]
 8023c94:	9303      	str	r3, [sp, #12]
 8023c96:	9b01      	ldr	r3, [sp, #4]
 8023c98:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8023c9c:	4293      	cmp	r3, r2
 8023c9e:	d3c1      	bcc.n	8023c24 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a8>
 8023ca0:	4b03      	ldr	r3, [pc, #12]	@ (8023cb0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x334>)
 8023ca2:	6818      	ldr	r0, [r3, #0]
 8023ca4:	6803      	ldr	r3, [r0, #0]
 8023ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023ca8:	4798      	blx	r3
 8023caa:	b01f      	add	sp, #124	@ 0x7c
 8023cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cb0:	2008745c 	.word	0x2008745c
 8023cb4:	20087456 	.word	0x20087456
 8023cb8:	9b02      	ldr	r3, [sp, #8]
 8023cba:	f8cd 8010 	str.w	r8, [sp, #16]
 8023cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cc0:	9b03      	ldr	r3, [sp, #12]
 8023cc2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8023cc6:	eba3 0308 	sub.w	r3, r3, r8
 8023cca:	b29b      	uxth	r3, r3
 8023ccc:	930e      	str	r3, [sp, #56]	@ 0x38
 8023cce:	9b04      	ldr	r3, [sp, #16]
 8023cd0:	f47f af50 	bne.w	8023b74 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1f8>
 8023cd4:	2b00      	cmp	r3, #0
 8023cd6:	d081      	beq.n	8023bdc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>
 8023cd8:	eb0c 0003 	add.w	r0, ip, r3
 8023cdc:	9901      	ldr	r1, [sp, #4]
 8023cde:	b280      	uxth	r0, r0
 8023ce0:	eb0a 030c 	add.w	r3, sl, ip
 8023ce4:	7b5b      	ldrb	r3, [r3, #13]
 8023ce6:	f10c 0c01 	add.w	ip, ip, #1
 8023cea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023cee:	eb0b 0203 	add.w	r2, fp, r3
 8023cf2:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8023cf6:	7894      	ldrb	r4, [r2, #2]
 8023cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8023cfc:	7852      	ldrb	r2, [r2, #1]
 8023cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8023d02:	fa1f fc8c 	uxth.w	ip, ip
 8023d06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023d0a:	4584      	cmp	ip, r0
 8023d0c:	f841 3b04 	str.w	r3, [r1], #4
 8023d10:	d1e6      	bne.n	8023ce0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x364>
 8023d12:	9b04      	ldr	r3, [sp, #16]
 8023d14:	9a01      	ldr	r2, [sp, #4]
 8023d16:	3b01      	subs	r3, #1
 8023d18:	b29b      	uxth	r3, r3
 8023d1a:	3301      	adds	r3, #1
 8023d1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023d20:	9301      	str	r3, [sp, #4]
 8023d22:	e75b      	b.n	8023bdc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>
 8023d24:	9b07      	ldr	r3, [sp, #28]
 8023d26:	4293      	cmp	r3, r2
 8023d28:	d832      	bhi.n	8023d90 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x414>
 8023d2a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023d2c:	f89a 100d 	ldrb.w	r1, [sl, #13]
 8023d30:	eb0a 0300 	add.w	r3, sl, r0
 8023d34:	7359      	strb	r1, [r3, #13]
 8023d36:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8023d3a:	1c41      	adds	r1, r0, #1
 8023d3c:	fa1f f881 	uxth.w	r8, r1
 8023d40:	9c07      	ldr	r4, [sp, #28]
 8023d42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8023d44:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
 8023d48:	3401      	adds	r4, #1
 8023d4a:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 8023d4e:	b2a3      	uxth	r3, r4
 8023d50:	f8a0 5050 	strh.w	r5, [r0, #80]	@ 0x50
 8023d54:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 8023d58:	9307      	str	r3, [sp, #28]
 8023d5a:	e9cd 280b 	strd	r2, r8, [sp, #44]	@ 0x2c
 8023d5e:	f04f 0c00 	mov.w	ip, #0
 8023d62:	e6ba      	b.n	8023ada <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x15e>
 8023d64:	eba8 0803 	sub.w	r8, r8, r3
 8023d68:	449c      	add	ip, r3
 8023d6a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8023d6e:	fa1f f888 	uxth.w	r8, r8
 8023d72:	9303      	str	r3, [sp, #12]
 8023d74:	2300      	movs	r3, #0
 8023d76:	fa1f fc8c 	uxth.w	ip, ip
 8023d7a:	9302      	str	r3, [sp, #8]
 8023d7c:	e74e      	b.n	8023c1c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a0>
 8023d7e:	2100      	movs	r1, #0
 8023d80:	9105      	str	r1, [sp, #20]
 8023d82:	9906      	ldr	r1, [sp, #24]
 8023d84:	3102      	adds	r1, #2
 8023d86:	9106      	str	r1, [sp, #24]
 8023d88:	e6ce      	b.n	8023b28 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 8023d8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023d8c:	3101      	adds	r1, #1
 8023d8e:	e7d7      	b.n	8023d40 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3c4>
 8023d90:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
 8023d94:	f893 804f 	ldrb.w	r8, [r3, #79]	@ 0x4f
 8023d98:	4613      	mov	r3, r2
 8023d9a:	f1b8 0f01 	cmp.w	r8, #1
 8023d9e:	d90d      	bls.n	8023dbc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x440>
 8023da0:	f108 010d 	add.w	r1, r8, #13
 8023da4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8023da6:	4451      	add	r1, sl
 8023da8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8023dac:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8023db0:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8023db4:	428c      	cmp	r4, r1
 8023db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8023dba:	d1f5      	bne.n	8023da8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x42c>
 8023dbc:	b2db      	uxtb	r3, r3
 8023dbe:	f88a 300d 	strb.w	r3, [sl, #13]
 8023dc2:	fa1f f888 	uxth.w	r8, r8
 8023dc6:	e6b8      	b.n	8023b3a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8023dc8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8023dcc:	f8bd 2068 	ldrh.w	r2, [sp, #104]	@ 0x68
 8023dd0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8023dd2:	1a9b      	subs	r3, r3, r2
 8023dd4:	b29b      	uxth	r3, r3
 8023dd6:	2b00      	cmp	r3, #0
 8023dd8:	9302      	str	r3, [sp, #8]
 8023dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023ddc:	bf18      	it	ne
 8023dde:	2300      	movne	r3, #0
 8023de0:	3101      	adds	r1, #1
 8023de2:	b29b      	uxth	r3, r3
 8023de4:	9115      	str	r1, [sp, #84]	@ 0x54
 8023de6:	9303      	str	r3, [sp, #12]
 8023de8:	e63f      	b.n	8023a6a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xee>
 8023dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023dee:	b292      	uxth	r2, r2
 8023df0:	fb93 f3f2 	sdiv	r3, r3, r2
 8023df4:	b299      	uxth	r1, r3
 8023df6:	9118      	str	r1, [sp, #96]	@ 0x60
 8023df8:	e5e6      	b.n	80239c8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x4c>
 8023dfa:	4b03      	ldr	r3, [pc, #12]	@ (8023e08 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x48c>)
 8023dfc:	4a03      	ldr	r2, [pc, #12]	@ (8023e0c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x490>)
 8023dfe:	f640 7142 	movw	r1, #3906	@ 0xf42
 8023e02:	4803      	ldr	r0, [pc, #12]	@ (8023e10 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x494>)
 8023e04:	f006 fff2 	bl	802adec <__assert_func>
 8023e08:	0802df34 	.word	0x0802df34
 8023e0c:	0802f424 	.word	0x0802f424
 8023e10:	0802de70 	.word	0x0802de70

08023e14 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8023e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e18:	4617      	mov	r7, r2
 8023e1a:	8812      	ldrh	r2, [r2, #0]
 8023e1c:	b095      	sub	sp, #84	@ 0x54
 8023e1e:	461c      	mov	r4, r3
 8023e20:	f89d 907c 	ldrb.w	r9, [sp, #124]	@ 0x7c
 8023e24:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023e26:	2a00      	cmp	r2, #0
 8023e28:	f040 8112 	bne.w	8024050 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8023e2c:	4688      	mov	r8, r1
 8023e2e:	6820      	ldr	r0, [r4, #0]
 8023e30:	6861      	ldr	r1, [r4, #4]
 8023e32:	aa10      	add	r2, sp, #64	@ 0x40
 8023e34:	c203      	stmia	r2!, {r0, r1}
 8023e36:	6818      	ldr	r0, [r3, #0]
 8023e38:	6859      	ldr	r1, [r3, #4]
 8023e3a:	aa12      	add	r2, sp, #72	@ 0x48
 8023e3c:	c203      	stmia	r2!, {r0, r1}
 8023e3e:	a810      	add	r0, sp, #64	@ 0x40
 8023e40:	f7f1 fc5a 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023e44:	4621      	mov	r1, r4
 8023e46:	a812      	add	r0, sp, #72	@ 0x48
 8023e48:	f7f1 fc7e 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023e4c:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	@ 0x48
 8023e50:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	@ 0x4a
 8023e54:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8023e58:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8023e5c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8023e60:	487f      	ldr	r0, [pc, #508]	@ (8024060 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8023e62:	fb11 4105 	smlabb	r1, r1, r5, r4
 8023e66:	4422      	add	r2, r4
 8023e68:	442b      	add	r3, r5
 8023e6a:	6800      	ldr	r0, [r0, #0]
 8023e6c:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8023e70:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 8023e74:	6802      	ldr	r2, [r0, #0]
 8023e76:	4488      	add	r8, r1
 8023e78:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 8023e7c:	4c79      	ldr	r4, [pc, #484]	@ (8024064 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8023e7e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8023e82:	910c      	str	r1, [sp, #48]	@ 0x30
 8023e84:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 8023e88:	42a3      	cmp	r3, r4
 8023e8a:	910e      	str	r1, [sp, #56]	@ 0x38
 8023e8c:	f040 80ab 	bne.w	8023fe6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8023e90:	6841      	ldr	r1, [r0, #4]
 8023e92:	4c75      	ldr	r4, [pc, #468]	@ (8024068 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8023e94:	680b      	ldr	r3, [r1, #0]
 8023e96:	699b      	ldr	r3, [r3, #24]
 8023e98:	42a3      	cmp	r3, r4
 8023e9a:	f040 80cb 	bne.w	8024034 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x220>
 8023e9e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8023ea0:	4798      	blx	r3
 8023ea2:	4b72      	ldr	r3, [pc, #456]	@ (802406c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8023ea4:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	@ 0x4a
 8023ea8:	881b      	ldrh	r3, [r3, #0]
 8023eaa:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	@ 0x48
 8023eae:	fb01 2303 	mla	r3, r1, r3, r2
 8023eb2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023eb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023eb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023eba:	2b00      	cmp	r3, #0
 8023ebc:	f340 808b 	ble.w	8023fd6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8023ec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	f340 8087 	ble.w	8023fd6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8023ec8:	2200      	movs	r2, #0
 8023eca:	f04f 0c04 	mov.w	ip, #4
 8023ece:	009b      	lsls	r3, r3, #2
 8023ed0:	920d      	str	r2, [sp, #52]	@ 0x34
 8023ed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023ed6:	4645      	mov	r5, r8
 8023ed8:	1d1c      	adds	r4, r3, #4
 8023eda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023edc:	eb08 0e03 	add.w	lr, r8, r3
 8023ee0:	e048      	b.n	8023f74 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8023ee2:	fb09 f303 	mul.w	r3, r9, r3
 8023ee6:	1c5a      	adds	r2, r3, #1
 8023ee8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023eec:	121b      	asrs	r3, r3, #8
 8023eee:	b2d8      	uxtb	r0, r3
 8023ef0:	43c1      	mvns	r1, r0
 8023ef2:	b29b      	uxth	r3, r3
 8023ef4:	fb1a f203 	smulbb	r2, sl, r3
 8023ef8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8023efc:	b2c9      	uxtb	r1, r1
 8023efe:	fb0a 2a01 	mla	sl, sl, r1, r2
 8023f02:	fa1f fa8a 	uxth.w	sl, sl
 8023f06:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8023f0a:	f10a 0b01 	add.w	fp, sl, #1
 8023f0e:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8023f12:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023f16:	fb12 fb01 	smulbb	fp, r2, r1
 8023f1a:	f804 ac04 	strb.w	sl, [r4, #-4]
 8023f1e:	7872      	ldrb	r2, [r6, #1]
 8023f20:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8023f24:	fb02 b203 	mla	r2, r2, r3, fp
 8023f28:	b292      	uxth	r2, r2
 8023f2a:	f102 0b01 	add.w	fp, r2, #1
 8023f2e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023f32:	fb1a fa01 	smulbb	sl, sl, r1
 8023f36:	1212      	asrs	r2, r2, #8
 8023f38:	f804 2c03 	strb.w	r2, [r4, #-3]
 8023f3c:	78b1      	ldrb	r1, [r6, #2]
 8023f3e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8023f42:	fb01 a103 	mla	r1, r1, r3, sl
 8023f46:	fb12 f303 	smulbb	r3, r2, r3
 8023f4a:	b289      	uxth	r1, r1
 8023f4c:	b29b      	uxth	r3, r3
 8023f4e:	f101 0a01 	add.w	sl, r1, #1
 8023f52:	1c5e      	adds	r6, r3, #1
 8023f54:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8023f58:	4402      	add	r2, r0
 8023f5a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8023f5e:	1209      	asrs	r1, r1, #8
 8023f60:	eba2 2313 	sub.w	r3, r2, r3, lsr #8
 8023f64:	f804 1c02 	strb.w	r1, [r4, #-2]
 8023f68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8023f6c:	45ae      	cmp	lr, r5
 8023f6e:	f104 0404 	add.w	r4, r4, #4
 8023f72:	d01c      	beq.n	8023fae <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x19a>
 8023f74:	f815 2b01 	ldrb.w	r2, [r5], #1
 8023f78:	fb1c c202 	smlabb	r2, ip, r2, ip
 8023f7c:	18be      	adds	r6, r7, r2
 8023f7e:	78f3      	ldrb	r3, [r6, #3]
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	d0f3      	beq.n	8023f6c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8023f84:	2bff      	cmp	r3, #255	@ 0xff
 8023f86:	f817 a002 	ldrb.w	sl, [r7, r2]
 8023f8a:	d1aa      	bne.n	8023ee2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8023f8c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8023f90:	d1a7      	bne.n	8023ee2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8023f92:	f804 ac04 	strb.w	sl, [r4, #-4]
 8023f96:	7873      	ldrb	r3, [r6, #1]
 8023f98:	45ae      	cmp	lr, r5
 8023f9a:	f804 3c03 	strb.w	r3, [r4, #-3]
 8023f9e:	78b3      	ldrb	r3, [r6, #2]
 8023fa0:	f104 0404 	add.w	r4, r4, #4
 8023fa4:	f804 9c05 	strb.w	r9, [r4, #-5]
 8023fa8:	f804 3c06 	strb.w	r3, [r4, #-6]
 8023fac:	d1e2      	bne.n	8023f74 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8023fae:	4b2f      	ldr	r3, [pc, #188]	@ (802406c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8023fb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8023fb2:	881b      	ldrh	r3, [r3, #0]
 8023fb4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8023fb6:	1a5b      	subs	r3, r3, r1
 8023fb8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023fbc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8023fbe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023fc0:	4418      	add	r0, r3
 8023fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023fc4:	3101      	adds	r1, #1
 8023fc6:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	@ 0x44
 8023fca:	428b      	cmp	r3, r1
 8023fcc:	910d      	str	r1, [sp, #52]	@ 0x34
 8023fce:	900b      	str	r0, [sp, #44]	@ 0x2c
 8023fd0:	4490      	add	r8, r2
 8023fd2:	f47f af7f 	bne.w	8023ed4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xc0>
 8023fd6:	4b22      	ldr	r3, [pc, #136]	@ (8024060 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8023fd8:	6818      	ldr	r0, [r3, #0]
 8023fda:	6803      	ldr	r3, [r0, #0]
 8023fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023fde:	4798      	blx	r3
 8023fe0:	b015      	add	sp, #84	@ 0x54
 8023fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fe6:	4798      	blx	r3
 8023fe8:	4603      	mov	r3, r0
 8023fea:	2b01      	cmp	r3, #1
 8023fec:	d126      	bne.n	802403c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x228>
 8023fee:	4a20      	ldr	r2, [pc, #128]	@ (8024070 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8023ff0:	6810      	ldr	r0, [r2, #0]
 8023ff2:	b338      	cbz	r0, 8024044 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x230>
 8023ff4:	f04f 0c02 	mov.w	ip, #2
 8023ff8:	260b      	movs	r6, #11
 8023ffa:	4a1c      	ldr	r2, [pc, #112]	@ (802406c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8023ffc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8024000:	8814      	ldrh	r4, [r2, #0]
 8024002:	f8bd 5044 	ldrh.w	r5, [sp, #68]	@ 0x44
 8024006:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 802400a:	9406      	str	r4, [sp, #24]
 802400c:	f8bd 404a 	ldrh.w	r4, [sp, #74]	@ 0x4a
 8024010:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8024014:	9305      	str	r3, [sp, #20]
 8024016:	f8cd 9010 	str.w	r9, [sp, #16]
 802401a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 802401e:	463a      	mov	r2, r7
 8024020:	4641      	mov	r1, r8
 8024022:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 8024026:	9503      	str	r5, [sp, #12]
 8024028:	9400      	str	r4, [sp, #0]
 802402a:	f7f7 f953 	bl	801b2d4 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802402e:	b015      	add	sp, #84	@ 0x54
 8024030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024034:	4608      	mov	r0, r1
 8024036:	4798      	blx	r3
 8024038:	4603      	mov	r3, r0
 802403a:	e7d6      	b.n	8023fea <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 802403c:	4b08      	ldr	r3, [pc, #32]	@ (8024060 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 802403e:	6818      	ldr	r0, [r3, #0]
 8024040:	6802      	ldr	r2, [r0, #0]
 8024042:	e72c      	b.n	8023e9e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8024044:	4b0b      	ldr	r3, [pc, #44]	@ (8024074 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8024046:	4a0c      	ldr	r2, [pc, #48]	@ (8024078 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8024048:	217c      	movs	r1, #124	@ 0x7c
 802404a:	480c      	ldr	r0, [pc, #48]	@ (802407c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x268>)
 802404c:	f006 fece 	bl	802adec <__assert_func>
 8024050:	4b0b      	ldr	r3, [pc, #44]	@ (8024080 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x26c>)
 8024052:	4a0c      	ldr	r2, [pc, #48]	@ (8024084 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x270>)
 8024054:	f241 012a 	movw	r1, #4138	@ 0x102a
 8024058:	480b      	ldr	r0, [pc, #44]	@ (8024088 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>)
 802405a:	f006 fec7 	bl	802adec <__assert_func>
 802405e:	bf00      	nop
 8024060:	2008745c 	.word	0x2008745c
 8024064:	0801176d 	.word	0x0801176d
 8024068:	0801457f 	.word	0x0801457f
 802406c:	20087456 	.word	0x20087456
 8024070:	200875c8 	.word	0x200875c8
 8024074:	0802ddcc 	.word	0x0802ddcc
 8024078:	0802e638 	.word	0x0802e638
 802407c:	0802ddf4 	.word	0x0802ddf4
 8024080:	0802dee4 	.word	0x0802dee4
 8024084:	0802ed80 	.word	0x0802ed80
 8024088:	0802de70 	.word	0x0802de70

0802408c <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh>:
 802408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024090:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8024094:	fb03 f300 	mul.w	r3, r3, r0
 8024098:	1c58      	adds	r0, r3, #1
 802409a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802409e:	121b      	asrs	r3, r3, #8
 80240a0:	2bff      	cmp	r3, #255	@ 0xff
 80240a2:	d039      	beq.n	8024118 <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh+0x8c>
 80240a4:	6810      	ldr	r0, [r2, #0]
 80240a6:	0e07      	lsrs	r7, r0, #24
 80240a8:	d036      	beq.n	8024118 <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh+0x8c>
 80240aa:	b2dc      	uxtb	r4, r3
 80240ac:	2b00      	cmp	r3, #0
 80240ae:	d03d      	beq.n	802412c <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh+0xa0>
 80240b0:	fb04 f507 	mul.w	r5, r4, r7
 80240b4:	1c6e      	adds	r6, r5, #1
 80240b6:	eb06 2625 	add.w	r6, r6, r5, asr #8
 80240ba:	1236      	asrs	r6, r6, #8
 80240bc:	f891 8002 	ldrb.w	r8, [r1, #2]
 80240c0:	eba7 0e06 	sub.w	lr, r7, r6
 80240c4:	b2c5      	uxtb	r5, r0
 80240c6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80240ca:	fb0e f505 	mul.w	r5, lr, r5
 80240ce:	fb03 f808 	mul.w	r8, r3, r8
 80240d2:	7809      	ldrb	r1, [r1, #0]
 80240d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80240d8:	fb03 5501 	mla	r5, r3, r1, r5
 80240dc:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80240e0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80240e4:	fb0e 8101 	mla	r1, lr, r1, r8
 80240e8:	19e0      	adds	r0, r4, r7
 80240ea:	fb0e c303 	mla	r3, lr, r3, ip
 80240ee:	1b80      	subs	r0, r0, r6
 80240f0:	b2c0      	uxtb	r0, r0
 80240f2:	fbb1 f1f0 	udiv	r1, r1, r0
 80240f6:	fbb5 f4f0 	udiv	r4, r5, r0
 80240fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80240fe:	0409      	lsls	r1, r1, #16
 8024100:	b2e4      	uxtb	r4, r4
 8024102:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 8024106:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 802410a:	021b      	lsls	r3, r3, #8
 802410c:	4301      	orrs	r1, r0
 802410e:	b29b      	uxth	r3, r3
 8024110:	430b      	orrs	r3, r1
 8024112:	6013      	str	r3, [r2, #0]
 8024114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024118:	7848      	ldrb	r0, [r1, #1]
 802411a:	788d      	ldrb	r5, [r1, #2]
 802411c:	780c      	ldrb	r4, [r1, #0]
 802411e:	0200      	lsls	r0, r0, #8
 8024120:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 8024124:	4321      	orrs	r1, r4
 8024126:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 802412a:	6013      	str	r3, [r2, #0]
 802412c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024130 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8024130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024134:	4692      	mov	sl, r2
 8024136:	7812      	ldrb	r2, [r2, #0]
 8024138:	b095      	sub	sp, #84	@ 0x54
 802413a:	460d      	mov	r5, r1
 802413c:	461e      	mov	r6, r3
 802413e:	900d      	str	r0, [sp, #52]	@ 0x34
 8024140:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024142:	f89d 107c 	ldrb.w	r1, [sp, #124]	@ 0x7c
 8024146:	2a00      	cmp	r2, #0
 8024148:	f040 816b 	bne.w	8024422 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f2>
 802414c:	6830      	ldr	r0, [r6, #0]
 802414e:	460f      	mov	r7, r1
 8024150:	6871      	ldr	r1, [r6, #4]
 8024152:	aa10      	add	r2, sp, #64	@ 0x40
 8024154:	c203      	stmia	r2!, {r0, r1}
 8024156:	6818      	ldr	r0, [r3, #0]
 8024158:	6859      	ldr	r1, [r3, #4]
 802415a:	aa12      	add	r2, sp, #72	@ 0x48
 802415c:	c203      	stmia	r2!, {r0, r1}
 802415e:	a810      	add	r0, sp, #64	@ 0x40
 8024160:	f7f1 faca 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024164:	4631      	mov	r1, r6
 8024166:	a812      	add	r0, sp, #72	@ 0x48
 8024168:	f7f1 faee 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802416c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8024170:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	@ 0x48
 8024174:	f003 0201 	and.w	r2, r3, #1
 8024178:	4614      	mov	r4, r2
 802417a:	9208      	str	r2, [sp, #32]
 802417c:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	@ 0x4a
 8024180:	f8bd 0042 	ldrh.w	r0, [sp, #66]	@ 0x42
 8024184:	4423      	add	r3, r4
 8024186:	fb02 1303 	mla	r3, r2, r3, r1
 802418a:	f8bd 6040 	ldrh.w	r6, [sp, #64]	@ 0x40
 802418e:	4402      	add	r2, r0
 8024190:	48a7      	ldr	r0, [pc, #668]	@ (8024430 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x300>)
 8024192:	440e      	add	r6, r1
 8024194:	6800      	ldr	r0, [r0, #0]
 8024196:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 802419a:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 802419e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80241a2:	eb05 0363 	add.w	r3, r5, r3, asr #1
 80241a6:	6802      	ldr	r2, [r0, #0]
 80241a8:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 80241ac:	9302      	str	r3, [sp, #8]
 80241ae:	f001 0301 	and.w	r3, r1, #1
 80241b2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80241b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80241b6:	9607      	str	r6, [sp, #28]
 80241b8:	f9bd 404e 	ldrsh.w	r4, [sp, #78]	@ 0x4e
 80241bc:	4790      	blx	r2
 80241be:	4a9d      	ldr	r2, [pc, #628]	@ (8024434 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x304>)
 80241c0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 80241c4:	8812      	ldrh	r2, [r2, #0]
 80241c6:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	@ 0x48
 80241ca:	fb04 f402 	mul.w	r4, r4, r2
 80241ce:	fb02 1303 	mla	r3, r2, r3, r1
 80241d2:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 80241d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80241da:	429d      	cmp	r5, r3
 80241dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80241de:	f10a 0a04 	add.w	sl, sl, #4
 80241e2:	f080 80f4 	bcs.w	80243ce <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x29e>
 80241e6:	46bb      	mov	fp, r7
 80241e8:	1e73      	subs	r3, r6, #1
 80241ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80241ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241ee:	2b00      	cmp	r3, #0
 80241f0:	f000 8104 	beq.w	80243fc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2cc>
 80241f4:	9a02      	ldr	r2, [sp, #8]
 80241f6:	7813      	ldrb	r3, [r2, #0]
 80241f8:	1c54      	adds	r4, r2, #1
 80241fa:	f003 030f 	and.w	r3, r3, #15
 80241fe:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8024202:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024204:	0e1b      	lsrs	r3, r3, #24
 8024206:	f040 8104 	bne.w	8024412 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2e2>
 802420a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802420c:	3504      	adds	r5, #4
 802420e:	2b01      	cmp	r3, #1
 8024210:	f340 80bf 	ble.w	8024392 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x262>
 8024214:	3b02      	subs	r3, #2
 8024216:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 802421a:	9304      	str	r3, [sp, #16]
 802421c:	f10e 0301 	add.w	r3, lr, #1
 8024220:	e9cd 5e05 	strd	r5, lr, [sp, #20]
 8024224:	9303      	str	r3, [sp, #12]
 8024226:	18e7      	adds	r7, r4, r3
 8024228:	f105 0808 	add.w	r8, r5, #8
 802422c:	46de      	mov	lr, fp
 802422e:	e00b      	b.n	8024248 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x118>
 8024230:	f005 050f 	and.w	r5, r5, #15
 8024234:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8024238:	3401      	adds	r4, #1
 802423a:	0e1a      	lsrs	r2, r3, #24
 802423c:	d153      	bne.n	80242e6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b6>
 802423e:	42bc      	cmp	r4, r7
 8024240:	f108 0808 	add.w	r8, r8, #8
 8024244:	f000 8099 	beq.w	802437a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24a>
 8024248:	7825      	ldrb	r5, [r4, #0]
 802424a:	092b      	lsrs	r3, r5, #4
 802424c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8024250:	0e1a      	lsrs	r2, r3, #24
 8024252:	d0ed      	beq.n	8024230 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x100>
 8024254:	fb0e f202 	mul.w	r2, lr, r2
 8024258:	1c51      	adds	r1, r2, #1
 802425a:	eb01 2222 	add.w	r2, r1, r2, asr #8
 802425e:	1212      	asrs	r2, r2, #8
 8024260:	2aff      	cmp	r2, #255	@ 0xff
 8024262:	f000 80bc 	beq.w	80243de <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ae>
 8024266:	f858 1c08 	ldr.w	r1, [r8, #-8]
 802426a:	0e0e      	lsrs	r6, r1, #24
 802426c:	f000 80b7 	beq.w	80243de <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ae>
 8024270:	b2d0      	uxtb	r0, r2
 8024272:	2a00      	cmp	r2, #0
 8024274:	d0dc      	beq.n	8024230 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x100>
 8024276:	fb00 fc06 	mul.w	ip, r0, r6
 802427a:	f10c 0501 	add.w	r5, ip, #1
 802427e:	eb05 252c 	add.w	r5, r5, ip, asr #8
 8024282:	122d      	asrs	r5, r5, #8
 8024284:	950b      	str	r5, [sp, #44]	@ 0x2c
 8024286:	fa5f fb81 	uxtb.w	fp, r1
 802428a:	1b75      	subs	r5, r6, r5
 802428c:	f3c3 4907 	ubfx	r9, r3, #16, #8
 8024290:	fb05 fb0b 	mul.w	fp, r5, fp
 8024294:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8024298:	fb02 f909 	mul.w	r9, r2, r9
 802429c:	fb02 fc0c 	mul.w	ip, r2, ip
 80242a0:	b2db      	uxtb	r3, r3
 80242a2:	fb02 b303 	mla	r3, r2, r3, fp
 80242a6:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80242aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80242ae:	fb05 9902 	mla	r9, r5, r2, r9
 80242b2:	fb05 c101 	mla	r1, r5, r1, ip
 80242b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80242b8:	4430      	add	r0, r6
 80242ba:	1b45      	subs	r5, r0, r5
 80242bc:	b2ed      	uxtb	r5, r5
 80242be:	fbb9 f2f5 	udiv	r2, r9, r5
 80242c2:	fbb3 f3f5 	udiv	r3, r3, r5
 80242c6:	fbb1 f1f5 	udiv	r1, r1, r5
 80242ca:	0412      	lsls	r2, r2, #16
 80242cc:	b2db      	uxtb	r3, r3
 80242ce:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80242d2:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80242d6:	0209      	lsls	r1, r1, #8
 80242d8:	4313      	orrs	r3, r2
 80242da:	b289      	uxth	r1, r1
 80242dc:	430b      	orrs	r3, r1
 80242de:	f848 3c08 	str.w	r3, [r8, #-8]
 80242e2:	7825      	ldrb	r5, [r4, #0]
 80242e4:	e7a4      	b.n	8024230 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x100>
 80242e6:	fb0e f202 	mul.w	r2, lr, r2
 80242ea:	1c51      	adds	r1, r2, #1
 80242ec:	eb01 2222 	add.w	r2, r1, r2, asr #8
 80242f0:	1212      	asrs	r2, r2, #8
 80242f2:	2aff      	cmp	r2, #255	@ 0xff
 80242f4:	d07b      	beq.n	80243ee <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2be>
 80242f6:	f858 1c04 	ldr.w	r1, [r8, #-4]
 80242fa:	0e0e      	lsrs	r6, r1, #24
 80242fc:	d077      	beq.n	80243ee <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2be>
 80242fe:	b2d0      	uxtb	r0, r2
 8024300:	2a00      	cmp	r2, #0
 8024302:	d09c      	beq.n	802423e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x10e>
 8024304:	fb00 fc06 	mul.w	ip, r0, r6
 8024308:	f10c 0501 	add.w	r5, ip, #1
 802430c:	eb05 252c 	add.w	r5, r5, ip, asr #8
 8024310:	122d      	asrs	r5, r5, #8
 8024312:	950b      	str	r5, [sp, #44]	@ 0x2c
 8024314:	fa5f fb81 	uxtb.w	fp, r1
 8024318:	1b75      	subs	r5, r6, r5
 802431a:	f3c3 4907 	ubfx	r9, r3, #16, #8
 802431e:	fb05 fb0b 	mul.w	fp, r5, fp
 8024322:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8024326:	fb02 f909 	mul.w	r9, r2, r9
 802432a:	fb02 fc0c 	mul.w	ip, r2, ip
 802432e:	b2db      	uxtb	r3, r3
 8024330:	fb02 b303 	mla	r3, r2, r3, fp
 8024334:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8024338:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802433c:	fb05 9902 	mla	r9, r5, r2, r9
 8024340:	fb05 c101 	mla	r1, r5, r1, ip
 8024344:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8024346:	4430      	add	r0, r6
 8024348:	1b45      	subs	r5, r0, r5
 802434a:	b2ed      	uxtb	r5, r5
 802434c:	fbb9 f2f5 	udiv	r2, r9, r5
 8024350:	fbb3 f3f5 	udiv	r3, r3, r5
 8024354:	fbb1 f1f5 	udiv	r1, r1, r5
 8024358:	0412      	lsls	r2, r2, #16
 802435a:	b2db      	uxtb	r3, r3
 802435c:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8024360:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8024364:	0209      	lsls	r1, r1, #8
 8024366:	4313      	orrs	r3, r2
 8024368:	b289      	uxth	r1, r1
 802436a:	430b      	orrs	r3, r1
 802436c:	42bc      	cmp	r4, r7
 802436e:	f848 3c04 	str.w	r3, [r8, #-4]
 8024372:	f108 0808 	add.w	r8, r8, #8
 8024376:	f47f af67 	bne.w	8024248 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x118>
 802437a:	46f3      	mov	fp, lr
 802437c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8024380:	9a04      	ldr	r2, [sp, #16]
 8024382:	ebce 73ce 	rsb	r3, lr, lr, lsl #31
 8024386:	9d05      	ldr	r5, [sp, #20]
 8024388:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802438c:	9a03      	ldr	r2, [sp, #12]
 802438e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8024392:	2b01      	cmp	r3, #1
 8024394:	d107      	bne.n	80243a6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x276>
 8024396:	7823      	ldrb	r3, [r4, #0]
 8024398:	091b      	lsrs	r3, r3, #4
 802439a:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 802439e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80243a0:	0e1b      	lsrs	r3, r3, #24
 80243a2:	d12e      	bne.n	8024402 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d2>
 80243a4:	3504      	adds	r5, #4
 80243a6:	9908      	ldr	r1, [sp, #32]
 80243a8:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80243ac:	4a21      	ldr	r2, [pc, #132]	@ (8024434 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x304>)
 80243ae:	440b      	add	r3, r1
 80243b0:	8812      	ldrh	r2, [r2, #0]
 80243b2:	9907      	ldr	r1, [sp, #28]
 80243b4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80243b8:	1a52      	subs	r2, r2, r1
 80243ba:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80243be:	9a02      	ldr	r2, [sp, #8]
 80243c0:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80243c4:	9302      	str	r3, [sp, #8]
 80243c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80243c8:	42ab      	cmp	r3, r5
 80243ca:	f63f af0f 	bhi.w	80241ec <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 80243ce:	4b18      	ldr	r3, [pc, #96]	@ (8024430 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x300>)
 80243d0:	6818      	ldr	r0, [r3, #0]
 80243d2:	6803      	ldr	r3, [r0, #0]
 80243d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80243d6:	4798      	blx	r3
 80243d8:	b015      	add	sp, #84	@ 0x54
 80243da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80243e2:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80243e6:	f848 2c08 	str.w	r2, [r8, #-8]
 80243ea:	7825      	ldrb	r5, [r4, #0]
 80243ec:	e720      	b.n	8024230 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x100>
 80243ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80243f2:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80243f6:	f848 2c04 	str.w	r2, [r8, #-4]
 80243fa:	e720      	b.n	802423e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x10e>
 80243fc:	9c02      	ldr	r4, [sp, #8]
 80243fe:	9b07      	ldr	r3, [sp, #28]
 8024400:	e705      	b.n	802420e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xde>
 8024402:	9300      	str	r3, [sp, #0]
 8024404:	462a      	mov	r2, r5
 8024406:	465b      	mov	r3, fp
 8024408:	a90f      	add	r1, sp, #60	@ 0x3c
 802440a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802440c:	f7ff fe3e 	bl	802408c <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh>
 8024410:	e7c8      	b.n	80243a4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>
 8024412:	9300      	str	r3, [sp, #0]
 8024414:	462a      	mov	r2, r5
 8024416:	465b      	mov	r3, fp
 8024418:	a90f      	add	r1, sp, #60	@ 0x3c
 802441a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802441c:	f7ff fe36 	bl	802408c <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh>
 8024420:	e6f3      	b.n	802420a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8024422:	4b05      	ldr	r3, [pc, #20]	@ (8024438 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 8024424:	4a05      	ldr	r2, [pc, #20]	@ (802443c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x30c>)
 8024426:	f241 018c 	movw	r1, #4236	@ 0x108c
 802442a:	4805      	ldr	r0, [pc, #20]	@ (8024440 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x310>)
 802442c:	f006 fcde 	bl	802adec <__assert_func>
 8024430:	2008745c 	.word	0x2008745c
 8024434:	20087456 	.word	0x20087456
 8024438:	0802df64 	.word	0x0802df64
 802443c:	0802f274 	.word	0x0802f274
 8024440:	0802de70 	.word	0x0802de70

08024444 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8024444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024448:	b093      	sub	sp, #76	@ 0x4c
 802444a:	9206      	str	r2, [sp, #24]
 802444c:	468b      	mov	fp, r1
 802444e:	7812      	ldrb	r2, [r2, #0]
 8024450:	f89d 1074 	ldrb.w	r1, [sp, #116]	@ 0x74
 8024454:	461c      	mov	r4, r3
 8024456:	9108      	str	r1, [sp, #32]
 8024458:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802445a:	2a00      	cmp	r2, #0
 802445c:	f040 815f 	bne.w	802471e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2da>
 8024460:	6820      	ldr	r0, [r4, #0]
 8024462:	6861      	ldr	r1, [r4, #4]
 8024464:	aa0e      	add	r2, sp, #56	@ 0x38
 8024466:	c203      	stmia	r2!, {r0, r1}
 8024468:	6818      	ldr	r0, [r3, #0]
 802446a:	6859      	ldr	r1, [r3, #4]
 802446c:	aa10      	add	r2, sp, #64	@ 0x40
 802446e:	c203      	stmia	r2!, {r0, r1}
 8024470:	a80e      	add	r0, sp, #56	@ 0x38
 8024472:	f7f1 f941 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024476:	4621      	mov	r1, r4
 8024478:	a810      	add	r0, sp, #64	@ 0x40
 802447a:	f7f1 f965 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802447e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8024482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024486:	f340 8137 	ble.w	80246f8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2b4>
 802448a:	2201      	movs	r2, #1
 802448c:	b299      	uxth	r1, r3
 802448e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8024492:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8024496:	fb93 f5f2 	sdiv	r5, r3, r2
 802449a:	b2ae      	uxth	r6, r5
 802449c:	fb02 3416 	mls	r4, r2, r6, r3
 80244a0:	fb14 0101 	smlabb	r1, r4, r1, r0
 80244a4:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	@ 0x3e
 80244a8:	fa1f fa81 	uxth.w	sl, r1
 80244ac:	4414      	add	r4, r2
 80244ae:	3c01      	subs	r4, #1
 80244b0:	fb94 f4f2 	sdiv	r4, r4, r2
 80244b4:	b126      	cbz	r6, 80244c0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x7c>
 80244b6:	9a06      	ldr	r2, [sp, #24]
 80244b8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80244bc:	ba12      	rev	r2, r2
 80244be:	4493      	add	fp, r2
 80244c0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80244c4:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 80244c8:	4402      	add	r2, r0
 80244ca:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80244ce:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	@ 0x44
 80244d2:	440b      	add	r3, r1
 80244d4:	4616      	mov	r6, r2
 80244d6:	4995      	ldr	r1, [pc, #596]	@ (802472c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2e8>)
 80244d8:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80244dc:	6808      	ldr	r0, [r1, #0]
 80244de:	9203      	str	r2, [sp, #12]
 80244e0:	6803      	ldr	r3, [r0, #0]
 80244e2:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80244e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80244e8:	4798      	blx	r3
 80244ea:	f1ba 0f00 	cmp.w	sl, #0
 80244ee:	bf0c      	ite	eq
 80244f0:	4633      	moveq	r3, r6
 80244f2:	2300      	movne	r3, #0
 80244f4:	498e      	ldr	r1, [pc, #568]	@ (8024730 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ec>)
 80244f6:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80244fa:	8809      	ldrh	r1, [r1, #0]
 80244fc:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 8024500:	fb05 f501 	mul.w	r5, r5, r1
 8024504:	fb01 6202 	mla	r2, r1, r2, r6
 8024508:	b2a4      	uxth	r4, r4
 802450a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802450e:	00a2      	lsls	r2, r4, #2
 8024510:	eb08 0485 	add.w	r4, r8, r5, lsl #2
 8024514:	3204      	adds	r2, #4
 8024516:	45a0      	cmp	r8, r4
 8024518:	9207      	str	r2, [sp, #28]
 802451a:	fa1f f983 	uxth.w	r9, r3
 802451e:	d21e      	bcs.n	802455e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x11a>
 8024520:	2300      	movs	r3, #0
 8024522:	4648      	mov	r0, r9
 8024524:	9301      	str	r3, [sp, #4]
 8024526:	461d      	mov	r5, r3
 8024528:	4653      	mov	r3, sl
 802452a:	b985      	cbnz	r5, 802454e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x10a>
 802452c:	f89b 2000 	ldrb.w	r2, [fp]
 8024530:	0995      	lsrs	r5, r2, #6
 8024532:	1e69      	subs	r1, r5, #1
 8024534:	2902      	cmp	r1, #2
 8024536:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 802453a:	bf88      	it	hi
 802453c:	f89b 5001 	ldrbhi.w	r5, [fp, #1]
 8024540:	9201      	str	r2, [sp, #4]
 8024542:	bf9a      	itte	ls
 8024544:	f10b 0b01 	addls.w	fp, fp, #1
 8024548:	b2ad      	uxthls	r5, r5
 802454a:	f10b 0b02 	addhi.w	fp, fp, #2
 802454e:	b173      	cbz	r3, 802456e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x12a>
 8024550:	429d      	cmp	r5, r3
 8024552:	d259      	bcs.n	8024608 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c4>
 8024554:	1b5b      	subs	r3, r3, r5
 8024556:	2500      	movs	r5, #0
 8024558:	b29b      	uxth	r3, r3
 802455a:	45a0      	cmp	r8, r4
 802455c:	d3e5      	bcc.n	802452a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 802455e:	4b73      	ldr	r3, [pc, #460]	@ (802472c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2e8>)
 8024560:	6818      	ldr	r0, [r3, #0]
 8024562:	6803      	ldr	r3, [r0, #0]
 8024564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024566:	4798      	blx	r3
 8024568:	b013      	add	sp, #76	@ 0x4c
 802456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802456e:	2204      	movs	r2, #4
 8024570:	4616      	mov	r6, r2
 8024572:	9907      	ldr	r1, [sp, #28]
 8024574:	9a01      	ldr	r2, [sp, #4]
 8024576:	4285      	cmp	r5, r0
 8024578:	fb16 1202 	smlabb	r2, r6, r2, r1
 802457c:	9906      	ldr	r1, [sp, #24]
 802457e:	588e      	ldr	r6, [r1, r2]
 8024580:	ea4f 6c16 	mov.w	ip, r6, lsr #24
 8024584:	d357      	bcc.n	8024636 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 8024586:	1a2a      	subs	r2, r5, r0
 8024588:	b292      	uxth	r2, r2
 802458a:	9202      	str	r2, [sp, #8]
 802458c:	2800      	cmp	r0, #0
 802458e:	d041      	beq.n	8024614 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d0>
 8024590:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8024594:	9a08      	ldr	r2, [sp, #32]
 8024596:	f3c6 2907 	ubfx	r9, r6, #8, #8
 802459a:	fb02 f20c 	mul.w	r2, r2, ip
 802459e:	f102 0a01 	add.w	sl, r2, #1
 80245a2:	eb0a 2222 	add.w	r2, sl, r2, asr #8
 80245a6:	1212      	asrs	r2, r2, #8
 80245a8:	b2d1      	uxtb	r1, r2
 80245aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80245ac:	b291      	uxth	r1, r2
 80245ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80245b0:	fb02 f109 	mul.w	r1, r2, r9
 80245b4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80245b8:	ea4f 2709 	mov.w	r7, r9, lsl #8
 80245bc:	b2f6      	uxtb	r6, r6
 80245be:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 80245c2:	4337      	orrs	r7, r6
 80245c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80245c6:	fb06 f602 	mul.w	r6, r6, r2
 80245ca:	fb02 fe0e 	mul.w	lr, r2, lr
 80245ce:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 80245d2:	f1bc 0f00 	cmp.w	ip, #0
 80245d6:	d036      	beq.n	8024646 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x202>
 80245d8:	2a00      	cmp	r2, #0
 80245da:	d13b      	bne.n	8024654 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x210>
 80245dc:	9a04      	ldr	r2, [sp, #16]
 80245de:	1e51      	subs	r1, r2, #1
 80245e0:	b289      	uxth	r1, r1
 80245e2:	eb08 0c81 	add.w	ip, r8, r1, lsl #2
 80245e6:	f1a8 0204 	sub.w	r2, r8, #4
 80245ea:	f852 6f04 	ldr.w	r6, [r2, #4]!
 80245ee:	0e36      	lsrs	r6, r6, #24
 80245f0:	bf08      	it	eq
 80245f2:	6017      	streq	r7, [r2, #0]
 80245f4:	4594      	cmp	ip, r2
 80245f6:	d1f8      	bne.n	80245ea <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1a6>
 80245f8:	3101      	adds	r1, #1
 80245fa:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80245fe:	4285      	cmp	r5, r0
 8024600:	d208      	bcs.n	8024614 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d0>
 8024602:	9d02      	ldr	r5, [sp, #8]
 8024604:	9805      	ldr	r0, [sp, #20]
 8024606:	e7a8      	b.n	802455a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x116>
 8024608:	1aed      	subs	r5, r5, r3
 802460a:	b2ad      	uxth	r5, r5
 802460c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8024610:	2300      	movs	r3, #0
 8024612:	e7a2      	b.n	802455a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x116>
 8024614:	9903      	ldr	r1, [sp, #12]
 8024616:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 802461a:	4a45      	ldr	r2, [pc, #276]	@ (8024730 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ec>)
 802461c:	b288      	uxth	r0, r1
 802461e:	1a1b      	subs	r3, r3, r0
 8024620:	8812      	ldrh	r2, [r2, #0]
 8024622:	b29b      	uxth	r3, r3
 8024624:	2b00      	cmp	r3, #0
 8024626:	eba2 0201 	sub.w	r2, r2, r1
 802462a:	9d02      	ldr	r5, [sp, #8]
 802462c:	bf18      	it	ne
 802462e:	2000      	movne	r0, #0
 8024630:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8024634:	e791      	b.n	802455a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x116>
 8024636:	1b42      	subs	r2, r0, r5
 8024638:	b292      	uxth	r2, r2
 802463a:	9205      	str	r2, [sp, #20]
 802463c:	2d00      	cmp	r5, #0
 802463e:	d06b      	beq.n	8024718 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d4>
 8024640:	9504      	str	r5, [sp, #16]
 8024642:	9302      	str	r3, [sp, #8]
 8024644:	e7a6      	b.n	8024594 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x150>
 8024646:	9a04      	ldr	r2, [sp, #16]
 8024648:	3a01      	subs	r2, #1
 802464a:	b292      	uxth	r2, r2
 802464c:	3201      	adds	r2, #1
 802464e:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8024652:	e7d4      	b.n	80245fe <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 8024654:	2aff      	cmp	r2, #255	@ 0xff
 8024656:	9a04      	ldr	r2, [sp, #16]
 8024658:	d054      	beq.n	8024704 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c0>
 802465a:	f102 3aff 	add.w	sl, r2, #4294967295
 802465e:	fa1f fa8a 	uxth.w	sl, sl
 8024662:	e9cd 6e0c 	strd	r6, lr, [sp, #48]	@ 0x30
 8024666:	f10a 0a01 	add.w	sl, sl, #1
 802466a:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
 802466e:	9304      	str	r3, [sp, #16]
 8024670:	f8d8 2000 	ldr.w	r2, [r8]
 8024674:	0e11      	lsrs	r1, r2, #24
 8024676:	d038      	beq.n	80246ea <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a6>
 8024678:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802467a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802467c:	fb11 f606 	smulbb	r6, r1, r6
 8024680:	b2b6      	uxth	r6, r6
 8024682:	f106 0e01 	add.w	lr, r6, #1
 8024686:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802468a:	ea4f 2e26 	mov.w	lr, r6, asr #8
 802468e:	eba1 090e 	sub.w	r9, r1, lr
 8024692:	b2d6      	uxtb	r6, r2
 8024694:	fb09 3606 	mla	r6, r9, r6, r3
 8024698:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802469a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802469e:	fb09 3c0c 	mla	ip, r9, ip, r3
 80246a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80246a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80246a8:	4419      	add	r1, r3
 80246aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80246ac:	eba1 010e 	sub.w	r1, r1, lr
 80246b0:	fb09 3202 	mla	r2, r9, r2, r3
 80246b4:	b2c9      	uxtb	r1, r1
 80246b6:	fbb6 f6f1 	udiv	r6, r6, r1
 80246ba:	fbbc fcf1 	udiv	ip, ip, r1
 80246be:	fbb2 f9f1 	udiv	r9, r2, r1
 80246c2:	b2f6      	uxtb	r6, r6
 80246c4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80246c8:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 80246cc:	f40c 027f 	and.w	r2, ip, #16711680	@ 0xff0000
 80246d0:	ea4f 2109 	mov.w	r1, r9, lsl #8
 80246d4:	4332      	orrs	r2, r6
 80246d6:	b289      	uxth	r1, r1
 80246d8:	430a      	orrs	r2, r1
 80246da:	f8c8 2000 	str.w	r2, [r8]
 80246de:	f108 0804 	add.w	r8, r8, #4
 80246e2:	45d0      	cmp	r8, sl
 80246e4:	d1c4      	bne.n	8024670 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x22c>
 80246e6:	9b04      	ldr	r3, [sp, #16]
 80246e8:	e789      	b.n	80245fe <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 80246ea:	f8c8 7000 	str.w	r7, [r8]
 80246ee:	f108 0804 	add.w	r8, r8, #4
 80246f2:	45d0      	cmp	r8, sl
 80246f4:	d1bc      	bne.n	8024670 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x22c>
 80246f6:	e7f6      	b.n	80246e6 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a2>
 80246f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80246fc:	b299      	uxth	r1, r3
 80246fe:	fb94 f2f1 	sdiv	r2, r4, r1
 8024702:	e6c4      	b.n	802448e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x4a>
 8024704:	3a01      	subs	r2, #1
 8024706:	b292      	uxth	r2, r2
 8024708:	3201      	adds	r2, #1
 802470a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 802470e:	f848 7b04 	str.w	r7, [r8], #4
 8024712:	4590      	cmp	r8, r2
 8024714:	d1fb      	bne.n	802470e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ca>
 8024716:	e772      	b.n	80245fe <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 8024718:	9805      	ldr	r0, [sp, #20]
 802471a:	462b      	mov	r3, r5
 802471c:	e71d      	b.n	802455a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x116>
 802471e:	4b05      	ldr	r3, [pc, #20]	@ (8024734 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f0>)
 8024720:	4a05      	ldr	r2, [pc, #20]	@ (8024738 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f4>)
 8024722:	f241 01eb 	movw	r1, #4331	@ 0x10eb
 8024726:	4805      	ldr	r0, [pc, #20]	@ (802473c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f8>)
 8024728:	f006 fb60 	bl	802adec <__assert_func>
 802472c:	2008745c 	.word	0x2008745c
 8024730:	20087456 	.word	0x20087456
 8024734:	0802df64 	.word	0x0802df64
 8024738:	0802f680 	.word	0x0802f680
 802473c:	0802de70 	.word	0x0802de70

08024740 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8024740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024744:	b0a1      	sub	sp, #132	@ 0x84
 8024746:	9210      	str	r2, [sp, #64]	@ 0x40
 8024748:	9119      	str	r1, [sp, #100]	@ 0x64
 802474a:	7812      	ldrb	r2, [r2, #0]
 802474c:	f89d 10ac 	ldrb.w	r1, [sp, #172]	@ 0xac
 8024750:	461c      	mov	r4, r3
 8024752:	9104      	str	r1, [sp, #16]
 8024754:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024756:	2a00      	cmp	r2, #0
 8024758:	f040 8215 	bne.w	8024b86 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x446>
 802475c:	6861      	ldr	r1, [r4, #4]
 802475e:	4683      	mov	fp, r0
 8024760:	6820      	ldr	r0, [r4, #0]
 8024762:	aa1c      	add	r2, sp, #112	@ 0x70
 8024764:	c203      	stmia	r2!, {r0, r1}
 8024766:	6818      	ldr	r0, [r3, #0]
 8024768:	6859      	ldr	r1, [r3, #4]
 802476a:	aa1e      	add	r2, sp, #120	@ 0x78
 802476c:	c203      	stmia	r2!, {r0, r1}
 802476e:	a81c      	add	r0, sp, #112	@ 0x70
 8024770:	f7f0 ffc2 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024774:	4621      	mov	r1, r4
 8024776:	a81e      	add	r0, sp, #120	@ 0x78
 8024778:	f7f0 ffe6 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802477c:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	@ 0x74
 8024780:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8024784:	f340 81f7 	ble.w	8024b76 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x436>
 8024788:	2301      	movs	r3, #1
 802478a:	b289      	uxth	r1, r1
 802478c:	931a      	str	r3, [sp, #104]	@ 0x68
 802478e:	f9bd 007a 	ldrsh.w	r0, [sp, #122]	@ 0x7a
 8024792:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	@ 0x76
 8024796:	fb90 f4f3 	sdiv	r4, r0, r3
 802479a:	441a      	add	r2, r3
 802479c:	3a01      	subs	r2, #1
 802479e:	fb92 f2f3 	sdiv	r2, r2, r3
 80247a2:	b2a4      	uxth	r4, r4
 80247a4:	fb03 0314 	mls	r3, r3, r4, r0
 80247a8:	9418      	str	r4, [sp, #96]	@ 0x60
 80247aa:	f8bd 4078 	ldrh.w	r4, [sp, #120]	@ 0x78
 80247ae:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 80247b2:	fb13 4101 	smlabb	r1, r3, r1, r4
 80247b6:	f8bd 5072 	ldrh.w	r5, [sp, #114]	@ 0x72
 80247ba:	4bc6      	ldr	r3, [pc, #792]	@ (8024ad4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x394>)
 80247bc:	4434      	add	r4, r6
 80247be:	4405      	add	r5, r0
 80247c0:	6818      	ldr	r0, [r3, #0]
 80247c2:	f8ad 4078 	strh.w	r4, [sp, #120]	@ 0x78
 80247c6:	f8ad 507a 	strh.w	r5, [sp, #122]	@ 0x7a
 80247ca:	f9bd 607c 	ldrsh.w	r6, [sp, #124]	@ 0x7c
 80247ce:	6803      	ldr	r3, [r0, #0]
 80247d0:	3201      	adds	r2, #1
 80247d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80247d4:	9608      	str	r6, [sp, #32]
 80247d6:	fa1f f881 	uxth.w	r8, r1
 80247da:	b294      	uxth	r4, r2
 80247dc:	f9bd 507e 	ldrsh.w	r5, [sp, #126]	@ 0x7e
 80247e0:	4798      	blx	r3
 80247e2:	2300      	movs	r3, #0
 80247e4:	49bc      	ldr	r1, [pc, #752]	@ (8024ad8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x398>)
 80247e6:	f1b8 0f00 	cmp.w	r8, #0
 80247ea:	bf08      	it	eq
 80247ec:	4632      	moveq	r2, r6
 80247ee:	8809      	ldrh	r1, [r1, #0]
 80247f0:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 80247f4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80247f6:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	@ 0x7a
 80247fa:	fb05 f501 	mul.w	r5, r5, r1
 80247fe:	fb01 6303 	mla	r3, r1, r3, r6
 8024802:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8024806:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 802480a:	f104 0304 	add.w	r3, r4, #4
 802480e:	9315      	str	r3, [sp, #84]	@ 0x54
 8024810:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8024814:	bf18      	it	ne
 8024816:	2200      	movne	r2, #0
 8024818:	9303      	str	r3, [sp, #12]
 802481a:	f10b 030e 	add.w	r3, fp, #14
 802481e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024820:	465b      	mov	r3, fp
 8024822:	fa1f f982 	uxth.w	r9, r2
 8024826:	46cb      	mov	fp, r9
 8024828:	46b4      	mov	ip, r6
 802482a:	4647      	mov	r7, r8
 802482c:	4699      	mov	r9, r3
 802482e:	9b03      	ldr	r3, [sp, #12]
 8024830:	459c      	cmp	ip, r3
 8024832:	f080 8104 	bcs.w	8024a3e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8024836:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	@ 0x5c
 802483a:	2301      	movs	r3, #1
 802483c:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 8024840:	2500      	movs	r5, #0
 8024842:	fbb7 f1f1 	udiv	r1, r7, r1
 8024846:	f04f 0a01 	mov.w	sl, #1
 802484a:	fa10 f282 	uxtah	r2, r0, r2
 802484e:	0092      	lsls	r2, r2, #2
 8024850:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024852:	3204      	adds	r2, #4
 8024854:	4410      	add	r0, r2
 8024856:	9305      	str	r3, [sp, #20]
 8024858:	7883      	ldrb	r3, [r0, #2]
 802485a:	7844      	ldrb	r4, [r0, #1]
 802485c:	021b      	lsls	r3, r3, #8
 802485e:	78c0      	ldrb	r0, [r0, #3]
 8024860:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8024862:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8024866:	4304      	orrs	r4, r0
 8024868:	1930      	adds	r0, r6, r4
 802486a:	7843      	ldrb	r3, [r0, #1]
 802486c:	5d34      	ldrb	r4, [r6, r4]
 802486e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8024870:	021b      	lsls	r3, r3, #8
 8024872:	5cb2      	ldrb	r2, [r6, r2]
 8024874:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8024876:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 802487a:	1a71      	subs	r1, r6, r1
 802487c:	431c      	orrs	r4, r3
 802487e:	920a      	str	r2, [sp, #40]	@ 0x28
 8024880:	3201      	adds	r2, #1
 8024882:	f889 400d 	strb.w	r4, [r9, #13]
 8024886:	9512      	str	r5, [sp, #72]	@ 0x48
 8024888:	9202      	str	r2, [sp, #8]
 802488a:	4666      	mov	r6, ip
 802488c:	b28a      	uxth	r2, r1
 802488e:	46d6      	mov	lr, sl
 8024890:	4629      	mov	r1, r5
 8024892:	464d      	mov	r5, r9
 8024894:	46d9      	mov	r9, fp
 8024896:	b2a4      	uxth	r4, r4
 8024898:	3001      	adds	r0, #1
 802489a:	9407      	str	r4, [sp, #28]
 802489c:	9001      	str	r0, [sp, #4]
 802489e:	9216      	str	r2, [sp, #88]	@ 0x58
 80248a0:	2f00      	cmp	r7, #0
 80248a2:	d034      	beq.n	802490e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ce>
 80248a4:	45ba      	cmp	sl, r7
 80248a6:	f080 80d2 	bcs.w	8024a4e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x30e>
 80248aa:	9b03      	ldr	r3, [sp, #12]
 80248ac:	eba7 070a 	sub.w	r7, r7, sl
 80248b0:	429e      	cmp	r6, r3
 80248b2:	b2bf      	uxth	r7, r7
 80248b4:	f080 80c3 	bcs.w	8024a3e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 80248b8:	9801      	ldr	r0, [sp, #4]
 80248ba:	f1ce 0107 	rsb	r1, lr, #7
 80248be:	7842      	ldrb	r2, [r0, #1]
 80248c0:	7803      	ldrb	r3, [r0, #0]
 80248c2:	408a      	lsls	r2, r1
 80248c4:	fa43 f30e 	asr.w	r3, r3, lr
 80248c8:	0052      	lsls	r2, r2, #1
 80248ca:	f10e 0101 	add.w	r1, lr, #1
 80248ce:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80248d2:	b2db      	uxtb	r3, r3
 80248d4:	fa5f fe81 	uxtb.w	lr, r1
 80248d8:	4313      	orrs	r3, r2
 80248da:	f1be 0f08 	cmp.w	lr, #8
 80248de:	b29a      	uxth	r2, r3
 80248e0:	f000 80f1 	beq.w	8024ac6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x386>
 80248e4:	3001      	adds	r0, #1
 80248e6:	9001      	str	r0, [sp, #4]
 80248e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80248ea:	4291      	cmp	r1, r2
 80248ec:	f0c0 80c0 	bcc.w	8024a70 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x330>
 80248f0:	f04f 0a01 	mov.w	sl, #1
 80248f4:	b2db      	uxtb	r3, r3
 80248f6:	736b      	strb	r3, [r5, #13]
 80248f8:	9902      	ldr	r1, [sp, #8]
 80248fa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80248fe:	f0c0 810a 	bcc.w	8024b16 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x3d6>
 8024902:	9207      	str	r2, [sp, #28]
 8024904:	f8cd a014 	str.w	sl, [sp, #20]
 8024908:	2100      	movs	r1, #0
 802490a:	2f00      	cmp	r7, #0
 802490c:	d1ca      	bne.n	80248a4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x164>
 802490e:	45ca      	cmp	sl, r9
 8024910:	f0c0 80cd 	bcc.w	8024aae <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x36e>
 8024914:	ebaa 0309 	sub.w	r3, sl, r9
 8024918:	b29b      	uxth	r3, r3
 802491a:	9309      	str	r3, [sp, #36]	@ 0x24
 802491c:	f1b9 0f00 	cmp.w	r9, #0
 8024920:	f000 80dc 	beq.w	8024adc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x39c>
 8024924:	464b      	mov	r3, r9
 8024926:	f8cd 9018 	str.w	r9, [sp, #24]
 802492a:	9711      	str	r7, [sp, #68]	@ 0x44
 802492c:	18cb      	adds	r3, r1, r3
 802492e:	e9cd ea0d 	strd	lr, sl, [sp, #52]	@ 0x34
 8024932:	46b3      	mov	fp, r6
 8024934:	fa1f fc83 	uxth.w	ip, r3
 8024938:	e9cd 690b 	strd	r6, r9, [sp, #44]	@ 0x2c
 802493c:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8024940:	970f      	str	r7, [sp, #60]	@ 0x3c
 8024942:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8024946:	e045      	b.n	80249d4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x294>
 8024948:	f8db 0000 	ldr.w	r0, [fp]
 802494c:	0e07      	lsrs	r7, r0, #24
 802494e:	d055      	beq.n	80249fc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2bc>
 8024950:	b2d4      	uxtb	r4, r2
 8024952:	2a00      	cmp	r2, #0
 8024954:	d03a      	beq.n	80249cc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x28c>
 8024956:	fb04 fe07 	mul.w	lr, r4, r7
 802495a:	f10e 0601 	add.w	r6, lr, #1
 802495e:	eb06 262e 	add.w	r6, r6, lr, asr #8
 8024962:	1236      	asrs	r6, r6, #8
 8024964:	fa5f fe80 	uxtb.w	lr, r0
 8024968:	9614      	str	r6, [sp, #80]	@ 0x50
 802496a:	1bbe      	subs	r6, r7, r6
 802496c:	9413      	str	r4, [sp, #76]	@ 0x4c
 802496e:	f3c3 4907 	ubfx	r9, r3, #16, #8
 8024972:	fb06 f40e 	mul.w	r4, r6, lr
 8024976:	fb02 f909 	mul.w	r9, r2, r9
 802497a:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 802497e:	fb02 fe0e 	mul.w	lr, r2, lr
 8024982:	b2db      	uxtb	r3, r3
 8024984:	fb02 4303 	mla	r3, r2, r3, r4
 8024988:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802498c:	fb06 9902 	mla	r9, r6, r2, r9
 8024990:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024994:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024996:	fb06 e000 	mla	r0, r6, r0, lr
 802499a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802499c:	443a      	add	r2, r7
 802499e:	1b94      	subs	r4, r2, r6
 80249a0:	b2e4      	uxtb	r4, r4
 80249a2:	fbb9 f9f4 	udiv	r9, r9, r4
 80249a6:	fbb3 f3f4 	udiv	r3, r3, r4
 80249aa:	fbb0 f0f4 	udiv	r0, r0, r4
 80249ae:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80249b2:	b2db      	uxtb	r3, r3
 80249b4:	f409 097f 	and.w	r9, r9, #16711680	@ 0xff0000
 80249b8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80249bc:	0200      	lsls	r0, r0, #8
 80249be:	ea43 0909 	orr.w	r9, r3, r9
 80249c2:	b280      	uxth	r0, r0
 80249c4:	ea49 0000 	orr.w	r0, r9, r0
 80249c8:	f8cb 0000 	str.w	r0, [fp]
 80249cc:	4561      	cmp	r1, ip
 80249ce:	f10b 0b04 	add.w	fp, fp, #4
 80249d2:	d01d      	beq.n	8024a10 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d0>
 80249d4:	2204      	movs	r2, #4
 80249d6:	186b      	adds	r3, r5, r1
 80249d8:	7b5b      	ldrb	r3, [r3, #13]
 80249da:	3101      	adds	r1, #1
 80249dc:	fb12 a303 	smlabb	r3, r2, r3, sl
 80249e0:	f858 3003 	ldr.w	r3, [r8, r3]
 80249e4:	b289      	uxth	r1, r1
 80249e6:	0e1a      	lsrs	r2, r3, #24
 80249e8:	d0f0      	beq.n	80249cc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x28c>
 80249ea:	9804      	ldr	r0, [sp, #16]
 80249ec:	fb00 f202 	mul.w	r2, r0, r2
 80249f0:	1c50      	adds	r0, r2, #1
 80249f2:	eb00 2222 	add.w	r2, r0, r2, asr #8
 80249f6:	1212      	asrs	r2, r2, #8
 80249f8:	2aff      	cmp	r2, #255	@ 0xff
 80249fa:	d1a5      	bne.n	8024948 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x208>
 80249fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8024a00:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8024a04:	4561      	cmp	r1, ip
 8024a06:	f8cb 2000 	str.w	r2, [fp]
 8024a0a:	f10b 0b04 	add.w	fp, fp, #4
 8024a0e:	d1e1      	bne.n	80249d4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x294>
 8024a10:	e9dd 690b 	ldrd	r6, r9, [sp, #44]	@ 0x2c
 8024a14:	e9dd ea0d 	ldrd	lr, sl, [sp, #52]	@ 0x34
 8024a18:	9b06      	ldr	r3, [sp, #24]
 8024a1a:	45ca      	cmp	sl, r9
 8024a1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8024a20:	b29b      	uxth	r3, r3
 8024a22:	f103 0301 	add.w	r3, r3, #1
 8024a26:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8024a28:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8024a2c:	d257      	bcs.n	8024ade <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x39e>
 8024a2e:	9b03      	ldr	r3, [sp, #12]
 8024a30:	4661      	mov	r1, ip
 8024a32:	429e      	cmp	r6, r3
 8024a34:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8024a38:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8024a3c:	d313      	bcc.n	8024a66 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x326>
 8024a3e:	4b25      	ldr	r3, [pc, #148]	@ (8024ad4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x394>)
 8024a40:	6818      	ldr	r0, [r3, #0]
 8024a42:	6803      	ldr	r3, [r0, #0]
 8024a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024a46:	4798      	blx	r3
 8024a48:	b021      	add	sp, #132	@ 0x84
 8024a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a4e:	ebaa 0a07 	sub.w	sl, sl, r7
 8024a52:	4439      	add	r1, r7
 8024a54:	2700      	movs	r7, #0
 8024a56:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8024a5a:	fa1f fa8a 	uxth.w	sl, sl
 8024a5e:	b289      	uxth	r1, r1
 8024a60:	9b03      	ldr	r3, [sp, #12]
 8024a62:	429e      	cmp	r6, r3
 8024a64:	d2eb      	bcs.n	8024a3e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8024a66:	f1ba 0f00 	cmp.w	sl, #0
 8024a6a:	f47f af19 	bne.w	80248a0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8024a6e:	e723      	b.n	80248b8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x178>
 8024a70:	9b02      	ldr	r3, [sp, #8]
 8024a72:	4293      	cmp	r3, r2
 8024a74:	d852      	bhi.n	8024b1c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x3dc>
 8024a76:	9805      	ldr	r0, [sp, #20]
 8024a78:	7b69      	ldrb	r1, [r5, #13]
 8024a7a:	182b      	adds	r3, r5, r0
 8024a7c:	7359      	strb	r1, [r3, #13]
 8024a7e:	7b6b      	ldrb	r3, [r5, #13]
 8024a80:	1c41      	adds	r1, r0, #1
 8024a82:	fa1f fa81 	uxth.w	sl, r1
 8024a86:	9c02      	ldr	r4, [sp, #8]
 8024a88:	f8cd a014 	str.w	sl, [sp, #20]
 8024a8c:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8024a90:	f104 0c01 	add.w	ip, r4, #1
 8024a94:	9c07      	ldr	r4, [sp, #28]
 8024a96:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 8024a9a:	fa1f f38c 	uxth.w	r3, ip
 8024a9e:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 8024aa2:	f8a0 4050 	strh.w	r4, [r0, #80]	@ 0x50
 8024aa6:	9302      	str	r3, [sp, #8]
 8024aa8:	9207      	str	r2, [sp, #28]
 8024aaa:	2100      	movs	r1, #0
 8024aac:	e6f8      	b.n	80248a0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8024aae:	eba9 030a 	sub.w	r3, r9, sl
 8024ab2:	b29b      	uxth	r3, r3
 8024ab4:	9311      	str	r3, [sp, #68]	@ 0x44
 8024ab6:	f1ba 0f00 	cmp.w	sl, #0
 8024aba:	d06b      	beq.n	8024b94 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x454>
 8024abc:	f8cd a018 	str.w	sl, [sp, #24]
 8024ac0:	9709      	str	r7, [sp, #36]	@ 0x24
 8024ac2:	4653      	mov	r3, sl
 8024ac4:	e732      	b.n	802492c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ec>
 8024ac6:	4601      	mov	r1, r0
 8024ac8:	3102      	adds	r1, #2
 8024aca:	f04f 0e00 	mov.w	lr, #0
 8024ace:	9101      	str	r1, [sp, #4]
 8024ad0:	e70a      	b.n	80248e8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 8024ad2:	bf00      	nop
 8024ad4:	2008745c 	.word	0x2008745c
 8024ad8:	20087456 	.word	0x20087456
 8024adc:	468c      	mov	ip, r1
 8024ade:	4b31      	ldr	r3, [pc, #196]	@ (8024ba4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x464>)
 8024ae0:	9908      	ldr	r1, [sp, #32]
 8024ae2:	881b      	ldrh	r3, [r3, #0]
 8024ae4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024ae6:	1a5b      	subs	r3, r3, r1
 8024ae8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8024aec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024aee:	3201      	adds	r2, #1
 8024af0:	4293      	cmp	r3, r2
 8024af2:	9212      	str	r2, [sp, #72]	@ 0x48
 8024af4:	d02d      	beq.n	8024b52 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x412>
 8024af6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8024afa:	f8bd 7074 	ldrh.w	r7, [sp, #116]	@ 0x74
 8024afe:	4661      	mov	r1, ip
 8024b00:	eba7 0709 	sub.w	r7, r7, r9
 8024b04:	b2bf      	uxth	r7, r7
 8024b06:	2f00      	cmp	r7, #0
 8024b08:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8024b0c:	bf14      	ite	ne
 8024b0e:	f04f 0900 	movne.w	r9, #0
 8024b12:	2700      	moveq	r7, #0
 8024b14:	e7a4      	b.n	8024a60 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x320>
 8024b16:	9905      	ldr	r1, [sp, #20]
 8024b18:	3101      	adds	r1, #1
 8024b1a:	e7b4      	b.n	8024a86 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x346>
 8024b1c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8024b20:	f893 a04f 	ldrb.w	sl, [r3, #79]	@ 0x4f
 8024b24:	4613      	mov	r3, r2
 8024b26:	f1ba 0f01 	cmp.w	sl, #1
 8024b2a:	d90d      	bls.n	8024b48 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x408>
 8024b2c:	f10a 010d 	add.w	r1, sl, #13
 8024b30:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 8024b32:	4429      	add	r1, r5
 8024b34:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8024b38:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8024b3c:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8024b40:	428c      	cmp	r4, r1
 8024b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8024b46:	d1f5      	bne.n	8024b34 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x3f4>
 8024b48:	b2db      	uxtb	r3, r3
 8024b4a:	736b      	strb	r3, [r5, #13]
 8024b4c:	fa1f fa8a 	uxth.w	sl, sl
 8024b50:	e6d2      	b.n	80248f8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 8024b52:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 8024b56:	f8bd 2070 	ldrh.w	r2, [sp, #112]	@ 0x70
 8024b5a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024b5c:	1a9b      	subs	r3, r3, r2
 8024b5e:	b29f      	uxth	r7, r3
 8024b60:	2f00      	cmp	r7, #0
 8024b62:	9b08      	ldr	r3, [sp, #32]
 8024b64:	bf18      	it	ne
 8024b66:	2300      	movne	r3, #0
 8024b68:	3101      	adds	r1, #1
 8024b6a:	46b4      	mov	ip, r6
 8024b6c:	46a9      	mov	r9, r5
 8024b6e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8024b70:	fa1f fb83 	uxth.w	fp, r3
 8024b74:	e65b      	b.n	802482e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xee>
 8024b76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024b7a:	b289      	uxth	r1, r1
 8024b7c:	fb93 f3f1 	sdiv	r3, r3, r1
 8024b80:	b29a      	uxth	r2, r3
 8024b82:	921a      	str	r2, [sp, #104]	@ 0x68
 8024b84:	e603      	b.n	802478e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x4e>
 8024b86:	4b08      	ldr	r3, [pc, #32]	@ (8024ba8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x468>)
 8024b88:	4a08      	ldr	r2, [pc, #32]	@ (8024bac <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x46c>)
 8024b8a:	f241 1181 	movw	r1, #4481	@ 0x1181
 8024b8e:	4808      	ldr	r0, [pc, #32]	@ (8024bb0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x470>)
 8024b90:	f006 f92c 	bl	802adec <__assert_func>
 8024b94:	9b03      	ldr	r3, [sp, #12]
 8024b96:	429e      	cmp	r6, r3
 8024b98:	f4bf af51 	bcs.w	8024a3e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8024b9c:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8024ba0:	e68a      	b.n	80248b8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x178>
 8024ba2:	bf00      	nop
 8024ba4:	20087456 	.word	0x20087456
 8024ba8:	0802df64 	.word	0x0802df64
 8024bac:	0802f94c 	.word	0x0802f94c
 8024bb0:	0802de70 	.word	0x0802de70

08024bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8024bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024bb8:	7814      	ldrb	r4, [r2, #0]
 8024bba:	7855      	ldrb	r5, [r2, #1]
 8024bbc:	2c01      	cmp	r4, #1
 8024bbe:	9e06      	ldr	r6, [sp, #24]
 8024bc0:	f89d 701c 	ldrb.w	r7, [sp, #28]
 8024bc4:	d013      	beq.n	8024bee <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3a>
 8024bc6:	d304      	bcc.n	8024bd2 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8024bc8:	2c02      	cmp	r4, #2
 8024bca:	f000 80ca 	beq.w	8024d62 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1ae>
 8024bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024bd2:	7b04      	ldrb	r4, [r0, #12]
 8024bd4:	2c01      	cmp	r4, #1
 8024bd6:	d02d      	beq.n	8024c34 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x80>
 8024bd8:	d317      	bcc.n	8024c0a <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 8024bda:	2c02      	cmp	r4, #2
 8024bdc:	f040 80cf 	bne.w	8024d7e <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1ca>
 8024be0:	2d03      	cmp	r5, #3
 8024be2:	f200 80da 	bhi.w	8024d9a <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e6>
 8024be6:	e8df f005 	tbb	[pc, r5]
 8024bea:	989e      	.short	0x989e
 8024bec:	8c92      	.short	0x8c92
 8024bee:	7b04      	ldrb	r4, [r0, #12]
 8024bf0:	2c01      	cmp	r4, #1
 8024bf2:	d018      	beq.n	8024c26 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x72>
 8024bf4:	d310      	bcc.n	8024c18 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x64>
 8024bf6:	2c02      	cmp	r4, #2
 8024bf8:	f040 80ba 	bne.w	8024d70 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1bc>
 8024bfc:	2d03      	cmp	r5, #3
 8024bfe:	f200 80c5 	bhi.w	8024d8c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1d8>
 8024c02:	e8df f005 	tbb	[pc, r5]
 8024c06:	a2a8      	.short	0xa2a8
 8024c08:	969c      	.short	0x969c
 8024c0a:	2d03      	cmp	r5, #3
 8024c0c:	f200 80d3 	bhi.w	8024db6 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x202>
 8024c10:	e8df f005 	tbb	[pc, r5]
 8024c14:	5f656b71 	.word	0x5f656b71
 8024c18:	2d03      	cmp	r5, #3
 8024c1a:	f200 80c5 	bhi.w	8024da8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1f4>
 8024c1e:	e8df f005 	tbb	[pc, r5]
 8024c22:	4c52      	.short	0x4c52
 8024c24:	4046      	.short	0x4046
 8024c26:	2d03      	cmp	r5, #3
 8024c28:	f200 80d3 	bhi.w	8024dd2 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x21e>
 8024c2c:	e8df f005 	tbb	[pc, r5]
 8024c30:	21272d33 	.word	0x21272d33
 8024c34:	2d03      	cmp	r5, #3
 8024c36:	f200 80c5 	bhi.w	8024dc4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x210>
 8024c3a:	e8df f005 	tbb	[pc, r5]
 8024c3e:	0e14      	.short	0x0e14
 8024c40:	0208      	.short	0x0208
 8024c42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c4a:	f7fd b8e3 	b.w	8021e14 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8024c4e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c56:	f7fc bead 	b.w	80219b4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8024c5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c62:	f7fc bcad 	b.w	80215c0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8024c66:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c6e:	f7fc bb83 	b.w	8021378 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8024c72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c7a:	f7fd bf9d 	b.w	8022bb8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8024c7e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c86:	f7fd be47 	b.w	8022918 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8024c8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c92:	f7fd bc13 	b.w	80224bc <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8024c96:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c9e:	f7fd badd 	b.w	802225c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8024ca2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024caa:	f7fc b93f 	b.w	8020f2c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8024cae:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024cb6:	f7fb bfd7 	b.w	8020c68 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8024cba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024cc2:	f7fb bd63 	b.w	802078c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8024cc6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024cce:	f7fb bc05 	b.w	80204dc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8024cd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024cda:	f7fb b9a7 	b.w	802002c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8024cde:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024ce6:	f7fa bfd3 	b.w	801fc90 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8024cea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024cf2:	f7fa bde7 	b.w	801f8c4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8024cf6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024cfe:	f7fa bc41 	b.w	801f584 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8024d02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d0a:	f7ff bd19 	b.w	8024740 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8024d0e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d16:	f7ff bb95 	b.w	8024444 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8024d1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d22:	f7ff ba05 	b.w	8024130 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8024d26:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d2e:	f7ff b871 	b.w	8023e14 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8024d32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d3a:	f7fe be1f 	b.w	802397c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8024d3e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d46:	f7fe bcaf 	b.w	80236a8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8024d4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d52:	f7fe ba8b 	b.w	802326c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8024d56:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8024d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d5e:	f7fe b955 	b.w	802300c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8024d62:	4b1f      	ldr	r3, [pc, #124]	@ (8024de0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22c>)
 8024d64:	4a1f      	ldr	r2, [pc, #124]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024d66:	f240 31f3 	movw	r1, #1011	@ 0x3f3
 8024d6a:	481f      	ldr	r0, [pc, #124]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024d6c:	f006 f83e 	bl	802adec <__assert_func>
 8024d70:	4b1e      	ldr	r3, [pc, #120]	@ (8024dec <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x238>)
 8024d72:	4a1c      	ldr	r2, [pc, #112]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024d74:	f240 4179 	movw	r1, #1145	@ 0x479
 8024d78:	481b      	ldr	r0, [pc, #108]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024d7a:	f006 f837 	bl	802adec <__assert_func>
 8024d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8024dec <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x238>)
 8024d80:	4a18      	ldr	r2, [pc, #96]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024d82:	f240 4135 	movw	r1, #1077	@ 0x435
 8024d86:	4818      	ldr	r0, [pc, #96]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024d88:	f006 f830 	bl	802adec <__assert_func>
 8024d8c:	4b18      	ldr	r3, [pc, #96]	@ (8024df0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x23c>)
 8024d8e:	4a15      	ldr	r2, [pc, #84]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024d90:	f240 4174 	movw	r1, #1140	@ 0x474
 8024d94:	4814      	ldr	r0, [pc, #80]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024d96:	f006 f829 	bl	802adec <__assert_func>
 8024d9a:	4b15      	ldr	r3, [pc, #84]	@ (8024df0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x23c>)
 8024d9c:	4a11      	ldr	r2, [pc, #68]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024d9e:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8024da2:	4811      	ldr	r0, [pc, #68]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024da4:	f006 f822 	bl	802adec <__assert_func>
 8024da8:	4b12      	ldr	r3, [pc, #72]	@ (8024df4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x240>)
 8024daa:	4a0e      	ldr	r2, [pc, #56]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024dac:	f240 414c 	movw	r1, #1100	@ 0x44c
 8024db0:	480d      	ldr	r0, [pc, #52]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024db2:	f006 f81b 	bl	802adec <__assert_func>
 8024db6:	4b0f      	ldr	r3, [pc, #60]	@ (8024df4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x240>)
 8024db8:	4a0a      	ldr	r2, [pc, #40]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024dba:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8024dbe:	480a      	ldr	r0, [pc, #40]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024dc0:	f006 f814 	bl	802adec <__assert_func>
 8024dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8024df8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x244>)
 8024dc6:	4a07      	ldr	r2, [pc, #28]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024dc8:	f240 411c 	movw	r1, #1052	@ 0x41c
 8024dcc:	4806      	ldr	r0, [pc, #24]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024dce:	f006 f80d 	bl	802adec <__assert_func>
 8024dd2:	4b09      	ldr	r3, [pc, #36]	@ (8024df8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x244>)
 8024dd4:	4a03      	ldr	r2, [pc, #12]	@ (8024de4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8024dd6:	f44f 618c 	mov.w	r1, #1120	@ 0x460
 8024dda:	4803      	ldr	r0, [pc, #12]	@ (8024de8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8024ddc:	f006 f806 	bl	802adec <__assert_func>
 8024de0:	0802db28 	.word	0x0802db28
 8024de4:	0802e678 	.word	0x0802e678
 8024de8:	0802de70 	.word	0x0802de70
 8024dec:	0802dc88 	.word	0x0802dc88
 8024df0:	0802dc24 	.word	0x0802dc24
 8024df4:	0802db64 	.word	0x0802db64
 8024df8:	0802dbc4 	.word	0x0802dbc4

08024dfc <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8024dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024e00:	b089      	sub	sp, #36	@ 0x24
 8024e02:	f89d 4044 	ldrb.w	r4, [sp, #68]	@ 0x44
 8024e06:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024e08:	b13c      	cbz	r4, 8024e1a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8024e0a:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8024e0e:	2e00      	cmp	r6, #0
 8024e10:	dd03      	ble.n	8024e1a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8024e12:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8024e16:	2e00      	cmp	r6, #0
 8024e18:	dc02      	bgt.n	8024e20 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x24>
 8024e1a:	b009      	add	sp, #36	@ 0x24
 8024e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024e20:	f04f 0800 	mov.w	r8, #0
 8024e24:	4606      	mov	r6, r0
 8024e26:	f362 080f 	bfi	r8, r2, #0, #16
 8024e2a:	4608      	mov	r0, r1
 8024e2c:	460f      	mov	r7, r1
 8024e2e:	f363 481f 	bfi	r8, r3, #16, #16
 8024e32:	f7f3 fa61 	bl	80182f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024e36:	4681      	mov	r9, r0
 8024e38:	4638      	mov	r0, r7
 8024e3a:	f7f3 fa91 	bl	8018360 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8024e3e:	2300      	movs	r3, #0
 8024e40:	f369 030f 	bfi	r3, r9, #0, #16
 8024e44:	f360 431f 	bfi	r3, r0, #16, #16
 8024e48:	4638      	mov	r0, r7
 8024e4a:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8024e4e:	f7f3 fb91 	bl	8018574 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024e52:	280b      	cmp	r0, #11
 8024e54:	d024      	beq.n	8024ea0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa4>
 8024e56:	aa04      	add	r2, sp, #16
 8024e58:	f10d 0808 	add.w	r8, sp, #8
 8024e5c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024e60:	e882 0003 	stmia.w	r2, {r0, r1}
 8024e64:	6828      	ldr	r0, [r5, #0]
 8024e66:	6869      	ldr	r1, [r5, #4]
 8024e68:	ab06      	add	r3, sp, #24
 8024e6a:	c303      	stmia	r3!, {r0, r1}
 8024e6c:	4610      	mov	r0, r2
 8024e6e:	f7f0 fc43 	bl	80156f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024e72:	4641      	mov	r1, r8
 8024e74:	a806      	add	r0, sp, #24
 8024e76:	f7f0 fc67 	bl	8015748 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024e7a:	4638      	mov	r0, r7
 8024e7c:	f7f3 faf6 	bl	801846c <_ZNK8touchgfx6Bitmap7getDataEv>
 8024e80:	4680      	mov	r8, r0
 8024e82:	4638      	mov	r0, r7
 8024e84:	f7f3 fb76 	bl	8018574 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024e88:	280d      	cmp	r0, #13
 8024e8a:	f200 8083 	bhi.w	8024f94 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x198>
 8024e8e:	e8df f000 	tbb	[pc, r0]
 8024e92:	6467      	.short	0x6467
 8024e94:	81818117 	.word	0x81818117
 8024e98:	81818181 	.word	0x81818181
 8024e9c:	6a818181 	.word	0x6a818181
 8024ea0:	4638      	mov	r0, r7
 8024ea2:	f7f3 fae3 	bl	801846c <_ZNK8touchgfx6Bitmap7getDataEv>
 8024ea6:	4680      	mov	r8, r0
 8024ea8:	4638      	mov	r0, r7
 8024eaa:	f7f3 fb0f 	bl	80184cc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8024eae:	4641      	mov	r1, r8
 8024eb0:	4602      	mov	r2, r0
 8024eb2:	e9cd 5400 	strd	r5, r4, [sp]
 8024eb6:	4630      	mov	r0, r6
 8024eb8:	ab02      	add	r3, sp, #8
 8024eba:	f7ff fe7b 	bl	8024bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8024ebe:	e7ac      	b.n	8024e1a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8024ec0:	f04f 0910 	mov.w	r9, #16
 8024ec4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8024ec8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8024ecc:	4d37      	ldr	r5, [pc, #220]	@ (8024fac <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b0>)
 8024ece:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8024ed2:	440a      	add	r2, r1
 8024ed4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8024ed8:	6828      	ldr	r0, [r5, #0]
 8024eda:	440b      	add	r3, r1
 8024edc:	f8ad 2018 	strh.w	r2, [sp, #24]
 8024ee0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8024ee4:	2800      	cmp	r0, #0
 8024ee6:	d05b      	beq.n	8024fa0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1a4>
 8024ee8:	f7f6 f9cc 	bl	801b284 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8024eec:	6833      	ldr	r3, [r6, #0]
 8024eee:	4630      	mov	r0, r6
 8024ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024ef2:	4798      	blx	r3
 8024ef4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8024ef8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8024efc:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8024f00:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8024f04:	f7f3 ff12 	bl	8018d2c <nema_set_clip>
 8024f08:	2200      	movs	r2, #0
 8024f0a:	4623      	mov	r3, r4
 8024f0c:	4611      	mov	r1, r2
 8024f0e:	4610      	mov	r0, r2
 8024f10:	f7f3 ff40 	bl	8018d94 <nema_rgba>
 8024f14:	f7f6 f8b0 	bl	801b078 <nema_set_const_color>
 8024f18:	2cff      	cmp	r4, #255	@ 0xff
 8024f1a:	d02a      	beq.n	8024f72 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x176>
 8024f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8024f20:	2201      	movs	r2, #1
 8024f22:	2100      	movs	r1, #0
 8024f24:	4822      	ldr	r0, [pc, #136]	@ (8024fb0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b4>)
 8024f26:	f7f5 fce1 	bl	801a8ec <nema_set_blend>
 8024f2a:	2100      	movs	r1, #0
 8024f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8024f30:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8024f34:	464b      	mov	r3, r9
 8024f36:	4640      	mov	r0, r8
 8024f38:	9101      	str	r1, [sp, #4]
 8024f3a:	9400      	str	r4, [sp, #0]
 8024f3c:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8024f40:	f7f3 ff30 	bl	8018da4 <nema_bind_src_tex>
 8024f44:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8024f48:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8024f4c:	f7f4 f8b6 	bl	80190bc <nema_blit>
 8024f50:	6828      	ldr	r0, [r5, #0]
 8024f52:	b328      	cbz	r0, 8024fa0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1a4>
 8024f54:	f7f6 f9b6 	bl	801b2c4 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8024f58:	e75f      	b.n	8024e1a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8024f5a:	f04f 0939 	mov.w	r9, #57	@ 0x39
 8024f5e:	e7b1      	b.n	8024ec4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>
 8024f60:	f04f 0904 	mov.w	r9, #4
 8024f64:	e7ae      	b.n	8024ec4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>
 8024f66:	4638      	mov	r0, r7
 8024f68:	f7f3 fab0 	bl	80184cc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8024f6c:	f890 9000 	ldrb.w	r9, [r0]
 8024f70:	e7a8      	b.n	8024ec4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>
 8024f72:	4638      	mov	r0, r7
 8024f74:	f7f3 fafe 	bl	8018574 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024f78:	b120      	cbz	r0, 8024f84 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 8024f7a:	4638      	mov	r0, r7
 8024f7c:	f7f3 fafa 	bl	8018574 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024f80:	2801      	cmp	r0, #1
 8024f82:	d1cb      	bne.n	8024f1c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x120>
 8024f84:	2201      	movs	r2, #1
 8024f86:	f04f 33ff 	mov.w	r3, #4294967295
 8024f8a:	4610      	mov	r0, r2
 8024f8c:	2100      	movs	r1, #0
 8024f8e:	f7f5 fcad 	bl	801a8ec <nema_set_blend>
 8024f92:	e7ca      	b.n	8024f2a <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x12e>
 8024f94:	4b07      	ldr	r3, [pc, #28]	@ (8024fb4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>)
 8024f96:	4a08      	ldr	r2, [pc, #32]	@ (8024fb8 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1bc>)
 8024f98:	2175      	movs	r1, #117	@ 0x75
 8024f9a:	4808      	ldr	r0, [pc, #32]	@ (8024fbc <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c0>)
 8024f9c:	f005 ff26 	bl	802adec <__assert_func>
 8024fa0:	4b07      	ldr	r3, [pc, #28]	@ (8024fc0 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>)
 8024fa2:	4a08      	ldr	r2, [pc, #32]	@ (8024fc4 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c8>)
 8024fa4:	217c      	movs	r1, #124	@ 0x7c
 8024fa6:	4808      	ldr	r0, [pc, #32]	@ (8024fc8 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1cc>)
 8024fa8:	f005 ff20 	bl	802adec <__assert_func>
 8024fac:	200875c8 	.word	0x200875c8
 8024fb0:	08000504 	.word	0x08000504
 8024fb4:	0802dcc4 	.word	0x0802dcc4
 8024fb8:	0802e76c 	.word	0x0802e76c
 8024fbc:	0802de70 	.word	0x0802de70
 8024fc0:	0802ddcc 	.word	0x0802ddcc
 8024fc4:	0802e638 	.word	0x0802e638
 8024fc8:	0802ddf4 	.word	0x0802ddf4

08024fcc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8024fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fd0:	b089      	sub	sp, #36	@ 0x24
 8024fd2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8024fd4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024fd6:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	@ 0x48
 8024fda:	9104      	str	r1, [sp, #16]
 8024fdc:	8809      	ldrh	r1, [r1, #0]
 8024fde:	fb07 6c04 	mla	ip, r7, r4, r6
 8024fe2:	10c8      	asrs	r0, r1, #3
 8024fe4:	120d      	asrs	r5, r1, #8
 8024fe6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8024fea:	f005 0af8 	and.w	sl, r5, #248	@ 0xf8
 8024fee:	9002      	str	r0, [sp, #8]
 8024ff0:	00c9      	lsls	r1, r1, #3
 8024ff2:	0200      	lsls	r0, r0, #8
 8024ff4:	b2c9      	uxtb	r1, r1
 8024ff6:	4690      	mov	r8, r2
 8024ff8:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8024ffc:	469e      	mov	lr, r3
 8024ffe:	eb02 030c 	add.w	r3, r2, ip
 8025002:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8025006:	4308      	orrs	r0, r1
 8025008:	2f00      	cmp	r7, #0
 802500a:	9103      	str	r1, [sp, #12]
 802500c:	9305      	str	r3, [sp, #20]
 802500e:	9007      	str	r0, [sp, #28]
 8025010:	f107 0501 	add.w	r5, r7, #1
 8025014:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8025018:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 802501c:	f89d 105c 	ldrb.w	r1, [sp, #92]	@ 0x5c
 8025020:	9200      	str	r2, [sp, #0]
 8025022:	db02      	blt.n	802502a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x5e>
 8025024:	42be      	cmp	r6, r7
 8025026:	f300 80a3 	bgt.w	8025170 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1a4>
 802502a:	fa5f fb80 	uxtb.w	fp, r0
 802502e:	af07      	add	r7, sp, #28
 8025030:	465a      	mov	r2, fp
 8025032:	46b8      	mov	r8, r7
 8025034:	2d00      	cmp	r5, #0
 8025036:	db01      	blt.n	802503c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x70>
 8025038:	42ae      	cmp	r6, r5
 802503a:	dc79      	bgt.n	8025130 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x164>
 802503c:	f10d 0e1c 	add.w	lr, sp, #28
 8025040:	46f1      	mov	r9, lr
 8025042:	b2c0      	uxtb	r0, r0
 8025044:	9001      	str	r0, [sp, #4]
 8025046:	2b0f      	cmp	r3, #15
 8025048:	f200 80ce 	bhi.w	80251e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 802504c:	290f      	cmp	r1, #15
 802504e:	f200 80cb 	bhi.w	80251e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8025052:	9c00      	ldr	r4, [sp, #0]
 8025054:	b29b      	uxth	r3, r3
 8025056:	43e4      	mvns	r4, r4
 8025058:	b289      	uxth	r1, r1
 802505a:	fb03 f501 	mul.w	r5, r3, r1
 802505e:	011b      	lsls	r3, r3, #4
 8025060:	1b5e      	subs	r6, r3, r5
 8025062:	b2b6      	uxth	r6, r6
 8025064:	f897 c002 	ldrb.w	ip, [r7, #2]
 8025068:	ebc5 1101 	rsb	r1, r5, r1, lsl #4
 802506c:	787f      	ldrb	r7, [r7, #1]
 802506e:	fb06 f202 	mul.w	r2, r6, r2
 8025072:	b289      	uxth	r1, r1
 8025074:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8025078:	fb06 fc0c 	mul.w	ip, r6, ip
 802507c:	1a5b      	subs	r3, r3, r1
 802507e:	fb06 f607 	mul.w	r6, r6, r7
 8025082:	b29b      	uxth	r3, r3
 8025084:	f898 7001 	ldrb.w	r7, [r8, #1]
 8025088:	fb03 220b 	mla	r2, r3, fp, r2
 802508c:	f898 b002 	ldrb.w	fp, [r8, #2]
 8025090:	fb03 6607 	mla	r6, r3, r7, r6
 8025094:	fb03 cc0b 	mla	ip, r3, fp, ip
 8025098:	f899 8002 	ldrb.w	r8, [r9, #2]
 802509c:	f899 7001 	ldrb.w	r7, [r9, #1]
 80250a0:	9b01      	ldr	r3, [sp, #4]
 80250a2:	fb01 cc08 	mla	ip, r1, r8, ip
 80250a6:	fb01 2203 	mla	r2, r1, r3, r2
 80250aa:	fb01 6607 	mla	r6, r1, r7, r6
 80250ae:	f89e 8002 	ldrb.w	r8, [lr, #2]
 80250b2:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80250b6:	9b03      	ldr	r3, [sp, #12]
 80250b8:	9902      	ldr	r1, [sp, #8]
 80250ba:	fb05 2200 	mla	r2, r5, r0, r2
 80250be:	b2e4      	uxtb	r4, r4
 80250c0:	fb05 cc08 	mla	ip, r5, r8, ip
 80250c4:	fb05 6607 	mla	r6, r5, r7, r6
 80250c8:	fb13 f004 	smulbb	r0, r3, r4
 80250cc:	fb1a f304 	smulbb	r3, sl, r4
 80250d0:	fb11 f404 	smulbb	r4, r1, r4
 80250d4:	f8bd e000 	ldrh.w	lr, [sp]
 80250d8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80250dc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80250e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80250e4:	fb02 020e 	mla	r2, r2, lr, r0
 80250e8:	fb0c 330e 	mla	r3, ip, lr, r3
 80250ec:	fb06 4e0e 	mla	lr, r6, lr, r4
 80250f0:	fa1f fc83 	uxth.w	ip, r3
 80250f4:	b292      	uxth	r2, r2
 80250f6:	fa1f fe8e 	uxth.w	lr, lr
 80250fa:	f10c 0301 	add.w	r3, ip, #1
 80250fe:	1c50      	adds	r0, r2, #1
 8025100:	f10e 0101 	add.w	r1, lr, #1
 8025104:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025108:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802510c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8025110:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025114:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8025118:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802511c:	4313      	orrs	r3, r2
 802511e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8025122:	9a04      	ldr	r2, [sp, #16]
 8025124:	ea43 030e 	orr.w	r3, r3, lr
 8025128:	8013      	strh	r3, [r2, #0]
 802512a:	b009      	add	sp, #36	@ 0x24
 802512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025130:	2900      	cmp	r1, #0
 8025132:	d036      	beq.n	80251a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d6>
 8025134:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025136:	2d00      	cmp	r5, #0
 8025138:	db45      	blt.n	80251c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 802513a:	42ac      	cmp	r4, r5
 802513c:	dd43      	ble.n	80251c6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 802513e:	9d05      	ldr	r5, [sp, #20]
 8025140:	f815 9004 	ldrb.w	r9, [r5, r4]
 8025144:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025148:	44f1      	add	r9, lr
 802514a:	f899 5000 	ldrb.w	r5, [r9]
 802514e:	9501      	str	r5, [sp, #4]
 8025150:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025152:	3501      	adds	r5, #1
 8025154:	d433      	bmi.n	80251be <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 8025156:	42ac      	cmp	r4, r5
 8025158:	dd31      	ble.n	80251be <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 802515a:	2b00      	cmp	r3, #0
 802515c:	d040      	beq.n	80251e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x214>
 802515e:	9805      	ldr	r0, [sp, #20]
 8025160:	4420      	add	r0, r4
 8025162:	7840      	ldrb	r0, [r0, #1]
 8025164:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8025168:	f81e 0004 	ldrb.w	r0, [lr, r4]
 802516c:	44a6      	add	lr, r4
 802516e:	e76a      	b.n	8025046 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 8025170:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025172:	2a00      	cmp	r2, #0
 8025174:	db01      	blt.n	802517a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ae>
 8025176:	4294      	cmp	r4, r2
 8025178:	dc1b      	bgt.n	80251b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1e6>
 802517a:	f10d 081c 	add.w	r8, sp, #28
 802517e:	3201      	adds	r2, #1
 8025180:	f898 b000 	ldrb.w	fp, [r8]
 8025184:	d40a      	bmi.n	802519c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 8025186:	4294      	cmp	r4, r2
 8025188:	dd08      	ble.n	802519c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 802518a:	b1fb      	cbz	r3, 80251cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x200>
 802518c:	9a05      	ldr	r2, [sp, #20]
 802518e:	7857      	ldrb	r7, [r2, #1]
 8025190:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025194:	f81e 2007 	ldrb.w	r2, [lr, r7]
 8025198:	4477      	add	r7, lr
 802519a:	e74b      	b.n	8025034 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 802519c:	b2c2      	uxtb	r2, r0
 802519e:	af07      	add	r7, sp, #28
 80251a0:	e748      	b.n	8025034 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 80251a2:	b2c0      	uxtb	r0, r0
 80251a4:	2b0f      	cmp	r3, #15
 80251a6:	9001      	str	r0, [sp, #4]
 80251a8:	d81e      	bhi.n	80251e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 80251aa:	f10d 0e1c 	add.w	lr, sp, #28
 80251ae:	46f1      	mov	r9, lr
 80251b0:	e74f      	b.n	8025052 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x86>
 80251b2:	f818 800c 	ldrb.w	r8, [r8, ip]
 80251b6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80251ba:	44f0      	add	r8, lr
 80251bc:	e7df      	b.n	802517e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1b2>
 80251be:	b2c0      	uxtb	r0, r0
 80251c0:	f10d 0e1c 	add.w	lr, sp, #28
 80251c4:	e73f      	b.n	8025046 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 80251c6:	f10d 091c 	add.w	r9, sp, #28
 80251ca:	e7be      	b.n	802514a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x17e>
 80251cc:	2d00      	cmp	r5, #0
 80251ce:	b2c2      	uxtb	r2, r0
 80251d0:	af07      	add	r7, sp, #28
 80251d2:	f6bf af31 	bge.w	8025038 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80251d6:	46be      	mov	lr, r7
 80251d8:	46b9      	mov	r9, r7
 80251da:	4610      	mov	r0, r2
 80251dc:	9201      	str	r2, [sp, #4]
 80251de:	e735      	b.n	802504c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80251e0:	b2c0      	uxtb	r0, r0
 80251e2:	f10d 0e1c 	add.w	lr, sp, #28
 80251e6:	e731      	b.n	802504c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80251e8:	4b03      	ldr	r3, [pc, #12]	@ (80251f8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x22c>)
 80251ea:	4a04      	ldr	r2, [pc, #16]	@ (80251fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x230>)
 80251ec:	f240 31ca 	movw	r1, #970	@ 0x3ca
 80251f0:	4803      	ldr	r0, [pc, #12]	@ (8025200 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x234>)
 80251f2:	f005 fdfb 	bl	802adec <__assert_func>
 80251f6:	bf00      	nop
 80251f8:	0802e264 	.word	0x0802e264
 80251fc:	0802e8e0 	.word	0x0802e8e0
 8025200:	0802e3ec 	.word	0x0802e3ec

08025204 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025208:	ed2d 8b08 	vpush	{d8-d11}
 802520c:	b095      	sub	sp, #84	@ 0x54
 802520e:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8025212:	e9dd 512b 	ldrd	r5, r1, [sp, #172]	@ 0xac
 8025216:	e9dd b827 	ldrd	fp, r8, [sp, #156]	@ 0x9c
 802521a:	686c      	ldr	r4, [r5, #4]
 802521c:	461a      	mov	r2, r3
 802521e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8025220:	f89d 60bc 	ldrb.w	r6, [sp, #188]	@ 0xbc
 8025224:	fb04 1303 	mla	r3, r4, r3, r1
 8025228:	682c      	ldr	r4, [r5, #0]
 802522a:	e9cd 0612 	strd	r0, r6, [sp, #72]	@ 0x48
 802522e:	43f0      	mvns	r0, r6
 8025230:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8025234:	eeb0 aa40 	vmov.f32	s20, s0
 8025238:	eef0 9a60 	vmov.f32	s19, s1
 802523c:	eeb0 9a41 	vmov.f32	s18, s2
 8025240:	eef0 8a62 	vmov.f32	s17, s5
 8025244:	eeb0 8a43 	vmov.f32	s16, s6
 8025248:	eef0 ba44 	vmov.f32	s23, s8
 802524c:	eeb0 ba64 	vmov.f32	s22, s9
 8025250:	eef0 aa45 	vmov.f32	s21, s10
 8025254:	469a      	mov	sl, r3
 8025256:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8025258:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 802525a:	6849      	ldr	r1, [r1, #4]
 802525c:	682d      	ldr	r5, [r5, #0]
 802525e:	3104      	adds	r1, #4
 8025260:	b2c0      	uxtb	r0, r0
 8025262:	9108      	str	r1, [sp, #32]
 8025264:	b2b1      	uxth	r1, r6
 8025266:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025268:	900c      	str	r0, [sp, #48]	@ 0x30
 802526a:	910d      	str	r1, [sp, #52]	@ 0x34
 802526c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802526e:	2b00      	cmp	r3, #0
 8025270:	dc02      	bgt.n	8025278 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8025272:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025274:	2b00      	cmp	r3, #0
 8025276:	dd65      	ble.n	8025344 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025278:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802527a:	2a00      	cmp	r2, #0
 802527c:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8025280:	b225      	sxth	r5, r4
 8025282:	fa0f f78e 	sxth.w	r7, lr
 8025286:	f340 8233 	ble.w	80256f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 802528a:	1e6e      	subs	r6, r5, #1
 802528c:	f107 3cff 	add.w	ip, r7, #4294967295
 8025290:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8025294:	e9dd e929 	ldrd	lr, r9, [sp, #164]	@ 0xa4
 8025298:	ea5f 432b 	movs.w	r3, fp, asr #16
 802529c:	ea4f 4128 	mov.w	r1, r8, asr #16
 80252a0:	d405      	bmi.n	80252ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80252a2:	42b3      	cmp	r3, r6
 80252a4:	da03      	bge.n	80252ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80252a6:	2900      	cmp	r1, #0
 80252a8:	db01      	blt.n	80252ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80252aa:	4561      	cmp	r1, ip
 80252ac:	db4f      	blt.n	802534e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80252ae:	1c58      	adds	r0, r3, #1
 80252b0:	d406      	bmi.n	80252c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80252b2:	42a8      	cmp	r0, r5
 80252b4:	dc04      	bgt.n	80252c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80252b6:	1c48      	adds	r0, r1, #1
 80252b8:	d402      	bmi.n	80252c0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80252ba:	42b8      	cmp	r0, r7
 80252bc:	f340 817e 	ble.w	80255bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 80252c0:	3a01      	subs	r2, #1
 80252c2:	44f3      	add	fp, lr
 80252c4:	44c8      	add	r8, r9
 80252c6:	f10a 0a02 	add.w	sl, sl, #2
 80252ca:	d1e5      	bne.n	8025298 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80252cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80252ce:	2b00      	cmp	r3, #0
 80252d0:	dd38      	ble.n	8025344 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80252d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80252d6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80252da:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80252de:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80252e2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80252e6:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80252ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 80252ee:	ee76 6a68 	vsub.f32	s13, s12, s17
 80252f2:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80252f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252fa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80252fe:	ee16 2a90 	vmov	r2, s13
 8025302:	3b01      	subs	r3, #1
 8025304:	930e      	str	r3, [sp, #56]	@ 0x38
 8025306:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025308:	fb92 f3f3 	sdiv	r3, r2, r3
 802530c:	ee17 2a10 	vmov	r2, s14
 8025310:	eeb0 7a48 	vmov.f32	s14, s16
 8025314:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025318:	ee17 8a10 	vmov	r8, s14
 802531c:	eeb0 7a68 	vmov.f32	s14, s17
 8025320:	9329      	str	r3, [sp, #164]	@ 0xa4
 8025322:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025324:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8025328:	fb92 f3f3 	sdiv	r3, r2, r3
 802532c:	932a      	str	r3, [sp, #168]	@ 0xa8
 802532e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025330:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025332:	ee17 ba10 	vmov	fp, s14
 8025336:	eeb0 8a67 	vmov.f32	s16, s15
 802533a:	eef0 8a46 	vmov.f32	s17, s12
 802533e:	bf18      	it	ne
 8025340:	461a      	movne	r2, r3
 8025342:	e793      	b.n	802526c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025344:	b015      	add	sp, #84	@ 0x54
 8025346:	ecbd 8b08 	vpop	{d8-d11}
 802534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802534e:	46d4      	mov	ip, sl
 8025350:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8025354:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8025356:	1e51      	subs	r1, r2, #1
 8025358:	fb00 b301 	mla	r3, r0, r1, fp
 802535c:	141b      	asrs	r3, r3, #16
 802535e:	910a      	str	r1, [sp, #40]	@ 0x28
 8025360:	f100 80cc 	bmi.w	80254fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8025364:	42b3      	cmp	r3, r6
 8025366:	f280 80c9 	bge.w	80254fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802536a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802536c:	fb03 8301 	mla	r3, r3, r1, r8
 8025370:	141b      	asrs	r3, r3, #16
 8025372:	f100 80c3 	bmi.w	80254fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8025376:	3f01      	subs	r7, #1
 8025378:	42bb      	cmp	r3, r7
 802537a:	f280 80bf 	bge.w	80254fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802537e:	2a00      	cmp	r2, #0
 8025380:	dda4      	ble.n	80252cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8025382:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8025386:	e9cd ca09 	strd	ip, sl, [sp, #36]	@ 0x24
 802538a:	e08e      	b.n	80254aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802538c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8025390:	194c      	adds	r4, r1, r5
 8025392:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025396:	44bc      	add	ip, r7
 8025398:	2a00      	cmp	r2, #0
 802539a:	f000 80a6 	beq.w	80254ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802539e:	5d48      	ldrb	r0, [r1, r5]
 80253a0:	7865      	ldrb	r5, [r4, #1]
 80253a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80253a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80253aa:	4438      	add	r0, r7
 80253ac:	443d      	add	r5, r7
 80253ae:	b29b      	uxth	r3, r3
 80253b0:	b292      	uxth	r2, r2
 80253b2:	fb03 f402 	mul.w	r4, r3, r2
 80253b6:	011b      	lsls	r3, r3, #4
 80253b8:	1b19      	subs	r1, r3, r4
 80253ba:	f89c 9000 	ldrb.w	r9, [ip]
 80253be:	f89c e002 	ldrb.w	lr, [ip, #2]
 80253c2:	b289      	uxth	r1, r1
 80253c4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80253c8:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80253cc:	fb01 f909 	mul.w	r9, r1, r9
 80253d0:	b292      	uxth	r2, r2
 80253d2:	fb01 fe0e 	mul.w	lr, r1, lr
 80253d6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80253da:	fb01 f10c 	mul.w	r1, r1, ip
 80253de:	f817 a00a 	ldrb.w	sl, [r7, sl]
 80253e2:	1a9b      	subs	r3, r3, r2
 80253e4:	f896 c002 	ldrb.w	ip, [r6, #2]
 80253e8:	b29b      	uxth	r3, r3
 80253ea:	7876      	ldrb	r6, [r6, #1]
 80253ec:	fb03 990a 	mla	r9, r3, sl, r9
 80253f0:	fb03 ec0c 	mla	ip, r3, ip, lr
 80253f4:	fb03 1306 	mla	r3, r3, r6, r1
 80253f8:	7801      	ldrb	r1, [r0, #0]
 80253fa:	f890 e002 	ldrb.w	lr, [r0, #2]
 80253fe:	fb02 9901 	mla	r9, r2, r1, r9
 8025402:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025404:	fb02 ce0e 	mla	lr, r2, lr, ip
 8025408:	7829      	ldrb	r1, [r5, #0]
 802540a:	f8b7 c000 	ldrh.w	ip, [r7]
 802540e:	7840      	ldrb	r0, [r0, #1]
 8025410:	78ae      	ldrb	r6, [r5, #2]
 8025412:	fb02 3200 	mla	r2, r2, r0, r3
 8025416:	fb04 9901 	mla	r9, r4, r1, r9
 802541a:	7868      	ldrb	r0, [r5, #1]
 802541c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802541e:	ea4f 252c 	mov.w	r5, ip, asr #8
 8025422:	fb04 ee06 	mla	lr, r4, r6, lr
 8025426:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802542a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802542e:	fb15 f501 	smulbb	r5, r5, r1
 8025432:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025436:	b2db      	uxtb	r3, r3
 8025438:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 802543c:	fb13 f301 	smulbb	r3, r3, r1
 8025440:	fb1c fc01 	smulbb	ip, ip, r1
 8025444:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025446:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802544a:	fb04 2200 	mla	r2, r4, r0, r2
 802544e:	fb0e 5501 	mla	r5, lr, r1, r5
 8025452:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025456:	b2ad      	uxth	r5, r5
 8025458:	fb02 cc01 	mla	ip, r2, r1, ip
 802545c:	1c6a      	adds	r2, r5, #1
 802545e:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8025462:	463a      	mov	r2, r7
 8025464:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8025468:	fb09 3301 	mla	r3, r9, r1, r3
 802546c:	fa1f f18c 	uxth.w	r1, ip
 8025470:	b29b      	uxth	r3, r3
 8025472:	1c5c      	adds	r4, r3, #1
 8025474:	1c48      	adds	r0, r1, #1
 8025476:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802547a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802547e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025482:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025486:	0949      	lsrs	r1, r1, #5
 8025488:	432b      	orrs	r3, r5
 802548a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802548e:	430b      	orrs	r3, r1
 8025490:	f822 3b02 	strh.w	r3, [r2], #2
 8025494:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025496:	9209      	str	r2, [sp, #36]	@ 0x24
 8025498:	449b      	add	fp, r3
 802549a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802549c:	4498      	add	r8, r3
 802549e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80254a0:	429a      	cmp	r2, r3
 80254a2:	d029      	beq.n	80254f8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80254a4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80254a6:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80254aa:	ea4f 432b 	mov.w	r3, fp, asr #16
 80254ae:	ea4f 4128 	mov.w	r1, r8, asr #16
 80254b2:	fb05 3101 	mla	r1, r5, r1, r3
 80254b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80254b8:	9f08      	ldr	r7, [sp, #32]
 80254ba:	f812 a001 	ldrb.w	sl, [r2, r1]
 80254be:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80254c2:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80254c6:	4411      	add	r1, r2
 80254c8:	eb07 060a 	add.w	r6, r7, sl
 80254cc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80254d0:	2b00      	cmp	r3, #0
 80254d2:	f47f af5b 	bne.w	802538c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80254d6:	b15a      	cbz	r2, 80254f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>
 80254d8:	5d48      	ldrb	r0, [r1, r5]
 80254da:	9908      	ldr	r1, [sp, #32]
 80254dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80254e0:	4635      	mov	r5, r6
 80254e2:	4408      	add	r0, r1
 80254e4:	46b4      	mov	ip, r6
 80254e6:	460f      	mov	r7, r1
 80254e8:	e761      	b.n	80253ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80254ea:	4635      	mov	r5, r6
 80254ec:	4630      	mov	r0, r6
 80254ee:	e75e      	b.n	80253ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80254f0:	4635      	mov	r5, r6
 80254f2:	4630      	mov	r0, r6
 80254f4:	46b4      	mov	ip, r6
 80254f6:	e75a      	b.n	80253ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80254f8:	469a      	mov	sl, r3
 80254fa:	e6e7      	b.n	80252cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80254fc:	2a00      	cmp	r2, #0
 80254fe:	f77f aee5 	ble.w	80252cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8025502:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025504:	ea4f 432b 	mov.w	r3, fp, asr #16
 8025508:	ea4f 4128 	mov.w	r1, r8, asr #16
 802550c:	4675      	mov	r5, lr
 802550e:	46d1      	mov	r9, sl
 8025510:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8025514:	f8dd a0b8 	ldr.w	sl, [sp, #184]	@ 0xb8
 8025518:	9609      	str	r6, [sp, #36]	@ 0x24
 802551a:	2b00      	cmp	r3, #0
 802551c:	f3cb 3703 	ubfx	r7, fp, #12, #4
 8025520:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8025524:	db27      	blt.n	8025576 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025526:	1e60      	subs	r0, r4, #1
 8025528:	4283      	cmp	r3, r0
 802552a:	da24      	bge.n	8025576 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 802552c:	2900      	cmp	r1, #0
 802552e:	db22      	blt.n	8025576 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025530:	1e68      	subs	r0, r5, #1
 8025532:	4281      	cmp	r1, r0
 8025534:	da1f      	bge.n	8025576 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8025536:	b220      	sxth	r0, r4
 8025538:	fb01 3300 	mla	r3, r1, r0, r3
 802553c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802553e:	5ccd      	ldrb	r5, [r1, r3]
 8025540:	440b      	add	r3, r1
 8025542:	9908      	ldr	r1, [sp, #32]
 8025544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025548:	460e      	mov	r6, r1
 802554a:	eb01 0c05 	add.w	ip, r1, r5
 802554e:	2f00      	cmp	r7, #0
 8025550:	d04b      	beq.n	80255ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8025552:	785c      	ldrb	r4, [r3, #1]
 8025554:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025558:	440c      	add	r4, r1
 802555a:	2a00      	cmp	r2, #0
 802555c:	f000 80c4 	beq.w	80256e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025560:	1819      	adds	r1, r3, r0
 8025562:	7849      	ldrb	r1, [r1, #1]
 8025564:	5c18      	ldrb	r0, [r3, r0]
 8025566:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802556a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802556e:	1873      	adds	r3, r6, r1
 8025570:	9311      	str	r3, [sp, #68]	@ 0x44
 8025572:	4430      	add	r0, r6
 8025574:	e03f      	b.n	80255f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025576:	1c58      	adds	r0, r3, #1
 8025578:	d405      	bmi.n	8025586 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802557a:	42a0      	cmp	r0, r4
 802557c:	dc03      	bgt.n	8025586 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802557e:	1c48      	adds	r0, r1, #1
 8025580:	d401      	bmi.n	8025586 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025582:	42a8      	cmp	r0, r5
 8025584:	dd20      	ble.n	80255c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8025586:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8025588:	f109 0902 	add.w	r9, r9, #2
 802558c:	449b      	add	fp, r3
 802558e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025590:	4498      	add	r8, r3
 8025592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025594:	2b00      	cmp	r3, #0
 8025596:	dd08      	ble.n	80255aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8025598:	e9da 4502 	ldrd	r4, r5, [sl, #8]
 802559c:	3b01      	subs	r3, #1
 802559e:	9309      	str	r3, [sp, #36]	@ 0x24
 80255a0:	ea4f 4128 	mov.w	r1, r8, asr #16
 80255a4:	ea4f 432b 	mov.w	r3, fp, asr #16
 80255a8:	e7b7      	b.n	802551a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80255aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80255ac:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 80255b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80255b4:	3301      	adds	r3, #1
 80255b6:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
 80255ba:	e687      	b.n	80252cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80255bc:	3a01      	subs	r2, #1
 80255be:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 80255c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80255c4:	4616      	mov	r6, r2
 80255c6:	e7a1      	b.n	802550c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80255c8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80255ca:	b22d      	sxth	r5, r5
 80255cc:	b224      	sxth	r4, r4
 80255ce:	e9cd 2005 	strd	r2, r0, [sp, #20]
 80255d2:	e9cd 1703 	strd	r1, r7, [sp, #12]
 80255d6:	9302      	str	r3, [sp, #8]
 80255d8:	e9cd 4500 	strd	r4, r5, [sp]
 80255dc:	9b08      	ldr	r3, [sp, #32]
 80255de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80255e0:	4649      	mov	r1, r9
 80255e2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80255e4:	f7ff fcf2 	bl	8024fcc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80255e8:	e7cd      	b.n	8025586 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80255ea:	2a00      	cmp	r2, #0
 80255ec:	d173      	bne.n	80256d6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d2>
 80255ee:	4660      	mov	r0, ip
 80255f0:	4664      	mov	r4, ip
 80255f2:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80255f6:	b2bb      	uxth	r3, r7
 80255f8:	b292      	uxth	r2, r2
 80255fa:	fb03 f702 	mul.w	r7, r3, r2
 80255fe:	011b      	lsls	r3, r3, #4
 8025600:	1bd9      	subs	r1, r3, r7
 8025602:	7826      	ldrb	r6, [r4, #0]
 8025604:	f894 e002 	ldrb.w	lr, [r4, #2]
 8025608:	7864      	ldrb	r4, [r4, #1]
 802560a:	b289      	uxth	r1, r1
 802560c:	fb01 f606 	mul.w	r6, r1, r6
 8025610:	fb01 fe0e 	mul.w	lr, r1, lr
 8025614:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8025618:	fb01 f104 	mul.w	r1, r1, r4
 802561c:	9c08      	ldr	r4, [sp, #32]
 802561e:	b292      	uxth	r2, r2
 8025620:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8025624:	5d65      	ldrb	r5, [r4, r5]
 8025626:	1a9b      	subs	r3, r3, r2
 8025628:	f89c 4002 	ldrb.w	r4, [ip, #2]
 802562c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025630:	b29b      	uxth	r3, r3
 8025632:	fb03 e404 	mla	r4, r3, r4, lr
 8025636:	fb03 6505 	mla	r5, r3, r5, r6
 802563a:	fb03 130c 	mla	r3, r3, ip, r1
 802563e:	f890 c001 	ldrb.w	ip, [r0, #1]
 8025642:	7801      	ldrb	r1, [r0, #0]
 8025644:	f890 e002 	ldrb.w	lr, [r0, #2]
 8025648:	fb02 3c0c 	mla	ip, r2, ip, r3
 802564c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802564e:	fb02 5601 	mla	r6, r2, r1, r5
 8025652:	fb02 4e0e 	mla	lr, r2, lr, r4
 8025656:	7899      	ldrb	r1, [r3, #2]
 8025658:	781a      	ldrb	r2, [r3, #0]
 802565a:	785b      	ldrb	r3, [r3, #1]
 802565c:	f8b9 0000 	ldrh.w	r0, [r9]
 8025660:	fb07 c303 	mla	r3, r7, r3, ip
 8025664:	fb07 6202 	mla	r2, r7, r2, r6
 8025668:	00c5      	lsls	r5, r0, #3
 802566a:	1204      	asrs	r4, r0, #8
 802566c:	fb07 e101 	mla	r1, r7, r1, lr
 8025670:	10c0      	asrs	r0, r0, #3
 8025672:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025674:	b2ed      	uxtb	r5, r5
 8025676:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802567a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802567e:	fb15 f507 	smulbb	r5, r5, r7
 8025682:	fb14 f407 	smulbb	r4, r4, r7
 8025686:	fb10 f007 	smulbb	r0, r0, r7
 802568a:	f3c3 2707 	ubfx	r7, r3, #8, #8
 802568e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025690:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025694:	461e      	mov	r6, r3
 8025696:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802569a:	fb02 5203 	mla	r2, r2, r3, r5
 802569e:	fb07 0006 	mla	r0, r7, r6, r0
 80256a2:	fb01 4303 	mla	r3, r1, r3, r4
 80256a6:	b281      	uxth	r1, r0
 80256a8:	b294      	uxth	r4, r2
 80256aa:	b29b      	uxth	r3, r3
 80256ac:	1c4a      	adds	r2, r1, #1
 80256ae:	1c5d      	adds	r5, r3, #1
 80256b0:	1c60      	adds	r0, r4, #1
 80256b2:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80256b6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80256ba:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80256be:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80256c2:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 80256c6:	0952      	lsrs	r2, r2, #5
 80256c8:	430b      	orrs	r3, r1
 80256ca:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80256ce:	4313      	orrs	r3, r2
 80256d0:	f8a9 3000 	strh.w	r3, [r9]
 80256d4:	e757      	b.n	8025586 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80256d6:	5c18      	ldrb	r0, [r3, r0]
 80256d8:	9b08      	ldr	r3, [sp, #32]
 80256da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80256de:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80256e2:	4418      	add	r0, r3
 80256e4:	4664      	mov	r4, ip
 80256e6:	e786      	b.n	80255f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80256e8:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80256ec:	4660      	mov	r0, ip
 80256ee:	e782      	b.n	80255f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80256f0:	f43f adec 	beq.w	80252cc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80256f4:	1e6e      	subs	r6, r5, #1
 80256f6:	46d4      	mov	ip, sl
 80256f8:	e62c      	b.n	8025354 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80256fa:	bf00      	nop

080256fc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80256fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025700:	4692      	mov	sl, r2
 8025702:	b083      	sub	sp, #12
 8025704:	880a      	ldrh	r2, [r1, #0]
 8025706:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 802570a:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	@ 0x38
 802570e:	0215      	lsls	r5, r2, #8
 8025710:	0150      	lsls	r0, r2, #5
 8025712:	fb04 7e0c 	mla	lr, r4, ip, r7
 8025716:	f400 407c 	and.w	r0, r0, #64512	@ 0xfc00
 802571a:	f405 0578 	and.w	r5, r5, #16252928	@ 0xf80000
 802571e:	00d2      	lsls	r2, r2, #3
 8025720:	4305      	orrs	r5, r0
 8025722:	b2d2      	uxtb	r2, r2
 8025724:	4315      	orrs	r5, r2
 8025726:	2c00      	cmp	r4, #0
 8025728:	9501      	str	r5, [sp, #4]
 802572a:	eb0a 020e 	add.w	r2, sl, lr
 802572e:	f104 0801 	add.w	r8, r4, #1
 8025732:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8025736:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 802573a:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 802573e:	db01      	blt.n	8025744 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x48>
 8025740:	45a1      	cmp	r9, r4
 8025742:	dc71      	bgt.n	8025828 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x12c>
 8025744:	fa5f fa85 	uxtb.w	sl, r5
 8025748:	f10d 0b04 	add.w	fp, sp, #4
 802574c:	4654      	mov	r4, sl
 802574e:	46de      	mov	lr, fp
 8025750:	f1b8 0f00 	cmp.w	r8, #0
 8025754:	db01      	blt.n	802575a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5e>
 8025756:	45c1      	cmp	r9, r8
 8025758:	dc4c      	bgt.n	80257f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xf8>
 802575a:	fa5f f985 	uxtb.w	r9, r5
 802575e:	ab01      	add	r3, sp, #4
 8025760:	464d      	mov	r5, r9
 8025762:	4698      	mov	r8, r3
 8025764:	2e0f      	cmp	r6, #15
 8025766:	f200 809b 	bhi.w	80258a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 802576a:	280f      	cmp	r0, #15
 802576c:	f200 8098 	bhi.w	80258a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8025770:	b2b2      	uxth	r2, r6
 8025772:	b280      	uxth	r0, r0
 8025774:	fb02 f700 	mul.w	r7, r2, r0
 8025778:	0112      	lsls	r2, r2, #4
 802577a:	f89b c002 	ldrb.w	ip, [fp, #2]
 802577e:	1bd6      	subs	r6, r2, r7
 8025780:	f89b b001 	ldrb.w	fp, [fp, #1]
 8025784:	b2b6      	uxth	r6, r6
 8025786:	ebc7 1000 	rsb	r0, r7, r0, lsl #4
 802578a:	fb06 f404 	mul.w	r4, r6, r4
 802578e:	fb06 fc0c 	mul.w	ip, r6, ip
 8025792:	fb06 f60b 	mul.w	r6, r6, fp
 8025796:	b280      	uxth	r0, r0
 8025798:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802579c:	f89e b002 	ldrb.w	fp, [lr, #2]
 80257a0:	1a12      	subs	r2, r2, r0
 80257a2:	f89e e001 	ldrb.w	lr, [lr, #1]
 80257a6:	b292      	uxth	r2, r2
 80257a8:	fb02 440a 	mla	r4, r2, sl, r4
 80257ac:	fb02 660e 	mla	r6, r2, lr, r6
 80257b0:	fb02 cc0b 	mla	ip, r2, fp, ip
 80257b4:	f898 a002 	ldrb.w	sl, [r8, #2]
 80257b8:	f898 8001 	ldrb.w	r8, [r8, #1]
 80257bc:	fb00 4909 	mla	r9, r0, r9, r4
 80257c0:	fb00 cc0a 	mla	ip, r0, sl, ip
 80257c4:	fb00 6008 	mla	r0, r0, r8, r6
 80257c8:	789e      	ldrb	r6, [r3, #2]
 80257ca:	785b      	ldrb	r3, [r3, #1]
 80257cc:	fb07 9905 	mla	r9, r7, r5, r9
 80257d0:	fb07 c506 	mla	r5, r7, r6, ip
 80257d4:	fb07 0703 	mla	r7, r7, r3, r0
 80257d8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80257dc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80257e0:	097f      	lsrs	r7, r7, #5
 80257e2:	ea45 0509 	orr.w	r5, r5, r9
 80257e6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80257ea:	433d      	orrs	r5, r7
 80257ec:	800d      	strh	r5, [r1, #0]
 80257ee:	b003      	add	sp, #12
 80257f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257f4:	b388      	cbz	r0, 802585a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x15e>
 80257f6:	2f00      	cmp	r7, #0
 80257f8:	db40      	blt.n	802587c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 80257fa:	45bc      	cmp	ip, r7
 80257fc:	dd3e      	ble.n	802587c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 80257fe:	f812 800c 	ldrb.w	r8, [r2, ip]
 8025802:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025806:	4498      	add	r8, r3
 8025808:	3701      	adds	r7, #1
 802580a:	f898 9000 	ldrb.w	r9, [r8]
 802580e:	d432      	bmi.n	8025876 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8025810:	45bc      	cmp	ip, r7
 8025812:	dd30      	ble.n	8025876 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 8025814:	2e00      	cmp	r6, #0
 8025816:	d040      	beq.n	802589a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x19e>
 8025818:	4494      	add	ip, r2
 802581a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802581e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025822:	5c9d      	ldrb	r5, [r3, r2]
 8025824:	4413      	add	r3, r2
 8025826:	e79d      	b.n	8025764 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8025828:	2f00      	cmp	r7, #0
 802582a:	db01      	blt.n	8025830 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x134>
 802582c:	45bc      	cmp	ip, r7
 802582e:	dc1c      	bgt.n	802586a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16e>
 8025830:	f10d 0e04 	add.w	lr, sp, #4
 8025834:	1c7c      	adds	r4, r7, #1
 8025836:	f89e a000 	ldrb.w	sl, [lr]
 802583a:	d40a      	bmi.n	8025852 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 802583c:	45a4      	cmp	ip, r4
 802583e:	dd08      	ble.n	8025852 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8025840:	b1fe      	cbz	r6, 8025882 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x186>
 8025842:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025846:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 802584a:	f813 400b 	ldrb.w	r4, [r3, fp]
 802584e:	449b      	add	fp, r3
 8025850:	e77e      	b.n	8025750 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8025852:	b2ec      	uxtb	r4, r5
 8025854:	f10d 0b04 	add.w	fp, sp, #4
 8025858:	e77a      	b.n	8025750 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 802585a:	2e0f      	cmp	r6, #15
 802585c:	fa5f f985 	uxtb.w	r9, r5
 8025860:	d81e      	bhi.n	80258a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8025862:	ab01      	add	r3, sp, #4
 8025864:	4698      	mov	r8, r3
 8025866:	464d      	mov	r5, r9
 8025868:	e782      	b.n	8025770 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x74>
 802586a:	f81a e00e 	ldrb.w	lr, [sl, lr]
 802586e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8025872:	449e      	add	lr, r3
 8025874:	e7de      	b.n	8025834 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025876:	b2ed      	uxtb	r5, r5
 8025878:	ab01      	add	r3, sp, #4
 802587a:	e773      	b.n	8025764 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 802587c:	f10d 0804 	add.w	r8, sp, #4
 8025880:	e7c2      	b.n	8025808 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x10c>
 8025882:	f1b8 0f00 	cmp.w	r8, #0
 8025886:	b2ec      	uxtb	r4, r5
 8025888:	f10d 0b04 	add.w	fp, sp, #4
 802588c:	f6bf af63 	bge.w	8025756 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8025890:	465b      	mov	r3, fp
 8025892:	46d8      	mov	r8, fp
 8025894:	4625      	mov	r5, r4
 8025896:	46a1      	mov	r9, r4
 8025898:	e767      	b.n	802576a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802589a:	b2ed      	uxtb	r5, r5
 802589c:	ab01      	add	r3, sp, #4
 802589e:	e764      	b.n	802576a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 80258a0:	4b03      	ldr	r3, [pc, #12]	@ (80258b0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b4>)
 80258a2:	4a04      	ldr	r2, [pc, #16]	@ (80258b4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b8>)
 80258a4:	f240 31ca 	movw	r1, #970	@ 0x3ca
 80258a8:	4803      	ldr	r0, [pc, #12]	@ (80258b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1bc>)
 80258aa:	f005 fa9f 	bl	802adec <__assert_func>
 80258ae:	bf00      	nop
 80258b0:	0802e264 	.word	0x0802e264
 80258b4:	0802e8e0 	.word	0x0802e8e0
 80258b8:	0802e3ec 	.word	0x0802e3ec

080258bc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80258bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258c0:	ed2d 8b0a 	vpush	{d8-d12}
 80258c4:	eeb0 aa40 	vmov.f32	s20, s0
 80258c8:	eef0 9a60 	vmov.f32	s19, s1
 80258cc:	eeb0 9a41 	vmov.f32	s18, s2
 80258d0:	eef0 8a62 	vmov.f32	s17, s5
 80258d4:	eeb0 8a43 	vmov.f32	s16, s6
 80258d8:	eeb0 ca44 	vmov.f32	s24, s8
 80258dc:	eef0 ba64 	vmov.f32	s23, s9
 80258e0:	eeb0 ba45 	vmov.f32	s22, s10
 80258e4:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 80258e8:	b093      	sub	sp, #76	@ 0x4c
 80258ea:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80258ee:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	@ 0xac
 80258f2:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	@ 0x9c
 80258f6:	9011      	str	r0, [sp, #68]	@ 0x44
 80258f8:	461a      	mov	r2, r3
 80258fa:	6860      	ldr	r0, [r4, #4]
 80258fc:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80258fe:	f8dd a0a4 	ldr.w	sl, [sp, #164]	@ 0xa4
 8025902:	fb00 1303 	mla	r3, r0, r3, r1
 8025906:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8025908:	6820      	ldr	r0, [r4, #0]
 802590a:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 802590c:	6849      	ldr	r1, [r1, #4]
 802590e:	6824      	ldr	r4, [r4, #0]
 8025910:	eb00 0b43 	add.w	fp, r0, r3, lsl #1
 8025914:	1d0b      	adds	r3, r1, #4
 8025916:	9409      	str	r4, [sp, #36]	@ 0x24
 8025918:	930c      	str	r3, [sp, #48]	@ 0x30
 802591a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802591c:	2b00      	cmp	r3, #0
 802591e:	dc02      	bgt.n	8025926 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8025920:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025922:	2b00      	cmp	r3, #0
 8025924:	dd61      	ble.n	80259ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8025926:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025928:	2a00      	cmp	r2, #0
 802592a:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 802592e:	b225      	sxth	r5, r4
 8025930:	fa0f f78e 	sxth.w	r7, lr
 8025934:	f340 81d9 	ble.w	8025cea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8025938:	f8cd e01c 	str.w	lr, [sp, #28]
 802593c:	f8dd e0a8 	ldr.w	lr, [sp, #168]	@ 0xa8
 8025940:	1e6e      	subs	r6, r5, #1
 8025942:	f107 3cff 	add.w	ip, r7, #4294967295
 8025946:	ea5f 4329 	movs.w	r3, r9, asr #16
 802594a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802594e:	d405      	bmi.n	802595c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025950:	42b3      	cmp	r3, r6
 8025952:	da03      	bge.n	802595c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025954:	2900      	cmp	r1, #0
 8025956:	db01      	blt.n	802595c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025958:	4561      	cmp	r1, ip
 802595a:	db4b      	blt.n	80259f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802595c:	1c58      	adds	r0, r3, #1
 802595e:	d406      	bmi.n	802596e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025960:	42a8      	cmp	r0, r5
 8025962:	dc04      	bgt.n	802596e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025964:	1c48      	adds	r0, r1, #1
 8025966:	d402      	bmi.n	802596e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025968:	42b8      	cmp	r0, r7
 802596a:	f340 8149 	ble.w	8025c00 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802596e:	3a01      	subs	r2, #1
 8025970:	44d1      	add	r9, sl
 8025972:	44f0      	add	r8, lr
 8025974:	f10b 0b02 	add.w	fp, fp, #2
 8025978:	d1e5      	bne.n	8025946 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802597a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802597c:	2b00      	cmp	r3, #0
 802597e:	dd34      	ble.n	80259ea <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 8025980:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025984:	ee79 9aab 	vadd.f32	s19, s19, s23
 8025988:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802598c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8025990:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8025994:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025998:	ee76 6a68 	vsub.f32	s13, s12, s17
 802599c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80259a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80259a4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80259a8:	ee16 2a90 	vmov	r2, s13
 80259ac:	3b01      	subs	r3, #1
 80259ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80259b0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80259b2:	fb92 faf3 	sdiv	sl, r2, r3
 80259b6:	ee17 2a10 	vmov	r2, s14
 80259ba:	eeb0 7a48 	vmov.f32	s14, s16
 80259be:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80259c2:	ee17 8a10 	vmov	r8, s14
 80259c6:	eeb0 7a68 	vmov.f32	s14, s17
 80259ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80259ce:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80259d2:	932a      	str	r3, [sp, #168]	@ 0xa8
 80259d4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80259d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80259d8:	ee17 9a10 	vmov	r9, s14
 80259dc:	eeb0 8a67 	vmov.f32	s16, s15
 80259e0:	eef0 8a46 	vmov.f32	s17, s12
 80259e4:	bf18      	it	ne
 80259e6:	461a      	movne	r2, r3
 80259e8:	e797      	b.n	802591a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80259ea:	b013      	add	sp, #76	@ 0x4c
 80259ec:	ecbd 8b0a 	vpop	{d8-d12}
 80259f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259f4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80259f8:	f8cd b01c 	str.w	fp, [sp, #28]
 80259fc:	1e51      	subs	r1, r2, #1
 80259fe:	fb0a 9301 	mla	r3, sl, r1, r9
 8025a02:	141b      	asrs	r3, r3, #16
 8025a04:	9108      	str	r1, [sp, #32]
 8025a06:	f100 809e 	bmi.w	8025b46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8025a0a:	42b3      	cmp	r3, r6
 8025a0c:	f280 809b 	bge.w	8025b46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8025a10:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025a12:	fb03 8301 	mla	r3, r3, r1, r8
 8025a16:	141b      	asrs	r3, r3, #16
 8025a18:	f100 8095 	bmi.w	8025b46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8025a1c:	3f01      	subs	r7, #1
 8025a1e:	42bb      	cmp	r3, r7
 8025a20:	f280 8091 	bge.w	8025b46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8025a24:	2a00      	cmp	r2, #0
 8025a26:	dda8      	ble.n	802597a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025a28:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8025a2c:	f8cd a0a4 	str.w	sl, [sp, #164]	@ 0xa4
 8025a30:	f8cd b020 	str.w	fp, [sp, #32]
 8025a34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8025a38:	e060      	b.n	8025afc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8025a3a:	784f      	ldrb	r7, [r1, #1]
 8025a3c:	194c      	adds	r4, r1, r5
 8025a3e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025a42:	4457      	add	r7, sl
 8025a44:	2a00      	cmp	r2, #0
 8025a46:	d075      	beq.n	8025b34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8025a48:	5d48      	ldrb	r0, [r1, r5]
 8025a4a:	7865      	ldrb	r5, [r4, #1]
 8025a4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025a54:	4450      	add	r0, sl
 8025a56:	4455      	add	r5, sl
 8025a58:	b29b      	uxth	r3, r3
 8025a5a:	b292      	uxth	r2, r2
 8025a5c:	fb03 f402 	mul.w	r4, r3, r2
 8025a60:	011b      	lsls	r3, r3, #4
 8025a62:	f897 e000 	ldrb.w	lr, [r7]
 8025a66:	f897 c002 	ldrb.w	ip, [r7, #2]
 8025a6a:	1b19      	subs	r1, r3, r4
 8025a6c:	787f      	ldrb	r7, [r7, #1]
 8025a6e:	b289      	uxth	r1, r1
 8025a70:	fb01 fc0c 	mul.w	ip, r1, ip
 8025a74:	fb01 fe0e 	mul.w	lr, r1, lr
 8025a78:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8025a7c:	fb01 f107 	mul.w	r1, r1, r7
 8025a80:	b292      	uxth	r2, r2
 8025a82:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8025a86:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8025a8a:	78b7      	ldrb	r7, [r6, #2]
 8025a8c:	1a9b      	subs	r3, r3, r2
 8025a8e:	7876      	ldrb	r6, [r6, #1]
 8025a90:	b29b      	uxth	r3, r3
 8025a92:	fb03 ee0b 	mla	lr, r3, fp, lr
 8025a96:	fb03 c707 	mla	r7, r3, r7, ip
 8025a9a:	fb03 1306 	mla	r3, r3, r6, r1
 8025a9e:	f890 b000 	ldrb.w	fp, [r0]
 8025aa2:	f890 c002 	ldrb.w	ip, [r0, #2]
 8025aa6:	7841      	ldrb	r1, [r0, #1]
 8025aa8:	fb02 ee0b 	mla	lr, r2, fp, lr
 8025aac:	fb02 3301 	mla	r3, r2, r1, r3
 8025ab0:	fb02 770c 	mla	r7, r2, ip, r7
 8025ab4:	f895 b000 	ldrb.w	fp, [r5]
 8025ab8:	f895 c002 	ldrb.w	ip, [r5, #2]
 8025abc:	7869      	ldrb	r1, [r5, #1]
 8025abe:	fb04 ee0b 	mla	lr, r4, fp, lr
 8025ac2:	fb04 3101 	mla	r1, r4, r1, r3
 8025ac6:	fb04 7c0c 	mla	ip, r4, ip, r7
 8025aca:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8025acc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8025ad0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8025ad4:	0949      	lsrs	r1, r1, #5
 8025ad6:	4491      	add	r9, r2
 8025ad8:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8025ada:	9b07      	ldr	r3, [sp, #28]
 8025adc:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025ae0:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8025ae4:	ea4e 0e01 	orr.w	lr, lr, r1
 8025ae8:	4490      	add	r8, r2
 8025aea:	9a08      	ldr	r2, [sp, #32]
 8025aec:	f823 eb02 	strh.w	lr, [r3], #2
 8025af0:	4293      	cmp	r3, r2
 8025af2:	9307      	str	r3, [sp, #28]
 8025af4:	d025      	beq.n	8025b42 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8025af6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8025af8:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8025afc:	ea4f 4329 	mov.w	r3, r9, asr #16
 8025b00:	ea4f 4128 	mov.w	r1, r8, asr #16
 8025b04:	fb05 3101 	mla	r1, r5, r1, r3
 8025b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025b0a:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8025b0e:	f812 b001 	ldrb.w	fp, [r2, r1]
 8025b12:	4411      	add	r1, r2
 8025b14:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8025b18:	eb0a 060b 	add.w	r6, sl, fp
 8025b1c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8025b20:	2b00      	cmp	r3, #0
 8025b22:	d18a      	bne.n	8025a3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8025b24:	b14a      	cbz	r2, 8025b3a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025b26:	5d48      	ldrb	r0, [r1, r5]
 8025b28:	4637      	mov	r7, r6
 8025b2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025b2e:	4635      	mov	r5, r6
 8025b30:	4450      	add	r0, sl
 8025b32:	e791      	b.n	8025a58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8025b34:	4635      	mov	r5, r6
 8025b36:	4630      	mov	r0, r6
 8025b38:	e78e      	b.n	8025a58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8025b3a:	4635      	mov	r5, r6
 8025b3c:	4630      	mov	r0, r6
 8025b3e:	4637      	mov	r7, r6
 8025b40:	e78a      	b.n	8025a58 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8025b42:	4693      	mov	fp, r2
 8025b44:	e719      	b.n	802597a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025b46:	2a00      	cmp	r2, #0
 8025b48:	f77f af17 	ble.w	802597a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025b4c:	9e08      	ldr	r6, [sp, #32]
 8025b4e:	ea4f 4329 	mov.w	r3, r9, asr #16
 8025b52:	ea4f 4128 	mov.w	r1, r8, asr #16
 8025b56:	465f      	mov	r7, fp
 8025b58:	f8cd b01c 	str.w	fp, [sp, #28]
 8025b5c:	f8dd b0b8 	ldr.w	fp, [sp, #184]	@ 0xb8
 8025b60:	2b00      	cmp	r3, #0
 8025b62:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8025b66:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8025b6a:	db2a      	blt.n	8025bc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025b6c:	1e65      	subs	r5, r4, #1
 8025b6e:	42ab      	cmp	r3, r5
 8025b70:	da27      	bge.n	8025bc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025b72:	2900      	cmp	r1, #0
 8025b74:	db25      	blt.n	8025bc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025b76:	f10e 35ff 	add.w	r5, lr, #4294967295
 8025b7a:	42a9      	cmp	r1, r5
 8025b7c:	da21      	bge.n	8025bc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025b7e:	b224      	sxth	r4, r4
 8025b80:	fb01 3304 	mla	r3, r1, r4, r3
 8025b84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025b86:	f811 c003 	ldrb.w	ip, [r1, r3]
 8025b8a:	440b      	add	r3, r1
 8025b8c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8025b8e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025b92:	eb01 0e0c 	add.w	lr, r1, ip
 8025b96:	2800      	cmp	r0, #0
 8025b98:	d048      	beq.n	8025c2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025b9a:	785d      	ldrb	r5, [r3, #1]
 8025b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025ba0:	440d      	add	r5, r1
 8025ba2:	2a00      	cmp	r2, #0
 8025ba4:	f000 809e 	beq.w	8025ce4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8025ba8:	1919      	adds	r1, r3, r4
 8025baa:	7849      	ldrb	r1, [r1, #1]
 8025bac:	5d1c      	ldrb	r4, [r3, r4]
 8025bae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025bb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025bb8:	1859      	adds	r1, r3, r1
 8025bba:	18e3      	adds	r3, r4, r3
 8025bbc:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025bbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8025bc0:	e039      	b.n	8025c36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8025bc2:	1c5d      	adds	r5, r3, #1
 8025bc4:	d405      	bmi.n	8025bd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8025bc6:	42a5      	cmp	r5, r4
 8025bc8:	dc03      	bgt.n	8025bd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8025bca:	1c4d      	adds	r5, r1, #1
 8025bcc:	d401      	bmi.n	8025bd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8025bce:	4575      	cmp	r5, lr
 8025bd0:	dd1c      	ble.n	8025c0c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025bd2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025bd4:	2e00      	cmp	r6, #0
 8025bd6:	f107 0702 	add.w	r7, r7, #2
 8025bda:	44d1      	add	r9, sl
 8025bdc:	4498      	add	r8, r3
 8025bde:	dd07      	ble.n	8025bf0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8025be0:	e9db 4e02 	ldrd	r4, lr, [fp, #8]
 8025be4:	3e01      	subs	r6, #1
 8025be6:	ea4f 4329 	mov.w	r3, r9, asr #16
 8025bea:	ea4f 4128 	mov.w	r1, r8, asr #16
 8025bee:	e7b7      	b.n	8025b60 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8025bf0:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 8025bf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025bf8:	3301      	adds	r3, #1
 8025bfa:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8025bfe:	e6bc      	b.n	802597a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025c00:	3a01      	subs	r2, #1
 8025c02:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8025c06:	9208      	str	r2, [sp, #32]
 8025c08:	4616      	mov	r6, r2
 8025c0a:	e7a4      	b.n	8025b56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8025c0c:	fa0f f58e 	sxth.w	r5, lr
 8025c10:	b224      	sxth	r4, r4
 8025c12:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8025c16:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8025c1a:	e9cd 4500 	strd	r4, r5, [sp]
 8025c1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025c22:	4639      	mov	r1, r7
 8025c24:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025c26:	f7ff fd69 	bl	80256fc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025c2a:	e7d2      	b.n	8025bd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8025c2c:	2a00      	cmp	r2, #0
 8025c2e:	d14f      	bne.n	8025cd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8025c30:	4675      	mov	r5, lr
 8025c32:	e9cd ee0f 	strd	lr, lr, [sp, #60]	@ 0x3c
 8025c36:	b283      	uxth	r3, r0
 8025c38:	b292      	uxth	r2, r2
 8025c3a:	fb03 f002 	mul.w	r0, r3, r2
 8025c3e:	782c      	ldrb	r4, [r5, #0]
 8025c40:	011b      	lsls	r3, r3, #4
 8025c42:	940e      	str	r4, [sp, #56]	@ 0x38
 8025c44:	78ac      	ldrb	r4, [r5, #2]
 8025c46:	1a19      	subs	r1, r3, r0
 8025c48:	940d      	str	r4, [sp, #52]	@ 0x34
 8025c4a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025c4c:	b289      	uxth	r1, r1
 8025c4e:	fb01 f404 	mul.w	r4, r1, r4
 8025c52:	940e      	str	r4, [sp, #56]	@ 0x38
 8025c54:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025c56:	786d      	ldrb	r5, [r5, #1]
 8025c58:	fb01 f404 	mul.w	r4, r1, r4
 8025c5c:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8025c60:	fb01 f105 	mul.w	r1, r1, r5
 8025c64:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025c66:	b292      	uxth	r2, r2
 8025c68:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8025c6c:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8025c70:	940d      	str	r4, [sp, #52]	@ 0x34
 8025c72:	1a9b      	subs	r3, r3, r2
 8025c74:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025c76:	b29b      	uxth	r3, r3
 8025c78:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8025c7c:	fb03 4c0c 	mla	ip, r3, ip, r4
 8025c80:	f89e e001 	ldrb.w	lr, [lr, #1]
 8025c84:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025c86:	fb03 4505 	mla	r5, r3, r5, r4
 8025c8a:	fb03 130e 	mla	r3, r3, lr, r1
 8025c8e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025c90:	78a1      	ldrb	r1, [r4, #2]
 8025c92:	f894 e000 	ldrb.w	lr, [r4]
 8025c96:	7864      	ldrb	r4, [r4, #1]
 8025c98:	fb02 5501 	mla	r5, r2, r1, r5
 8025c9c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025ca0:	fb02 3104 	mla	r1, r2, r4, r3
 8025ca4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025ca6:	7822      	ldrb	r2, [r4, #0]
 8025ca8:	78a3      	ldrb	r3, [r4, #2]
 8025caa:	7864      	ldrb	r4, [r4, #1]
 8025cac:	fb00 cc02 	mla	ip, r0, r2, ip
 8025cb0:	fb00 5303 	mla	r3, r0, r3, r5
 8025cb4:	fb00 1204 	mla	r2, r0, r4, r1
 8025cb8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025cbc:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8025cc0:	0952      	lsrs	r2, r2, #5
 8025cc2:	ea43 030c 	orr.w	r3, r3, ip
 8025cc6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025cca:	4313      	orrs	r3, r2
 8025ccc:	803b      	strh	r3, [r7, #0]
 8025cce:	e780      	b.n	8025bd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8025cd0:	5d1c      	ldrb	r4, [r3, r4]
 8025cd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025cd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025cd8:	18e3      	adds	r3, r4, r3
 8025cda:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 8025cde:	9310      	str	r3, [sp, #64]	@ 0x40
 8025ce0:	4675      	mov	r5, lr
 8025ce2:	e7a8      	b.n	8025c36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8025ce4:	e9cd ee0f 	strd	lr, lr, [sp, #60]	@ 0x3c
 8025ce8:	e7a5      	b.n	8025c36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8025cea:	f43f ae46 	beq.w	802597a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025cee:	1e6e      	subs	r6, r5, #1
 8025cf0:	f8cd b01c 	str.w	fp, [sp, #28]
 8025cf4:	e682      	b.n	80259fc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8025cf6:	bf00      	nop

08025cf8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cfc:	b08b      	sub	sp, #44	@ 0x2c
 8025cfe:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	@ 0x50
 8025d02:	f8b1 c000 	ldrh.w	ip, [r1]
 8025d06:	e9dd 6416 	ldrd	r6, r4, [sp, #88]	@ 0x58
 8025d0a:	fb04 6507 	mla	r5, r4, r7, r6
 8025d0e:	9107      	str	r1, [sp, #28]
 8025d10:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8025d14:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025d18:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8025d1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025d20:	469a      	mov	sl, r3
 8025d22:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8025d26:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025d2a:	9105      	str	r1, [sp, #20]
 8025d2c:	2c00      	cmp	r4, #0
 8025d2e:	fa5f f18c 	uxtb.w	r1, ip
 8025d32:	9004      	str	r0, [sp, #16]
 8025d34:	9106      	str	r1, [sp, #24]
 8025d36:	eb02 0e05 	add.w	lr, r2, r5
 8025d3a:	f104 0801 	add.w	r8, r4, #1
 8025d3e:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	@ 0x54
 8025d42:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8025d46:	f89d 0064 	ldrb.w	r0, [sp, #100]	@ 0x64
 8025d4a:	9308      	str	r3, [sp, #32]
 8025d4c:	db02      	blt.n	8025d54 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8025d4e:	45a1      	cmp	r9, r4
 8025d50:	f300 8119 	bgt.w	8025f86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28e>
 8025d54:	f04f 0c00 	mov.w	ip, #0
 8025d58:	4665      	mov	r5, ip
 8025d5a:	4662      	mov	r2, ip
 8025d5c:	4664      	mov	r4, ip
 8025d5e:	f1b8 0f00 	cmp.w	r8, #0
 8025d62:	db02      	blt.n	8025d6a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x72>
 8025d64:	45c1      	cmp	r9, r8
 8025d66:	f300 8127 	bgt.w	8025fb8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>
 8025d6a:	f04f 0e00 	mov.w	lr, #0
 8025d6e:	46f0      	mov	r8, lr
 8025d70:	4676      	mov	r6, lr
 8025d72:	46f1      	mov	r9, lr
 8025d74:	290f      	cmp	r1, #15
 8025d76:	f200 815e 	bhi.w	8026036 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8025d7a:	280f      	cmp	r0, #15
 8025d7c:	f200 815b 	bhi.w	8026036 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8025d80:	b280      	uxth	r0, r0
 8025d82:	b289      	uxth	r1, r1
 8025d84:	fb00 fa01 	mul.w	sl, r0, r1
 8025d88:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025d8c:	b280      	uxth	r0, r0
 8025d8e:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8025d92:	fb00 fb08 	mul.w	fp, r0, r8
 8025d96:	fb0a f70e 	mul.w	r7, sl, lr
 8025d9a:	9301      	str	r3, [sp, #4]
 8025d9c:	f009 13ff 	and.w	r3, r9, #16711935	@ 0xff00ff
 8025da0:	9302      	str	r3, [sp, #8]
 8025da2:	f409 437f 	and.w	r3, r9, #65280	@ 0xff00
 8025da6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025daa:	9303      	str	r3, [sp, #12]
 8025dac:	0109      	lsls	r1, r1, #4
 8025dae:	eba1 090a 	sub.w	r9, r1, sl
 8025db2:	fa1f f989 	uxth.w	r9, r9
 8025db6:	fb09 f30c 	mul.w	r3, r9, ip
 8025dba:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8025dbe:	1a09      	subs	r1, r1, r0
 8025dc0:	b289      	uxth	r1, r1
 8025dc2:	fb01 3305 	mla	r3, r1, r5, r3
 8025dc6:	445b      	add	r3, fp
 8025dc8:	443b      	add	r3, r7
 8025dca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025dce:	2dff      	cmp	r5, #255	@ 0xff
 8025dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8025dd2:	f004 13ff 	and.w	r3, r4, #16711935	@ 0xff00ff
 8025dd6:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025dda:	d019      	beq.n	8025e10 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x118>
 8025ddc:	fb03 f305 	mul.w	r3, r3, r5
 8025de0:	fb04 f405 	mul.w	r4, r4, r5
 8025de4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8025de8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8025dec:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8025df0:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 8025df4:	445b      	add	r3, fp
 8025df6:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8025dfa:	0a1b      	lsrs	r3, r3, #8
 8025dfc:	0a24      	lsrs	r4, r4, #8
 8025dfe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025e02:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025e06:	431c      	orrs	r4, r3
 8025e08:	f004 13ff 	and.w	r3, r4, #16711935	@ 0xff00ff
 8025e0c:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8025e10:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025e14:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8025e18:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025e1c:	d018      	beq.n	8025e50 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x158>
 8025e1e:	fb05 f50c 	mul.w	r5, r5, ip
 8025e22:	fb02 f20c 	mul.w	r2, r2, ip
 8025e26:	0a2f      	lsrs	r7, r5, #8
 8025e28:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025e2c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8025e30:	f502 7c80 	add.w	ip, r2, #256	@ 0x100
 8025e34:	443d      	add	r5, r7
 8025e36:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025e3a:	0a2d      	lsrs	r5, r5, #8
 8025e3c:	0a12      	lsrs	r2, r2, #8
 8025e3e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8025e42:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025e46:	432a      	orrs	r2, r5
 8025e48:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8025e4c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8025e50:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025e54:	d01f      	beq.n	8025e96 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x19e>
 8025e56:	9f02      	ldr	r7, [sp, #8]
 8025e58:	fb07 fb08 	mul.w	fp, r7, r8
 8025e5c:	9f03      	ldr	r7, [sp, #12]
 8025e5e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025e62:	fb07 f808 	mul.w	r8, r7, r8
 8025e66:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e6a:	f508 7780 	add.w	r7, r8, #256	@ 0x100
 8025e6e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025e72:	eb07 2718 	add.w	r7, r7, r8, lsr #8
 8025e76:	44dc      	add	ip, fp
 8025e78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e7c:	0a3f      	lsrs	r7, r7, #8
 8025e7e:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025e82:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025e86:	ea4c 0807 	orr.w	r8, ip, r7
 8025e8a:	f008 17ff 	and.w	r7, r8, #16711935	@ 0xff00ff
 8025e8e:	9702      	str	r7, [sp, #8]
 8025e90:	f408 477f 	and.w	r7, r8, #65280	@ 0xff00
 8025e94:	9703      	str	r7, [sp, #12]
 8025e96:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025e9a:	d01d      	beq.n	8025ed8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1e0>
 8025e9c:	9f01      	ldr	r7, [sp, #4]
 8025e9e:	fb06 f60e 	mul.w	r6, r6, lr
 8025ea2:	fb07 f80e 	mul.w	r8, r7, lr
 8025ea6:	ea4f 2c18 	mov.w	ip, r8, lsr #8
 8025eaa:	f506 7780 	add.w	r7, r6, #256	@ 0x100
 8025eae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025eb2:	f108 1801 	add.w	r8, r8, #65537	@ 0x10001
 8025eb6:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8025eba:	44e0      	add	r8, ip
 8025ebc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025ec0:	0a36      	lsrs	r6, r6, #8
 8025ec2:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8025ec6:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025eca:	ea48 0606 	orr.w	r6, r8, r6
 8025ece:	f006 17ff 	and.w	r7, r6, #16711935	@ 0xff00ff
 8025ed2:	9701      	str	r7, [sp, #4]
 8025ed4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025ed8:	f8bd e020 	ldrh.w	lr, [sp, #32]
 8025edc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025ede:	fb05 f509 	mul.w	r5, r5, r9
 8025ee2:	fb07 f70e 	mul.w	r7, r7, lr
 8025ee6:	f107 0c01 	add.w	ip, r7, #1
 8025eea:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8025eee:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 8025ef2:	fb02 f209 	mul.w	r2, r2, r9
 8025ef6:	fb03 5501 	mla	r5, r3, r1, r5
 8025efa:	fb04 2201 	mla	r2, r4, r1, r2
 8025efe:	9b02      	ldr	r3, [sp, #8]
 8025f00:	fa5f fc8c 	uxtb.w	ip, ip
 8025f04:	fb03 5500 	mla	r5, r3, r0, r5
 8025f08:	9b03      	ldr	r3, [sp, #12]
 8025f0a:	fb03 2200 	mla	r2, r3, r0, r2
 8025f0e:	9b01      	ldr	r3, [sp, #4]
 8025f10:	fb03 550a 	mla	r5, r3, sl, r5
 8025f14:	fb06 2a0a 	mla	sl, r6, sl, r2
 8025f18:	9a05      	ldr	r2, [sp, #20]
 8025f1a:	9b04      	ldr	r3, [sp, #16]
 8025f1c:	fb12 f10c 	smulbb	r1, r2, ip
 8025f20:	9a06      	ldr	r2, [sp, #24]
 8025f22:	0a2e      	lsrs	r6, r5, #8
 8025f24:	fb13 f30c 	smulbb	r3, r3, ip
 8025f28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f2c:	fb12 fc0c 	smulbb	ip, r2, ip
 8025f30:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025f34:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8025f38:	ea46 060a 	orr.w	r6, r6, sl
 8025f3c:	0c30      	lsrs	r0, r6, #16
 8025f3e:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8025f42:	b2f6      	uxtb	r6, r6
 8025f44:	fb00 330e 	mla	r3, r0, lr, r3
 8025f48:	fb02 120e 	mla	r2, r2, lr, r1
 8025f4c:	fb06 c60e 	mla	r6, r6, lr, ip
 8025f50:	b298      	uxth	r0, r3
 8025f52:	b291      	uxth	r1, r2
 8025f54:	b2b6      	uxth	r6, r6
 8025f56:	1c43      	adds	r3, r0, #1
 8025f58:	f106 0e01 	add.w	lr, r6, #1
 8025f5c:	1c4a      	adds	r2, r1, #1
 8025f5e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025f62:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8025f66:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8025f6a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8025f6e:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8025f72:	0952      	lsrs	r2, r2, #5
 8025f74:	4333      	orrs	r3, r6
 8025f76:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025f7a:	4313      	orrs	r3, r2
 8025f7c:	9a07      	ldr	r2, [sp, #28]
 8025f7e:	8013      	strh	r3, [r2, #0]
 8025f80:	b00b      	add	sp, #44	@ 0x2c
 8025f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f86:	2e00      	cmp	r6, #0
 8025f88:	db01      	blt.n	8025f8e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x296>
 8025f8a:	42b7      	cmp	r7, r6
 8025f8c:	dc3c      	bgt.n	8026008 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x310>
 8025f8e:	2500      	movs	r5, #0
 8025f90:	462c      	mov	r4, r5
 8025f92:	1c72      	adds	r2, r6, #1
 8025f94:	d427      	bmi.n	8025fe6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8025f96:	4297      	cmp	r7, r2
 8025f98:	dd25      	ble.n	8025fe6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8025f9a:	b131      	cbz	r1, 8025faa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2b2>
 8025f9c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025fa0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8025fa4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8025fa8:	e6d9      	b.n	8025d5e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8025faa:	f1b8 0f00 	cmp.w	r8, #0
 8025fae:	db3b      	blt.n	8026028 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8025fb0:	45c1      	cmp	r9, r8
 8025fb2:	dd39      	ble.n	8026028 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8025fb4:	468c      	mov	ip, r1
 8025fb6:	460a      	mov	r2, r1
 8025fb8:	b1c8      	cbz	r0, 8025fee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2f6>
 8025fba:	2e00      	cmp	r6, #0
 8025fbc:	db2d      	blt.n	802601a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8025fbe:	42b7      	cmp	r7, r6
 8025fc0:	dd2b      	ble.n	802601a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8025fc2:	f81e 8007 	ldrb.w	r8, [lr, r7]
 8025fc6:	f85a 9028 	ldr.w	r9, [sl, r8, lsl #2]
 8025fca:	ea4f 6819 	mov.w	r8, r9, lsr #24
 8025fce:	3601      	adds	r6, #1
 8025fd0:	d41f      	bmi.n	8026012 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8025fd2:	42b7      	cmp	r7, r6
 8025fd4:	dd1d      	ble.n	8026012 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8025fd6:	b321      	cbz	r1, 8026022 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x32a>
 8025fd8:	4477      	add	r7, lr
 8025fda:	787e      	ldrb	r6, [r7, #1]
 8025fdc:	f85a 6026 	ldr.w	r6, [sl, r6, lsl #2]
 8025fe0:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8025fe4:	e6c6      	b.n	8025d74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 8025fe6:	f04f 0c00 	mov.w	ip, #0
 8025fea:	4662      	mov	r2, ip
 8025fec:	e6b7      	b.n	8025d5e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8025fee:	290f      	cmp	r1, #15
 8025ff0:	d821      	bhi.n	8026036 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8025ff2:	b289      	uxth	r1, r1
 8025ff4:	4682      	mov	sl, r0
 8025ff6:	4607      	mov	r7, r0
 8025ff8:	4683      	mov	fp, r0
 8025ffa:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8025ffe:	4606      	mov	r6, r0
 8026000:	9001      	str	r0, [sp, #4]
 8026002:	4686      	mov	lr, r0
 8026004:	4680      	mov	r8, r0
 8026006:	e6d1      	b.n	8025dac <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb4>
 8026008:	5d52      	ldrb	r2, [r2, r5]
 802600a:	f85a 4022 	ldr.w	r4, [sl, r2, lsl #2]
 802600e:	0e25      	lsrs	r5, r4, #24
 8026010:	e7bf      	b.n	8025f92 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x29a>
 8026012:	f04f 0e00 	mov.w	lr, #0
 8026016:	4676      	mov	r6, lr
 8026018:	e6ac      	b.n	8025d74 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 802601a:	f04f 0800 	mov.w	r8, #0
 802601e:	46c1      	mov	r9, r8
 8026020:	e7d5      	b.n	8025fce <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d6>
 8026022:	460e      	mov	r6, r1
 8026024:	468e      	mov	lr, r1
 8026026:	e6a8      	b.n	8025d7a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8026028:	460a      	mov	r2, r1
 802602a:	460e      	mov	r6, r1
 802602c:	4689      	mov	r9, r1
 802602e:	468e      	mov	lr, r1
 8026030:	4688      	mov	r8, r1
 8026032:	468c      	mov	ip, r1
 8026034:	e6a1      	b.n	8025d7a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8026036:	4b03      	ldr	r3, [pc, #12]	@ (8026044 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x34c>)
 8026038:	4a03      	ldr	r2, [pc, #12]	@ (8026048 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x350>)
 802603a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 802603e:	4803      	ldr	r0, [pc, #12]	@ (802604c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x354>)
 8026040:	f004 fed4 	bl	802adec <__assert_func>
 8026044:	0802e264 	.word	0x0802e264
 8026048:	0802e8e0 	.word	0x0802e8e0
 802604c:	0802e3ec 	.word	0x0802e3ec

08026050 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026054:	ed2d 8b08 	vpush	{d8-d11}
 8026058:	b0a9      	sub	sp, #164	@ 0xa4
 802605a:	9c3f      	ldr	r4, [sp, #252]	@ 0xfc
 802605c:	9022      	str	r0, [sp, #136]	@ 0x88
 802605e:	9115      	str	r1, [sp, #84]	@ 0x54
 8026060:	6860      	ldr	r0, [r4, #4]
 8026062:	9940      	ldr	r1, [sp, #256]	@ 0x100
 8026064:	9219      	str	r2, [sp, #100]	@ 0x64
 8026066:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8026068:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	@ 0xec
 802606c:	fb00 1202 	mla	r2, r0, r2, r1
 8026070:	6820      	ldr	r0, [r4, #0]
 8026072:	46d1      	mov	r9, sl
 8026074:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8026078:	46da      	mov	sl, fp
 802607a:	eeb0 aa40 	vmov.f32	s20, s0
 802607e:	eef0 9a60 	vmov.f32	s19, s1
 8026082:	eeb0 9a41 	vmov.f32	s18, s2
 8026086:	eef0 8a62 	vmov.f32	s17, s5
 802608a:	eeb0 8a43 	vmov.f32	s16, s6
 802608e:	eef0 ba44 	vmov.f32	s23, s8
 8026092:	eeb0 ba64 	vmov.f32	s22, s9
 8026096:	eef0 aa45 	vmov.f32	s21, s10
 802609a:	4693      	mov	fp, r2
 802609c:	9942      	ldr	r1, [sp, #264]	@ 0x108
 802609e:	9d42      	ldr	r5, [sp, #264]	@ 0x108
 80260a0:	6849      	ldr	r1, [r1, #4]
 80260a2:	f89d 410c 	ldrb.w	r4, [sp, #268]	@ 0x10c
 80260a6:	3104      	adds	r1, #4
 80260a8:	682d      	ldr	r5, [r5, #0]
 80260aa:	910e      	str	r1, [sp, #56]	@ 0x38
 80260ac:	b2a1      	uxth	r1, r4
 80260ae:	9423      	str	r4, [sp, #140]	@ 0x8c
 80260b0:	9511      	str	r5, [sp, #68]	@ 0x44
 80260b2:	9112      	str	r1, [sp, #72]	@ 0x48
 80260b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80260b6:	2a00      	cmp	r2, #0
 80260b8:	dc02      	bgt.n	80260c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80260ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80260bc:	2a00      	cmp	r2, #0
 80260be:	dd65      	ble.n	802618c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80260c0:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 80260c2:	2b00      	cmp	r3, #0
 80260c4:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 80260c8:	b234      	sxth	r4, r6
 80260ca:	fa0f f78c 	sxth.w	r7, ip
 80260ce:	f340 8396 	ble.w	80267fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ae>
 80260d2:	1e65      	subs	r5, r4, #1
 80260d4:	f107 3eff 	add.w	lr, r7, #4294967295
 80260d8:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 80260dc:	e9dd c83d 	ldrd	ip, r8, [sp, #244]	@ 0xf4
 80260e0:	ea5f 422a 	movs.w	r2, sl, asr #16
 80260e4:	ea4f 4129 	mov.w	r1, r9, asr #16
 80260e8:	d405      	bmi.n	80260f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80260ea:	42aa      	cmp	r2, r5
 80260ec:	da03      	bge.n	80260f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80260ee:	2900      	cmp	r1, #0
 80260f0:	db01      	blt.n	80260f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80260f2:	4571      	cmp	r1, lr
 80260f4:	db4f      	blt.n	8026196 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80260f6:	1c50      	adds	r0, r2, #1
 80260f8:	d406      	bmi.n	8026108 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80260fa:	42a0      	cmp	r0, r4
 80260fc:	dc04      	bgt.n	8026108 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80260fe:	1c48      	adds	r0, r1, #1
 8026100:	d402      	bmi.n	8026108 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026102:	42b8      	cmp	r0, r7
 8026104:	f340 834f 	ble.w	80267a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8026108:	3b01      	subs	r3, #1
 802610a:	44e2      	add	sl, ip
 802610c:	44c1      	add	r9, r8
 802610e:	f10b 0b02 	add.w	fp, fp, #2
 8026112:	d1e5      	bne.n	80260e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026114:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026116:	2b00      	cmp	r3, #0
 8026118:	dd38      	ble.n	802618c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802611a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802611e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026122:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026126:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802612a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802612e:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026132:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026136:	ee76 6a68 	vsub.f32	s13, s12, s17
 802613a:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802613e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026142:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026146:	ee16 2a90 	vmov	r2, s13
 802614a:	3b01      	subs	r3, #1
 802614c:	9315      	str	r3, [sp, #84]	@ 0x54
 802614e:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8026150:	fb92 f3f3 	sdiv	r3, r2, r3
 8026154:	ee17 2a10 	vmov	r2, s14
 8026158:	eeb0 7a48 	vmov.f32	s14, s16
 802615c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026160:	ee17 9a10 	vmov	r9, s14
 8026164:	eeb0 7a68 	vmov.f32	s14, s17
 8026168:	933d      	str	r3, [sp, #244]	@ 0xf4
 802616a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802616c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026170:	fb92 f3f3 	sdiv	r3, r2, r3
 8026174:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8026176:	933e      	str	r3, [sp, #248]	@ 0xf8
 8026178:	ee17 aa10 	vmov	sl, s14
 802617c:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802617e:	eeb0 8a67 	vmov.f32	s16, s15
 8026182:	eef0 8a46 	vmov.f32	s17, s12
 8026186:	bf08      	it	eq
 8026188:	4613      	moveq	r3, r2
 802618a:	e793      	b.n	80260b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802618c:	b029      	add	sp, #164	@ 0xa4
 802618e:	ecbd 8b08 	vpop	{d8-d11}
 8026192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026196:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 802619a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 802619e:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 80261a0:	1e59      	subs	r1, r3, #1
 80261a2:	fb00 a201 	mla	r2, r0, r1, sl
 80261a6:	1412      	asrs	r2, r2, #16
 80261a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80261aa:	f100 8161 	bmi.w	8026470 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80261ae:	42aa      	cmp	r2, r5
 80261b0:	f280 815e 	bge.w	8026470 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80261b4:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 80261b6:	fb02 9201 	mla	r2, r2, r1, r9
 80261ba:	1412      	asrs	r2, r2, #16
 80261bc:	f100 8158 	bmi.w	8026470 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80261c0:	3f01      	subs	r7, #1
 80261c2:	42ba      	cmp	r2, r7
 80261c4:	f280 8154 	bge.w	8026470 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80261c8:	2b00      	cmp	r3, #0
 80261ca:	dda3      	ble.n	8026114 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80261cc:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80261d0:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 80261d4:	46d0      	mov	r8, sl
 80261d6:	4621      	mov	r1, r4
 80261d8:	e129      	b.n	802642e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80261da:	f893 c001 	ldrb.w	ip, [r3, #1]
 80261de:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 80261e2:	9513      	str	r5, [sp, #76]	@ 0x4c
 80261e4:	0e2d      	lsrs	r5, r5, #24
 80261e6:	950a      	str	r5, [sp, #40]	@ 0x28
 80261e8:	b162      	cbz	r2, 8026204 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80261ea:	185d      	adds	r5, r3, r1
 80261ec:	786d      	ldrb	r5, [r5, #1]
 80261ee:	5c5b      	ldrb	r3, [r3, r1]
 80261f0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80261f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80261f8:	9116      	str	r1, [sp, #88]	@ 0x58
 80261fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80261fc:	0e09      	lsrs	r1, r1, #24
 80261fe:	0e1b      	lsrs	r3, r3, #24
 8026200:	910c      	str	r1, [sp, #48]	@ 0x30
 8026202:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026204:	b2a4      	uxth	r4, r4
 8026206:	b292      	uxth	r2, r2
 8026208:	fb04 f502 	mul.w	r5, r4, r2
 802620c:	0124      	lsls	r4, r4, #4
 802620e:	1b66      	subs	r6, r4, r5
 8026210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026212:	b2b6      	uxth	r6, r6
 8026214:	fb06 f103 	mul.w	r1, r6, r3
 8026218:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802621c:	b292      	uxth	r2, r2
 802621e:	f5c4 7380 	rsb	r3, r4, #256	@ 0x100
 8026222:	1a9b      	subs	r3, r3, r2
 8026224:	b29b      	uxth	r3, r3
 8026226:	fb03 1100 	mla	r1, r3, r0, r1
 802622a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802622c:	fb02 1104 	mla	r1, r2, r4, r1
 8026230:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026232:	fb05 1104 	mla	r1, r5, r4, r1
 8026236:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802623a:	2900      	cmp	r1, #0
 802623c:	f000 80ea 	beq.w	8026414 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8026240:	f007 14ff 	and.w	r4, r7, #16711935	@ 0xff00ff
 8026244:	28ff      	cmp	r0, #255	@ 0xff
 8026246:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802624a:	940f      	str	r4, [sp, #60]	@ 0x3c
 802624c:	970d      	str	r7, [sp, #52]	@ 0x34
 802624e:	d01c      	beq.n	802628a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8026250:	fb04 f400 	mul.w	r4, r4, r0
 8026254:	4627      	mov	r7, r4
 8026256:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026258:	fb04 fe00 	mul.w	lr, r4, r0
 802625c:	0a3c      	lsrs	r4, r7, #8
 802625e:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026262:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026266:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 802626a:	4427      	add	r7, r4
 802626c:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8026270:	0a3f      	lsrs	r7, r7, #8
 8026272:	0a00      	lsrs	r0, r0, #8
 8026274:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026278:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802627c:	4307      	orrs	r7, r0
 802627e:	f007 10ff 	and.w	r0, r7, #16711935	@ 0xff00ff
 8026282:	900f      	str	r0, [sp, #60]	@ 0x3c
 8026284:	f407 407f 	and.w	r0, r7, #65280	@ 0xff00
 8026288:	900d      	str	r0, [sp, #52]	@ 0x34
 802628a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802628c:	f000 1cff 	and.w	ip, r0, #16711935	@ 0xff00ff
 8026290:	f400 4e7f 	and.w	lr, r0, #65280	@ 0xff00
 8026294:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026296:	28ff      	cmp	r0, #255	@ 0xff
 8026298:	d01c      	beq.n	80262d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802629a:	fb0c fc00 	mul.w	ip, ip, r0
 802629e:	fb0e fe00 	mul.w	lr, lr, r0
 80262a2:	ea4f 241c 	mov.w	r4, ip, lsr #8
 80262a6:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80262aa:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80262ae:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 80262b2:	44a4      	add	ip, r4
 80262b4:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 80262b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80262c0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80262c4:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80262c8:	ea4c 0e0e 	orr.w	lr, ip, lr
 80262cc:	f00e 1cff 	and.w	ip, lr, #16711935	@ 0xff00ff
 80262d0:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80262d4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80262d6:	f000 17ff 	and.w	r7, r0, #16711935	@ 0xff00ff
 80262da:	f400 4a7f 	and.w	sl, r0, #65280	@ 0xff00
 80262de:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80262e0:	28ff      	cmp	r0, #255	@ 0xff
 80262e2:	d01a      	beq.n	802631a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80262e4:	fb07 f700 	mul.w	r7, r7, r0
 80262e8:	fb0a fa00 	mul.w	sl, sl, r0
 80262ec:	0a3c      	lsrs	r4, r7, #8
 80262ee:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80262f2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80262f6:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80262fa:	4427      	add	r7, r4
 80262fc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026300:	0a3f      	lsrs	r7, r7, #8
 8026302:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026306:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802630a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802630e:	ea47 0a0a 	orr.w	sl, r7, sl
 8026312:	f00a 17ff 	and.w	r7, sl, #16711935	@ 0xff00ff
 8026316:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802631a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802631c:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 8026320:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026324:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026326:	2cff      	cmp	r4, #255	@ 0xff
 8026328:	d01d      	beq.n	8026366 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 802632a:	fb00 f004 	mul.w	r0, r0, r4
 802632e:	fb0b fb04 	mul.w	fp, fp, r4
 8026332:	0a04      	lsrs	r4, r0, #8
 8026334:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026338:	9418      	str	r4, [sp, #96]	@ 0x60
 802633a:	f50b 7480 	add.w	r4, fp, #256	@ 0x100
 802633e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8026340:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8026342:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8026346:	4420      	add	r0, r4
 8026348:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802634a:	0a00      	lsrs	r0, r0, #8
 802634c:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8026350:	0a24      	lsrs	r4, r4, #8
 8026352:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026356:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802635a:	ea40 0b0b 	orr.w	fp, r0, fp
 802635e:	f00b 10ff 	and.w	r0, fp, #16711935	@ 0xff00ff
 8026362:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026366:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026368:	fb0c fc06 	mul.w	ip, ip, r6
 802636c:	fb01 f104 	mul.w	r1, r1, r4
 8026370:	1c4c      	adds	r4, r1, #1
 8026372:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8026376:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802637a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802637c:	fb0e f606 	mul.w	r6, lr, r6
 8026380:	fb04 cc03 	mla	ip, r4, r3, ip
 8026384:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026386:	fb07 cc02 	mla	ip, r7, r2, ip
 802638a:	fb04 6603 	mla	r6, r4, r3, r6
 802638e:	fb0a 6602 	mla	r6, sl, r2, r6
 8026392:	fb00 cc05 	mla	ip, r0, r5, ip
 8026396:	fb0b 6605 	mla	r6, fp, r5, r6
 802639a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802639e:	0a36      	lsrs	r6, r6, #8
 80263a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80263a4:	f406 437f 	and.w	r3, r6, #65280	@ 0xff00
 80263a8:	ea4c 0303 	orr.w	r3, ip, r3
 80263ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80263ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80263b0:	0c1f      	lsrs	r7, r3, #16
 80263b2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80263b6:	b2db      	uxtb	r3, r3
 80263b8:	8805      	ldrh	r5, [r0, #0]
 80263ba:	fb13 f302 	smulbb	r3, r3, r2
 80263be:	fb17 f702 	smulbb	r7, r7, r2
 80263c2:	fb16 f602 	smulbb	r6, r6, r2
 80263c6:	1228      	asrs	r0, r5, #8
 80263c8:	10ea      	asrs	r2, r5, #3
 80263ca:	00ed      	lsls	r5, r5, #3
 80263cc:	b2c9      	uxtb	r1, r1
 80263ce:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80263d2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80263d6:	b2ed      	uxtb	r5, r5
 80263d8:	fb00 7001 	mla	r0, r0, r1, r7
 80263dc:	fb02 6201 	mla	r2, r2, r1, r6
 80263e0:	fb05 3101 	mla	r1, r5, r1, r3
 80263e4:	b280      	uxth	r0, r0
 80263e6:	b292      	uxth	r2, r2
 80263e8:	b289      	uxth	r1, r1
 80263ea:	1c43      	adds	r3, r0, #1
 80263ec:	1c4c      	adds	r4, r1, #1
 80263ee:	f102 0c01 	add.w	ip, r2, #1
 80263f2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80263f6:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80263fa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80263fe:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8026402:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8026406:	0952      	lsrs	r2, r2, #5
 8026408:	4308      	orrs	r0, r1
 802640a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802640e:	4302      	orrs	r2, r0
 8026410:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026412:	8002      	strh	r2, [r0, #0]
 8026414:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8026416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026418:	4490      	add	r8, r2
 802641a:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 802641c:	3302      	adds	r3, #2
 802641e:	4491      	add	r9, r2
 8026420:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026422:	9309      	str	r3, [sp, #36]	@ 0x24
 8026424:	4293      	cmp	r3, r2
 8026426:	d021      	beq.n	802646c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8026428:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802642a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802642e:	ea4f 4228 	mov.w	r2, r8, asr #16
 8026432:	ea4f 4329 	mov.w	r3, r9, asr #16
 8026436:	fb01 2303 	mla	r3, r1, r3, r2
 802643a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802643c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 802643e:	5cc2      	ldrb	r2, [r0, r3]
 8026440:	f3c8 3403 	ubfx	r4, r8, #12, #4
 8026444:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8026448:	4403      	add	r3, r0
 802644a:	f3c9 3203 	ubfx	r2, r9, #12, #4
 802644e:	0e38      	lsrs	r0, r7, #24
 8026450:	2c00      	cmp	r4, #0
 8026452:	f47f aec2 	bne.w	80261da <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026456:	2a00      	cmp	r2, #0
 8026458:	f43f aed4 	beq.w	8026204 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802645c:	5c5b      	ldrb	r3, [r3, r1]
 802645e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026460:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8026464:	9314      	str	r3, [sp, #80]	@ 0x50
 8026466:	0e1b      	lsrs	r3, r3, #24
 8026468:	930b      	str	r3, [sp, #44]	@ 0x2c
 802646a:	e6cb      	b.n	8026204 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802646c:	4693      	mov	fp, r2
 802646e:	e651      	b.n	8026114 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8026470:	2b00      	cmp	r3, #0
 8026472:	f77f ae4f 	ble.w	8026114 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8026476:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 802647a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802647e:	ea4f 4129 	mov.w	r1, r9, asr #16
 8026482:	2a00      	cmp	r2, #0
 8026484:	465f      	mov	r7, fp
 8026486:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 802648a:	9c42      	ldr	r4, [sp, #264]	@ 0x108
 802648c:	e9dd 5b3d 	ldrd	r5, fp, [sp, #244]	@ 0xf4
 8026490:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8026494:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8026498:	f2c0 815c 	blt.w	8026754 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802649c:	1e73      	subs	r3, r6, #1
 802649e:	429a      	cmp	r2, r3
 80264a0:	f280 8158 	bge.w	8026754 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80264a4:	2900      	cmp	r1, #0
 80264a6:	f2c0 8155 	blt.w	8026754 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80264aa:	f10c 33ff 	add.w	r3, ip, #4294967295
 80264ae:	4299      	cmp	r1, r3
 80264b0:	f280 8150 	bge.w	8026754 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80264b4:	b233      	sxth	r3, r6
 80264b6:	fb01 2203 	mla	r2, r1, r3, r2
 80264ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80264bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80264be:	5c8b      	ldrb	r3, [r1, r2]
 80264c0:	440a      	add	r2, r1
 80264c2:	4616      	mov	r6, r2
 80264c4:	9210      	str	r2, [sp, #64]	@ 0x40
 80264c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80264c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80264cc:	0e0b      	lsrs	r3, r1, #24
 80264ce:	2800      	cmp	r0, #0
 80264d0:	f000 816f 	beq.w	80267b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x762>
 80264d4:	f896 c001 	ldrb.w	ip, [r6, #1]
 80264d8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80264dc:	9224      	str	r2, [sp, #144]	@ 0x90
 80264de:	0e12      	lsrs	r2, r2, #24
 80264e0:	921a      	str	r2, [sp, #104]	@ 0x68
 80264e2:	f1be 0f00 	cmp.w	lr, #0
 80264e6:	f040 8172 	bne.w	80267ce <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80264ea:	b280      	uxth	r0, r0
 80264ec:	fa1f fc8e 	uxth.w	ip, lr
 80264f0:	fb00 f20c 	mul.w	r2, r0, ip
 80264f4:	0106      	lsls	r6, r0, #4
 80264f6:	1ab0      	subs	r0, r6, r2
 80264f8:	b280      	uxth	r0, r0
 80264fa:	4686      	mov	lr, r0
 80264fc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80264fe:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8026500:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 8026504:	fb0e f000 	mul.w	r0, lr, r0
 8026508:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 802650c:	fa1f fe8c 	uxth.w	lr, ip
 8026510:	eba6 060e 	sub.w	r6, r6, lr
 8026514:	b2b6      	uxth	r6, r6
 8026516:	fb06 0003 	mla	r0, r6, r3, r0
 802651a:	9610      	str	r6, [sp, #64]	@ 0x40
 802651c:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 802651e:	fb0e 0006 	mla	r0, lr, r6, r0
 8026522:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8026524:	fb02 0006 	mla	r0, r2, r6, r0
 8026528:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802652c:	9017      	str	r0, [sp, #92]	@ 0x5c
 802652e:	2800      	cmp	r0, #0
 8026530:	f000 80fa 	beq.w	8026728 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8026534:	f001 10ff 	and.w	r0, r1, #16711935	@ 0xff00ff
 8026538:	2bff      	cmp	r3, #255	@ 0xff
 802653a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802653e:	9018      	str	r0, [sp, #96]	@ 0x60
 8026540:	911d      	str	r1, [sp, #116]	@ 0x74
 8026542:	d01b      	beq.n	802657c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52c>
 8026544:	fb01 f103 	mul.w	r1, r1, r3
 8026548:	fb00 f003 	mul.w	r0, r0, r3
 802654c:	460b      	mov	r3, r1
 802654e:	0a01      	lsrs	r1, r0, #8
 8026550:	f100 1601 	add.w	r6, r0, #65537	@ 0x10001
 8026554:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026558:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 802655c:	4431      	add	r1, r6
 802655e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026562:	0a09      	lsrs	r1, r1, #8
 8026564:	0a1b      	lsrs	r3, r3, #8
 8026566:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802656a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802656e:	430b      	orrs	r3, r1
 8026570:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 8026574:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026578:	9118      	str	r1, [sp, #96]	@ 0x60
 802657a:	931d      	str	r3, [sp, #116]	@ 0x74
 802657c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802657e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026580:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 8026584:	2eff      	cmp	r6, #255	@ 0xff
 8026586:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802658a:	931e      	str	r3, [sp, #120]	@ 0x78
 802658c:	911f      	str	r1, [sp, #124]	@ 0x7c
 802658e:	d01b      	beq.n	80265c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x578>
 8026590:	fb01 f106 	mul.w	r1, r1, r6
 8026594:	fb03 f306 	mul.w	r3, r3, r6
 8026598:	460e      	mov	r6, r1
 802659a:	0a19      	lsrs	r1, r3, #8
 802659c:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 80265a0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80265a4:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 80265a8:	4401      	add	r1, r0
 80265aa:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80265ae:	0a09      	lsrs	r1, r1, #8
 80265b0:	0a1b      	lsrs	r3, r3, #8
 80265b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80265b6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80265ba:	4319      	orrs	r1, r3
 80265bc:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 80265c0:	931e      	str	r3, [sp, #120]	@ 0x78
 80265c2:	f401 437f 	and.w	r3, r1, #65280	@ 0xff00
 80265c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80265c8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80265ca:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 80265ce:	f403 4c7f 	and.w	ip, r3, #65280	@ 0xff00
 80265d2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80265d4:	9120      	str	r1, [sp, #128]	@ 0x80
 80265d6:	2bff      	cmp	r3, #255	@ 0xff
 80265d8:	d01c      	beq.n	8026614 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80265da:	fb01 f103 	mul.w	r1, r1, r3
 80265de:	4608      	mov	r0, r1
 80265e0:	fb0c fc03 	mul.w	ip, ip, r3
 80265e4:	0a09      	lsrs	r1, r1, #8
 80265e6:	f50c 7380 	add.w	r3, ip, #256	@ 0x100
 80265ea:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80265ee:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 80265f2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80265f6:	4408      	add	r0, r1
 80265f8:	0a00      	lsrs	r0, r0, #8
 80265fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265fe:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026602:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026606:	ea40 0c0c 	orr.w	ip, r0, ip
 802660a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802660e:	9320      	str	r3, [sp, #128]	@ 0x80
 8026610:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026614:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8026616:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802661a:	f401 467f 	and.w	r6, r1, #65280	@ 0xff00
 802661e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8026620:	9321      	str	r3, [sp, #132]	@ 0x84
 8026622:	29ff      	cmp	r1, #255	@ 0xff
 8026624:	d019      	beq.n	802665a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8026626:	fb03 f301 	mul.w	r3, r3, r1
 802662a:	fb06 f601 	mul.w	r6, r6, r1
 802662e:	0a19      	lsrs	r1, r3, #8
 8026630:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026634:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8026638:	f506 7080 	add.w	r0, r6, #256	@ 0x100
 802663c:	4419      	add	r1, r3
 802663e:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8026642:	0a09      	lsrs	r1, r1, #8
 8026644:	0a36      	lsrs	r6, r6, #8
 8026646:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802664a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802664e:	430e      	orrs	r6, r1
 8026650:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8026654:	9321      	str	r3, [sp, #132]	@ 0x84
 8026656:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802665a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802665c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802665e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026660:	fb00 f001 	mul.w	r0, r0, r1
 8026664:	4601      	mov	r1, r0
 8026666:	3001      	adds	r0, #1
 8026668:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802666c:	ea6f 2011 	mvn.w	r0, r1, lsr #8
 8026670:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8026672:	9025      	str	r0, [sp, #148]	@ 0x94
 8026674:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8026676:	fb00 f001 	mul.w	r0, r0, r1
 802667a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802667c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802667e:	fb00 f001 	mul.w	r0, r0, r1
 8026682:	9017      	str	r0, [sp, #92]	@ 0x5c
 8026684:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8026686:	4601      	mov	r1, r0
 8026688:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802668a:	fb01 0003 	mla	r0, r1, r3, r0
 802668e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8026690:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8026692:	4601      	mov	r1, r0
 8026694:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8026696:	fb01 0103 	mla	r1, r1, r3, r0
 802669a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802669c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802669e:	fb0c 110e 	mla	r1, ip, lr, r1
 80266a2:	fb03 000e 	mla	r0, r3, lr, r0
 80266a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80266a8:	f89d e094 	ldrb.w	lr, [sp, #148]	@ 0x94
 80266ac:	fb03 0002 	mla	r0, r3, r2, r0
 80266b0:	fb06 1302 	mla	r3, r6, r2, r1
 80266b4:	0a02      	lsrs	r2, r0, #8
 80266b6:	0a1b      	lsrs	r3, r3, #8
 80266b8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80266bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80266c0:	4313      	orrs	r3, r2
 80266c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80266c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80266c8:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80266cc:	b2db      	uxtb	r3, r3
 80266ce:	8838      	ldrh	r0, [r7, #0]
 80266d0:	fb16 f602 	smulbb	r6, r6, r2
 80266d4:	fb1c fc02 	smulbb	ip, ip, r2
 80266d8:	fb13 f302 	smulbb	r3, r3, r2
 80266dc:	1201      	asrs	r1, r0, #8
 80266de:	10c2      	asrs	r2, r0, #3
 80266e0:	00c0      	lsls	r0, r0, #3
 80266e2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80266e6:	b2c0      	uxtb	r0, r0
 80266e8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80266ec:	fb01 cc0e 	mla	ip, r1, lr, ip
 80266f0:	fb02 620e 	mla	r2, r2, lr, r6
 80266f4:	fb00 330e 	mla	r3, r0, lr, r3
 80266f8:	b296      	uxth	r6, r2
 80266fa:	b29b      	uxth	r3, r3
 80266fc:	fa1f fc8c 	uxth.w	ip, ip
 8026700:	1c58      	adds	r0, r3, #1
 8026702:	f10c 0201 	add.w	r2, ip, #1
 8026706:	1c71      	adds	r1, r6, #1
 8026708:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 802670c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026710:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8026714:	f402 4378 	and.w	r3, r2, #63488	@ 0xf800
 8026718:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802671c:	094a      	lsrs	r2, r1, #5
 802671e:	4303      	orrs	r3, r0
 8026720:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026724:	4313      	orrs	r3, r2
 8026726:	803b      	strh	r3, [r7, #0]
 8026728:	f1b8 0f00 	cmp.w	r8, #0
 802672c:	f107 0702 	add.w	r7, r7, #2
 8026730:	44aa      	add	sl, r5
 8026732:	44d9      	add	r9, fp
 8026734:	dd2e      	ble.n	8026794 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8026736:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 802673a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802673e:	2a00      	cmp	r2, #0
 8026740:	f108 38ff 	add.w	r8, r8, #4294967295
 8026744:	ea4f 4129 	mov.w	r1, r9, asr #16
 8026748:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802674c:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8026750:	f6bf aea4 	bge.w	802649c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8026754:	1c53      	adds	r3, r2, #1
 8026756:	d4e7      	bmi.n	8026728 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8026758:	42b3      	cmp	r3, r6
 802675a:	dce5      	bgt.n	8026728 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 802675c:	1c4b      	adds	r3, r1, #1
 802675e:	d4e3      	bmi.n	8026728 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8026760:	4563      	cmp	r3, ip
 8026762:	dce1      	bgt.n	8026728 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8026764:	fa0f f38c 	sxth.w	r3, ip
 8026768:	b236      	sxth	r6, r6
 802676a:	e9cd 6300 	strd	r6, r3, [sp]
 802676e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026770:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8026774:	e9cd e305 	strd	lr, r3, [sp, #20]
 8026778:	9202      	str	r2, [sp, #8]
 802677a:	4639      	mov	r1, r7
 802677c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802677e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026780:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8026782:	f7ff fab9 	bl	8025cf8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8026786:	f1b8 0f00 	cmp.w	r8, #0
 802678a:	f107 0702 	add.w	r7, r7, #2
 802678e:	44aa      	add	sl, r5
 8026790:	44d9      	add	r9, fp
 8026792:	dcd0      	bgt.n	8026736 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e6>
 8026794:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026796:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802679a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802679e:	3301      	adds	r3, #1
 80267a0:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80267a4:	e4b6      	b.n	8026114 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80267a6:	3b01      	subs	r3, #1
 80267a8:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 80267ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80267ae:	4698      	mov	r8, r3
 80267b0:	e667      	b.n	8026482 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 80267b2:	f1be 0f00 	cmp.w	lr, #0
 80267b6:	f43f ae98 	beq.w	80264ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80267ba:	4632      	mov	r2, r6
 80267bc:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80267be:	5d92      	ldrb	r2, [r2, r6]
 80267c0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80267c2:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80267c6:	9226      	str	r2, [sp, #152]	@ 0x98
 80267c8:	0e12      	lsrs	r2, r2, #24
 80267ca:	921b      	str	r2, [sp, #108]	@ 0x6c
 80267cc:	e68d      	b.n	80264ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80267ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80267d0:	eb06 0c02 	add.w	ip, r6, r2
 80267d4:	4632      	mov	r2, r6
 80267d6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80267d8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80267dc:	5d92      	ldrb	r2, [r2, r6]
 80267de:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80267e0:	9210      	str	r2, [sp, #64]	@ 0x40
 80267e2:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 80267e6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80267e8:	9227      	str	r2, [sp, #156]	@ 0x9c
 80267ea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80267ec:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80267f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80267f2:	9626      	str	r6, [sp, #152]	@ 0x98
 80267f4:	0e12      	lsrs	r2, r2, #24
 80267f6:	921c      	str	r2, [sp, #112]	@ 0x70
 80267f8:	0e32      	lsrs	r2, r6, #24
 80267fa:	921b      	str	r2, [sp, #108]	@ 0x6c
 80267fc:	e675      	b.n	80264ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80267fe:	f43f ac89 	beq.w	8026114 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8026802:	1e65      	subs	r5, r4, #1
 8026804:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8026808:	e4c9      	b.n	802619e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802680a:	bf00      	nop

0802680c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026810:	b089      	sub	sp, #36	@ 0x24
 8026812:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	@ 0x48
 8026816:	880f      	ldrh	r7, [r1, #0]
 8026818:	e9dd 5014 	ldrd	r5, r0, [sp, #80]	@ 0x50
 802681c:	fb00 5408 	mla	r4, r0, r8, r5
 8026820:	9106      	str	r1, [sp, #24]
 8026822:	10f9      	asrs	r1, r7, #3
 8026824:	123e      	asrs	r6, r7, #8
 8026826:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802682a:	00ff      	lsls	r7, r7, #3
 802682c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8026830:	9104      	str	r1, [sp, #16]
 8026832:	2800      	cmp	r0, #0
 8026834:	b2f9      	uxtb	r1, r7
 8026836:	9105      	str	r1, [sp, #20]
 8026838:	9603      	str	r6, [sp, #12]
 802683a:	eb02 0704 	add.w	r7, r2, r4
 802683e:	f100 0c01 	add.w	ip, r0, #1
 8026842:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	@ 0x4c
 8026846:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 802684a:	f89d 105c 	ldrb.w	r1, [sp, #92]	@ 0x5c
 802684e:	db02      	blt.n	8026856 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x4a>
 8026850:	4582      	cmp	sl, r0
 8026852:	f300 8113 	bgt.w	8026a7c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8026856:	2600      	movs	r6, #0
 8026858:	46b1      	mov	r9, r6
 802685a:	4630      	mov	r0, r6
 802685c:	4634      	mov	r4, r6
 802685e:	f1bc 0f00 	cmp.w	ip, #0
 8026862:	db02      	blt.n	802686a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5e>
 8026864:	45e2      	cmp	sl, ip
 8026866:	f300 8123 	bgt.w	8026ab0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>
 802686a:	2700      	movs	r7, #0
 802686c:	46bc      	mov	ip, r7
 802686e:	463d      	mov	r5, r7
 8026870:	9702      	str	r7, [sp, #8]
 8026872:	f1be 0f0f 	cmp.w	lr, #15
 8026876:	f200 8160 	bhi.w	8026b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 802687a:	290f      	cmp	r1, #15
 802687c:	f200 815d 	bhi.w	8026b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8026880:	b289      	uxth	r1, r1
 8026882:	fa1f f38e 	uxth.w	r3, lr
 8026886:	fb01 f803 	mul.w	r8, r1, r3
 802688a:	f005 12ff 	and.w	r2, r5, #16711935	@ 0xff00ff
 802688e:	9200      	str	r2, [sp, #0]
 8026890:	9a02      	ldr	r2, [sp, #8]
 8026892:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8026896:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802689a:	b289      	uxth	r1, r1
 802689c:	9201      	str	r2, [sp, #4]
 802689e:	fb01 fa0c 	mul.w	sl, r1, ip
 80268a2:	9a02      	ldr	r2, [sp, #8]
 80268a4:	fb08 fb07 	mul.w	fp, r8, r7
 80268a8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80268ac:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80268b0:	9202      	str	r2, [sp, #8]
 80268b2:	011b      	lsls	r3, r3, #4
 80268b4:	eba3 0e08 	sub.w	lr, r3, r8
 80268b8:	fa1f fe8e 	uxth.w	lr, lr
 80268bc:	fb0e f206 	mul.w	r2, lr, r6
 80268c0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80268c4:	1a5b      	subs	r3, r3, r1
 80268c6:	b29b      	uxth	r3, r3
 80268c8:	fb03 2209 	mla	r2, r3, r9, r2
 80268cc:	4452      	add	r2, sl
 80268ce:	445a      	add	r2, fp
 80268d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80268d4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80268d8:	9207      	str	r2, [sp, #28]
 80268da:	f004 12ff 	and.w	r2, r4, #16711935	@ 0xff00ff
 80268de:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80268e2:	d019      	beq.n	8026918 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x10c>
 80268e4:	fb02 f209 	mul.w	r2, r2, r9
 80268e8:	fb04 f409 	mul.w	r4, r4, r9
 80268ec:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80268f0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80268f4:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 80268f8:	f504 7a80 	add.w	sl, r4, #256	@ 0x100
 80268fc:	445a      	add	r2, fp
 80268fe:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8026902:	0a12      	lsrs	r2, r2, #8
 8026904:	0a24      	lsrs	r4, r4, #8
 8026906:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802690a:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802690e:	4314      	orrs	r4, r2
 8026910:	f004 12ff 	and.w	r2, r4, #16711935	@ 0xff00ff
 8026914:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026918:	2eff      	cmp	r6, #255	@ 0xff
 802691a:	f000 1aff 	and.w	sl, r0, #16711935	@ 0xff00ff
 802691e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026922:	d01b      	beq.n	802695c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8026924:	fb0a fa06 	mul.w	sl, sl, r6
 8026928:	fb00 f006 	mul.w	r0, r0, r6
 802692c:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8026930:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026934:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026938:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 802693c:	44da      	add	sl, fp
 802693e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8026942:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026946:	0a00      	lsrs	r0, r0, #8
 8026948:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 802694c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026950:	ea4a 0000 	orr.w	r0, sl, r0
 8026954:	f000 1aff 	and.w	sl, r0, #16711935	@ 0xff00ff
 8026958:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802695c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026960:	d020      	beq.n	80269a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x198>
 8026962:	9e01      	ldr	r6, [sp, #4]
 8026964:	fb06 fb0c 	mul.w	fp, r6, ip
 8026968:	9e02      	ldr	r6, [sp, #8]
 802696a:	ea4f 291b 	mov.w	r9, fp, lsr #8
 802696e:	fb06 fc0c 	mul.w	ip, r6, ip
 8026972:	f009 19ff 	and.w	r9, r9, #16711935	@ 0xff00ff
 8026976:	f50c 7680 	add.w	r6, ip, #256	@ 0x100
 802697a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802697e:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8026982:	44cb      	add	fp, r9
 8026984:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8026988:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802698c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026990:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026994:	ea4b 0c0c 	orr.w	ip, fp, ip
 8026998:	f00c 16ff 	and.w	r6, ip, #16711935	@ 0xff00ff
 802699c:	9601      	str	r6, [sp, #4]
 802699e:	f40c 467f 	and.w	r6, ip, #65280	@ 0xff00
 80269a2:	9602      	str	r6, [sp, #8]
 80269a4:	2fff      	cmp	r7, #255	@ 0xff
 80269a6:	d01d      	beq.n	80269e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d8>
 80269a8:	9e00      	ldr	r6, [sp, #0]
 80269aa:	fb05 f507 	mul.w	r5, r5, r7
 80269ae:	fb06 fb07 	mul.w	fp, r6, r7
 80269b2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80269b6:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80269ba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80269be:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80269c2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80269c6:	44e3      	add	fp, ip
 80269c8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80269cc:	0a2d      	lsrs	r5, r5, #8
 80269ce:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80269d2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80269d6:	ea4b 0505 	orr.w	r5, fp, r5
 80269da:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80269de:	9600      	str	r6, [sp, #0]
 80269e0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80269e4:	9e07      	ldr	r6, [sp, #28]
 80269e6:	fb0a fa0e 	mul.w	sl, sl, lr
 80269ea:	43f7      	mvns	r7, r6
 80269ec:	fb00 f00e 	mul.w	r0, r0, lr
 80269f0:	fb02 aa03 	mla	sl, r2, r3, sl
 80269f4:	fb04 0003 	mla	r0, r4, r3, r0
 80269f8:	9b01      	ldr	r3, [sp, #4]
 80269fa:	b2ff      	uxtb	r7, r7
 80269fc:	fb03 aa01 	mla	sl, r3, r1, sl
 8026a00:	9b02      	ldr	r3, [sp, #8]
 8026a02:	fb03 0c01 	mla	ip, r3, r1, r0
 8026a06:	9b00      	ldr	r3, [sp, #0]
 8026a08:	9803      	ldr	r0, [sp, #12]
 8026a0a:	fb03 aa08 	mla	sl, r3, r8, sl
 8026a0e:	9b05      	ldr	r3, [sp, #20]
 8026a10:	9904      	ldr	r1, [sp, #16]
 8026a12:	fb03 f307 	mul.w	r3, r3, r7
 8026a16:	fb00 f007 	mul.w	r0, r0, r7
 8026a1a:	fb01 f107 	mul.w	r1, r1, r7
 8026a1e:	461f      	mov	r7, r3
 8026a20:	fb05 c808 	mla	r8, r5, r8, ip
 8026a24:	ea4f 251a 	mov.w	r5, sl, lsr #8
 8026a28:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026a2c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8026a30:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026a34:	ea45 0508 	orr.w	r5, r5, r8
 8026a38:	f100 0c01 	add.w	ip, r0, #1
 8026a3c:	1c4e      	adds	r6, r1, #1
 8026a3e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8026a42:	0c2c      	lsrs	r4, r5, #16
 8026a44:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8026a48:	1c78      	adds	r0, r7, #1
 8026a4a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8026a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8026b48 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x33c>)
 8026a50:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8026a54:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8026a58:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8026a5c:	b2ed      	uxtb	r5, r5
 8026a5e:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8026a62:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8026a66:	00d2      	lsls	r2, r2, #3
 8026a68:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8026a6c:	f402 63fc 	and.w	r3, r2, #2016	@ 0x7e0
 8026a70:	431d      	orrs	r5, r3
 8026a72:	9b06      	ldr	r3, [sp, #24]
 8026a74:	801d      	strh	r5, [r3, #0]
 8026a76:	b009      	add	sp, #36	@ 0x24
 8026a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a7c:	2d00      	cmp	r5, #0
 8026a7e:	db01      	blt.n	8026a84 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x278>
 8026a80:	45a8      	cmp	r8, r5
 8026a82:	dc41      	bgt.n	8026b08 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2fc>
 8026a84:	f04f 0900 	mov.w	r9, #0
 8026a88:	464c      	mov	r4, r9
 8026a8a:	1c6a      	adds	r2, r5, #1
 8026a8c:	d42a      	bmi.n	8026ae4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8026a8e:	4590      	cmp	r8, r2
 8026a90:	dd28      	ble.n	8026ae4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 8026a92:	f1be 0f00 	cmp.w	lr, #0
 8026a96:	d004      	beq.n	8026aa2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x296>
 8026a98:	787a      	ldrb	r2, [r7, #1]
 8026a9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026a9e:	0e06      	lsrs	r6, r0, #24
 8026aa0:	e6dd      	b.n	802685e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8026aa2:	f1bc 0f00 	cmp.w	ip, #0
 8026aa6:	db40      	blt.n	8026b2a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8026aa8:	45e2      	cmp	sl, ip
 8026aaa:	dd3e      	ble.n	8026b2a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8026aac:	4676      	mov	r6, lr
 8026aae:	4670      	mov	r0, lr
 8026ab0:	b1d9      	cbz	r1, 8026aea <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2de>
 8026ab2:	2d00      	cmp	r5, #0
 8026ab4:	db31      	blt.n	8026b1a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8026ab6:	45a8      	cmp	r8, r5
 8026ab8:	dd2f      	ble.n	8026b1a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8026aba:	f817 2008 	ldrb.w	r2, [r7, r8]
 8026abe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026ac2:	9202      	str	r2, [sp, #8]
 8026ac4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8026ac8:	3501      	adds	r5, #1
 8026aca:	d423      	bmi.n	8026b14 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8026acc:	45a8      	cmp	r8, r5
 8026ace:	dd21      	ble.n	8026b14 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8026ad0:	f1be 0f00 	cmp.w	lr, #0
 8026ad4:	d026      	beq.n	8026b24 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x318>
 8026ad6:	44b8      	add	r8, r7
 8026ad8:	f898 5001 	ldrb.w	r5, [r8, #1]
 8026adc:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8026ae0:	0e2f      	lsrs	r7, r5, #24
 8026ae2:	e6c6      	b.n	8026872 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8026ae4:	2600      	movs	r6, #0
 8026ae6:	4630      	mov	r0, r6
 8026ae8:	e6b9      	b.n	802685e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 8026aea:	f1be 0f0f 	cmp.w	lr, #15
 8026aee:	d824      	bhi.n	8026b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8026af0:	fa1f f38e 	uxth.w	r3, lr
 8026af4:	4688      	mov	r8, r1
 8026af6:	468b      	mov	fp, r1
 8026af8:	468a      	mov	sl, r1
 8026afa:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8026afe:	460d      	mov	r5, r1
 8026b00:	9100      	str	r1, [sp, #0]
 8026b02:	460f      	mov	r7, r1
 8026b04:	468c      	mov	ip, r1
 8026b06:	e6d4      	b.n	80268b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8026b08:	5d12      	ldrb	r2, [r2, r4]
 8026b0a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8026b0e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026b12:	e7ba      	b.n	8026a8a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27e>
 8026b14:	2700      	movs	r7, #0
 8026b16:	463d      	mov	r5, r7
 8026b18:	e6ab      	b.n	8026872 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8026b1a:	f04f 0c00 	mov.w	ip, #0
 8026b1e:	f8cd c008 	str.w	ip, [sp, #8]
 8026b22:	e7d1      	b.n	8026ac8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2bc>
 8026b24:	4675      	mov	r5, lr
 8026b26:	4677      	mov	r7, lr
 8026b28:	e6a7      	b.n	802687a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8026b2a:	4670      	mov	r0, lr
 8026b2c:	4675      	mov	r5, lr
 8026b2e:	f8cd e008 	str.w	lr, [sp, #8]
 8026b32:	4677      	mov	r7, lr
 8026b34:	46f4      	mov	ip, lr
 8026b36:	4676      	mov	r6, lr
 8026b38:	e69f      	b.n	802687a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8026b3a:	4b04      	ldr	r3, [pc, #16]	@ (8026b4c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x340>)
 8026b3c:	4a04      	ldr	r2, [pc, #16]	@ (8026b50 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x344>)
 8026b3e:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8026b42:	4804      	ldr	r0, [pc, #16]	@ (8026b54 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x348>)
 8026b44:	f004 f952 	bl	802adec <__assert_func>
 8026b48:	fffff800 	.word	0xfffff800
 8026b4c:	0802e264 	.word	0x0802e264
 8026b50:	0802e8e0 	.word	0x0802e8e0
 8026b54:	0802e3ec 	.word	0x0802e3ec

08026b58 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b5c:	ed2d 8b08 	vpush	{d8-d11}
 8026b60:	b0a3      	sub	sp, #140	@ 0x8c
 8026b62:	901e      	str	r0, [sp, #120]	@ 0x78
 8026b64:	9111      	str	r1, [sp, #68]	@ 0x44
 8026b66:	9215      	str	r2, [sp, #84]	@ 0x54
 8026b68:	e9dd 4139 	ldrd	r4, r1, [sp, #228]	@ 0xe4
 8026b6c:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8026b6e:	6860      	ldr	r0, [r4, #4]
 8026b70:	e9dd 8b35 	ldrd	r8, fp, [sp, #212]	@ 0xd4
 8026b74:	fb00 1202 	mla	r2, r0, r2, r1
 8026b78:	6820      	ldr	r0, [r4, #0]
 8026b7a:	46c1      	mov	r9, r8
 8026b7c:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8026b80:	46d8      	mov	r8, fp
 8026b82:	eeb0 aa40 	vmov.f32	s20, s0
 8026b86:	eef0 9a60 	vmov.f32	s19, s1
 8026b8a:	eeb0 9a41 	vmov.f32	s18, s2
 8026b8e:	eef0 8a62 	vmov.f32	s17, s5
 8026b92:	eeb0 8a43 	vmov.f32	s16, s6
 8026b96:	eef0 ba44 	vmov.f32	s23, s8
 8026b9a:	eeb0 ba64 	vmov.f32	s22, s9
 8026b9e:	eef0 aa45 	vmov.f32	s21, s10
 8026ba2:	46d3      	mov	fp, sl
 8026ba4:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 8026ba6:	9c3c      	ldr	r4, [sp, #240]	@ 0xf0
 8026ba8:	6849      	ldr	r1, [r1, #4]
 8026baa:	6824      	ldr	r4, [r4, #0]
 8026bac:	1d0a      	adds	r2, r1, #4
 8026bae:	940e      	str	r4, [sp, #56]	@ 0x38
 8026bb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026bb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026bb4:	2a00      	cmp	r2, #0
 8026bb6:	dc02      	bgt.n	8026bbe <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026bb8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8026bba:	2a00      	cmp	r2, #0
 8026bbc:	dd65      	ble.n	8026c8a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8026bbe:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 8026bc0:	2b00      	cmp	r3, #0
 8026bc2:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8026bc6:	b234      	sxth	r4, r6
 8026bc8:	fa0f f78c 	sxth.w	r7, ip
 8026bcc:	f340 836d 	ble.w	80272aa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8026bd0:	1e65      	subs	r5, r4, #1
 8026bd2:	f107 3eff 	add.w	lr, r7, #4294967295
 8026bd6:	f8cd c01c 	str.w	ip, [sp, #28]
 8026bda:	e9dd ca37 	ldrd	ip, sl, [sp, #220]	@ 0xdc
 8026bde:	ea5f 4229 	movs.w	r2, r9, asr #16
 8026be2:	ea4f 4128 	mov.w	r1, r8, asr #16
 8026be6:	d405      	bmi.n	8026bf4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026be8:	42aa      	cmp	r2, r5
 8026bea:	da03      	bge.n	8026bf4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026bec:	2900      	cmp	r1, #0
 8026bee:	db01      	blt.n	8026bf4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026bf0:	4571      	cmp	r1, lr
 8026bf2:	db4f      	blt.n	8026c94 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8026bf4:	1c50      	adds	r0, r2, #1
 8026bf6:	d406      	bmi.n	8026c06 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026bf8:	42a0      	cmp	r0, r4
 8026bfa:	dc04      	bgt.n	8026c06 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026bfc:	1c48      	adds	r0, r1, #1
 8026bfe:	d402      	bmi.n	8026c06 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8026c00:	42b8      	cmp	r0, r7
 8026c02:	f340 832f 	ble.w	8027264 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8026c06:	3b01      	subs	r3, #1
 8026c08:	44e1      	add	r9, ip
 8026c0a:	44d0      	add	r8, sl
 8026c0c:	f10b 0b02 	add.w	fp, fp, #2
 8026c10:	d1e5      	bne.n	8026bde <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026c12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026c14:	2b00      	cmp	r3, #0
 8026c16:	dd38      	ble.n	8026c8a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8026c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026c1c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026c20:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026c24:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026c28:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026c2c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026c30:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026c34:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026c38:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8026c3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026c40:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026c44:	ee16 2a90 	vmov	r2, s13
 8026c48:	3b01      	subs	r3, #1
 8026c4a:	9311      	str	r3, [sp, #68]	@ 0x44
 8026c4c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8026c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c52:	ee17 2a10 	vmov	r2, s14
 8026c56:	eeb0 7a48 	vmov.f32	s14, s16
 8026c5a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026c5e:	ee17 8a10 	vmov	r8, s14
 8026c62:	eeb0 7a68 	vmov.f32	s14, s17
 8026c66:	9337      	str	r3, [sp, #220]	@ 0xdc
 8026c68:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8026c6a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c72:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8026c74:	9338      	str	r3, [sp, #224]	@ 0xe0
 8026c76:	ee17 9a10 	vmov	r9, s14
 8026c7a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8026c7c:	eeb0 8a67 	vmov.f32	s16, s15
 8026c80:	eef0 8a46 	vmov.f32	s17, s12
 8026c84:	bf08      	it	eq
 8026c86:	4613      	moveq	r3, r2
 8026c88:	e793      	b.n	8026bb2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8026c8a:	b023      	add	sp, #140	@ 0x8c
 8026c8c:	ecbd 8b08 	vpop	{d8-d11}
 8026c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c94:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8026c98:	f8cd b01c 	str.w	fp, [sp, #28]
 8026c9c:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8026c9e:	1e59      	subs	r1, r3, #1
 8026ca0:	fb00 9201 	mla	r2, r0, r1, r9
 8026ca4:	1412      	asrs	r2, r2, #16
 8026ca6:	910c      	str	r1, [sp, #48]	@ 0x30
 8026ca8:	f100 815e 	bmi.w	8026f68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8026cac:	42aa      	cmp	r2, r5
 8026cae:	f280 815b 	bge.w	8026f68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8026cb2:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8026cb4:	fb02 8201 	mla	r2, r2, r1, r8
 8026cb8:	1412      	asrs	r2, r2, #16
 8026cba:	f100 8155 	bmi.w	8026f68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8026cbe:	3f01      	subs	r7, #1
 8026cc0:	42ba      	cmp	r2, r7
 8026cc2:	f280 8151 	bge.w	8026f68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8026cc6:	2b00      	cmp	r3, #0
 8026cc8:	dda3      	ble.n	8026c12 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026cca:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8026cce:	4621      	mov	r1, r4
 8026cd0:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8026cd4:	f8cd 90d4 	str.w	r9, [sp, #212]	@ 0xd4
 8026cd8:	464a      	mov	r2, r9
 8026cda:	464c      	mov	r4, r9
 8026cdc:	e122      	b.n	8026f24 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8026cde:	f893 c001 	ldrb.w	ip, [r3, #1]
 8026ce2:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8026ce6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8026ce8:	0e2d      	lsrs	r5, r5, #24
 8026cea:	9508      	str	r5, [sp, #32]
 8026cec:	b162      	cbz	r2, 8026d08 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8026cee:	185d      	adds	r5, r3, r1
 8026cf0:	786d      	ldrb	r5, [r5, #1]
 8026cf2:	5c5b      	ldrb	r3, [r3, r1]
 8026cf4:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8026cf8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026cfc:	9112      	str	r1, [sp, #72]	@ 0x48
 8026cfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8026d00:	0e09      	lsrs	r1, r1, #24
 8026d02:	0e1b      	lsrs	r3, r3, #24
 8026d04:	910a      	str	r1, [sp, #40]	@ 0x28
 8026d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d08:	b2a4      	uxth	r4, r4
 8026d0a:	b292      	uxth	r2, r2
 8026d0c:	fb04 f502 	mul.w	r5, r4, r2
 8026d10:	0124      	lsls	r4, r4, #4
 8026d12:	1b66      	subs	r6, r4, r5
 8026d14:	9b08      	ldr	r3, [sp, #32]
 8026d16:	b2b6      	uxth	r6, r6
 8026d18:	fb06 f103 	mul.w	r1, r6, r3
 8026d1c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8026d20:	b292      	uxth	r2, r2
 8026d22:	f5c4 7380 	rsb	r3, r4, #256	@ 0x100
 8026d26:	1a9b      	subs	r3, r3, r2
 8026d28:	b29b      	uxth	r3, r3
 8026d2a:	fb03 1100 	mla	r1, r3, r0, r1
 8026d2e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026d30:	fb02 1104 	mla	r1, r2, r4, r1
 8026d34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026d36:	fb05 1104 	mla	r1, r5, r4, r1
 8026d3a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026d3e:	2900      	cmp	r1, #0
 8026d40:	f000 80df 	beq.w	8026f02 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026d44:	f007 14ff 	and.w	r4, r7, #16711935	@ 0xff00ff
 8026d48:	28ff      	cmp	r0, #255	@ 0xff
 8026d4a:	940c      	str	r4, [sp, #48]	@ 0x30
 8026d4c:	f407 497f 	and.w	r9, r7, #65280	@ 0xff00
 8026d50:	d01a      	beq.n	8026d88 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8026d52:	fb04 f400 	mul.w	r4, r4, r0
 8026d56:	4627      	mov	r7, r4
 8026d58:	fb09 fc00 	mul.w	ip, r9, r0
 8026d5c:	0a24      	lsrs	r4, r4, #8
 8026d5e:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026d62:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026d66:	f50c 7080 	add.w	r0, ip, #256	@ 0x100
 8026d6a:	4427      	add	r7, r4
 8026d6c:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8026d70:	0a3f      	lsrs	r7, r7, #8
 8026d72:	0a00      	lsrs	r0, r0, #8
 8026d74:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026d78:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026d7c:	4307      	orrs	r7, r0
 8026d7e:	f007 10ff 	and.w	r0, r7, #16711935	@ 0xff00ff
 8026d82:	900c      	str	r0, [sp, #48]	@ 0x30
 8026d84:	f407 497f 	and.w	r9, r7, #65280	@ 0xff00
 8026d88:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8026d8a:	f000 17ff 	and.w	r7, r0, #16711935	@ 0xff00ff
 8026d8e:	f400 4c7f 	and.w	ip, r0, #65280	@ 0xff00
 8026d92:	9808      	ldr	r0, [sp, #32]
 8026d94:	28ff      	cmp	r0, #255	@ 0xff
 8026d96:	d01a      	beq.n	8026dce <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8026d98:	fb07 f700 	mul.w	r7, r7, r0
 8026d9c:	fb0c fc00 	mul.w	ip, ip, r0
 8026da0:	0a3c      	lsrs	r4, r7, #8
 8026da2:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026da6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026daa:	f50c 7080 	add.w	r0, ip, #256	@ 0x100
 8026dae:	4427      	add	r7, r4
 8026db0:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8026db4:	0a3f      	lsrs	r7, r7, #8
 8026db6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026dba:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026dbe:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026dc2:	ea47 0c0c 	orr.w	ip, r7, ip
 8026dc6:	f00c 17ff 	and.w	r7, ip, #16711935	@ 0xff00ff
 8026dca:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026dce:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026dd0:	f000 1eff 	and.w	lr, r0, #16711935	@ 0xff00ff
 8026dd4:	f400 4a7f 	and.w	sl, r0, #65280	@ 0xff00
 8026dd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026dda:	28ff      	cmp	r0, #255	@ 0xff
 8026ddc:	d01c      	beq.n	8026e18 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8026dde:	fb0e fe00 	mul.w	lr, lr, r0
 8026de2:	fb0a fa00 	mul.w	sl, sl, r0
 8026de6:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8026dea:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026dee:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8026df2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8026df6:	44a6      	add	lr, r4
 8026df8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026dfc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026e00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e04:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026e08:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026e0c:	ea4e 0a0a 	orr.w	sl, lr, sl
 8026e10:	f00a 1eff 	and.w	lr, sl, #16711935	@ 0xff00ff
 8026e14:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026e18:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026e1a:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 8026e1e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026e22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026e24:	2cff      	cmp	r4, #255	@ 0xff
 8026e26:	d01d      	beq.n	8026e64 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8026e28:	fb00 f004 	mul.w	r0, r0, r4
 8026e2c:	fb0b fb04 	mul.w	fp, fp, r4
 8026e30:	0a04      	lsrs	r4, r0, #8
 8026e32:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8026e36:	9414      	str	r4, [sp, #80]	@ 0x50
 8026e38:	f50b 7480 	add.w	r4, fp, #256	@ 0x100
 8026e3c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8026e3e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026e40:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8026e44:	4420      	add	r0, r4
 8026e46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026e48:	0a00      	lsrs	r0, r0, #8
 8026e4a:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8026e4e:	0a24      	lsrs	r4, r4, #8
 8026e50:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026e54:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8026e58:	ea40 0b0b 	orr.w	fp, r0, fp
 8026e5c:	f00b 10ff 	and.w	r0, fp, #16711935	@ 0xff00ff
 8026e60:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8026e64:	43c9      	mvns	r1, r1
 8026e66:	fb07 f706 	mul.w	r7, r7, r6
 8026e6a:	fb0c f606 	mul.w	r6, ip, r6
 8026e6e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026e70:	fb09 6603 	mla	r6, r9, r3, r6
 8026e74:	fb04 7703 	mla	r7, r4, r3, r7
 8026e78:	9b07      	ldr	r3, [sp, #28]
 8026e7a:	fb0e 7702 	mla	r7, lr, r2, r7
 8026e7e:	fb0a 6602 	mla	r6, sl, r2, r6
 8026e82:	f8b3 e000 	ldrh.w	lr, [r3]
 8026e86:	b2c9      	uxtb	r1, r1
 8026e88:	ea4f 242e 	mov.w	r4, lr, asr #8
 8026e8c:	fb00 7005 	mla	r0, r0, r5, r7
 8026e90:	fb0b 6605 	mla	r6, fp, r5, r6
 8026e94:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8026e98:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8026e9c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026ea0:	fb04 f401 	mul.w	r4, r4, r1
 8026ea4:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8026ea8:	fa5f fe8e 	uxtb.w	lr, lr
 8026eac:	fb09 f901 	mul.w	r9, r9, r1
 8026eb0:	fb0e f101 	mul.w	r1, lr, r1
 8026eb4:	0a00      	lsrs	r0, r0, #8
 8026eb6:	0a36      	lsrs	r6, r6, #8
 8026eb8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026ebc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026ec0:	1c62      	adds	r2, r4, #1
 8026ec2:	ea40 0306 	orr.w	r3, r0, r6
 8026ec6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026eca:	f109 0001 	add.w	r0, r9, #1
 8026ece:	1c4a      	adds	r2, r1, #1
 8026ed0:	0c1e      	lsrs	r6, r3, #16
 8026ed2:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8026ed6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026eda:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026ede:	4a21      	ldr	r2, [pc, #132]	@ (8026f64 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40c>)
 8026ee0:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 8026ee4:	b2db      	uxtb	r3, r3
 8026ee6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026eea:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026eee:	ea02 2404 	and.w	r4, r2, r4, lsl #8
 8026ef2:	00c0      	lsls	r0, r0, #3
 8026ef4:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 8026ef8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026efc:	9b07      	ldr	r3, [sp, #28]
 8026efe:	4320      	orrs	r0, r4
 8026f00:	8018      	strh	r0, [r3, #0]
 8026f02:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8026f04:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8026f06:	9b07      	ldr	r3, [sp, #28]
 8026f08:	440a      	add	r2, r1
 8026f0a:	9235      	str	r2, [sp, #212]	@ 0xd4
 8026f0c:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8026f0e:	3302      	adds	r3, #2
 8026f10:	4490      	add	r8, r2
 8026f12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026f14:	9307      	str	r3, [sp, #28]
 8026f16:	4293      	cmp	r3, r2
 8026f18:	d022      	beq.n	8026f60 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8026f1a:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8026f1c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8026f1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026f22:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
 8026f24:	1412      	asrs	r2, r2, #16
 8026f26:	ea4f 4328 	mov.w	r3, r8, asr #16
 8026f2a:	fb01 2303 	mla	r3, r1, r3, r2
 8026f2e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8026f30:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8026f32:	5cc2      	ldrb	r2, [r0, r3]
 8026f34:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8026f38:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8026f3c:	4403      	add	r3, r0
 8026f3e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8026f42:	0e38      	lsrs	r0, r7, #24
 8026f44:	2c00      	cmp	r4, #0
 8026f46:	f47f aeca 	bne.w	8026cde <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8026f4a:	2a00      	cmp	r2, #0
 8026f4c:	f43f aedc 	beq.w	8026d08 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8026f50:	5c5b      	ldrb	r3, [r3, r1]
 8026f52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8026f58:	9310      	str	r3, [sp, #64]	@ 0x40
 8026f5a:	0e1b      	lsrs	r3, r3, #24
 8026f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8026f5e:	e6d3      	b.n	8026d08 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8026f60:	4693      	mov	fp, r2
 8026f62:	e656      	b.n	8026c12 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026f64:	fffff800 	.word	0xfffff800
 8026f68:	2b00      	cmp	r3, #0
 8026f6a:	f77f ae52 	ble.w	8026c12 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8026f6e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8026f72:	ea4f 4229 	mov.w	r2, r9, asr #16
 8026f76:	ea4f 4128 	mov.w	r1, r8, asr #16
 8026f7a:	2a00      	cmp	r2, #0
 8026f7c:	465f      	mov	r7, fp
 8026f7e:	f8cd b01c 	str.w	fp, [sp, #28]
 8026f82:	9c3c      	ldr	r4, [sp, #240]	@ 0xf0
 8026f84:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 8026f88:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8026f8c:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8026f90:	f2c0 8147 	blt.w	8027222 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8026f94:	1e73      	subs	r3, r6, #1
 8026f96:	429a      	cmp	r2, r3
 8026f98:	f280 8143 	bge.w	8027222 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8026f9c:	2900      	cmp	r1, #0
 8026f9e:	f2c0 8140 	blt.w	8027222 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8026fa2:	f10c 33ff 	add.w	r3, ip, #4294967295
 8026fa6:	4299      	cmp	r1, r3
 8026fa8:	f280 813b 	bge.w	8027222 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8026fac:	b236      	sxth	r6, r6
 8026fae:	fb01 2106 	mla	r1, r1, r6, r2
 8026fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026fb4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8026fb6:	5c53      	ldrb	r3, [r2, r1]
 8026fb8:	4411      	add	r1, r2
 8026fba:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8026fbe:	910d      	str	r1, [sp, #52]	@ 0x34
 8026fc0:	0e13      	lsrs	r3, r2, #24
 8026fc2:	2800      	cmp	r0, #0
 8026fc4:	f000 8154 	beq.w	8027270 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026fc8:	f891 c001 	ldrb.w	ip, [r1, #1]
 8026fcc:	9513      	str	r5, [sp, #76]	@ 0x4c
 8026fce:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
 8026fd2:	911f      	str	r1, [sp, #124]	@ 0x7c
 8026fd4:	0e09      	lsrs	r1, r1, #24
 8026fd6:	9116      	str	r1, [sp, #88]	@ 0x58
 8026fd8:	f1be 0f00 	cmp.w	lr, #0
 8026fdc:	f040 8153 	bne.w	8027286 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8026fe0:	b286      	uxth	r6, r0
 8026fe2:	fa1f fc8e 	uxth.w	ip, lr
 8026fe6:	fb06 f00c 	mul.w	r0, r6, ip
 8026fea:	0136      	lsls	r6, r6, #4
 8026fec:	1a31      	subs	r1, r6, r0
 8026fee:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8026ff0:	b289      	uxth	r1, r1
 8026ff2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8026ff6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8026ff8:	fb01 f105 	mul.w	r1, r1, r5
 8026ffc:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 8027000:	fa1f f58c 	uxth.w	r5, ip
 8027004:	1b76      	subs	r6, r6, r5
 8027006:	b2b6      	uxth	r6, r6
 8027008:	fb06 1c03 	mla	ip, r6, r3, r1
 802700c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802700e:	9514      	str	r5, [sp, #80]	@ 0x50
 8027010:	fb05 cc01 	mla	ip, r5, r1, ip
 8027014:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8027016:	9619      	str	r6, [sp, #100]	@ 0x64
 8027018:	fb00 cc01 	mla	ip, r0, r1, ip
 802701c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8027020:	f1bc 0f00 	cmp.w	ip, #0
 8027024:	f000 80e6 	beq.w	80271f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027028:	f002 11ff 	and.w	r1, r2, #16711935	@ 0xff00ff
 802702c:	2bff      	cmp	r3, #255	@ 0xff
 802702e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027032:	911a      	str	r1, [sp, #104]	@ 0x68
 8027034:	921b      	str	r2, [sp, #108]	@ 0x6c
 8027036:	d01b      	beq.n	8027070 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8027038:	fb02 f203 	mul.w	r2, r2, r3
 802703c:	fb01 f103 	mul.w	r1, r1, r3
 8027040:	4613      	mov	r3, r2
 8027042:	0a0a      	lsrs	r2, r1, #8
 8027044:	f101 1601 	add.w	r6, r1, #65537	@ 0x10001
 8027048:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802704c:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 8027050:	4432      	add	r2, r6
 8027052:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027056:	0a12      	lsrs	r2, r2, #8
 8027058:	0a1b      	lsrs	r3, r3, #8
 802705a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802705e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027062:	4313      	orrs	r3, r2
 8027064:	f003 12ff 	and.w	r2, r3, #16711935	@ 0xff00ff
 8027068:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802706c:	921a      	str	r2, [sp, #104]	@ 0x68
 802706e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8027070:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027072:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8027074:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 8027078:	2aff      	cmp	r2, #255	@ 0xff
 802707a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802707e:	931c      	str	r3, [sp, #112]	@ 0x70
 8027080:	d01b      	beq.n	80270ba <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8027082:	fb03 f302 	mul.w	r3, r3, r2
 8027086:	461e      	mov	r6, r3
 8027088:	fb01 f102 	mul.w	r1, r1, r2
 802708c:	0a0a      	lsrs	r2, r1, #8
 802708e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027092:	f101 1101 	add.w	r1, r1, #65537	@ 0x10001
 8027096:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 802709a:	440a      	add	r2, r1
 802709c:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80270a0:	0a12      	lsrs	r2, r2, #8
 80270a2:	0a1b      	lsrs	r3, r3, #8
 80270a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80270a8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80270ac:	ea42 0603 	orr.w	r6, r2, r3
 80270b0:	f406 437f 	and.w	r3, r6, #65280	@ 0xff00
 80270b4:	f006 11ff 	and.w	r1, r6, #16711935	@ 0xff00ff
 80270b8:	931c      	str	r3, [sp, #112]	@ 0x70
 80270ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80270bc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80270be:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 80270c2:	2aff      	cmp	r2, #255	@ 0xff
 80270c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80270c8:	931d      	str	r3, [sp, #116]	@ 0x74
 80270ca:	d01b      	beq.n	8027104 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 80270cc:	fb03 f302 	mul.w	r3, r3, r2
 80270d0:	fb06 f602 	mul.w	r6, r6, r2
 80270d4:	461a      	mov	r2, r3
 80270d6:	0a33      	lsrs	r3, r6, #8
 80270d8:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80270dc:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80270e0:	f502 7380 	add.w	r3, r2, #256	@ 0x100
 80270e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80270e8:	4476      	add	r6, lr
 80270ea:	0a36      	lsrs	r6, r6, #8
 80270ec:	0a1b      	lsrs	r3, r3, #8
 80270ee:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 80270f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80270f6:	ea46 0203 	orr.w	r2, r6, r3
 80270fa:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 80270fe:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8027102:	931d      	str	r3, [sp, #116]	@ 0x74
 8027104:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8027106:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 802710a:	f402 4e7f 	and.w	lr, r2, #65280	@ 0xff00
 802710e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8027110:	930d      	str	r3, [sp, #52]	@ 0x34
 8027112:	2aff      	cmp	r2, #255	@ 0xff
 8027114:	d01b      	beq.n	802714e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8027116:	fb03 f302 	mul.w	r3, r3, r2
 802711a:	fb0e fe02 	mul.w	lr, lr, r2
 802711e:	0a1a      	lsrs	r2, r3, #8
 8027120:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027124:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8027128:	f50e 7580 	add.w	r5, lr, #256	@ 0x100
 802712c:	441a      	add	r2, r3
 802712e:	eb05 2e1e 	add.w	lr, r5, lr, lsr #8
 8027132:	0a12      	lsrs	r2, r2, #8
 8027134:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027138:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802713c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027140:	ea42 0e0e 	orr.w	lr, r2, lr
 8027144:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8027148:	930d      	str	r3, [sp, #52]	@ 0x34
 802714a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802714e:	ea6f 0c0c 	mvn.w	ip, ip
 8027152:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027154:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8027156:	fb01 f305 	mul.w	r3, r1, r5
 802715a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802715c:	fa5f fc8c 	uxtb.w	ip, ip
 8027160:	fb01 f105 	mul.w	r1, r1, r5
 8027164:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8027166:	fb02 3305 	mla	r3, r2, r5, r3
 802716a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802716c:	fb02 1105 	mla	r1, r2, r5, r1
 8027170:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027172:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8027174:	fb06 3605 	mla	r6, r6, r5, r3
 8027178:	fb02 1205 	mla	r2, r2, r5, r1
 802717c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802717e:	8839      	ldrh	r1, [r7, #0]
 8027180:	fb03 6300 	mla	r3, r3, r0, r6
 8027184:	fb0e 2e00 	mla	lr, lr, r0, r2
 8027188:	10c8      	asrs	r0, r1, #3
 802718a:	120a      	asrs	r2, r1, #8
 802718c:	f000 06fc 	and.w	r6, r0, #252	@ 0xfc
 8027190:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027194:	00c9      	lsls	r1, r1, #3
 8027196:	fb02 f20c 	mul.w	r2, r2, ip
 802719a:	fb06 f60c 	mul.w	r6, r6, ip
 802719e:	b2c9      	uxtb	r1, r1
 80271a0:	fb01 f00c 	mul.w	r0, r1, ip
 80271a4:	0a1b      	lsrs	r3, r3, #8
 80271a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271aa:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 80271ae:	f40e 437f 	and.w	r3, lr, #65280	@ 0xff00
 80271b2:	430b      	orrs	r3, r1
 80271b4:	f106 0e01 	add.w	lr, r6, #1
 80271b8:	1c51      	adds	r1, r2, #1
 80271ba:	0c1d      	lsrs	r5, r3, #16
 80271bc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80271c0:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80271c4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80271c8:	fa5f fe83 	uxtb.w	lr, r3
 80271cc:	f100 0c01 	add.w	ip, r0, #1
 80271d0:	4b39      	ldr	r3, [pc, #228]	@ (80272b8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>)
 80271d2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80271d6:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80271da:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80271de:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 80271e2:	00c9      	lsls	r1, r1, #3
 80271e4:	eb0e 2310 	add.w	r3, lr, r0, lsr #8
 80271e8:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 80271ec:	f401 62fc 	and.w	r2, r1, #2016	@ 0x7e0
 80271f0:	4313      	orrs	r3, r2
 80271f2:	803b      	strh	r3, [r7, #0]
 80271f4:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80271f6:	f1ba 0f00 	cmp.w	sl, #0
 80271fa:	f107 0702 	add.w	r7, r7, #2
 80271fe:	44d9      	add	r9, fp
 8027200:	4498      	add	r8, r3
 8027202:	dd26      	ble.n	8027252 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8027204:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8027208:	ea4f 4229 	mov.w	r2, r9, asr #16
 802720c:	2a00      	cmp	r2, #0
 802720e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027212:	ea4f 4128 	mov.w	r1, r8, asr #16
 8027216:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802721a:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 802721e:	f6bf aeb9 	bge.w	8026f94 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8027222:	1c53      	adds	r3, r2, #1
 8027224:	d4e6      	bmi.n	80271f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027226:	42b3      	cmp	r3, r6
 8027228:	dce4      	bgt.n	80271f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802722a:	1c4b      	adds	r3, r1, #1
 802722c:	d4e2      	bmi.n	80271f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802722e:	4563      	cmp	r3, ip
 8027230:	dce0      	bgt.n	80271f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027232:	fa0f f38c 	sxth.w	r3, ip
 8027236:	b236      	sxth	r6, r6
 8027238:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802723c:	e9cd 6300 	strd	r6, r3, [sp]
 8027240:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8027244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027248:	4639      	mov	r1, r7
 802724a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802724c:	f7ff fade 	bl	802680c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8027250:	e7d0      	b.n	80271f4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027252:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027254:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027258:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802725c:	3301      	adds	r3, #1
 802725e:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8027262:	e4d6      	b.n	8026c12 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027264:	3b01      	subs	r3, #1
 8027266:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802726a:	930c      	str	r3, [sp, #48]	@ 0x30
 802726c:	469a      	mov	sl, r3
 802726e:	e684      	b.n	8026f7a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 8027270:	f1be 0f00 	cmp.w	lr, #0
 8027274:	f43f aeb4 	beq.w	8026fe0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8027278:	5d89      	ldrb	r1, [r1, r6]
 802727a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802727e:	9120      	str	r1, [sp, #128]	@ 0x80
 8027280:	0e09      	lsrs	r1, r1, #24
 8027282:	9117      	str	r1, [sp, #92]	@ 0x5c
 8027284:	e6ac      	b.n	8026fe0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8027286:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8027288:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802728a:	eb01 0c06 	add.w	ip, r1, r6
 802728e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8027292:	5d89      	ldrb	r1, [r1, r6]
 8027294:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 8027298:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802729c:	0e35      	lsrs	r5, r6, #24
 802729e:	9120      	str	r1, [sp, #128]	@ 0x80
 80272a0:	0e09      	lsrs	r1, r1, #24
 80272a2:	9621      	str	r6, [sp, #132]	@ 0x84
 80272a4:	9518      	str	r5, [sp, #96]	@ 0x60
 80272a6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80272a8:	e69a      	b.n	8026fe0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80272aa:	f43f acb2 	beq.w	8026c12 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80272ae:	1e65      	subs	r5, r4, #1
 80272b0:	f8cd b01c 	str.w	fp, [sp, #28]
 80272b4:	e4f2      	b.n	8026c9c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80272b6:	bf00      	nop
 80272b8:	fffff800 	.word	0xfffff800

080272bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80272bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272c0:	b08b      	sub	sp, #44	@ 0x2c
 80272c2:	f89d 0068 	ldrb.w	r0, [sp, #104]	@ 0x68
 80272c6:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 80272ca:	ea6f 0b00 	mvn.w	fp, r0
 80272ce:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80272d0:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	@ 0x50
 80272d4:	9005      	str	r0, [sp, #20]
 80272d6:	fb0c 4805 	mla	r8, ip, r5, r4
 80272da:	7848      	ldrb	r0, [r1, #1]
 80272dc:	788e      	ldrb	r6, [r1, #2]
 80272de:	0204      	lsls	r4, r0, #8
 80272e0:	780f      	ldrb	r7, [r1, #0]
 80272e2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80272e6:	9306      	str	r3, [sp, #24]
 80272e8:	fa5f f38b 	uxtb.w	r3, fp
 80272ec:	433c      	orrs	r4, r7
 80272ee:	9304      	str	r3, [sp, #16]
 80272f0:	f1bc 0f00 	cmp.w	ip, #0
 80272f4:	eb02 0308 	add.w	r3, r2, r8
 80272f8:	9003      	str	r0, [sp, #12]
 80272fa:	9602      	str	r6, [sp, #8]
 80272fc:	9307      	str	r3, [sp, #28]
 80272fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8027300:	f10c 0601 	add.w	r6, ip, #1
 8027304:	f9bd e054 	ldrsh.w	lr, [sp, #84]	@ 0x54
 8027308:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 802730c:	f89d 0064 	ldrb.w	r0, [sp, #100]	@ 0x64
 8027310:	db02      	blt.n	8027318 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x5c>
 8027312:	45e6      	cmp	lr, ip
 8027314:	f300 80a0 	bgt.w	8027458 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x19c>
 8027318:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 802731c:	46e0      	mov	r8, ip
 802731e:	fa5f fb84 	uxtb.w	fp, r4
 8027322:	f8cd b004 	str.w	fp, [sp, #4]
 8027326:	2e00      	cmp	r6, #0
 8027328:	db01      	blt.n	802732e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 802732a:	45b6      	cmp	lr, r6
 802732c:	dc73      	bgt.n	8027416 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x15a>
 802732e:	fa5f fa84 	uxtb.w	sl, r4
 8027332:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8027336:	4654      	mov	r4, sl
 8027338:	46f1      	mov	r9, lr
 802733a:	2b0f      	cmp	r3, #15
 802733c:	f200 80cb 	bhi.w	80274d6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8027340:	280f      	cmp	r0, #15
 8027342:	f200 80c8 	bhi.w	80274d6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8027346:	b29b      	uxth	r3, r3
 8027348:	b280      	uxth	r0, r0
 802734a:	fb03 f600 	mul.w	r6, r3, r0
 802734e:	011b      	lsls	r3, r3, #4
 8027350:	1b9d      	subs	r5, r3, r6
 8027352:	9a01      	ldr	r2, [sp, #4]
 8027354:	b2ad      	uxth	r5, r5
 8027356:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 802735a:	fb05 f202 	mul.w	r2, r5, r2
 802735e:	b280      	uxth	r0, r0
 8027360:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8027364:	1a1b      	subs	r3, r3, r0
 8027366:	b29b      	uxth	r3, r3
 8027368:	fb03 220b 	mla	r2, r3, fp, r2
 802736c:	fb00 2a0a 	mla	sl, r0, sl, r2
 8027370:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8027374:	fb06 a404 	mla	r4, r6, r4, sl
 8027378:	fb17 f70b 	smulbb	r7, r7, fp
 802737c:	f8bd a014 	ldrh.w	sl, [sp, #20]
 8027380:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8027384:	fb04 770a 	mla	r7, r4, sl, r7
 8027388:	b2bf      	uxth	r7, r7
 802738a:	1c7a      	adds	r2, r7, #1
 802738c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8027390:	123f      	asrs	r7, r7, #8
 8027392:	700f      	strb	r7, [r1, #0]
 8027394:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8027398:	f898 7001 	ldrb.w	r7, [r8, #1]
 802739c:	fb05 f204 	mul.w	r2, r5, r4
 80273a0:	fb03 2407 	mla	r4, r3, r7, r2
 80273a4:	f899 2001 	ldrb.w	r2, [r9, #1]
 80273a8:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80273ac:	fb00 4202 	mla	r2, r0, r2, r4
 80273b0:	9c03      	ldr	r4, [sp, #12]
 80273b2:	fb06 2207 	mla	r2, r6, r7, r2
 80273b6:	fb14 f40b 	smulbb	r4, r4, fp
 80273ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80273be:	fb02 420a 	mla	r2, r2, sl, r4
 80273c2:	b292      	uxth	r2, r2
 80273c4:	1c54      	adds	r4, r2, #1
 80273c6:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80273ca:	1212      	asrs	r2, r2, #8
 80273cc:	704a      	strb	r2, [r1, #1]
 80273ce:	f89c 4002 	ldrb.w	r4, [ip, #2]
 80273d2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80273d6:	fb05 f504 	mul.w	r5, r5, r4
 80273da:	fb03 5502 	mla	r5, r3, r2, r5
 80273de:	f899 4002 	ldrb.w	r4, [r9, #2]
 80273e2:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80273e6:	fb00 5004 	mla	r0, r0, r4, r5
 80273ea:	9b02      	ldr	r3, [sp, #8]
 80273ec:	fb06 0602 	mla	r6, r6, r2, r0
 80273f0:	fb13 fb0b 	smulbb	fp, r3, fp
 80273f4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80273f8:	fb06 ba0a 	mla	sl, r6, sl, fp
 80273fc:	fa1f fa8a 	uxth.w	sl, sl
 8027400:	f10a 0b01 	add.w	fp, sl, #1
 8027404:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8027408:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802740c:	f881 a002 	strb.w	sl, [r1, #2]
 8027410:	b00b      	add	sp, #44	@ 0x2c
 8027412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027416:	2800      	cmp	r0, #0
 8027418:	d089      	beq.n	802732e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 802741a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802741c:	2e00      	cmp	r6, #0
 802741e:	db47      	blt.n	80274b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 8027420:	42b5      	cmp	r5, r6
 8027422:	dd45      	ble.n	80274b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 8027424:	9a07      	ldr	r2, [sp, #28]
 8027426:	f812 9005 	ldrb.w	r9, [r2, r5]
 802742a:	9a06      	ldr	r2, [sp, #24]
 802742c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8027430:	4491      	add	r9, r2
 8027432:	3601      	adds	r6, #1
 8027434:	f899 a000 	ldrb.w	sl, [r9]
 8027438:	d436      	bmi.n	80274a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 802743a:	42b5      	cmp	r5, r6
 802743c:	dd34      	ble.n	80274a8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 802743e:	2b00      	cmp	r3, #0
 8027440:	d045      	beq.n	80274ce <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x212>
 8027442:	9a07      	ldr	r2, [sp, #28]
 8027444:	442a      	add	r2, r5
 8027446:	f892 e001 	ldrb.w	lr, [r2, #1]
 802744a:	9a06      	ldr	r2, [sp, #24]
 802744c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8027450:	f812 400e 	ldrb.w	r4, [r2, lr]
 8027454:	4496      	add	lr, r2
 8027456:	e770      	b.n	802733a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8027458:	4691      	mov	r9, r2
 802745a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802745c:	2a00      	cmp	r2, #0
 802745e:	db01      	blt.n	8027464 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1a8>
 8027460:	4295      	cmp	r5, r2
 8027462:	dc19      	bgt.n	8027498 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>
 8027464:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8027468:	3201      	adds	r2, #1
 802746a:	f898 b000 	ldrb.w	fp, [r8]
 802746e:	d40e      	bmi.n	802748e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8027470:	4295      	cmp	r5, r2
 8027472:	dd0c      	ble.n	802748e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8027474:	b1fb      	cbz	r3, 80274b6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1fa>
 8027476:	9a07      	ldr	r2, [sp, #28]
 8027478:	f892 c001 	ldrb.w	ip, [r2, #1]
 802747c:	9a06      	ldr	r2, [sp, #24]
 802747e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027482:	f812 200c 	ldrb.w	r2, [r2, ip]
 8027486:	9201      	str	r2, [sp, #4]
 8027488:	9a06      	ldr	r2, [sp, #24]
 802748a:	4494      	add	ip, r2
 802748c:	e74b      	b.n	8027326 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 802748e:	b2e2      	uxtb	r2, r4
 8027490:	9201      	str	r2, [sp, #4]
 8027492:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8027496:	e746      	b.n	8027326 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 8027498:	f819 8008 	ldrb.w	r8, [r9, r8]
 802749c:	9a06      	ldr	r2, [sp, #24]
 802749e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80274a2:	4490      	add	r8, r2
 80274a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80274a6:	e7df      	b.n	8027468 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ac>
 80274a8:	b2e4      	uxtb	r4, r4
 80274aa:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80274ae:	e744      	b.n	802733a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 80274b0:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 80274b4:	e7bd      	b.n	8027432 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x176>
 80274b6:	b2e2      	uxtb	r2, r4
 80274b8:	2e00      	cmp	r6, #0
 80274ba:	9201      	str	r2, [sp, #4]
 80274bc:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 80274c0:	f6bf af33 	bge.w	802732a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6e>
 80274c4:	46e6      	mov	lr, ip
 80274c6:	46e1      	mov	r9, ip
 80274c8:	4692      	mov	sl, r2
 80274ca:	4614      	mov	r4, r2
 80274cc:	e738      	b.n	8027340 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 80274ce:	b2e4      	uxtb	r4, r4
 80274d0:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80274d4:	e734      	b.n	8027340 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 80274d6:	4b03      	ldr	r3, [pc, #12]	@ (80274e4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x228>)
 80274d8:	4a03      	ldr	r2, [pc, #12]	@ (80274e8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x22c>)
 80274da:	f240 31ca 	movw	r1, #970	@ 0x3ca
 80274de:	4803      	ldr	r0, [pc, #12]	@ (80274ec <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x230>)
 80274e0:	f003 fc84 	bl	802adec <__assert_func>
 80274e4:	0802e264 	.word	0x0802e264
 80274e8:	0802e8e0 	.word	0x0802e8e0
 80274ec:	0802e3ec 	.word	0x0802e3ec

080274f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80274f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274f4:	ed2d 8b08 	vpush	{d8-d11}
 80274f8:	b097      	sub	sp, #92	@ 0x5c
 80274fa:	f89d 60c4 	ldrb.w	r6, [sp, #196]	@ 0xc4
 80274fe:	eeb0 aa40 	vmov.f32	s20, s0
 8027502:	e9dd b729 	ldrd	fp, r7, [sp, #164]	@ 0xa4
 8027506:	e9cd 0614 	strd	r0, r6, [sp, #80]	@ 0x50
 802750a:	43f0      	mvns	r0, r6
 802750c:	eef0 9a60 	vmov.f32	s19, s1
 8027510:	eeb0 9a41 	vmov.f32	s18, s2
 8027514:	eef0 8a62 	vmov.f32	s17, s5
 8027518:	eeb0 8a43 	vmov.f32	s16, s6
 802751c:	eef0 ba44 	vmov.f32	s23, s8
 8027520:	eeb0 ba64 	vmov.f32	s22, s9
 8027524:	eef0 aa45 	vmov.f32	s21, s10
 8027528:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 802752c:	e9dd 512d 	ldrd	r5, r1, [sp, #180]	@ 0xb4
 8027530:	461a      	mov	r2, r3
 8027532:	686c      	ldr	r4, [r5, #4]
 8027534:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8027536:	f8dd 90ac 	ldr.w	r9, [sp, #172]	@ 0xac
 802753a:	fb04 1303 	mla	r3, r4, r3, r1
 802753e:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
 8027540:	6829      	ldr	r1, [r5, #0]
 8027542:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027546:	6865      	ldr	r5, [r4, #4]
 8027548:	eb01 0a03 	add.w	sl, r1, r3
 802754c:	b2c3      	uxtb	r3, r0
 802754e:	6824      	ldr	r4, [r4, #0]
 8027550:	9309      	str	r3, [sp, #36]	@ 0x24
 8027552:	1d2b      	adds	r3, r5, #4
 8027554:	930a      	str	r3, [sp, #40]	@ 0x28
 8027556:	b2b3      	uxth	r3, r6
 8027558:	940d      	str	r4, [sp, #52]	@ 0x34
 802755a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802755c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802755e:	2b00      	cmp	r3, #0
 8027560:	dc02      	bgt.n	8027568 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027562:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027564:	2b00      	cmp	r3, #0
 8027566:	dd63      	ble.n	8027630 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027568:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802756a:	2a00      	cmp	r2, #0
 802756c:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8027570:	b234      	sxth	r4, r6
 8027572:	fa0f fc8e 	sxth.w	ip, lr
 8027576:	f340 825b 	ble.w	8027a30 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 802757a:	f8cd e020 	str.w	lr, [sp, #32]
 802757e:	f8dd e0b0 	ldr.w	lr, [sp, #176]	@ 0xb0
 8027582:	1e65      	subs	r5, r4, #1
 8027584:	f10c 38ff 	add.w	r8, ip, #4294967295
 8027588:	ea5f 432b 	movs.w	r3, fp, asr #16
 802758c:	ea4f 4127 	mov.w	r1, r7, asr #16
 8027590:	d405      	bmi.n	802759e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8027592:	42ab      	cmp	r3, r5
 8027594:	da03      	bge.n	802759e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8027596:	2900      	cmp	r1, #0
 8027598:	db01      	blt.n	802759e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802759a:	4541      	cmp	r1, r8
 802759c:	db4d      	blt.n	802763a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802759e:	1c58      	adds	r0, r3, #1
 80275a0:	d406      	bmi.n	80275b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 80275a2:	42a0      	cmp	r0, r4
 80275a4:	dc04      	bgt.n	80275b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 80275a6:	1c48      	adds	r0, r1, #1
 80275a8:	d402      	bmi.n	80275b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 80275aa:	4560      	cmp	r0, ip
 80275ac:	f340 819b 	ble.w	80278e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80275b0:	3a01      	subs	r2, #1
 80275b2:	44cb      	add	fp, r9
 80275b4:	4477      	add	r7, lr
 80275b6:	f10a 0a03 	add.w	sl, sl, #3
 80275ba:	d1e5      	bne.n	8027588 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80275bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80275be:	2b00      	cmp	r3, #0
 80275c0:	dd36      	ble.n	8027630 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80275c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80275c6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80275ca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80275ce:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80275d2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80275d6:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80275da:	ee69 7a27 	vmul.f32	s15, s18, s15
 80275de:	ee76 6a68 	vsub.f32	s13, s12, s17
 80275e2:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80275e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80275ea:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80275ee:	ee16 2a90 	vmov	r2, s13
 80275f2:	3b01      	subs	r3, #1
 80275f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80275f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80275f8:	fb92 f9f3 	sdiv	r9, r2, r3
 80275fc:	ee17 2a10 	vmov	r2, s14
 8027600:	eeb0 7a48 	vmov.f32	s14, s16
 8027604:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027608:	ee17 7a10 	vmov	r7, s14
 802760c:	eeb0 7a68 	vmov.f32	s14, s17
 8027610:	fb92 f3f3 	sdiv	r3, r2, r3
 8027614:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027618:	932c      	str	r3, [sp, #176]	@ 0xb0
 802761a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802761c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802761e:	ee17 ba10 	vmov	fp, s14
 8027622:	eeb0 8a67 	vmov.f32	s16, s15
 8027626:	eef0 8a46 	vmov.f32	s17, s12
 802762a:	bf18      	it	ne
 802762c:	461a      	movne	r2, r3
 802762e:	e795      	b.n	802755c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027630:	b017      	add	sp, #92	@ 0x5c
 8027632:	ecbd 8b08 	vpop	{d8-d11}
 8027636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802763a:	f8dd e020 	ldr.w	lr, [sp, #32]
 802763e:	1e51      	subs	r1, r2, #1
 8027640:	fb09 b301 	mla	r3, r9, r1, fp
 8027644:	141b      	asrs	r3, r3, #16
 8027646:	9108      	str	r1, [sp, #32]
 8027648:	f100 80e7 	bmi.w	802781a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802764c:	42ab      	cmp	r3, r5
 802764e:	f280 80e4 	bge.w	802781a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8027652:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027654:	fb03 7301 	mla	r3, r3, r1, r7
 8027658:	141b      	asrs	r3, r3, #16
 802765a:	f100 80de 	bmi.w	802781a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802765e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027662:	4563      	cmp	r3, ip
 8027664:	f280 80d9 	bge.w	802781a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8027668:	2a00      	cmp	r2, #0
 802766a:	dda7      	ble.n	80275bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 802766c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027670:	eb0a 0302 	add.w	r3, sl, r2
 8027674:	930c      	str	r3, [sp, #48]	@ 0x30
 8027676:	f10a 0c03 	add.w	ip, sl, #3
 802767a:	e9cd 792a 	strd	r7, r9, [sp, #168]	@ 0xa8
 802767e:	463b      	mov	r3, r7
 8027680:	e09a      	b.n	80277b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8027682:	784d      	ldrb	r5, [r1, #1]
 8027684:	1908      	adds	r0, r1, r4
 8027686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802768a:	4435      	add	r5, r6
 802768c:	2a00      	cmp	r2, #0
 802768e:	f000 80b5 	beq.w	80277fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027692:	5d0c      	ldrb	r4, [r1, r4]
 8027694:	f890 e001 	ldrb.w	lr, [r0, #1]
 8027698:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802769c:	19a1      	adds	r1, r4, r6
 802769e:	9108      	str	r1, [sp, #32]
 80276a0:	4631      	mov	r1, r6
 80276a2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80276a6:	9f08      	ldr	r7, [sp, #32]
 80276a8:	44b6      	add	lr, r6
 80276aa:	b29b      	uxth	r3, r3
 80276ac:	b292      	uxth	r2, r2
 80276ae:	fb03 f602 	mul.w	r6, r3, r2
 80276b2:	011b      	lsls	r3, r3, #4
 80276b4:	f895 9000 	ldrb.w	r9, [r5]
 80276b8:	1b98      	subs	r0, r3, r6
 80276ba:	b280      	uxth	r0, r0
 80276bc:	fb00 f909 	mul.w	r9, r0, r9
 80276c0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80276c4:	b292      	uxth	r2, r2
 80276c6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80276ca:	f811 100a 	ldrb.w	r1, [r1, sl]
 80276ce:	1a9b      	subs	r3, r3, r2
 80276d0:	b29b      	uxth	r3, r3
 80276d2:	fb03 9101 	mla	r1, r3, r1, r9
 80276d6:	f897 9000 	ldrb.w	r9, [r7]
 80276da:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 80276dc:	fb02 1109 	mla	r1, r2, r9, r1
 80276e0:	f89e a000 	ldrb.w	sl, [lr]
 80276e4:	f81c 9c03 	ldrb.w	r9, [ip, #-3]
 80276e8:	44a3      	add	fp, r4
 80276ea:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80276ec:	fb06 110a 	mla	r1, r6, sl, r1
 80276f0:	fb19 f904 	smulbb	r9, r9, r4
 80276f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80276f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80276fa:	fb01 9904 	mla	r9, r1, r4, r9
 80276fe:	fa1f f989 	uxth.w	r9, r9
 8027702:	f109 0101 	add.w	r1, r9, #1
 8027706:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 802770a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802770e:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8027712:	7869      	ldrb	r1, [r5, #1]
 8027714:	f898 9001 	ldrb.w	r9, [r8, #1]
 8027718:	fb00 f101 	mul.w	r1, r0, r1
 802771c:	9c08      	ldr	r4, [sp, #32]
 802771e:	fb03 1109 	mla	r1, r3, r9, r1
 8027722:	f894 9001 	ldrb.w	r9, [r4, #1]
 8027726:	9f2c      	ldr	r7, [sp, #176]	@ 0xb0
 8027728:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 802772a:	fb02 1109 	mla	r1, r2, r9, r1
 802772e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8027732:	443c      	add	r4, r7
 8027734:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
 8027738:	942a      	str	r4, [sp, #168]	@ 0xa8
 802773a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802773c:	fb06 110a 	mla	r1, r6, sl, r1
 8027740:	fb19 f904 	smulbb	r9, r9, r4
 8027744:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8027746:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802774a:	fb01 9907 	mla	r9, r1, r7, r9
 802774e:	fa1f f989 	uxth.w	r9, r9
 8027752:	f109 0101 	add.w	r1, r9, #1
 8027756:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 802775a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802775e:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8027762:	78a9      	ldrb	r1, [r5, #2]
 8027764:	f898 5002 	ldrb.w	r5, [r8, #2]
 8027768:	fb00 f001 	mul.w	r0, r0, r1
 802776c:	fb03 0005 	mla	r0, r3, r5, r0
 8027770:	9b08      	ldr	r3, [sp, #32]
 8027772:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8027776:	789b      	ldrb	r3, [r3, #2]
 8027778:	f81c ec01 	ldrb.w	lr, [ip, #-1]
 802777c:	fb02 0003 	mla	r0, r2, r3, r0
 8027780:	fb06 0004 	mla	r0, r6, r4, r0
 8027784:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027786:	fb1e f404 	smulbb	r4, lr, r4
 802778a:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 802778e:	fb0e 4e07 	mla	lr, lr, r7, r4
 8027792:	fa1f fe8e 	uxth.w	lr, lr
 8027796:	f10e 0301 	add.w	r3, lr, #1
 802779a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802779e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80277a0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80277a4:	4563      	cmp	r3, ip
 80277a6:	f80c ec01 	strb.w	lr, [ip, #-1]
 80277aa:	d034      	beq.n	8027816 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80277ac:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80277ae:	f10c 0c03 	add.w	ip, ip, #3
 80277b2:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 80277b6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80277b8:	1419      	asrs	r1, r3, #16
 80277ba:	ea4f 432b 	mov.w	r3, fp, asr #16
 80277be:	fb04 3101 	mla	r1, r4, r1, r3
 80277c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80277c4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80277c6:	f812 a001 	ldrb.w	sl, [r2, r1]
 80277ca:	4411      	add	r1, r2
 80277cc:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80277ce:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80277d2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80277d6:	eb06 080a 	add.w	r8, r6, sl
 80277da:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80277de:	2b00      	cmp	r3, #0
 80277e0:	f47f af4f 	bne.w	8027682 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80277e4:	b182      	cbz	r2, 8027808 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80277e6:	5d0c      	ldrb	r4, [r1, r4]
 80277e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80277ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80277ee:	1861      	adds	r1, r4, r1
 80277f0:	9108      	str	r1, [sp, #32]
 80277f2:	46c6      	mov	lr, r8
 80277f4:	4645      	mov	r5, r8
 80277f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80277f8:	9f08      	ldr	r7, [sp, #32]
 80277fa:	e756      	b.n	80276aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80277fc:	46c6      	mov	lr, r8
 80277fe:	f8cd 8020 	str.w	r8, [sp, #32]
 8027802:	4631      	mov	r1, r6
 8027804:	4647      	mov	r7, r8
 8027806:	e750      	b.n	80276aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027808:	46c6      	mov	lr, r8
 802780a:	f8cd 8020 	str.w	r8, [sp, #32]
 802780e:	4645      	mov	r5, r8
 8027810:	4631      	mov	r1, r6
 8027812:	4647      	mov	r7, r8
 8027814:	e749      	b.n	80276aa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027816:	469a      	mov	sl, r3
 8027818:	e6d0      	b.n	80275bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 802781a:	2a00      	cmp	r2, #0
 802781c:	f77f aece 	ble.w	80275bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8027820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027824:	ea4f 432b 	mov.w	r3, fp, asr #16
 8027828:	1439      	asrs	r1, r7, #16
 802782a:	4654      	mov	r4, sl
 802782c:	9d30      	ldr	r5, [sp, #192]	@ 0xc0
 802782e:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 8027832:	2b00      	cmp	r3, #0
 8027834:	f3cb 3003 	ubfx	r0, fp, #12, #4
 8027838:	f3c7 3203 	ubfx	r2, r7, #12, #4
 802783c:	db2f      	blt.n	802789e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802783e:	f106 3cff 	add.w	ip, r6, #4294967295
 8027842:	4563      	cmp	r3, ip
 8027844:	da2b      	bge.n	802789e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027846:	2900      	cmp	r1, #0
 8027848:	db29      	blt.n	802789e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802784a:	f10e 3cff 	add.w	ip, lr, #4294967295
 802784e:	4561      	cmp	r1, ip
 8027850:	da25      	bge.n	802789e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027852:	fa0f fa86 	sxth.w	sl, r6
 8027856:	fb01 330a 	mla	r3, r1, sl, r3
 802785a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802785c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802785e:	f811 e003 	ldrb.w	lr, [r1, r3]
 8027862:	440b      	add	r3, r1
 8027864:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8027868:	eb06 0c0e 	add.w	ip, r6, lr
 802786c:	2800      	cmp	r0, #0
 802786e:	d052      	beq.n	8027916 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x426>
 8027870:	7859      	ldrb	r1, [r3, #1]
 8027872:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027876:	1871      	adds	r1, r6, r1
 8027878:	910c      	str	r1, [sp, #48]	@ 0x30
 802787a:	2a00      	cmp	r2, #0
 802787c:	f000 80d5 	beq.w	8027a2a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 8027880:	eb03 010a 	add.w	r1, r3, sl
 8027884:	7849      	ldrb	r1, [r1, #1]
 8027886:	f813 300a 	ldrb.w	r3, [r3, sl]
 802788a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802788e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027892:	1871      	adds	r1, r6, r1
 8027894:	18f3      	adds	r3, r6, r3
 8027896:	9110      	str	r1, [sp, #64]	@ 0x40
 8027898:	9311      	str	r3, [sp, #68]	@ 0x44
 802789a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802789c:	e042      	b.n	8027924 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802789e:	f113 0c01 	adds.w	ip, r3, #1
 80278a2:	d406      	bmi.n	80278b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80278a4:	45b4      	cmp	ip, r6
 80278a6:	dc04      	bgt.n	80278b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80278a8:	f111 0c01 	adds.w	ip, r1, #1
 80278ac:	d401      	bmi.n	80278b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80278ae:	45f4      	cmp	ip, lr
 80278b0:	dd1f      	ble.n	80278f2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 80278b2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80278b4:	f1b8 0f00 	cmp.w	r8, #0
 80278b8:	f104 0403 	add.w	r4, r4, #3
 80278bc:	44cb      	add	fp, r9
 80278be:	441f      	add	r7, r3
 80278c0:	dd07      	ble.n	80278d2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80278c2:	e9d5 6e02 	ldrd	r6, lr, [r5, #8]
 80278c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80278ca:	ea4f 432b 	mov.w	r3, fp, asr #16
 80278ce:	1439      	asrs	r1, r7, #16
 80278d0:	e7af      	b.n	8027832 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80278d2:	9b08      	ldr	r3, [sp, #32]
 80278d4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80278d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80278dc:	3301      	adds	r3, #1
 80278de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80278e2:	449a      	add	sl, r3
 80278e4:	e66a      	b.n	80275bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 80278e6:	3a01      	subs	r2, #1
 80278e8:	f8dd e020 	ldr.w	lr, [sp, #32]
 80278ec:	4690      	mov	r8, r2
 80278ee:	9208      	str	r2, [sp, #32]
 80278f0:	e79b      	b.n	802782a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80278f2:	fa0f fe8e 	sxth.w	lr, lr
 80278f6:	b236      	sxth	r6, r6
 80278f8:	e9cd 6e00 	strd	r6, lr, [sp]
 80278fc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80278fe:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027902:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8027906:	9302      	str	r3, [sp, #8]
 8027908:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802790a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802790c:	4621      	mov	r1, r4
 802790e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8027910:	f7ff fcd4 	bl	80272bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8027914:	e7cd      	b.n	80278b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8027916:	2a00      	cmp	r2, #0
 8027918:	d17b      	bne.n	8027a12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x522>
 802791a:	4661      	mov	r1, ip
 802791c:	e9cd cc10 	strd	ip, ip, [sp, #64]	@ 0x40
 8027920:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 8027924:	b283      	uxth	r3, r0
 8027926:	b292      	uxth	r2, r2
 8027928:	fb03 f602 	mul.w	r6, r3, r2
 802792c:	011b      	lsls	r3, r3, #4
 802792e:	7809      	ldrb	r1, [r1, #0]
 8027930:	1b98      	subs	r0, r3, r6
 8027932:	b280      	uxth	r0, r0
 8027934:	9012      	str	r0, [sp, #72]	@ 0x48
 8027936:	fb00 f101 	mul.w	r1, r0, r1
 802793a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802793e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027940:	b292      	uxth	r2, r2
 8027942:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8027946:	f810 e00e 	ldrb.w	lr, [r0, lr]
 802794a:	1a9b      	subs	r3, r3, r2
 802794c:	b29b      	uxth	r3, r3
 802794e:	fb03 110e 	mla	r1, r3, lr, r1
 8027952:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027954:	f890 a000 	ldrb.w	sl, [r0]
 8027958:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802795a:	fb02 110a 	mla	r1, r2, sl, r1
 802795e:	f890 e000 	ldrb.w	lr, [r0]
 8027962:	f894 a000 	ldrb.w	sl, [r4]
 8027966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027968:	fb06 110e 	mla	r1, r6, lr, r1
 802796c:	fb1a fa00 	smulbb	sl, sl, r0
 8027970:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8027972:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027976:	fb01 a100 	mla	r1, r1, r0, sl
 802797a:	b289      	uxth	r1, r1
 802797c:	f101 0e01 	add.w	lr, r1, #1
 8027980:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8027984:	1209      	asrs	r1, r1, #8
 8027986:	7021      	strb	r1, [r4, #0]
 8027988:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802798a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802798c:	7849      	ldrb	r1, [r1, #1]
 802798e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8027992:	fb00 f101 	mul.w	r1, r0, r1
 8027996:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027998:	fb03 110e 	mla	r1, r3, lr, r1
 802799c:	f890 a001 	ldrb.w	sl, [r0, #1]
 80279a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80279a2:	fb02 110a 	mla	r1, r2, sl, r1
 80279a6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80279aa:	f894 a001 	ldrb.w	sl, [r4, #1]
 80279ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80279b0:	fb06 110e 	mla	r1, r6, lr, r1
 80279b4:	fb1a fa00 	smulbb	sl, sl, r0
 80279b8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80279ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80279be:	fb01 a100 	mla	r1, r1, r0, sl
 80279c2:	b289      	uxth	r1, r1
 80279c4:	f101 0e01 	add.w	lr, r1, #1
 80279c8:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 80279cc:	1209      	asrs	r1, r1, #8
 80279ce:	7061      	strb	r1, [r4, #1]
 80279d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80279d2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80279d4:	7889      	ldrb	r1, [r1, #2]
 80279d6:	f89c c002 	ldrb.w	ip, [ip, #2]
 80279da:	fb00 f001 	mul.w	r0, r0, r1
 80279de:	fb03 010c 	mla	r1, r3, ip, r0
 80279e2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80279e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80279e6:	7880      	ldrb	r0, [r0, #2]
 80279e8:	789b      	ldrb	r3, [r3, #2]
 80279ea:	fb02 1100 	mla	r1, r2, r0, r1
 80279ee:	78a2      	ldrb	r2, [r4, #2]
 80279f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80279f2:	fb06 1303 	mla	r3, r6, r3, r1
 80279f6:	fb12 f200 	smulbb	r2, r2, r0
 80279fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80279fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a00:	fb03 2300 	mla	r3, r3, r0, r2
 8027a04:	b29b      	uxth	r3, r3
 8027a06:	1c5a      	adds	r2, r3, #1
 8027a08:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027a0c:	121b      	asrs	r3, r3, #8
 8027a0e:	70a3      	strb	r3, [r4, #2]
 8027a10:	e74f      	b.n	80278b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8027a12:	f813 300a 	ldrb.w	r3, [r3, sl]
 8027a16:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8027a1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027a1e:	18f3      	adds	r3, r6, r3
 8027a20:	9311      	str	r3, [sp, #68]	@ 0x44
 8027a22:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 8027a26:	4661      	mov	r1, ip
 8027a28:	e77c      	b.n	8027924 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8027a2a:	e9cd cc10 	strd	ip, ip, [sp, #64]	@ 0x40
 8027a2e:	e779      	b.n	8027924 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8027a30:	f43f adc4 	beq.w	80275bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8027a34:	1e65      	subs	r5, r4, #1
 8027a36:	e602      	b.n	802763e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>

08027a38 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8027a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a3c:	b083      	sub	sp, #12
 8027a3e:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	@ 0x30
 8027a42:	f891 9001 	ldrb.w	r9, [r1, #1]
 8027a46:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8027a4a:	7888      	ldrb	r0, [r1, #2]
 8027a4c:	fb07 6c08 	mla	ip, r7, r8, r6
 8027a50:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8027a54:	780c      	ldrb	r4, [r1, #0]
 8027a56:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 8027a5a:	ea49 0404 	orr.w	r4, r9, r4
 8027a5e:	2f00      	cmp	r7, #0
 8027a60:	9401      	str	r4, [sp, #4]
 8027a62:	eb02 090c 	add.w	r9, r2, ip
 8027a66:	f107 0e01 	add.w	lr, r7, #1
 8027a6a:	f9bd a034 	ldrsh.w	sl, [sp, #52]	@ 0x34
 8027a6e:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8027a72:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8027a76:	db01      	blt.n	8027a7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x44>
 8027a78:	45ba      	cmp	sl, r7
 8027a7a:	dc6e      	bgt.n	8027b5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x122>
 8027a7c:	fa5f fb84 	uxtb.w	fp, r4
 8027a80:	af01      	add	r7, sp, #4
 8027a82:	465a      	mov	r2, fp
 8027a84:	46bc      	mov	ip, r7
 8027a86:	f1be 0f00 	cmp.w	lr, #0
 8027a8a:	db01      	blt.n	8027a90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x58>
 8027a8c:	45f2      	cmp	sl, lr
 8027a8e:	dc49      	bgt.n	8027b24 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xec>
 8027a90:	fa5f fa84 	uxtb.w	sl, r4
 8027a94:	ab01      	add	r3, sp, #4
 8027a96:	46d1      	mov	r9, sl
 8027a98:	469e      	mov	lr, r3
 8027a9a:	280f      	cmp	r0, #15
 8027a9c:	f200 8098 	bhi.w	8027bd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8027aa0:	2d0f      	cmp	r5, #15
 8027aa2:	f200 8095 	bhi.w	8027bd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8027aa6:	b280      	uxth	r0, r0
 8027aa8:	b2ad      	uxth	r5, r5
 8027aaa:	fb00 f805 	mul.w	r8, r0, r5
 8027aae:	0104      	lsls	r4, r0, #4
 8027ab0:	eba4 0608 	sub.w	r6, r4, r8
 8027ab4:	b2b6      	uxth	r6, r6
 8027ab6:	fb06 f002 	mul.w	r0, r6, r2
 8027aba:	ebc8 1505 	rsb	r5, r8, r5, lsl #4
 8027abe:	b2ad      	uxth	r5, r5
 8027ac0:	f5c4 7280 	rsb	r2, r4, #256	@ 0x100
 8027ac4:	1b52      	subs	r2, r2, r5
 8027ac6:	b292      	uxth	r2, r2
 8027ac8:	fb02 000b 	mla	r0, r2, fp, r0
 8027acc:	fb05 000a 	mla	r0, r5, sl, r0
 8027ad0:	fb08 0009 	mla	r0, r8, r9, r0
 8027ad4:	1200      	asrs	r0, r0, #8
 8027ad6:	7008      	strb	r0, [r1, #0]
 8027ad8:	f897 9001 	ldrb.w	r9, [r7, #1]
 8027adc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8027ae0:	fb06 f909 	mul.w	r9, r6, r9
 8027ae4:	fb02 9904 	mla	r9, r2, r4, r9
 8027ae8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8027aec:	7858      	ldrb	r0, [r3, #1]
 8027aee:	fb05 9404 	mla	r4, r5, r4, r9
 8027af2:	fb08 4000 	mla	r0, r8, r0, r4
 8027af6:	1200      	asrs	r0, r0, #8
 8027af8:	7048      	strb	r0, [r1, #1]
 8027afa:	78bc      	ldrb	r4, [r7, #2]
 8027afc:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8027b00:	fb06 f604 	mul.w	r6, r6, r4
 8027b04:	fb02 6600 	mla	r6, r2, r0, r6
 8027b08:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8027b0c:	789b      	ldrb	r3, [r3, #2]
 8027b0e:	fb05 6500 	mla	r5, r5, r0, r6
 8027b12:	fb08 5803 	mla	r8, r8, r3, r5
 8027b16:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027b1a:	f881 8002 	strb.w	r8, [r1, #2]
 8027b1e:	b003      	add	sp, #12
 8027b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b24:	b385      	cbz	r5, 8027b88 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x150>
 8027b26:	2e00      	cmp	r6, #0
 8027b28:	db40      	blt.n	8027bac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8027b2a:	45b0      	cmp	r8, r6
 8027b2c:	dd3e      	ble.n	8027bac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 8027b2e:	f819 e008 	ldrb.w	lr, [r9, r8]
 8027b32:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8027b36:	449e      	add	lr, r3
 8027b38:	3601      	adds	r6, #1
 8027b3a:	f89e a000 	ldrb.w	sl, [lr]
 8027b3e:	d431      	bmi.n	8027ba4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8027b40:	45b0      	cmp	r8, r6
 8027b42:	dd2f      	ble.n	8027ba4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8027b44:	2800      	cmp	r0, #0
 8027b46:	d03f      	beq.n	8027bc8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x190>
 8027b48:	44c8      	add	r8, r9
 8027b4a:	f898 4001 	ldrb.w	r4, [r8, #1]
 8027b4e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027b52:	f813 9004 	ldrb.w	r9, [r3, r4]
 8027b56:	4423      	add	r3, r4
 8027b58:	e79f      	b.n	8027a9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8027b5a:	2e00      	cmp	r6, #0
 8027b5c:	db01      	blt.n	8027b62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8027b5e:	45b0      	cmp	r8, r6
 8027b60:	dc1a      	bgt.n	8027b98 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>
 8027b62:	f10d 0c04 	add.w	ip, sp, #4
 8027b66:	1c72      	adds	r2, r6, #1
 8027b68:	f89c b000 	ldrb.w	fp, [ip]
 8027b6c:	d409      	bmi.n	8027b82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8027b6e:	4590      	cmp	r8, r2
 8027b70:	dd07      	ble.n	8027b82 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 8027b72:	b1f0      	cbz	r0, 8027bb2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x17a>
 8027b74:	f899 7001 	ldrb.w	r7, [r9, #1]
 8027b78:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027b7c:	5dda      	ldrb	r2, [r3, r7]
 8027b7e:	441f      	add	r7, r3
 8027b80:	e781      	b.n	8027a86 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8027b82:	b2e2      	uxtb	r2, r4
 8027b84:	af01      	add	r7, sp, #4
 8027b86:	e77e      	b.n	8027a86 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8027b88:	280f      	cmp	r0, #15
 8027b8a:	fa5f fa84 	uxtb.w	sl, r4
 8027b8e:	d81f      	bhi.n	8027bd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8027b90:	ab01      	add	r3, sp, #4
 8027b92:	469e      	mov	lr, r3
 8027b94:	46d1      	mov	r9, sl
 8027b96:	e786      	b.n	8027aa6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x6e>
 8027b98:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8027b9c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027ba0:	449c      	add	ip, r3
 8027ba2:	e7e0      	b.n	8027b66 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8027ba4:	fa5f f984 	uxtb.w	r9, r4
 8027ba8:	ab01      	add	r3, sp, #4
 8027baa:	e776      	b.n	8027a9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8027bac:	f10d 0e04 	add.w	lr, sp, #4
 8027bb0:	e7c2      	b.n	8027b38 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x100>
 8027bb2:	f1be 0f00 	cmp.w	lr, #0
 8027bb6:	b2e2      	uxtb	r2, r4
 8027bb8:	af01      	add	r7, sp, #4
 8027bba:	f6bf af67 	bge.w	8027a8c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x54>
 8027bbe:	463b      	mov	r3, r7
 8027bc0:	46be      	mov	lr, r7
 8027bc2:	4691      	mov	r9, r2
 8027bc4:	4692      	mov	sl, r2
 8027bc6:	e76b      	b.n	8027aa0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8027bc8:	fa5f f984 	uxtb.w	r9, r4
 8027bcc:	ab01      	add	r3, sp, #4
 8027bce:	e767      	b.n	8027aa0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8027bd0:	4b03      	ldr	r3, [pc, #12]	@ (8027be0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1a8>)
 8027bd2:	4a04      	ldr	r2, [pc, #16]	@ (8027be4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1ac>)
 8027bd4:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8027bd8:	4803      	ldr	r0, [pc, #12]	@ (8027be8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1b0>)
 8027bda:	f003 f907 	bl	802adec <__assert_func>
 8027bde:	bf00      	nop
 8027be0:	0802e264 	.word	0x0802e264
 8027be4:	0802e8e0 	.word	0x0802e8e0
 8027be8:	0802e3ec 	.word	0x0802e3ec

08027bec <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027bf0:	ed2d 8b0a 	vpush	{d8-d12}
 8027bf4:	eeb0 aa40 	vmov.f32	s20, s0
 8027bf8:	eef0 9a60 	vmov.f32	s19, s1
 8027bfc:	eeb0 9a41 	vmov.f32	s18, s2
 8027c00:	eef0 8a62 	vmov.f32	s17, s5
 8027c04:	eeb0 8a43 	vmov.f32	s16, s6
 8027c08:	eeb0 ca44 	vmov.f32	s24, s8
 8027c0c:	eef0 ba64 	vmov.f32	s23, s9
 8027c10:	eeb0 ba45 	vmov.f32	s22, s10
 8027c14:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8027c18:	b093      	sub	sp, #76	@ 0x4c
 8027c1a:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8027c1e:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	@ 0xac
 8027c22:	e9dd 9b27 	ldrd	r9, fp, [sp, #156]	@ 0x9c
 8027c26:	9011      	str	r0, [sp, #68]	@ 0x44
 8027c28:	461a      	mov	r2, r3
 8027c2a:	6860      	ldr	r0, [r4, #4]
 8027c2c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8027c2e:	fb00 1803 	mla	r8, r0, r3, r1
 8027c32:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027c34:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8027c36:	6821      	ldr	r1, [r4, #0]
 8027c38:	685b      	ldr	r3, [r3, #4]
 8027c3a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8027c3e:	6800      	ldr	r0, [r0, #0]
 8027c40:	eb01 0a08 	add.w	sl, r1, r8
 8027c44:	3304      	adds	r3, #4
 8027c46:	f8dd 80a4 	ldr.w	r8, [sp, #164]	@ 0xa4
 8027c4a:	9009      	str	r0, [sp, #36]	@ 0x24
 8027c4c:	9307      	str	r3, [sp, #28]
 8027c4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027c50:	2b00      	cmp	r3, #0
 8027c52:	dc02      	bgt.n	8027c5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	dd61      	ble.n	8027d1e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8027c5a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027c5c:	2a00      	cmp	r2, #0
 8027c5e:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8027c62:	b230      	sxth	r0, r6
 8027c64:	fa0f f78e 	sxth.w	r7, lr
 8027c68:	f340 81fe 	ble.w	8028068 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 8027c6c:	f8cd e018 	str.w	lr, [sp, #24]
 8027c70:	f8dd e0a8 	ldr.w	lr, [sp, #168]	@ 0xa8
 8027c74:	1e45      	subs	r5, r0, #1
 8027c76:	f107 3cff 	add.w	ip, r7, #4294967295
 8027c7a:	ea5f 4329 	movs.w	r3, r9, asr #16
 8027c7e:	ea4f 412b 	mov.w	r1, fp, asr #16
 8027c82:	d405      	bmi.n	8027c90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027c84:	42ab      	cmp	r3, r5
 8027c86:	da03      	bge.n	8027c90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027c88:	2900      	cmp	r1, #0
 8027c8a:	db01      	blt.n	8027c90 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8027c8c:	4561      	cmp	r1, ip
 8027c8e:	db4b      	blt.n	8027d28 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8027c90:	1c5c      	adds	r4, r3, #1
 8027c92:	d406      	bmi.n	8027ca2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027c94:	4284      	cmp	r4, r0
 8027c96:	dc04      	bgt.n	8027ca2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027c98:	1c4c      	adds	r4, r1, #1
 8027c9a:	d402      	bmi.n	8027ca2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027c9c:	42bc      	cmp	r4, r7
 8027c9e:	f340 815e 	ble.w	8027f5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8027ca2:	3a01      	subs	r2, #1
 8027ca4:	44c1      	add	r9, r8
 8027ca6:	44f3      	add	fp, lr
 8027ca8:	f10a 0a03 	add.w	sl, sl, #3
 8027cac:	d1e5      	bne.n	8027c7a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027cae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027cb0:	2b00      	cmp	r3, #0
 8027cb2:	dd34      	ble.n	8027d1e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8027cb4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8027cb8:	ee79 9aab 	vadd.f32	s19, s19, s23
 8027cbc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8027cc0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8027cc4:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8027cc8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027ccc:	ee76 6a68 	vsub.f32	s13, s12, s17
 8027cd0:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8027cd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027cd8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027cdc:	ee16 2a90 	vmov	r2, s13
 8027ce0:	3b01      	subs	r3, #1
 8027ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8027ce4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027ce6:	fb92 f8f3 	sdiv	r8, r2, r3
 8027cea:	ee17 2a10 	vmov	r2, s14
 8027cee:	eeb0 7a48 	vmov.f32	s14, s16
 8027cf2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027cf6:	ee17 ba10 	vmov	fp, s14
 8027cfa:	eeb0 7a68 	vmov.f32	s14, s17
 8027cfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d02:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027d06:	932a      	str	r3, [sp, #168]	@ 0xa8
 8027d08:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027d0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027d0c:	ee17 9a10 	vmov	r9, s14
 8027d10:	eeb0 8a67 	vmov.f32	s16, s15
 8027d14:	eef0 8a46 	vmov.f32	s17, s12
 8027d18:	bf18      	it	ne
 8027d1a:	461a      	movne	r2, r3
 8027d1c:	e797      	b.n	8027c4e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8027d1e:	b013      	add	sp, #76	@ 0x4c
 8027d20:	ecbd 8b0a 	vpop	{d8-d12}
 8027d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d28:	f8dd e018 	ldr.w	lr, [sp, #24]
 8027d2c:	1e51      	subs	r1, r2, #1
 8027d2e:	fb08 9301 	mla	r3, r8, r1, r9
 8027d32:	141b      	asrs	r3, r3, #16
 8027d34:	9106      	str	r1, [sp, #24]
 8027d36:	f100 80aa 	bmi.w	8027e8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027d3a:	42ab      	cmp	r3, r5
 8027d3c:	f280 80a7 	bge.w	8027e8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027d40:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8027d42:	fb03 b301 	mla	r3, r3, r1, fp
 8027d46:	141b      	asrs	r3, r3, #16
 8027d48:	f100 80a1 	bmi.w	8027e8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027d4c:	3f01      	subs	r7, #1
 8027d4e:	42bb      	cmp	r3, r7
 8027d50:	f280 809d 	bge.w	8027e8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027d54:	2a00      	cmp	r2, #0
 8027d56:	ddaa      	ble.n	8027cae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027d58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027d5c:	eb0a 0302 	add.w	r3, sl, r2
 8027d60:	9308      	str	r3, [sp, #32]
 8027d62:	f10a 0a03 	add.w	sl, sl, #3
 8027d66:	f8cd 80a4 	str.w	r8, [sp, #164]	@ 0xa4
 8027d6a:	e062      	b.n	8027e32 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027d6c:	784c      	ldrb	r4, [r1, #1]
 8027d6e:	180d      	adds	r5, r1, r0
 8027d70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027d74:	4434      	add	r4, r6
 8027d76:	2a00      	cmp	r2, #0
 8027d78:	d07c      	beq.n	8027e74 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8027d7a:	5c08      	ldrb	r0, [r1, r0]
 8027d7c:	786f      	ldrb	r7, [r5, #1]
 8027d7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027d82:	1981      	adds	r1, r0, r6
 8027d84:	4608      	mov	r0, r1
 8027d86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027d8a:	9106      	str	r1, [sp, #24]
 8027d8c:	4437      	add	r7, r6
 8027d8e:	b29b      	uxth	r3, r3
 8027d90:	b292      	uxth	r2, r2
 8027d92:	fb03 f502 	mul.w	r5, r3, r2
 8027d96:	011b      	lsls	r3, r3, #4
 8027d98:	f894 e000 	ldrb.w	lr, [r4]
 8027d9c:	1b59      	subs	r1, r3, r5
 8027d9e:	b289      	uxth	r1, r1
 8027da0:	fb01 fe0e 	mul.w	lr, r1, lr
 8027da4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8027da8:	b292      	uxth	r2, r2
 8027daa:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8027dae:	f816 6008 	ldrb.w	r6, [r6, r8]
 8027db2:	1a9b      	subs	r3, r3, r2
 8027db4:	b29b      	uxth	r3, r3
 8027db6:	fb03 e606 	mla	r6, r3, r6, lr
 8027dba:	f890 e000 	ldrb.w	lr, [r0]
 8027dbe:	f897 8000 	ldrb.w	r8, [r7]
 8027dc2:	fb02 660e 	mla	r6, r2, lr, r6
 8027dc6:	fb05 6808 	mla	r8, r5, r8, r6
 8027dca:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027dce:	f80a 8c03 	strb.w	r8, [sl, #-3]
 8027dd2:	f894 8001 	ldrb.w	r8, [r4, #1]
 8027dd6:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8027dd8:	fb01 f608 	mul.w	r6, r1, r8
 8027ddc:	f89c e001 	ldrb.w	lr, [ip, #1]
 8027de0:	4481      	add	r9, r0
 8027de2:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8027de4:	fb03 680e 	mla	r8, r3, lr, r6
 8027de8:	4483      	add	fp, r0
 8027dea:	9806      	ldr	r0, [sp, #24]
 8027dec:	787e      	ldrb	r6, [r7, #1]
 8027dee:	f890 e001 	ldrb.w	lr, [r0, #1]
 8027df2:	fb02 8e0e 	mla	lr, r2, lr, r8
 8027df6:	fb05 ee06 	mla	lr, r5, r6, lr
 8027dfa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8027dfe:	f80a ec02 	strb.w	lr, [sl, #-2]
 8027e02:	78a4      	ldrb	r4, [r4, #2]
 8027e04:	f89c 6002 	ldrb.w	r6, [ip, #2]
 8027e08:	fb01 f104 	mul.w	r1, r1, r4
 8027e0c:	fb03 1106 	mla	r1, r3, r6, r1
 8027e10:	7883      	ldrb	r3, [r0, #2]
 8027e12:	78b8      	ldrb	r0, [r7, #2]
 8027e14:	fb02 1103 	mla	r1, r2, r3, r1
 8027e18:	fb05 1500 	mla	r5, r5, r0, r1
 8027e1c:	9b08      	ldr	r3, [sp, #32]
 8027e1e:	122d      	asrs	r5, r5, #8
 8027e20:	4553      	cmp	r3, sl
 8027e22:	f80a 5c01 	strb.w	r5, [sl, #-1]
 8027e26:	d030      	beq.n	8027e8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8027e28:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8027e2a:	f10a 0a03 	add.w	sl, sl, #3
 8027e2e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8027e32:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027e36:	ea4f 412b 	mov.w	r1, fp, asr #16
 8027e3a:	fb00 3101 	mla	r1, r0, r1, r3
 8027e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027e40:	9e07      	ldr	r6, [sp, #28]
 8027e42:	f812 8001 	ldrb.w	r8, [r2, r1]
 8027e46:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8027e4a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8027e4e:	4411      	add	r1, r2
 8027e50:	eb06 0c08 	add.w	ip, r6, r8
 8027e54:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	d187      	bne.n	8027d6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 8027e5c:	b17a      	cbz	r2, 8027e7e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8027e5e:	5c08      	ldrb	r0, [r1, r0]
 8027e60:	9907      	ldr	r1, [sp, #28]
 8027e62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027e66:	1841      	adds	r1, r0, r1
 8027e68:	4667      	mov	r7, ip
 8027e6a:	9106      	str	r1, [sp, #24]
 8027e6c:	4664      	mov	r4, ip
 8027e6e:	9e07      	ldr	r6, [sp, #28]
 8027e70:	4608      	mov	r0, r1
 8027e72:	e78c      	b.n	8027d8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027e74:	4667      	mov	r7, ip
 8027e76:	f8cd c018 	str.w	ip, [sp, #24]
 8027e7a:	4660      	mov	r0, ip
 8027e7c:	e787      	b.n	8027d8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027e7e:	4667      	mov	r7, ip
 8027e80:	f8cd c018 	str.w	ip, [sp, #24]
 8027e84:	4664      	mov	r4, ip
 8027e86:	4660      	mov	r0, ip
 8027e88:	e781      	b.n	8027d8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027e8a:	469a      	mov	sl, r3
 8027e8c:	e70f      	b.n	8027cae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027e8e:	2a00      	cmp	r2, #0
 8027e90:	f77f af0d 	ble.w	8027cae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027e94:	9d06      	ldr	r5, [sp, #24]
 8027e96:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027e9a:	ea4f 412b 	mov.w	r1, fp, asr #16
 8027e9e:	4657      	mov	r7, sl
 8027ea0:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
 8027ea4:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 8027ea6:	f8dd a0a8 	ldr.w	sl, [sp, #168]	@ 0xa8
 8027eaa:	2b00      	cmp	r3, #0
 8027eac:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027eb0:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8027eb4:	db31      	blt.n	8027f1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8027eb6:	f106 3cff 	add.w	ip, r6, #4294967295
 8027eba:	4563      	cmp	r3, ip
 8027ebc:	da2d      	bge.n	8027f1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8027ebe:	2900      	cmp	r1, #0
 8027ec0:	db2b      	blt.n	8027f1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8027ec2:	f10e 3cff 	add.w	ip, lr, #4294967295
 8027ec6:	4561      	cmp	r1, ip
 8027ec8:	da27      	bge.n	8027f1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8027eca:	fa0f fc86 	sxth.w	ip, r6
 8027ece:	fb01 330c 	mla	r3, r1, ip, r3
 8027ed2:	9e07      	ldr	r6, [sp, #28]
 8027ed4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027ed6:	f811 e003 	ldrb.w	lr, [r1, r3]
 8027eda:	440b      	add	r3, r1
 8027edc:	4631      	mov	r1, r6
 8027ede:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8027ee2:	4471      	add	r1, lr
 8027ee4:	910e      	str	r1, [sp, #56]	@ 0x38
 8027ee6:	2800      	cmp	r0, #0
 8027ee8:	d04f      	beq.n	8027f8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027eea:	7859      	ldrb	r1, [r3, #1]
 8027eec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027ef0:	1871      	adds	r1, r6, r1
 8027ef2:	9108      	str	r1, [sp, #32]
 8027ef4:	2a00      	cmp	r2, #0
 8027ef6:	f000 80b2 	beq.w	802805e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8027efa:	eb03 010c 	add.w	r1, r3, ip
 8027efe:	f813 600c 	ldrb.w	r6, [r3, ip]
 8027f02:	7849      	ldrb	r1, [r1, #1]
 8027f04:	9b07      	ldr	r3, [sp, #28]
 8027f06:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027f0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027f0e:	1859      	adds	r1, r3, r1
 8027f10:	18f3      	adds	r3, r6, r3
 8027f12:	910c      	str	r1, [sp, #48]	@ 0x30
 8027f14:	930d      	str	r3, [sp, #52]	@ 0x34
 8027f16:	9e08      	ldr	r6, [sp, #32]
 8027f18:	e03d      	b.n	8027f96 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027f1a:	f113 0c01 	adds.w	ip, r3, #1
 8027f1e:	d406      	bmi.n	8027f2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027f20:	45b4      	cmp	ip, r6
 8027f22:	dc04      	bgt.n	8027f2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027f24:	f111 0c01 	adds.w	ip, r1, #1
 8027f28:	d401      	bmi.n	8027f2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027f2a:	45f4      	cmp	ip, lr
 8027f2c:	dd1d      	ble.n	8027f6a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027f2e:	2d00      	cmp	r5, #0
 8027f30:	f107 0703 	add.w	r7, r7, #3
 8027f34:	44c1      	add	r9, r8
 8027f36:	44d3      	add	fp, sl
 8027f38:	dd07      	ble.n	8027f4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027f3a:	e9d4 6e02 	ldrd	r6, lr, [r4, #8]
 8027f3e:	3d01      	subs	r5, #1
 8027f40:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027f44:	ea4f 412b 	mov.w	r1, fp, asr #16
 8027f48:	e7af      	b.n	8027eaa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8027f4a:	9b06      	ldr	r3, [sp, #24]
 8027f4c:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8027f50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027f54:	3301      	adds	r3, #1
 8027f56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027f5a:	449a      	add	sl, r3
 8027f5c:	e6a7      	b.n	8027cae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027f5e:	3a01      	subs	r2, #1
 8027f60:	f8dd e018 	ldr.w	lr, [sp, #24]
 8027f64:	4615      	mov	r5, r2
 8027f66:	9206      	str	r2, [sp, #24]
 8027f68:	e799      	b.n	8027e9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8027f6a:	fa0f fe8e 	sxth.w	lr, lr
 8027f6e:	b236      	sxth	r6, r6
 8027f70:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8027f74:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8027f78:	e9cd 6e00 	strd	r6, lr, [sp]
 8027f7c:	9b07      	ldr	r3, [sp, #28]
 8027f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027f80:	4639      	mov	r1, r7
 8027f82:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027f84:	f7ff fd58 	bl	8027a38 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8027f88:	e7d1      	b.n	8027f2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027f8a:	2a00      	cmp	r2, #0
 8027f8c:	d15b      	bne.n	8028046 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8027f8e:	460e      	mov	r6, r1
 8027f90:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 8027f94:	9108      	str	r1, [sp, #32]
 8027f96:	b283      	uxth	r3, r0
 8027f98:	b292      	uxth	r2, r2
 8027f9a:	fb03 f002 	mul.w	r0, r3, r2
 8027f9e:	011b      	lsls	r3, r3, #4
 8027fa0:	f896 c000 	ldrb.w	ip, [r6]
 8027fa4:	1a19      	subs	r1, r3, r0
 8027fa6:	b289      	uxth	r1, r1
 8027fa8:	fb01 fc0c 	mul.w	ip, r1, ip
 8027fac:	9e07      	ldr	r6, [sp, #28]
 8027fae:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8027fb2:	b292      	uxth	r2, r2
 8027fb4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8027fb8:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8027fbc:	1a9b      	subs	r3, r3, r2
 8027fbe:	b29b      	uxth	r3, r3
 8027fc0:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027fc4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8027fc6:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8027fca:	f896 e000 	ldrb.w	lr, [r6]
 8027fce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8027fd0:	f896 c000 	ldrb.w	ip, [r6]
 8027fd4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8027fd6:	fb02 6e0e 	mla	lr, r2, lr, r6
 8027fda:	fb00 ec0c 	mla	ip, r0, ip, lr
 8027fde:	9e08      	ldr	r6, [sp, #32]
 8027fe0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8027fe4:	f887 c000 	strb.w	ip, [r7]
 8027fe8:	f896 c001 	ldrb.w	ip, [r6, #1]
 8027fec:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8027fee:	fb01 fc0c 	mul.w	ip, r1, ip
 8027ff2:	f896 e001 	ldrb.w	lr, [r6, #1]
 8027ff6:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8027ff8:	fb03 ce0e 	mla	lr, r3, lr, ip
 8027ffc:	f896 c001 	ldrb.w	ip, [r6, #1]
 8028000:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028002:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8028006:	f896 c001 	ldrb.w	ip, [r6, #1]
 802800a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 802800c:	fb02 ee06 	mla	lr, r2, r6, lr
 8028010:	fb00 ec0c 	mla	ip, r0, ip, lr
 8028014:	9e08      	ldr	r6, [sp, #32]
 8028016:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802801a:	f887 c001 	strb.w	ip, [r7, #1]
 802801e:	f896 c002 	ldrb.w	ip, [r6, #2]
 8028022:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8028024:	fb01 f10c 	mul.w	r1, r1, ip
 8028028:	f896 e002 	ldrb.w	lr, [r6, #2]
 802802c:	fb03 110e 	mla	r1, r3, lr, r1
 8028030:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028032:	789e      	ldrb	r6, [r3, #2]
 8028034:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028036:	fb02 1206 	mla	r2, r2, r6, r1
 802803a:	789b      	ldrb	r3, [r3, #2]
 802803c:	fb00 2303 	mla	r3, r0, r3, r2
 8028040:	121b      	asrs	r3, r3, #8
 8028042:	70bb      	strb	r3, [r7, #2]
 8028044:	e773      	b.n	8027f2e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028046:	4631      	mov	r1, r6
 8028048:	f813 600c 	ldrb.w	r6, [r3, ip]
 802804c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802804e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8028052:	1871      	adds	r1, r6, r1
 8028054:	930c      	str	r3, [sp, #48]	@ 0x30
 8028056:	910d      	str	r1, [sp, #52]	@ 0x34
 8028058:	9308      	str	r3, [sp, #32]
 802805a:	461e      	mov	r6, r3
 802805c:	e79b      	b.n	8027f96 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802805e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8028060:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8028064:	460e      	mov	r6, r1
 8028066:	e796      	b.n	8027f96 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8028068:	f43f ae21 	beq.w	8027cae <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802806c:	1e45      	subs	r5, r0, #1
 802806e:	e65d      	b.n	8027d2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>

08028070 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8028070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028074:	b087      	sub	sp, #28
 8028076:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 802807a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 802807e:	fb06 080c 	mla	r8, r6, ip, r0
 8028082:	2e00      	cmp	r6, #0
 8028084:	4696      	mov	lr, r2
 8028086:	eb02 0a08 	add.w	sl, r2, r8
 802808a:	f106 0b01 	add.w	fp, r6, #1
 802808e:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	@ 0x44
 8028092:	f89d 7050 	ldrb.w	r7, [sp, #80]	@ 0x50
 8028096:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 802809a:	f89d 4058 	ldrb.w	r4, [sp, #88]	@ 0x58
 802809e:	db02      	blt.n	80280a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 80280a0:	42b2      	cmp	r2, r6
 80280a2:	f300 80f1 	bgt.w	8028288 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x218>
 80280a6:	2600      	movs	r6, #0
 80280a8:	46b1      	mov	r9, r6
 80280aa:	46b0      	mov	r8, r6
 80280ac:	46b6      	mov	lr, r6
 80280ae:	f1bb 0f00 	cmp.w	fp, #0
 80280b2:	db02      	blt.n	80280ba <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x4a>
 80280b4:	455a      	cmp	r2, fp
 80280b6:	f300 8101 	bgt.w	80282bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80280ba:	f04f 0c00 	mov.w	ip, #0
 80280be:	e9cd cc02 	strd	ip, ip, [sp, #8]
 80280c2:	f8cd c004 	str.w	ip, [sp, #4]
 80280c6:	2f0f      	cmp	r7, #15
 80280c8:	f200 813a 	bhi.w	8028340 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80280cc:	2d0f      	cmp	r5, #15
 80280ce:	f200 8137 	bhi.w	8028340 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80280d2:	b2a8      	uxth	r0, r5
 80280d4:	b2bb      	uxth	r3, r7
 80280d6:	fb00 f503 	mul.w	r5, r0, r3
 80280da:	9a01      	ldr	r2, [sp, #4]
 80280dc:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 80280e0:	b280      	uxth	r0, r0
 80280e2:	fb00 fa02 	mul.w	sl, r0, r2
 80280e6:	fb05 fb0c 	mul.w	fp, r5, ip
 80280ea:	011b      	lsls	r3, r3, #4
 80280ec:	1b5f      	subs	r7, r3, r5
 80280ee:	b2bf      	uxth	r7, r7
 80280f0:	fb07 f206 	mul.w	r2, r7, r6
 80280f4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80280f8:	1a1b      	subs	r3, r3, r0
 80280fa:	b29b      	uxth	r3, r3
 80280fc:	fb03 2209 	mla	r2, r3, r9, r2
 8028100:	4452      	add	r2, sl
 8028102:	445a      	add	r2, fp
 8028104:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028108:	2a00      	cmp	r2, #0
 802810a:	f000 80ba 	beq.w	8028282 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x212>
 802810e:	b2a4      	uxth	r4, r4
 8028110:	fb02 f204 	mul.w	r2, r2, r4
 8028114:	f102 0a01 	add.w	sl, r2, #1
 8028118:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802811c:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8028120:	9205      	str	r2, [sp, #20]
 8028122:	f008 12ff 	and.w	r2, r8, #16711935	@ 0xff00ff
 8028126:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802812a:	fb06 f202 	mul.w	r2, r6, r2
 802812e:	fb06 f608 	mul.w	r6, r6, r8
 8028132:	f00e 1bff 	and.w	fp, lr, #16711935	@ 0xff00ff
 8028136:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802813a:	fb09 fb0b 	mul.w	fp, r9, fp
 802813e:	fb09 fe0e 	mul.w	lr, r9, lr
 8028142:	f506 7980 	add.w	r9, r6, #256	@ 0x100
 8028146:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802814a:	0a36      	lsrs	r6, r6, #8
 802814c:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8028150:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8028154:	fb07 f606 	mul.w	r6, r7, r6
 8028158:	9404      	str	r4, [sp, #16]
 802815a:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 802815e:	9c03      	ldr	r4, [sp, #12]
 8028160:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8028164:	4490      	add	r8, r2
 8028166:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802816a:	f004 12ff 	and.w	r2, r4, #16711935	@ 0xff00ff
 802816e:	fb0c f202 	mul.w	r2, ip, r2
 8028172:	f404 497f 	and.w	r9, r4, #65280	@ 0xff00
 8028176:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 802817a:	9c02      	ldr	r4, [sp, #8]
 802817c:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8028180:	fb0c fc09 	mul.w	ip, ip, r9
 8028184:	fb08 f807 	mul.w	r8, r8, r7
 8028188:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 802818c:	9603      	str	r6, [sp, #12]
 802818e:	f50e 7980 	add.w	r9, lr, #256	@ 0x100
 8028192:	9e01      	ldr	r6, [sp, #4]
 8028194:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028198:	44d3      	add	fp, sl
 802819a:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 802819e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80281a2:	f404 497f 	and.w	r9, r4, #65280	@ 0xff00
 80281a6:	fb06 f707 	mul.w	r7, r6, r7
 80281aa:	fb06 f909 	mul.w	r9, r6, r9
 80281ae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80281b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80281b6:	9e03      	ldr	r6, [sp, #12]
 80281b8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80281bc:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 80281c0:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80281c4:	fb0b 8803 	mla	r8, fp, r3, r8
 80281c8:	fb03 660e 	mla	r6, r3, lr, r6
 80281cc:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 80281d0:	f50c 7e80 	add.w	lr, ip, #256	@ 0x100
 80281d4:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 80281d8:	4492      	add	sl, r2
 80281da:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80281de:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80281e2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80281e6:	0a3a      	lsrs	r2, r7, #8
 80281e8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80281ec:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80281f0:	fb0b 8b05 	mla	fp, fp, r5, r8
 80281f4:	fb05 660e 	mla	r6, r5, lr, r6
 80281f8:	f002 18ff 	and.w	r8, r2, #16711935	@ 0xff00ff
 80281fc:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028200:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8028204:	44b8      	add	r8, r7
 8028206:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 802820a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802820e:	0a2d      	lsrs	r5, r5, #8
 8028210:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8028214:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028218:	fb00 6505 	mla	r5, r0, r5, r6
 802821c:	fb08 b800 	mla	r8, r8, r0, fp
 8028220:	0a2d      	lsrs	r5, r5, #8
 8028222:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8028226:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802822a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802822e:	4328      	orrs	r0, r5
 8028230:	784b      	ldrb	r3, [r1, #1]
 8028232:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8028236:	9c04      	ldr	r4, [sp, #16]
 8028238:	788d      	ldrb	r5, [r1, #2]
 802823a:	fa5f fa80 	uxtb.w	sl, r0
 802823e:	fb13 f602 	smulbb	r6, r3, r2
 8028242:	fb15 f502 	smulbb	r5, r5, r2
 8028246:	fb1a fa04 	smulbb	sl, sl, r4
 802824a:	780f      	ldrb	r7, [r1, #0]
 802824c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8028250:	0c00      	lsrs	r0, r0, #16
 8028252:	fb0c 6304 	mla	r3, ip, r4, r6
 8028256:	fb07 a202 	mla	r2, r7, r2, sl
 802825a:	fb00 5404 	mla	r4, r0, r4, r5
 802825e:	b29b      	uxth	r3, r3
 8028260:	b292      	uxth	r2, r2
 8028262:	b2a4      	uxth	r4, r4
 8028264:	1c56      	adds	r6, r2, #1
 8028266:	1c5d      	adds	r5, r3, #1
 8028268:	1c60      	adds	r0, r4, #1
 802826a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802826e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8028272:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8028276:	1212      	asrs	r2, r2, #8
 8028278:	121b      	asrs	r3, r3, #8
 802827a:	1224      	asrs	r4, r4, #8
 802827c:	700a      	strb	r2, [r1, #0]
 802827e:	704b      	strb	r3, [r1, #1]
 8028280:	708c      	strb	r4, [r1, #2]
 8028282:	b007      	add	sp, #28
 8028284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028288:	2800      	cmp	r0, #0
 802828a:	db01      	blt.n	8028290 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x220>
 802828c:	4584      	cmp	ip, r0
 802828e:	dc3d      	bgt.n	802830c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>
 8028290:	f04f 0900 	mov.w	r9, #0
 8028294:	46ce      	mov	lr, r9
 8028296:	1c46      	adds	r6, r0, #1
 8028298:	d42a      	bmi.n	80282f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802829a:	45b4      	cmp	ip, r6
 802829c:	dd28      	ble.n	80282f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802829e:	b137      	cbz	r7, 80282ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x23e>
 80282a0:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80282a4:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 80282a8:	ea4f 6618 	mov.w	r6, r8, lsr #24
 80282ac:	e6ff      	b.n	80280ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80282ae:	f1bb 0f00 	cmp.w	fp, #0
 80282b2:	db3e      	blt.n	8028332 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 80282b4:	455a      	cmp	r2, fp
 80282b6:	dd3c      	ble.n	8028332 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 80282b8:	463e      	mov	r6, r7
 80282ba:	46b8      	mov	r8, r7
 80282bc:	b1dd      	cbz	r5, 80282f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x286>
 80282be:	2800      	cmp	r0, #0
 80282c0:	db30      	blt.n	8028324 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 80282c2:	4584      	cmp	ip, r0
 80282c4:	dd2e      	ble.n	8028324 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 80282c6:	f81a 200c 	ldrb.w	r2, [sl, ip]
 80282ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80282ce:	9202      	str	r2, [sp, #8]
 80282d0:	0e12      	lsrs	r2, r2, #24
 80282d2:	9201      	str	r2, [sp, #4]
 80282d4:	3001      	adds	r0, #1
 80282d6:	d420      	bmi.n	802831a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 80282d8:	4584      	cmp	ip, r0
 80282da:	dd1e      	ble.n	802831a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 80282dc:	b337      	cbz	r7, 802832c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2bc>
 80282de:	44d4      	add	ip, sl
 80282e0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80282e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80282e8:	9303      	str	r3, [sp, #12]
 80282ea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80282ee:	e6ea      	b.n	80280c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 80282f0:	2600      	movs	r6, #0
 80282f2:	46b0      	mov	r8, r6
 80282f4:	e6db      	b.n	80280ae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80282f6:	2f0f      	cmp	r7, #15
 80282f8:	d822      	bhi.n	8028340 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80282fa:	b2bb      	uxth	r3, r7
 80282fc:	4628      	mov	r0, r5
 80282fe:	46ab      	mov	fp, r5
 8028300:	46aa      	mov	sl, r5
 8028302:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8028306:	46ac      	mov	ip, r5
 8028308:	9501      	str	r5, [sp, #4]
 802830a:	e6ee      	b.n	80280ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 802830c:	f81e 6008 	ldrb.w	r6, [lr, r8]
 8028310:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
 8028314:	ea4f 691e 	mov.w	r9, lr, lsr #24
 8028318:	e7bd      	b.n	8028296 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x226>
 802831a:	f04f 0c00 	mov.w	ip, #0
 802831e:	f8cd c00c 	str.w	ip, [sp, #12]
 8028322:	e6d0      	b.n	80280c6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 8028324:	2200      	movs	r2, #0
 8028326:	e9cd 2201 	strd	r2, r2, [sp, #4]
 802832a:	e7d3      	b.n	80282d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802832c:	9703      	str	r7, [sp, #12]
 802832e:	46bc      	mov	ip, r7
 8028330:	e6cc      	b.n	80280cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 8028332:	46b8      	mov	r8, r7
 8028334:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8028338:	46bc      	mov	ip, r7
 802833a:	9701      	str	r7, [sp, #4]
 802833c:	463e      	mov	r6, r7
 802833e:	e6c5      	b.n	80280cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 8028340:	4b03      	ldr	r3, [pc, #12]	@ (8028350 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e0>)
 8028342:	4a04      	ldr	r2, [pc, #16]	@ (8028354 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e4>)
 8028344:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8028348:	4803      	ldr	r0, [pc, #12]	@ (8028358 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e8>)
 802834a:	f002 fd4f 	bl	802adec <__assert_func>
 802834e:	bf00      	nop
 8028350:	0802e264 	.word	0x0802e264
 8028354:	0802e8e0 	.word	0x0802e8e0
 8028358:	0802e3ec 	.word	0x0802e3ec

0802835c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028360:	ed2d 8b08 	vpush	{d8-d11}
 8028364:	b0a9      	sub	sp, #164	@ 0xa4
 8028366:	9c3f      	ldr	r4, [sp, #252]	@ 0xfc
 8028368:	9022      	str	r0, [sp, #136]	@ 0x88
 802836a:	9114      	str	r1, [sp, #80]	@ 0x50
 802836c:	6860      	ldr	r0, [r4, #4]
 802836e:	9940      	ldr	r1, [sp, #256]	@ 0x100
 8028370:	9217      	str	r2, [sp, #92]	@ 0x5c
 8028372:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8028374:	eeb0 aa40 	vmov.f32	s20, s0
 8028378:	fb00 1b02 	mla	fp, r0, r2, r1
 802837c:	6821      	ldr	r1, [r4, #0]
 802837e:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 8028382:	eb01 0800 	add.w	r8, r1, r0
 8028386:	e9dd ab3b 	ldrd	sl, fp, [sp, #236]	@ 0xec
 802838a:	eef0 9a60 	vmov.f32	s19, s1
 802838e:	eeb0 9a41 	vmov.f32	s18, s2
 8028392:	eef0 8a62 	vmov.f32	s17, s5
 8028396:	eeb0 8a43 	vmov.f32	s16, s6
 802839a:	eef0 ba44 	vmov.f32	s23, s8
 802839e:	eeb0 ba64 	vmov.f32	s22, s9
 80283a2:	eef0 aa45 	vmov.f32	s21, s10
 80283a6:	46c1      	mov	r9, r8
 80283a8:	465f      	mov	r7, fp
 80283aa:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 80283ac:	9d42      	ldr	r5, [sp, #264]	@ 0x108
 80283ae:	6852      	ldr	r2, [r2, #4]
 80283b0:	f89d 410c 	ldrb.w	r4, [sp, #268]	@ 0x10c
 80283b4:	3204      	adds	r2, #4
 80283b6:	682d      	ldr	r5, [r5, #0]
 80283b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80283ba:	b2a2      	uxth	r2, r4
 80283bc:	9423      	str	r4, [sp, #140]	@ 0x8c
 80283be:	9511      	str	r5, [sp, #68]	@ 0x44
 80283c0:	9216      	str	r2, [sp, #88]	@ 0x58
 80283c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80283c4:	2a00      	cmp	r2, #0
 80283c6:	dc02      	bgt.n	80283ce <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80283c8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80283ca:	2a00      	cmp	r2, #0
 80283cc:	dd65      	ble.n	802849a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80283ce:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 80283d0:	2b00      	cmp	r3, #0
 80283d2:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 80283d6:	b235      	sxth	r5, r6
 80283d8:	fa0f f88c 	sxth.w	r8, ip
 80283dc:	f340 838b 	ble.w	8028af6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 80283e0:	1e6c      	subs	r4, r5, #1
 80283e2:	f108 3eff 	add.w	lr, r8, #4294967295
 80283e6:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 80283ea:	e9dd cb3d 	ldrd	ip, fp, [sp, #244]	@ 0xf4
 80283ee:	ea5f 422a 	movs.w	r2, sl, asr #16
 80283f2:	ea4f 4127 	mov.w	r1, r7, asr #16
 80283f6:	d405      	bmi.n	8028404 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80283f8:	42a2      	cmp	r2, r4
 80283fa:	da03      	bge.n	8028404 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80283fc:	2900      	cmp	r1, #0
 80283fe:	db01      	blt.n	8028404 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028400:	4571      	cmp	r1, lr
 8028402:	db4f      	blt.n	80284a4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8028404:	1c50      	adds	r0, r2, #1
 8028406:	d406      	bmi.n	8028416 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028408:	42a8      	cmp	r0, r5
 802840a:	dc04      	bgt.n	8028416 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802840c:	1c48      	adds	r0, r1, #1
 802840e:	d402      	bmi.n	8028416 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028410:	4540      	cmp	r0, r8
 8028412:	f340 834c 	ble.w	8028aae <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8028416:	3b01      	subs	r3, #1
 8028418:	44e2      	add	sl, ip
 802841a:	445f      	add	r7, fp
 802841c:	f109 0903 	add.w	r9, r9, #3
 8028420:	d1e5      	bne.n	80283ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028422:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028424:	2b00      	cmp	r3, #0
 8028426:	dd38      	ble.n	802849a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8028428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802842c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028430:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028434:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028438:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802843c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8028440:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028444:	ee76 6a68 	vsub.f32	s13, s12, s17
 8028448:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802844c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028450:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028454:	ee16 2a90 	vmov	r2, s13
 8028458:	3b01      	subs	r3, #1
 802845a:	9314      	str	r3, [sp, #80]	@ 0x50
 802845c:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802845e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028462:	ee17 2a10 	vmov	r2, s14
 8028466:	eeb0 7a48 	vmov.f32	s14, s16
 802846a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802846e:	ee17 7a10 	vmov	r7, s14
 8028472:	eeb0 7a68 	vmov.f32	s14, s17
 8028476:	933d      	str	r3, [sp, #244]	@ 0xf4
 8028478:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802847a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802847e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028482:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8028484:	933e      	str	r3, [sp, #248]	@ 0xf8
 8028486:	ee17 aa10 	vmov	sl, s14
 802848a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802848c:	eeb0 8a67 	vmov.f32	s16, s15
 8028490:	eef0 8a46 	vmov.f32	s17, s12
 8028494:	bf08      	it	eq
 8028496:	4613      	moveq	r3, r2
 8028498:	e793      	b.n	80283c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802849a:	b029      	add	sp, #164	@ 0xa4
 802849c:	ecbd 8b08 	vpop	{d8-d11}
 80284a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80284a4:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 80284a8:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 80284aa:	1e59      	subs	r1, r3, #1
 80284ac:	fb00 a201 	mla	r2, r0, r1, sl
 80284b0:	1412      	asrs	r2, r2, #16
 80284b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80284b4:	f100 8168 	bmi.w	8028788 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 80284b8:	42a2      	cmp	r2, r4
 80284ba:	f280 8165 	bge.w	8028788 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 80284be:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 80284c0:	fb02 7201 	mla	r2, r2, r1, r7
 80284c4:	1412      	asrs	r2, r2, #16
 80284c6:	f100 815f 	bmi.w	8028788 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 80284ca:	f108 31ff 	add.w	r1, r8, #4294967295
 80284ce:	428a      	cmp	r2, r1
 80284d0:	f280 815a 	bge.w	8028788 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 80284d4:	2b00      	cmp	r3, #0
 80284d6:	dda4      	ble.n	8028422 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80284d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80284dc:	444b      	add	r3, r9
 80284de:	9310      	str	r3, [sp, #64]	@ 0x40
 80284e0:	f109 0303 	add.w	r3, r9, #3
 80284e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80284e6:	46d1      	mov	r9, sl
 80284e8:	973c      	str	r7, [sp, #240]	@ 0xf0
 80284ea:	462e      	mov	r6, r5
 80284ec:	463b      	mov	r3, r7
 80284ee:	e12b      	b.n	8028748 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80284f0:	785f      	ldrb	r7, [r3, #1]
 80284f2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80284f6:	9712      	str	r7, [sp, #72]	@ 0x48
 80284f8:	0e3f      	lsrs	r7, r7, #24
 80284fa:	970b      	str	r7, [sp, #44]	@ 0x2c
 80284fc:	b16a      	cbz	r2, 802851a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80284fe:	199f      	adds	r7, r3, r6
 8028500:	5d9b      	ldrb	r3, [r3, r6]
 8028502:	4626      	mov	r6, r4
 8028504:	787f      	ldrb	r7, [r7, #1]
 8028506:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802850a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 802850e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028510:	9415      	str	r4, [sp, #84]	@ 0x54
 8028512:	0e1b      	lsrs	r3, r3, #24
 8028514:	0e24      	lsrs	r4, r4, #24
 8028516:	940d      	str	r4, [sp, #52]	@ 0x34
 8028518:	930c      	str	r3, [sp, #48]	@ 0x30
 802851a:	fa1f fc81 	uxth.w	ip, r1
 802851e:	b292      	uxth	r2, r2
 8028520:	fb0c f602 	mul.w	r6, ip, r2
 8028524:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8028528:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802852a:	ebac 0706 	sub.w	r7, ip, r6
 802852e:	b2bf      	uxth	r7, r7
 8028530:	fb07 f103 	mul.w	r1, r7, r3
 8028534:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8028538:	b292      	uxth	r2, r2
 802853a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802853e:	1a9b      	subs	r3, r3, r2
 8028540:	b29b      	uxth	r3, r3
 8028542:	fb03 1100 	mla	r1, r3, r0, r1
 8028546:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8028548:	fb02 1104 	mla	r1, r2, r4, r1
 802854c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802854e:	fb06 1104 	mla	r1, r6, r4, r1
 8028552:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028556:	2900      	cmp	r1, #0
 8028558:	f000 80e5 	beq.w	8028726 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802855c:	f005 14ff 	and.w	r4, r5, #16711935	@ 0xff00ff
 8028560:	28ff      	cmp	r0, #255	@ 0xff
 8028562:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028566:	940e      	str	r4, [sp, #56]	@ 0x38
 8028568:	950f      	str	r5, [sp, #60]	@ 0x3c
 802856a:	d01d      	beq.n	80285a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 802856c:	fb04 fe00 	mul.w	lr, r4, r0
 8028570:	fb05 f800 	mul.w	r8, r5, r0
 8028574:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8028578:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802857c:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8028580:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8028584:	44ae      	add	lr, r5
 8028586:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802858a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802858e:	0a00      	lsrs	r0, r0, #8
 8028590:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8028594:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028598:	ea4e 0e00 	orr.w	lr, lr, r0
 802859c:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80285a0:	900e      	str	r0, [sp, #56]	@ 0x38
 80285a2:	f40e 407f 	and.w	r0, lr, #65280	@ 0xff00
 80285a6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80285a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80285aa:	f000 1eff 	and.w	lr, r0, #16711935	@ 0xff00ff
 80285ae:	f400 487f 	and.w	r8, r0, #65280	@ 0xff00
 80285b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80285b4:	28ff      	cmp	r0, #255	@ 0xff
 80285b6:	d01c      	beq.n	80285f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80285b8:	fb0e fe00 	mul.w	lr, lr, r0
 80285bc:	fb08 f800 	mul.w	r8, r8, r0
 80285c0:	ea4f 251e 	mov.w	r5, lr, lsr #8
 80285c4:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80285c8:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80285cc:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 80285d0:	44ae      	add	lr, r5
 80285d2:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 80285d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80285da:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80285de:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80285e2:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80285e6:	ea4e 0808 	orr.w	r8, lr, r8
 80285ea:	f008 1eff 	and.w	lr, r8, #16711935	@ 0xff00ff
 80285ee:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80285f2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80285f4:	f000 1cff 	and.w	ip, r0, #16711935	@ 0xff00ff
 80285f8:	f400 4a7f 	and.w	sl, r0, #65280	@ 0xff00
 80285fc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80285fe:	28ff      	cmp	r0, #255	@ 0xff
 8028600:	d01c      	beq.n	802863c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028602:	fb0c fc00 	mul.w	ip, ip, r0
 8028606:	fb0a fa00 	mul.w	sl, sl, r0
 802860a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802860e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8028612:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8028616:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802861a:	44ac      	add	ip, r5
 802861c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028620:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028624:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028628:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802862c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028630:	ea4c 0a0a 	orr.w	sl, ip, sl
 8028634:	f00a 1cff 	and.w	ip, sl, #16711935	@ 0xff00ff
 8028638:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802863c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802863e:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 8028642:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8028646:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8028648:	2cff      	cmp	r4, #255	@ 0xff
 802864a:	d019      	beq.n	8028680 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802864c:	fb00 f004 	mul.w	r0, r0, r4
 8028650:	fb0b fb04 	mul.w	fp, fp, r4
 8028654:	0a05      	lsrs	r5, r0, #8
 8028656:	f005 14ff 	and.w	r4, r5, #16711935	@ 0xff00ff
 802865a:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802865e:	f50b 7580 	add.w	r5, fp, #256	@ 0x100
 8028662:	eb05 251b 	add.w	r5, r5, fp, lsr #8
 8028666:	4420      	add	r0, r4
 8028668:	0a00      	lsrs	r0, r0, #8
 802866a:	0a2d      	lsrs	r5, r5, #8
 802866c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8028670:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8028674:	ea40 0b0b 	orr.w	fp, r0, fp
 8028678:	f00b 10ff 	and.w	r0, fp, #16711935	@ 0xff00ff
 802867c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8028680:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8028682:	fb0e fe07 	mul.w	lr, lr, r7
 8028686:	fb01 f104 	mul.w	r1, r1, r4
 802868a:	1c4d      	adds	r5, r1, #1
 802868c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8028690:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028694:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028696:	fb08 f707 	mul.w	r7, r8, r7
 802869a:	fb05 ee03 	mla	lr, r5, r3, lr
 802869e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80286a0:	fb0c ee02 	mla	lr, ip, r2, lr
 80286a4:	fb05 7703 	mla	r7, r5, r3, r7
 80286a8:	fb0a 7702 	mla	r7, sl, r2, r7
 80286ac:	fb00 ee06 	mla	lr, r0, r6, lr
 80286b0:	fb0b 7706 	mla	r7, fp, r6, r7
 80286b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80286b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80286ba:	0a3f      	lsrs	r7, r7, #8
 80286bc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80286c0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80286c4:	ea4e 0307 	orr.w	r3, lr, r7
 80286c8:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 80286cc:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80286d0:	b2c9      	uxtb	r1, r1
 80286d2:	fa5f fc83 	uxtb.w	ip, r3
 80286d6:	fb16 f601 	smulbb	r6, r6, r1
 80286da:	fb17 f701 	smulbb	r7, r7, r1
 80286de:	fb1c fc04 	smulbb	ip, ip, r4
 80286e2:	f810 0c03 	ldrb.w	r0, [r0, #-3]
 80286e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80286ea:	0c1b      	lsrs	r3, r3, #16
 80286ec:	fb00 c101 	mla	r1, r0, r1, ip
 80286f0:	fb03 6304 	mla	r3, r3, r4, r6
 80286f4:	fb02 7204 	mla	r2, r2, r4, r7
 80286f8:	b289      	uxth	r1, r1
 80286fa:	b292      	uxth	r2, r2
 80286fc:	b29b      	uxth	r3, r3
 80286fe:	f101 0e01 	add.w	lr, r1, #1
 8028702:	1c56      	adds	r6, r2, #1
 8028704:	1c5d      	adds	r5, r3, #1
 8028706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028708:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 802870c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8028710:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8028714:	1209      	asrs	r1, r1, #8
 8028716:	1212      	asrs	r2, r2, #8
 8028718:	121b      	asrs	r3, r3, #8
 802871a:	f800 1c03 	strb.w	r1, [r0, #-3]
 802871e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8028722:	f800 3c01 	strb.w	r3, [r0, #-1]
 8028726:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8028728:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 802872a:	4499      	add	r9, r3
 802872c:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 802872e:	4413      	add	r3, r2
 8028730:	933c      	str	r3, [sp, #240]	@ 0xf0
 8028732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028734:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028736:	4293      	cmp	r3, r2
 8028738:	d024      	beq.n	8028784 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802873a:	4613      	mov	r3, r2
 802873c:	3303      	adds	r3, #3
 802873e:	9309      	str	r3, [sp, #36]	@ 0x24
 8028740:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8028742:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8028746:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8028748:	ea4f 4229 	mov.w	r2, r9, asr #16
 802874c:	141b      	asrs	r3, r3, #16
 802874e:	fb06 2303 	mla	r3, r6, r3, r2
 8028752:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028754:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028756:	5cc2      	ldrb	r2, [r0, r3]
 8028758:	f3c9 3103 	ubfx	r1, r9, #12, #4
 802875c:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 8028760:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 8028762:	4403      	add	r3, r0
 8028764:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8028768:	0e28      	lsrs	r0, r5, #24
 802876a:	2900      	cmp	r1, #0
 802876c:	f47f aec0 	bne.w	80284f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8028770:	2a00      	cmp	r2, #0
 8028772:	f43f aed2 	beq.w	802851a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028776:	5d9b      	ldrb	r3, [r3, r6]
 8028778:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802877c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802877e:	0e1b      	lsrs	r3, r3, #24
 8028780:	930c      	str	r3, [sp, #48]	@ 0x30
 8028782:	e6ca      	b.n	802851a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028784:	4699      	mov	r9, r3
 8028786:	e64c      	b.n	8028422 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8028788:	2b00      	cmp	r3, #0
 802878a:	f77f ae4a 	ble.w	8028422 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 802878e:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8028792:	ea4f 422a 	mov.w	r2, sl, asr #16
 8028796:	1439      	asrs	r1, r7, #16
 8028798:	2a00      	cmp	r2, #0
 802879a:	46cb      	mov	fp, r9
 802879c:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 80287a0:	9c42      	ldr	r4, [sp, #264]	@ 0x108
 80287a2:	e9dd 953d 	ldrd	r9, r5, [sp, #244]	@ 0xf4
 80287a6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80287aa:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 80287ae:	f2c0 8154 	blt.w	8028a5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 80287b2:	1e73      	subs	r3, r6, #1
 80287b4:	429a      	cmp	r2, r3
 80287b6:	f280 8150 	bge.w	8028a5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 80287ba:	2900      	cmp	r1, #0
 80287bc:	f2c0 814d 	blt.w	8028a5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 80287c0:	f10c 33ff 	add.w	r3, ip, #4294967295
 80287c4:	4299      	cmp	r1, r3
 80287c6:	f280 8148 	bge.w	8028a5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 80287ca:	b236      	sxth	r6, r6
 80287cc:	fb01 2206 	mla	r2, r1, r6, r2
 80287d0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80287d2:	5c8b      	ldrb	r3, [r1, r2]
 80287d4:	440a      	add	r2, r1
 80287d6:	9210      	str	r2, [sp, #64]	@ 0x40
 80287d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80287da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80287de:	930e      	str	r3, [sp, #56]	@ 0x38
 80287e0:	0e1b      	lsrs	r3, r3, #24
 80287e2:	2800      	cmp	r0, #0
 80287e4:	f000 8169 	beq.w	8028aba <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 80287e8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80287ea:	f891 c001 	ldrb.w	ip, [r1, #1]
 80287ee:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80287f2:	9224      	str	r2, [sp, #144]	@ 0x90
 80287f4:	0e12      	lsrs	r2, r2, #24
 80287f6:	9218      	str	r2, [sp, #96]	@ 0x60
 80287f8:	f1be 0f00 	cmp.w	lr, #0
 80287fc:	f040 816a 	bne.w	8028ad4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 8028800:	b280      	uxth	r0, r0
 8028802:	fa1f fc8e 	uxth.w	ip, lr
 8028806:	fb00 f20c 	mul.w	r2, r0, ip
 802880a:	4611      	mov	r1, r2
 802880c:	0106      	lsls	r6, r0, #4
 802880e:	1ab0      	subs	r0, r6, r2
 8028810:	9210      	str	r2, [sp, #64]	@ 0x40
 8028812:	b282      	uxth	r2, r0
 8028814:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8028816:	ebc1 1c0c 	rsb	ip, r1, ip, lsl #4
 802881a:	fb02 f000 	mul.w	r0, r2, r0
 802881e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8028820:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 8028824:	fa1f f28c 	uxth.w	r2, ip
 8028828:	1ab6      	subs	r6, r6, r2
 802882a:	b2b6      	uxth	r6, r6
 802882c:	fb06 0c03 	mla	ip, r6, r3, r0
 8028830:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8028832:	921c      	str	r2, [sp, #112]	@ 0x70
 8028834:	fb02 cc00 	mla	ip, r2, r0, ip
 8028838:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802883a:	961d      	str	r6, [sp, #116]	@ 0x74
 802883c:	fb01 cc02 	mla	ip, r1, r2, ip
 8028840:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8028844:	f1bc 0f00 	cmp.w	ip, #0
 8028848:	f000 80f1 	beq.w	8028a2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 802884c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802884e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8028850:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028854:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8028858:	2bff      	cmp	r3, #255	@ 0xff
 802885a:	921e      	str	r2, [sp, #120]	@ 0x78
 802885c:	910e      	str	r1, [sp, #56]	@ 0x38
 802885e:	d01b      	beq.n	8028898 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8028860:	fb01 f103 	mul.w	r1, r1, r3
 8028864:	fb02 f203 	mul.w	r2, r2, r3
 8028868:	460b      	mov	r3, r1
 802886a:	0a11      	lsrs	r1, r2, #8
 802886c:	f102 1601 	add.w	r6, r2, #65537	@ 0x10001
 8028870:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028874:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8028878:	4431      	add	r1, r6
 802887a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802887e:	0a09      	lsrs	r1, r1, #8
 8028880:	0a1b      	lsrs	r3, r3, #8
 8028882:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028886:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802888a:	430b      	orrs	r3, r1
 802888c:	f003 12ff 	and.w	r2, r3, #16711935	@ 0xff00ff
 8028890:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028894:	921e      	str	r2, [sp, #120]	@ 0x78
 8028896:	930e      	str	r3, [sp, #56]	@ 0x38
 8028898:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802889a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 802889c:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 80288a0:	29ff      	cmp	r1, #255	@ 0xff
 80288a2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80288a6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80288a8:	9220      	str	r2, [sp, #128]	@ 0x80
 80288aa:	d01b      	beq.n	80288e4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 80288ac:	fb03 f301 	mul.w	r3, r3, r1
 80288b0:	fb02 f201 	mul.w	r2, r2, r1
 80288b4:	0a19      	lsrs	r1, r3, #8
 80288b6:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 80288ba:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80288be:	f502 7380 	add.w	r3, r2, #256	@ 0x100
 80288c2:	4401      	add	r1, r0
 80288c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80288c8:	0a09      	lsrs	r1, r1, #8
 80288ca:	0a1b      	lsrs	r3, r3, #8
 80288cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80288d0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80288d4:	ea41 0003 	orr.w	r0, r1, r3
 80288d8:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 80288dc:	931f      	str	r3, [sp, #124]	@ 0x7c
 80288de:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 80288e2:	9320      	str	r3, [sp, #128]	@ 0x80
 80288e4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80288e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80288e8:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 80288ec:	2aff      	cmp	r2, #255	@ 0xff
 80288ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80288f2:	9321      	str	r3, [sp, #132]	@ 0x84
 80288f4:	d01a      	beq.n	802892c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d0>
 80288f6:	fb03 f302 	mul.w	r3, r3, r2
 80288fa:	4618      	mov	r0, r3
 80288fc:	fb06 f602 	mul.w	r6, r6, r2
 8028900:	0a31      	lsrs	r1, r6, #8
 8028902:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028906:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802890a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 802890e:	440e      	add	r6, r1
 8028910:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028914:	0a36      	lsrs	r6, r6, #8
 8028916:	0a1b      	lsrs	r3, r3, #8
 8028918:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 802891c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028920:	4333      	orrs	r3, r6
 8028922:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 8028926:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802892a:	9321      	str	r3, [sp, #132]	@ 0x84
 802892c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802892e:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8028932:	f402 4e7f 	and.w	lr, r2, #65280	@ 0xff00
 8028936:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8028938:	2aff      	cmp	r2, #255	@ 0xff
 802893a:	d01a      	beq.n	8028972 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x616>
 802893c:	fb03 f302 	mul.w	r3, r3, r2
 8028940:	fb0e fe02 	mul.w	lr, lr, r2
 8028944:	0a19      	lsrs	r1, r3, #8
 8028946:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 802894a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802894e:	f50e 7380 	add.w	r3, lr, #256	@ 0x100
 8028952:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8028956:	4401      	add	r1, r0
 8028958:	0a09      	lsrs	r1, r1, #8
 802895a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802895e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8028962:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028966:	ea41 0e0e 	orr.w	lr, r1, lr
 802896a:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 802896e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028972:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8028974:	fb0c f102 	mul.w	r1, ip, r2
 8028978:	1c48      	adds	r0, r1, #1
 802897a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802897e:	ea6f 2211 	mvn.w	r2, r1, lsr #8
 8028982:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028984:	9225      	str	r2, [sp, #148]	@ 0x94
 8028986:	4684      	mov	ip, r0
 8028988:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802898a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 802898c:	fb0c fc02 	mul.w	ip, ip, r2
 8028990:	fb00 f002 	mul.w	r0, r0, r2
 8028994:	4601      	mov	r1, r0
 8028996:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8028998:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802899a:	fb00 cc02 	mla	ip, r0, r2, ip
 802899e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80289a0:	fb00 1102 	mla	r1, r0, r2, r1
 80289a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80289a6:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80289a8:	fb06 c602 	mla	r6, r6, r2, ip
 80289ac:	fb00 1002 	mla	r0, r0, r2, r1
 80289b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80289b2:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80289b6:	fb03 6602 	mla	r6, r3, r2, r6
 80289ba:	fb0e 0302 	mla	r3, lr, r2, r0
 80289be:	0a32      	lsrs	r2, r6, #8
 80289c0:	0a1b      	lsrs	r3, r3, #8
 80289c2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80289c6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80289ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80289ce:	4313      	orrs	r3, r2
 80289d0:	fb16 f001 	smulbb	r0, r6, r1
 80289d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80289d6:	fa5f fe83 	uxtb.w	lr, r3
 80289da:	fb1e fe02 	smulbb	lr, lr, r2
 80289de:	f89b c001 	ldrb.w	ip, [fp, #1]
 80289e2:	900e      	str	r0, [sp, #56]	@ 0x38
 80289e4:	f89b 0000 	ldrb.w	r0, [fp]
 80289e8:	fb1c fc01 	smulbb	ip, ip, r1
 80289ec:	fb00 e001 	mla	r0, r0, r1, lr
 80289f0:	4611      	mov	r1, r2
 80289f2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80289f6:	fb06 c202 	mla	r2, r6, r2, ip
 80289fa:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80289fc:	0c1b      	lsrs	r3, r3, #16
 80289fe:	fb03 6301 	mla	r3, r3, r1, r6
 8028a02:	b280      	uxth	r0, r0
 8028a04:	b296      	uxth	r6, r2
 8028a06:	b29b      	uxth	r3, r3
 8028a08:	1c5a      	adds	r2, r3, #1
 8028a0a:	f100 0c01 	add.w	ip, r0, #1
 8028a0e:	1c71      	adds	r1, r6, #1
 8028a10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028a14:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8028a18:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8028a1c:	1200      	asrs	r0, r0, #8
 8028a1e:	120a      	asrs	r2, r1, #8
 8028a20:	121b      	asrs	r3, r3, #8
 8028a22:	f88b 0000 	strb.w	r0, [fp]
 8028a26:	f88b 2001 	strb.w	r2, [fp, #1]
 8028a2a:	f88b 3002 	strb.w	r3, [fp, #2]
 8028a2e:	f1b8 0f00 	cmp.w	r8, #0
 8028a32:	f10b 0b03 	add.w	fp, fp, #3
 8028a36:	44ca      	add	sl, r9
 8028a38:	442f      	add	r7, r5
 8028a3a:	dd2e      	ble.n	8028a9a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8028a3c:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8028a40:	ea4f 422a 	mov.w	r2, sl, asr #16
 8028a44:	2a00      	cmp	r2, #0
 8028a46:	f108 38ff 	add.w	r8, r8, #4294967295
 8028a4a:	ea4f 4127 	mov.w	r1, r7, asr #16
 8028a4e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8028a52:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8028a56:	f6bf aeac 	bge.w	80287b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028a5a:	1c53      	adds	r3, r2, #1
 8028a5c:	d4e7      	bmi.n	8028a2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8028a5e:	42b3      	cmp	r3, r6
 8028a60:	dce5      	bgt.n	8028a2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8028a62:	1c4b      	adds	r3, r1, #1
 8028a64:	d4e3      	bmi.n	8028a2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8028a66:	4563      	cmp	r3, ip
 8028a68:	dce1      	bgt.n	8028a2e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8028a6a:	fa0f f38c 	sxth.w	r3, ip
 8028a6e:	b236      	sxth	r6, r6
 8028a70:	e9cd 6300 	strd	r6, r3, [sp]
 8028a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028a76:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028a7a:	e9cd e305 	strd	lr, r3, [sp, #20]
 8028a7e:	9202      	str	r2, [sp, #8]
 8028a80:	4659      	mov	r1, fp
 8028a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028a84:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8028a86:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8028a88:	f7ff faf2 	bl	8028070 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8028a8c:	f1b8 0f00 	cmp.w	r8, #0
 8028a90:	f10b 0b03 	add.w	fp, fp, #3
 8028a94:	44ca      	add	sl, r9
 8028a96:	442f      	add	r7, r5
 8028a98:	dcd0      	bgt.n	8028a3c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8028a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028a9c:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8028aa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028aa4:	3301      	adds	r3, #1
 8028aa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028aaa:	4499      	add	r9, r3
 8028aac:	e4b9      	b.n	8028422 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8028aae:	3b01      	subs	r3, #1
 8028ab0:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8028ab4:	4698      	mov	r8, r3
 8028ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8028ab8:	e66e      	b.n	8028798 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8028aba:	f1be 0f00 	cmp.w	lr, #0
 8028abe:	f43f ae9f 	beq.w	8028800 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8028ac2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028ac4:	5d92      	ldrb	r2, [r2, r6]
 8028ac6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8028ac8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8028acc:	9226      	str	r2, [sp, #152]	@ 0x98
 8028ace:	0e12      	lsrs	r2, r2, #24
 8028ad0:	9219      	str	r2, [sp, #100]	@ 0x64
 8028ad2:	e695      	b.n	8028800 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8028ad4:	eb01 0c06 	add.w	ip, r1, r6
 8028ad8:	f89c c001 	ldrb.w	ip, [ip, #1]
 8028adc:	5d89      	ldrb	r1, [r1, r6]
 8028ade:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8028ae0:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 8028ae4:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8028ae8:	9227      	str	r2, [sp, #156]	@ 0x9c
 8028aea:	0e12      	lsrs	r2, r2, #24
 8028aec:	921a      	str	r2, [sp, #104]	@ 0x68
 8028aee:	0e32      	lsrs	r2, r6, #24
 8028af0:	9626      	str	r6, [sp, #152]	@ 0x98
 8028af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8028af4:	e684      	b.n	8028800 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8028af6:	f43f ac94 	beq.w	8028422 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8028afa:	1e6c      	subs	r4, r5, #1
 8028afc:	e4d4      	b.n	80284a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028afe:	bf00      	nop

08028b00 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8028b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b04:	b089      	sub	sp, #36	@ 0x24
 8028b06:	f9bd b048 	ldrsh.w	fp, [sp, #72]	@ 0x48
 8028b0a:	e9dd 4014 	ldrd	r4, r0, [sp, #80]	@ 0x50
 8028b0e:	fb00 450b 	mla	r5, r0, fp, r4
 8028b12:	2800      	cmp	r0, #0
 8028b14:	4694      	mov	ip, r2
 8028b16:	f100 0601 	add.w	r6, r0, #1
 8028b1a:	442a      	add	r2, r5
 8028b1c:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8028b20:	f89d a058 	ldrb.w	sl, [sp, #88]	@ 0x58
 8028b24:	f89d 705c 	ldrb.w	r7, [sp, #92]	@ 0x5c
 8028b28:	db02      	blt.n	8028b30 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x30>
 8028b2a:	4580      	cmp	r8, r0
 8028b2c:	f300 810a 	bgt.w	8028d44 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x244>
 8028b30:	f04f 0c00 	mov.w	ip, #0
 8028b34:	46e6      	mov	lr, ip
 8028b36:	4665      	mov	r5, ip
 8028b38:	46e1      	mov	r9, ip
 8028b3a:	2e00      	cmp	r6, #0
 8028b3c:	db02      	blt.n	8028b44 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x44>
 8028b3e:	45b0      	cmp	r8, r6
 8028b40:	f300 811a 	bgt.w	8028d78 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x278>
 8028b44:	2400      	movs	r4, #0
 8028b46:	46a0      	mov	r8, r4
 8028b48:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8028b4c:	f1ba 0f0f 	cmp.w	sl, #15
 8028b50:	f200 8158 	bhi.w	8028e04 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8028b54:	2f0f      	cmp	r7, #15
 8028b56:	f200 8155 	bhi.w	8028e04 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8028b5a:	b2ba      	uxth	r2, r7
 8028b5c:	fa1f f38a 	uxth.w	r3, sl
 8028b60:	fb02 f703 	mul.w	r7, r2, r3
 8028b64:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8028b68:	b292      	uxth	r2, r2
 8028b6a:	fb02 fa08 	mul.w	sl, r2, r8
 8028b6e:	fb07 fb04 	mul.w	fp, r7, r4
 8028b72:	011b      	lsls	r3, r3, #4
 8028b74:	1bd8      	subs	r0, r3, r7
 8028b76:	b280      	uxth	r0, r0
 8028b78:	9001      	str	r0, [sp, #4]
 8028b7a:	fb00 f00c 	mul.w	r0, r0, ip
 8028b7e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8028b82:	1a9b      	subs	r3, r3, r2
 8028b84:	b29b      	uxth	r3, r3
 8028b86:	fb03 000e 	mla	r0, r3, lr, r0
 8028b8a:	4450      	add	r0, sl
 8028b8c:	4458      	add	r0, fp
 8028b8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028b92:	9002      	str	r0, [sp, #8]
 8028b94:	2800      	cmp	r0, #0
 8028b96:	f000 80d2 	beq.w	8028d3e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8028b9a:	f009 10ff 	and.w	r0, r9, #16711935	@ 0xff00ff
 8028b9e:	f409 467f 	and.w	r6, r9, #65280	@ 0xff00
 8028ba2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028ba6:	9005      	str	r0, [sp, #20]
 8028ba8:	9606      	str	r6, [sp, #24]
 8028baa:	d01e      	beq.n	8028bea <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xea>
 8028bac:	fb00 fb0e 	mul.w	fp, r0, lr
 8028bb0:	fb06 fe0e 	mul.w	lr, r6, lr
 8028bb4:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8028bb8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8028bbc:	f50e 7a80 	add.w	sl, lr, #256	@ 0x100
 8028bc0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028bc4:	4483      	add	fp, r0
 8028bc6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8028bca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028bce:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8028bd2:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8028bd6:	f40a 4e7f 	and.w	lr, sl, #65280	@ 0xff00
 8028bda:	ea4b 0e0e 	orr.w	lr, fp, lr
 8028bde:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8028be2:	9005      	str	r0, [sp, #20]
 8028be4:	f40e 407f 	and.w	r0, lr, #65280	@ 0xff00
 8028be8:	9006      	str	r0, [sp, #24]
 8028bea:	f405 407f 	and.w	r0, r5, #65280	@ 0xff00
 8028bee:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8028bf2:	f005 1aff 	and.w	sl, r5, #16711935	@ 0xff00ff
 8028bf6:	9007      	str	r0, [sp, #28]
 8028bf8:	d01d      	beq.n	8028c36 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x136>
 8028bfa:	fb0a fa0c 	mul.w	sl, sl, ip
 8028bfe:	fb00 f50c 	mul.w	r5, r0, ip
 8028c02:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8028c06:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8028c0a:	f505 7b80 	add.w	fp, r5, #256	@ 0x100
 8028c0e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028c12:	4482      	add	sl, r0
 8028c14:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8028c18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c1c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8028c20:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 8028c24:	f40b 457f 	and.w	r5, fp, #65280	@ 0xff00
 8028c28:	ea4a 0505 	orr.w	r5, sl, r5
 8028c2c:	f405 407f 	and.w	r0, r5, #65280	@ 0xff00
 8028c30:	f005 1aff 	and.w	sl, r5, #16711935	@ 0xff00ff
 8028c34:	9007      	str	r0, [sp, #28]
 8028c36:	9803      	ldr	r0, [sp, #12]
 8028c38:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028c3c:	f000 19ff 	and.w	r9, r0, #16711935	@ 0xff00ff
 8028c40:	f400 467f 	and.w	r6, r0, #65280	@ 0xff00
 8028c44:	d01b      	beq.n	8028c7e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x17e>
 8028c46:	fb09 f908 	mul.w	r9, r9, r8
 8028c4a:	fb06 f608 	mul.w	r6, r6, r8
 8028c4e:	ea4f 2c19 	mov.w	ip, r9, lsr #8
 8028c52:	f506 7080 	add.w	r0, r6, #256	@ 0x100
 8028c56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028c5a:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8028c5e:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8028c62:	44e1      	add	r9, ip
 8028c64:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028c68:	0a30      	lsrs	r0, r6, #8
 8028c6a:	f009 19ff 	and.w	r9, r9, #16711935	@ 0xff00ff
 8028c6e:	f400 467f 	and.w	r6, r0, #65280	@ 0xff00
 8028c72:	ea49 0606 	orr.w	r6, r9, r6
 8028c76:	f006 19ff 	and.w	r9, r6, #16711935	@ 0xff00ff
 8028c7a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8028c7e:	9d04      	ldr	r5, [sp, #16]
 8028c80:	2cff      	cmp	r4, #255	@ 0xff
 8028c82:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8028c86:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028c8a:	d01a      	beq.n	8028cc2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1c2>
 8028c8c:	fb00 f004 	mul.w	r0, r0, r4
 8028c90:	fb0e f404 	mul.w	r4, lr, r4
 8028c94:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8028c98:	f504 7e80 	add.w	lr, r4, #256	@ 0x100
 8028c9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028ca0:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028ca4:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 8028ca8:	4460      	add	r0, ip
 8028caa:	0a00      	lsrs	r0, r0, #8
 8028cac:	0a24      	lsrs	r4, r4, #8
 8028cae:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8028cb2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8028cb6:	ea40 0e0e 	orr.w	lr, r0, lr
 8028cba:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8028cbe:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028cc2:	9c02      	ldr	r4, [sp, #8]
 8028cc4:	9d07      	ldr	r5, [sp, #28]
 8028cc6:	ea6f 0c04 	mvn.w	ip, r4
 8028cca:	9c01      	ldr	r4, [sp, #4]
 8028ccc:	fa5f fc8c 	uxtb.w	ip, ip
 8028cd0:	fb0a fb04 	mul.w	fp, sl, r4
 8028cd4:	fb05 f504 	mul.w	r5, r5, r4
 8028cd8:	9c05      	ldr	r4, [sp, #20]
 8028cda:	fb04 bb03 	mla	fp, r4, r3, fp
 8028cde:	9c06      	ldr	r4, [sp, #24]
 8028ce0:	fb09 b902 	mla	r9, r9, r2, fp
 8028ce4:	fb04 5303 	mla	r3, r4, r3, r5
 8028ce8:	fb06 3602 	mla	r6, r6, r2, r3
 8028cec:	780c      	ldrb	r4, [r1, #0]
 8028cee:	fb00 9007 	mla	r0, r0, r7, r9
 8028cf2:	784a      	ldrb	r2, [r1, #1]
 8028cf4:	fb0e 6707 	mla	r7, lr, r7, r6
 8028cf8:	788b      	ldrb	r3, [r1, #2]
 8028cfa:	fb02 f20c 	mul.w	r2, r2, ip
 8028cfe:	fb03 f30c 	mul.w	r3, r3, ip
 8028d02:	fb04 fc0c 	mul.w	ip, r4, ip
 8028d06:	0a00      	lsrs	r0, r0, #8
 8028d08:	0a3f      	lsrs	r7, r7, #8
 8028d0a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8028d0e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8028d12:	4338      	orrs	r0, r7
 8028d14:	1c54      	adds	r4, r2, #1
 8028d16:	1c5f      	adds	r7, r3, #1
 8028d18:	f10c 0601 	add.w	r6, ip, #1
 8028d1c:	0a05      	lsrs	r5, r0, #8
 8028d1e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8028d22:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8028d26:	0c04      	lsrs	r4, r0, #16
 8028d28:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8028d2c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028d30:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8028d34:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8028d38:	704a      	strb	r2, [r1, #1]
 8028d3a:	708b      	strb	r3, [r1, #2]
 8028d3c:	7008      	strb	r0, [r1, #0]
 8028d3e:	b009      	add	sp, #36	@ 0x24
 8028d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d44:	2c00      	cmp	r4, #0
 8028d46:	db01      	blt.n	8028d4c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24c>
 8028d48:	45a3      	cmp	fp, r4
 8028d4a:	dc41      	bgt.n	8028dd0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2d0>
 8028d4c:	f04f 0e00 	mov.w	lr, #0
 8028d50:	46f1      	mov	r9, lr
 8028d52:	1c60      	adds	r0, r4, #1
 8028d54:	d42b      	bmi.n	8028dae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8028d56:	4583      	cmp	fp, r0
 8028d58:	dd29      	ble.n	8028dae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8028d5a:	f1ba 0f00 	cmp.w	sl, #0
 8028d5e:	d005      	beq.n	8028d6c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x26c>
 8028d60:	7850      	ldrb	r0, [r2, #1]
 8028d62:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8028d66:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 8028d6a:	e6e6      	b.n	8028b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8028d6c:	2e00      	cmp	r6, #0
 8028d6e:	db42      	blt.n	8028df6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8028d70:	45b0      	cmp	r8, r6
 8028d72:	dd40      	ble.n	8028df6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8028d74:	46d4      	mov	ip, sl
 8028d76:	4655      	mov	r5, sl
 8028d78:	b1ef      	cbz	r7, 8028db6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2b6>
 8028d7a:	2c00      	cmp	r4, #0
 8028d7c:	db32      	blt.n	8028de4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8028d7e:	45a3      	cmp	fp, r4
 8028d80:	dd30      	ble.n	8028de4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8028d82:	f812 000b 	ldrb.w	r0, [r2, fp]
 8028d86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8028d8a:	9003      	str	r0, [sp, #12]
 8028d8c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8028d90:	3401      	adds	r4, #1
 8028d92:	d424      	bmi.n	8028dde <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8028d94:	45a3      	cmp	fp, r4
 8028d96:	dd22      	ble.n	8028dde <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8028d98:	f1ba 0f00 	cmp.w	sl, #0
 8028d9c:	d027      	beq.n	8028dee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ee>
 8028d9e:	4493      	add	fp, r2
 8028da0:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8028da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028da8:	9304      	str	r3, [sp, #16]
 8028daa:	0e1c      	lsrs	r4, r3, #24
 8028dac:	e6ce      	b.n	8028b4c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 8028dae:	f04f 0c00 	mov.w	ip, #0
 8028db2:	4665      	mov	r5, ip
 8028db4:	e6c1      	b.n	8028b3a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8028db6:	f1ba 0f0f 	cmp.w	sl, #15
 8028dba:	d823      	bhi.n	8028e04 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8028dbc:	fa1f f38a 	uxth.w	r3, sl
 8028dc0:	463a      	mov	r2, r7
 8028dc2:	46bb      	mov	fp, r7
 8028dc4:	46ba      	mov	sl, r7
 8028dc6:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8028dca:	463c      	mov	r4, r7
 8028dcc:	46b8      	mov	r8, r7
 8028dce:	e6d0      	b.n	8028b72 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x72>
 8028dd0:	f81c 0005 	ldrb.w	r0, [ip, r5]
 8028dd4:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8028dd8:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8028ddc:	e7b9      	b.n	8028d52 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8028dde:	2400      	movs	r4, #0
 8028de0:	9404      	str	r4, [sp, #16]
 8028de2:	e6b3      	b.n	8028b4c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 8028de4:	f04f 0800 	mov.w	r8, #0
 8028de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8028dec:	e7d0      	b.n	8028d90 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>
 8028dee:	f8cd a010 	str.w	sl, [sp, #16]
 8028df2:	4654      	mov	r4, sl
 8028df4:	e6ae      	b.n	8028b54 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 8028df6:	4655      	mov	r5, sl
 8028df8:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8028dfc:	4654      	mov	r4, sl
 8028dfe:	46d0      	mov	r8, sl
 8028e00:	46d4      	mov	ip, sl
 8028e02:	e6a7      	b.n	8028b54 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 8028e04:	4b03      	ldr	r3, [pc, #12]	@ (8028e14 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x314>)
 8028e06:	4a04      	ldr	r2, [pc, #16]	@ (8028e18 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x318>)
 8028e08:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8028e0c:	4803      	ldr	r0, [pc, #12]	@ (8028e1c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x31c>)
 8028e0e:	f001 ffed 	bl	802adec <__assert_func>
 8028e12:	bf00      	nop
 8028e14:	0802e264 	.word	0x0802e264
 8028e18:	0802e8e0 	.word	0x0802e8e0
 8028e1c:	0802e3ec 	.word	0x0802e3ec

08028e20 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e24:	ed2d 8b0a 	vpush	{d8-d12}
 8028e28:	eeb0 aa40 	vmov.f32	s20, s0
 8028e2c:	eef0 9a60 	vmov.f32	s19, s1
 8028e30:	eeb0 9a41 	vmov.f32	s18, s2
 8028e34:	eef0 8a62 	vmov.f32	s17, s5
 8028e38:	eeb0 8a43 	vmov.f32	s16, s6
 8028e3c:	eeb0 ca44 	vmov.f32	s24, s8
 8028e40:	eef0 ba64 	vmov.f32	s23, s9
 8028e44:	eeb0 ba45 	vmov.f32	s22, s10
 8028e48:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8028e4c:	b0a3      	sub	sp, #140	@ 0x8c
 8028e4e:	901e      	str	r0, [sp, #120]	@ 0x78
 8028e50:	9111      	str	r1, [sp, #68]	@ 0x44
 8028e52:	9213      	str	r2, [sp, #76]	@ 0x4c
 8028e54:	e9dd 413b 	ldrd	r4, r1, [sp, #236]	@ 0xec
 8028e58:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8028e5a:	6860      	ldr	r0, [r4, #4]
 8028e5c:	fb00 1b02 	mla	fp, r0, r2, r1
 8028e60:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8028e62:	6821      	ldr	r1, [r4, #0]
 8028e64:	9c3e      	ldr	r4, [sp, #248]	@ 0xf8
 8028e66:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 8028e6a:	6852      	ldr	r2, [r2, #4]
 8028e6c:	eb01 0800 	add.w	r8, r1, r0
 8028e70:	6824      	ldr	r4, [r4, #0]
 8028e72:	e9dd 7b37 	ldrd	r7, fp, [sp, #220]	@ 0xdc
 8028e76:	3204      	adds	r2, #4
 8028e78:	46c3      	mov	fp, r8
 8028e7a:	46b8      	mov	r8, r7
 8028e7c:	9f38      	ldr	r7, [sp, #224]	@ 0xe0
 8028e7e:	940e      	str	r4, [sp, #56]	@ 0x38
 8028e80:	920a      	str	r2, [sp, #40]	@ 0x28
 8028e82:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8028e84:	2a00      	cmp	r2, #0
 8028e86:	dc02      	bgt.n	8028e8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028e88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8028e8a:	2a00      	cmp	r2, #0
 8028e8c:	dd63      	ble.n	8028f56 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8028e8e:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8028e90:	2b00      	cmp	r3, #0
 8028e92:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8028e96:	b234      	sxth	r4, r6
 8028e98:	fa0f f98c 	sxth.w	r9, ip
 8028e9c:	f340 835f 	ble.w	802955e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8028ea0:	1e65      	subs	r5, r4, #1
 8028ea2:	f109 3eff 	add.w	lr, r9, #4294967295
 8028ea6:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8028eaa:	e9dd ca39 	ldrd	ip, sl, [sp, #228]	@ 0xe4
 8028eae:	ea5f 4228 	movs.w	r2, r8, asr #16
 8028eb2:	ea4f 4127 	mov.w	r1, r7, asr #16
 8028eb6:	d405      	bmi.n	8028ec4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8028eb8:	42aa      	cmp	r2, r5
 8028eba:	da03      	bge.n	8028ec4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8028ebc:	2900      	cmp	r1, #0
 8028ebe:	db01      	blt.n	8028ec4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8028ec0:	4571      	cmp	r1, lr
 8028ec2:	db4d      	blt.n	8028f60 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028ec4:	1c50      	adds	r0, r2, #1
 8028ec6:	d406      	bmi.n	8028ed6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028ec8:	42a0      	cmp	r0, r4
 8028eca:	dc04      	bgt.n	8028ed6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028ecc:	1c48      	adds	r0, r1, #1
 8028ece:	d402      	bmi.n	8028ed6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028ed0:	4548      	cmp	r0, r9
 8028ed2:	f340 831e 	ble.w	8029512 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8028ed6:	3b01      	subs	r3, #1
 8028ed8:	44e0      	add	r8, ip
 8028eda:	4457      	add	r7, sl
 8028edc:	f10b 0b03 	add.w	fp, fp, #3
 8028ee0:	d1e5      	bne.n	8028eae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028ee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028ee4:	2b00      	cmp	r3, #0
 8028ee6:	dd36      	ble.n	8028f56 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8028ee8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8028eec:	ee79 9aab 	vadd.f32	s19, s19, s23
 8028ef0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8028ef4:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8028ef8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8028efc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028f00:	ee76 6a68 	vsub.f32	s13, s12, s17
 8028f04:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8028f08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f0c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028f10:	ee16 2a90 	vmov	r2, s13
 8028f14:	3b01      	subs	r3, #1
 8028f16:	9311      	str	r3, [sp, #68]	@ 0x44
 8028f18:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028f1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f1e:	ee17 2a10 	vmov	r2, s14
 8028f22:	eeb0 7a48 	vmov.f32	s14, s16
 8028f26:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028f2a:	ee17 7a10 	vmov	r7, s14
 8028f2e:	eeb0 7a68 	vmov.f32	s14, s17
 8028f32:	9339      	str	r3, [sp, #228]	@ 0xe4
 8028f34:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028f36:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8028f40:	933a      	str	r3, [sp, #232]	@ 0xe8
 8028f42:	ee17 8a10 	vmov	r8, s14
 8028f46:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028f48:	eeb0 8a67 	vmov.f32	s16, s15
 8028f4c:	eef0 8a46 	vmov.f32	s17, s12
 8028f50:	bf08      	it	eq
 8028f52:	4613      	moveq	r3, r2
 8028f54:	e795      	b.n	8028e82 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8028f56:	b023      	add	sp, #140	@ 0x8c
 8028f58:	ecbd 8b0a 	vpop	{d8-d12}
 8028f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f60:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8028f64:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 8028f66:	1e59      	subs	r1, r3, #1
 8028f68:	fb00 8201 	mla	r2, r0, r1, r8
 8028f6c:	1412      	asrs	r2, r2, #16
 8028f6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8028f70:	f100 8151 	bmi.w	8029216 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028f74:	42aa      	cmp	r2, r5
 8028f76:	f280 814e 	bge.w	8029216 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028f7a:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8028f7c:	fb02 7201 	mla	r2, r2, r1, r7
 8028f80:	1412      	asrs	r2, r2, #16
 8028f82:	f100 8148 	bmi.w	8029216 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028f86:	f109 31ff 	add.w	r1, r9, #4294967295
 8028f8a:	428a      	cmp	r2, r1
 8028f8c:	f280 8143 	bge.w	8029216 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028f90:	2b00      	cmp	r3, #0
 8028f92:	dda6      	ble.n	8028ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8028f94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028f98:	445b      	add	r3, fp
 8028f9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8028f9c:	f10b 0c03 	add.w	ip, fp, #3
 8028fa0:	46c1      	mov	r9, r8
 8028fa2:	9738      	str	r7, [sp, #224]	@ 0xe0
 8028fa4:	4621      	mov	r1, r4
 8028fa6:	463b      	mov	r3, r7
 8028fa8:	e114      	b.n	80291d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8028faa:	f893 e001 	ldrb.w	lr, [r3, #1]
 8028fae:	f856 502e 	ldr.w	r5, [r6, lr, lsl #2]
 8028fb2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8028fb4:	0e2d      	lsrs	r5, r5, #24
 8028fb6:	9506      	str	r5, [sp, #24]
 8028fb8:	b162      	cbz	r2, 8028fd4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028fba:	185d      	adds	r5, r3, r1
 8028fbc:	786d      	ldrb	r5, [r5, #1]
 8028fbe:	5c5b      	ldrb	r3, [r3, r1]
 8028fc0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8028fc4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028fc8:	9112      	str	r1, [sp, #72]	@ 0x48
 8028fca:	9310      	str	r3, [sp, #64]	@ 0x40
 8028fcc:	0e09      	lsrs	r1, r1, #24
 8028fce:	0e1b      	lsrs	r3, r3, #24
 8028fd0:	9108      	str	r1, [sp, #32]
 8028fd2:	9307      	str	r3, [sp, #28]
 8028fd4:	b2a4      	uxth	r4, r4
 8028fd6:	b292      	uxth	r2, r2
 8028fd8:	fb04 f502 	mul.w	r5, r4, r2
 8028fdc:	0124      	lsls	r4, r4, #4
 8028fde:	1b66      	subs	r6, r4, r5
 8028fe0:	9b06      	ldr	r3, [sp, #24]
 8028fe2:	b2b6      	uxth	r6, r6
 8028fe4:	fb06 f103 	mul.w	r1, r6, r3
 8028fe8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8028fec:	b292      	uxth	r2, r2
 8028fee:	f5c4 7380 	rsb	r3, r4, #256	@ 0x100
 8028ff2:	1a9b      	subs	r3, r3, r2
 8028ff4:	b29b      	uxth	r3, r3
 8028ff6:	fb03 1100 	mla	r1, r3, r0, r1
 8028ffa:	9c07      	ldr	r4, [sp, #28]
 8028ffc:	fb02 1104 	mla	r1, r2, r4, r1
 8029000:	9c08      	ldr	r4, [sp, #32]
 8029002:	fb05 1104 	mla	r1, r5, r4, r1
 8029006:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802900a:	9109      	str	r1, [sp, #36]	@ 0x24
 802900c:	2900      	cmp	r1, #0
 802900e:	f000 80d2 	beq.w	80291b6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8029012:	f007 14ff 	and.w	r4, r7, #16711935	@ 0xff00ff
 8029016:	f407 417f 	and.w	r1, r7, #65280	@ 0xff00
 802901a:	28ff      	cmp	r0, #255	@ 0xff
 802901c:	940b      	str	r4, [sp, #44]	@ 0x2c
 802901e:	910c      	str	r1, [sp, #48]	@ 0x30
 8029020:	d01b      	beq.n	802905a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8029022:	fb04 f400 	mul.w	r4, r4, r0
 8029026:	4627      	mov	r7, r4
 8029028:	fb01 fe00 	mul.w	lr, r1, r0
 802902c:	0a24      	lsrs	r4, r4, #8
 802902e:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8029032:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029036:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 802903a:	4427      	add	r7, r4
 802903c:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8029040:	0a3f      	lsrs	r7, r7, #8
 8029042:	0a00      	lsrs	r0, r0, #8
 8029044:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029048:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802904c:	4307      	orrs	r7, r0
 802904e:	f007 11ff 	and.w	r1, r7, #16711935	@ 0xff00ff
 8029052:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029054:	f407 417f 	and.w	r1, r7, #65280	@ 0xff00
 8029058:	910c      	str	r1, [sp, #48]	@ 0x30
 802905a:	9806      	ldr	r0, [sp, #24]
 802905c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802905e:	28ff      	cmp	r0, #255	@ 0xff
 8029060:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8029064:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8029068:	d01a      	beq.n	80290a0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802906a:	fb07 f700 	mul.w	r7, r7, r0
 802906e:	fb0e fe00 	mul.w	lr, lr, r0
 8029072:	0a3c      	lsrs	r4, r7, #8
 8029074:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8029078:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802907c:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 8029080:	4427      	add	r7, r4
 8029082:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8029086:	0a3f      	lsrs	r7, r7, #8
 8029088:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802908c:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029090:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029094:	ea47 0e0e 	orr.w	lr, r7, lr
 8029098:	f00e 17ff 	and.w	r7, lr, #16711935	@ 0xff00ff
 802909c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80290a0:	9c07      	ldr	r4, [sp, #28]
 80290a2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80290a4:	2cff      	cmp	r4, #255	@ 0xff
 80290a6:	f001 10ff 	and.w	r0, r1, #16711935	@ 0xff00ff
 80290aa:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80290ae:	d01b      	beq.n	80290e8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80290b0:	fb00 f004 	mul.w	r0, r0, r4
 80290b4:	fb0a fa04 	mul.w	sl, sl, r4
 80290b8:	ea4f 2810 	mov.w	r8, r0, lsr #8
 80290bc:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 80290c0:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 80290c4:	f50a 7480 	add.w	r4, sl, #256	@ 0x100
 80290c8:	4440      	add	r0, r8
 80290ca:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 80290ce:	0a00      	lsrs	r0, r0, #8
 80290d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80290d4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80290d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80290dc:	ea40 0a0a 	orr.w	sl, r0, sl
 80290e0:	f00a 10ff 	and.w	r0, sl, #16711935	@ 0xff00ff
 80290e4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80290e8:	9c08      	ldr	r4, [sp, #32]
 80290ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80290ec:	2cff      	cmp	r4, #255	@ 0xff
 80290ee:	f001 18ff 	and.w	r8, r1, #16711935	@ 0xff00ff
 80290f2:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 80290f6:	d01b      	beq.n	8029130 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80290f8:	fb08 f804 	mul.w	r8, r8, r4
 80290fc:	fb0b fb04 	mul.w	fp, fp, r4
 8029100:	ea4f 2418 	mov.w	r4, r8, lsr #8
 8029104:	f004 11ff 	and.w	r1, r4, #16711935	@ 0xff00ff
 8029108:	f108 1801 	add.w	r8, r8, #65537	@ 0x10001
 802910c:	f50b 7480 	add.w	r4, fp, #256	@ 0x100
 8029110:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8029114:	4488      	add	r8, r1
 8029116:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802911a:	0a24      	lsrs	r4, r4, #8
 802911c:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8029120:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8029124:	ea48 0b0b 	orr.w	fp, r8, fp
 8029128:	f00b 18ff 	and.w	r8, fp, #16711935	@ 0xff00ff
 802912c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8029130:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029132:	fb07 f706 	mul.w	r7, r7, r6
 8029136:	43c9      	mvns	r1, r1
 8029138:	fb0e f606 	mul.w	r6, lr, r6
 802913c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802913e:	f81c ec02 	ldrb.w	lr, [ip, #-2]
 8029142:	fb04 7703 	mla	r7, r4, r3, r7
 8029146:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029148:	fb00 7702 	mla	r7, r0, r2, r7
 802914c:	fb04 6603 	mla	r6, r4, r3, r6
 8029150:	fb0a 6602 	mla	r6, sl, r2, r6
 8029154:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 8029158:	fb0b 6b05 	mla	fp, fp, r5, r6
 802915c:	fb08 7805 	mla	r8, r8, r5, r7
 8029160:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 8029164:	b2c9      	uxtb	r1, r1
 8029166:	fb0e fe01 	mul.w	lr, lr, r1
 802916a:	fb04 f401 	mul.w	r4, r4, r1
 802916e:	fb03 f101 	mul.w	r1, r3, r1
 8029172:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029176:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802917a:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802917e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8029182:	ea48 030b 	orr.w	r3, r8, fp
 8029186:	f10e 0201 	add.w	r2, lr, #1
 802918a:	1c66      	adds	r6, r4, #1
 802918c:	1c4d      	adds	r5, r1, #1
 802918e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8029192:	0a18      	lsrs	r0, r3, #8
 8029194:	0c1a      	lsrs	r2, r3, #16
 8029196:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 802919a:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802919e:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 80291a2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80291a6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80291aa:	f80c ec02 	strb.w	lr, [ip, #-2]
 80291ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80291b2:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80291b6:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80291b8:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 80291ba:	4499      	add	r9, r3
 80291bc:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80291be:	4413      	add	r3, r2
 80291c0:	9338      	str	r3, [sp, #224]	@ 0xe0
 80291c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80291c4:	4563      	cmp	r3, ip
 80291c6:	d024      	beq.n	8029212 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80291c8:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 80291ca:	f10c 0c03 	add.w	ip, ip, #3
 80291ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80291d2:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80291d4:	ea4f 4229 	mov.w	r2, r9, asr #16
 80291d8:	141b      	asrs	r3, r3, #16
 80291da:	fb01 2303 	mla	r3, r1, r3, r2
 80291de:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80291e0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80291e2:	5cc2      	ldrb	r2, [r0, r3]
 80291e4:	f3c9 3403 	ubfx	r4, r9, #12, #4
 80291e8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80291ec:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 80291ee:	4403      	add	r3, r0
 80291f0:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80291f4:	0e38      	lsrs	r0, r7, #24
 80291f6:	2c00      	cmp	r4, #0
 80291f8:	f47f aed7 	bne.w	8028faa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80291fc:	2a00      	cmp	r2, #0
 80291fe:	f43f aee9 	beq.w	8028fd4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8029202:	5c5b      	ldrb	r3, [r3, r1]
 8029204:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029206:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802920a:	9310      	str	r3, [sp, #64]	@ 0x40
 802920c:	0e1b      	lsrs	r3, r3, #24
 802920e:	9307      	str	r3, [sp, #28]
 8029210:	e6e0      	b.n	8028fd4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8029212:	469b      	mov	fp, r3
 8029214:	e665      	b.n	8028ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8029216:	2b00      	cmp	r3, #0
 8029218:	f77f ae63 	ble.w	8028ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802921c:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8029220:	ea4f 4228 	mov.w	r2, r8, asr #16
 8029224:	1439      	asrs	r1, r7, #16
 8029226:	2a00      	cmp	r2, #0
 8029228:	46d9      	mov	r9, fp
 802922a:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 802922e:	9c3e      	ldr	r4, [sp, #248]	@ 0xf8
 8029230:	e9dd b539 	ldrd	fp, r5, [sp, #228]	@ 0xe4
 8029234:	f3c8 3003 	ubfx	r0, r8, #12, #4
 8029238:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 802923c:	f2c0 8141 	blt.w	80294c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8029240:	1e73      	subs	r3, r6, #1
 8029242:	429a      	cmp	r2, r3
 8029244:	f280 813d 	bge.w	80294c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8029248:	2900      	cmp	r1, #0
 802924a:	f2c0 813a 	blt.w	80294c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 802924e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8029252:	4299      	cmp	r1, r3
 8029254:	f280 8135 	bge.w	80294c2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 8029258:	b233      	sxth	r3, r6
 802925a:	fb01 2203 	mla	r2, r1, r3, r2
 802925e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029260:	930c      	str	r3, [sp, #48]	@ 0x30
 8029262:	5c8b      	ldrb	r3, [r1, r2]
 8029264:	440a      	add	r2, r1
 8029266:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029268:	4616      	mov	r6, r2
 802926a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802926e:	930d      	str	r3, [sp, #52]	@ 0x34
 8029270:	0e1b      	lsrs	r3, r3, #24
 8029272:	2800      	cmp	r0, #0
 8029274:	f000 8153 	beq.w	802951e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8029278:	f896 c001 	ldrb.w	ip, [r6, #1]
 802927c:	f851 202c 	ldr.w	r2, [r1, ip, lsl #2]
 8029280:	921f      	str	r2, [sp, #124]	@ 0x7c
 8029282:	0e12      	lsrs	r2, r2, #24
 8029284:	9214      	str	r2, [sp, #80]	@ 0x50
 8029286:	f1be 0f00 	cmp.w	lr, #0
 802928a:	f040 8155 	bne.w	8029538 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802928e:	b280      	uxth	r0, r0
 8029290:	fa1f fc8e 	uxth.w	ip, lr
 8029294:	fb00 f20c 	mul.w	r2, r0, ip
 8029298:	0106      	lsls	r6, r0, #4
 802929a:	1ab0      	subs	r0, r6, r2
 802929c:	b281      	uxth	r1, r0
 802929e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80292a0:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 80292a4:	fb01 f000 	mul.w	r0, r1, r0
 80292a8:	9117      	str	r1, [sp, #92]	@ 0x5c
 80292aa:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 80292ae:	fa1f f18c 	uxth.w	r1, ip
 80292b2:	1a76      	subs	r6, r6, r1
 80292b4:	b2b6      	uxth	r6, r6
 80292b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80292b8:	fb06 0603 	mla	r6, r6, r3, r0
 80292bc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80292be:	9118      	str	r1, [sp, #96]	@ 0x60
 80292c0:	fb01 6600 	mla	r6, r1, r0, r6
 80292c4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80292c6:	fb02 6601 	mla	r6, r2, r1, r6
 80292ca:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80292ce:	911a      	str	r1, [sp, #104]	@ 0x68
 80292d0:	2900      	cmp	r1, #0
 80292d2:	f000 80e0 	beq.w	8029496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80292d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80292d8:	2bff      	cmp	r3, #255	@ 0xff
 80292da:	f000 11ff 	and.w	r1, r0, #16711935	@ 0xff00ff
 80292de:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80292e2:	910d      	str	r1, [sp, #52]	@ 0x34
 80292e4:	901b      	str	r0, [sp, #108]	@ 0x6c
 80292e6:	d01c      	beq.n	8029322 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 80292e8:	fb01 f103 	mul.w	r1, r1, r3
 80292ec:	fb00 f003 	mul.w	r0, r0, r3
 80292f0:	460e      	mov	r6, r1
 80292f2:	4603      	mov	r3, r0
 80292f4:	0a09      	lsrs	r1, r1, #8
 80292f6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80292fa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80292fe:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8029302:	4431      	add	r1, r6
 8029304:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8029308:	0a09      	lsrs	r1, r1, #8
 802930a:	0a1b      	lsrs	r3, r3, #8
 802930c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8029310:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029314:	430b      	orrs	r3, r1
 8029316:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 802931a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802931e:	910d      	str	r1, [sp, #52]	@ 0x34
 8029320:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029322:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8029324:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 8029328:	f401 467f 	and.w	r6, r1, #65280	@ 0xff00
 802932c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802932e:	931c      	str	r3, [sp, #112]	@ 0x70
 8029330:	29ff      	cmp	r1, #255	@ 0xff
 8029332:	d019      	beq.n	8029368 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8029334:	fb03 f301 	mul.w	r3, r3, r1
 8029338:	fb06 f601 	mul.w	r6, r6, r1
 802933c:	0a19      	lsrs	r1, r3, #8
 802933e:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 8029342:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8029346:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 802934a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802934e:	4401      	add	r1, r0
 8029350:	0a09      	lsrs	r1, r1, #8
 8029352:	0a1b      	lsrs	r3, r3, #8
 8029354:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029358:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802935c:	4319      	orrs	r1, r3
 802935e:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 8029362:	931c      	str	r3, [sp, #112]	@ 0x70
 8029364:	f401 467f 	and.w	r6, r1, #65280	@ 0xff00
 8029368:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802936a:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802936e:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8029372:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8029374:	930c      	str	r3, [sp, #48]	@ 0x30
 8029376:	29ff      	cmp	r1, #255	@ 0xff
 8029378:	901d      	str	r0, [sp, #116]	@ 0x74
 802937a:	d01a      	beq.n	80293b2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x592>
 802937c:	fb03 f301 	mul.w	r3, r3, r1
 8029380:	fb00 fc01 	mul.w	ip, r0, r1
 8029384:	0a19      	lsrs	r1, r3, #8
 8029386:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 802938a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802938e:	f50c 7380 	add.w	r3, ip, #256	@ 0x100
 8029392:	4401      	add	r1, r0
 8029394:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029398:	0a09      	lsrs	r1, r1, #8
 802939a:	0a1b      	lsrs	r3, r3, #8
 802939c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80293a0:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80293a4:	4319      	orrs	r1, r3
 80293a6:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 80293aa:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80293ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80293b0:	911d      	str	r1, [sp, #116]	@ 0x74
 80293b2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80293b4:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80293b8:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 80293bc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80293be:	29ff      	cmp	r1, #255	@ 0xff
 80293c0:	d01c      	beq.n	80293fc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80293c2:	fb0c fc01 	mul.w	ip, ip, r1
 80293c6:	fb0e fe01 	mul.w	lr, lr, r1
 80293ca:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80293ce:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80293d2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80293d6:	f50e 7180 	add.w	r1, lr, #256	@ 0x100
 80293da:	4484      	add	ip, r0
 80293dc:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80293e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80293e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80293e8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80293ec:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80293f0:	ea4c 0e0e 	orr.w	lr, ip, lr
 80293f4:	f00e 1cff 	and.w	ip, lr, #16711935	@ 0xff00ff
 80293f8:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80293fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80293fe:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8029400:	43c9      	mvns	r1, r1
 8029402:	911a      	str	r1, [sp, #104]	@ 0x68
 8029404:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8029406:	fb00 f001 	mul.w	r0, r0, r1
 802940a:	fb06 f301 	mul.w	r3, r6, r1
 802940e:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8029410:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029412:	fb01 0006 	mla	r0, r1, r6, r0
 8029416:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8029418:	fb01 3106 	mla	r1, r1, r6, r3
 802941c:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 802941e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029420:	910d      	str	r1, [sp, #52]	@ 0x34
 8029422:	fb03 0306 	mla	r3, r3, r6, r0
 8029426:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029428:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802942a:	fb0c 3302 	mla	r3, ip, r2, r3
 802942e:	fb00 1106 	mla	r1, r0, r6, r1
 8029432:	f89d 6068 	ldrb.w	r6, [sp, #104]	@ 0x68
 8029436:	f899 0002 	ldrb.w	r0, [r9, #2]
 802943a:	fb0e 1e02 	mla	lr, lr, r2, r1
 802943e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8029442:	f899 1000 	ldrb.w	r1, [r9]
 8029446:	fb00 f006 	mul.w	r0, r0, r6
 802944a:	fb02 fc06 	mul.w	ip, r2, r6
 802944e:	fb01 f106 	mul.w	r1, r1, r6
 8029452:	0a1b      	lsrs	r3, r3, #8
 8029454:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029458:	f003 12ff 	and.w	r2, r3, #16711935	@ 0xff00ff
 802945c:	1c46      	adds	r6, r0, #1
 802945e:	f40e 437f 	and.w	r3, lr, #65280	@ 0xff00
 8029462:	4313      	orrs	r3, r2
 8029464:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8029468:	f10c 0201 	add.w	r2, ip, #1
 802946c:	1c4e      	adds	r6, r1, #1
 802946e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8029472:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8029476:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802947a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 802947e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8029482:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8029486:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802948a:	f889 2001 	strb.w	r2, [r9, #1]
 802948e:	f889 0002 	strb.w	r0, [r9, #2]
 8029492:	f889 3000 	strb.w	r3, [r9]
 8029496:	f1ba 0f00 	cmp.w	sl, #0
 802949a:	f109 0903 	add.w	r9, r9, #3
 802949e:	44d8      	add	r8, fp
 80294a0:	442f      	add	r7, r5
 80294a2:	dd2c      	ble.n	80294fe <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6de>
 80294a4:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 80294a8:	ea4f 4228 	mov.w	r2, r8, asr #16
 80294ac:	2a00      	cmp	r2, #0
 80294ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80294b2:	ea4f 4127 	mov.w	r1, r7, asr #16
 80294b6:	f3c8 3003 	ubfx	r0, r8, #12, #4
 80294ba:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 80294be:	f6bf aebf 	bge.w	8029240 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80294c2:	1c53      	adds	r3, r2, #1
 80294c4:	d4e7      	bmi.n	8029496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80294c6:	42b3      	cmp	r3, r6
 80294c8:	dce5      	bgt.n	8029496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80294ca:	1c4b      	adds	r3, r1, #1
 80294cc:	d4e3      	bmi.n	8029496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80294ce:	4563      	cmp	r3, ip
 80294d0:	dce1      	bgt.n	8029496 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 80294d2:	fa0f f38c 	sxth.w	r3, ip
 80294d6:	b236      	sxth	r6, r6
 80294d8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80294dc:	e9cd 6300 	strd	r6, r3, [sp]
 80294e0:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 80294e4:	4649      	mov	r1, r9
 80294e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80294e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80294ea:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80294ec:	f7ff fb08 	bl	8028b00 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80294f0:	f1ba 0f00 	cmp.w	sl, #0
 80294f4:	f109 0903 	add.w	r9, r9, #3
 80294f8:	44d8      	add	r8, fp
 80294fa:	442f      	add	r7, r5
 80294fc:	dcd2      	bgt.n	80294a4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x684>
 80294fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029500:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8029504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8029508:	3301      	adds	r3, #1
 802950a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802950e:	449b      	add	fp, r3
 8029510:	e4e7      	b.n	8028ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8029512:	3b01      	subs	r3, #1
 8029514:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8029518:	469a      	mov	sl, r3
 802951a:	9309      	str	r3, [sp, #36]	@ 0x24
 802951c:	e683      	b.n	8029226 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 802951e:	f1be 0f00 	cmp.w	lr, #0
 8029522:	f43f aeb4 	beq.w	802928e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 8029526:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029528:	5c72      	ldrb	r2, [r6, r1]
 802952a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802952c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8029530:	9220      	str	r2, [sp, #128]	@ 0x80
 8029532:	0e12      	lsrs	r2, r2, #24
 8029534:	9215      	str	r2, [sp, #84]	@ 0x54
 8029536:	e6aa      	b.n	802928e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 8029538:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802953a:	eb06 0c02 	add.w	ip, r6, r2
 802953e:	4632      	mov	r2, r6
 8029540:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8029542:	f89c c001 	ldrb.w	ip, [ip, #1]
 8029546:	5d92      	ldrb	r2, [r2, r6]
 8029548:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802954c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8029550:	0e31      	lsrs	r1, r6, #24
 8029552:	9220      	str	r2, [sp, #128]	@ 0x80
 8029554:	0e12      	lsrs	r2, r2, #24
 8029556:	9621      	str	r6, [sp, #132]	@ 0x84
 8029558:	9116      	str	r1, [sp, #88]	@ 0x58
 802955a:	9215      	str	r2, [sp, #84]	@ 0x54
 802955c:	e697      	b.n	802928e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802955e:	f43f acc0 	beq.w	8028ee2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8029562:	1e65      	subs	r5, r4, #1
 8029564:	e4fe      	b.n	8028f64 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8029566:	bf00      	nop

08029568 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 8029568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802956c:	b087      	sub	sp, #28
 802956e:	f89d b058 	ldrb.w	fp, [sp, #88]	@ 0x58
 8029572:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 8029576:	ea6f 000b 	mvn.w	r0, fp
 802957a:	e9dd 4712 	ldrd	r4, r7, [sp, #72]	@ 0x48
 802957e:	fb07 4c06 	mla	ip, r7, r6, r4
 8029582:	b2c0      	uxtb	r0, r0
 8029584:	2f00      	cmp	r7, #0
 8029586:	9002      	str	r0, [sp, #8]
 8029588:	eb02 0e0c 	add.w	lr, r2, ip
 802958c:	f107 0801 	add.w	r8, r7, #1
 8029590:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	@ 0x44
 8029594:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8029598:	f89d 0054 	ldrb.w	r0, [sp, #84]	@ 0x54
 802959c:	db02      	blt.n	80295a4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x3c>
 802959e:	45b9      	cmp	r9, r7
 80295a0:	f300 80a0 	bgt.w	80296e4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x17c>
 80295a4:	468c      	mov	ip, r1
 80295a6:	460f      	mov	r7, r1
 80295a8:	780a      	ldrb	r2, [r1, #0]
 80295aa:	9203      	str	r2, [sp, #12]
 80295ac:	9201      	str	r2, [sp, #4]
 80295ae:	f1b8 0f00 	cmp.w	r8, #0
 80295b2:	db01      	blt.n	80295b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x50>
 80295b4:	45c1      	cmp	r9, r8
 80295b6:	dc7b      	bgt.n	80296b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x148>
 80295b8:	460b      	mov	r3, r1
 80295ba:	4689      	mov	r9, r1
 80295bc:	f891 a000 	ldrb.w	sl, [r1]
 80295c0:	f8cd a014 	str.w	sl, [sp, #20]
 80295c4:	2d0f      	cmp	r5, #15
 80295c6:	f200 80cd 	bhi.w	8029764 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 80295ca:	280f      	cmp	r0, #15
 80295cc:	f200 80ca 	bhi.w	8029764 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 80295d0:	780a      	ldrb	r2, [r1, #0]
 80295d2:	9204      	str	r2, [sp, #16]
 80295d4:	b2aa      	uxth	r2, r5
 80295d6:	b280      	uxth	r0, r0
 80295d8:	fb02 f500 	mul.w	r5, r2, r0
 80295dc:	0112      	lsls	r2, r2, #4
 80295de:	f89c 8001 	ldrb.w	r8, [ip, #1]
 80295e2:	f89c e002 	ldrb.w	lr, [ip, #2]
 80295e6:	1b54      	subs	r4, r2, r5
 80295e8:	b2a4      	uxth	r4, r4
 80295ea:	fb04 f808 	mul.w	r8, r4, r8
 80295ee:	fb04 fe0e 	mul.w	lr, r4, lr
 80295f2:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 80295f6:	b280      	uxth	r0, r0
 80295f8:	9e01      	ldr	r6, [sp, #4]
 80295fa:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80295fe:	f897 c001 	ldrb.w	ip, [r7, #1]
 8029602:	1a12      	subs	r2, r2, r0
 8029604:	78bf      	ldrb	r7, [r7, #2]
 8029606:	b292      	uxth	r2, r2
 8029608:	fb04 f406 	mul.w	r4, r4, r6
 802960c:	fb02 8c0c 	mla	ip, r2, ip, r8
 8029610:	fb02 e707 	mla	r7, r2, r7, lr
 8029614:	9e03      	ldr	r6, [sp, #12]
 8029616:	f899 8001 	ldrb.w	r8, [r9, #1]
 802961a:	f899 e002 	ldrb.w	lr, [r9, #2]
 802961e:	fb02 4206 	mla	r2, r2, r6, r4
 8029622:	fb00 cc08 	mla	ip, r0, r8, ip
 8029626:	fb00 770e 	mla	r7, r0, lr, r7
 802962a:	f893 8001 	ldrb.w	r8, [r3, #1]
 802962e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8029632:	fb00 220a 	mla	r2, r0, sl, r2
 8029636:	fb05 c808 	mla	r8, r5, r8, ip
 802963a:	fb05 7e0e 	mla	lr, r5, lr, r7
 802963e:	9805      	ldr	r0, [sp, #20]
 8029640:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8029644:	fb05 2500 	mla	r5, r5, r0, r2
 8029648:	9a04      	ldr	r2, [sp, #16]
 802964a:	fa1f f38b 	uxth.w	r3, fp
 802964e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8029652:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8029656:	fb12 f609 	smulbb	r6, r2, r9
 802965a:	fb1e fe03 	smulbb	lr, lr, r3
 802965e:	fb18 f803 	smulbb	r8, r8, r3
 8029662:	784a      	ldrb	r2, [r1, #1]
 8029664:	7888      	ldrb	r0, [r1, #2]
 8029666:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802966a:	fb05 6503 	mla	r5, r5, r3, r6
 802966e:	fb02 8809 	mla	r8, r2, r9, r8
 8029672:	fb00 e909 	mla	r9, r0, r9, lr
 8029676:	b2ad      	uxth	r5, r5
 8029678:	fa1f f888 	uxth.w	r8, r8
 802967c:	fa1f f989 	uxth.w	r9, r9
 8029680:	f108 0001 	add.w	r0, r8, #1
 8029684:	f109 0201 	add.w	r2, r9, #1
 8029688:	1c6b      	adds	r3, r5, #1
 802968a:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802968e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8029692:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029696:	ea4f 2828 	mov.w	r8, r8, asr #8
 802969a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802969e:	122d      	asrs	r5, r5, #8
 80296a0:	f881 8001 	strb.w	r8, [r1, #1]
 80296a4:	f881 9002 	strb.w	r9, [r1, #2]
 80296a8:	700d      	strb	r5, [r1, #0]
 80296aa:	b007      	add	sp, #28
 80296ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296b0:	b388      	cbz	r0, 8029716 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1ae>
 80296b2:	2c00      	cmp	r4, #0
 80296b4:	db44      	blt.n	8029740 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 80296b6:	42a6      	cmp	r6, r4
 80296b8:	dd42      	ble.n	8029740 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 80296ba:	f81e 9006 	ldrb.w	r9, [lr, r6]
 80296be:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80296c2:	4499      	add	r9, r3
 80296c4:	3401      	adds	r4, #1
 80296c6:	f899 a000 	ldrb.w	sl, [r9]
 80296ca:	d435      	bmi.n	8029738 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 80296cc:	42a6      	cmp	r6, r4
 80296ce:	dd33      	ble.n	8029738 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 80296d0:	2d00      	cmp	r5, #0
 80296d2:	d043      	beq.n	802975c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1f4>
 80296d4:	4476      	add	r6, lr
 80296d6:	7872      	ldrb	r2, [r6, #1]
 80296d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80296dc:	5c9c      	ldrb	r4, [r3, r2]
 80296de:	4413      	add	r3, r2
 80296e0:	9405      	str	r4, [sp, #20]
 80296e2:	e76f      	b.n	80295c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 80296e4:	2c00      	cmp	r4, #0
 80296e6:	db01      	blt.n	80296ec <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x184>
 80296e8:	42a6      	cmp	r6, r4
 80296ea:	dc1f      	bgt.n	802972c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1c4>
 80296ec:	460f      	mov	r7, r1
 80296ee:	783a      	ldrb	r2, [r7, #0]
 80296f0:	9203      	str	r2, [sp, #12]
 80296f2:	1c62      	adds	r2, r4, #1
 80296f4:	d40b      	bmi.n	802970e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 80296f6:	4296      	cmp	r6, r2
 80296f8:	dd09      	ble.n	802970e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 80296fa:	b31d      	cbz	r5, 8029744 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1dc>
 80296fc:	f89e c001 	ldrb.w	ip, [lr, #1]
 8029700:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8029704:	f813 200c 	ldrb.w	r2, [r3, ip]
 8029708:	449c      	add	ip, r3
 802970a:	9201      	str	r2, [sp, #4]
 802970c:	e74f      	b.n	80295ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 802970e:	780a      	ldrb	r2, [r1, #0]
 8029710:	468c      	mov	ip, r1
 8029712:	9201      	str	r2, [sp, #4]
 8029714:	e74b      	b.n	80295ae <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 8029716:	2d0f      	cmp	r5, #15
 8029718:	f891 a000 	ldrb.w	sl, [r1]
 802971c:	d822      	bhi.n	8029764 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 802971e:	f8cd a010 	str.w	sl, [sp, #16]
 8029722:	460b      	mov	r3, r1
 8029724:	4689      	mov	r9, r1
 8029726:	f8cd a014 	str.w	sl, [sp, #20]
 802972a:	e753      	b.n	80295d4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x6c>
 802972c:	f812 700c 	ldrb.w	r7, [r2, ip]
 8029730:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8029734:	441f      	add	r7, r3
 8029736:	e7da      	b.n	80296ee <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x186>
 8029738:	780b      	ldrb	r3, [r1, #0]
 802973a:	9305      	str	r3, [sp, #20]
 802973c:	460b      	mov	r3, r1
 802973e:	e741      	b.n	80295c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 8029740:	4689      	mov	r9, r1
 8029742:	e7bf      	b.n	80296c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x15c>
 8029744:	780a      	ldrb	r2, [r1, #0]
 8029746:	f1b8 0f00 	cmp.w	r8, #0
 802974a:	9201      	str	r2, [sp, #4]
 802974c:	468c      	mov	ip, r1
 802974e:	f6bf af31 	bge.w	80295b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x4c>
 8029752:	460b      	mov	r3, r1
 8029754:	4689      	mov	r9, r1
 8029756:	9205      	str	r2, [sp, #20]
 8029758:	4692      	mov	sl, r2
 802975a:	e736      	b.n	80295ca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 802975c:	780b      	ldrb	r3, [r1, #0]
 802975e:	9305      	str	r3, [sp, #20]
 8029760:	460b      	mov	r3, r1
 8029762:	e732      	b.n	80295ca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 8029764:	4b03      	ldr	r3, [pc, #12]	@ (8029774 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x20c>)
 8029766:	4a04      	ldr	r2, [pc, #16]	@ (8029778 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x210>)
 8029768:	f240 31ca 	movw	r1, #970	@ 0x3ca
 802976c:	4803      	ldr	r0, [pc, #12]	@ (802977c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x214>)
 802976e:	f001 fb3d 	bl	802adec <__assert_func>
 8029772:	bf00      	nop
 8029774:	0802e264 	.word	0x0802e264
 8029778:	0802e8e0 	.word	0x0802e8e0
 802977c:	0802e3ec 	.word	0x0802e3ec

08029780 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029784:	ed2d 8b08 	vpush	{d8-d11}
 8029788:	b095      	sub	sp, #84	@ 0x54
 802978a:	f89d 40bc 	ldrb.w	r4, [sp, #188]	@ 0xbc
 802978e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8029790:	43e0      	mvns	r0, r4
 8029792:	e9dd a727 	ldrd	sl, r7, [sp, #156]	@ 0x9c
 8029796:	eeb0 aa40 	vmov.f32	s20, s0
 802979a:	eef0 9a60 	vmov.f32	s19, s1
 802979e:	eeb0 9a41 	vmov.f32	s18, s2
 80297a2:	eef0 8a62 	vmov.f32	s17, s5
 80297a6:	eeb0 8a43 	vmov.f32	s16, s6
 80297aa:	eef0 ba44 	vmov.f32	s23, s8
 80297ae:	eeb0 ba64 	vmov.f32	s22, s9
 80297b2:	eef0 aa45 	vmov.f32	s21, s10
 80297b6:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 80297ba:	9411      	str	r4, [sp, #68]	@ 0x44
 80297bc:	469b      	mov	fp, r3
 80297be:	e9dd 422b 	ldrd	r4, r2, [sp, #172]	@ 0xac
 80297c2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80297c4:	6861      	ldr	r1, [r4, #4]
 80297c6:	fb01 2303 	mla	r3, r1, r3, r2
 80297ca:	6821      	ldr	r1, [r4, #0]
 80297cc:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80297ce:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 80297d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80297d4:	6852      	ldr	r2, [r2, #4]
 80297d6:	6824      	ldr	r4, [r4, #0]
 80297d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80297da:	b2c3      	uxtb	r3, r0
 80297dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80297de:	1d13      	adds	r3, r2, #4
 80297e0:	940a      	str	r4, [sp, #40]	@ 0x28
 80297e2:	9308      	str	r3, [sp, #32]
 80297e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80297e6:	2b00      	cmp	r3, #0
 80297e8:	dc02      	bgt.n	80297f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80297ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80297ec:	2b00      	cmp	r3, #0
 80297ee:	dd6c      	ble.n	80298ca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80297f0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80297f2:	f1bb 0f00 	cmp.w	fp, #0
 80297f6:	e9d3 5e02 	ldrd	r5, lr, [r3, #8]
 80297fa:	b228      	sxth	r0, r5
 80297fc:	fa0f f68e 	sxth.w	r6, lr
 8029800:	f340 8245 	ble.w	8029c8e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 8029804:	e9dd 8929 	ldrd	r8, r9, [sp, #164]	@ 0xa4
 8029808:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802980a:	1e44      	subs	r4, r0, #1
 802980c:	f106 3cff 	add.w	ip, r6, #4294967295
 8029810:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8029814:	ea5f 432a 	movs.w	r3, sl, asr #16
 8029818:	ea4f 4127 	mov.w	r1, r7, asr #16
 802981c:	d405      	bmi.n	802982a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802981e:	42a3      	cmp	r3, r4
 8029820:	da03      	bge.n	802982a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8029822:	2900      	cmp	r1, #0
 8029824:	db01      	blt.n	802982a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8029826:	4561      	cmp	r1, ip
 8029828:	db54      	blt.n	80298d4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802982a:	f113 0e01 	adds.w	lr, r3, #1
 802982e:	d407      	bmi.n	8029840 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8029830:	4586      	cmp	lr, r0
 8029832:	dc05      	bgt.n	8029840 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8029834:	f111 0e01 	adds.w	lr, r1, #1
 8029838:	d402      	bmi.n	8029840 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802983a:	45b6      	cmp	lr, r6
 802983c:	f340 8189 	ble.w	8029b52 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8029840:	f1bb 0b01 	subs.w	fp, fp, #1
 8029844:	44c2      	add	sl, r8
 8029846:	444f      	add	r7, r9
 8029848:	f102 0204 	add.w	r2, r2, #4
 802984c:	d1e2      	bne.n	8029814 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802984e:	920d      	str	r2, [sp, #52]	@ 0x34
 8029850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029852:	2b00      	cmp	r3, #0
 8029854:	dd39      	ble.n	80298ca <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8029856:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802985a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802985e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029862:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029866:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802986a:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802986e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029872:	ee76 6a68 	vsub.f32	s13, s12, s17
 8029876:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802987a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802987e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8029882:	ee16 2a90 	vmov	r2, s13
 8029886:	3b01      	subs	r3, #1
 8029888:	930e      	str	r3, [sp, #56]	@ 0x38
 802988a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802988c:	fb92 f3f3 	sdiv	r3, r2, r3
 8029890:	ee17 2a10 	vmov	r2, s14
 8029894:	eeb0 7a48 	vmov.f32	s14, s16
 8029898:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802989c:	ee17 7a10 	vmov	r7, s14
 80298a0:	eeb0 7a68 	vmov.f32	s14, s17
 80298a4:	9329      	str	r3, [sp, #164]	@ 0xa4
 80298a6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80298a8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80298ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80298b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80298b2:	932a      	str	r3, [sp, #168]	@ 0xa8
 80298b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80298b6:	ee17 aa10 	vmov	sl, s14
 80298ba:	eeb0 8a67 	vmov.f32	s16, s15
 80298be:	eef0 8a46 	vmov.f32	s17, s12
 80298c2:	bf14      	ite	ne
 80298c4:	469b      	movne	fp, r3
 80298c6:	4693      	moveq	fp, r2
 80298c8:	e78c      	b.n	80297e4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80298ca:	b015      	add	sp, #84	@ 0x54
 80298cc:	ecbd 8b08 	vpop	{d8-d11}
 80298d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298d4:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 80298d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80298da:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 80298dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80298e0:	fb01 a302 	mla	r3, r1, r2, sl
 80298e4:	141b      	asrs	r3, r3, #16
 80298e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80298e8:	f100 80d3 	bmi.w	8029a92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80298ec:	42a3      	cmp	r3, r4
 80298ee:	f280 80d0 	bge.w	8029a92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80298f2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80298f4:	fb03 7302 	mla	r3, r3, r2, r7
 80298f8:	141b      	asrs	r3, r3, #16
 80298fa:	f100 80ca 	bmi.w	8029a92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 80298fe:	3e01      	subs	r6, #1
 8029900:	42b3      	cmp	r3, r6
 8029902:	f280 80c6 	bge.w	8029a92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8029906:	f1bb 0f00 	cmp.w	fp, #0
 802990a:	dda1      	ble.n	8029850 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802990c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8029910:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8029914:	930c      	str	r3, [sp, #48]	@ 0x30
 8029916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029918:	f103 0804 	add.w	r8, r3, #4
 802991c:	e08f      	b.n	8029a3e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802991e:	7861      	ldrb	r1, [r4, #1]
 8029920:	eb04 0c00 	add.w	ip, r4, r0
 8029924:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029928:	4431      	add	r1, r6
 802992a:	2a00      	cmp	r2, #0
 802992c:	f000 80a3 	beq.w	8029a76 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 8029930:	5c20      	ldrb	r0, [r4, r0]
 8029932:	f89c c001 	ldrb.w	ip, [ip, #1]
 8029936:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802993a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802993e:	4430      	add	r0, r6
 8029940:	44b4      	add	ip, r6
 8029942:	b29b      	uxth	r3, r3
 8029944:	b292      	uxth	r2, r2
 8029946:	fb03 f402 	mul.w	r4, r3, r2
 802994a:	011b      	lsls	r3, r3, #4
 802994c:	f891 b001 	ldrb.w	fp, [r1, #1]
 8029950:	1b1e      	subs	r6, r3, r4
 8029952:	f891 9002 	ldrb.w	r9, [r1, #2]
 8029956:	b2b6      	uxth	r6, r6
 8029958:	7809      	ldrb	r1, [r1, #0]
 802995a:	fb06 fb0b 	mul.w	fp, r6, fp
 802995e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8029962:	b292      	uxth	r2, r2
 8029964:	fb06 f909 	mul.w	r9, r6, r9
 8029968:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802996c:	fb06 f601 	mul.w	r6, r6, r1
 8029970:	1a9b      	subs	r3, r3, r2
 8029972:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8029976:	b29b      	uxth	r3, r3
 8029978:	f89e e002 	ldrb.w	lr, [lr, #2]
 802997c:	fb03 bb01 	mla	fp, r3, r1, fp
 8029980:	9908      	ldr	r1, [sp, #32]
 8029982:	fb03 990e 	mla	r9, r3, lr, r9
 8029986:	5d49      	ldrb	r1, [r1, r5]
 8029988:	7885      	ldrb	r5, [r0, #2]
 802998a:	fb03 6301 	mla	r3, r3, r1, r6
 802998e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8029992:	fb02 9905 	mla	r9, r2, r5, r9
 8029996:	7801      	ldrb	r1, [r0, #0]
 8029998:	fb02 bb0e 	mla	fp, r2, lr, fp
 802999c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80299a0:	fb02 3301 	mla	r3, r2, r1, r3
 80299a4:	f89c e001 	ldrb.w	lr, [ip, #1]
 80299a8:	fb04 9900 	mla	r9, r4, r0, r9
 80299ac:	f89c 1000 	ldrb.w	r1, [ip]
 80299b0:	fb04 bb0e 	mla	fp, r4, lr, fp
 80299b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80299b6:	f818 cc04 	ldrb.w	ip, [r8, #-4]
 80299ba:	fb04 3301 	mla	r3, r4, r1, r3
 80299be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80299c0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80299c4:	fb19 f902 	smulbb	r9, r9, r2
 80299c8:	fb1c fc01 	smulbb	ip, ip, r1
 80299cc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80299d0:	f818 5c02 	ldrb.w	r5, [r8, #-2]
 80299d4:	fb1b fb02 	smulbb	fp, fp, r2
 80299d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80299dc:	f818 6c03 	ldrb.w	r6, [r8, #-3]
 80299e0:	fb05 9901 	mla	r9, r5, r1, r9
 80299e4:	fb03 c302 	mla	r3, r3, r2, ip
 80299e8:	fb06 bb01 	mla	fp, r6, r1, fp
 80299ec:	fa1f f989 	uxth.w	r9, r9
 80299f0:	b29b      	uxth	r3, r3
 80299f2:	f109 0101 	add.w	r1, r9, #1
 80299f6:	1c5a      	adds	r2, r3, #1
 80299f8:	fa1f fb8b 	uxth.w	fp, fp
 80299fc:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8029a00:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029a04:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8029a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029a08:	f10b 0001 	add.w	r0, fp, #1
 8029a0c:	3a01      	subs	r2, #1
 8029a0e:	eb00 2b1b 	add.w	fp, r0, fp, lsr #8
 8029a12:	448a      	add	sl, r1
 8029a14:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8029a16:	9209      	str	r2, [sp, #36]	@ 0x24
 8029a18:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8029a1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8029a20:	121b      	asrs	r3, r3, #8
 8029a22:	3201      	adds	r2, #1
 8029a24:	f808 bc03 	strb.w	fp, [r8, #-3]
 8029a28:	f808 9c02 	strb.w	r9, [r8, #-2]
 8029a2c:	f808 3c04 	strb.w	r3, [r8, #-4]
 8029a30:	440f      	add	r7, r1
 8029a32:	f108 0804 	add.w	r8, r8, #4
 8029a36:	d025      	beq.n	8029a84 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8029a38:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029a3a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029a3e:	ea4f 432a 	mov.w	r3, sl, asr #16
 8029a42:	143c      	asrs	r4, r7, #16
 8029a44:	fb00 3404 	mla	r4, r0, r4, r3
 8029a48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029a4a:	9e08      	ldr	r6, [sp, #32]
 8029a4c:	5d15      	ldrb	r5, [r2, r4]
 8029a4e:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8029a52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029a56:	4414      	add	r4, r2
 8029a58:	eb06 0e05 	add.w	lr, r6, r5
 8029a5c:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8029a60:	2b00      	cmp	r3, #0
 8029a62:	f47f af5c 	bne.w	802991e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8029a66:	b14a      	cbz	r2, 8029a7c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8029a68:	5c20      	ldrb	r0, [r4, r0]
 8029a6a:	46f4      	mov	ip, lr
 8029a6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029a70:	4430      	add	r0, r6
 8029a72:	4671      	mov	r1, lr
 8029a74:	e765      	b.n	8029942 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029a76:	46f4      	mov	ip, lr
 8029a78:	4670      	mov	r0, lr
 8029a7a:	e762      	b.n	8029942 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029a7c:	46f4      	mov	ip, lr
 8029a7e:	4670      	mov	r0, lr
 8029a80:	4671      	mov	r1, lr
 8029a82:	e75e      	b.n	8029942 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029a84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029a86:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8029a8a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 8029a8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8029a90:	e6de      	b.n	8029850 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8029a92:	f1bb 0f00 	cmp.w	fp, #0
 8029a96:	f77f aedb 	ble.w	8029850 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8029a9a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8029a9e:	ea4f 432a 	mov.w	r3, sl, asr #16
 8029aa2:	1439      	asrs	r1, r7, #16
 8029aa4:	4676      	mov	r6, lr
 8029aa6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8029aaa:	f8dd 80b8 	ldr.w	r8, [sp, #184]	@ 0xb8
 8029aae:	2b00      	cmp	r3, #0
 8029ab0:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8029ab4:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8029ab8:	db29      	blt.n	8029b0e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8029aba:	1e6c      	subs	r4, r5, #1
 8029abc:	42a3      	cmp	r3, r4
 8029abe:	da26      	bge.n	8029b0e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8029ac0:	2900      	cmp	r1, #0
 8029ac2:	db24      	blt.n	8029b0e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8029ac4:	1e74      	subs	r4, r6, #1
 8029ac6:	42a1      	cmp	r1, r4
 8029ac8:	da21      	bge.n	8029b0e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8029aca:	b22c      	sxth	r4, r5
 8029acc:	fb01 3304 	mla	r3, r1, r4, r3
 8029ad0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8029ad2:	5ce9      	ldrb	r1, [r5, r3]
 8029ad4:	442b      	add	r3, r5
 8029ad6:	9d08      	ldr	r5, [sp, #32]
 8029ad8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029adc:	9112      	str	r1, [sp, #72]	@ 0x48
 8029ade:	eb05 0c01 	add.w	ip, r5, r1
 8029ae2:	2800      	cmp	r0, #0
 8029ae4:	d04e      	beq.n	8029b84 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8029ae6:	f893 e001 	ldrb.w	lr, [r3, #1]
 8029aea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8029aee:	44ae      	add	lr, r5
 8029af0:	2a00      	cmp	r2, #0
 8029af2:	f000 80c7 	beq.w	8029c84 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8029af6:	1919      	adds	r1, r3, r4
 8029af8:	7849      	ldrb	r1, [r1, #1]
 8029afa:	5d1c      	ldrb	r4, [r3, r4]
 8029afc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8029b00:	186b      	adds	r3, r5, r1
 8029b02:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029b06:	930c      	str	r3, [sp, #48]	@ 0x30
 8029b08:	1963      	adds	r3, r4, r5
 8029b0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8029b0c:	e041      	b.n	8029b92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8029b0e:	1c5c      	adds	r4, r3, #1
 8029b10:	d405      	bmi.n	8029b1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8029b12:	42ac      	cmp	r4, r5
 8029b14:	dc03      	bgt.n	8029b1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8029b16:	1c4c      	adds	r4, r1, #1
 8029b18:	d401      	bmi.n	8029b1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8029b1a:	42b4      	cmp	r4, r6
 8029b1c:	dd21      	ble.n	8029b62 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8029b1e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8029b20:	f1b9 0f00 	cmp.w	r9, #0
 8029b24:	449a      	add	sl, r3
 8029b26:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029b28:	f10b 0b04 	add.w	fp, fp, #4
 8029b2c:	441f      	add	r7, r3
 8029b2e:	dd07      	ble.n	8029b40 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8029b30:	e9d8 5602 	ldrd	r5, r6, [r8, #8]
 8029b34:	f109 39ff 	add.w	r9, r9, #4294967295
 8029b38:	ea4f 432a 	mov.w	r3, sl, asr #16
 8029b3c:	1439      	asrs	r1, r7, #16
 8029b3e:	e7b6      	b.n	8029aae <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8029b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029b44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8029b48:	3301      	adds	r3, #1
 8029b4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029b4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8029b50:	e67e      	b.n	8029850 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8029b52:	920d      	str	r2, [sp, #52]	@ 0x34
 8029b54:	f10b 32ff 	add.w	r2, fp, #4294967295
 8029b58:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8029b5c:	4691      	mov	r9, r2
 8029b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8029b60:	e7a0      	b.n	8029aa4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8029b62:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8029b64:	b236      	sxth	r6, r6
 8029b66:	b22d      	sxth	r5, r5
 8029b68:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029b6c:	e9cd 2405 	strd	r2, r4, [sp, #20]
 8029b70:	9302      	str	r3, [sp, #8]
 8029b72:	e9cd 5600 	strd	r5, r6, [sp]
 8029b76:	9b08      	ldr	r3, [sp, #32]
 8029b78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029b7a:	4659      	mov	r1, fp
 8029b7c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029b7e:	f7ff fcf3 	bl	8029568 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8029b82:	e7cc      	b.n	8029b1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8029b84:	2a00      	cmp	r2, #0
 8029b86:	d173      	bne.n	8029c70 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8029b88:	46e6      	mov	lr, ip
 8029b8a:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 8029b8e:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8029b92:	b283      	uxth	r3, r0
 8029b94:	b292      	uxth	r2, r2
 8029b96:	fb03 f002 	mul.w	r0, r3, r2
 8029b9a:	011b      	lsls	r3, r3, #4
 8029b9c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8029ba0:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8029ba4:	1a19      	subs	r1, r3, r0
 8029ba6:	b289      	uxth	r1, r1
 8029ba8:	f89e e000 	ldrb.w	lr, [lr]
 8029bac:	fb01 f505 	mul.w	r5, r1, r5
 8029bb0:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8029bb4:	fb01 f606 	mul.w	r6, r1, r6
 8029bb8:	b292      	uxth	r2, r2
 8029bba:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8029bbe:	fb01 f40e 	mul.w	r4, r1, lr
 8029bc2:	1a9b      	subs	r3, r3, r2
 8029bc4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8029bc8:	f89c e002 	ldrb.w	lr, [ip, #2]
 8029bcc:	b29b      	uxth	r3, r3
 8029bce:	fb03 6601 	mla	r6, r3, r1, r6
 8029bd2:	fb03 5e0e 	mla	lr, r3, lr, r5
 8029bd6:	9908      	ldr	r1, [sp, #32]
 8029bd8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029bda:	5d49      	ldrb	r1, [r1, r5]
 8029bdc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029bde:	fb03 4301 	mla	r3, r3, r1, r4
 8029be2:	f895 c001 	ldrb.w	ip, [r5, #1]
 8029be6:	78ad      	ldrb	r5, [r5, #2]
 8029be8:	fb02 6c0c 	mla	ip, r2, ip, r6
 8029bec:	fb02 e505 	mla	r5, r2, r5, lr
 8029bf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029bf2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8029bf4:	784e      	ldrb	r6, [r1, #1]
 8029bf6:	7824      	ldrb	r4, [r4, #0]
 8029bf8:	7889      	ldrb	r1, [r1, #2]
 8029bfa:	fb02 3204 	mla	r2, r2, r4, r3
 8029bfe:	fb00 cc06 	mla	ip, r0, r6, ip
 8029c02:	fb00 5501 	mla	r5, r0, r1, r5
 8029c06:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029c08:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8029c0a:	780b      	ldrb	r3, [r1, #0]
 8029c0c:	f89b 4000 	ldrb.w	r4, [fp]
 8029c10:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8029c14:	fb00 2003 	mla	r0, r0, r3, r2
 8029c18:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8029c1c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8029c20:	fb15 f501 	smulbb	r5, r5, r1
 8029c24:	fb14 f406 	smulbb	r4, r4, r6
 8029c28:	fb1c fc01 	smulbb	ip, ip, r1
 8029c2c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8029c30:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8029c34:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029c38:	fb00 4001 	mla	r0, r0, r1, r4
 8029c3c:	fb03 5306 	mla	r3, r3, r6, r5
 8029c40:	fb02 c106 	mla	r1, r2, r6, ip
 8029c44:	b29b      	uxth	r3, r3
 8029c46:	b280      	uxth	r0, r0
 8029c48:	b289      	uxth	r1, r1
 8029c4a:	1c5a      	adds	r2, r3, #1
 8029c4c:	1c4d      	adds	r5, r1, #1
 8029c4e:	1c44      	adds	r4, r0, #1
 8029c50:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029c54:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8029c58:	eb04 2310 	add.w	r3, r4, r0, lsr #8
 8029c5c:	1209      	asrs	r1, r1, #8
 8029c5e:	1212      	asrs	r2, r2, #8
 8029c60:	121b      	asrs	r3, r3, #8
 8029c62:	f88b 1001 	strb.w	r1, [fp, #1]
 8029c66:	f88b 2002 	strb.w	r2, [fp, #2]
 8029c6a:	f88b 3000 	strb.w	r3, [fp]
 8029c6e:	e756      	b.n	8029b1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8029c70:	5d1c      	ldrb	r4, [r3, r4]
 8029c72:	9b08      	ldr	r3, [sp, #32]
 8029c74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029c78:	18e3      	adds	r3, r4, r3
 8029c7a:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 8029c7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8029c80:	46e6      	mov	lr, ip
 8029c82:	e786      	b.n	8029b92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8029c84:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 8029c88:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8029c8c:	e781      	b.n	8029b92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8029c8e:	f43f addf 	beq.w	8029850 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8029c92:	1e44      	subs	r4, r0, #1
 8029c94:	e621      	b.n	80298da <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8029c96:	bf00      	nop

08029c98 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8029c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c9c:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8029ca0:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	@ 0x30
 8029ca4:	fb04 6e0c 	mla	lr, r4, ip, r6
 8029ca8:	2c00      	cmp	r4, #0
 8029caa:	461f      	mov	r7, r3
 8029cac:	eb02 0a0e 	add.w	sl, r2, lr
 8029cb0:	f104 0801 	add.w	r8, r4, #1
 8029cb4:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 8029cb8:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
 8029cbc:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8029cc0:	db01      	blt.n	8029cc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x2e>
 8029cc2:	45a1      	cmp	r9, r4
 8029cc4:	dc6f      	bgt.n	8029da6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x10e>
 8029cc6:	f891 b000 	ldrb.w	fp, [r1]
 8029cca:	460b      	mov	r3, r1
 8029ccc:	465c      	mov	r4, fp
 8029cce:	468e      	mov	lr, r1
 8029cd0:	f1b8 0f00 	cmp.w	r8, #0
 8029cd4:	db01      	blt.n	8029cda <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x42>
 8029cd6:	45c1      	cmp	r9, r8
 8029cd8:	dc4a      	bgt.n	8029d70 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xd8>
 8029cda:	f891 9000 	ldrb.w	r9, [r1]
 8029cde:	460f      	mov	r7, r1
 8029ce0:	46ca      	mov	sl, r9
 8029ce2:	4688      	mov	r8, r1
 8029ce4:	2d0f      	cmp	r5, #15
 8029ce6:	f200 8097 	bhi.w	8029e18 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8029cea:	280f      	cmp	r0, #15
 8029cec:	f200 8094 	bhi.w	8029e18 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8029cf0:	b2aa      	uxth	r2, r5
 8029cf2:	b280      	uxth	r0, r0
 8029cf4:	fb02 f600 	mul.w	r6, r2, r0
 8029cf8:	0112      	lsls	r2, r2, #4
 8029cfa:	1b95      	subs	r5, r2, r6
 8029cfc:	f893 c001 	ldrb.w	ip, [r3, #1]
 8029d00:	789b      	ldrb	r3, [r3, #2]
 8029d02:	b2ad      	uxth	r5, r5
 8029d04:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8029d08:	fb05 f404 	mul.w	r4, r5, r4
 8029d0c:	fb05 fc0c 	mul.w	ip, r5, ip
 8029d10:	fb05 f503 	mul.w	r5, r5, r3
 8029d14:	b280      	uxth	r0, r0
 8029d16:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8029d1a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8029d1e:	1a12      	subs	r2, r2, r0
 8029d20:	f89e e002 	ldrb.w	lr, [lr, #2]
 8029d24:	b292      	uxth	r2, r2
 8029d26:	fb02 cc03 	mla	ip, r2, r3, ip
 8029d2a:	fb02 440b 	mla	r4, r2, fp, r4
 8029d2e:	fb02 520e 	mla	r2, r2, lr, r5
 8029d32:	f898 3001 	ldrb.w	r3, [r8, #1]
 8029d36:	f898 8002 	ldrb.w	r8, [r8, #2]
 8029d3a:	fb00 cc03 	mla	ip, r0, r3, ip
 8029d3e:	fb00 4909 	mla	r9, r0, r9, r4
 8029d42:	fb00 2008 	mla	r0, r0, r8, r2
 8029d46:	787b      	ldrb	r3, [r7, #1]
 8029d48:	78ba      	ldrb	r2, [r7, #2]
 8029d4a:	fb06 9a0a 	mla	sl, r6, sl, r9
 8029d4e:	fb06 c303 	mla	r3, r6, r3, ip
 8029d52:	fb06 0602 	mla	r6, r6, r2, r0
 8029d56:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8029d5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029d5e:	0236      	lsls	r6, r6, #8
 8029d60:	ea43 030a 	orr.w	r3, r3, sl
 8029d64:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 8029d68:	4333      	orrs	r3, r6
 8029d6a:	600b      	str	r3, [r1, #0]
 8029d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d70:	b378      	cbz	r0, 8029dd2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x13a>
 8029d72:	2e00      	cmp	r6, #0
 8029d74:	db3f      	blt.n	8029df6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8029d76:	45b4      	cmp	ip, r6
 8029d78:	dd3d      	ble.n	8029df6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 8029d7a:	f81a 800c 	ldrb.w	r8, [sl, ip]
 8029d7e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8029d82:	44b8      	add	r8, r7
 8029d84:	3601      	adds	r6, #1
 8029d86:	f898 9000 	ldrb.w	r9, [r8]
 8029d8a:	d430      	bmi.n	8029dee <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 8029d8c:	45b4      	cmp	ip, r6
 8029d8e:	dd2e      	ble.n	8029dee <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 8029d90:	2d00      	cmp	r5, #0
 8029d92:	d03d      	beq.n	8029e10 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x178>
 8029d94:	44d4      	add	ip, sl
 8029d96:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8029d9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8029d9e:	f817 a002 	ldrb.w	sl, [r7, r2]
 8029da2:	4417      	add	r7, r2
 8029da4:	e79e      	b.n	8029ce4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 8029da6:	2e00      	cmp	r6, #0
 8029da8:	db01      	blt.n	8029dae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x116>
 8029daa:	45b4      	cmp	ip, r6
 8029dac:	dc19      	bgt.n	8029de2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x14a>
 8029dae:	468e      	mov	lr, r1
 8029db0:	1c73      	adds	r3, r6, #1
 8029db2:	f89e b000 	ldrb.w	fp, [lr]
 8029db6:	d409      	bmi.n	8029dcc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8029db8:	459c      	cmp	ip, r3
 8029dba:	dd07      	ble.n	8029dcc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 8029dbc:	b1ed      	cbz	r5, 8029dfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8029dbe:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8029dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029dc6:	5cfc      	ldrb	r4, [r7, r3]
 8029dc8:	443b      	add	r3, r7
 8029dca:	e781      	b.n	8029cd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 8029dcc:	780c      	ldrb	r4, [r1, #0]
 8029dce:	460b      	mov	r3, r1
 8029dd0:	e77e      	b.n	8029cd0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 8029dd2:	2d0f      	cmp	r5, #15
 8029dd4:	f891 9000 	ldrb.w	r9, [r1]
 8029dd8:	d81e      	bhi.n	8029e18 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 8029dda:	460f      	mov	r7, r1
 8029ddc:	4688      	mov	r8, r1
 8029dde:	46ca      	mov	sl, r9
 8029de0:	e786      	b.n	8029cf0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x58>
 8029de2:	f812 e00e 	ldrb.w	lr, [r2, lr]
 8029de6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8029dea:	449e      	add	lr, r3
 8029dec:	e7e0      	b.n	8029db0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x118>
 8029dee:	f891 a000 	ldrb.w	sl, [r1]
 8029df2:	460f      	mov	r7, r1
 8029df4:	e776      	b.n	8029ce4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 8029df6:	4688      	mov	r8, r1
 8029df8:	e7c4      	b.n	8029d84 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xec>
 8029dfa:	f1b8 0f00 	cmp.w	r8, #0
 8029dfe:	780c      	ldrb	r4, [r1, #0]
 8029e00:	460b      	mov	r3, r1
 8029e02:	f6bf af68 	bge.w	8029cd6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x3e>
 8029e06:	460f      	mov	r7, r1
 8029e08:	4688      	mov	r8, r1
 8029e0a:	46a2      	mov	sl, r4
 8029e0c:	46a1      	mov	r9, r4
 8029e0e:	e76c      	b.n	8029cea <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8029e10:	f891 a000 	ldrb.w	sl, [r1]
 8029e14:	460f      	mov	r7, r1
 8029e16:	e768      	b.n	8029cea <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8029e18:	4b03      	ldr	r3, [pc, #12]	@ (8029e28 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x190>)
 8029e1a:	4a04      	ldr	r2, [pc, #16]	@ (8029e2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x194>)
 8029e1c:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8029e20:	4803      	ldr	r0, [pc, #12]	@ (8029e30 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x198>)
 8029e22:	f000 ffe3 	bl	802adec <__assert_func>
 8029e26:	bf00      	nop
 8029e28:	0802e264 	.word	0x0802e264
 8029e2c:	0802e8e0 	.word	0x0802e8e0
 8029e30:	0802e3ec 	.word	0x0802e3ec

08029e34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e38:	ed2d 8b0a 	vpush	{d8-d12}
 8029e3c:	eeb0 aa40 	vmov.f32	s20, s0
 8029e40:	eef0 9a60 	vmov.f32	s19, s1
 8029e44:	eeb0 9a41 	vmov.f32	s18, s2
 8029e48:	eef0 8a62 	vmov.f32	s17, s5
 8029e4c:	eeb0 8a43 	vmov.f32	s16, s6
 8029e50:	eeb0 ca44 	vmov.f32	s24, s8
 8029e54:	eef0 ba64 	vmov.f32	s23, s9
 8029e58:	eeb0 ba45 	vmov.f32	s22, s10
 8029e5c:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8029e60:	b091      	sub	sp, #68	@ 0x44
 8029e62:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8029e66:	e9dd 9525 	ldrd	r9, r5, [sp, #148]	@ 0x94
 8029e6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8029e6c:	4698      	mov	r8, r3
 8029e6e:	e9dd 0229 	ldrd	r0, r2, [sp, #164]	@ 0xa4
 8029e72:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8029e74:	6841      	ldr	r1, [r0, #4]
 8029e76:	fb01 2303 	mla	r3, r1, r3, r2
 8029e7a:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8029e7c:	6801      	ldr	r1, [r0, #0]
 8029e7e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8029e80:	6852      	ldr	r2, [r2, #4]
 8029e82:	6800      	ldr	r0, [r0, #0]
 8029e84:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
 8029e88:	1d13      	adds	r3, r2, #4
 8029e8a:	9009      	str	r0, [sp, #36]	@ 0x24
 8029e8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8029e8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029e90:	2b00      	cmp	r3, #0
 8029e92:	dc02      	bgt.n	8029e9a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029e96:	2b00      	cmp	r3, #0
 8029e98:	dd66      	ble.n	8029f68 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029e9a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029e9c:	f1b8 0f00 	cmp.w	r8, #0
 8029ea0:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 8029ea4:	b221      	sxth	r1, r4
 8029ea6:	fa0f f78e 	sxth.w	r7, lr
 8029eaa:	f340 81df 	ble.w	802a26c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8029eae:	1e4e      	subs	r6, r1, #1
 8029eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8029eb4:	f8cd e01c 	str.w	lr, [sp, #28]
 8029eb8:	e9dd eb27 	ldrd	lr, fp, [sp, #156]	@ 0x9c
 8029ebc:	ea5f 4329 	movs.w	r3, r9, asr #16
 8029ec0:	ea4f 4025 	mov.w	r0, r5, asr #16
 8029ec4:	d405      	bmi.n	8029ed2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8029ec6:	42b3      	cmp	r3, r6
 8029ec8:	da03      	bge.n	8029ed2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8029eca:	2800      	cmp	r0, #0
 8029ecc:	db01      	blt.n	8029ed2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8029ece:	4560      	cmp	r0, ip
 8029ed0:	db4f      	blt.n	8029f72 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8029ed2:	1c5a      	adds	r2, r3, #1
 8029ed4:	d406      	bmi.n	8029ee4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8029ed6:	428a      	cmp	r2, r1
 8029ed8:	dc04      	bgt.n	8029ee4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8029eda:	1c42      	adds	r2, r0, #1
 8029edc:	d402      	bmi.n	8029ee4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8029ede:	42ba      	cmp	r2, r7
 8029ee0:	f340 8157 	ble.w	802a192 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8029ee4:	f1b8 0801 	subs.w	r8, r8, #1
 8029ee8:	44f1      	add	r9, lr
 8029eea:	445d      	add	r5, fp
 8029eec:	f10a 0a04 	add.w	sl, sl, #4
 8029ef0:	d1e4      	bne.n	8029ebc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8029ef2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029ef4:	2b00      	cmp	r3, #0
 8029ef6:	dd37      	ble.n	8029f68 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029ef8:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8029efc:	ee79 9aab 	vadd.f32	s19, s19, s23
 8029f00:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8029f04:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8029f08:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8029f0c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029f10:	ee76 6a68 	vsub.f32	s13, s12, s17
 8029f14:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8029f18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029f1c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8029f20:	ee16 2a90 	vmov	r2, s13
 8029f24:	3b01      	subs	r3, #1
 8029f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8029f28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8029f2e:	ee17 2a10 	vmov	r2, s14
 8029f32:	eeb0 7a48 	vmov.f32	s14, s16
 8029f36:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8029f3a:	ee17 5a10 	vmov	r5, s14
 8029f3e:	eeb0 7a68 	vmov.f32	s14, s17
 8029f42:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029f44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029f46:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8029f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8029f4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029f50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029f52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029f54:	ee17 9a10 	vmov	r9, s14
 8029f58:	eeb0 8a67 	vmov.f32	s16, s15
 8029f5c:	eef0 8a46 	vmov.f32	s17, s12
 8029f60:	bf14      	ite	ne
 8029f62:	4698      	movne	r8, r3
 8029f64:	4690      	moveq	r8, r2
 8029f66:	e792      	b.n	8029e8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8029f68:	b011      	add	sp, #68	@ 0x44
 8029f6a:	ecbd 8b0a 	vpop	{d8-d12}
 8029f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f72:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8029f76:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8029f78:	f108 32ff 	add.w	r2, r8, #4294967295
 8029f7c:	fb00 9302 	mla	r3, r0, r2, r9
 8029f80:	141b      	asrs	r3, r3, #16
 8029f82:	9207      	str	r2, [sp, #28]
 8029f84:	f100 80a6 	bmi.w	802a0d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8029f88:	42b3      	cmp	r3, r6
 8029f8a:	f280 80a3 	bge.w	802a0d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8029f8e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029f90:	fb03 5302 	mla	r3, r3, r2, r5
 8029f94:	141b      	asrs	r3, r3, #16
 8029f96:	f100 809d 	bmi.w	802a0d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8029f9a:	3f01      	subs	r7, #1
 8029f9c:	42bb      	cmp	r3, r7
 8029f9e:	f280 8099 	bge.w	802a0d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8029fa2:	f1b8 0f00 	cmp.w	r8, #0
 8029fa6:	dda4      	ble.n	8029ef2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8029fa8:	f8cd a020 	str.w	sl, [sp, #32]
 8029fac:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8029fb0:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8029fb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8029fb8:	e065      	b.n	802a086 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8029fba:	f890 c001 	ldrb.w	ip, [r0, #1]
 8029fbe:	1844      	adds	r4, r0, r1
 8029fc0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8029fc4:	44d4      	add	ip, sl
 8029fc6:	2a00      	cmp	r2, #0
 8029fc8:	d078      	beq.n	802a0bc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8029fca:	5c40      	ldrb	r0, [r0, r1]
 8029fcc:	7866      	ldrb	r6, [r4, #1]
 8029fce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8029fd2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8029fd6:	4450      	add	r0, sl
 8029fd8:	4456      	add	r6, sl
 8029fda:	b29b      	uxth	r3, r3
 8029fdc:	b292      	uxth	r2, r2
 8029fde:	fb03 f402 	mul.w	r4, r3, r2
 8029fe2:	011b      	lsls	r3, r3, #4
 8029fe4:	f89c 8000 	ldrb.w	r8, [ip]
 8029fe8:	f89c e001 	ldrb.w	lr, [ip, #1]
 8029fec:	1b19      	subs	r1, r3, r4
 8029fee:	f89c c002 	ldrb.w	ip, [ip, #2]
 8029ff2:	b289      	uxth	r1, r1
 8029ff4:	fb01 fe0e 	mul.w	lr, r1, lr
 8029ff8:	fb01 f808 	mul.w	r8, r1, r8
 8029ffc:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802a000:	fb01 f10c 	mul.w	r1, r1, ip
 802a004:	b292      	uxth	r2, r2
 802a006:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802a00a:	f81a b00b 	ldrb.w	fp, [sl, fp]
 802a00e:	f897 c001 	ldrb.w	ip, [r7, #1]
 802a012:	1a9b      	subs	r3, r3, r2
 802a014:	78bf      	ldrb	r7, [r7, #2]
 802a016:	b29b      	uxth	r3, r3
 802a018:	fb03 880b 	mla	r8, r3, fp, r8
 802a01c:	fb03 ec0c 	mla	ip, r3, ip, lr
 802a020:	fb03 1307 	mla	r3, r3, r7, r1
 802a024:	7881      	ldrb	r1, [r0, #2]
 802a026:	f890 b000 	ldrb.w	fp, [r0]
 802a02a:	fb02 3301 	mla	r3, r2, r1, r3
 802a02e:	f890 e001 	ldrb.w	lr, [r0, #1]
 802a032:	78b1      	ldrb	r1, [r6, #2]
 802a034:	fb02 880b 	mla	r8, r2, fp, r8
 802a038:	fb02 cc0e 	mla	ip, r2, lr, ip
 802a03c:	fb04 3301 	mla	r3, r4, r1, r3
 802a040:	f896 b000 	ldrb.w	fp, [r6]
 802a044:	f896 e001 	ldrb.w	lr, [r6, #1]
 802a048:	0219      	lsls	r1, r3, #8
 802a04a:	fb04 880b 	mla	r8, r4, fp, r8
 802a04e:	fb04 cc0e 	mla	ip, r4, lr, ip
 802a052:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
 802a056:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 802a058:	9a07      	ldr	r2, [sp, #28]
 802a05a:	4489      	add	r9, r1
 802a05c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a05e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802a062:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802a066:	ea48 080c 	orr.w	r8, r8, ip
 802a06a:	440d      	add	r5, r1
 802a06c:	9908      	ldr	r1, [sp, #32]
 802a06e:	3a01      	subs	r2, #1
 802a070:	ea48 0303 	orr.w	r3, r8, r3
 802a074:	9207      	str	r2, [sp, #28]
 802a076:	f841 3b04 	str.w	r3, [r1], #4
 802a07a:	3201      	adds	r2, #1
 802a07c:	9108      	str	r1, [sp, #32]
 802a07e:	d024      	beq.n	802a0ca <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802a080:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a082:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a086:	ea4f 4329 	mov.w	r3, r9, asr #16
 802a08a:	1428      	asrs	r0, r5, #16
 802a08c:	fb01 3000 	mla	r0, r1, r0, r3
 802a090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a092:	f3c9 3303 	ubfx	r3, r9, #12, #4
 802a096:	f812 b000 	ldrb.w	fp, [r2, r0]
 802a09a:	4410      	add	r0, r2
 802a09c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 802a0a0:	eb0a 070b 	add.w	r7, sl, fp
 802a0a4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802a0a8:	2b00      	cmp	r3, #0
 802a0aa:	d186      	bne.n	8029fba <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802a0ac:	b14a      	cbz	r2, 802a0c2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802a0ae:	5c40      	ldrb	r0, [r0, r1]
 802a0b0:	463e      	mov	r6, r7
 802a0b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802a0b6:	4450      	add	r0, sl
 802a0b8:	46bc      	mov	ip, r7
 802a0ba:	e78e      	b.n	8029fda <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802a0bc:	463e      	mov	r6, r7
 802a0be:	4638      	mov	r0, r7
 802a0c0:	e78b      	b.n	8029fda <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802a0c2:	463e      	mov	r6, r7
 802a0c4:	4638      	mov	r0, r7
 802a0c6:	46bc      	mov	ip, r7
 802a0c8:	e787      	b.n	8029fda <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802a0ca:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	@ 0x34
 802a0ce:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 802a0d2:	e70e      	b.n	8029ef2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802a0d4:	f1b8 0f00 	cmp.w	r8, #0
 802a0d8:	f77f af0b 	ble.w	8029ef2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802a0dc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a0e0:	ea4f 4329 	mov.w	r3, r9, asr #16
 802a0e4:	1428      	asrs	r0, r5, #16
 802a0e6:	4677      	mov	r7, lr
 802a0e8:	46d0      	mov	r8, sl
 802a0ea:	f8cd a020 	str.w	sl, [sp, #32]
 802a0ee:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 802a0f2:	2b00      	cmp	r3, #0
 802a0f4:	f3c9 3103 	ubfx	r1, r9, #12, #4
 802a0f8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802a0fc:	db28      	blt.n	802a150 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802a0fe:	1e66      	subs	r6, r4, #1
 802a100:	42b3      	cmp	r3, r6
 802a102:	da25      	bge.n	802a150 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802a104:	2800      	cmp	r0, #0
 802a106:	db23      	blt.n	802a150 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802a108:	1e7e      	subs	r6, r7, #1
 802a10a:	42b0      	cmp	r0, r6
 802a10c:	da20      	bge.n	802a150 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802a10e:	b224      	sxth	r4, r4
 802a110:	fb00 3304 	mla	r3, r0, r4, r3
 802a114:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a116:	5cc7      	ldrb	r7, [r0, r3]
 802a118:	4403      	add	r3, r0
 802a11a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802a11c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802a120:	eb00 0c07 	add.w	ip, r0, r7
 802a124:	2900      	cmp	r1, #0
 802a126:	d04a      	beq.n	802a1be <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802a128:	785e      	ldrb	r6, [r3, #1]
 802a12a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802a12e:	4406      	add	r6, r0
 802a130:	2a00      	cmp	r2, #0
 802a132:	f000 8098 	beq.w	802a266 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 802a136:	1918      	adds	r0, r3, r4
 802a138:	7840      	ldrb	r0, [r0, #1]
 802a13a:	5d1c      	ldrb	r4, [r3, r4]
 802a13c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a13e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802a142:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802a146:	1818      	adds	r0, r3, r0
 802a148:	18e3      	adds	r3, r4, r3
 802a14a:	900d      	str	r0, [sp, #52]	@ 0x34
 802a14c:	930e      	str	r3, [sp, #56]	@ 0x38
 802a14e:	e03b      	b.n	802a1c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802a150:	1c5e      	adds	r6, r3, #1
 802a152:	d405      	bmi.n	802a160 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802a154:	42a6      	cmp	r6, r4
 802a156:	dc03      	bgt.n	802a160 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802a158:	1c46      	adds	r6, r0, #1
 802a15a:	d401      	bmi.n	802a160 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802a15c:	42be      	cmp	r6, r7
 802a15e:	dd1f      	ble.n	802a1a0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802a160:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a162:	f1bb 0f00 	cmp.w	fp, #0
 802a166:	4499      	add	r9, r3
 802a168:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a16a:	f108 0804 	add.w	r8, r8, #4
 802a16e:	441d      	add	r5, r3
 802a170:	dd07      	ble.n	802a182 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802a172:	e9da 4702 	ldrd	r4, r7, [sl, #8]
 802a176:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a17a:	ea4f 4329 	mov.w	r3, r9, asr #16
 802a17e:	1428      	asrs	r0, r5, #16
 802a180:	e7b7      	b.n	802a0f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802a182:	e9dd 3a07 	ldrd	r3, sl, [sp, #28]
 802a186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802a18a:	3301      	adds	r3, #1
 802a18c:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 802a190:	e6af      	b.n	8029ef2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802a192:	f108 32ff 	add.w	r2, r8, #4294967295
 802a196:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802a19a:	4693      	mov	fp, r2
 802a19c:	9207      	str	r2, [sp, #28]
 802a19e:	e7a2      	b.n	802a0e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802a1a0:	b23f      	sxth	r7, r7
 802a1a2:	b224      	sxth	r4, r4
 802a1a4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 802a1a8:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802a1ac:	e9cd 4700 	strd	r4, r7, [sp]
 802a1b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a1b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a1b4:	4641      	mov	r1, r8
 802a1b6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a1b8:	f7ff fd6e 	bl	8029c98 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 802a1bc:	e7d0      	b.n	802a160 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802a1be:	2a00      	cmp	r2, #0
 802a1c0:	d147      	bne.n	802a252 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 802a1c2:	4666      	mov	r6, ip
 802a1c4:	e9cd cc0d 	strd	ip, ip, [sp, #52]	@ 0x34
 802a1c8:	b28b      	uxth	r3, r1
 802a1ca:	b292      	uxth	r2, r2
 802a1cc:	fb03 f002 	mul.w	r0, r3, r2
 802a1d0:	011b      	lsls	r3, r3, #4
 802a1d2:	f896 e000 	ldrb.w	lr, [r6]
 802a1d6:	7874      	ldrb	r4, [r6, #1]
 802a1d8:	1a19      	subs	r1, r3, r0
 802a1da:	78b6      	ldrb	r6, [r6, #2]
 802a1dc:	b289      	uxth	r1, r1
 802a1de:	fb01 f404 	mul.w	r4, r1, r4
 802a1e2:	fb01 fe0e 	mul.w	lr, r1, lr
 802a1e6:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 802a1ea:	fb01 f106 	mul.w	r1, r1, r6
 802a1ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802a1f0:	b292      	uxth	r2, r2
 802a1f2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802a1f6:	5df7      	ldrb	r7, [r6, r7]
 802a1f8:	1a9b      	subs	r3, r3, r2
 802a1fa:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802a1fe:	f89c c002 	ldrb.w	ip, [ip, #2]
 802a202:	b29b      	uxth	r3, r3
 802a204:	fb03 4606 	mla	r6, r3, r6, r4
 802a208:	fb03 e707 	mla	r7, r3, r7, lr
 802a20c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802a20e:	fb03 130c 	mla	r3, r3, ip, r1
 802a212:	7861      	ldrb	r1, [r4, #1]
 802a214:	f894 c000 	ldrb.w	ip, [r4]
 802a218:	78a4      	ldrb	r4, [r4, #2]
 802a21a:	fb02 6601 	mla	r6, r2, r1, r6
 802a21e:	fb02 770c 	mla	r7, r2, ip, r7
 802a222:	fb02 3104 	mla	r1, r2, r4, r3
 802a226:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802a228:	7862      	ldrb	r2, [r4, #1]
 802a22a:	7823      	ldrb	r3, [r4, #0]
 802a22c:	78a4      	ldrb	r4, [r4, #2]
 802a22e:	fb00 6602 	mla	r6, r0, r2, r6
 802a232:	fb00 7303 	mla	r3, r0, r3, r7
 802a236:	fb00 1204 	mla	r2, r0, r4, r1
 802a23a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a23e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802a242:	0212      	lsls	r2, r2, #8
 802a244:	4333      	orrs	r3, r6
 802a246:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 802a24a:	4313      	orrs	r3, r2
 802a24c:	f8c8 3000 	str.w	r3, [r8]
 802a250:	e786      	b.n	802a160 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802a252:	5d1c      	ldrb	r4, [r3, r4]
 802a254:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a256:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802a25a:	18e3      	adds	r3, r4, r3
 802a25c:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 802a260:	930e      	str	r3, [sp, #56]	@ 0x38
 802a262:	4666      	mov	r6, ip
 802a264:	e7b0      	b.n	802a1c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802a266:	e9cd cc0d 	strd	ip, ip, [sp, #52]	@ 0x34
 802a26a:	e7ad      	b.n	802a1c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802a26c:	f43f ae41 	beq.w	8029ef2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802a270:	1e4e      	subs	r6, r1, #1
 802a272:	e680      	b.n	8029f76 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>

0802a274 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 802a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a278:	b087      	sub	sp, #28
 802a27a:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 802a27e:	e9dd 0412 	ldrd	r0, r4, [sp, #72]	@ 0x48
 802a282:	fb04 070c 	mla	r7, r4, ip, r0
 802a286:	9100      	str	r1, [sp, #0]
 802a288:	f89d 1058 	ldrb.w	r1, [sp, #88]	@ 0x58
 802a28c:	2c00      	cmp	r4, #0
 802a28e:	eb02 0b07 	add.w	fp, r2, r7
 802a292:	f104 0501 	add.w	r5, r4, #1
 802a296:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	@ 0x44
 802a29a:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 802a29e:	f89d 6054 	ldrb.w	r6, [sp, #84]	@ 0x54
 802a2a2:	9101      	str	r1, [sp, #4]
 802a2a4:	db02      	blt.n	802a2ac <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x38>
 802a2a6:	45a0      	cmp	r8, r4
 802a2a8:	f300 811a 	bgt.w	802a4e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x26c>
 802a2ac:	2700      	movs	r7, #0
 802a2ae:	46be      	mov	lr, r7
 802a2b0:	46b9      	mov	r9, r7
 802a2b2:	463c      	mov	r4, r7
 802a2b4:	2d00      	cmp	r5, #0
 802a2b6:	db02      	blt.n	802a2be <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x4a>
 802a2b8:	45a8      	cmp	r8, r5
 802a2ba:	f300 812b 	bgt.w	802a514 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2a0>
 802a2be:	f04f 0c00 	mov.w	ip, #0
 802a2c2:	46e0      	mov	r8, ip
 802a2c4:	4665      	mov	r5, ip
 802a2c6:	f8cd c010 	str.w	ip, [sp, #16]
 802a2ca:	f1ba 0f0f 	cmp.w	sl, #15
 802a2ce:	f200 8167 	bhi.w	802a5a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 802a2d2:	2e0f      	cmp	r6, #15
 802a2d4:	f200 8164 	bhi.w	802a5a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 802a2d8:	b2b2      	uxth	r2, r6
 802a2da:	fa1f f38a 	uxth.w	r3, sl
 802a2de:	fb02 f603 	mul.w	r6, r2, r3
 802a2e2:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802a2e6:	b292      	uxth	r2, r2
 802a2e8:	fb02 fa08 	mul.w	sl, r2, r8
 802a2ec:	fb06 fb0c 	mul.w	fp, r6, ip
 802a2f0:	011b      	lsls	r3, r3, #4
 802a2f2:	1b98      	subs	r0, r3, r6
 802a2f4:	b280      	uxth	r0, r0
 802a2f6:	9002      	str	r0, [sp, #8]
 802a2f8:	fb00 f007 	mul.w	r0, r0, r7
 802a2fc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802a300:	1a9b      	subs	r3, r3, r2
 802a302:	b29b      	uxth	r3, r3
 802a304:	fb03 000e 	mla	r0, r3, lr, r0
 802a308:	4450      	add	r0, sl
 802a30a:	4458      	add	r0, fp
 802a30c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802a310:	9003      	str	r0, [sp, #12]
 802a312:	2800      	cmp	r0, #0
 802a314:	f000 80e1 	beq.w	802a4da <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x266>
 802a318:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802a31c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802a320:	f009 1bff 	and.w	fp, r9, #16711935	@ 0xff00ff
 802a324:	9105      	str	r1, [sp, #20]
 802a326:	d01d      	beq.n	802a364 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xf0>
 802a328:	fb0b fb0e 	mul.w	fp, fp, lr
 802a32c:	fb01 fe0e 	mul.w	lr, r1, lr
 802a330:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 802a334:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 802a338:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a33c:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 802a340:	44d3      	add	fp, sl
 802a342:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 802a346:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802a34a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a34e:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802a352:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802a356:	ea4b 0e0e 	orr.w	lr, fp, lr
 802a35a:	f40e 417f 	and.w	r1, lr, #65280	@ 0xff00
 802a35e:	f00e 1bff 	and.w	fp, lr, #16711935	@ 0xff00ff
 802a362:	9105      	str	r1, [sp, #20]
 802a364:	2fff      	cmp	r7, #255	@ 0xff
 802a366:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802a36a:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a36e:	d01b      	beq.n	802a3a8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x134>
 802a370:	fb0e fe07 	mul.w	lr, lr, r7
 802a374:	fb04 f407 	mul.w	r4, r4, r7
 802a378:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 802a37c:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 802a380:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802a384:	f504 7080 	add.w	r0, r4, #256	@ 0x100
 802a388:	44d6      	add	lr, sl
 802a38a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802a38e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a392:	0a24      	lsrs	r4, r4, #8
 802a394:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a398:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a39c:	ea4e 0404 	orr.w	r4, lr, r4
 802a3a0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802a3a4:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a3a8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802a3ac:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 802a3b0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802a3b4:	d019      	beq.n	802a3ea <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x176>
 802a3b6:	fb00 f008 	mul.w	r0, r0, r8
 802a3ba:	fb05 f508 	mul.w	r5, r5, r8
 802a3be:	ea4f 2910 	mov.w	r9, r0, lsr #8
 802a3c2:	f009 19ff 	and.w	r9, r9, #16711935	@ 0xff00ff
 802a3c6:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802a3ca:	f505 7780 	add.w	r7, r5, #256	@ 0x100
 802a3ce:	4448      	add	r0, r9
 802a3d0:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802a3d4:	0a00      	lsrs	r0, r0, #8
 802a3d6:	0a2d      	lsrs	r5, r5, #8
 802a3d8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802a3dc:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802a3e0:	4305      	orrs	r5, r0
 802a3e2:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 802a3e6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802a3ea:	9904      	ldr	r1, [sp, #16]
 802a3ec:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802a3f0:	f001 1aff 	and.w	sl, r1, #16711935	@ 0xff00ff
 802a3f4:	f401 497f 	and.w	r9, r1, #65280	@ 0xff00
 802a3f8:	d01c      	beq.n	802a434 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x1c0>
 802a3fa:	fb0a fa0c 	mul.w	sl, sl, ip
 802a3fe:	fb09 fc0c 	mul.w	ip, r9, ip
 802a402:	ea4f 281a 	mov.w	r8, sl, lsr #8
 802a406:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802a40a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802a40e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802a412:	44c2      	add	sl, r8
 802a414:	eb07 2c1c 	add.w	ip, r7, ip, lsr #8
 802a418:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a41c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a420:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 802a424:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802a428:	ea4a 090c 	orr.w	r9, sl, ip
 802a42c:	f009 1aff 	and.w	sl, r9, #16711935	@ 0xff00ff
 802a430:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802a434:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 802a438:	9903      	ldr	r1, [sp, #12]
 802a43a:	fb01 fc08 	mul.w	ip, r1, r8
 802a43e:	f10c 0701 	add.w	r7, ip, #1
 802a442:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a446:	ea6f 2c17 	mvn.w	ip, r7, lsr #8
 802a44a:	9902      	ldr	r1, [sp, #8]
 802a44c:	fa5f f78c 	uxtb.w	r7, ip
 802a450:	fb04 f401 	mul.w	r4, r4, r1
 802a454:	fb0e fe01 	mul.w	lr, lr, r1
 802a458:	9905      	ldr	r1, [sp, #20]
 802a45a:	fb0b ee03 	mla	lr, fp, r3, lr
 802a45e:	fb01 4303 	mla	r3, r1, r3, r4
 802a462:	fb00 e002 	mla	r0, r0, r2, lr
 802a466:	fb05 3502 	mla	r5, r5, r2, r3
 802a46a:	fb0a 0a06 	mla	sl, sl, r6, r0
 802a46e:	fb09 5906 	mla	r9, r9, r6, r5
 802a472:	ea4f 261a 	mov.w	r6, sl, lsr #8
 802a476:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a47a:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 802a47e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802a482:	ea46 0609 	orr.w	r6, r6, r9
 802a486:	b2f2      	uxtb	r2, r6
 802a488:	f3c6 2307 	ubfx	r3, r6, #8, #8
 802a48c:	0c36      	lsrs	r6, r6, #16
 802a48e:	9900      	ldr	r1, [sp, #0]
 802a490:	fb12 f408 	smulbb	r4, r2, r8
 802a494:	fb13 f008 	smulbb	r0, r3, r8
 802a498:	fb16 f808 	smulbb	r8, r6, r8
 802a49c:	780a      	ldrb	r2, [r1, #0]
 802a49e:	784b      	ldrb	r3, [r1, #1]
 802a4a0:	788e      	ldrb	r6, [r1, #2]
 802a4a2:	fb02 4207 	mla	r2, r2, r7, r4
 802a4a6:	fb03 0307 	mla	r3, r3, r7, r0
 802a4aa:	fb06 8807 	mla	r8, r6, r7, r8
 802a4ae:	b292      	uxth	r2, r2
 802a4b0:	b29b      	uxth	r3, r3
 802a4b2:	fa1f f888 	uxth.w	r8, r8
 802a4b6:	1c54      	adds	r4, r2, #1
 802a4b8:	1c58      	adds	r0, r3, #1
 802a4ba:	f108 0701 	add.w	r7, r8, #1
 802a4be:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802a4c2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802a4c6:	eb07 2818 	add.w	r8, r7, r8, lsr #8
 802a4ca:	1212      	asrs	r2, r2, #8
 802a4cc:	121b      	asrs	r3, r3, #8
 802a4ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 802a4d2:	700a      	strb	r2, [r1, #0]
 802a4d4:	704b      	strb	r3, [r1, #1]
 802a4d6:	f881 8002 	strb.w	r8, [r1, #2]
 802a4da:	b007      	add	sp, #28
 802a4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a4e0:	2800      	cmp	r0, #0
 802a4e2:	db01      	blt.n	802a4e8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x274>
 802a4e4:	4584      	cmp	ip, r0
 802a4e6:	dc40      	bgt.n	802a56a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2f6>
 802a4e8:	f04f 0e00 	mov.w	lr, #0
 802a4ec:	46f1      	mov	r9, lr
 802a4ee:	1c42      	adds	r2, r0, #1
 802a4f0:	d42b      	bmi.n	802a54a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 802a4f2:	4594      	cmp	ip, r2
 802a4f4:	dd29      	ble.n	802a54a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 802a4f6:	f1ba 0f00 	cmp.w	sl, #0
 802a4fa:	d005      	beq.n	802a508 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x294>
 802a4fc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 802a500:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802a504:	0e27      	lsrs	r7, r4, #24
 802a506:	e6d5      	b.n	802a2b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 802a508:	2d00      	cmp	r5, #0
 802a50a:	db41      	blt.n	802a590 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 802a50c:	45a8      	cmp	r8, r5
 802a50e:	dd3f      	ble.n	802a590 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 802a510:	4657      	mov	r7, sl
 802a512:	4654      	mov	r4, sl
 802a514:	b1e6      	cbz	r6, 802a550 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2dc>
 802a516:	2800      	cmp	r0, #0
 802a518:	db32      	blt.n	802a580 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 802a51a:	4584      	cmp	ip, r0
 802a51c:	dd30      	ble.n	802a580 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 802a51e:	f81b 200c 	ldrb.w	r2, [fp, ip]
 802a522:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802a526:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802a52a:	3001      	adds	r0, #1
 802a52c:	d423      	bmi.n	802a576 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 802a52e:	4584      	cmp	ip, r0
 802a530:	dd21      	ble.n	802a576 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 802a532:	f1ba 0f00 	cmp.w	sl, #0
 802a536:	d027      	beq.n	802a588 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x314>
 802a538:	44dc      	add	ip, fp
 802a53a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802a53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802a542:	9304      	str	r3, [sp, #16]
 802a544:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a548:	e6bf      	b.n	802a2ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 802a54a:	2700      	movs	r7, #0
 802a54c:	463c      	mov	r4, r7
 802a54e:	e6b1      	b.n	802a2b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 802a550:	f1ba 0f0f 	cmp.w	sl, #15
 802a554:	d824      	bhi.n	802a5a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 802a556:	fa1f f38a 	uxth.w	r3, sl
 802a55a:	4632      	mov	r2, r6
 802a55c:	46b3      	mov	fp, r6
 802a55e:	46b2      	mov	sl, r6
 802a560:	9604      	str	r6, [sp, #16]
 802a562:	4635      	mov	r5, r6
 802a564:	46b4      	mov	ip, r6
 802a566:	46b0      	mov	r8, r6
 802a568:	e6c2      	b.n	802a2f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x7c>
 802a56a:	5dd2      	ldrb	r2, [r2, r7]
 802a56c:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 802a570:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 802a574:	e7bb      	b.n	802a4ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x27a>
 802a576:	f04f 0c00 	mov.w	ip, #0
 802a57a:	f8cd c010 	str.w	ip, [sp, #16]
 802a57e:	e6a4      	b.n	802a2ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 802a580:	f04f 0800 	mov.w	r8, #0
 802a584:	4645      	mov	r5, r8
 802a586:	e7d0      	b.n	802a52a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2b6>
 802a588:	f8cd a010 	str.w	sl, [sp, #16]
 802a58c:	46d4      	mov	ip, sl
 802a58e:	e6a0      	b.n	802a2d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 802a590:	4654      	mov	r4, sl
 802a592:	f8cd a010 	str.w	sl, [sp, #16]
 802a596:	4655      	mov	r5, sl
 802a598:	46d4      	mov	ip, sl
 802a59a:	46d0      	mov	r8, sl
 802a59c:	4657      	mov	r7, sl
 802a59e:	e698      	b.n	802a2d2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 802a5a0:	4b03      	ldr	r3, [pc, #12]	@ (802a5b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x33c>)
 802a5a2:	4a04      	ldr	r2, [pc, #16]	@ (802a5b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x340>)
 802a5a4:	f240 31ca 	movw	r1, #970	@ 0x3ca
 802a5a8:	4803      	ldr	r0, [pc, #12]	@ (802a5b8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x344>)
 802a5aa:	f000 fc1f 	bl	802adec <__assert_func>
 802a5ae:	bf00      	nop
 802a5b0:	0802e264 	.word	0x0802e264
 802a5b4:	0802e8e0 	.word	0x0802e8e0
 802a5b8:	0802e3ec 	.word	0x0802e3ec

0802a5bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a5c0:	ed2d 8b08 	vpush	{d8-d11}
 802a5c4:	b0a9      	sub	sp, #164	@ 0xa4
 802a5c6:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	@ 0xec
 802a5ca:	eeb0 aa40 	vmov.f32	s20, s0
 802a5ce:	46d9      	mov	r9, fp
 802a5d0:	eef0 9a60 	vmov.f32	s19, s1
 802a5d4:	eeb0 9a41 	vmov.f32	s18, s2
 802a5d8:	eef0 8a62 	vmov.f32	s17, s5
 802a5dc:	eeb0 8a43 	vmov.f32	s16, s6
 802a5e0:	eef0 ba44 	vmov.f32	s23, s8
 802a5e4:	eeb0 ba64 	vmov.f32	s22, s9
 802a5e8:	eef0 aa45 	vmov.f32	s21, s10
 802a5ec:	46d3      	mov	fp, sl
 802a5ee:	9022      	str	r0, [sp, #136]	@ 0x88
 802a5f0:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 802a5f2:	9115      	str	r1, [sp, #84]	@ 0x54
 802a5f4:	9218      	str	r2, [sp, #96]	@ 0x60
 802a5f6:	6841      	ldr	r1, [r0, #4]
 802a5f8:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 802a5fa:	469e      	mov	lr, r3
 802a5fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802a5fe:	6807      	ldr	r7, [r0, #0]
 802a600:	fb01 2303 	mla	r3, r1, r3, r2
 802a604:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 802a606:	9842      	ldr	r0, [sp, #264]	@ 0x108
 802a608:	6852      	ldr	r2, [r2, #4]
 802a60a:	f89d 110c 	ldrb.w	r1, [sp, #268]	@ 0x10c
 802a60e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 802a612:	6800      	ldr	r0, [r0, #0]
 802a614:	1d13      	adds	r3, r2, #4
 802a616:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a618:	b28b      	uxth	r3, r1
 802a61a:	9123      	str	r1, [sp, #140]	@ 0x8c
 802a61c:	9011      	str	r0, [sp, #68]	@ 0x44
 802a61e:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a620:	9712      	str	r7, [sp, #72]	@ 0x48
 802a622:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802a624:	2b00      	cmp	r3, #0
 802a626:	dc02      	bgt.n	802a62e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802a628:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a62a:	2b00      	cmp	r3, #0
 802a62c:	dd68      	ble.n	802a700 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802a62e:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802a630:	f1be 0f00 	cmp.w	lr, #0
 802a634:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 802a638:	b228      	sxth	r0, r5
 802a63a:	b23e      	sxth	r6, r7
 802a63c:	f340 83a0 	ble.w	802ad80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c4>
 802a640:	e9dd 8a3d 	ldrd	r8, sl, [sp, #244]	@ 0xf4
 802a644:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802a646:	1e44      	subs	r4, r0, #1
 802a648:	f106 3cff 	add.w	ip, r6, #4294967295
 802a64c:	9709      	str	r7, [sp, #36]	@ 0x24
 802a64e:	ea5f 4329 	movs.w	r3, r9, asr #16
 802a652:	ea4f 422b 	mov.w	r2, fp, asr #16
 802a656:	d405      	bmi.n	802a664 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802a658:	42a3      	cmp	r3, r4
 802a65a:	da03      	bge.n	802a664 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802a65c:	2a00      	cmp	r2, #0
 802a65e:	db01      	blt.n	802a664 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802a660:	4562      	cmp	r2, ip
 802a662:	db52      	blt.n	802a70a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802a664:	1c5f      	adds	r7, r3, #1
 802a666:	d406      	bmi.n	802a676 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802a668:	4287      	cmp	r7, r0
 802a66a:	dc04      	bgt.n	802a676 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802a66c:	1c57      	adds	r7, r2, #1
 802a66e:	d402      	bmi.n	802a676 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802a670:	42b7      	cmp	r7, r6
 802a672:	f340 835f 	ble.w	802ad34 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 802a676:	f1be 0e01 	subs.w	lr, lr, #1
 802a67a:	44c1      	add	r9, r8
 802a67c:	44d3      	add	fp, sl
 802a67e:	f101 0104 	add.w	r1, r1, #4
 802a682:	d1e4      	bne.n	802a64e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802a684:	9112      	str	r1, [sp, #72]	@ 0x48
 802a686:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802a688:	2b00      	cmp	r3, #0
 802a68a:	dd39      	ble.n	802a700 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802a68c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a690:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a694:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a698:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a69c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a6a0:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802a6a4:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a6a8:	ee76 6a68 	vsub.f32	s13, s12, s17
 802a6ac:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802a6b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a6b4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802a6b8:	ee16 2a90 	vmov	r2, s13
 802a6bc:	3b01      	subs	r3, #1
 802a6be:	9315      	str	r3, [sp, #84]	@ 0x54
 802a6c0:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802a6c2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a6c6:	ee17 2a10 	vmov	r2, s14
 802a6ca:	eeb0 7a48 	vmov.f32	s14, s16
 802a6ce:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802a6d2:	ee17 ba10 	vmov	fp, s14
 802a6d6:	eeb0 7a68 	vmov.f32	s14, s17
 802a6da:	933d      	str	r3, [sp, #244]	@ 0xf4
 802a6dc:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802a6de:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802a6e2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a6e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802a6e8:	933e      	str	r3, [sp, #248]	@ 0xf8
 802a6ea:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802a6ec:	ee17 9a10 	vmov	r9, s14
 802a6f0:	eeb0 8a67 	vmov.f32	s16, s15
 802a6f4:	eef0 8a46 	vmov.f32	s17, s12
 802a6f8:	bf14      	ite	ne
 802a6fa:	469e      	movne	lr, r3
 802a6fc:	4696      	moveq	lr, r2
 802a6fe:	e790      	b.n	802a622 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a700:	b029      	add	sp, #164	@ 0xa4
 802a702:	ecbd 8b08 	vpop	{d8-d11}
 802a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a70a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802a70c:	9112      	str	r1, [sp, #72]	@ 0x48
 802a70e:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 802a710:	f10e 32ff 	add.w	r2, lr, #4294967295
 802a714:	fb01 9302 	mla	r3, r1, r2, r9
 802a718:	141b      	asrs	r3, r3, #16
 802a71a:	920a      	str	r2, [sp, #40]	@ 0x28
 802a71c:	f100 816a 	bmi.w	802a9f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802a720:	42a3      	cmp	r3, r4
 802a722:	f280 8167 	bge.w	802a9f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802a726:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 802a728:	fb03 b302 	mla	r3, r3, r2, fp
 802a72c:	141b      	asrs	r3, r3, #16
 802a72e:	f100 8161 	bmi.w	802a9f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802a732:	3e01      	subs	r6, #1
 802a734:	42b3      	cmp	r3, r6
 802a736:	f280 815d 	bge.w	802a9f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802a73a:	f1be 0f00 	cmp.w	lr, #0
 802a73e:	dda2      	ble.n	802a686 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802a740:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a742:	f8cd e064 	str.w	lr, [sp, #100]	@ 0x64
 802a746:	3304      	adds	r3, #4
 802a748:	9309      	str	r3, [sp, #36]	@ 0x24
 802a74a:	f8cd b0f0 	str.w	fp, [sp, #240]	@ 0xf0
 802a74e:	4606      	mov	r6, r0
 802a750:	465b      	mov	r3, fp
 802a752:	e12a      	b.n	802a9aa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802a754:	785f      	ldrb	r7, [r3, #1]
 802a756:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 802a75a:	9713      	str	r7, [sp, #76]	@ 0x4c
 802a75c:	0e3f      	lsrs	r7, r7, #24
 802a75e:	970c      	str	r7, [sp, #48]	@ 0x30
 802a760:	b16a      	cbz	r2, 802a77e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a762:	199f      	adds	r7, r3, r6
 802a764:	5d9b      	ldrb	r3, [r3, r6]
 802a766:	462e      	mov	r6, r5
 802a768:	787f      	ldrb	r7, [r7, #1]
 802a76a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802a76e:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 802a772:	9314      	str	r3, [sp, #80]	@ 0x50
 802a774:	9516      	str	r5, [sp, #88]	@ 0x58
 802a776:	0e1b      	lsrs	r3, r3, #24
 802a778:	0e2d      	lsrs	r5, r5, #24
 802a77a:	950e      	str	r5, [sp, #56]	@ 0x38
 802a77c:	930d      	str	r3, [sp, #52]	@ 0x34
 802a77e:	fa1f fc81 	uxth.w	ip, r1
 802a782:	b292      	uxth	r2, r2
 802a784:	fb0c f602 	mul.w	r6, ip, r2
 802a788:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802a78c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a78e:	ebac 0706 	sub.w	r7, ip, r6
 802a792:	b2bf      	uxth	r7, r7
 802a794:	fb07 f103 	mul.w	r1, r7, r3
 802a798:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802a79c:	b292      	uxth	r2, r2
 802a79e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802a7a2:	1a9b      	subs	r3, r3, r2
 802a7a4:	b29b      	uxth	r3, r3
 802a7a6:	fb03 1104 	mla	r1, r3, r4, r1
 802a7aa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a7ac:	fb02 1105 	mla	r1, r2, r5, r1
 802a7b0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a7b2:	fb06 1105 	mla	r1, r6, r5, r1
 802a7b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802a7ba:	2900      	cmp	r1, #0
 802a7bc:	f000 80e3 	beq.w	802a986 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802a7c0:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802a7c4:	2cff      	cmp	r4, #255	@ 0xff
 802a7c6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a7ca:	950f      	str	r5, [sp, #60]	@ 0x3c
 802a7cc:	9010      	str	r0, [sp, #64]	@ 0x40
 802a7ce:	d01e      	beq.n	802a80e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802a7d0:	fb00 f004 	mul.w	r0, r0, r4
 802a7d4:	fb05 fe04 	mul.w	lr, r5, r4
 802a7d8:	4604      	mov	r4, r0
 802a7da:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802a7de:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 802a7e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a7e6:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802a7ea:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802a7ee:	44e6      	add	lr, ip
 802a7f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a7f4:	0a24      	lsrs	r4, r4, #8
 802a7f6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a7fa:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a7fe:	ea4e 0e04 	orr.w	lr, lr, r4
 802a802:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802a806:	900f      	str	r0, [sp, #60]	@ 0x3c
 802a808:	f40e 407f 	and.w	r0, lr, #65280	@ 0xff00
 802a80c:	9010      	str	r0, [sp, #64]	@ 0x40
 802a80e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a810:	f000 1eff 	and.w	lr, r0, #16711935	@ 0xff00ff
 802a814:	f400 487f 	and.w	r8, r0, #65280	@ 0xff00
 802a818:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802a81a:	28ff      	cmp	r0, #255	@ 0xff
 802a81c:	d01c      	beq.n	802a858 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802a81e:	fb0e fe00 	mul.w	lr, lr, r0
 802a822:	fb08 f800 	mul.w	r8, r8, r0
 802a826:	ea4f 241e 	mov.w	r4, lr, lsr #8
 802a82a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a82e:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802a832:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 802a836:	44a6      	add	lr, r4
 802a838:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802a83c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a840:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a844:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a848:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a84c:	ea4e 0808 	orr.w	r8, lr, r8
 802a850:	f008 1eff 	and.w	lr, r8, #16711935	@ 0xff00ff
 802a854:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a858:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802a85a:	f000 1cff 	and.w	ip, r0, #16711935	@ 0xff00ff
 802a85e:	f400 4a7f 	and.w	sl, r0, #65280	@ 0xff00
 802a862:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a864:	28ff      	cmp	r0, #255	@ 0xff
 802a866:	d01c      	beq.n	802a8a2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802a868:	fb0c fc00 	mul.w	ip, ip, r0
 802a86c:	fb0a fa00 	mul.w	sl, sl, r0
 802a870:	ea4f 241c 	mov.w	r4, ip, lsr #8
 802a874:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a878:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a87c:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802a880:	44a4      	add	ip, r4
 802a882:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802a886:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a88a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a88e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a892:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a896:	ea4c 0a0a 	orr.w	sl, ip, sl
 802a89a:	f00a 1cff 	and.w	ip, sl, #16711935	@ 0xff00ff
 802a89e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a8a2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802a8a4:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 802a8a8:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802a8ac:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802a8ae:	2cff      	cmp	r4, #255	@ 0xff
 802a8b0:	d019      	beq.n	802a8e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a8b2:	fb00 f004 	mul.w	r0, r0, r4
 802a8b6:	fb0b fb04 	mul.w	fp, fp, r4
 802a8ba:	0a04      	lsrs	r4, r0, #8
 802a8bc:	f004 15ff 	and.w	r5, r4, #16711935	@ 0xff00ff
 802a8c0:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802a8c4:	f50b 7480 	add.w	r4, fp, #256	@ 0x100
 802a8c8:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 802a8cc:	4428      	add	r0, r5
 802a8ce:	0a00      	lsrs	r0, r0, #8
 802a8d0:	0a24      	lsrs	r4, r4, #8
 802a8d2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802a8d6:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802a8da:	ea40 0b0b 	orr.w	fp, r0, fp
 802a8de:	f00b 10ff 	and.w	r0, fp, #16711935	@ 0xff00ff
 802a8e2:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802a8e6:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 802a8e8:	fb0e fe07 	mul.w	lr, lr, r7
 802a8ec:	fb01 f105 	mul.w	r1, r1, r5
 802a8f0:	1c4c      	adds	r4, r1, #1
 802a8f2:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 802a8f6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802a8fa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802a8fc:	fb08 f707 	mul.w	r7, r8, r7
 802a900:	fb04 ee03 	mla	lr, r4, r3, lr
 802a904:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802a906:	fb0c ee02 	mla	lr, ip, r2, lr
 802a90a:	fb04 7703 	mla	r7, r4, r3, r7
 802a90e:	fb0a 7702 	mla	r7, sl, r2, r7
 802a912:	fb00 ee06 	mla	lr, r0, r6, lr
 802a916:	fb0b 7706 	mla	r7, fp, r6, r7
 802a91a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a91e:	0a3f      	lsrs	r7, r7, #8
 802a920:	f407 437f 	and.w	r3, r7, #65280	@ 0xff00
 802a924:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a928:	ea4e 0303 	orr.w	r3, lr, r3
 802a92c:	b2df      	uxtb	r7, r3
 802a92e:	f3c3 2607 	ubfx	r6, r3, #8, #8
 802a932:	0c1b      	lsrs	r3, r3, #16
 802a934:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802a936:	fb17 f705 	smulbb	r7, r7, r5
 802a93a:	fb16 f605 	smulbb	r6, r6, r5
 802a93e:	fb13 f305 	smulbb	r3, r3, r5
 802a942:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 802a946:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 802a94a:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 802a94e:	b2c9      	uxtb	r1, r1
 802a950:	fb00 7001 	mla	r0, r0, r1, r7
 802a954:	fb02 6201 	mla	r2, r2, r1, r6
 802a958:	fb0c 3101 	mla	r1, ip, r1, r3
 802a95c:	b280      	uxth	r0, r0
 802a95e:	b292      	uxth	r2, r2
 802a960:	b289      	uxth	r1, r1
 802a962:	1c47      	adds	r7, r0, #1
 802a964:	1c56      	adds	r6, r2, #1
 802a966:	1c4b      	adds	r3, r1, #1
 802a968:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802a96c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802a970:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a974:	1200      	asrs	r0, r0, #8
 802a976:	1212      	asrs	r2, r2, #8
 802a978:	1209      	asrs	r1, r1, #8
 802a97a:	f804 0c04 	strb.w	r0, [r4, #-4]
 802a97e:	f804 2c03 	strb.w	r2, [r4, #-3]
 802a982:	f804 1c02 	strb.w	r1, [r4, #-2]
 802a986:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 802a988:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 802a98a:	4491      	add	r9, r2
 802a98c:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 802a98e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a990:	440a      	add	r2, r1
 802a992:	923c      	str	r2, [sp, #240]	@ 0xf0
 802a994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a996:	3b01      	subs	r3, #1
 802a998:	930a      	str	r3, [sp, #40]	@ 0x28
 802a99a:	3204      	adds	r2, #4
 802a99c:	3301      	adds	r3, #1
 802a99e:	9209      	str	r2, [sp, #36]	@ 0x24
 802a9a0:	d021      	beq.n	802a9e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802a9a2:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802a9a4:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 802a9a8:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 802a9aa:	ea4f 4229 	mov.w	r2, r9, asr #16
 802a9ae:	141b      	asrs	r3, r3, #16
 802a9b0:	fb06 2303 	mla	r3, r6, r3, r2
 802a9b4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802a9b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a9b8:	5ce2      	ldrb	r2, [r4, r3]
 802a9ba:	f3c9 3103 	ubfx	r1, r9, #12, #4
 802a9be:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 802a9c2:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 802a9c4:	4423      	add	r3, r4
 802a9c6:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802a9ca:	0e04      	lsrs	r4, r0, #24
 802a9cc:	2900      	cmp	r1, #0
 802a9ce:	f47f aec1 	bne.w	802a754 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802a9d2:	2a00      	cmp	r2, #0
 802a9d4:	f43f aed3 	beq.w	802a77e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a9d8:	5d9b      	ldrb	r3, [r3, r6]
 802a9da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a9de:	9314      	str	r3, [sp, #80]	@ 0x50
 802a9e0:	0e1b      	lsrs	r3, r3, #24
 802a9e2:	930d      	str	r3, [sp, #52]	@ 0x34
 802a9e4:	e6cb      	b.n	802a77e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a9e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a9e8:	f8dd e064 	ldr.w	lr, [sp, #100]	@ 0x64
 802a9ec:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 802a9f0:	9312      	str	r3, [sp, #72]	@ 0x48
 802a9f2:	e648      	b.n	802a686 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802a9f4:	f1be 0f00 	cmp.w	lr, #0
 802a9f8:	f77f ae45 	ble.w	802a686 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802a9fc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802aa00:	ea4f 4329 	mov.w	r3, r9, asr #16
 802aa04:	ea4f 422b 	mov.w	r2, fp, asr #16
 802aa08:	2b00      	cmp	r3, #0
 802aa0a:	46be      	mov	lr, r7
 802aa0c:	4629      	mov	r1, r5
 802aa0e:	e9dd 653d 	ldrd	r6, r5, [sp, #244]	@ 0xf4
 802aa12:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 802aa16:	9c42      	ldr	r4, [sp, #264]	@ 0x108
 802aa18:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802aa1c:	f3cb 3703 	ubfx	r7, fp, #12, #4
 802aa20:	f2c0 815d 	blt.w	802acde <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802aa24:	f101 3cff 	add.w	ip, r1, #4294967295
 802aa28:	4563      	cmp	r3, ip
 802aa2a:	f280 8158 	bge.w	802acde <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802aa2e:	2a00      	cmp	r2, #0
 802aa30:	f2c0 8155 	blt.w	802acde <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802aa34:	f10e 3cff 	add.w	ip, lr, #4294967295
 802aa38:	4562      	cmp	r2, ip
 802aa3a:	f280 8150 	bge.w	802acde <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802aa3e:	fa0f fc81 	sxth.w	ip, r1
 802aa42:	fb02 330c 	mla	r3, r2, ip, r3
 802aa46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802aa48:	5cd1      	ldrb	r1, [r2, r3]
 802aa4a:	18d3      	adds	r3, r2, r3
 802aa4c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802aa4e:	469e      	mov	lr, r3
 802aa50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802aa54:	0e19      	lsrs	r1, r3, #24
 802aa56:	9309      	str	r3, [sp, #36]	@ 0x24
 802aa58:	910f      	str	r1, [sp, #60]	@ 0x3c
 802aa5a:	2800      	cmp	r0, #0
 802aa5c:	f000 8171 	beq.w	802ad42 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x786>
 802aa60:	4671      	mov	r1, lr
 802aa62:	f89e e001 	ldrb.w	lr, [lr, #1]
 802aa66:	4613      	mov	r3, r2
 802aa68:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 802aa6c:	9224      	str	r2, [sp, #144]	@ 0x90
 802aa6e:	0e12      	lsrs	r2, r2, #24
 802aa70:	921a      	str	r2, [sp, #104]	@ 0x68
 802aa72:	2f00      	cmp	r7, #0
 802aa74:	f040 8171 	bne.w	802ad5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79e>
 802aa78:	b280      	uxth	r0, r0
 802aa7a:	b2bf      	uxth	r7, r7
 802aa7c:	fb00 f207 	mul.w	r2, r0, r7
 802aa80:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 802aa84:	ebac 0002 	sub.w	r0, ip, r2
 802aa88:	b280      	uxth	r0, r0
 802aa8a:	4603      	mov	r3, r0
 802aa8c:	9010      	str	r0, [sp, #64]	@ 0x40
 802aa8e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802aa90:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 802aa94:	fb03 f000 	mul.w	r0, r3, r0
 802aa98:	fa1f fe87 	uxth.w	lr, r7
 802aa9c:	f5cc 7780 	rsb	r7, ip, #256	@ 0x100
 802aaa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802aaa2:	eba7 070e 	sub.w	r7, r7, lr
 802aaa6:	b2bf      	uxth	r7, r7
 802aaa8:	fb07 0003 	mla	r0, r7, r3, r0
 802aaac:	9719      	str	r7, [sp, #100]	@ 0x64
 802aaae:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 802aab0:	fb0e 0007 	mla	r0, lr, r7, r0
 802aab4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 802aab6:	fb02 0007 	mla	r0, r2, r7, r0
 802aaba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802aabe:	900f      	str	r0, [sp, #60]	@ 0x3c
 802aac0:	2800      	cmp	r0, #0
 802aac2:	f000 80f6 	beq.w	802acb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802aac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802aac8:	2bff      	cmp	r3, #255	@ 0xff
 802aaca:	f001 10ff 	and.w	r0, r1, #16711935	@ 0xff00ff
 802aace:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802aad2:	901d      	str	r0, [sp, #116]	@ 0x74
 802aad4:	9109      	str	r1, [sp, #36]	@ 0x24
 802aad6:	d01b      	beq.n	802ab10 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x554>
 802aad8:	fb01 f103 	mul.w	r1, r1, r3
 802aadc:	fb00 f003 	mul.w	r0, r0, r3
 802aae0:	460b      	mov	r3, r1
 802aae2:	0a01      	lsrs	r1, r0, #8
 802aae4:	f100 1701 	add.w	r7, r0, #65537	@ 0x10001
 802aae8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802aaec:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 802aaf0:	4439      	add	r1, r7
 802aaf2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802aaf6:	0a09      	lsrs	r1, r1, #8
 802aaf8:	0a1b      	lsrs	r3, r3, #8
 802aafa:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802aafe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802ab02:	430b      	orrs	r3, r1
 802ab04:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 802ab08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802ab0c:	911d      	str	r1, [sp, #116]	@ 0x74
 802ab0e:	9309      	str	r3, [sp, #36]	@ 0x24
 802ab10:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802ab12:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802ab14:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802ab18:	2fff      	cmp	r7, #255	@ 0xff
 802ab1a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802ab1e:	931e      	str	r3, [sp, #120]	@ 0x78
 802ab20:	911f      	str	r1, [sp, #124]	@ 0x7c
 802ab22:	d01c      	beq.n	802ab5e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 802ab24:	fb01 f107 	mul.w	r1, r1, r7
 802ab28:	fb03 f307 	mul.w	r3, r3, r7
 802ab2c:	460f      	mov	r7, r1
 802ab2e:	0a19      	lsrs	r1, r3, #8
 802ab30:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 802ab34:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802ab38:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 802ab3c:	4401      	add	r1, r0
 802ab3e:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802ab42:	0a09      	lsrs	r1, r1, #8
 802ab44:	0a1b      	lsrs	r3, r3, #8
 802ab46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802ab4a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802ab4e:	ea41 0003 	orr.w	r0, r1, r3
 802ab52:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 802ab56:	931e      	str	r3, [sp, #120]	@ 0x78
 802ab58:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 802ab5c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802ab5e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802ab60:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 802ab64:	f403 4c7f 	and.w	ip, r3, #65280	@ 0xff00
 802ab68:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802ab6a:	9120      	str	r1, [sp, #128]	@ 0x80
 802ab6c:	2bff      	cmp	r3, #255	@ 0xff
 802ab6e:	d01b      	beq.n	802aba8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802ab70:	fb01 f103 	mul.w	r1, r1, r3
 802ab74:	fb0c fc03 	mul.w	ip, ip, r3
 802ab78:	0a08      	lsrs	r0, r1, #8
 802ab7a:	f50c 7380 	add.w	r3, ip, #256	@ 0x100
 802ab7e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802ab82:	f101 1101 	add.w	r1, r1, #65537	@ 0x10001
 802ab86:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802ab8a:	4401      	add	r1, r0
 802ab8c:	0a09      	lsrs	r1, r1, #8
 802ab8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802ab92:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802ab96:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802ab9a:	ea41 0c0c 	orr.w	ip, r1, ip
 802ab9e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802aba2:	9320      	str	r3, [sp, #128]	@ 0x80
 802aba4:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802aba8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802abaa:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 802abae:	f400 477f 	and.w	r7, r0, #65280	@ 0xff00
 802abb2:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802abb4:	9321      	str	r3, [sp, #132]	@ 0x84
 802abb6:	28ff      	cmp	r0, #255	@ 0xff
 802abb8:	d019      	beq.n	802abee <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 802abba:	fb03 f300 	mul.w	r3, r3, r0
 802abbe:	fb07 f700 	mul.w	r7, r7, r0
 802abc2:	0a18      	lsrs	r0, r3, #8
 802abc4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802abc8:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 802abcc:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 802abd0:	4418      	add	r0, r3
 802abd2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802abd6:	0a00      	lsrs	r0, r0, #8
 802abd8:	0a3f      	lsrs	r7, r7, #8
 802abda:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802abde:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802abe2:	4307      	orrs	r7, r0
 802abe4:	f007 13ff 	and.w	r3, r7, #16711935	@ 0xff00ff
 802abe8:	9321      	str	r3, [sp, #132]	@ 0x84
 802abea:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802abee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802abf0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802abf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802abf4:	fb01 f100 	mul.w	r1, r1, r0
 802abf8:	4608      	mov	r0, r1
 802abfa:	3101      	adds	r1, #1
 802abfc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802ac00:	ea6f 2110 	mvn.w	r1, r0, lsr #8
 802ac04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802ac06:	9125      	str	r1, [sp, #148]	@ 0x94
 802ac08:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802ac0a:	fb01 f100 	mul.w	r1, r1, r0
 802ac0e:	910f      	str	r1, [sp, #60]	@ 0x3c
 802ac10:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 802ac12:	fb01 f100 	mul.w	r1, r1, r0
 802ac16:	9110      	str	r1, [sp, #64]	@ 0x40
 802ac18:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802ac1a:	4608      	mov	r0, r1
 802ac1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802ac1e:	fb00 1103 	mla	r1, r0, r3, r1
 802ac22:	910f      	str	r1, [sp, #60]	@ 0x3c
 802ac24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ac26:	4608      	mov	r0, r1
 802ac28:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802ac2a:	fb00 1003 	mla	r0, r0, r3, r1
 802ac2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ac30:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802ac32:	fb0c 000e 	mla	r0, ip, lr, r0
 802ac36:	fb03 110e 	mla	r1, r3, lr, r1
 802ac3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802ac3c:	f89a c002 	ldrb.w	ip, [sl, #2]
 802ac40:	fb03 1102 	mla	r1, r3, r2, r1
 802ac44:	fb07 0302 	mla	r3, r7, r2, r0
 802ac48:	0a0a      	lsrs	r2, r1, #8
 802ac4a:	0a1b      	lsrs	r3, r3, #8
 802ac4c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802ac50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802ac54:	4313      	orrs	r3, r2
 802ac56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802ac58:	b2df      	uxtb	r7, r3
 802ac5a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802ac5e:	0c1b      	lsrs	r3, r3, #16
 802ac60:	fb17 f702 	smulbb	r7, r7, r2
 802ac64:	fb10 f002 	smulbb	r0, r0, r2
 802ac68:	fb13 f302 	smulbb	r3, r3, r2
 802ac6c:	f89d e094 	ldrb.w	lr, [sp, #148]	@ 0x94
 802ac70:	f89a 1000 	ldrb.w	r1, [sl]
 802ac74:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802ac78:	fb01 710e 	mla	r1, r1, lr, r7
 802ac7c:	fb02 020e 	mla	r2, r2, lr, r0
 802ac80:	fb0c 330e 	mla	r3, ip, lr, r3
 802ac84:	b297      	uxth	r7, r2
 802ac86:	fa1f fc81 	uxth.w	ip, r1
 802ac8a:	b298      	uxth	r0, r3
 802ac8c:	f10c 0101 	add.w	r1, ip, #1
 802ac90:	1c7a      	adds	r2, r7, #1
 802ac92:	1c43      	adds	r3, r0, #1
 802ac94:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 802ac98:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802ac9c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802aca0:	1209      	asrs	r1, r1, #8
 802aca2:	1212      	asrs	r2, r2, #8
 802aca4:	121b      	asrs	r3, r3, #8
 802aca6:	f88a 1000 	strb.w	r1, [sl]
 802acaa:	f88a 2001 	strb.w	r2, [sl, #1]
 802acae:	f88a 3002 	strb.w	r3, [sl, #2]
 802acb2:	f1b8 0f00 	cmp.w	r8, #0
 802acb6:	f10a 0a04 	add.w	sl, sl, #4
 802acba:	44b1      	add	r9, r6
 802acbc:	44ab      	add	fp, r5
 802acbe:	dd30      	ble.n	802ad22 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x766>
 802acc0:	e9d4 1e02 	ldrd	r1, lr, [r4, #8]
 802acc4:	ea4f 4329 	mov.w	r3, r9, asr #16
 802acc8:	2b00      	cmp	r3, #0
 802acca:	f108 38ff 	add.w	r8, r8, #4294967295
 802acce:	ea4f 422b 	mov.w	r2, fp, asr #16
 802acd2:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802acd6:	f3cb 3703 	ubfx	r7, fp, #12, #4
 802acda:	f6bf aea3 	bge.w	802aa24 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802acde:	f113 0c01 	adds.w	ip, r3, #1
 802ace2:	d4e6      	bmi.n	802acb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802ace4:	458c      	cmp	ip, r1
 802ace6:	dce4      	bgt.n	802acb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802ace8:	f112 0c01 	adds.w	ip, r2, #1
 802acec:	d4e1      	bmi.n	802acb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802acee:	45f4      	cmp	ip, lr
 802acf0:	dcdf      	bgt.n	802acb2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802acf2:	fa0f fe8e 	sxth.w	lr, lr
 802acf6:	b209      	sxth	r1, r1
 802acf8:	e9cd 1e00 	strd	r1, lr, [sp]
 802acfc:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 802acfe:	e9cd 2003 	strd	r2, r0, [sp, #12]
 802ad02:	e9cd 7105 	strd	r7, r1, [sp, #20]
 802ad06:	9302      	str	r3, [sp, #8]
 802ad08:	4651      	mov	r1, sl
 802ad0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ad0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802ad0e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 802ad10:	f7ff fab0 	bl	802a274 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 802ad14:	f1b8 0f00 	cmp.w	r8, #0
 802ad18:	f10a 0a04 	add.w	sl, sl, #4
 802ad1c:	44b1      	add	r9, r6
 802ad1e:	44ab      	add	fp, r5
 802ad20:	dcce      	bgt.n	802acc0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802ad22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ad24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802ad26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802ad2a:	3301      	adds	r3, #1
 802ad2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802ad30:	9312      	str	r3, [sp, #72]	@ 0x48
 802ad32:	e4a8      	b.n	802a686 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802ad34:	9112      	str	r1, [sp, #72]	@ 0x48
 802ad36:	f10e 31ff 	add.w	r1, lr, #4294967295
 802ad3a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802ad3c:	910a      	str	r1, [sp, #40]	@ 0x28
 802ad3e:	4688      	mov	r8, r1
 802ad40:	e662      	b.n	802aa08 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802ad42:	2f00      	cmp	r7, #0
 802ad44:	f43f ae98 	beq.w	802aa78 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802ad48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ad4a:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802ad4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802ad52:	0e13      	lsrs	r3, r2, #24
 802ad54:	9226      	str	r2, [sp, #152]	@ 0x98
 802ad56:	931b      	str	r3, [sp, #108]	@ 0x6c
 802ad58:	e68e      	b.n	802aa78 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802ad5a:	eb01 0e0c 	add.w	lr, r1, ip
 802ad5e:	f89e e001 	ldrb.w	lr, [lr, #1]
 802ad62:	f811 c00c 	ldrb.w	ip, [r1, ip]
 802ad66:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 802ad6a:	4611      	mov	r1, r2
 802ad6c:	9227      	str	r2, [sp, #156]	@ 0x9c
 802ad6e:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 802ad72:	4613      	mov	r3, r2
 802ad74:	9226      	str	r2, [sp, #152]	@ 0x98
 802ad76:	0e0a      	lsrs	r2, r1, #24
 802ad78:	921c      	str	r2, [sp, #112]	@ 0x70
 802ad7a:	0e1a      	lsrs	r2, r3, #24
 802ad7c:	921b      	str	r2, [sp, #108]	@ 0x6c
 802ad7e:	e67b      	b.n	802aa78 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802ad80:	f43f ac81 	beq.w	802a686 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802ad84:	1e44      	subs	r4, r0, #1
 802ad86:	e4c2      	b.n	802a70e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>

0802ad88 <__aeabi_atexit>:
 802ad88:	460b      	mov	r3, r1
 802ad8a:	4601      	mov	r1, r0
 802ad8c:	4618      	mov	r0, r3
 802ad8e:	f000 b90f 	b.w	802afb0 <__cxa_atexit>

0802ad92 <_ZdlPvj>:
 802ad92:	f000 b812 	b.w	802adba <_ZdlPv>

0802ad96 <__cxa_guard_acquire>:
 802ad96:	6802      	ldr	r2, [r0, #0]
 802ad98:	4603      	mov	r3, r0
 802ad9a:	07d2      	lsls	r2, r2, #31
 802ad9c:	d405      	bmi.n	802adaa <__cxa_guard_acquire+0x14>
 802ad9e:	7842      	ldrb	r2, [r0, #1]
 802ada0:	b102      	cbz	r2, 802ada4 <__cxa_guard_acquire+0xe>
 802ada2:	deff      	udf	#255	@ 0xff
 802ada4:	2001      	movs	r0, #1
 802ada6:	7058      	strb	r0, [r3, #1]
 802ada8:	4770      	bx	lr
 802adaa:	2000      	movs	r0, #0
 802adac:	4770      	bx	lr

0802adae <__cxa_guard_release>:
 802adae:	2301      	movs	r3, #1
 802adb0:	6003      	str	r3, [r0, #0]
 802adb2:	4770      	bx	lr

0802adb4 <__cxa_pure_virtual>:
 802adb4:	b508      	push	{r3, lr}
 802adb6:	f000 f80d 	bl	802add4 <_ZSt9terminatev>

0802adba <_ZdlPv>:
 802adba:	f000 b843 	b.w	802ae44 <free>

0802adbe <_ZN10__cxxabiv111__terminateEPFvvE>:
 802adbe:	b508      	push	{r3, lr}
 802adc0:	4780      	blx	r0
 802adc2:	f000 f80c 	bl	802adde <abort>
	...

0802adc8 <_ZSt13get_terminatev>:
 802adc8:	4b01      	ldr	r3, [pc, #4]	@ (802add0 <_ZSt13get_terminatev+0x8>)
 802adca:	e8d3 0faf 	lda	r0, [r3]
 802adce:	4770      	bx	lr
 802add0:	20000154 	.word	0x20000154

0802add4 <_ZSt9terminatev>:
 802add4:	b508      	push	{r3, lr}
 802add6:	f7ff fff7 	bl	802adc8 <_ZSt13get_terminatev>
 802adda:	f7ff fff0 	bl	802adbe <_ZN10__cxxabiv111__terminateEPFvvE>

0802adde <abort>:
 802adde:	2006      	movs	r0, #6
 802ade0:	b508      	push	{r3, lr}
 802ade2:	f000 fa3b 	bl	802b25c <raise>
 802ade6:	2001      	movs	r0, #1
 802ade8:	f7d7 facc 	bl	8002384 <_exit>

0802adec <__assert_func>:
 802adec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802adee:	4614      	mov	r4, r2
 802adf0:	461a      	mov	r2, r3
 802adf2:	4b09      	ldr	r3, [pc, #36]	@ (802ae18 <__assert_func+0x2c>)
 802adf4:	4605      	mov	r5, r0
 802adf6:	681b      	ldr	r3, [r3, #0]
 802adf8:	68d8      	ldr	r0, [r3, #12]
 802adfa:	b954      	cbnz	r4, 802ae12 <__assert_func+0x26>
 802adfc:	4b07      	ldr	r3, [pc, #28]	@ (802ae1c <__assert_func+0x30>)
 802adfe:	461c      	mov	r4, r3
 802ae00:	9100      	str	r1, [sp, #0]
 802ae02:	4907      	ldr	r1, [pc, #28]	@ (802ae20 <__assert_func+0x34>)
 802ae04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802ae08:	462b      	mov	r3, r5
 802ae0a:	f000 f983 	bl	802b114 <fiprintf>
 802ae0e:	f7ff ffe6 	bl	802adde <abort>
 802ae12:	4b04      	ldr	r3, [pc, #16]	@ (802ae24 <__assert_func+0x38>)
 802ae14:	e7f4      	b.n	802ae00 <__assert_func+0x14>
 802ae16:	bf00      	nop
 802ae18:	20000164 	.word	0x20000164
 802ae1c:	0802fbe1 	.word	0x0802fbe1
 802ae20:	0802fbb3 	.word	0x0802fbb3
 802ae24:	0802fba6 	.word	0x0802fba6

0802ae28 <atexit>:
 802ae28:	2300      	movs	r3, #0
 802ae2a:	4601      	mov	r1, r0
 802ae2c:	461a      	mov	r2, r3
 802ae2e:	4618      	mov	r0, r3
 802ae30:	f000 bab4 	b.w	802b39c <__register_exitproc>

0802ae34 <malloc>:
 802ae34:	4b02      	ldr	r3, [pc, #8]	@ (802ae40 <malloc+0xc>)
 802ae36:	4601      	mov	r1, r0
 802ae38:	6818      	ldr	r0, [r3, #0]
 802ae3a:	f000 b82d 	b.w	802ae98 <_malloc_r>
 802ae3e:	bf00      	nop
 802ae40:	20000164 	.word	0x20000164

0802ae44 <free>:
 802ae44:	4b02      	ldr	r3, [pc, #8]	@ (802ae50 <free+0xc>)
 802ae46:	4601      	mov	r1, r0
 802ae48:	6818      	ldr	r0, [r3, #0]
 802ae4a:	f000 bb05 	b.w	802b458 <_free_r>
 802ae4e:	bf00      	nop
 802ae50:	20000164 	.word	0x20000164

0802ae54 <sbrk_aligned>:
 802ae54:	b570      	push	{r4, r5, r6, lr}
 802ae56:	4e0f      	ldr	r6, [pc, #60]	@ (802ae94 <sbrk_aligned+0x40>)
 802ae58:	460c      	mov	r4, r1
 802ae5a:	4605      	mov	r5, r0
 802ae5c:	6831      	ldr	r1, [r6, #0]
 802ae5e:	b911      	cbnz	r1, 802ae66 <sbrk_aligned+0x12>
 802ae60:	f000 fa4c 	bl	802b2fc <_sbrk_r>
 802ae64:	6030      	str	r0, [r6, #0]
 802ae66:	4621      	mov	r1, r4
 802ae68:	4628      	mov	r0, r5
 802ae6a:	f000 fa47 	bl	802b2fc <_sbrk_r>
 802ae6e:	1c43      	adds	r3, r0, #1
 802ae70:	d103      	bne.n	802ae7a <sbrk_aligned+0x26>
 802ae72:	f04f 34ff 	mov.w	r4, #4294967295
 802ae76:	4620      	mov	r0, r4
 802ae78:	bd70      	pop	{r4, r5, r6, pc}
 802ae7a:	1cc4      	adds	r4, r0, #3
 802ae7c:	f024 0403 	bic.w	r4, r4, #3
 802ae80:	42a0      	cmp	r0, r4
 802ae82:	d0f8      	beq.n	802ae76 <sbrk_aligned+0x22>
 802ae84:	1a21      	subs	r1, r4, r0
 802ae86:	4628      	mov	r0, r5
 802ae88:	f000 fa38 	bl	802b2fc <_sbrk_r>
 802ae8c:	3001      	adds	r0, #1
 802ae8e:	d1f2      	bne.n	802ae76 <sbrk_aligned+0x22>
 802ae90:	e7ef      	b.n	802ae72 <sbrk_aligned+0x1e>
 802ae92:	bf00      	nop
 802ae94:	20087624 	.word	0x20087624

0802ae98 <_malloc_r>:
 802ae98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ae9c:	1ccd      	adds	r5, r1, #3
 802ae9e:	4606      	mov	r6, r0
 802aea0:	f025 0503 	bic.w	r5, r5, #3
 802aea4:	3508      	adds	r5, #8
 802aea6:	2d0c      	cmp	r5, #12
 802aea8:	bf38      	it	cc
 802aeaa:	250c      	movcc	r5, #12
 802aeac:	2d00      	cmp	r5, #0
 802aeae:	db01      	blt.n	802aeb4 <_malloc_r+0x1c>
 802aeb0:	42a9      	cmp	r1, r5
 802aeb2:	d904      	bls.n	802aebe <_malloc_r+0x26>
 802aeb4:	230c      	movs	r3, #12
 802aeb6:	6033      	str	r3, [r6, #0]
 802aeb8:	2000      	movs	r0, #0
 802aeba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802af94 <_malloc_r+0xfc>
 802aec2:	f000 f869 	bl	802af98 <__malloc_lock>
 802aec6:	f8d8 3000 	ldr.w	r3, [r8]
 802aeca:	461c      	mov	r4, r3
 802aecc:	bb44      	cbnz	r4, 802af20 <_malloc_r+0x88>
 802aece:	4629      	mov	r1, r5
 802aed0:	4630      	mov	r0, r6
 802aed2:	f7ff ffbf 	bl	802ae54 <sbrk_aligned>
 802aed6:	1c43      	adds	r3, r0, #1
 802aed8:	4604      	mov	r4, r0
 802aeda:	d158      	bne.n	802af8e <_malloc_r+0xf6>
 802aedc:	f8d8 4000 	ldr.w	r4, [r8]
 802aee0:	4627      	mov	r7, r4
 802aee2:	2f00      	cmp	r7, #0
 802aee4:	d143      	bne.n	802af6e <_malloc_r+0xd6>
 802aee6:	2c00      	cmp	r4, #0
 802aee8:	d04b      	beq.n	802af82 <_malloc_r+0xea>
 802aeea:	6823      	ldr	r3, [r4, #0]
 802aeec:	4639      	mov	r1, r7
 802aeee:	4630      	mov	r0, r6
 802aef0:	eb04 0903 	add.w	r9, r4, r3
 802aef4:	f000 fa02 	bl	802b2fc <_sbrk_r>
 802aef8:	4581      	cmp	r9, r0
 802aefa:	d142      	bne.n	802af82 <_malloc_r+0xea>
 802aefc:	6821      	ldr	r1, [r4, #0]
 802aefe:	4630      	mov	r0, r6
 802af00:	1a6d      	subs	r5, r5, r1
 802af02:	4629      	mov	r1, r5
 802af04:	f7ff ffa6 	bl	802ae54 <sbrk_aligned>
 802af08:	3001      	adds	r0, #1
 802af0a:	d03a      	beq.n	802af82 <_malloc_r+0xea>
 802af0c:	6823      	ldr	r3, [r4, #0]
 802af0e:	442b      	add	r3, r5
 802af10:	6023      	str	r3, [r4, #0]
 802af12:	f8d8 3000 	ldr.w	r3, [r8]
 802af16:	685a      	ldr	r2, [r3, #4]
 802af18:	bb62      	cbnz	r2, 802af74 <_malloc_r+0xdc>
 802af1a:	f8c8 7000 	str.w	r7, [r8]
 802af1e:	e00f      	b.n	802af40 <_malloc_r+0xa8>
 802af20:	6822      	ldr	r2, [r4, #0]
 802af22:	1b52      	subs	r2, r2, r5
 802af24:	d420      	bmi.n	802af68 <_malloc_r+0xd0>
 802af26:	2a0b      	cmp	r2, #11
 802af28:	d917      	bls.n	802af5a <_malloc_r+0xc2>
 802af2a:	1961      	adds	r1, r4, r5
 802af2c:	42a3      	cmp	r3, r4
 802af2e:	6025      	str	r5, [r4, #0]
 802af30:	bf18      	it	ne
 802af32:	6059      	strne	r1, [r3, #4]
 802af34:	6863      	ldr	r3, [r4, #4]
 802af36:	bf08      	it	eq
 802af38:	f8c8 1000 	streq.w	r1, [r8]
 802af3c:	5162      	str	r2, [r4, r5]
 802af3e:	604b      	str	r3, [r1, #4]
 802af40:	4630      	mov	r0, r6
 802af42:	f000 f82f 	bl	802afa4 <__malloc_unlock>
 802af46:	f104 000b 	add.w	r0, r4, #11
 802af4a:	1d23      	adds	r3, r4, #4
 802af4c:	f020 0007 	bic.w	r0, r0, #7
 802af50:	1ac2      	subs	r2, r0, r3
 802af52:	bf1c      	itt	ne
 802af54:	1a1b      	subne	r3, r3, r0
 802af56:	50a3      	strne	r3, [r4, r2]
 802af58:	e7af      	b.n	802aeba <_malloc_r+0x22>
 802af5a:	6862      	ldr	r2, [r4, #4]
 802af5c:	42a3      	cmp	r3, r4
 802af5e:	bf0c      	ite	eq
 802af60:	f8c8 2000 	streq.w	r2, [r8]
 802af64:	605a      	strne	r2, [r3, #4]
 802af66:	e7eb      	b.n	802af40 <_malloc_r+0xa8>
 802af68:	4623      	mov	r3, r4
 802af6a:	6864      	ldr	r4, [r4, #4]
 802af6c:	e7ae      	b.n	802aecc <_malloc_r+0x34>
 802af6e:	463c      	mov	r4, r7
 802af70:	687f      	ldr	r7, [r7, #4]
 802af72:	e7b6      	b.n	802aee2 <_malloc_r+0x4a>
 802af74:	461a      	mov	r2, r3
 802af76:	685b      	ldr	r3, [r3, #4]
 802af78:	42a3      	cmp	r3, r4
 802af7a:	d1fb      	bne.n	802af74 <_malloc_r+0xdc>
 802af7c:	2300      	movs	r3, #0
 802af7e:	6053      	str	r3, [r2, #4]
 802af80:	e7de      	b.n	802af40 <_malloc_r+0xa8>
 802af82:	230c      	movs	r3, #12
 802af84:	4630      	mov	r0, r6
 802af86:	6033      	str	r3, [r6, #0]
 802af88:	f000 f80c 	bl	802afa4 <__malloc_unlock>
 802af8c:	e794      	b.n	802aeb8 <_malloc_r+0x20>
 802af8e:	6005      	str	r5, [r0, #0]
 802af90:	e7d6      	b.n	802af40 <_malloc_r+0xa8>
 802af92:	bf00      	nop
 802af94:	20087628 	.word	0x20087628

0802af98 <__malloc_lock>:
 802af98:	4801      	ldr	r0, [pc, #4]	@ (802afa0 <__malloc_lock+0x8>)
 802af9a:	f000 b9fc 	b.w	802b396 <__retarget_lock_acquire_recursive>
 802af9e:	bf00      	nop
 802afa0:	2008776c 	.word	0x2008776c

0802afa4 <__malloc_unlock>:
 802afa4:	4801      	ldr	r0, [pc, #4]	@ (802afac <__malloc_unlock+0x8>)
 802afa6:	f000 b9f7 	b.w	802b398 <__retarget_lock_release_recursive>
 802afaa:	bf00      	nop
 802afac:	2008776c 	.word	0x2008776c

0802afb0 <__cxa_atexit>:
 802afb0:	b510      	push	{r4, lr}
 802afb2:	4604      	mov	r4, r0
 802afb4:	4804      	ldr	r0, [pc, #16]	@ (802afc8 <__cxa_atexit+0x18>)
 802afb6:	4613      	mov	r3, r2
 802afb8:	b120      	cbz	r0, 802afc4 <__cxa_atexit+0x14>
 802afba:	460a      	mov	r2, r1
 802afbc:	2002      	movs	r0, #2
 802afbe:	4621      	mov	r1, r4
 802afc0:	f000 f9ec 	bl	802b39c <__register_exitproc>
 802afc4:	bd10      	pop	{r4, pc}
 802afc6:	bf00      	nop
 802afc8:	0802b39d 	.word	0x0802b39d

0802afcc <std>:
 802afcc:	2300      	movs	r3, #0
 802afce:	b510      	push	{r4, lr}
 802afd0:	4604      	mov	r4, r0
 802afd2:	6083      	str	r3, [r0, #8]
 802afd4:	8181      	strh	r1, [r0, #12]
 802afd6:	4619      	mov	r1, r3
 802afd8:	6643      	str	r3, [r0, #100]	@ 0x64
 802afda:	81c2      	strh	r2, [r0, #14]
 802afdc:	2208      	movs	r2, #8
 802afde:	6183      	str	r3, [r0, #24]
 802afe0:	e9c0 3300 	strd	r3, r3, [r0]
 802afe4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802afe8:	305c      	adds	r0, #92	@ 0x5c
 802afea:	f000 f906 	bl	802b1fa <memset>
 802afee:	4b0d      	ldr	r3, [pc, #52]	@ (802b024 <std+0x58>)
 802aff0:	6224      	str	r4, [r4, #32]
 802aff2:	6263      	str	r3, [r4, #36]	@ 0x24
 802aff4:	4b0c      	ldr	r3, [pc, #48]	@ (802b028 <std+0x5c>)
 802aff6:	62a3      	str	r3, [r4, #40]	@ 0x28
 802aff8:	4b0c      	ldr	r3, [pc, #48]	@ (802b02c <std+0x60>)
 802affa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802affc:	4b0c      	ldr	r3, [pc, #48]	@ (802b030 <std+0x64>)
 802affe:	6323      	str	r3, [r4, #48]	@ 0x30
 802b000:	4b0c      	ldr	r3, [pc, #48]	@ (802b034 <std+0x68>)
 802b002:	429c      	cmp	r4, r3
 802b004:	d006      	beq.n	802b014 <std+0x48>
 802b006:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b00a:	4294      	cmp	r4, r2
 802b00c:	d002      	beq.n	802b014 <std+0x48>
 802b00e:	33d0      	adds	r3, #208	@ 0xd0
 802b010:	429c      	cmp	r4, r3
 802b012:	d105      	bne.n	802b020 <std+0x54>
 802b014:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b01c:	f000 b9ba 	b.w	802b394 <__retarget_lock_init_recursive>
 802b020:	bd10      	pop	{r4, pc}
 802b022:	bf00      	nop
 802b024:	0802b175 	.word	0x0802b175
 802b028:	0802b197 	.word	0x0802b197
 802b02c:	0802b1cf 	.word	0x0802b1cf
 802b030:	0802b1f3 	.word	0x0802b1f3
 802b034:	2008762c 	.word	0x2008762c

0802b038 <stdio_exit_handler>:
 802b038:	4a02      	ldr	r2, [pc, #8]	@ (802b044 <stdio_exit_handler+0xc>)
 802b03a:	4903      	ldr	r1, [pc, #12]	@ (802b048 <stdio_exit_handler+0x10>)
 802b03c:	4803      	ldr	r0, [pc, #12]	@ (802b04c <stdio_exit_handler+0x14>)
 802b03e:	f000 b87b 	b.w	802b138 <_fwalk_sglue>
 802b042:	bf00      	nop
 802b044:	20000158 	.word	0x20000158
 802b048:	0802bb9d 	.word	0x0802bb9d
 802b04c:	20000168 	.word	0x20000168

0802b050 <cleanup_stdio>:
 802b050:	6841      	ldr	r1, [r0, #4]
 802b052:	4b0c      	ldr	r3, [pc, #48]	@ (802b084 <cleanup_stdio+0x34>)
 802b054:	4299      	cmp	r1, r3
 802b056:	b510      	push	{r4, lr}
 802b058:	4604      	mov	r4, r0
 802b05a:	d001      	beq.n	802b060 <cleanup_stdio+0x10>
 802b05c:	f000 fd9e 	bl	802bb9c <_fflush_r>
 802b060:	68a1      	ldr	r1, [r4, #8]
 802b062:	4b09      	ldr	r3, [pc, #36]	@ (802b088 <cleanup_stdio+0x38>)
 802b064:	4299      	cmp	r1, r3
 802b066:	d002      	beq.n	802b06e <cleanup_stdio+0x1e>
 802b068:	4620      	mov	r0, r4
 802b06a:	f000 fd97 	bl	802bb9c <_fflush_r>
 802b06e:	68e1      	ldr	r1, [r4, #12]
 802b070:	4b06      	ldr	r3, [pc, #24]	@ (802b08c <cleanup_stdio+0x3c>)
 802b072:	4299      	cmp	r1, r3
 802b074:	d004      	beq.n	802b080 <cleanup_stdio+0x30>
 802b076:	4620      	mov	r0, r4
 802b078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b07c:	f000 bd8e 	b.w	802bb9c <_fflush_r>
 802b080:	bd10      	pop	{r4, pc}
 802b082:	bf00      	nop
 802b084:	2008762c 	.word	0x2008762c
 802b088:	20087694 	.word	0x20087694
 802b08c:	200876fc 	.word	0x200876fc

0802b090 <global_stdio_init.part.0>:
 802b090:	b510      	push	{r4, lr}
 802b092:	4b0b      	ldr	r3, [pc, #44]	@ (802b0c0 <global_stdio_init.part.0+0x30>)
 802b094:	2104      	movs	r1, #4
 802b096:	4c0b      	ldr	r4, [pc, #44]	@ (802b0c4 <global_stdio_init.part.0+0x34>)
 802b098:	4a0b      	ldr	r2, [pc, #44]	@ (802b0c8 <global_stdio_init.part.0+0x38>)
 802b09a:	4620      	mov	r0, r4
 802b09c:	601a      	str	r2, [r3, #0]
 802b09e:	2200      	movs	r2, #0
 802b0a0:	f7ff ff94 	bl	802afcc <std>
 802b0a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b0a8:	2201      	movs	r2, #1
 802b0aa:	2109      	movs	r1, #9
 802b0ac:	f7ff ff8e 	bl	802afcc <std>
 802b0b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b0b4:	2202      	movs	r2, #2
 802b0b6:	2112      	movs	r1, #18
 802b0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b0bc:	f7ff bf86 	b.w	802afcc <std>
 802b0c0:	20087764 	.word	0x20087764
 802b0c4:	2008762c 	.word	0x2008762c
 802b0c8:	0802b039 	.word	0x0802b039

0802b0cc <__sfp_lock_acquire>:
 802b0cc:	4801      	ldr	r0, [pc, #4]	@ (802b0d4 <__sfp_lock_acquire+0x8>)
 802b0ce:	f000 b962 	b.w	802b396 <__retarget_lock_acquire_recursive>
 802b0d2:	bf00      	nop
 802b0d4:	2008776e 	.word	0x2008776e

0802b0d8 <__sfp_lock_release>:
 802b0d8:	4801      	ldr	r0, [pc, #4]	@ (802b0e0 <__sfp_lock_release+0x8>)
 802b0da:	f000 b95d 	b.w	802b398 <__retarget_lock_release_recursive>
 802b0de:	bf00      	nop
 802b0e0:	2008776e 	.word	0x2008776e

0802b0e4 <__sinit>:
 802b0e4:	b510      	push	{r4, lr}
 802b0e6:	4604      	mov	r4, r0
 802b0e8:	f7ff fff0 	bl	802b0cc <__sfp_lock_acquire>
 802b0ec:	6a23      	ldr	r3, [r4, #32]
 802b0ee:	b11b      	cbz	r3, 802b0f8 <__sinit+0x14>
 802b0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b0f4:	f7ff bff0 	b.w	802b0d8 <__sfp_lock_release>
 802b0f8:	4b04      	ldr	r3, [pc, #16]	@ (802b10c <__sinit+0x28>)
 802b0fa:	6223      	str	r3, [r4, #32]
 802b0fc:	4b04      	ldr	r3, [pc, #16]	@ (802b110 <__sinit+0x2c>)
 802b0fe:	681b      	ldr	r3, [r3, #0]
 802b100:	2b00      	cmp	r3, #0
 802b102:	d1f5      	bne.n	802b0f0 <__sinit+0xc>
 802b104:	f7ff ffc4 	bl	802b090 <global_stdio_init.part.0>
 802b108:	e7f2      	b.n	802b0f0 <__sinit+0xc>
 802b10a:	bf00      	nop
 802b10c:	0802b051 	.word	0x0802b051
 802b110:	20087764 	.word	0x20087764

0802b114 <fiprintf>:
 802b114:	b40e      	push	{r1, r2, r3}
 802b116:	b503      	push	{r0, r1, lr}
 802b118:	ab03      	add	r3, sp, #12
 802b11a:	4601      	mov	r1, r0
 802b11c:	4805      	ldr	r0, [pc, #20]	@ (802b134 <fiprintf+0x20>)
 802b11e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b122:	6800      	ldr	r0, [r0, #0]
 802b124:	9301      	str	r3, [sp, #4]
 802b126:	f000 fa0b 	bl	802b540 <_vfiprintf_r>
 802b12a:	b002      	add	sp, #8
 802b12c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b130:	b003      	add	sp, #12
 802b132:	4770      	bx	lr
 802b134:	20000164 	.word	0x20000164

0802b138 <_fwalk_sglue>:
 802b138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b13c:	4607      	mov	r7, r0
 802b13e:	4688      	mov	r8, r1
 802b140:	4614      	mov	r4, r2
 802b142:	2600      	movs	r6, #0
 802b144:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b148:	f1b9 0901 	subs.w	r9, r9, #1
 802b14c:	d505      	bpl.n	802b15a <_fwalk_sglue+0x22>
 802b14e:	6824      	ldr	r4, [r4, #0]
 802b150:	2c00      	cmp	r4, #0
 802b152:	d1f7      	bne.n	802b144 <_fwalk_sglue+0xc>
 802b154:	4630      	mov	r0, r6
 802b156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b15a:	89ab      	ldrh	r3, [r5, #12]
 802b15c:	2b01      	cmp	r3, #1
 802b15e:	d907      	bls.n	802b170 <_fwalk_sglue+0x38>
 802b160:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b164:	3301      	adds	r3, #1
 802b166:	d003      	beq.n	802b170 <_fwalk_sglue+0x38>
 802b168:	4629      	mov	r1, r5
 802b16a:	4638      	mov	r0, r7
 802b16c:	47c0      	blx	r8
 802b16e:	4306      	orrs	r6, r0
 802b170:	3568      	adds	r5, #104	@ 0x68
 802b172:	e7e9      	b.n	802b148 <_fwalk_sglue+0x10>

0802b174 <__sread>:
 802b174:	b510      	push	{r4, lr}
 802b176:	460c      	mov	r4, r1
 802b178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b17c:	f000 f898 	bl	802b2b0 <_read_r>
 802b180:	2800      	cmp	r0, #0
 802b182:	bfab      	itete	ge
 802b184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802b186:	89a3      	ldrhlt	r3, [r4, #12]
 802b188:	181b      	addge	r3, r3, r0
 802b18a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b18e:	bfac      	ite	ge
 802b190:	6563      	strge	r3, [r4, #84]	@ 0x54
 802b192:	81a3      	strhlt	r3, [r4, #12]
 802b194:	bd10      	pop	{r4, pc}

0802b196 <__swrite>:
 802b196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b19a:	461f      	mov	r7, r3
 802b19c:	898b      	ldrh	r3, [r1, #12]
 802b19e:	4605      	mov	r5, r0
 802b1a0:	460c      	mov	r4, r1
 802b1a2:	05db      	lsls	r3, r3, #23
 802b1a4:	4616      	mov	r6, r2
 802b1a6:	d505      	bpl.n	802b1b4 <__swrite+0x1e>
 802b1a8:	2302      	movs	r3, #2
 802b1aa:	2200      	movs	r2, #0
 802b1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b1b0:	f000 f86c 	bl	802b28c <_lseek_r>
 802b1b4:	89a3      	ldrh	r3, [r4, #12]
 802b1b6:	4632      	mov	r2, r6
 802b1b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b1bc:	4628      	mov	r0, r5
 802b1be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b1c2:	81a3      	strh	r3, [r4, #12]
 802b1c4:	463b      	mov	r3, r7
 802b1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b1ca:	f000 b8a7 	b.w	802b31c <_write_r>

0802b1ce <__sseek>:
 802b1ce:	b510      	push	{r4, lr}
 802b1d0:	460c      	mov	r4, r1
 802b1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b1d6:	f000 f859 	bl	802b28c <_lseek_r>
 802b1da:	1c43      	adds	r3, r0, #1
 802b1dc:	89a3      	ldrh	r3, [r4, #12]
 802b1de:	bf15      	itete	ne
 802b1e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b1e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b1e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b1ea:	81a3      	strheq	r3, [r4, #12]
 802b1ec:	bf18      	it	ne
 802b1ee:	81a3      	strhne	r3, [r4, #12]
 802b1f0:	bd10      	pop	{r4, pc}

0802b1f2 <__sclose>:
 802b1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b1f6:	f000 b839 	b.w	802b26c <_close_r>

0802b1fa <memset>:
 802b1fa:	4402      	add	r2, r0
 802b1fc:	4603      	mov	r3, r0
 802b1fe:	4293      	cmp	r3, r2
 802b200:	d100      	bne.n	802b204 <memset+0xa>
 802b202:	4770      	bx	lr
 802b204:	f803 1b01 	strb.w	r1, [r3], #1
 802b208:	e7f9      	b.n	802b1fe <memset+0x4>

0802b20a <_raise_r>:
 802b20a:	291f      	cmp	r1, #31
 802b20c:	b538      	push	{r3, r4, r5, lr}
 802b20e:	4605      	mov	r5, r0
 802b210:	460c      	mov	r4, r1
 802b212:	d904      	bls.n	802b21e <_raise_r+0x14>
 802b214:	2316      	movs	r3, #22
 802b216:	6003      	str	r3, [r0, #0]
 802b218:	f04f 30ff 	mov.w	r0, #4294967295
 802b21c:	bd38      	pop	{r3, r4, r5, pc}
 802b21e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b220:	b112      	cbz	r2, 802b228 <_raise_r+0x1e>
 802b222:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b226:	b94b      	cbnz	r3, 802b23c <_raise_r+0x32>
 802b228:	4628      	mov	r0, r5
 802b22a:	f000 f865 	bl	802b2f8 <_getpid_r>
 802b22e:	4622      	mov	r2, r4
 802b230:	4601      	mov	r1, r0
 802b232:	4628      	mov	r0, r5
 802b234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b238:	f000 b84c 	b.w	802b2d4 <_kill_r>
 802b23c:	2b01      	cmp	r3, #1
 802b23e:	d00a      	beq.n	802b256 <_raise_r+0x4c>
 802b240:	1c59      	adds	r1, r3, #1
 802b242:	d103      	bne.n	802b24c <_raise_r+0x42>
 802b244:	2316      	movs	r3, #22
 802b246:	6003      	str	r3, [r0, #0]
 802b248:	2001      	movs	r0, #1
 802b24a:	e7e7      	b.n	802b21c <_raise_r+0x12>
 802b24c:	2100      	movs	r1, #0
 802b24e:	4620      	mov	r0, r4
 802b250:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b254:	4798      	blx	r3
 802b256:	2000      	movs	r0, #0
 802b258:	e7e0      	b.n	802b21c <_raise_r+0x12>
	...

0802b25c <raise>:
 802b25c:	4b02      	ldr	r3, [pc, #8]	@ (802b268 <raise+0xc>)
 802b25e:	4601      	mov	r1, r0
 802b260:	6818      	ldr	r0, [r3, #0]
 802b262:	f7ff bfd2 	b.w	802b20a <_raise_r>
 802b266:	bf00      	nop
 802b268:	20000164 	.word	0x20000164

0802b26c <_close_r>:
 802b26c:	b538      	push	{r3, r4, r5, lr}
 802b26e:	2300      	movs	r3, #0
 802b270:	4d05      	ldr	r5, [pc, #20]	@ (802b288 <_close_r+0x1c>)
 802b272:	4604      	mov	r4, r0
 802b274:	4608      	mov	r0, r1
 802b276:	602b      	str	r3, [r5, #0]
 802b278:	f7d7 f8c8 	bl	800240c <_close>
 802b27c:	1c43      	adds	r3, r0, #1
 802b27e:	d102      	bne.n	802b286 <_close_r+0x1a>
 802b280:	682b      	ldr	r3, [r5, #0]
 802b282:	b103      	cbz	r3, 802b286 <_close_r+0x1a>
 802b284:	6023      	str	r3, [r4, #0]
 802b286:	bd38      	pop	{r3, r4, r5, pc}
 802b288:	20087768 	.word	0x20087768

0802b28c <_lseek_r>:
 802b28c:	b538      	push	{r3, r4, r5, lr}
 802b28e:	4604      	mov	r4, r0
 802b290:	4d06      	ldr	r5, [pc, #24]	@ (802b2ac <_lseek_r+0x20>)
 802b292:	4608      	mov	r0, r1
 802b294:	4611      	mov	r1, r2
 802b296:	2200      	movs	r2, #0
 802b298:	602a      	str	r2, [r5, #0]
 802b29a:	461a      	mov	r2, r3
 802b29c:	f7d7 f8dd 	bl	800245a <_lseek>
 802b2a0:	1c43      	adds	r3, r0, #1
 802b2a2:	d102      	bne.n	802b2aa <_lseek_r+0x1e>
 802b2a4:	682b      	ldr	r3, [r5, #0]
 802b2a6:	b103      	cbz	r3, 802b2aa <_lseek_r+0x1e>
 802b2a8:	6023      	str	r3, [r4, #0]
 802b2aa:	bd38      	pop	{r3, r4, r5, pc}
 802b2ac:	20087768 	.word	0x20087768

0802b2b0 <_read_r>:
 802b2b0:	b538      	push	{r3, r4, r5, lr}
 802b2b2:	4604      	mov	r4, r0
 802b2b4:	4d06      	ldr	r5, [pc, #24]	@ (802b2d0 <_read_r+0x20>)
 802b2b6:	4608      	mov	r0, r1
 802b2b8:	4611      	mov	r1, r2
 802b2ba:	2200      	movs	r2, #0
 802b2bc:	602a      	str	r2, [r5, #0]
 802b2be:	461a      	mov	r2, r3
 802b2c0:	f7d7 f86b 	bl	800239a <_read>
 802b2c4:	1c43      	adds	r3, r0, #1
 802b2c6:	d102      	bne.n	802b2ce <_read_r+0x1e>
 802b2c8:	682b      	ldr	r3, [r5, #0]
 802b2ca:	b103      	cbz	r3, 802b2ce <_read_r+0x1e>
 802b2cc:	6023      	str	r3, [r4, #0]
 802b2ce:	bd38      	pop	{r3, r4, r5, pc}
 802b2d0:	20087768 	.word	0x20087768

0802b2d4 <_kill_r>:
 802b2d4:	b538      	push	{r3, r4, r5, lr}
 802b2d6:	2300      	movs	r3, #0
 802b2d8:	4d06      	ldr	r5, [pc, #24]	@ (802b2f4 <_kill_r+0x20>)
 802b2da:	4604      	mov	r4, r0
 802b2dc:	4608      	mov	r0, r1
 802b2de:	4611      	mov	r1, r2
 802b2e0:	602b      	str	r3, [r5, #0]
 802b2e2:	f7d7 f83f 	bl	8002364 <_kill>
 802b2e6:	1c43      	adds	r3, r0, #1
 802b2e8:	d102      	bne.n	802b2f0 <_kill_r+0x1c>
 802b2ea:	682b      	ldr	r3, [r5, #0]
 802b2ec:	b103      	cbz	r3, 802b2f0 <_kill_r+0x1c>
 802b2ee:	6023      	str	r3, [r4, #0]
 802b2f0:	bd38      	pop	{r3, r4, r5, pc}
 802b2f2:	bf00      	nop
 802b2f4:	20087768 	.word	0x20087768

0802b2f8 <_getpid_r>:
 802b2f8:	f7d7 b82c 	b.w	8002354 <_getpid>

0802b2fc <_sbrk_r>:
 802b2fc:	b538      	push	{r3, r4, r5, lr}
 802b2fe:	2300      	movs	r3, #0
 802b300:	4d05      	ldr	r5, [pc, #20]	@ (802b318 <_sbrk_r+0x1c>)
 802b302:	4604      	mov	r4, r0
 802b304:	4608      	mov	r0, r1
 802b306:	602b      	str	r3, [r5, #0]
 802b308:	f7d7 f8b4 	bl	8002474 <_sbrk>
 802b30c:	1c43      	adds	r3, r0, #1
 802b30e:	d102      	bne.n	802b316 <_sbrk_r+0x1a>
 802b310:	682b      	ldr	r3, [r5, #0]
 802b312:	b103      	cbz	r3, 802b316 <_sbrk_r+0x1a>
 802b314:	6023      	str	r3, [r4, #0]
 802b316:	bd38      	pop	{r3, r4, r5, pc}
 802b318:	20087768 	.word	0x20087768

0802b31c <_write_r>:
 802b31c:	b538      	push	{r3, r4, r5, lr}
 802b31e:	4604      	mov	r4, r0
 802b320:	4d06      	ldr	r5, [pc, #24]	@ (802b33c <_write_r+0x20>)
 802b322:	4608      	mov	r0, r1
 802b324:	4611      	mov	r1, r2
 802b326:	2200      	movs	r2, #0
 802b328:	602a      	str	r2, [r5, #0]
 802b32a:	461a      	mov	r2, r3
 802b32c:	f7d7 f852 	bl	80023d4 <_write>
 802b330:	1c43      	adds	r3, r0, #1
 802b332:	d102      	bne.n	802b33a <_write_r+0x1e>
 802b334:	682b      	ldr	r3, [r5, #0]
 802b336:	b103      	cbz	r3, 802b33a <_write_r+0x1e>
 802b338:	6023      	str	r3, [r4, #0]
 802b33a:	bd38      	pop	{r3, r4, r5, pc}
 802b33c:	20087768 	.word	0x20087768

0802b340 <__errno>:
 802b340:	4b01      	ldr	r3, [pc, #4]	@ (802b348 <__errno+0x8>)
 802b342:	6818      	ldr	r0, [r3, #0]
 802b344:	4770      	bx	lr
 802b346:	bf00      	nop
 802b348:	20000164 	.word	0x20000164

0802b34c <__libc_init_array>:
 802b34c:	b570      	push	{r4, r5, r6, lr}
 802b34e:	4d0d      	ldr	r5, [pc, #52]	@ (802b384 <__libc_init_array+0x38>)
 802b350:	2600      	movs	r6, #0
 802b352:	4c0d      	ldr	r4, [pc, #52]	@ (802b388 <__libc_init_array+0x3c>)
 802b354:	1b64      	subs	r4, r4, r5
 802b356:	10a4      	asrs	r4, r4, #2
 802b358:	42a6      	cmp	r6, r4
 802b35a:	d109      	bne.n	802b370 <__libc_init_array+0x24>
 802b35c:	4d0b      	ldr	r5, [pc, #44]	@ (802b38c <__libc_init_array+0x40>)
 802b35e:	2600      	movs	r6, #0
 802b360:	4c0b      	ldr	r4, [pc, #44]	@ (802b390 <__libc_init_array+0x44>)
 802b362:	f000 fd69 	bl	802be38 <_init>
 802b366:	1b64      	subs	r4, r4, r5
 802b368:	10a4      	asrs	r4, r4, #2
 802b36a:	42a6      	cmp	r6, r4
 802b36c:	d105      	bne.n	802b37a <__libc_init_array+0x2e>
 802b36e:	bd70      	pop	{r4, r5, r6, pc}
 802b370:	f855 3b04 	ldr.w	r3, [r5], #4
 802b374:	3601      	adds	r6, #1
 802b376:	4798      	blx	r3
 802b378:	e7ee      	b.n	802b358 <__libc_init_array+0xc>
 802b37a:	f855 3b04 	ldr.w	r3, [r5], #4
 802b37e:	3601      	adds	r6, #1
 802b380:	4798      	blx	r3
 802b382:	e7f2      	b.n	802b36a <__libc_init_array+0x1e>
 802b384:	080474f4 	.word	0x080474f4
 802b388:	080474f4 	.word	0x080474f4
 802b38c:	080474f4 	.word	0x080474f4
 802b390:	08047508 	.word	0x08047508

0802b394 <__retarget_lock_init_recursive>:
 802b394:	4770      	bx	lr

0802b396 <__retarget_lock_acquire_recursive>:
 802b396:	4770      	bx	lr

0802b398 <__retarget_lock_release_recursive>:
 802b398:	4770      	bx	lr
	...

0802b39c <__register_exitproc>:
 802b39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b3a0:	4d28      	ldr	r5, [pc, #160]	@ (802b444 <__register_exitproc+0xa8>)
 802b3a2:	4607      	mov	r7, r0
 802b3a4:	4691      	mov	r9, r2
 802b3a6:	460e      	mov	r6, r1
 802b3a8:	6828      	ldr	r0, [r5, #0]
 802b3aa:	4698      	mov	r8, r3
 802b3ac:	f7ff fff3 	bl	802b396 <__retarget_lock_acquire_recursive>
 802b3b0:	4a25      	ldr	r2, [pc, #148]	@ (802b448 <__register_exitproc+0xac>)
 802b3b2:	6814      	ldr	r4, [r2, #0]
 802b3b4:	b93c      	cbnz	r4, 802b3c6 <__register_exitproc+0x2a>
 802b3b6:	4b25      	ldr	r3, [pc, #148]	@ (802b44c <__register_exitproc+0xb0>)
 802b3b8:	6013      	str	r3, [r2, #0]
 802b3ba:	4a25      	ldr	r2, [pc, #148]	@ (802b450 <__register_exitproc+0xb4>)
 802b3bc:	b112      	cbz	r2, 802b3c4 <__register_exitproc+0x28>
 802b3be:	6812      	ldr	r2, [r2, #0]
 802b3c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802b3c4:	4c21      	ldr	r4, [pc, #132]	@ (802b44c <__register_exitproc+0xb0>)
 802b3c6:	6863      	ldr	r3, [r4, #4]
 802b3c8:	2b1f      	cmp	r3, #31
 802b3ca:	dd06      	ble.n	802b3da <__register_exitproc+0x3e>
 802b3cc:	6828      	ldr	r0, [r5, #0]
 802b3ce:	f7ff ffe3 	bl	802b398 <__retarget_lock_release_recursive>
 802b3d2:	f04f 30ff 	mov.w	r0, #4294967295
 802b3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b3da:	b33f      	cbz	r7, 802b42c <__register_exitproc+0x90>
 802b3dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802b3e0:	b968      	cbnz	r0, 802b3fe <__register_exitproc+0x62>
 802b3e2:	4b1c      	ldr	r3, [pc, #112]	@ (802b454 <__register_exitproc+0xb8>)
 802b3e4:	2b00      	cmp	r3, #0
 802b3e6:	d0f1      	beq.n	802b3cc <__register_exitproc+0x30>
 802b3e8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802b3ec:	f7ff fd22 	bl	802ae34 <malloc>
 802b3f0:	2800      	cmp	r0, #0
 802b3f2:	d0eb      	beq.n	802b3cc <__register_exitproc+0x30>
 802b3f4:	2300      	movs	r3, #0
 802b3f6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802b3fa:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b3fe:	6863      	ldr	r3, [r4, #4]
 802b400:	2201      	movs	r2, #1
 802b402:	2f02      	cmp	r7, #2
 802b404:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b408:	fa02 f203 	lsl.w	r2, r2, r3
 802b40c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b410:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802b414:	ea43 0302 	orr.w	r3, r3, r2
 802b418:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802b41c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802b420:	bf02      	ittt	eq
 802b422:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802b426:	4313      	orreq	r3, r2
 802b428:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802b42c:	6863      	ldr	r3, [r4, #4]
 802b42e:	6828      	ldr	r0, [r5, #0]
 802b430:	1c5a      	adds	r2, r3, #1
 802b432:	3302      	adds	r3, #2
 802b434:	6062      	str	r2, [r4, #4]
 802b436:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b43a:	f7ff ffad 	bl	802b398 <__retarget_lock_release_recursive>
 802b43e:	2000      	movs	r0, #0
 802b440:	e7c9      	b.n	802b3d6 <__register_exitproc+0x3a>
 802b442:	bf00      	nop
 802b444:	200001b4 	.word	0x200001b4
 802b448:	200877fc 	.word	0x200877fc
 802b44c:	20087770 	.word	0x20087770
 802b450:	0802fbe4 	.word	0x0802fbe4
 802b454:	0802ae35 	.word	0x0802ae35

0802b458 <_free_r>:
 802b458:	b538      	push	{r3, r4, r5, lr}
 802b45a:	4605      	mov	r5, r0
 802b45c:	2900      	cmp	r1, #0
 802b45e:	d041      	beq.n	802b4e4 <_free_r+0x8c>
 802b460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b464:	1f0c      	subs	r4, r1, #4
 802b466:	2b00      	cmp	r3, #0
 802b468:	bfb8      	it	lt
 802b46a:	18e4      	addlt	r4, r4, r3
 802b46c:	f7ff fd94 	bl	802af98 <__malloc_lock>
 802b470:	4a1d      	ldr	r2, [pc, #116]	@ (802b4e8 <_free_r+0x90>)
 802b472:	6813      	ldr	r3, [r2, #0]
 802b474:	b933      	cbnz	r3, 802b484 <_free_r+0x2c>
 802b476:	6063      	str	r3, [r4, #4]
 802b478:	6014      	str	r4, [r2, #0]
 802b47a:	4628      	mov	r0, r5
 802b47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b480:	f7ff bd90 	b.w	802afa4 <__malloc_unlock>
 802b484:	42a3      	cmp	r3, r4
 802b486:	d908      	bls.n	802b49a <_free_r+0x42>
 802b488:	6820      	ldr	r0, [r4, #0]
 802b48a:	1821      	adds	r1, r4, r0
 802b48c:	428b      	cmp	r3, r1
 802b48e:	bf01      	itttt	eq
 802b490:	6819      	ldreq	r1, [r3, #0]
 802b492:	685b      	ldreq	r3, [r3, #4]
 802b494:	1809      	addeq	r1, r1, r0
 802b496:	6021      	streq	r1, [r4, #0]
 802b498:	e7ed      	b.n	802b476 <_free_r+0x1e>
 802b49a:	461a      	mov	r2, r3
 802b49c:	685b      	ldr	r3, [r3, #4]
 802b49e:	b10b      	cbz	r3, 802b4a4 <_free_r+0x4c>
 802b4a0:	42a3      	cmp	r3, r4
 802b4a2:	d9fa      	bls.n	802b49a <_free_r+0x42>
 802b4a4:	6811      	ldr	r1, [r2, #0]
 802b4a6:	1850      	adds	r0, r2, r1
 802b4a8:	42a0      	cmp	r0, r4
 802b4aa:	d10b      	bne.n	802b4c4 <_free_r+0x6c>
 802b4ac:	6820      	ldr	r0, [r4, #0]
 802b4ae:	4401      	add	r1, r0
 802b4b0:	1850      	adds	r0, r2, r1
 802b4b2:	6011      	str	r1, [r2, #0]
 802b4b4:	4283      	cmp	r3, r0
 802b4b6:	d1e0      	bne.n	802b47a <_free_r+0x22>
 802b4b8:	6818      	ldr	r0, [r3, #0]
 802b4ba:	685b      	ldr	r3, [r3, #4]
 802b4bc:	4408      	add	r0, r1
 802b4be:	6053      	str	r3, [r2, #4]
 802b4c0:	6010      	str	r0, [r2, #0]
 802b4c2:	e7da      	b.n	802b47a <_free_r+0x22>
 802b4c4:	d902      	bls.n	802b4cc <_free_r+0x74>
 802b4c6:	230c      	movs	r3, #12
 802b4c8:	602b      	str	r3, [r5, #0]
 802b4ca:	e7d6      	b.n	802b47a <_free_r+0x22>
 802b4cc:	6820      	ldr	r0, [r4, #0]
 802b4ce:	1821      	adds	r1, r4, r0
 802b4d0:	428b      	cmp	r3, r1
 802b4d2:	bf02      	ittt	eq
 802b4d4:	6819      	ldreq	r1, [r3, #0]
 802b4d6:	685b      	ldreq	r3, [r3, #4]
 802b4d8:	1809      	addeq	r1, r1, r0
 802b4da:	6063      	str	r3, [r4, #4]
 802b4dc:	bf08      	it	eq
 802b4de:	6021      	streq	r1, [r4, #0]
 802b4e0:	6054      	str	r4, [r2, #4]
 802b4e2:	e7ca      	b.n	802b47a <_free_r+0x22>
 802b4e4:	bd38      	pop	{r3, r4, r5, pc}
 802b4e6:	bf00      	nop
 802b4e8:	20087628 	.word	0x20087628

0802b4ec <__sfputc_r>:
 802b4ec:	6893      	ldr	r3, [r2, #8]
 802b4ee:	3b01      	subs	r3, #1
 802b4f0:	2b00      	cmp	r3, #0
 802b4f2:	6093      	str	r3, [r2, #8]
 802b4f4:	b410      	push	{r4}
 802b4f6:	da08      	bge.n	802b50a <__sfputc_r+0x1e>
 802b4f8:	6994      	ldr	r4, [r2, #24]
 802b4fa:	42a3      	cmp	r3, r4
 802b4fc:	db01      	blt.n	802b502 <__sfputc_r+0x16>
 802b4fe:	290a      	cmp	r1, #10
 802b500:	d103      	bne.n	802b50a <__sfputc_r+0x1e>
 802b502:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b506:	f000 bb71 	b.w	802bbec <__swbuf_r>
 802b50a:	6813      	ldr	r3, [r2, #0]
 802b50c:	1c58      	adds	r0, r3, #1
 802b50e:	6010      	str	r0, [r2, #0]
 802b510:	4608      	mov	r0, r1
 802b512:	7019      	strb	r1, [r3, #0]
 802b514:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b518:	4770      	bx	lr

0802b51a <__sfputs_r>:
 802b51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b51c:	4606      	mov	r6, r0
 802b51e:	460f      	mov	r7, r1
 802b520:	4614      	mov	r4, r2
 802b522:	18d5      	adds	r5, r2, r3
 802b524:	42ac      	cmp	r4, r5
 802b526:	d101      	bne.n	802b52c <__sfputs_r+0x12>
 802b528:	2000      	movs	r0, #0
 802b52a:	e007      	b.n	802b53c <__sfputs_r+0x22>
 802b52c:	463a      	mov	r2, r7
 802b52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b532:	4630      	mov	r0, r6
 802b534:	f7ff ffda 	bl	802b4ec <__sfputc_r>
 802b538:	1c43      	adds	r3, r0, #1
 802b53a:	d1f3      	bne.n	802b524 <__sfputs_r+0xa>
 802b53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b540 <_vfiprintf_r>:
 802b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b544:	460d      	mov	r5, r1
 802b546:	b09d      	sub	sp, #116	@ 0x74
 802b548:	4614      	mov	r4, r2
 802b54a:	4698      	mov	r8, r3
 802b54c:	4606      	mov	r6, r0
 802b54e:	b118      	cbz	r0, 802b558 <_vfiprintf_r+0x18>
 802b550:	6a03      	ldr	r3, [r0, #32]
 802b552:	b90b      	cbnz	r3, 802b558 <_vfiprintf_r+0x18>
 802b554:	f7ff fdc6 	bl	802b0e4 <__sinit>
 802b558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b55a:	07d9      	lsls	r1, r3, #31
 802b55c:	d405      	bmi.n	802b56a <_vfiprintf_r+0x2a>
 802b55e:	89ab      	ldrh	r3, [r5, #12]
 802b560:	059a      	lsls	r2, r3, #22
 802b562:	d402      	bmi.n	802b56a <_vfiprintf_r+0x2a>
 802b564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b566:	f7ff ff16 	bl	802b396 <__retarget_lock_acquire_recursive>
 802b56a:	89ab      	ldrh	r3, [r5, #12]
 802b56c:	071b      	lsls	r3, r3, #28
 802b56e:	d501      	bpl.n	802b574 <_vfiprintf_r+0x34>
 802b570:	692b      	ldr	r3, [r5, #16]
 802b572:	b99b      	cbnz	r3, 802b59c <_vfiprintf_r+0x5c>
 802b574:	4629      	mov	r1, r5
 802b576:	4630      	mov	r0, r6
 802b578:	f000 fb76 	bl	802bc68 <__swsetup_r>
 802b57c:	b170      	cbz	r0, 802b59c <_vfiprintf_r+0x5c>
 802b57e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b580:	07dc      	lsls	r4, r3, #31
 802b582:	d504      	bpl.n	802b58e <_vfiprintf_r+0x4e>
 802b584:	f04f 30ff 	mov.w	r0, #4294967295
 802b588:	b01d      	add	sp, #116	@ 0x74
 802b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b58e:	89ab      	ldrh	r3, [r5, #12]
 802b590:	0598      	lsls	r0, r3, #22
 802b592:	d4f7      	bmi.n	802b584 <_vfiprintf_r+0x44>
 802b594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b596:	f7ff feff 	bl	802b398 <__retarget_lock_release_recursive>
 802b59a:	e7f3      	b.n	802b584 <_vfiprintf_r+0x44>
 802b59c:	2300      	movs	r3, #0
 802b59e:	f8cd 800c 	str.w	r8, [sp, #12]
 802b5a2:	f04f 0901 	mov.w	r9, #1
 802b5a6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802b75c <_vfiprintf_r+0x21c>
 802b5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 802b5ac:	2320      	movs	r3, #32
 802b5ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802b5b2:	2330      	movs	r3, #48	@ 0x30
 802b5b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802b5b8:	4623      	mov	r3, r4
 802b5ba:	469a      	mov	sl, r3
 802b5bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b5c0:	b10a      	cbz	r2, 802b5c6 <_vfiprintf_r+0x86>
 802b5c2:	2a25      	cmp	r2, #37	@ 0x25
 802b5c4:	d1f9      	bne.n	802b5ba <_vfiprintf_r+0x7a>
 802b5c6:	ebba 0b04 	subs.w	fp, sl, r4
 802b5ca:	d00b      	beq.n	802b5e4 <_vfiprintf_r+0xa4>
 802b5cc:	465b      	mov	r3, fp
 802b5ce:	4622      	mov	r2, r4
 802b5d0:	4629      	mov	r1, r5
 802b5d2:	4630      	mov	r0, r6
 802b5d4:	f7ff ffa1 	bl	802b51a <__sfputs_r>
 802b5d8:	3001      	adds	r0, #1
 802b5da:	f000 80a7 	beq.w	802b72c <_vfiprintf_r+0x1ec>
 802b5de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b5e0:	445a      	add	r2, fp
 802b5e2:	9209      	str	r2, [sp, #36]	@ 0x24
 802b5e4:	f89a 3000 	ldrb.w	r3, [sl]
 802b5e8:	2b00      	cmp	r3, #0
 802b5ea:	f000 809f 	beq.w	802b72c <_vfiprintf_r+0x1ec>
 802b5ee:	2300      	movs	r3, #0
 802b5f0:	f04f 32ff 	mov.w	r2, #4294967295
 802b5f4:	f10a 0a01 	add.w	sl, sl, #1
 802b5f8:	9304      	str	r3, [sp, #16]
 802b5fa:	9307      	str	r3, [sp, #28]
 802b5fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802b600:	931a      	str	r3, [sp, #104]	@ 0x68
 802b602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b606:	4654      	mov	r4, sl
 802b608:	2205      	movs	r2, #5
 802b60a:	4854      	ldr	r0, [pc, #336]	@ (802b75c <_vfiprintf_r+0x21c>)
 802b60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b610:	f000 fb80 	bl	802bd14 <memchr>
 802b614:	9a04      	ldr	r2, [sp, #16]
 802b616:	b9d8      	cbnz	r0, 802b650 <_vfiprintf_r+0x110>
 802b618:	06d1      	lsls	r1, r2, #27
 802b61a:	bf44      	itt	mi
 802b61c:	2320      	movmi	r3, #32
 802b61e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b622:	0713      	lsls	r3, r2, #28
 802b624:	bf44      	itt	mi
 802b626:	232b      	movmi	r3, #43	@ 0x2b
 802b628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b62c:	f89a 3000 	ldrb.w	r3, [sl]
 802b630:	2b2a      	cmp	r3, #42	@ 0x2a
 802b632:	d015      	beq.n	802b660 <_vfiprintf_r+0x120>
 802b634:	9a07      	ldr	r2, [sp, #28]
 802b636:	4654      	mov	r4, sl
 802b638:	2000      	movs	r0, #0
 802b63a:	f04f 0c0a 	mov.w	ip, #10
 802b63e:	4621      	mov	r1, r4
 802b640:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b644:	3b30      	subs	r3, #48	@ 0x30
 802b646:	2b09      	cmp	r3, #9
 802b648:	d94b      	bls.n	802b6e2 <_vfiprintf_r+0x1a2>
 802b64a:	b1b0      	cbz	r0, 802b67a <_vfiprintf_r+0x13a>
 802b64c:	9207      	str	r2, [sp, #28]
 802b64e:	e014      	b.n	802b67a <_vfiprintf_r+0x13a>
 802b650:	eba0 0308 	sub.w	r3, r0, r8
 802b654:	46a2      	mov	sl, r4
 802b656:	fa09 f303 	lsl.w	r3, r9, r3
 802b65a:	4313      	orrs	r3, r2
 802b65c:	9304      	str	r3, [sp, #16]
 802b65e:	e7d2      	b.n	802b606 <_vfiprintf_r+0xc6>
 802b660:	9b03      	ldr	r3, [sp, #12]
 802b662:	1d19      	adds	r1, r3, #4
 802b664:	681b      	ldr	r3, [r3, #0]
 802b666:	2b00      	cmp	r3, #0
 802b668:	9103      	str	r1, [sp, #12]
 802b66a:	bfbb      	ittet	lt
 802b66c:	425b      	neglt	r3, r3
 802b66e:	f042 0202 	orrlt.w	r2, r2, #2
 802b672:	9307      	strge	r3, [sp, #28]
 802b674:	9307      	strlt	r3, [sp, #28]
 802b676:	bfb8      	it	lt
 802b678:	9204      	strlt	r2, [sp, #16]
 802b67a:	7823      	ldrb	r3, [r4, #0]
 802b67c:	2b2e      	cmp	r3, #46	@ 0x2e
 802b67e:	d10a      	bne.n	802b696 <_vfiprintf_r+0x156>
 802b680:	7863      	ldrb	r3, [r4, #1]
 802b682:	2b2a      	cmp	r3, #42	@ 0x2a
 802b684:	d132      	bne.n	802b6ec <_vfiprintf_r+0x1ac>
 802b686:	9b03      	ldr	r3, [sp, #12]
 802b688:	3402      	adds	r4, #2
 802b68a:	1d1a      	adds	r2, r3, #4
 802b68c:	681b      	ldr	r3, [r3, #0]
 802b68e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b692:	9203      	str	r2, [sp, #12]
 802b694:	9305      	str	r3, [sp, #20]
 802b696:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802b76c <_vfiprintf_r+0x22c>
 802b69a:	2203      	movs	r2, #3
 802b69c:	7821      	ldrb	r1, [r4, #0]
 802b69e:	4650      	mov	r0, sl
 802b6a0:	f000 fb38 	bl	802bd14 <memchr>
 802b6a4:	b138      	cbz	r0, 802b6b6 <_vfiprintf_r+0x176>
 802b6a6:	eba0 000a 	sub.w	r0, r0, sl
 802b6aa:	2240      	movs	r2, #64	@ 0x40
 802b6ac:	9b04      	ldr	r3, [sp, #16]
 802b6ae:	3401      	adds	r4, #1
 802b6b0:	4082      	lsls	r2, r0
 802b6b2:	4313      	orrs	r3, r2
 802b6b4:	9304      	str	r3, [sp, #16]
 802b6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b6ba:	2206      	movs	r2, #6
 802b6bc:	4828      	ldr	r0, [pc, #160]	@ (802b760 <_vfiprintf_r+0x220>)
 802b6be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802b6c2:	f000 fb27 	bl	802bd14 <memchr>
 802b6c6:	2800      	cmp	r0, #0
 802b6c8:	d03f      	beq.n	802b74a <_vfiprintf_r+0x20a>
 802b6ca:	4b26      	ldr	r3, [pc, #152]	@ (802b764 <_vfiprintf_r+0x224>)
 802b6cc:	bb1b      	cbnz	r3, 802b716 <_vfiprintf_r+0x1d6>
 802b6ce:	9b03      	ldr	r3, [sp, #12]
 802b6d0:	3307      	adds	r3, #7
 802b6d2:	f023 0307 	bic.w	r3, r3, #7
 802b6d6:	3308      	adds	r3, #8
 802b6d8:	9303      	str	r3, [sp, #12]
 802b6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b6dc:	443b      	add	r3, r7
 802b6de:	9309      	str	r3, [sp, #36]	@ 0x24
 802b6e0:	e76a      	b.n	802b5b8 <_vfiprintf_r+0x78>
 802b6e2:	fb0c 3202 	mla	r2, ip, r2, r3
 802b6e6:	460c      	mov	r4, r1
 802b6e8:	2001      	movs	r0, #1
 802b6ea:	e7a8      	b.n	802b63e <_vfiprintf_r+0xfe>
 802b6ec:	2300      	movs	r3, #0
 802b6ee:	3401      	adds	r4, #1
 802b6f0:	f04f 0c0a 	mov.w	ip, #10
 802b6f4:	4619      	mov	r1, r3
 802b6f6:	9305      	str	r3, [sp, #20]
 802b6f8:	4620      	mov	r0, r4
 802b6fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b6fe:	3a30      	subs	r2, #48	@ 0x30
 802b700:	2a09      	cmp	r2, #9
 802b702:	d903      	bls.n	802b70c <_vfiprintf_r+0x1cc>
 802b704:	2b00      	cmp	r3, #0
 802b706:	d0c6      	beq.n	802b696 <_vfiprintf_r+0x156>
 802b708:	9105      	str	r1, [sp, #20]
 802b70a:	e7c4      	b.n	802b696 <_vfiprintf_r+0x156>
 802b70c:	fb0c 2101 	mla	r1, ip, r1, r2
 802b710:	4604      	mov	r4, r0
 802b712:	2301      	movs	r3, #1
 802b714:	e7f0      	b.n	802b6f8 <_vfiprintf_r+0x1b8>
 802b716:	ab03      	add	r3, sp, #12
 802b718:	462a      	mov	r2, r5
 802b71a:	a904      	add	r1, sp, #16
 802b71c:	4630      	mov	r0, r6
 802b71e:	9300      	str	r3, [sp, #0]
 802b720:	4b11      	ldr	r3, [pc, #68]	@ (802b768 <_vfiprintf_r+0x228>)
 802b722:	f3af 8000 	nop.w
 802b726:	4607      	mov	r7, r0
 802b728:	1c78      	adds	r0, r7, #1
 802b72a:	d1d6      	bne.n	802b6da <_vfiprintf_r+0x19a>
 802b72c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b72e:	07d9      	lsls	r1, r3, #31
 802b730:	d405      	bmi.n	802b73e <_vfiprintf_r+0x1fe>
 802b732:	89ab      	ldrh	r3, [r5, #12]
 802b734:	059a      	lsls	r2, r3, #22
 802b736:	d402      	bmi.n	802b73e <_vfiprintf_r+0x1fe>
 802b738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b73a:	f7ff fe2d 	bl	802b398 <__retarget_lock_release_recursive>
 802b73e:	89ab      	ldrh	r3, [r5, #12]
 802b740:	065b      	lsls	r3, r3, #25
 802b742:	f53f af1f 	bmi.w	802b584 <_vfiprintf_r+0x44>
 802b746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b748:	e71e      	b.n	802b588 <_vfiprintf_r+0x48>
 802b74a:	ab03      	add	r3, sp, #12
 802b74c:	462a      	mov	r2, r5
 802b74e:	a904      	add	r1, sp, #16
 802b750:	4630      	mov	r0, r6
 802b752:	9300      	str	r3, [sp, #0]
 802b754:	4b04      	ldr	r3, [pc, #16]	@ (802b768 <_vfiprintf_r+0x228>)
 802b756:	f000 f87d 	bl	802b854 <_printf_i>
 802b75a:	e7e4      	b.n	802b726 <_vfiprintf_r+0x1e6>
 802b75c:	0802fbe8 	.word	0x0802fbe8
 802b760:	0802fbf2 	.word	0x0802fbf2
 802b764:	00000000 	.word	0x00000000
 802b768:	0802b51b 	.word	0x0802b51b
 802b76c:	0802fbee 	.word	0x0802fbee

0802b770 <_printf_common>:
 802b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b774:	4616      	mov	r6, r2
 802b776:	4698      	mov	r8, r3
 802b778:	688a      	ldr	r2, [r1, #8]
 802b77a:	4607      	mov	r7, r0
 802b77c:	690b      	ldr	r3, [r1, #16]
 802b77e:	460c      	mov	r4, r1
 802b780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802b784:	4293      	cmp	r3, r2
 802b786:	bfb8      	it	lt
 802b788:	4613      	movlt	r3, r2
 802b78a:	6033      	str	r3, [r6, #0]
 802b78c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802b790:	b10a      	cbz	r2, 802b796 <_printf_common+0x26>
 802b792:	3301      	adds	r3, #1
 802b794:	6033      	str	r3, [r6, #0]
 802b796:	6823      	ldr	r3, [r4, #0]
 802b798:	0699      	lsls	r1, r3, #26
 802b79a:	bf42      	ittt	mi
 802b79c:	6833      	ldrmi	r3, [r6, #0]
 802b79e:	3302      	addmi	r3, #2
 802b7a0:	6033      	strmi	r3, [r6, #0]
 802b7a2:	6825      	ldr	r5, [r4, #0]
 802b7a4:	f015 0506 	ands.w	r5, r5, #6
 802b7a8:	d106      	bne.n	802b7b8 <_printf_common+0x48>
 802b7aa:	f104 0a19 	add.w	sl, r4, #25
 802b7ae:	68e3      	ldr	r3, [r4, #12]
 802b7b0:	6832      	ldr	r2, [r6, #0]
 802b7b2:	1a9b      	subs	r3, r3, r2
 802b7b4:	42ab      	cmp	r3, r5
 802b7b6:	dc2b      	bgt.n	802b810 <_printf_common+0xa0>
 802b7b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802b7bc:	6822      	ldr	r2, [r4, #0]
 802b7be:	3b00      	subs	r3, #0
 802b7c0:	bf18      	it	ne
 802b7c2:	2301      	movne	r3, #1
 802b7c4:	0692      	lsls	r2, r2, #26
 802b7c6:	d430      	bmi.n	802b82a <_printf_common+0xba>
 802b7c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802b7cc:	4641      	mov	r1, r8
 802b7ce:	4638      	mov	r0, r7
 802b7d0:	47c8      	blx	r9
 802b7d2:	3001      	adds	r0, #1
 802b7d4:	d023      	beq.n	802b81e <_printf_common+0xae>
 802b7d6:	6823      	ldr	r3, [r4, #0]
 802b7d8:	341a      	adds	r4, #26
 802b7da:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802b7de:	f003 0306 	and.w	r3, r3, #6
 802b7e2:	2b04      	cmp	r3, #4
 802b7e4:	bf0a      	itet	eq
 802b7e6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802b7ea:	2500      	movne	r5, #0
 802b7ec:	6833      	ldreq	r3, [r6, #0]
 802b7ee:	f04f 0600 	mov.w	r6, #0
 802b7f2:	bf08      	it	eq
 802b7f4:	1aed      	subeq	r5, r5, r3
 802b7f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802b7fa:	bf08      	it	eq
 802b7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b800:	4293      	cmp	r3, r2
 802b802:	bfc4      	itt	gt
 802b804:	1a9b      	subgt	r3, r3, r2
 802b806:	18ed      	addgt	r5, r5, r3
 802b808:	42b5      	cmp	r5, r6
 802b80a:	d11a      	bne.n	802b842 <_printf_common+0xd2>
 802b80c:	2000      	movs	r0, #0
 802b80e:	e008      	b.n	802b822 <_printf_common+0xb2>
 802b810:	2301      	movs	r3, #1
 802b812:	4652      	mov	r2, sl
 802b814:	4641      	mov	r1, r8
 802b816:	4638      	mov	r0, r7
 802b818:	47c8      	blx	r9
 802b81a:	3001      	adds	r0, #1
 802b81c:	d103      	bne.n	802b826 <_printf_common+0xb6>
 802b81e:	f04f 30ff 	mov.w	r0, #4294967295
 802b822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b826:	3501      	adds	r5, #1
 802b828:	e7c1      	b.n	802b7ae <_printf_common+0x3e>
 802b82a:	18e1      	adds	r1, r4, r3
 802b82c:	1c5a      	adds	r2, r3, #1
 802b82e:	2030      	movs	r0, #48	@ 0x30
 802b830:	3302      	adds	r3, #2
 802b832:	4422      	add	r2, r4
 802b834:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802b838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802b83c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802b840:	e7c2      	b.n	802b7c8 <_printf_common+0x58>
 802b842:	2301      	movs	r3, #1
 802b844:	4622      	mov	r2, r4
 802b846:	4641      	mov	r1, r8
 802b848:	4638      	mov	r0, r7
 802b84a:	47c8      	blx	r9
 802b84c:	3001      	adds	r0, #1
 802b84e:	d0e6      	beq.n	802b81e <_printf_common+0xae>
 802b850:	3601      	adds	r6, #1
 802b852:	e7d9      	b.n	802b808 <_printf_common+0x98>

0802b854 <_printf_i>:
 802b854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b858:	7e0f      	ldrb	r7, [r1, #24]
 802b85a:	4691      	mov	r9, r2
 802b85c:	4680      	mov	r8, r0
 802b85e:	460c      	mov	r4, r1
 802b860:	2f78      	cmp	r7, #120	@ 0x78
 802b862:	469a      	mov	sl, r3
 802b864:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802b866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802b86a:	d807      	bhi.n	802b87c <_printf_i+0x28>
 802b86c:	2f62      	cmp	r7, #98	@ 0x62
 802b86e:	d80a      	bhi.n	802b886 <_printf_i+0x32>
 802b870:	2f00      	cmp	r7, #0
 802b872:	f000 80d2 	beq.w	802ba1a <_printf_i+0x1c6>
 802b876:	2f58      	cmp	r7, #88	@ 0x58
 802b878:	f000 80b9 	beq.w	802b9ee <_printf_i+0x19a>
 802b87c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802b880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802b884:	e03a      	b.n	802b8fc <_printf_i+0xa8>
 802b886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802b88a:	2b15      	cmp	r3, #21
 802b88c:	d8f6      	bhi.n	802b87c <_printf_i+0x28>
 802b88e:	a101      	add	r1, pc, #4	@ (adr r1, 802b894 <_printf_i+0x40>)
 802b890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b894:	0802b8ed 	.word	0x0802b8ed
 802b898:	0802b901 	.word	0x0802b901
 802b89c:	0802b87d 	.word	0x0802b87d
 802b8a0:	0802b87d 	.word	0x0802b87d
 802b8a4:	0802b87d 	.word	0x0802b87d
 802b8a8:	0802b87d 	.word	0x0802b87d
 802b8ac:	0802b901 	.word	0x0802b901
 802b8b0:	0802b87d 	.word	0x0802b87d
 802b8b4:	0802b87d 	.word	0x0802b87d
 802b8b8:	0802b87d 	.word	0x0802b87d
 802b8bc:	0802b87d 	.word	0x0802b87d
 802b8c0:	0802ba01 	.word	0x0802ba01
 802b8c4:	0802b92b 	.word	0x0802b92b
 802b8c8:	0802b9bb 	.word	0x0802b9bb
 802b8cc:	0802b87d 	.word	0x0802b87d
 802b8d0:	0802b87d 	.word	0x0802b87d
 802b8d4:	0802ba23 	.word	0x0802ba23
 802b8d8:	0802b87d 	.word	0x0802b87d
 802b8dc:	0802b92b 	.word	0x0802b92b
 802b8e0:	0802b87d 	.word	0x0802b87d
 802b8e4:	0802b87d 	.word	0x0802b87d
 802b8e8:	0802b9c3 	.word	0x0802b9c3
 802b8ec:	6833      	ldr	r3, [r6, #0]
 802b8ee:	1d1a      	adds	r2, r3, #4
 802b8f0:	681b      	ldr	r3, [r3, #0]
 802b8f2:	6032      	str	r2, [r6, #0]
 802b8f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802b8f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802b8fc:	2301      	movs	r3, #1
 802b8fe:	e09d      	b.n	802ba3c <_printf_i+0x1e8>
 802b900:	6833      	ldr	r3, [r6, #0]
 802b902:	6820      	ldr	r0, [r4, #0]
 802b904:	1d19      	adds	r1, r3, #4
 802b906:	6031      	str	r1, [r6, #0]
 802b908:	0606      	lsls	r6, r0, #24
 802b90a:	d501      	bpl.n	802b910 <_printf_i+0xbc>
 802b90c:	681d      	ldr	r5, [r3, #0]
 802b90e:	e003      	b.n	802b918 <_printf_i+0xc4>
 802b910:	0645      	lsls	r5, r0, #25
 802b912:	d5fb      	bpl.n	802b90c <_printf_i+0xb8>
 802b914:	f9b3 5000 	ldrsh.w	r5, [r3]
 802b918:	2d00      	cmp	r5, #0
 802b91a:	da03      	bge.n	802b924 <_printf_i+0xd0>
 802b91c:	232d      	movs	r3, #45	@ 0x2d
 802b91e:	426d      	negs	r5, r5
 802b920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802b924:	4859      	ldr	r0, [pc, #356]	@ (802ba8c <_printf_i+0x238>)
 802b926:	230a      	movs	r3, #10
 802b928:	e011      	b.n	802b94e <_printf_i+0xfa>
 802b92a:	6821      	ldr	r1, [r4, #0]
 802b92c:	6833      	ldr	r3, [r6, #0]
 802b92e:	0608      	lsls	r0, r1, #24
 802b930:	f853 5b04 	ldr.w	r5, [r3], #4
 802b934:	d402      	bmi.n	802b93c <_printf_i+0xe8>
 802b936:	0649      	lsls	r1, r1, #25
 802b938:	bf48      	it	mi
 802b93a:	b2ad      	uxthmi	r5, r5
 802b93c:	2f6f      	cmp	r7, #111	@ 0x6f
 802b93e:	6033      	str	r3, [r6, #0]
 802b940:	4852      	ldr	r0, [pc, #328]	@ (802ba8c <_printf_i+0x238>)
 802b942:	bf14      	ite	ne
 802b944:	230a      	movne	r3, #10
 802b946:	2308      	moveq	r3, #8
 802b948:	2100      	movs	r1, #0
 802b94a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802b94e:	6866      	ldr	r6, [r4, #4]
 802b950:	2e00      	cmp	r6, #0
 802b952:	60a6      	str	r6, [r4, #8]
 802b954:	bfa2      	ittt	ge
 802b956:	6821      	ldrge	r1, [r4, #0]
 802b958:	f021 0104 	bicge.w	r1, r1, #4
 802b95c:	6021      	strge	r1, [r4, #0]
 802b95e:	b90d      	cbnz	r5, 802b964 <_printf_i+0x110>
 802b960:	2e00      	cmp	r6, #0
 802b962:	d04b      	beq.n	802b9fc <_printf_i+0x1a8>
 802b964:	4616      	mov	r6, r2
 802b966:	fbb5 f1f3 	udiv	r1, r5, r3
 802b96a:	fb03 5711 	mls	r7, r3, r1, r5
 802b96e:	5dc7      	ldrb	r7, [r0, r7]
 802b970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802b974:	462f      	mov	r7, r5
 802b976:	460d      	mov	r5, r1
 802b978:	42bb      	cmp	r3, r7
 802b97a:	d9f4      	bls.n	802b966 <_printf_i+0x112>
 802b97c:	2b08      	cmp	r3, #8
 802b97e:	d10b      	bne.n	802b998 <_printf_i+0x144>
 802b980:	6823      	ldr	r3, [r4, #0]
 802b982:	07df      	lsls	r7, r3, #31
 802b984:	d508      	bpl.n	802b998 <_printf_i+0x144>
 802b986:	6923      	ldr	r3, [r4, #16]
 802b988:	6861      	ldr	r1, [r4, #4]
 802b98a:	4299      	cmp	r1, r3
 802b98c:	bfde      	ittt	le
 802b98e:	2330      	movle	r3, #48	@ 0x30
 802b990:	f806 3c01 	strble.w	r3, [r6, #-1]
 802b994:	f106 36ff 	addle.w	r6, r6, #4294967295
 802b998:	1b92      	subs	r2, r2, r6
 802b99a:	6122      	str	r2, [r4, #16]
 802b99c:	464b      	mov	r3, r9
 802b99e:	aa03      	add	r2, sp, #12
 802b9a0:	4621      	mov	r1, r4
 802b9a2:	4640      	mov	r0, r8
 802b9a4:	f8cd a000 	str.w	sl, [sp]
 802b9a8:	f7ff fee2 	bl	802b770 <_printf_common>
 802b9ac:	3001      	adds	r0, #1
 802b9ae:	d14a      	bne.n	802ba46 <_printf_i+0x1f2>
 802b9b0:	f04f 30ff 	mov.w	r0, #4294967295
 802b9b4:	b004      	add	sp, #16
 802b9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b9ba:	6823      	ldr	r3, [r4, #0]
 802b9bc:	f043 0320 	orr.w	r3, r3, #32
 802b9c0:	6023      	str	r3, [r4, #0]
 802b9c2:	2778      	movs	r7, #120	@ 0x78
 802b9c4:	4832      	ldr	r0, [pc, #200]	@ (802ba90 <_printf_i+0x23c>)
 802b9c6:	6823      	ldr	r3, [r4, #0]
 802b9c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802b9cc:	061f      	lsls	r7, r3, #24
 802b9ce:	6831      	ldr	r1, [r6, #0]
 802b9d0:	f851 5b04 	ldr.w	r5, [r1], #4
 802b9d4:	d402      	bmi.n	802b9dc <_printf_i+0x188>
 802b9d6:	065f      	lsls	r7, r3, #25
 802b9d8:	bf48      	it	mi
 802b9da:	b2ad      	uxthmi	r5, r5
 802b9dc:	6031      	str	r1, [r6, #0]
 802b9de:	07d9      	lsls	r1, r3, #31
 802b9e0:	bf44      	itt	mi
 802b9e2:	f043 0320 	orrmi.w	r3, r3, #32
 802b9e6:	6023      	strmi	r3, [r4, #0]
 802b9e8:	b11d      	cbz	r5, 802b9f2 <_printf_i+0x19e>
 802b9ea:	2310      	movs	r3, #16
 802b9ec:	e7ac      	b.n	802b948 <_printf_i+0xf4>
 802b9ee:	4827      	ldr	r0, [pc, #156]	@ (802ba8c <_printf_i+0x238>)
 802b9f0:	e7e9      	b.n	802b9c6 <_printf_i+0x172>
 802b9f2:	6823      	ldr	r3, [r4, #0]
 802b9f4:	f023 0320 	bic.w	r3, r3, #32
 802b9f8:	6023      	str	r3, [r4, #0]
 802b9fa:	e7f6      	b.n	802b9ea <_printf_i+0x196>
 802b9fc:	4616      	mov	r6, r2
 802b9fe:	e7bd      	b.n	802b97c <_printf_i+0x128>
 802ba00:	6833      	ldr	r3, [r6, #0]
 802ba02:	6825      	ldr	r5, [r4, #0]
 802ba04:	1d18      	adds	r0, r3, #4
 802ba06:	6961      	ldr	r1, [r4, #20]
 802ba08:	6030      	str	r0, [r6, #0]
 802ba0a:	062e      	lsls	r6, r5, #24
 802ba0c:	681b      	ldr	r3, [r3, #0]
 802ba0e:	d501      	bpl.n	802ba14 <_printf_i+0x1c0>
 802ba10:	6019      	str	r1, [r3, #0]
 802ba12:	e002      	b.n	802ba1a <_printf_i+0x1c6>
 802ba14:	0668      	lsls	r0, r5, #25
 802ba16:	d5fb      	bpl.n	802ba10 <_printf_i+0x1bc>
 802ba18:	8019      	strh	r1, [r3, #0]
 802ba1a:	2300      	movs	r3, #0
 802ba1c:	4616      	mov	r6, r2
 802ba1e:	6123      	str	r3, [r4, #16]
 802ba20:	e7bc      	b.n	802b99c <_printf_i+0x148>
 802ba22:	6833      	ldr	r3, [r6, #0]
 802ba24:	2100      	movs	r1, #0
 802ba26:	1d1a      	adds	r2, r3, #4
 802ba28:	6032      	str	r2, [r6, #0]
 802ba2a:	681e      	ldr	r6, [r3, #0]
 802ba2c:	6862      	ldr	r2, [r4, #4]
 802ba2e:	4630      	mov	r0, r6
 802ba30:	f000 f970 	bl	802bd14 <memchr>
 802ba34:	b108      	cbz	r0, 802ba3a <_printf_i+0x1e6>
 802ba36:	1b80      	subs	r0, r0, r6
 802ba38:	6060      	str	r0, [r4, #4]
 802ba3a:	6863      	ldr	r3, [r4, #4]
 802ba3c:	6123      	str	r3, [r4, #16]
 802ba3e:	2300      	movs	r3, #0
 802ba40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802ba44:	e7aa      	b.n	802b99c <_printf_i+0x148>
 802ba46:	6923      	ldr	r3, [r4, #16]
 802ba48:	4632      	mov	r2, r6
 802ba4a:	4649      	mov	r1, r9
 802ba4c:	4640      	mov	r0, r8
 802ba4e:	47d0      	blx	sl
 802ba50:	3001      	adds	r0, #1
 802ba52:	d0ad      	beq.n	802b9b0 <_printf_i+0x15c>
 802ba54:	6823      	ldr	r3, [r4, #0]
 802ba56:	079b      	lsls	r3, r3, #30
 802ba58:	d413      	bmi.n	802ba82 <_printf_i+0x22e>
 802ba5a:	68e0      	ldr	r0, [r4, #12]
 802ba5c:	9b03      	ldr	r3, [sp, #12]
 802ba5e:	4298      	cmp	r0, r3
 802ba60:	bfb8      	it	lt
 802ba62:	4618      	movlt	r0, r3
 802ba64:	e7a6      	b.n	802b9b4 <_printf_i+0x160>
 802ba66:	2301      	movs	r3, #1
 802ba68:	4632      	mov	r2, r6
 802ba6a:	4649      	mov	r1, r9
 802ba6c:	4640      	mov	r0, r8
 802ba6e:	47d0      	blx	sl
 802ba70:	3001      	adds	r0, #1
 802ba72:	d09d      	beq.n	802b9b0 <_printf_i+0x15c>
 802ba74:	3501      	adds	r5, #1
 802ba76:	68e3      	ldr	r3, [r4, #12]
 802ba78:	9903      	ldr	r1, [sp, #12]
 802ba7a:	1a5b      	subs	r3, r3, r1
 802ba7c:	42ab      	cmp	r3, r5
 802ba7e:	dcf2      	bgt.n	802ba66 <_printf_i+0x212>
 802ba80:	e7eb      	b.n	802ba5a <_printf_i+0x206>
 802ba82:	2500      	movs	r5, #0
 802ba84:	f104 0619 	add.w	r6, r4, #25
 802ba88:	e7f5      	b.n	802ba76 <_printf_i+0x222>
 802ba8a:	bf00      	nop
 802ba8c:	0802fbf9 	.word	0x0802fbf9
 802ba90:	0802fc0a 	.word	0x0802fc0a

0802ba94 <__sflush_r>:
 802ba94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802ba98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ba9c:	0716      	lsls	r6, r2, #28
 802ba9e:	4605      	mov	r5, r0
 802baa0:	460c      	mov	r4, r1
 802baa2:	d454      	bmi.n	802bb4e <__sflush_r+0xba>
 802baa4:	684b      	ldr	r3, [r1, #4]
 802baa6:	2b00      	cmp	r3, #0
 802baa8:	dc02      	bgt.n	802bab0 <__sflush_r+0x1c>
 802baaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802baac:	2b00      	cmp	r3, #0
 802baae:	dd48      	ble.n	802bb42 <__sflush_r+0xae>
 802bab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802bab2:	2e00      	cmp	r6, #0
 802bab4:	d045      	beq.n	802bb42 <__sflush_r+0xae>
 802bab6:	2300      	movs	r3, #0
 802bab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802babc:	682f      	ldr	r7, [r5, #0]
 802babe:	6a21      	ldr	r1, [r4, #32]
 802bac0:	602b      	str	r3, [r5, #0]
 802bac2:	d030      	beq.n	802bb26 <__sflush_r+0x92>
 802bac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802bac6:	89a3      	ldrh	r3, [r4, #12]
 802bac8:	0759      	lsls	r1, r3, #29
 802baca:	d505      	bpl.n	802bad8 <__sflush_r+0x44>
 802bacc:	6863      	ldr	r3, [r4, #4]
 802bace:	1ad2      	subs	r2, r2, r3
 802bad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802bad2:	b10b      	cbz	r3, 802bad8 <__sflush_r+0x44>
 802bad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802bad6:	1ad2      	subs	r2, r2, r3
 802bad8:	2300      	movs	r3, #0
 802bada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802badc:	6a21      	ldr	r1, [r4, #32]
 802bade:	4628      	mov	r0, r5
 802bae0:	47b0      	blx	r6
 802bae2:	1c43      	adds	r3, r0, #1
 802bae4:	89a3      	ldrh	r3, [r4, #12]
 802bae6:	d106      	bne.n	802baf6 <__sflush_r+0x62>
 802bae8:	6829      	ldr	r1, [r5, #0]
 802baea:	291d      	cmp	r1, #29
 802baec:	d82b      	bhi.n	802bb46 <__sflush_r+0xb2>
 802baee:	4a2a      	ldr	r2, [pc, #168]	@ (802bb98 <__sflush_r+0x104>)
 802baf0:	410a      	asrs	r2, r1
 802baf2:	07d6      	lsls	r6, r2, #31
 802baf4:	d427      	bmi.n	802bb46 <__sflush_r+0xb2>
 802baf6:	2200      	movs	r2, #0
 802baf8:	04d9      	lsls	r1, r3, #19
 802bafa:	6062      	str	r2, [r4, #4]
 802bafc:	6922      	ldr	r2, [r4, #16]
 802bafe:	6022      	str	r2, [r4, #0]
 802bb00:	d504      	bpl.n	802bb0c <__sflush_r+0x78>
 802bb02:	1c42      	adds	r2, r0, #1
 802bb04:	d101      	bne.n	802bb0a <__sflush_r+0x76>
 802bb06:	682b      	ldr	r3, [r5, #0]
 802bb08:	b903      	cbnz	r3, 802bb0c <__sflush_r+0x78>
 802bb0a:	6560      	str	r0, [r4, #84]	@ 0x54
 802bb0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bb0e:	602f      	str	r7, [r5, #0]
 802bb10:	b1b9      	cbz	r1, 802bb42 <__sflush_r+0xae>
 802bb12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bb16:	4299      	cmp	r1, r3
 802bb18:	d002      	beq.n	802bb20 <__sflush_r+0x8c>
 802bb1a:	4628      	mov	r0, r5
 802bb1c:	f7ff fc9c 	bl	802b458 <_free_r>
 802bb20:	2300      	movs	r3, #0
 802bb22:	6363      	str	r3, [r4, #52]	@ 0x34
 802bb24:	e00d      	b.n	802bb42 <__sflush_r+0xae>
 802bb26:	2301      	movs	r3, #1
 802bb28:	4628      	mov	r0, r5
 802bb2a:	47b0      	blx	r6
 802bb2c:	4602      	mov	r2, r0
 802bb2e:	1c50      	adds	r0, r2, #1
 802bb30:	d1c9      	bne.n	802bac6 <__sflush_r+0x32>
 802bb32:	682b      	ldr	r3, [r5, #0]
 802bb34:	2b00      	cmp	r3, #0
 802bb36:	d0c6      	beq.n	802bac6 <__sflush_r+0x32>
 802bb38:	2b1d      	cmp	r3, #29
 802bb3a:	d001      	beq.n	802bb40 <__sflush_r+0xac>
 802bb3c:	2b16      	cmp	r3, #22
 802bb3e:	d11d      	bne.n	802bb7c <__sflush_r+0xe8>
 802bb40:	602f      	str	r7, [r5, #0]
 802bb42:	2000      	movs	r0, #0
 802bb44:	e021      	b.n	802bb8a <__sflush_r+0xf6>
 802bb46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bb4a:	b21b      	sxth	r3, r3
 802bb4c:	e01a      	b.n	802bb84 <__sflush_r+0xf0>
 802bb4e:	690f      	ldr	r7, [r1, #16]
 802bb50:	2f00      	cmp	r7, #0
 802bb52:	d0f6      	beq.n	802bb42 <__sflush_r+0xae>
 802bb54:	0793      	lsls	r3, r2, #30
 802bb56:	680e      	ldr	r6, [r1, #0]
 802bb58:	600f      	str	r7, [r1, #0]
 802bb5a:	bf0c      	ite	eq
 802bb5c:	694b      	ldreq	r3, [r1, #20]
 802bb5e:	2300      	movne	r3, #0
 802bb60:	eba6 0807 	sub.w	r8, r6, r7
 802bb64:	608b      	str	r3, [r1, #8]
 802bb66:	f1b8 0f00 	cmp.w	r8, #0
 802bb6a:	ddea      	ble.n	802bb42 <__sflush_r+0xae>
 802bb6c:	4643      	mov	r3, r8
 802bb6e:	463a      	mov	r2, r7
 802bb70:	6a21      	ldr	r1, [r4, #32]
 802bb72:	4628      	mov	r0, r5
 802bb74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802bb76:	47b0      	blx	r6
 802bb78:	2800      	cmp	r0, #0
 802bb7a:	dc08      	bgt.n	802bb8e <__sflush_r+0xfa>
 802bb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bb80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bb84:	f04f 30ff 	mov.w	r0, #4294967295
 802bb88:	81a3      	strh	r3, [r4, #12]
 802bb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bb8e:	4407      	add	r7, r0
 802bb90:	eba8 0800 	sub.w	r8, r8, r0
 802bb94:	e7e7      	b.n	802bb66 <__sflush_r+0xd2>
 802bb96:	bf00      	nop
 802bb98:	dfbffffe 	.word	0xdfbffffe

0802bb9c <_fflush_r>:
 802bb9c:	b538      	push	{r3, r4, r5, lr}
 802bb9e:	690b      	ldr	r3, [r1, #16]
 802bba0:	4605      	mov	r5, r0
 802bba2:	460c      	mov	r4, r1
 802bba4:	b913      	cbnz	r3, 802bbac <_fflush_r+0x10>
 802bba6:	2500      	movs	r5, #0
 802bba8:	4628      	mov	r0, r5
 802bbaa:	bd38      	pop	{r3, r4, r5, pc}
 802bbac:	b118      	cbz	r0, 802bbb6 <_fflush_r+0x1a>
 802bbae:	6a03      	ldr	r3, [r0, #32]
 802bbb0:	b90b      	cbnz	r3, 802bbb6 <_fflush_r+0x1a>
 802bbb2:	f7ff fa97 	bl	802b0e4 <__sinit>
 802bbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bbba:	2b00      	cmp	r3, #0
 802bbbc:	d0f3      	beq.n	802bba6 <_fflush_r+0xa>
 802bbbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802bbc0:	07d0      	lsls	r0, r2, #31
 802bbc2:	d404      	bmi.n	802bbce <_fflush_r+0x32>
 802bbc4:	0599      	lsls	r1, r3, #22
 802bbc6:	d402      	bmi.n	802bbce <_fflush_r+0x32>
 802bbc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bbca:	f7ff fbe4 	bl	802b396 <__retarget_lock_acquire_recursive>
 802bbce:	4628      	mov	r0, r5
 802bbd0:	4621      	mov	r1, r4
 802bbd2:	f7ff ff5f 	bl	802ba94 <__sflush_r>
 802bbd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bbd8:	4605      	mov	r5, r0
 802bbda:	07da      	lsls	r2, r3, #31
 802bbdc:	d4e4      	bmi.n	802bba8 <_fflush_r+0xc>
 802bbde:	89a3      	ldrh	r3, [r4, #12]
 802bbe0:	059b      	lsls	r3, r3, #22
 802bbe2:	d4e1      	bmi.n	802bba8 <_fflush_r+0xc>
 802bbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bbe6:	f7ff fbd7 	bl	802b398 <__retarget_lock_release_recursive>
 802bbea:	e7dd      	b.n	802bba8 <_fflush_r+0xc>

0802bbec <__swbuf_r>:
 802bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bbee:	460e      	mov	r6, r1
 802bbf0:	4614      	mov	r4, r2
 802bbf2:	4605      	mov	r5, r0
 802bbf4:	b118      	cbz	r0, 802bbfe <__swbuf_r+0x12>
 802bbf6:	6a03      	ldr	r3, [r0, #32]
 802bbf8:	b90b      	cbnz	r3, 802bbfe <__swbuf_r+0x12>
 802bbfa:	f7ff fa73 	bl	802b0e4 <__sinit>
 802bbfe:	69a3      	ldr	r3, [r4, #24]
 802bc00:	60a3      	str	r3, [r4, #8]
 802bc02:	89a3      	ldrh	r3, [r4, #12]
 802bc04:	071a      	lsls	r2, r3, #28
 802bc06:	d501      	bpl.n	802bc0c <__swbuf_r+0x20>
 802bc08:	6923      	ldr	r3, [r4, #16]
 802bc0a:	b943      	cbnz	r3, 802bc1e <__swbuf_r+0x32>
 802bc0c:	4621      	mov	r1, r4
 802bc0e:	4628      	mov	r0, r5
 802bc10:	f000 f82a 	bl	802bc68 <__swsetup_r>
 802bc14:	b118      	cbz	r0, 802bc1e <__swbuf_r+0x32>
 802bc16:	f04f 37ff 	mov.w	r7, #4294967295
 802bc1a:	4638      	mov	r0, r7
 802bc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bc1e:	6823      	ldr	r3, [r4, #0]
 802bc20:	b2f6      	uxtb	r6, r6
 802bc22:	6922      	ldr	r2, [r4, #16]
 802bc24:	4637      	mov	r7, r6
 802bc26:	1a98      	subs	r0, r3, r2
 802bc28:	6963      	ldr	r3, [r4, #20]
 802bc2a:	4283      	cmp	r3, r0
 802bc2c:	dc05      	bgt.n	802bc3a <__swbuf_r+0x4e>
 802bc2e:	4621      	mov	r1, r4
 802bc30:	4628      	mov	r0, r5
 802bc32:	f7ff ffb3 	bl	802bb9c <_fflush_r>
 802bc36:	2800      	cmp	r0, #0
 802bc38:	d1ed      	bne.n	802bc16 <__swbuf_r+0x2a>
 802bc3a:	68a3      	ldr	r3, [r4, #8]
 802bc3c:	3b01      	subs	r3, #1
 802bc3e:	60a3      	str	r3, [r4, #8]
 802bc40:	6823      	ldr	r3, [r4, #0]
 802bc42:	1c5a      	adds	r2, r3, #1
 802bc44:	6022      	str	r2, [r4, #0]
 802bc46:	701e      	strb	r6, [r3, #0]
 802bc48:	1c43      	adds	r3, r0, #1
 802bc4a:	6962      	ldr	r2, [r4, #20]
 802bc4c:	429a      	cmp	r2, r3
 802bc4e:	d004      	beq.n	802bc5a <__swbuf_r+0x6e>
 802bc50:	89a3      	ldrh	r3, [r4, #12]
 802bc52:	07db      	lsls	r3, r3, #31
 802bc54:	d5e1      	bpl.n	802bc1a <__swbuf_r+0x2e>
 802bc56:	2e0a      	cmp	r6, #10
 802bc58:	d1df      	bne.n	802bc1a <__swbuf_r+0x2e>
 802bc5a:	4621      	mov	r1, r4
 802bc5c:	4628      	mov	r0, r5
 802bc5e:	f7ff ff9d 	bl	802bb9c <_fflush_r>
 802bc62:	2800      	cmp	r0, #0
 802bc64:	d0d9      	beq.n	802bc1a <__swbuf_r+0x2e>
 802bc66:	e7d6      	b.n	802bc16 <__swbuf_r+0x2a>

0802bc68 <__swsetup_r>:
 802bc68:	b538      	push	{r3, r4, r5, lr}
 802bc6a:	4b29      	ldr	r3, [pc, #164]	@ (802bd10 <__swsetup_r+0xa8>)
 802bc6c:	4605      	mov	r5, r0
 802bc6e:	460c      	mov	r4, r1
 802bc70:	6818      	ldr	r0, [r3, #0]
 802bc72:	b118      	cbz	r0, 802bc7c <__swsetup_r+0x14>
 802bc74:	6a03      	ldr	r3, [r0, #32]
 802bc76:	b90b      	cbnz	r3, 802bc7c <__swsetup_r+0x14>
 802bc78:	f7ff fa34 	bl	802b0e4 <__sinit>
 802bc7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bc80:	0719      	lsls	r1, r3, #28
 802bc82:	d422      	bmi.n	802bcca <__swsetup_r+0x62>
 802bc84:	06da      	lsls	r2, r3, #27
 802bc86:	d407      	bmi.n	802bc98 <__swsetup_r+0x30>
 802bc88:	2209      	movs	r2, #9
 802bc8a:	602a      	str	r2, [r5, #0]
 802bc8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bc90:	f04f 30ff 	mov.w	r0, #4294967295
 802bc94:	81a3      	strh	r3, [r4, #12]
 802bc96:	e033      	b.n	802bd00 <__swsetup_r+0x98>
 802bc98:	0758      	lsls	r0, r3, #29
 802bc9a:	d512      	bpl.n	802bcc2 <__swsetup_r+0x5a>
 802bc9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bc9e:	b141      	cbz	r1, 802bcb2 <__swsetup_r+0x4a>
 802bca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bca4:	4299      	cmp	r1, r3
 802bca6:	d002      	beq.n	802bcae <__swsetup_r+0x46>
 802bca8:	4628      	mov	r0, r5
 802bcaa:	f7ff fbd5 	bl	802b458 <_free_r>
 802bcae:	2300      	movs	r3, #0
 802bcb0:	6363      	str	r3, [r4, #52]	@ 0x34
 802bcb2:	89a3      	ldrh	r3, [r4, #12]
 802bcb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802bcb8:	81a3      	strh	r3, [r4, #12]
 802bcba:	2300      	movs	r3, #0
 802bcbc:	6063      	str	r3, [r4, #4]
 802bcbe:	6923      	ldr	r3, [r4, #16]
 802bcc0:	6023      	str	r3, [r4, #0]
 802bcc2:	89a3      	ldrh	r3, [r4, #12]
 802bcc4:	f043 0308 	orr.w	r3, r3, #8
 802bcc8:	81a3      	strh	r3, [r4, #12]
 802bcca:	6923      	ldr	r3, [r4, #16]
 802bccc:	b94b      	cbnz	r3, 802bce2 <__swsetup_r+0x7a>
 802bcce:	89a3      	ldrh	r3, [r4, #12]
 802bcd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802bcd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802bcd8:	d003      	beq.n	802bce2 <__swsetup_r+0x7a>
 802bcda:	4621      	mov	r1, r4
 802bcdc:	4628      	mov	r0, r5
 802bcde:	f000 f84c 	bl	802bd7a <__smakebuf_r>
 802bce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bce6:	f013 0201 	ands.w	r2, r3, #1
 802bcea:	d00a      	beq.n	802bd02 <__swsetup_r+0x9a>
 802bcec:	2200      	movs	r2, #0
 802bcee:	60a2      	str	r2, [r4, #8]
 802bcf0:	6962      	ldr	r2, [r4, #20]
 802bcf2:	4252      	negs	r2, r2
 802bcf4:	61a2      	str	r2, [r4, #24]
 802bcf6:	6922      	ldr	r2, [r4, #16]
 802bcf8:	b942      	cbnz	r2, 802bd0c <__swsetup_r+0xa4>
 802bcfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802bcfe:	d1c5      	bne.n	802bc8c <__swsetup_r+0x24>
 802bd00:	bd38      	pop	{r3, r4, r5, pc}
 802bd02:	0799      	lsls	r1, r3, #30
 802bd04:	bf58      	it	pl
 802bd06:	6962      	ldrpl	r2, [r4, #20]
 802bd08:	60a2      	str	r2, [r4, #8]
 802bd0a:	e7f4      	b.n	802bcf6 <__swsetup_r+0x8e>
 802bd0c:	2000      	movs	r0, #0
 802bd0e:	e7f7      	b.n	802bd00 <__swsetup_r+0x98>
 802bd10:	20000164 	.word	0x20000164

0802bd14 <memchr>:
 802bd14:	b2c9      	uxtb	r1, r1
 802bd16:	4603      	mov	r3, r0
 802bd18:	4402      	add	r2, r0
 802bd1a:	b510      	push	{r4, lr}
 802bd1c:	4293      	cmp	r3, r2
 802bd1e:	4618      	mov	r0, r3
 802bd20:	d101      	bne.n	802bd26 <memchr+0x12>
 802bd22:	2000      	movs	r0, #0
 802bd24:	e003      	b.n	802bd2e <memchr+0x1a>
 802bd26:	7804      	ldrb	r4, [r0, #0]
 802bd28:	3301      	adds	r3, #1
 802bd2a:	428c      	cmp	r4, r1
 802bd2c:	d1f6      	bne.n	802bd1c <memchr+0x8>
 802bd2e:	bd10      	pop	{r4, pc}

0802bd30 <__swhatbuf_r>:
 802bd30:	b570      	push	{r4, r5, r6, lr}
 802bd32:	460c      	mov	r4, r1
 802bd34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bd38:	b096      	sub	sp, #88	@ 0x58
 802bd3a:	4615      	mov	r5, r2
 802bd3c:	2900      	cmp	r1, #0
 802bd3e:	461e      	mov	r6, r3
 802bd40:	da0c      	bge.n	802bd5c <__swhatbuf_r+0x2c>
 802bd42:	89a3      	ldrh	r3, [r4, #12]
 802bd44:	2100      	movs	r1, #0
 802bd46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802bd4a:	bf14      	ite	ne
 802bd4c:	2340      	movne	r3, #64	@ 0x40
 802bd4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802bd52:	2000      	movs	r0, #0
 802bd54:	6031      	str	r1, [r6, #0]
 802bd56:	602b      	str	r3, [r5, #0]
 802bd58:	b016      	add	sp, #88	@ 0x58
 802bd5a:	bd70      	pop	{r4, r5, r6, pc}
 802bd5c:	466a      	mov	r2, sp
 802bd5e:	f000 f849 	bl	802bdf4 <_fstat_r>
 802bd62:	2800      	cmp	r0, #0
 802bd64:	dbed      	blt.n	802bd42 <__swhatbuf_r+0x12>
 802bd66:	9901      	ldr	r1, [sp, #4]
 802bd68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802bd6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802bd70:	4259      	negs	r1, r3
 802bd72:	4159      	adcs	r1, r3
 802bd74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802bd78:	e7eb      	b.n	802bd52 <__swhatbuf_r+0x22>

0802bd7a <__smakebuf_r>:
 802bd7a:	898b      	ldrh	r3, [r1, #12]
 802bd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802bd7e:	079d      	lsls	r5, r3, #30
 802bd80:	4606      	mov	r6, r0
 802bd82:	460c      	mov	r4, r1
 802bd84:	d507      	bpl.n	802bd96 <__smakebuf_r+0x1c>
 802bd86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802bd8a:	6023      	str	r3, [r4, #0]
 802bd8c:	6123      	str	r3, [r4, #16]
 802bd8e:	2301      	movs	r3, #1
 802bd90:	6163      	str	r3, [r4, #20]
 802bd92:	b003      	add	sp, #12
 802bd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bd96:	ab01      	add	r3, sp, #4
 802bd98:	466a      	mov	r2, sp
 802bd9a:	f7ff ffc9 	bl	802bd30 <__swhatbuf_r>
 802bd9e:	9f00      	ldr	r7, [sp, #0]
 802bda0:	4605      	mov	r5, r0
 802bda2:	4630      	mov	r0, r6
 802bda4:	4639      	mov	r1, r7
 802bda6:	f7ff f877 	bl	802ae98 <_malloc_r>
 802bdaa:	b948      	cbnz	r0, 802bdc0 <__smakebuf_r+0x46>
 802bdac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bdb0:	059a      	lsls	r2, r3, #22
 802bdb2:	d4ee      	bmi.n	802bd92 <__smakebuf_r+0x18>
 802bdb4:	f023 0303 	bic.w	r3, r3, #3
 802bdb8:	f043 0302 	orr.w	r3, r3, #2
 802bdbc:	81a3      	strh	r3, [r4, #12]
 802bdbe:	e7e2      	b.n	802bd86 <__smakebuf_r+0xc>
 802bdc0:	89a3      	ldrh	r3, [r4, #12]
 802bdc2:	6020      	str	r0, [r4, #0]
 802bdc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802bdc8:	81a3      	strh	r3, [r4, #12]
 802bdca:	9b01      	ldr	r3, [sp, #4]
 802bdcc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802bdd0:	b15b      	cbz	r3, 802bdea <__smakebuf_r+0x70>
 802bdd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bdd6:	4630      	mov	r0, r6
 802bdd8:	f000 f81e 	bl	802be18 <_isatty_r>
 802bddc:	b128      	cbz	r0, 802bdea <__smakebuf_r+0x70>
 802bdde:	89a3      	ldrh	r3, [r4, #12]
 802bde0:	f023 0303 	bic.w	r3, r3, #3
 802bde4:	f043 0301 	orr.w	r3, r3, #1
 802bde8:	81a3      	strh	r3, [r4, #12]
 802bdea:	89a3      	ldrh	r3, [r4, #12]
 802bdec:	431d      	orrs	r5, r3
 802bdee:	81a5      	strh	r5, [r4, #12]
 802bdf0:	e7cf      	b.n	802bd92 <__smakebuf_r+0x18>
	...

0802bdf4 <_fstat_r>:
 802bdf4:	b538      	push	{r3, r4, r5, lr}
 802bdf6:	2300      	movs	r3, #0
 802bdf8:	4d06      	ldr	r5, [pc, #24]	@ (802be14 <_fstat_r+0x20>)
 802bdfa:	4604      	mov	r4, r0
 802bdfc:	4608      	mov	r0, r1
 802bdfe:	4611      	mov	r1, r2
 802be00:	602b      	str	r3, [r5, #0]
 802be02:	f7d6 fb0f 	bl	8002424 <_fstat>
 802be06:	1c43      	adds	r3, r0, #1
 802be08:	d102      	bne.n	802be10 <_fstat_r+0x1c>
 802be0a:	682b      	ldr	r3, [r5, #0]
 802be0c:	b103      	cbz	r3, 802be10 <_fstat_r+0x1c>
 802be0e:	6023      	str	r3, [r4, #0]
 802be10:	bd38      	pop	{r3, r4, r5, pc}
 802be12:	bf00      	nop
 802be14:	20087768 	.word	0x20087768

0802be18 <_isatty_r>:
 802be18:	b538      	push	{r3, r4, r5, lr}
 802be1a:	2300      	movs	r3, #0
 802be1c:	4d05      	ldr	r5, [pc, #20]	@ (802be34 <_isatty_r+0x1c>)
 802be1e:	4604      	mov	r4, r0
 802be20:	4608      	mov	r0, r1
 802be22:	602b      	str	r3, [r5, #0]
 802be24:	f7d6 fb0e 	bl	8002444 <_isatty>
 802be28:	1c43      	adds	r3, r0, #1
 802be2a:	d102      	bne.n	802be32 <_isatty_r+0x1a>
 802be2c:	682b      	ldr	r3, [r5, #0]
 802be2e:	b103      	cbz	r3, 802be32 <_isatty_r+0x1a>
 802be30:	6023      	str	r3, [r4, #0]
 802be32:	bd38      	pop	{r3, r4, r5, pc}
 802be34:	20087768 	.word	0x20087768

0802be38 <_init>:
 802be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802be3a:	bf00      	nop
 802be3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802be3e:	bc08      	pop	{r3}
 802be40:	469e      	mov	lr, r3
 802be42:	4770      	bx	lr

0802be44 <_fini>:
 802be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802be46:	bf00      	nop
 802be48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802be4a:	bc08      	pop	{r3}
 802be4c:	469e      	mov	lr, r3
 802be4e:	4770      	bx	lr
