
gui_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c9c0  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cd4  0802cc34  0802cc34  0002dc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08030908  08030908  00031908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08030ab0  08030ab0  00031ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000010  08030ac8  08030ac8  00031ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08030ad8  08030ad8  000dd9b8  2**0
                  CONTENTS
  7 .ARM          00000008  08030ad8  08030ad8  00031ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08030ae0  08030ae0  000dd9b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08030ae0  08030ae0  00031ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .fini_array   00000008  08030af4  08030af4  00031af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .data         000001b8  20000000  08030afc  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_Framebuffer 000a9000  200001b8  08030cb4  000321b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 Nemagfx_Memory_Pool_Buffer 00002800  200a91b8  080d9cb4  000db1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          000aeb6c  200ab9b8  080dc4b4  000dd9b8  2**2
                  ALLOC
 15 ._user_heap_stack 00000604  2015a524  080dc4b4  000de524  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  000dd9b8  2**0
                  CONTENTS, READONLY
 17 .debug_info   0009964e  00000000  00000000  000dd9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0001317f  00000000  00000000  0017703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003fb8  00000000  00000000  0018a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002f3d  00000000  00000000  0018e178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000544bb  00000000  00000000  001910b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005dd34  00000000  00000000  001e5570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001d585c  00000000  00000000  002432a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  00418b00  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00010d54  00000000  00000000  00418bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000116  00000000  00000000  00429918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	200ab9b8 	.word	0x200ab9b8
 8000290:	00000000 	.word	0x00000000
 8000294:	0802cc1c 	.word	0x0802cc1c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	200ab9bc 	.word	0x200ab9bc
 80002b0:	0802cc1c 	.word	0x0802cc1c

080002b4 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 80002b4:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002b6:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002ba:	4917      	ldr	r1, [pc, #92]	@ (8000318 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002bc:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002c0:	4816      	ldr	r0, [pc, #88]	@ (800031c <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002c2:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002c4:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002c8:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002ca:	4815      	ldr	r0, [pc, #84]	@ (8000320 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002cc:	4912      	ldr	r1, [pc, #72]	@ (8000318 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002ce:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002d0:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002d2:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002d6:	4913      	ldr	r1, [pc, #76]	@ (8000324 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002d8:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002da:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002de:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002e0:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002e4:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002e8:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002ec:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002f0:	490d      	ldr	r1, [pc, #52]	@ (8000328 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002f2:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002f6:	4770      	bx	lr

080002f8 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002f8:	f7ff bffe 	b.w	80002f8 <__tx_BadHandler>

080002fc <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002fc:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 8000302:	4770      	bx	lr

08000304 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 8000304:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000306:	f000 f897 	bl	8000438 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 800030a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 800030e:	4770      	bx	lr

08000310 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000310:	f7ff bffe 	b.w	8000310 <__tx_NMIHandler>

08000314 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000314:	f7ff bffe 	b.w	8000314 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000318:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800031c:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000320:	20157ed0 	.word	0x20157ed0
    LDR     r1, =SYSTICK_CYCLES
 8000324:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000328:	40ff0000 	.word	0x40ff0000

0800032c <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 800032c:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000330:	4a2d      	ldr	r2, [pc, #180]	@ (80003e8 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000332:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000334:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000338:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 800033c:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000340:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000342:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000346:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800034a:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800034e:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000352:	f3bf 8f6f 	isb	sy

08000356 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000356:	e7fe      	b.n	8000356 <__tx_wait_here>

08000358 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000358:	4824      	ldr	r0, [pc, #144]	@ (80003ec <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800035a:	4a25      	ldr	r2, [pc, #148]	@ (80003f0 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 800035c:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000360:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000362:	b191      	cbz	r1, 800038a <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000364:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000366:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800036a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800036e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000372:	d101      	bne.n	8000378 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000374:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000378 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000378:	4c1e      	ldr	r4, [pc, #120]	@ (80003f4 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800037a:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800037e:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000382:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000384:	b10d      	cbz	r5, 800038a <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000386:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000388:	6023      	str	r3, [r4, #0]

0800038a <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800038c:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800038e:	b1d1      	cbz	r1, 80003c6 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000390:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i

08000394 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000394:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000396:	4c17      	ldr	r4, [pc, #92]	@ (80003f4 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000398:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800039a:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800039e:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003a0:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 80003a2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 80003a6:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003aa:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003ae:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003b2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003b6:	d101      	bne.n	80003bc <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003b8:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003bc <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003bc:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003c0:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003c4:	4770      	bx	lr

080003c6 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003c6:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003c8:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003ca:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003cc:	b909      	cbnz	r1, 80003d2 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ce:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003d0:	e7f9      	b.n	80003c6 <__tx_ts_wait>

080003d2 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003d2:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003d6:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003da:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003de:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003e0:	e7d8      	b.n	8000394 <__tx_ts_restore>
 80003e2:	bf00      	nop

080003e4 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003e4:	4770      	bx	lr
 80003e6:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003e8:	20157f6c 	.word	0x20157f6c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ec:	20157ed4 	.word	0x20157ed4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003f0:	20157ed8 	.word	0x20157ed8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003f4:	201584d8 	.word	0x201584d8

080003f8 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003f8:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003fa:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003fe:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 8000402:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 8000406:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000408:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 800040c:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 800040e:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000410:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 8000412:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 8000414:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 8000416:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000418:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 800041a:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 800041c:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 800041e:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000420:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000424:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000426:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 800042a:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 800042c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800042e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000432:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000434:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000436:	4770      	bx	lr

08000438 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000438:	4922      	ldr	r1, [pc, #136]	@ (80004c4 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800043a:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 800043c:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000440:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000442:	4b21      	ldr	r3, [pc, #132]	@ (80004c8 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000444:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000446:	b13a      	cbz	r2, 8000458 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000448:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 800044c:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800044e:	b91a      	cbnz	r2, 8000458 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000450:	4b1e      	ldr	r3, [pc, #120]	@ (80004cc <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000452:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000456:	6018      	str	r0, [r3, #0]

08000458 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000458:	491d      	ldr	r1, [pc, #116]	@ (80004d0 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800045a:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 800045c:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800045e:	b122      	cbz	r2, 800046a <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000460:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000462:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000466:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000468:	e008      	b.n	800047c <__tx_timer_done>

0800046a <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800046a:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000470:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000472:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000474:	d101      	bne.n	800047a <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000476:	4b19      	ldr	r3, [pc, #100]	@ (80004dc <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000478:	6818      	ldr	r0, [r3, #0]

0800047a <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800047a:	6008      	str	r0, [r1, #0]

0800047c <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 800047c:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800047e:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000480:	b912      	cbnz	r2, 8000488 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000482:	4914      	ldr	r1, [pc, #80]	@ (80004d4 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000484:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000486:	b1c8      	cbz	r0, 80004bc <__tx_timer_nothing_expired>

08000488 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000488:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800048a:	4912      	ldr	r1, [pc, #72]	@ (80004d4 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800048c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800048e:	b108      	cbz	r0, 8000494 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000490:	f00f f8e0 	bl	800f654 <_tx_timer_expiration_process>

08000494 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000494:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000496:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000498:	b172      	cbz	r2, 80004b8 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800049a:	f00f f84d 	bl	800f538 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800049e:	4810      	ldr	r0, [pc, #64]	@ (80004e0 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004a0:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004a2:	b949      	cbnz	r1, 80004b8 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a4:	480f      	ldr	r0, [pc, #60]	@ (80004e4 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004a6:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004a8:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004aa:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ac:	480f      	ldr	r0, [pc, #60]	@ (80004ec <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004b2:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004b4:	d000      	beq.n	80004b8 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004b6:	6002      	str	r2, [r0, #0]

080004b8 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 80004b8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004bc <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004bc:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004c0:	4770      	bx	lr
 80004c2:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004c4:	20157f78 	.word	0x20157f78
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004c8:	201584d8 	.word	0x201584d8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004cc:	20157f7c 	.word	0x20157f7c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004d0:	20158008 	.word	0x20158008
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004d4:	2015800c 	.word	0x2015800c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004d8:	20158004 	.word	0x20158004
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004dc:	20158000 	.word	0x20158000
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004e0:	20157f6c 	.word	0x20157f6c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004e4:	20157ed4 	.word	0x20157ed4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004e8:	20157ed8 	.word	0x20157ed8
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004ec:	e000ed04 	.word	0xe000ed04

080004f0 <__aeabi_uldivmod>:
 80004f0:	b953      	cbnz	r3, 8000508 <__aeabi_uldivmod+0x18>
 80004f2:	b94a      	cbnz	r2, 8000508 <__aeabi_uldivmod+0x18>
 80004f4:	2900      	cmp	r1, #0
 80004f6:	bf08      	it	eq
 80004f8:	2800      	cmpeq	r0, #0
 80004fa:	bf1c      	itt	ne
 80004fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000500:	f04f 30ff 	movne.w	r0, #4294967295
 8000504:	f000 b97e 	b.w	8000804 <__aeabi_idiv0>
 8000508:	f1ad 0c08 	sub.w	ip, sp, #8
 800050c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000510:	f000 f806 	bl	8000520 <__udivmoddi4>
 8000514:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800051c:	b004      	add	sp, #16
 800051e:	4770      	bx	lr

08000520 <__udivmoddi4>:
 8000520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000524:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000526:	460c      	mov	r4, r1
 8000528:	2b00      	cmp	r3, #0
 800052a:	d14d      	bne.n	80005c8 <__udivmoddi4+0xa8>
 800052c:	428a      	cmp	r2, r1
 800052e:	460f      	mov	r7, r1
 8000530:	4684      	mov	ip, r0
 8000532:	4696      	mov	lr, r2
 8000534:	fab2 f382 	clz	r3, r2
 8000538:	d960      	bls.n	80005fc <__udivmoddi4+0xdc>
 800053a:	b14b      	cbz	r3, 8000550 <__udivmoddi4+0x30>
 800053c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000540:	f1c3 0220 	rsb	r2, r3, #32
 8000544:	409f      	lsls	r7, r3
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f202 	lsr.w	r2, r0, r2
 800054e:	4317      	orrs	r7, r2
 8000550:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000554:	fa1f f48e 	uxth.w	r4, lr
 8000558:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800055c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000560:	fb06 7711 	mls	r7, r6, r1, r7
 8000564:	fb01 f004 	mul.w	r0, r1, r4
 8000568:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800056c:	4290      	cmp	r0, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x62>
 8000570:	eb1e 0202 	adds.w	r2, lr, r2
 8000574:	f101 37ff 	add.w	r7, r1, #4294967295
 8000578:	d202      	bcs.n	8000580 <__udivmoddi4+0x60>
 800057a:	4290      	cmp	r0, r2
 800057c:	f200 812d 	bhi.w	80007da <__udivmoddi4+0x2ba>
 8000580:	4639      	mov	r1, r7
 8000582:	1a12      	subs	r2, r2, r0
 8000584:	fa1f fc8c 	uxth.w	ip, ip
 8000588:	fbb2 f0f6 	udiv	r0, r2, r6
 800058c:	fb06 2210 	mls	r2, r6, r0, r2
 8000590:	fb00 f404 	mul.w	r4, r0, r4
 8000594:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000598:	4564      	cmp	r4, ip
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x8e>
 800059c:	eb1e 0c0c 	adds.w	ip, lr, ip
 80005a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005a4:	d202      	bcs.n	80005ac <__udivmoddi4+0x8c>
 80005a6:	4564      	cmp	r4, ip
 80005a8:	f200 811a 	bhi.w	80007e0 <__udivmoddi4+0x2c0>
 80005ac:	4610      	mov	r0, r2
 80005ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005b2:	ebac 0c04 	sub.w	ip, ip, r4
 80005b6:	2100      	movs	r1, #0
 80005b8:	b125      	cbz	r5, 80005c4 <__udivmoddi4+0xa4>
 80005ba:	fa2c f303 	lsr.w	r3, ip, r3
 80005be:	2200      	movs	r2, #0
 80005c0:	e9c5 3200 	strd	r3, r2, [r5]
 80005c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d905      	bls.n	80005d8 <__udivmoddi4+0xb8>
 80005cc:	b10d      	cbz	r5, 80005d2 <__udivmoddi4+0xb2>
 80005ce:	e9c5 0100 	strd	r0, r1, [r5]
 80005d2:	2100      	movs	r1, #0
 80005d4:	4608      	mov	r0, r1
 80005d6:	e7f5      	b.n	80005c4 <__udivmoddi4+0xa4>
 80005d8:	fab3 f183 	clz	r1, r3
 80005dc:	2900      	cmp	r1, #0
 80005de:	d14d      	bne.n	800067c <__udivmoddi4+0x15c>
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	f0c0 80f2 	bcc.w	80007ca <__udivmoddi4+0x2aa>
 80005e6:	4290      	cmp	r0, r2
 80005e8:	f080 80ef 	bcs.w	80007ca <__udivmoddi4+0x2aa>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d0e6      	beq.n	80005c4 <__udivmoddi4+0xa4>
 80005f6:	e9c5 6300 	strd	r6, r3, [r5]
 80005fa:	e7e3      	b.n	80005c4 <__udivmoddi4+0xa4>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	f040 80a2 	bne.w	8000746 <__udivmoddi4+0x226>
 8000602:	1a8a      	subs	r2, r1, r2
 8000604:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000608:	fa1f f68e 	uxth.w	r6, lr
 800060c:	2101      	movs	r1, #1
 800060e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000612:	fb07 2014 	mls	r0, r7, r4, r2
 8000616:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800061a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800061e:	fb06 f004 	mul.w	r0, r6, r4
 8000622:	4290      	cmp	r0, r2
 8000624:	d90f      	bls.n	8000646 <__udivmoddi4+0x126>
 8000626:	eb1e 0202 	adds.w	r2, lr, r2
 800062a:	f104 38ff 	add.w	r8, r4, #4294967295
 800062e:	bf2c      	ite	cs
 8000630:	f04f 0901 	movcs.w	r9, #1
 8000634:	f04f 0900 	movcc.w	r9, #0
 8000638:	4290      	cmp	r0, r2
 800063a:	d903      	bls.n	8000644 <__udivmoddi4+0x124>
 800063c:	f1b9 0f00 	cmp.w	r9, #0
 8000640:	f000 80c8 	beq.w	80007d4 <__udivmoddi4+0x2b4>
 8000644:	4644      	mov	r4, r8
 8000646:	1a12      	subs	r2, r2, r0
 8000648:	fa1f fc8c 	uxth.w	ip, ip
 800064c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000650:	fb07 2210 	mls	r2, r7, r0, r2
 8000654:	fb00 f606 	mul.w	r6, r0, r6
 8000658:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800065c:	4566      	cmp	r6, ip
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x152>
 8000660:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000664:	f100 32ff 	add.w	r2, r0, #4294967295
 8000668:	d202      	bcs.n	8000670 <__udivmoddi4+0x150>
 800066a:	4566      	cmp	r6, ip
 800066c:	f200 80bb 	bhi.w	80007e6 <__udivmoddi4+0x2c6>
 8000670:	4610      	mov	r0, r2
 8000672:	ebac 0c06 	sub.w	ip, ip, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	e79d      	b.n	80005b8 <__udivmoddi4+0x98>
 800067c:	f1c1 0620 	rsb	r6, r1, #32
 8000680:	408b      	lsls	r3, r1
 8000682:	fa04 fe01 	lsl.w	lr, r4, r1
 8000686:	fa22 f706 	lsr.w	r7, r2, r6
 800068a:	fa20 fc06 	lsr.w	ip, r0, r6
 800068e:	40f4      	lsrs	r4, r6
 8000690:	408a      	lsls	r2, r1
 8000692:	431f      	orrs	r7, r3
 8000694:	ea4e 030c 	orr.w	r3, lr, ip
 8000698:	fa00 fe01 	lsl.w	lr, r0, r1
 800069c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80006a4:	fa1f fc87 	uxth.w	ip, r7
 80006a8:	fbb4 f0f8 	udiv	r0, r4, r8
 80006ac:	fb08 4410 	mls	r4, r8, r0, r4
 80006b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006b4:	fb00 f90c 	mul.w	r9, r0, ip
 80006b8:	45a1      	cmp	r9, r4
 80006ba:	d90e      	bls.n	80006da <__udivmoddi4+0x1ba>
 80006bc:	193c      	adds	r4, r7, r4
 80006be:	f100 3aff 	add.w	sl, r0, #4294967295
 80006c2:	bf2c      	ite	cs
 80006c4:	f04f 0b01 	movcs.w	fp, #1
 80006c8:	f04f 0b00 	movcc.w	fp, #0
 80006cc:	45a1      	cmp	r9, r4
 80006ce:	d903      	bls.n	80006d8 <__udivmoddi4+0x1b8>
 80006d0:	f1bb 0f00 	cmp.w	fp, #0
 80006d4:	f000 8093 	beq.w	80007fe <__udivmoddi4+0x2de>
 80006d8:	4650      	mov	r0, sl
 80006da:	eba4 0409 	sub.w	r4, r4, r9
 80006de:	fa1f f983 	uxth.w	r9, r3
 80006e2:	fbb4 f3f8 	udiv	r3, r4, r8
 80006e6:	fb08 4413 	mls	r4, r8, r3, r4
 80006ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80006ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006f2:	45a4      	cmp	ip, r4
 80006f4:	d906      	bls.n	8000704 <__udivmoddi4+0x1e4>
 80006f6:	193c      	adds	r4, r7, r4
 80006f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80006fc:	d201      	bcs.n	8000702 <__udivmoddi4+0x1e2>
 80006fe:	45a4      	cmp	ip, r4
 8000700:	d87a      	bhi.n	80007f8 <__udivmoddi4+0x2d8>
 8000702:	4643      	mov	r3, r8
 8000704:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000708:	eba4 040c 	sub.w	r4, r4, ip
 800070c:	fba0 9802 	umull	r9, r8, r0, r2
 8000710:	4544      	cmp	r4, r8
 8000712:	46cc      	mov	ip, r9
 8000714:	4643      	mov	r3, r8
 8000716:	d302      	bcc.n	800071e <__udivmoddi4+0x1fe>
 8000718:	d106      	bne.n	8000728 <__udivmoddi4+0x208>
 800071a:	45ce      	cmp	lr, r9
 800071c:	d204      	bcs.n	8000728 <__udivmoddi4+0x208>
 800071e:	3801      	subs	r0, #1
 8000720:	ebb9 0c02 	subs.w	ip, r9, r2
 8000724:	eb68 0307 	sbc.w	r3, r8, r7
 8000728:	b15d      	cbz	r5, 8000742 <__udivmoddi4+0x222>
 800072a:	ebbe 020c 	subs.w	r2, lr, ip
 800072e:	eb64 0403 	sbc.w	r4, r4, r3
 8000732:	fa04 f606 	lsl.w	r6, r4, r6
 8000736:	fa22 f301 	lsr.w	r3, r2, r1
 800073a:	40cc      	lsrs	r4, r1
 800073c:	431e      	orrs	r6, r3
 800073e:	e9c5 6400 	strd	r6, r4, [r5]
 8000742:	2100      	movs	r1, #0
 8000744:	e73e      	b.n	80005c4 <__udivmoddi4+0xa4>
 8000746:	fa02 fe03 	lsl.w	lr, r2, r3
 800074a:	f1c3 0120 	rsb	r1, r3, #32
 800074e:	fa04 f203 	lsl.w	r2, r4, r3
 8000752:	fa00 fc03 	lsl.w	ip, r0, r3
 8000756:	40cc      	lsrs	r4, r1
 8000758:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800075c:	fa20 f101 	lsr.w	r1, r0, r1
 8000760:	fa1f f68e 	uxth.w	r6, lr
 8000764:	fbb4 f0f7 	udiv	r0, r4, r7
 8000768:	430a      	orrs	r2, r1
 800076a:	fb07 4410 	mls	r4, r7, r0, r4
 800076e:	0c11      	lsrs	r1, r2, #16
 8000770:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000774:	fb00 f406 	mul.w	r4, r0, r6
 8000778:	428c      	cmp	r4, r1
 800077a:	d90e      	bls.n	800079a <__udivmoddi4+0x27a>
 800077c:	eb1e 0101 	adds.w	r1, lr, r1
 8000780:	f100 38ff 	add.w	r8, r0, #4294967295
 8000784:	bf2c      	ite	cs
 8000786:	f04f 0901 	movcs.w	r9, #1
 800078a:	f04f 0900 	movcc.w	r9, #0
 800078e:	428c      	cmp	r4, r1
 8000790:	d902      	bls.n	8000798 <__udivmoddi4+0x278>
 8000792:	f1b9 0f00 	cmp.w	r9, #0
 8000796:	d02c      	beq.n	80007f2 <__udivmoddi4+0x2d2>
 8000798:	4640      	mov	r0, r8
 800079a:	1b09      	subs	r1, r1, r4
 800079c:	b292      	uxth	r2, r2
 800079e:	fbb1 f4f7 	udiv	r4, r1, r7
 80007a2:	fb07 1114 	mls	r1, r7, r4, r1
 80007a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007aa:	fb04 f106 	mul.w	r1, r4, r6
 80007ae:	4291      	cmp	r1, r2
 80007b0:	d907      	bls.n	80007c2 <__udivmoddi4+0x2a2>
 80007b2:	eb1e 0202 	adds.w	r2, lr, r2
 80007b6:	f104 38ff 	add.w	r8, r4, #4294967295
 80007ba:	d201      	bcs.n	80007c0 <__udivmoddi4+0x2a0>
 80007bc:	4291      	cmp	r1, r2
 80007be:	d815      	bhi.n	80007ec <__udivmoddi4+0x2cc>
 80007c0:	4644      	mov	r4, r8
 80007c2:	1a52      	subs	r2, r2, r1
 80007c4:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80007c8:	e721      	b.n	800060e <__udivmoddi4+0xee>
 80007ca:	1a86      	subs	r6, r0, r2
 80007cc:	eb64 0303 	sbc.w	r3, r4, r3
 80007d0:	2001      	movs	r0, #1
 80007d2:	e70e      	b.n	80005f2 <__udivmoddi4+0xd2>
 80007d4:	3c02      	subs	r4, #2
 80007d6:	4472      	add	r2, lr
 80007d8:	e735      	b.n	8000646 <__udivmoddi4+0x126>
 80007da:	3902      	subs	r1, #2
 80007dc:	4472      	add	r2, lr
 80007de:	e6d0      	b.n	8000582 <__udivmoddi4+0x62>
 80007e0:	44f4      	add	ip, lr
 80007e2:	3802      	subs	r0, #2
 80007e4:	e6e3      	b.n	80005ae <__udivmoddi4+0x8e>
 80007e6:	44f4      	add	ip, lr
 80007e8:	3802      	subs	r0, #2
 80007ea:	e742      	b.n	8000672 <__udivmoddi4+0x152>
 80007ec:	3c02      	subs	r4, #2
 80007ee:	4472      	add	r2, lr
 80007f0:	e7e7      	b.n	80007c2 <__udivmoddi4+0x2a2>
 80007f2:	3802      	subs	r0, #2
 80007f4:	4471      	add	r1, lr
 80007f6:	e7d0      	b.n	800079a <__udivmoddi4+0x27a>
 80007f8:	3b02      	subs	r3, #2
 80007fa:	443c      	add	r4, r7
 80007fc:	e782      	b.n	8000704 <__udivmoddi4+0x1e4>
 80007fe:	3802      	subs	r0, #2
 8000800:	443c      	add	r4, r7
 8000802:	e76a      	b.n	80006da <__udivmoddi4+0x1ba>

08000804 <__aeabi_idiv0>:
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000814:	2334      	movs	r3, #52	@ 0x34
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	f44f 53fd 	mov.w	r3, #8096	@ 0x1fa0
 800081c:	4a13      	ldr	r2, [pc, #76]	@ (800086c <tx_application_define+0x64>)
 800081e:	4914      	ldr	r1, [pc, #80]	@ (8000870 <tx_application_define+0x68>)
 8000820:	4814      	ldr	r0, [pc, #80]	@ (8000874 <tx_application_define+0x6c>)
 8000822:	f00f f9c1 	bl	800fba8 <_txe_byte_pool_create>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10a      	bne.n	8000842 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <tx_application_define+0x6c>)
 800082e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000830:	68b8      	ldr	r0, [r7, #8]
 8000832:	f000 f827 	bl	8000884 <App_ThreadX_Init>
 8000836:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800083e:	bf00      	nop
 8000840:	e7fd      	b.n	800083e <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

    if (tx_byte_pool_create(&touchgfx_app_byte_pool, "TouchGFX App memory pool", touchgfx_byte_pool_buffer, TOUCHGFX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000842:	2334      	movs	r3, #52	@ 0x34
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084a:	4a0b      	ldr	r2, [pc, #44]	@ (8000878 <tx_application_define+0x70>)
 800084c:	490b      	ldr	r1, [pc, #44]	@ (800087c <tx_application_define+0x74>)
 800084e:	480c      	ldr	r0, [pc, #48]	@ (8000880 <tx_application_define+0x78>)
 8000850:	f00f f9aa 	bl	800fba8 <_txe_byte_pool_create>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d104      	bne.n	8000864 <tx_application_define+0x5c>
    {
        /* USER CODE BEGIN TouchGFX_Byte_Pool_Success */

        /* USER CODE END TouchGFX_Byte_Pool_Success */

        memory_ptr = (VOID*)&touchgfx_app_byte_pool;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <tx_application_define+0x78>)
 800085c:	60bb      	str	r3, [r7, #8]
    if (MX_TouchGFX_Init(memory_ptr) != TX_SUCCESS)
 800085e:	68b8      	ldr	r0, [r7, #8]
 8000860:	f00f fd76 	bl	8010350 <MX_TouchGFX_Init>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200ab9d4 	.word	0x200ab9d4
 8000870:	0802cc34 	.word	0x0802cc34
 8000874:	200ad974 	.word	0x200ad974
 8000878:	200ad9a8 	.word	0x200ad9a8
 800087c:	0802cc48 	.word	0x0802cc48
 8000880:	200ae9a8 	.word	0x200ae9a8

08000884 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	@ 0x38
 8000888:	af08      	add	r7, sp, #32
 800088a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	613b      	str	r3, [r7, #16]

  /* USER CODE END App_ThreadX_MEM_POOL */
  CHAR *pointer;

  /* Allocate the stack for tx app thread  */
  if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 8000894:	f107 010c 	add.w	r1, r7, #12
 8000898:	2300      	movs	r3, #0
 800089a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089e:	6938      	ldr	r0, [r7, #16]
 80008a0:	f00f f90e 	bl	800fac0 <_txe_byte_allocate>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <App_ThreadX_Init+0x2a>
                       TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 80008aa:	2302      	movs	r3, #2
 80008ac:	e01a      	b.n	80008e4 <App_ThreadX_Init+0x60>
  }
  /* Create tx app thread.  */
  if (tx_thread_create(&tx_app_thread, "tx app thread", tx_app_thread_entry, 0, pointer,
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	22b0      	movs	r2, #176	@ 0xb0
 80008b2:	9206      	str	r2, [sp, #24]
 80008b4:	2201      	movs	r2, #1
 80008b6:	9205      	str	r2, [sp, #20]
 80008b8:	2200      	movs	r2, #0
 80008ba:	9204      	str	r2, [sp, #16]
 80008bc:	220a      	movs	r2, #10
 80008be:	9203      	str	r2, [sp, #12]
 80008c0:	220a      	movs	r2, #10
 80008c2:	9202      	str	r2, [sp, #8]
 80008c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <App_ThreadX_Init+0x68>)
 80008d0:	4907      	ldr	r1, [pc, #28]	@ (80008f0 <App_ThreadX_Init+0x6c>)
 80008d2:	4808      	ldr	r0, [pc, #32]	@ (80008f4 <App_ThreadX_Init+0x70>)
 80008d4:	f00f fc42 	bl	801015c <_txe_thread_create>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <App_ThreadX_Init+0x5e>
                       TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 80008de:	230e      	movs	r3, #14
 80008e0:	e000      	b.n	80008e4 <App_ThreadX_Init+0x60>
  }

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008e2:	697b      	ldr	r3, [r7, #20]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	080008f9 	.word	0x080008f9
 80008f0:	0802cc64 	.word	0x0802cc64
 80008f4:	200ae9dc 	.word	0x200ae9dc

080008f8 <tx_app_thread_entry>:
  * @brief  Function implementing the tx_app_thread_entry thread.
  * @param  thread_input: Hardcoded to 0.
  * @retval None
  */
void tx_app_thread_entry(ULONG thread_input)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tx_app_thread_entry */

	// Enable tearing
	HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x02);
 8000900:	2302      	movs	r3, #2
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2335      	movs	r3, #53	@ 0x35
 8000906:	2215      	movs	r2, #21
 8000908:	2100      	movs	r1, #0
 800090a:	4803      	ldr	r0, [pc, #12]	@ (8000918 <tx_app_thread_entry+0x20>)
 800090c:	f006 faf7 	bl	8006efe <HAL_DSI_ShortWrite>

  /* USER CODE END tx_app_thread_entry */
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200aec58 	.word	0x200aec58

0800091c <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000920:	f00d fbec 	bl	800e0fc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f001 fe9d 	bl	800266c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f8f3 	bl	8000b1c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000936:	f000 f967 	bl	8000c08 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f000 fcf1 	bl	8001320 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800093e:	f000 fb49 	bl	8000fd4 <MX_GPDMA1_Init>
  MX_DSIHOST_DSI_Init();
 8000942:	f000 fa3f 	bl	8000dc4 <MX_DSIHOST_DSI_Init>
  MX_ICACHE_Init();
 8000946:	f000 fbb9 	bl	80010bc <MX_ICACHE_Init>
  MX_LTDC_Init();
 800094a:	f000 fbcb 	bl	80010e4 <MX_LTDC_Init>
  MX_I2C5_Init();
 800094e:	f000 fb75 	bl	800103c <MX_I2C5_Init>
  MX_RTC_Init();
 8000952:	f000 fc4b 	bl	80011ec <MX_RTC_Init>
  MX_ADC1_Init();
 8000956:	f000 f965 	bl	8000c24 <MX_ADC1_Init>
  MX_UART4_Init();
 800095a:	f000 fc95 	bl	8001288 <MX_UART4_Init>
  MX_CRC_Init();
 800095e:	f000 f9d1 	bl	8000d04 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000962:	f000 f9f1 	bl	8000d48 <MX_DMA2D_Init>
  MX_GPU2D_Init();
 8000966:	f000 fb55 	bl	8001014 <MX_GPU2D_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800096a:	f00f fce9 	bl	8010340 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
	HAL_DSI_Start(&hdsi);
 800096e:	4866      	ldr	r0, [pc, #408]	@ (8000b08 <main+0x1e0>)
 8000970:	f006 fa68 	bl	8006e44 <HAL_DSI_Start>

	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2140      	movs	r1, #64	@ 0x40
 8000978:	4864      	ldr	r0, [pc, #400]	@ (8000b0c <main+0x1e4>)
 800097a:	f006 fd51 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SD_EN_GPIO_Port,SD_EN_Pin, RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	4862      	ldr	r0, [pc, #392]	@ (8000b0c <main+0x1e4>)
 8000984:	f006 fd4c 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WL_BT_PWR_EN_GPIO_Port, WL_BT_PWR_EN_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800098e:	4860      	ldr	r0, [pc, #384]	@ (8000b10 <main+0x1e8>)
 8000990:	f006 fd46 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2108      	movs	r1, #8
 8000998:	485d      	ldr	r0, [pc, #372]	@ (8000b10 <main+0x1e8>)
 800099a:	f006 fd41 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a4:	485b      	ldr	r0, [pc, #364]	@ (8000b14 <main+0x1ec>)
 80009a6:	f006 fd3b 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2108      	movs	r1, #8
 80009ae:	4857      	ldr	r0, [pc, #348]	@ (8000b0c <main+0x1e4>)
 80009b0:	f006 fd36 	bl	8007420 <HAL_GPIO_WritePin>

	// Turn on display power AVDD
	HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2140      	movs	r1, #64	@ 0x40
 80009b8:	4854      	ldr	r0, [pc, #336]	@ (8000b0c <main+0x1e4>)
 80009ba:	f006 fd31 	bl	8007420 <HAL_GPIO_WritePin>

	// Reset the display
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2108      	movs	r1, #8
 80009c2:	4853      	ldr	r0, [pc, #332]	@ (8000b10 <main+0x1e8>)
 80009c4:	f006 fd2c 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f001 fe9f 	bl	800270c <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2108      	movs	r1, #8
 80009d2:	484f      	ldr	r0, [pc, #316]	@ (8000b10 <main+0x1e8>)
 80009d4:	f006 fd24 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f001 fe97 	bl	800270c <HAL_Delay>
	HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2108      	movs	r1, #8
 80009e2:	484b      	ldr	r0, [pc, #300]	@ (8000b10 <main+0x1e8>)
 80009e4:	f006 fd1c 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80009e8:	2032      	movs	r0, #50	@ 0x32
 80009ea:	f001 fe8f 	bl	800270c <HAL_Delay>

	HAL_StatusTypeDef status = HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]
	//	float old_a = 0;
	//	uint32_t count = 0;


	// Exit sleep
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x11, 0x00);
 80009f2:	2300      	movs	r3, #0
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2311      	movs	r3, #17
 80009f8:	2205      	movs	r2, #5
 80009fa:	2100      	movs	r1, #0
 80009fc:	4842      	ldr	r0, [pc, #264]	@ (8000b08 <main+0x1e0>)
 80009fe:	f006 fa7e 	bl	8006efe <HAL_DSI_ShortWrite>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000a06:	2064      	movs	r0, #100	@ 0x64
 8000a08:	f001 fe80 	bl	800270c <HAL_Delay>

//	// All pixels on
//	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x23, 0x00);
//	HAL_Delay(100);

	uint8_t caset_data[4] = {0x00, 0x1E, 0x01, 0xBD};
 8000a0c:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <main+0x1f0>)
 8000a0e:	603b      	str	r3, [r7, #0]
	status = HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, 0x2A, caset_data);
 8000a10:	463b      	mov	r3, r7
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	232a      	movs	r3, #42	@ 0x2a
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2304      	movs	r3, #4
 8000a1a:	2239      	movs	r2, #57	@ 0x39
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	483a      	ldr	r0, [pc, #232]	@ (8000b08 <main+0x1e0>)
 8000a20:	f006 fa8f 	bl	8006f42 <HAL_DSI_LongWrite>
 8000a24:	4603      	mov	r3, r0
 8000a26:	71fb      	strb	r3, [r7, #7]

//	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2A, 0x00);
	HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	@ 0x64
 8000a2a:	f001 fe6f 	bl	800270c <HAL_Delay>

	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2B, 0x00);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	232b      	movs	r3, #43	@ 0x2b
 8000a34:	2215      	movs	r2, #21
 8000a36:	2100      	movs	r1, #0
 8000a38:	4833      	ldr	r0, [pc, #204]	@ (8000b08 <main+0x1e0>)
 8000a3a:	f006 fa60 	bl	8006efe <HAL_DSI_ShortWrite>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000a42:	2064      	movs	r0, #100	@ 0x64
 8000a44:	f001 fe62 	bl	800270c <HAL_Delay>

	// Display on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x29, 0x00);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2329      	movs	r3, #41	@ 0x29
 8000a4e:	2205      	movs	r2, #5
 8000a50:	2100      	movs	r1, #0
 8000a52:	482d      	ldr	r0, [pc, #180]	@ (8000b08 <main+0x1e0>)
 8000a54:	f006 fa53 	bl	8006efe <HAL_DSI_ShortWrite>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	@ 0x64
 8000a5e:	f001 fe55 	bl	800270c <HAL_Delay>

	// Inversion on
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x21, 0x00);
 8000a62:	2300      	movs	r3, #0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2321      	movs	r3, #33	@ 0x21
 8000a68:	2205      	movs	r2, #5
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4826      	ldr	r0, [pc, #152]	@ (8000b08 <main+0x1e0>)
 8000a6e:	f006 fa46 	bl	8006efe <HAL_DSI_ShortWrite>
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8000a76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a7a:	f001 fe47 	bl	800270c <HAL_Delay>

	// Set normal display mode
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x13, 0x00);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2313      	movs	r3, #19
 8000a84:	2205      	movs	r2, #5
 8000a86:	2100      	movs	r1, #0
 8000a88:	481f      	ldr	r0, [pc, #124]	@ (8000b08 <main+0x1e0>)
 8000a8a:	f006 fa38 	bl	8006efe <HAL_DSI_ShortWrite>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8000a92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a96:	f001 fe39 	bl	800270c <HAL_Delay>

	// Set brightness to max
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x51, 0xFF);
 8000a9a:	23ff      	movs	r3, #255	@ 0xff
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2351      	movs	r3, #81	@ 0x51
 8000aa0:	2215      	movs	r2, #21
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4818      	ldr	r0, [pc, #96]	@ (8000b08 <main+0x1e0>)
 8000aa6:	f006 fa2a 	bl	8006efe <HAL_DSI_ShortWrite>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8000aae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab2:	f001 fe2b 	bl	800270c <HAL_Delay>

	status = HAL_DSI_Refresh(&hdsi);
 8000ab6:	4814      	ldr	r0, [pc, #80]	@ (8000b08 <main+0x1e0>)
 8000ab8:	f006 fa00 	bl	8006ebc <HAL_DSI_Refresh>
 8000abc:	4603      	mov	r3, r0
 8000abe:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2000);
 8000ac0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ac4:	f001 fe22 	bl	800270c <HAL_Delay>

	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x2B, 0x00);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	232b      	movs	r3, #43	@ 0x2b
 8000ace:	2215      	movs	r2, #21
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <main+0x1e0>)
 8000ad4:	f006 fa13 	bl	8006efe <HAL_DSI_ShortWrite>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8000adc:	2064      	movs	r0, #100	@ 0x64
 8000ade:	f001 fe15 	bl	800270c <HAL_Delay>
//	// Enable tearing
//	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, 0x35, 0x02);
//	HAL_Delay(100);

	// Inversion off
	status = HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P0, 0x20, 0x00);
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	2205      	movs	r2, #5
 8000aea:	2100      	movs	r1, #0
 8000aec:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <main+0x1e0>)
 8000aee:	f006 fa06 	bl	8006efe <HAL_DSI_ShortWrite>
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8000af6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afa:	f001 fe07 	bl	800270c <HAL_Delay>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000afe:	f7ff ff0d 	bl	800091c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <main+0x1da>
 8000b06:	bf00      	nop
 8000b08:	200aec58 	.word	0x200aec58
 8000b0c:	42021000 	.word	0x42021000
 8000b10:	42021c00 	.word	0x42021c00
 8000b14:	42020c00 	.word	0x42020c00
 8000b18:	bd011e00 	.word	0xbd011e00

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09e      	sub	sp, #120	@ 0x78
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	2260      	movs	r2, #96	@ 0x60
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f02b fa4b 	bl	802bfc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b40:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000b44:	f007 f906 	bl	8007d54 <HAL_PWREx_ControlVoltageScaling>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000b4e:	f000 ff51 	bl	80019f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b52:	f007 f8df 	bl	8007d14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000b56:	4b2b      	ldr	r3, [pc, #172]	@ (8000c04 <SystemClock_Config+0xe8>)
 8000b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b5c:	f023 0318 	bic.w	r3, r3, #24
 8000b60:	4a28      	ldr	r2, [pc, #160]	@ (8000c04 <SystemClock_Config+0xe8>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b74:	2381      	movs	r3, #129	@ 0x81
 8000b76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7e:	2310      	movs	r3, #16
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b86:	2303      	movs	r3, #3
 8000b88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b92:	230a      	movs	r3, #10
 8000b94:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 5;
 8000b96:	2305      	movs	r3, #5
 8000b98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f007 f9cc 	bl	8007f4c <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bba:	f000 ff1b 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	231f      	movs	r3, #31
 8000bc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f008 f892 	bl	8008d04 <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000be6:	f000 ff05 	bl	80019f4 <Error_Handler>
  }

  /** LSCO configuration
  */
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 8000bea:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000bee:	f00b fb9b 	bl	800c328 <HAL_RCCEx_EnableLSCO>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000bf2:	f008 fc09 	bl	8009408 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000bf6:	f00b fb85 	bl	800c304 <HAL_RCCEx_EnableLSECSS>
}
 8000bfa:	bf00      	nop
 8000bfc:	3778      	adds	r7, #120	@ 0x78
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	46020c00 	.word	0x46020c00

08000c08 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000c0c:	f007 f97e 	bl	8007f0c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000c10:	2002      	movs	r0, #2
 8000c12:	f007 f92b 	bl	8007e6c <HAL_PWREx_ConfigSupply>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000c1c:	f000 feea 	bl	80019f4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f02b f9c8 	bl	802bfc6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c36:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c38:	4a30      	ldr	r2, [pc, #192]	@ (8000cfc <MX_ADC1_Init+0xd8>)
 8000c3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c3e:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 8000c42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000c44:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c50:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c56:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5c:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c62:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb2:	4811      	ldr	r0, [pc, #68]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000cb4:	f002 f8c4 	bl	8002e40 <HAL_ADC_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000cbe:	f000 fe99 	bl	80019f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_ADC1_Init+0xdc>)
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_68CYCLES;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_ADC1_Init+0xd4>)
 8000ce2:	f002 fe87 	bl	80039f4 <HAL_ADC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000cec:	f000 fe82 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200aea8c 	.word	0x200aea8c
 8000cfc:	42028000 	.word	0x42028000
 8000d00:	20000100 	.word	0x20000100

08000d04 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <MX_CRC_Init+0x3c>)
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d44 <MX_CRC_Init+0x40>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_CRC_Init+0x3c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <MX_CRC_Init+0x3c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_CRC_Init+0x3c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <MX_CRC_Init+0x3c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_CRC_Init+0x3c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <MX_CRC_Init+0x3c>)
 8000d2e:	f003 fddf 	bl	80048f0 <HAL_CRC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d38:	f000 fe5c 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200aebcc 	.word	0x200aebcc
 8000d44:	40023000 	.word	0x40023000

08000d48 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <MX_DMA2D_Init+0x78>)
 8000d50:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d94:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000d96:	f004 f83a 	bl	8004e0e <HAL_DMA2D_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000da0:	f000 fe28 	bl	80019f4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000da4:	2101      	movs	r1, #1
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_DMA2D_Init+0x74>)
 8000da8:	f004 f9a2 	bl	80050f0 <HAL_DMA2D_ConfigLayer>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f000 fe1f 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200aebf0 	.word	0x200aebf0
 8000dc0:	4002b000 	.word	0x4002b000

08000dc4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ae      	sub	sp, #184	@ 0xb8
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000dca:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000ddc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000de0:	2224      	movs	r2, #36	@ 0x24
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f02b f8ee 	bl	802bfc6 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000dea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000dfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e00:	2234      	movs	r2, #52	@ 0x34
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f02b f8de 	bl	802bfc6 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	222c      	movs	r2, #44	@ 0x2c
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f02b f8d8 	bl	802bfc6 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000e16:	4b6d      	ldr	r3, [pc, #436]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000e18:	4a6d      	ldr	r2, [pc, #436]	@ (8000fd0 <MX_DSIHOST_DSI_Init+0x20c>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000e1c:	4b6b      	ldr	r3, [pc, #428]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000e22:	4b6a      	ldr	r3, [pc, #424]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000e28:	4b68      	ldr	r3, [pc, #416]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 8000e2e:	4b67      	ldr	r3, [pc, #412]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000e30:	2208      	movs	r2, #8
 8000e32:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 8000e34:	4b65      	ldr	r3, [pc, #404]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 8000e3a:	237d      	movs	r3, #125	@ 0x7d
 8000e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 8000e40:	2304      	movs	r3, #4
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000e5e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000e62:	4619      	mov	r1, r3
 8000e64:	4859      	ldr	r0, [pc, #356]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000e66:	f005 fa29 	bl	80062bc <HAL_DSI_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8000e70:	f000 fdc0 	bl	80019f4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 20;
 8000e78:	2314      	movs	r3, #20
 8000e7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.LowPowerReceptionTimeout = 20;
 8000e7e:	2314      	movs	r3, #20
 8000e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.HighSpeedReadTimeout = 20;
 8000e84:	2314      	movs	r3, #20
 8000e86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.LowPowerReadTimeout = 20;
 8000e8a:	2314      	movs	r3, #20
 8000e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 20;
 8000e90:	2314      	movs	r3, #20
 8000e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerWriteTimeout = 20;
 8000e9c:	2314      	movs	r3, #20
 8000e9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.BTATimeout = 20;
 8000ea2:	2314      	movs	r3, #20
 8000ea4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ea8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000eac:	4619      	mov	r1, r3
 8000eae:	4847      	ldr	r0, [pc, #284]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000eb0:	f005 ff02 	bl	8006cb8 <HAL_DSI_ConfigHostTimeouts>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8000eba:	f000 fd9b 	bl	80019f4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.StopWaitTime = 10;
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000ed6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000eda:	4619      	mov	r1, r3
 8000edc:	483b      	ldr	r0, [pc, #236]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000ede:	f005 fe55 	bl	8006b8c <HAL_DSI_ConfigPhyTimer>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000ee8:	f000 fd84 	bl	80019f4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000eec:	2104      	movs	r1, #4
 8000eee:	4837      	ldr	r0, [pc, #220]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000ef0:	f005 fe24 	bl	8006b3c <HAL_DSI_ConfigFlowControl>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000efa:	f000 fd7b 	bl	80019f4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4832      	ldr	r0, [pc, #200]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000f02:	f005 fb11 	bl	8006528 <HAL_DSI_ConfigErrorMonitor>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000f0c:	f000 fd72 	bl	80019f4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000f22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f32:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000f34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f38:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000f3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000f40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f44:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000f46:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000f4a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000f4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000f50:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000f52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000f5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f60:	4619      	mov	r1, r3
 8000f62:	481a      	ldr	r0, [pc, #104]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000f64:	f005 fd8c 	bl	8006a80 <HAL_DSI_ConfigCommand>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_DSIHOST_DSI_Init+0x1ae>
  {
    Error_Handler();
 8000f6e:	f000 fd41 	bl	80019f4 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8000f72:	2305      	movs	r3, #5
 8000f74:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8000f76:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000f7a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000f84:	2304      	movs	r3, #4
 8000f86:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000fa2:	f005 fc96 	bl	80068d2 <HAL_DSI_ConfigAdaptedCommandMode>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_DSIHOST_DSI_Init+0x1ec>
  {
    Error_Handler();
 8000fac:	f000 fd22 	bl	80019f4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <MX_DSIHOST_DSI_Init+0x208>)
 8000fb4:	f005 fc62 	bl	800687c <HAL_DSI_SetGenericVCID>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_DSIHOST_DSI_Init+0x1fe>
  {
    Error_Handler();
 8000fbe:	f000 fd19 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	37b8      	adds	r7, #184	@ 0xb8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200aec58 	.word	0x200aec58
 8000fd0:	40016c00 	.word	0x40016c00

08000fd4 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <MX_GPDMA1_Init+0x3c>)
 8000fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <MX_GPDMA1_Init+0x3c>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_GPDMA1_Init+0x3c>)
 8000fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	201d      	movs	r0, #29
 8000ffe:	f003 fbf7 	bl	80047f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001002:	201d      	movs	r0, #29
 8001004:	f003 fc0e 	bl	8004824 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	46020c00 	.word	0x46020c00

08001014 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_GPU2D_Init+0x20>)
 800101a:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <MX_GPU2D_Init+0x24>)
 800101c:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_GPU2D_Init+0x20>)
 8001020:	f006 fa16 	bl	8007450 <HAL_GPU2D_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 800102a:	f000 fce3 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200aec7c 	.word	0x200aec7c
 8001038:	4002f000 	.word	0x4002f000

0800103c <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <MX_I2C5_Init+0x74>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	@ (80010b4 <MX_I2C5_Init+0x78>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x30909DEC;
 8001046:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <MX_I2C5_Init+0x74>)
 8001048:	4a1b      	ldr	r2, [pc, #108]	@ (80010b8 <MX_I2C5_Init+0x7c>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <MX_I2C5_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <MX_I2C5_Init+0x74>)
 8001054:	2201      	movs	r2, #1
 8001056:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <MX_I2C5_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_I2C5_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <MX_I2C5_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_I2C5_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_I2C5_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8001076:	480e      	ldr	r0, [pc, #56]	@ (80010b0 <MX_I2C5_Init+0x74>)
 8001078:	f006 fa3a 	bl	80074f0 <HAL_I2C_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8001082:	f000 fcb7 	bl	80019f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <MX_I2C5_Init+0x74>)
 800108a:	f006 facc 	bl	8007626 <HAL_I2CEx_ConfigAnalogFilter>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8001094:	f000 fcae 	bl	80019f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_I2C5_Init+0x74>)
 800109c:	f006 fb0e 	bl	80076bc <HAL_I2CEx_ConfigDigitalFilter>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f000 fca5 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200aec88 	.word	0x200aec88
 80010b4:	40009800 	.word	0x40009800
 80010b8:	30909dec 	.word	0x30909dec

080010bc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f006 fb47 	bl	8007754 <HAL_ICACHE_ConfigAssociativityMode>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80010cc:	f000 fc92 	bl	80019f4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80010d0:	f006 fb60 	bl	8007794 <HAL_ICACHE_Enable>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80010da:	f000 fc8b 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08e      	sub	sp, #56	@ 0x38
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2234      	movs	r2, #52	@ 0x34
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f02a ff68 	bl	802bfc6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 80010f8:	4a3a      	ldr	r2, [pc, #232]	@ (80011e4 <MX_LTDC_Init+0x100>)
 80010fa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010fc:	4b38      	ldr	r3, [pc, #224]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001102:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001108:	4b35      	ldr	r3, [pc, #212]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001114:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800111a:	4b31      	ldr	r3, [pc, #196]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001120:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8001126:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 800112e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001134:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001136:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 416;
 800113c:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 800113e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 416;
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001146:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800114a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800114c:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 255;
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 800115e:	22ff      	movs	r2, #255	@ 0xff
 8001160:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001164:	481e      	ldr	r0, [pc, #120]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 8001166:	f006 fb25 	bl	80077b4 <HAL_LTDC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001170:	f000 fc40 	bl	80019f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001178:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800117c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001182:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8001186:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 128;
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 128;
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001194:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001198:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800119a:	2305      	movs	r3, #5
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = framebuf;
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <MX_LTDC_Init+0x104>)
 80011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 416;
 80011a2:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 416;
 80011a8:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 80011ac:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 255;
 80011b4:	23ff      	movs	r3, #255	@ 0xff
 80011b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <MX_LTDC_Init+0xfc>)
 80011c8:	f006 fbc4 	bl	8007954 <HAL_LTDC_ConfigLayer>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80011d2:	f000 fc0f 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3738      	adds	r7, #56	@ 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200aecdc 	.word	0x200aecdc
 80011e4:	40016800 	.word	0x40016800
 80011e8:	200aee48 	.word	0x200aee48

080011ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_RTC_Init+0x94>)
 8001206:	4a1f      	ldr	r2, [pc, #124]	@ (8001284 <MX_RTC_Init+0x98>)
 8001208:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800120a:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <MX_RTC_Init+0x94>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <MX_RTC_Init+0x94>)
 8001212:	227f      	movs	r2, #127	@ 0x7f
 8001214:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_RTC_Init+0x94>)
 8001218:	22ff      	movs	r2, #255	@ 0xff
 800121a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <MX_RTC_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_RTC_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <MX_RTC_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_RTC_Init+0x94>)
 8001230:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001234:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_RTC_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <MX_RTC_Init+0x94>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001242:	480f      	ldr	r0, [pc, #60]	@ (8001280 <MX_RTC_Init+0x94>)
 8001244:	f00b f9ee 	bl	800c624 <HAL_RTC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800124e:	f000 fbd1 	bl	80019f4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4806      	ldr	r0, [pc, #24]	@ (8001280 <MX_RTC_Init+0x94>)
 8001268:	f00b fb0a 	bl	800c880 <HAL_RTCEx_PrivilegeModeSet>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001272:	f000 fbbf 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200aed84 	.word	0x200aed84
 8001284:	46007800 	.word	0x46007800

08001288 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <MX_UART4_Init+0x90>)
 800128e:	4a23      	ldr	r2, [pc, #140]	@ (800131c <MX_UART4_Init+0x94>)
 8001290:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <MX_UART4_Init+0x90>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_UART4_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_UART4_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <MX_UART4_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_UART4_Init+0x90>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_UART4_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_UART4_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <MX_UART4_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_UART4_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <MX_UART4_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012d0:	4811      	ldr	r0, [pc, #68]	@ (8001318 <MX_UART4_Init+0x90>)
 80012d2:	f00b fec9 	bl	800d068 <HAL_UART_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80012dc:	f000 fb8a 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	480d      	ldr	r0, [pc, #52]	@ (8001318 <MX_UART4_Init+0x90>)
 80012e4:	f00c fb16 	bl	800d914 <HAL_UARTEx_SetTxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f000 fb81 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <MX_UART4_Init+0x90>)
 80012f6:	f00c fb4b 	bl	800d990 <HAL_UARTEx_SetRxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001300:	f000 fb78 	bl	80019f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_UART4_Init+0x90>)
 8001306:	f00c facc 	bl	800d8a2 <HAL_UARTEx_DisableFifoMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 fb70 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200aedb4 	.word	0x200aedb4
 800131c:	40004c00 	.word	0x40004c00

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	@ 0x38
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	4bbf      	ldr	r3, [pc, #764]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	4abd      	ldr	r2, [pc, #756]	@ (8001634 <MX_GPIO_Init+0x314>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001346:	4bbb      	ldr	r3, [pc, #748]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001354:	4bb7      	ldr	r3, [pc, #732]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001356:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135a:	4ab6      	ldr	r2, [pc, #728]	@ (8001634 <MX_GPIO_Init+0x314>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001360:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001364:	4bb3      	ldr	r3, [pc, #716]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001372:	4bb0      	ldr	r3, [pc, #704]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001378:	4aae      	ldr	r2, [pc, #696]	@ (8001634 <MX_GPIO_Init+0x314>)
 800137a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800137e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001382:	4bac      	ldr	r3, [pc, #688]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001390:	4ba8      	ldr	r3, [pc, #672]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001396:	4aa7      	ldr	r2, [pc, #668]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013a0:	4ba4      	ldr	r3, [pc, #656]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	4ba1      	ldr	r3, [pc, #644]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013be:	4b9d      	ldr	r3, [pc, #628]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013cc:	4b99      	ldr	r3, [pc, #612]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d2:	4a98      	ldr	r2, [pc, #608]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013d4:	f043 0310 	orr.w	r3, r3, #16
 80013d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013dc:	4b95      	ldr	r3, [pc, #596]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b92      	ldr	r3, [pc, #584]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f0:	4a90      	ldr	r2, [pc, #576]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013fa:	4b8e      	ldr	r3, [pc, #568]	@ (8001634 <MX_GPIO_Init+0x314>)
 80013fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001408:	4b8a      	ldr	r3, [pc, #552]	@ (8001634 <MX_GPIO_Init+0x314>)
 800140a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140e:	4a89      	ldr	r2, [pc, #548]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001410:	f043 0320 	orr.w	r3, r3, #32
 8001414:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001418:	4b86      	ldr	r3, [pc, #536]	@ (8001634 <MX_GPIO_Init+0x314>)
 800141a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001426:	4b83      	ldr	r3, [pc, #524]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142c:	4a81      	ldr	r2, [pc, #516]	@ (8001634 <MX_GPIO_Init+0x314>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001432:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001436:	4b7f      	ldr	r3, [pc, #508]	@ (8001634 <MX_GPIO_Init+0x314>)
 8001438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800143c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f24a 0108 	movw	r1, #40968	@ 0xa008
 800144a:	487b      	ldr	r0, [pc, #492]	@ (8001638 <MX_GPIO_Init+0x318>)
 800144c:	f005 ffe8 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001456:	4879      	ldr	r0, [pc, #484]	@ (800163c <MX_GPIO_Init+0x31c>)
 8001458:	f005 ffe2 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	21c8      	movs	r1, #200	@ 0xc8
 8001460:	4877      	ldr	r0, [pc, #476]	@ (8001640 <MX_GPIO_Init+0x320>)
 8001462:	f005 ffdd 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2107      	movs	r1, #7
 800146a:	4876      	ldr	r0, [pc, #472]	@ (8001644 <MX_GPIO_Init+0x324>)
 800146c:	f005 ffd8 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2104      	movs	r1, #4
 8001474:	4874      	ldr	r0, [pc, #464]	@ (8001648 <MX_GPIO_Init+0x328>)
 8001476:	f005 ffd3 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2104      	movs	r1, #4
 800147e:	4873      	ldr	r0, [pc, #460]	@ (800164c <MX_GPIO_Init+0x32c>)
 8001480:	f005 ffce 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOUCH_RST_Pin|LRA_EN_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 4141 	mov.w	r1, #49408	@ 0xc100
 800148a:	4871      	ldr	r0, [pc, #452]	@ (8001650 <MX_GPIO_Init+0x330>)
 800148c:	f005 ffc8 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8001490:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001496:	2312      	movs	r3, #18
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a2:	2304      	movs	r3, #4
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4869      	ldr	r0, [pc, #420]	@ (8001654 <MX_GPIO_Init+0x334>)
 80014ae:	f005 fddf 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_RST_Pin WL_BT_PWR_EN_Pin FLASH_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin|WL_BT_PWR_EN_Pin|FLASH_RST_Pin;
 80014b2:	f24a 0308 	movw	r3, #40968	@ 0xa008
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	485b      	ldr	r0, [pc, #364]	@ (8001638 <MX_GPIO_Init+0x318>)
 80014cc:	f005 fdd0 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB3 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_14;
 80014d0:	f244 0318 	movw	r3, #16408	@ 0x4018
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014de:	2302      	movs	r3, #2
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC2;
 80014e2:	230c      	movs	r3, #12
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4859      	ldr	r0, [pc, #356]	@ (8001654 <MX_GPIO_Init+0x334>)
 80014ee:	f005 fdbf 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_WAKEUP_Pin GNSS_RST_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin|GNSS_RST_Pin|GPIO3_Pin;
 80014f2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	484c      	ldr	r0, [pc, #304]	@ (800163c <MX_GPIO_Init+0x31c>)
 800150c:	f005 fdb0 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_PPS_Pin ALS_INT_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin|ALS_INT_Pin;
 8001510:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001516:	4b50      	ldr	r3, [pc, #320]	@ (8001658 <MX_GPIO_Init+0x338>)
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	4845      	ldr	r0, [pc, #276]	@ (800163c <MX_GPIO_Init+0x31c>)
 8001526:	f005 fda3 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800152a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800153c:	2307      	movs	r3, #7
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	483d      	ldr	r0, [pc, #244]	@ (800163c <MX_GPIO_Init+0x31c>)
 8001548:	f005 fd92 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800154c:	23c0      	movs	r3, #192	@ 0xc0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001558:	2302      	movs	r3, #2
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800155c:	230b      	movs	r3, #11
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	483a      	ldr	r0, [pc, #232]	@ (8001650 <MX_GPIO_Init+0x330>)
 8001568:	f005 fd82 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 800156c:	2338      	movs	r3, #56	@ 0x38
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800157c:	2307      	movs	r3, #7
 800157e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4832      	ldr	r0, [pc, #200]	@ (8001650 <MX_GPIO_Init+0x330>)
 8001588:	f005 fd72 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC10 PC11 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 800158c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159a:	2302      	movs	r3, #2
 800159c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800159e:	230c      	movs	r3, #12
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	4828      	ldr	r0, [pc, #160]	@ (800164c <MX_GPIO_Init+0x32c>)
 80015aa:	f005 fd61 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_INT_Pin SWIRE_IN_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin|SWIRE_IN_Pin;
 80015ae:	2305      	movs	r3, #5
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	481f      	ldr	r0, [pc, #124]	@ (8001640 <MX_GPIO_Init+0x320>)
 80015c2:	f005 fd55 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_RST_Pin AVDDEN_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin|AVDDEN_Pin|SD_EN_Pin;
 80015c6:	23c8      	movs	r3, #200	@ 0xc8
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4818      	ldr	r0, [pc, #96]	@ (8001640 <MX_GPIO_Init+0x320>)
 80015de:	f005 fd47 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f0:	2302      	movs	r3, #2
 80015f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80015f4:	2308      	movs	r3, #8
 80015f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4815      	ldr	r0, [pc, #84]	@ (8001654 <MX_GPIO_Init+0x334>)
 8001600:	f005 fd36 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001604:	2320      	movs	r3, #32
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001614:	2303      	movs	r3, #3
 8001616:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_GPIO_Init+0x334>)
 8001620:	f005 fd26 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001624:	2304      	movs	r3, #4
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001630:	e014      	b.n	800165c <MX_GPIO_Init+0x33c>
 8001632:	bf00      	nop
 8001634:	46020c00 	.word	0x46020c00
 8001638:	42021c00 	.word	0x42021c00
 800163c:	42021800 	.word	0x42021800
 8001640:	42021000 	.word	0x42021000
 8001644:	42022000 	.word	0x42022000
 8001648:	42021400 	.word	0x42021400
 800164c:	42020800 	.word	0x42020800
 8001650:	42020c00 	.word	0x42020c00
 8001654:	42020400 	.word	0x42020400
 8001658:	10110000 	.word	0x10110000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165c:	2302      	movs	r3, #2
 800165e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001660:	230c      	movs	r3, #12
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	48ba      	ldr	r0, [pc, #744]	@ (8001954 <MX_GPIO_Init+0x634>)
 800166c:	f005 fd00 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = SWIRE_OUT_Pin;
 8001670:	2310      	movs	r3, #16
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001678:	2302      	movs	r3, #2
 800167a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SWIRE_OUT_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001680:	4619      	mov	r1, r3
 8001682:	48b5      	ldr	r0, [pc, #724]	@ (8001958 <MX_GPIO_Init+0x638>)
 8001684:	f005 fcf4 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|MAG_INT_Pin;
 8001688:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168e:	4bb3      	ldr	r3, [pc, #716]	@ (800195c <MX_GPIO_Init+0x63c>)
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169a:	4619      	mov	r1, r3
 800169c:	48ae      	ldr	r0, [pc, #696]	@ (8001958 <MX_GPIO_Init+0x638>)
 800169e:	f005 fce7 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80016b4:	2303      	movs	r3, #3
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016bc:	4619      	mov	r1, r3
 80016be:	48a8      	ldr	r0, [pc, #672]	@ (8001960 <MX_GPIO_Init+0x640>)
 80016c0:	f005 fcd6 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80016c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	48a0      	ldr	r0, [pc, #640]	@ (8001960 <MX_GPIO_Init+0x640>)
 80016de:	f005 fcc7 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f0:	2302      	movs	r3, #2
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC2;
 80016f4:	2308      	movs	r3, #8
 80016f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4898      	ldr	r0, [pc, #608]	@ (8001960 <MX_GPIO_Init+0x640>)
 8001700:	f005 fcb6 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin FLASH_RSTO_Pin FLASH_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|FLASH_RSTO_Pin|FLASH_INT_Pin;
 8001704:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170a:	4b94      	ldr	r3, [pc, #592]	@ (800195c <MX_GPIO_Init+0x63c>)
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4892      	ldr	r0, [pc, #584]	@ (8001964 <MX_GPIO_Init+0x644>)
 800171a:	f005 fca9 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800171e:	2303      	movs	r3, #3
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001722:	2312      	movs	r3, #18
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 800172e:	2302      	movs	r3, #2
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001736:	4619      	mov	r1, r3
 8001738:	488b      	ldr	r0, [pc, #556]	@ (8001968 <MX_GPIO_Init+0x648>)
 800173a:	f005 fc99 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DEV_WAKE_Pin BT_EN_Pin WL_EN_Pin */
  GPIO_InitStruct.Pin = BT_DEV_WAKE_Pin|BT_EN_Pin|WL_EN_Pin;
 800173e:	2307      	movs	r3, #7
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	4885      	ldr	r0, [pc, #532]	@ (800196c <MX_GPIO_Init+0x64c>)
 8001756:	f005 fc8b 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = BT_HOST_WAKE_Pin;
 800175a:	2308      	movs	r3, #8
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	4b7f      	ldr	r3, [pc, #508]	@ (800195c <MX_GPIO_Init+0x63c>)
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BT_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	487f      	ldr	r0, [pc, #508]	@ (800196c <MX_GPIO_Init+0x64c>)
 800176e:	f005 fc7f 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin;
 8001772:	2304      	movs	r3, #4
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4877      	ldr	r0, [pc, #476]	@ (8001968 <MX_GPIO_Init+0x648>)
 800178a:	f005 fc71 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin;
 800178e:	2304      	movs	r3, #4
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	486f      	ldr	r0, [pc, #444]	@ (8001964 <MX_GPIO_Init+0x644>)
 80017a6:	f005 fc63 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_HOST_WAKE_Pin */
  GPIO_InitStruct.Pin = WL_HOST_WAKE_Pin;
 80017aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017b0:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <MX_GPIO_Init+0x63c>)
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(WL_HOST_WAKE_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	486c      	ldr	r0, [pc, #432]	@ (8001970 <MX_GPIO_Init+0x650>)
 80017c0:	f005 fc56 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80017c4:	f240 4304 	movw	r3, #1028	@ 0x404
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017d6:	230a      	movs	r3, #10
 80017d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017de:	4619      	mov	r1, r3
 80017e0:	4864      	ldr	r0, [pc, #400]	@ (8001974 <MX_GPIO_Init+0x654>)
 80017e2:	f005 fc45 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 80017e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017ec:	2311      	movs	r3, #17
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4855      	ldr	r0, [pc, #340]	@ (8001954 <MX_GPIO_Init+0x634>)
 8001800:	f005 fc36 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH12 PH11 PH10 PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9;
 8001804:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001816:	2305      	movs	r3, #5
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	4853      	ldr	r0, [pc, #332]	@ (8001970 <MX_GPIO_Init+0x650>)
 8001822:	f005 fc25 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001826:	2301      	movs	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001836:	2305      	movs	r3, #5
 8001838:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	484c      	ldr	r0, [pc, #304]	@ (8001974 <MX_GPIO_Init+0x654>)
 8001842:	f005 fc15 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001846:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001858:	2303      	movs	r3, #3
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001860:	4619      	mov	r1, r3
 8001862:	483d      	ldr	r0, [pc, #244]	@ (8001958 <MX_GPIO_Init+0x638>)
 8001864:	f005 fc04 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE12 PE14 PE13 PE11
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11
 8001868:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800187a:	230a      	movs	r3, #10
 800187c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001882:	4619      	mov	r1, r3
 8001884:	4834      	ldr	r0, [pc, #208]	@ (8001958 <MX_GPIO_Init+0x638>)
 8001886:	f005 fbf3 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800188a:	2303      	movs	r3, #3
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188e:	2312      	movs	r3, #18
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800189a:	2304      	movs	r3, #4
 800189c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a2:	4619      	mov	r1, r3
 80018a4:	482f      	ldr	r0, [pc, #188]	@ (8001964 <MX_GPIO_Init+0x644>)
 80018a6:	f005 fbe3 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 80018aa:	23e0      	movs	r3, #224	@ 0xe0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ba:	2305      	movs	r3, #5
 80018bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c2:	4619      	mov	r1, r3
 80018c4:	4826      	ldr	r0, [pc, #152]	@ (8001960 <MX_GPIO_Init+0x640>)
 80018c6:	f005 fbd3 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 80018ca:	2301      	movs	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018da:	4619      	mov	r1, r3
 80018dc:	4826      	ldr	r0, [pc, #152]	@ (8001978 <MX_GPIO_Init+0x658>)
 80018de:	f005 fbc7 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80018e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e8:	2312      	movs	r3, #18
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018fc:	4619      	mov	r1, r3
 80018fe:	4815      	ldr	r0, [pc, #84]	@ (8001954 <MX_GPIO_Init+0x634>)
 8001900:	f005 fbb6 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_INT_Pin TOUCH_INT_Pin HR_INT_Pin */
  GPIO_InitStruct.Pin = PWR_INT_Pin|TOUCH_INT_Pin|HR_INT_Pin;
 8001904:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_GPIO_Init+0x63c>)
 800190c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	480e      	ldr	r0, [pc, #56]	@ (8001954 <MX_GPIO_Init+0x634>)
 800191a:	f005 fba9 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800191e:	2304      	movs	r3, #4
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	480b      	ldr	r0, [pc, #44]	@ (8001960 <MX_GPIO_Init+0x640>)
 8001932:	f005 fb9d 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001936:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193c:	2312      	movs	r3, #18
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001948:	2304      	movs	r3, #4
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001950:	4619      	mov	r1, r3
 8001952:	e013      	b.n	800197c <MX_GPIO_Init+0x65c>
 8001954:	42020c00 	.word	0x42020c00
 8001958:	42021000 	.word	0x42021000
 800195c:	10110000 	.word	0x10110000
 8001960:	42020000 	.word	0x42020000
 8001964:	42020800 	.word	0x42020800
 8001968:	42021400 	.word	0x42021400
 800196c:	42022000 	.word	0x42022000
 8001970:	42021c00 	.word	0x42021c00
 8001974:	42020400 	.word	0x42020400
 8001978:	42021800 	.word	0x42021800
 800197c:	4811      	ldr	r0, [pc, #68]	@ (80019c4 <MX_GPIO_Init+0x6a4>)
 800197e:	f005 fb77 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LRA_EN_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin|PWR_ENCHG_Pin;
 8001982:	f44f 4382 	mov.w	r3, #16640	@ 0x4100
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <MX_GPIO_Init+0x6a8>)
 800199c:	f005 fb68 	bl	8007070 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80019a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <MX_GPIO_Init+0x6ac>)
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <MX_GPIO_Init+0x6a4>)
 80019b6:	f005 fb5b 	bl	8007070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ba:	bf00      	nop
 80019bc:	3738      	adds	r7, #56	@ 0x38
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	42020400 	.word	0x42020400
 80019c8:	42020c00 	.word	0x42020c00
 80019cc:	10110000 	.word	0x10110000

080019d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019e2:	f000 fe73 	bl	80026cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40001000 	.word	0x40001000

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <Error_Handler+0x8>

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <HAL_MspInit+0x70>)
 8001a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a0c:	4a18      	ldr	r2, [pc, #96]	@ (8001a70 <HAL_MspInit+0x70>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <HAL_MspInit+0x70>)
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001a24:	f006 fa82 	bl	8007f2c <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2009      	movs	r0, #9
 8001a2e:	f002 fedf 	bl	80047f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a32:	2009      	movs	r0, #9
 8001a34:	f002 fef6 	bl	8004824 <HAL_NVIC_EnableIRQ>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001a38:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <HAL_MspInit+0x70>)
 8001a3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <HAL_MspInit+0x70>)
 8001a40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a44:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_MspInit+0x70>)
 8001a4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 fe7c 	bl	8002754 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001a5c:	f000 fea2 	bl	80027a4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f000 fe8b 	bl	800277c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	46020c00 	.word	0x46020c00

08001a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0de      	sub	sp, #376	@ 0x178
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a7e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a82:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a94:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001a98:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	23e0      	movs	r3, #224	@ 0xe0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	f02a fa8f 	bl	802bfc6 <memset>
  if(hadc->Instance==ADC1)
 8001aa8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001aac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a9f      	ldr	r2, [pc, #636]	@ (8001d34 <HAL_ADC_MspInit+0x2c0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	f040 8136 	bne.w	8001d28 <HAL_ADC_MspInit+0x2b4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001abc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ac0:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 8001ac4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001ad0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ad4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ad8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001adc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	f107 0318 	add.w	r3, r7, #24
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f007 fd41 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_ADC_MspInit+0x80>
    {
      Error_Handler();
 8001af0:	f7ff ff80 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001af4:	4b90      	ldr	r3, [pc, #576]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001afa:	4a8f      	ldr	r2, [pc, #572]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001afc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b04:	4b8c      	ldr	r3, [pc, #560]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b0a:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001b0e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b12:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b1c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001b20:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b85      	ldr	r3, [pc, #532]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b28:	4a83      	ldr	r2, [pc, #524]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b32:	4b81      	ldr	r3, [pc, #516]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b38:	f003 0204 	and.w	r2, r3, #4
 8001b3c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b40:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001b4e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b79      	ldr	r3, [pc, #484]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b56:	4a78      	ldr	r2, [pc, #480]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b60:	4b75      	ldr	r3, [pc, #468]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b6e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b78:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001b7c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b84:	4a6c      	ldr	r2, [pc, #432]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d38 <HAL_ADC_MspInit+0x2c4>)
 8001b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b94:	f003 0202 	and.w	r2, r3, #2
 8001b98:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001b9c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001ba6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001baa:	681b      	ldr	r3, [r3, #0]
    PC3     ------> ADC1_IN4
    PA4     ------> ADC1_IN9
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ELVSS_ADC_Pin;
 8001bac:	2308      	movs	r3, #8
 8001bae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(ELVSS_ADC_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	485d      	ldr	r0, [pc, #372]	@ (8001d3c <HAL_ADC_MspInit+0x2c8>)
 8001bc6:	f005 fa53 	bl	8007070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ELVDD_ADC_Pin|AVDD_ADC_Pin;
 8001bca:	2318      	movs	r3, #24
 8001bcc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001be0:	4619      	mov	r1, r3
 8001be2:	4857      	ldr	r0, [pc, #348]	@ (8001d40 <HAL_ADC_MspInit+0x2cc>)
 8001be4:	f005 fa44 	bl	8007070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISYS_ADC_Pin;
 8001be8:	2302      	movs	r3, #2
 8001bea:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    HAL_GPIO_Init(ISYS_ADC_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4850      	ldr	r0, [pc, #320]	@ (8001d44 <HAL_ADC_MspInit+0x2d0>)
 8001c02:	f005 fa35 	bl	8007070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001c06:	2321      	movs	r3, #33	@ 0x21
 8001c08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001c30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.Init.SrcBurstLength = 1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.Init.DestBurstLength = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001c44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8001c6a:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001c6e:	4936      	ldr	r1, [pc, #216]	@ (8001d48 <HAL_ADC_MspInit+0x2d4>)
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fc17 	bl	80054a4 <HAL_DMAEx_List_BuildNode>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_ADC_MspInit+0x20c>
    {
      Error_Handler();
 8001c7c:	f7ff feba 	bl	80019f4 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8001c80:	4a31      	ldr	r2, [pc, #196]	@ (8001d48 <HAL_ADC_MspInit+0x2d4>)
 8001c82:	2100      	movs	r1, #0
 8001c84:	4831      	ldr	r0, [pc, #196]	@ (8001d4c <HAL_ADC_MspInit+0x2d8>)
 8001c86:	f003 fc23 	bl	80054d0 <HAL_DMAEx_List_InsertNode>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_ADC_MspInit+0x220>
    {
      Error_Handler();
 8001c90:	f7ff feb0 	bl	80019f4 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8001c94:	482d      	ldr	r0, [pc, #180]	@ (8001d4c <HAL_ADC_MspInit+0x2d8>)
 8001c96:	f003 fce4 	bl	8005662 <HAL_DMAEx_List_SetCircularMode>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_ADC_MspInit+0x230>
    {
      Error_Handler();
 8001ca0:	f7ff fea8 	bl	80019f4 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8001d54 <HAL_ADC_MspInit+0x2e0>)
 8001ca8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001cbc:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001cc2:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cc4:	2281      	movs	r2, #129	@ 0x81
 8001cc6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001cc8:	4821      	ldr	r0, [pc, #132]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cca:	f003 fabf 	bl	800524c <HAL_DMAEx_List_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_ADC_MspInit+0x264>
    {
      Error_Handler();
 8001cd4:	f7ff fe8e 	bl	80019f4 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8001cd8:	491c      	ldr	r1, [pc, #112]	@ (8001d4c <HAL_ADC_MspInit+0x2d8>)
 8001cda:	481d      	ldr	r0, [pc, #116]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cdc:	f003 fd22 	bl	8005724 <HAL_DMAEx_List_LinkQ>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_ADC_MspInit+0x276>
    {
      Error_Handler();
 8001ce6:	f7ff fe85 	bl	80019f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8001cea:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001cee:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cf6:	671a      	str	r2, [r3, #112]	@ 0x70
 8001cf8:	4a15      	ldr	r2, [pc, #84]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001cfa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001cfe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001d06:	2110      	movs	r1, #16
 8001d08:	4811      	ldr	r0, [pc, #68]	@ (8001d50 <HAL_ADC_MspInit+0x2dc>)
 8001d0a:	f003 f844 	bl	8004d96 <HAL_DMA_ConfigChannelAttributes>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_ADC_MspInit+0x2a4>
    {
      Error_Handler();
 8001d14:	f7ff fe6e 	bl	80019f4 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2025      	movs	r0, #37	@ 0x25
 8001d1e:	f002 fd67 	bl	80047f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d22:	2025      	movs	r0, #37	@ 0x25
 8001d24:	f002 fd7e 	bl	8004824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	42028000 	.word	0x42028000
 8001d38:	46020c00 	.word	0x46020c00
 8001d3c:	42020800 	.word	0x42020800
 8001d40:	42020000 	.word	0x42020000
 8001d44:	42020400 	.word	0x42020400
 8001d48:	200aeb18 	.word	0x200aeb18
 8001d4c:	200aeb3c 	.word	0x200aeb3c
 8001d50:	200aeb54 	.word	0x200aeb54
 8001d54:	40020050 	.word	0x40020050

08001d58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_CRC_MspInit+0x3c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10e      	bne.n	8001d88 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_CRC_MspInit+0x40>)
 8001d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d70:	4a09      	ldr	r2, [pc, #36]	@ (8001d98 <HAL_CRC_MspInit+0x40>)
 8001d72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <HAL_CRC_MspInit+0x40>)
 8001d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40023000 	.word	0x40023000
 8001d98:	46020c00 	.word	0x46020c00

08001d9c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0e      	ldr	r2, [pc, #56]	@ (8001de4 <HAL_DMA2D_MspInit+0x48>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d116      	bne.n	8001ddc <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_DMA2D_MspInit+0x4c>)
 8001db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db4:	4a0c      	ldr	r2, [pc, #48]	@ (8001de8 <HAL_DMA2D_MspInit+0x4c>)
 8001db6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_DMA2D_MspInit+0x4c>)
 8001dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2076      	movs	r0, #118	@ 0x76
 8001dd2:	f002 fd0d 	bl	80047f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001dd6:	2076      	movs	r0, #118	@ 0x76
 8001dd8:	f002 fd24 	bl	8004824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	4002b000 	.word	0x4002b000
 8001de8:	46020c00 	.word	0x46020c00

08001dec <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0c2      	sub	sp, #264	@ 0x108
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001df6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dfa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	22e0      	movs	r2, #224	@ 0xe0
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f02a f8d6 	bl	802bfc6 <memset>
  if(hdsi->Instance==DSI)
 8001e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001e1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a38      	ldr	r2, [pc, #224]	@ (8001f08 <HAL_DSI_MspInit+0x11c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d168      	bne.n	8001efe <HAL_DSI_MspInit+0x112>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0304 	mov.w	r3, #4
 8001e34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_PLL3;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLL3.PLL3M = 4;
 8001e42:	2304      	movs	r3, #4
 8001e44:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInit.PLL3.PLL3N = 125;
 8001e46:	237d      	movs	r3, #125	@ 0x7d
 8001e48:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInit.PLL3.PLL3P = 8;
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.PLL3.PLL3Q = 2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInit.PLL3.PLL3R = 8;
 8001e52:	2308      	movs	r3, #8
 8001e54:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLL3.PLL3FRACN = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVP;
 8001e5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f007 fb7f 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_DSI_MspInit+0x8c>
    {
      Error_Handler();
 8001e74:	f7ff fdbe 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001e78:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_DSI_MspInit+0x120>)
 8001e7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e7e:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_DSI_MspInit+0x120>)
 8001e80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e84:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_DSI_MspInit+0x120>)
 8001e8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_DSI_MspInit+0x120>)
 8001e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f0c <HAL_DSI_MspInit+0x120>)
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ea6:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_DSI_MspInit+0x120>)
 8001ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eac:	f003 0202 	and.w	r2, r3, #2
 8001eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001eb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ebe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ec2:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_CKP     ------> DSIHOST_CKP
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8001edc:	230b      	movs	r3, #11
 8001ede:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4809      	ldr	r0, [pc, #36]	@ (8001f10 <HAL_DSI_MspInit+0x124>)
 8001eea:	f005 f8c1 	bl	8007070 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2089      	movs	r0, #137	@ 0x89
 8001ef4:	f002 fc7c 	bl	80047f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001ef8:	2089      	movs	r0, #137	@ 0x89
 8001efa:	f002 fc93 	bl	8004824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40016c00 	.word	0x40016c00
 8001f0c:	46020c00 	.word	0x46020c00
 8001f10:	42020400 	.word	0x42020400

08001f14 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <HAL_GPU2D_MspInit+0x5c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d11d      	bne.n	8001f62 <HAL_GPU2D_MspInit+0x4e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_GPU2D_MspInit+0x60>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <HAL_GPU2D_MspInit+0x60>)
 8001f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <HAL_GPU2D_MspInit+0x60>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <HAL_GPU2D_MspInit+0x60>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_GPU2D_MspInit+0x60>)
 8001f4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <HAL_GPU2D_MspInit+0x60>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	4002f000 	.word	0x4002f000
 8001f74:	46020c00 	.word	0x46020c00

08001f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0c2      	sub	sp, #264	@ 0x108
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f86:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	22e0      	movs	r2, #224	@ 0xe0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f02a f810 	bl	802bfc6 <memset>
  if(hi2c->Instance==I2C5)
 8001fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <HAL_I2C_MspInit+0xe8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d14d      	bne.n	8002054 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8001fb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c5ClockSelection = RCC_I2C5CLKSOURCE_PCLK1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f007 facc 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001fda:	f7ff fd0b 	bl	80019f4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fde:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <HAL_I2C_MspInit+0xec>)
 8001fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8002064 <HAL_I2C_MspInit+0xec>)
 8001fe6:	f043 0308 	orr.w	r3, r3, #8
 8001fea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HAL_I2C_MspInit+0xec>)
 8001ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PD0     ------> I2C5_SDA
    PD1     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002002:	2312      	movs	r3, #18
 8002004:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8002014:	2304      	movs	r3, #4
 8002016:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800201e:	4619      	mov	r1, r3
 8002020:	4811      	ldr	r0, [pc, #68]	@ (8002068 <HAL_I2C_MspInit+0xf0>)
 8002022:	f005 f825 	bl	8007070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8002026:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <HAL_I2C_MspInit+0xec>)
 8002028:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800202c:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <HAL_I2C_MspInit+0xec>)
 800202e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002032:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_I2C_MspInit+0xec>)
 8002038:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800203c:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002044:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800204e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002052:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40009800 	.word	0x40009800
 8002064:	46020c00 	.word	0x46020c00
 8002068:	42020c00 	.word	0x42020c00

0800206c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0bc      	sub	sp, #240	@ 0xf0
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	22e0      	movs	r2, #224	@ 0xe0
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f029 ffa2 	bl	802bfc6 <memset>
  if(hltdc->Instance==LTDC)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1e      	ldr	r2, [pc, #120]	@ (8002100 <HAL_LTDC_MspInit+0x94>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d135      	bne.n	80020f8 <HAL_LTDC_MspInit+0x8c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0302 	mov.w	r3, #2
 8002094:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002098:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800209c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80020a0:	2303      	movs	r3, #3
 80020a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 10;
 80020a8:	230a      	movs	r3, #10
 80020aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 80020b0:	2302      	movs	r3, #2
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2R = 8;
 80020b4:	2308      	movs	r3, #8
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80020b8:	230c      	movs	r3, #12
 80020ba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80020c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4618      	mov	r0, r3
 80020cc:	f007 fa4e 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80020d6:	f7ff fc8d 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020da:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <HAL_LTDC_MspInit+0x98>)
 80020dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020e0:	4a08      	ldr	r2, [pc, #32]	@ (8002104 <HAL_LTDC_MspInit+0x98>)
 80020e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020e6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_LTDC_MspInit+0x98>)
 80020ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	37f0      	adds	r7, #240	@ 0xf0
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40016800 	.word	0x40016800
 8002104:	46020c00 	.word	0x46020c00

08002108 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0bc      	sub	sp, #240	@ 0xf0
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	22e0      	movs	r2, #224	@ 0xe0
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f029 ff54 	bl	802bfc6 <memset>
  if(hrtc->Instance==RTC)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1d      	ldr	r2, [pc, #116]	@ (8002198 <HAL_RTC_MspInit+0x90>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d132      	bne.n	800218e <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002128:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002134:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	4618      	mov	r0, r3
 8002142:	f007 fa13 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800214c:	f7ff fc52 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_RTC_MspInit+0x94>)
 8002152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002156:	4a11      	ldr	r2, [pc, #68]	@ (800219c <HAL_RTC_MspInit+0x94>)
 8002158:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800215c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002160:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <HAL_RTC_MspInit+0x94>)
 8002162:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002166:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <HAL_RTC_MspInit+0x94>)
 8002168:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800216c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002170:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <HAL_RTC_MspInit+0x94>)
 8002172:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <HAL_RTC_MspInit+0x94>)
 8002180:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002184:	4a05      	ldr	r2, [pc, #20]	@ (800219c <HAL_RTC_MspInit+0x94>)
 8002186:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800218a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	37f0      	adds	r7, #240	@ 0xf0
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	46007800 	.word	0x46007800
 800219c:	46020c00 	.word	0x46020c00

080021a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0c2      	sub	sp, #264	@ 0x108
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021ae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	22e0      	movs	r2, #224	@ 0xe0
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f029 fefc 	bl	802bfc6 <memset>
  if(huart->Instance==UART4)
 80021ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2a      	ldr	r2, [pc, #168]	@ (8002284 <HAL_UART_MspInit+0xe4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d14c      	bne.n	800227a <HAL_UART_MspInit+0xda>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80021e0:	f04f 0208 	mov.w	r2, #8
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f0:	f107 0310 	add.w	r3, r7, #16
 80021f4:	4618      	mov	r0, r3
 80021f6:	f007 f9b9 	bl	800956c <HAL_RCCEx_PeriphCLKConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8002200:	f7ff fbf8 	bl	80019f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002204:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_UART_MspInit+0xe8>)
 8002206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800220a:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_UART_MspInit+0xe8>)
 800220c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002210:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002214:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <HAL_UART_MspInit+0xe8>)
 8002216:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800221a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_UART_MspInit+0xe8>)
 8002224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002228:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_UART_MspInit+0xe8>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002232:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <HAL_UART_MspInit+0xe8>)
 8002234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002238:	f003 0201 	and.w	r2, r3, #1
 800223c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002240:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800224a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800224e:	681b      	ldr	r3, [r3, #0]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002250:	2303      	movs	r3, #3
 8002252:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002268:	2308      	movs	r3, #8
 800226a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	@ (800228c <HAL_UART_MspInit+0xec>)
 8002276:	f004 fefb 	bl	8007070 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800227a:	bf00      	nop
 800227c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40004c00 	.word	0x40004c00
 8002288:	46020c00 	.word	0x46020c00
 800228c:	42020000 	.word	0x42020000

08002290 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08e      	sub	sp, #56	@ 0x38
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022a0:	4b2e      	ldr	r3, [pc, #184]	@ (800235c <HAL_InitTick+0xcc>)
 80022a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022a6:	4a2d      	ldr	r2, [pc, #180]	@ (800235c <HAL_InitTick+0xcc>)
 80022a8:	f043 0310 	orr.w	r3, r3, #16
 80022ac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022b0:	4b2a      	ldr	r3, [pc, #168]	@ (800235c <HAL_InitTick+0xcc>)
 80022b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022be:	f107 0210 	add.w	r2, r7, #16
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f007 f865 	bl	8009398 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022ce:	f007 f827 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 80022d2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d6:	4a22      	ldr	r2, [pc, #136]	@ (8002360 <HAL_InitTick+0xd0>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	3b01      	subs	r3, #1
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <HAL_InitTick+0xd4>)
 80022e4:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <HAL_InitTick+0xd8>)
 80022e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <HAL_InitTick+0xd4>)
 80022ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002364 <HAL_InitTick+0xd4>)
 80022f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_InitTick+0xd4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fc:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_InitTick+0xd4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002302:	4818      	ldr	r0, [pc, #96]	@ (8002364 <HAL_InitTick+0xd4>)
 8002304:	f00a faea 	bl	800c8dc <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800230e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002312:	2b00      	cmp	r3, #0
 8002314:	d118      	bne.n	8002348 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002316:	4813      	ldr	r0, [pc, #76]	@ (8002364 <HAL_InitTick+0xd4>)
 8002318:	f00a fb42 	bl	800c9a0 <HAL_TIM_Base_Start_IT>
 800231c:	4603      	mov	r3, r0
 800231e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8002322:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10e      	bne.n	8002348 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d808      	bhi.n	8002342 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	2031      	movs	r0, #49	@ 0x31
 8002336:	f002 fa5b 	bl	80047f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800233a:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <HAL_InitTick+0xdc>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e002      	b.n	8002348 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002348:	2031      	movs	r0, #49	@ 0x31
 800234a:	f002 fa6b 	bl	8004824 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800234e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002352:	4618      	mov	r0, r3
 8002354:	3738      	adds	r7, #56	@ 0x38
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	46020c00 	.word	0x46020c00
 8002360:	431bde83 	.word	0x431bde83
 8002364:	20157e48 	.word	0x20157e48
 8002368:	40001000 	.word	0x40001000
 800236c:	20000008 	.word	0x20000008

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002374:	f007 f858 	bl	8009428 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <NMI_Handler+0x8>

0800237c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <MemManage_Handler+0x4>

0800238c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <BusFault_Handler+0x4>

08002394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <UsageFault_Handler+0x4>

0800239c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <RCC_IRQHandler>:

/**
  * @brief This function handles RCC non-secure global interrupt.
  */
void RCC_IRQHandler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <GPDMA1_Channel0_IRQHandler+0x10>)
 80023be:	f002 fb89 	bl	8004ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200aeb54 	.word	0x200aeb54

080023cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <ADC1_2_IRQHandler+0x10>)
 80023d2:	f001 f81d 	bl	8003410 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200aea8c 	.word	0x200aea8c

080023e0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023e4:	4802      	ldr	r0, [pc, #8]	@ (80023f0 <TIM6_IRQHandler+0x10>)
 80023e6:	f00a fb7b 	bl	800cae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20157e48 	.word	0x20157e48

080023f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023f8:	4802      	ldr	r0, [pc, #8]	@ (8002404 <DMA2D_IRQHandler+0x10>)
 80023fa:	f002 fd69 	bl	8004ed0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200aebf0 	.word	0x200aebf0

08002408 <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800240c:	4802      	ldr	r0, [pc, #8]	@ (8002418 <DSI_IRQHandler+0x10>)
 800240e:	f004 f957 	bl	80066c0 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200aec58 	.word	0x200aec58

0800241c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return 1;
 8002420:	2301      	movs	r3, #1
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_kill>:

int _kill(int pid, int sig)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002436:	f029 fe69 	bl	802c10c <__errno>
 800243a:	4603      	mov	r3, r0
 800243c:	2216      	movs	r2, #22
 800243e:	601a      	str	r2, [r3, #0]
  return -1;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_exit>:

void _exit (int status)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ffe7 	bl	800242c <_kill>
  while (1) {}    /* Make sure we hang here */
 800245e:	bf00      	nop
 8002460:	e7fd      	b.n	800245e <_exit+0x12>

08002462 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e00a      	b.n	800248a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002474:	f3af 8000 	nop.w
 8002478:	4601      	mov	r1, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	60ba      	str	r2, [r7, #8]
 8002480:	b2ca      	uxtb	r2, r1
 8002482:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	dbf0      	blt.n	8002474 <_read+0x12>
  }

  return len;
 8002492:	687b      	ldr	r3, [r7, #4]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e009      	b.n	80024c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	60ba      	str	r2, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3301      	adds	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	dbf1      	blt.n	80024ae <_write+0x12>
  }
  return len;
 80024ca:	687b      	ldr	r3, [r7, #4]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_close>:

int _close(int file)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024fc:	605a      	str	r2, [r3, #4]
  return 0;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <_isatty>:

int _isatty(int file)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002544:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <_sbrk+0x5c>)
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <_sbrk+0x60>)
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002550:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <_sbrk+0x64>)
 800255a:	4a12      	ldr	r2, [pc, #72]	@ (80025a4 <_sbrk+0x68>)
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255e:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d207      	bcs.n	800257c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800256c:	f029 fdce 	bl	802c10c <__errno>
 8002570:	4603      	mov	r3, r0
 8002572:	220c      	movs	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e009      	b.n	8002590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800257c:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <_sbrk+0x64>)
 800258c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258e:	68fb      	ldr	r3, [r7, #12]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	202f0000 	.word	0x202f0000
 800259c:	00000400 	.word	0x00000400
 80025a0:	20157e94 	.word	0x20157e94
 80025a4:	2015a528 	.word	0x2015a528

080025a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025ac:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <SystemInit+0x68>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b2:	4a17      	ldr	r2, [pc, #92]	@ (8002610 <SystemInit+0x68>)
 80025b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80025bc:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <SystemInit+0x6c>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80025c2:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <SystemInit+0x6c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <SystemInit+0x6c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80025ce:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <SystemInit+0x6c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80025d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <SystemInit+0x6c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002614 <SystemInit+0x6c>)
 80025da:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80025de:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80025e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <SystemInit+0x6c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <SystemInit+0x6c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <SystemInit+0x6c>)
 80025f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <SystemInit+0x6c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <SystemInit+0x68>)
 80025fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002602:	609a      	str	r2, [r3, #8]
  #endif
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00
 8002614:	46020c00 	.word	0x46020c00

08002618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002618:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002650 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800261c:	f7ff ffc4 	bl	80025a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002620:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002622:	e003      	b.n	800262c <LoopCopyDataInit>

08002624 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002626:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002628:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800262a:	3104      	adds	r1, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800262c:	480a      	ldr	r0, [pc, #40]	@ (8002658 <LoopForever+0xa>)
	ldr	r3, =_edata
 800262e:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002630:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002632:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002634:	d3f6      	bcc.n	8002624 <CopyDataInit>
	ldr	r2, =_sbss
 8002636:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002638:	e002      	b.n	8002640 <LoopFillZerobss>

0800263a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800263a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800263c:	f842 3b04 	str.w	r3, [r2], #4

08002640 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <LoopForever+0x16>)
	cmp	r2, r3
 8002642:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002644:	d3f9      	bcc.n	800263a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002646:	f029 fd67 	bl	802c118 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800264a:	f7fe f96d 	bl	8000928 <main>

0800264e <LoopForever>:

LoopForever:
    b LoopForever
 800264e:	e7fe      	b.n	800264e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002650:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002654:	08030afc 	.word	0x08030afc
	ldr	r0, =_sdata
 8002658:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800265c:	200001b8 	.word	0x200001b8
	ldr	r2, =_sbss
 8002660:	200ab9b8 	.word	0x200ab9b8
	ldr	r3, = _ebss
 8002664:	2015a524 	.word	0x2015a524

08002668 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC4_IRQHandler>
	...

0800266c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_Init+0x50>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a11      	ldr	r2, [pc, #68]	@ (80026bc <HAL_Init+0x50>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f002 f8ac 	bl	80047da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002682:	f006 fd31 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <HAL_Init+0x54>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	490c      	ldr	r1, [pc, #48]	@ (80026c4 <HAL_Init+0x58>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <HAL_Init+0x5c>)
 800269a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800269c:	2004      	movs	r0, #4
 800269e:	f002 f8cf 	bl	8004840 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026a2:	200f      	movs	r0, #15
 80026a4:	f7ff fdf4 	bl	8002290 <HAL_InitTick>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e002      	b.n	80026b8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026b2:	f7ff f9a5 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40022000 	.word	0x40022000
 80026c0:	46020c00 	.word	0x46020c00
 80026c4:	0802d924 	.word	0x0802d924
 80026c8:	20000004 	.word	0x20000004

080026cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026d0:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_IncTick+0x20>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_IncTick+0x24>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <HAL_IncTick+0x24>)
 80026de:	6013      	str	r3, [r2, #0]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	20157e98 	.word	0x20157e98

080026f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return uwTick;
 80026f8:	4b03      	ldr	r3, [pc, #12]	@ (8002708 <HAL_GetTick+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20157e98 	.word	0x20157e98

0800270c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff ffee 	bl	80026f4 <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d005      	beq.n	8002732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_Delay+0x44>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002732:	bf00      	nop
 8002734:	f7ff ffde 	bl	80026f4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d8f7      	bhi.n	8002734 <HAL_Delay+0x28>
  {
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000000c 	.word	0x2000000c

08002754 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002764:	4904      	ldr	r1, [pc, #16]	@ (8002778 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	46007400 	.word	0x46007400

0800277c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 0202 	bic.w	r2, r3, #2
 800278c:	4904      	ldr	r1, [pc, #16]	@ (80027a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	46007400 	.word	0x46007400

080027a4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80027aa:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a0e      	ldr	r2, [pc, #56]	@ (80027e8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027b6:	f7ff ff9d 	bl	80026f4 <HAL_GetTick>
 80027ba:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80027bc:	e008      	b.n	80027d0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80027be:	f7ff ff99 	bl	80026f4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b0a      	cmp	r3, #10
 80027ca:	d901      	bls.n	80027d0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e006      	b.n	80027de <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	46007400 	.word	0x46007400

080027ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <LL_ADC_SetResolution+0x3c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d104      	bne.n	8002874 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3b01      	subs	r3, #1
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f023 020c 	bic.w	r2, r3, #12
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	46021000 	.word	0x46021000

08002894 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3360      	adds	r3, #96	@ 0x60
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	430b      	orrs	r3, r1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3360      	adds	r3, #96	@ 0x60
 80028e4:	461a      	mov	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002902:	b480      	push	{r7}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3360      	adds	r3, #96	@ 0x60
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	431a      	orrs	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3360      	adds	r3, #96	@ 0x60
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800296e:	b480      	push	{r7}
 8002970:	b087      	sub	sp, #28
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3360      	adds	r3, #96	@ 0x60
 800297e:	461a      	mov	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	431a      	orrs	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	2a00      	cmp	r2, #0
 80029ce:	d002      	beq.n	80029d6 <LL_ADC_SetGainCompensation+0x32>
 80029d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029d4:	e000      	b.n	80029d8 <LL_ADC_SetGainCompensation+0x34>
 80029d6:	2200      	movs	r2, #0
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2107      	movs	r1, #7
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	431a      	orrs	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	@ 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b0c <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d020      	beq.n	8002aa6 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3330      	adds	r3, #48	@ 0x30
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	4413      	add	r3, r2
 8002a76:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	211f      	movs	r1, #31
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	f003 011f 	and.w	r1, r3, #31
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002aa4:	e02b      	b.n	8002afe <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	210f      	movs	r1, #15
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	401a      	ands	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0e9b      	lsrs	r3, r3, #26
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	e010      	b.n	8002af0 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	613b      	str	r3, [r7, #16]
  return result;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	f001 011f 	and.w	r1, r1, #31
 8002af6:	408b      	lsls	r3, r1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	46021000 	.word	0x46021000

08002b10 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	e015      	b.n	8002b60 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	60fb      	str	r3, [r7, #12]
  return result;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002b4a:	2320      	movs	r3, #32
 8002b4c:	e003      	b.n	8002b56 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	401a      	ands	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b08b      	sub	sp, #44	@ 0x2c
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8002cac <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d042      	beq.n	8002c82 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <LL_ADC_SetChannelSamplingTime+0x28>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	f003 021f 	and.w	r2, r3, #31
 8002c0e:	e011      	b.n	8002c34 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	617b      	str	r3, [r7, #20]
  return result;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002c26:	2320      	movs	r3, #32
 8002c28:	e003      	b.n	8002c32 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	0e5b      	lsrs	r3, r3, #25
 8002c38:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	1ad2      	subs	r2, r2, r3
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3314      	adds	r3, #20
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0e5b      	lsrs	r3, r3, #25
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	4413      	add	r3, r2
 8002c60:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	2107      	movs	r1, #7
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	401a      	ands	r2, r3
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002c80:	e00e      	b.n	8002ca0 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	401a      	ands	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	0219      	lsls	r1, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	400b      	ands	r3, r1
 8002c96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	615a      	str	r2, [r3, #20]
}
 8002ca0:	bf00      	nop
 8002ca2:	372c      	adds	r7, #44	@ 0x2c
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	46021000 	.word	0x46021000

08002cb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0318 	and.w	r3, r3, #24
 8002cd2:	4908      	ldr	r1, [pc, #32]	@ (8002cf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cd4:	40d9      	lsrs	r1, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	400b      	ands	r3, r1
 8002cda:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	000fffff 	.word	0x000fffff

08002cf8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 031f 	and.w	r3, r3, #31
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6093      	str	r3, [r2, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d68:	d101      	bne.n	8002d6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <LL_ADC_IsEnabled+0x18>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <LL_ADC_IsEnabled+0x1a>
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b08b      	sub	sp, #44	@ 0x2c
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e2ce      	b.n	80033fe <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a95      	ldr	r2, [pc, #596]	@ (80030c4 <HAL_ADC_Init+0x284>)
 8002e6e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7fe fdfb 	bl	8001a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5f 	bl	8002d54 <LL_ADC_IsDeepPowerDownEnabled>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d004      	beq.n	8002ea6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff45 	bl	8002d30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff7a 	bl	8002da4 <LL_ADC_IsInternalRegulatorEnabled>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d115      	bne.n	8002ee2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff5e 	bl	8002d7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec0:	4b81      	ldr	r3, [pc, #516]	@ (80030c8 <HAL_ADC_Init+0x288>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	4a81      	ldr	r2, [pc, #516]	@ (80030cc <HAL_ADC_Init+0x28c>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	3301      	adds	r3, #1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ed4:	e002      	b.n	8002edc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f9      	bne.n	8002ed6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ff5c 	bl	8002da4 <LL_ADC_IsInternalRegulatorEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff6c 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8002f1a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 825f 	bne.w	80033e8 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 825b 	bne.w	80033e8 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f36:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff40 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d14f      	bne.n	8002ff2 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5b      	ldr	r2, [pc, #364]	@ (80030c4 <HAL_ADC_Init+0x284>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d037      	beq.n	8002fcc <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5b      	ldr	r2, [pc, #364]	@ (80030d0 <HAL_ADC_Init+0x290>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_ADC_Init+0x130>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a5a      	ldr	r2, [pc, #360]	@ (80030d4 <HAL_ADC_Init+0x294>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10e      	bne.n	8002f8e <HAL_ADC_Init+0x14e>
 8002f70:	4857      	ldr	r0, [pc, #348]	@ (80030d0 <HAL_ADC_Init+0x290>)
 8002f72:	f7ff ff2b 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f76:	4604      	mov	r4, r0
 8002f78:	4856      	ldr	r0, [pc, #344]	@ (80030d4 <HAL_ADC_Init+0x294>)
 8002f7a:	f7ff ff27 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4323      	orrs	r3, r4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e008      	b.n	8002fa0 <HAL_ADC_Init+0x160>
 8002f8e:	484d      	ldr	r0, [pc, #308]	@ (80030c4 <HAL_ADC_Init+0x284>)
 8002f90:	f7ff ff1c 	bl	8002dcc <LL_ADC_IsEnabled>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d026      	beq.n	8002ff2 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a49      	ldr	r2, [pc, #292]	@ (80030d0 <HAL_ADC_Init+0x290>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_ADC_Init+0x178>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a48      	ldr	r2, [pc, #288]	@ (80030d4 <HAL_ADC_Init+0x294>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_Init+0x17c>
 8002fb8:	4a47      	ldr	r2, [pc, #284]	@ (80030d8 <HAL_ADC_Init+0x298>)
 8002fba:	e000      	b.n	8002fbe <HAL_ADC_Init+0x17e>
 8002fbc:	4a47      	ldr	r2, [pc, #284]	@ (80030dc <HAL_ADC_Init+0x29c>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7ff fc11 	bl	80027ec <LL_ADC_SetCommonClock>
 8002fca:	e012      	b.n	8002ff2 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f7ff fc3c 	bl	8002854 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80030dc <HAL_ADC_Init+0x29c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002fec:	493b      	ldr	r1, [pc, #236]	@ (80030dc <HAL_ADC_Init+0x29c>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a33      	ldr	r2, [pc, #204]	@ (80030c4 <HAL_ADC_Init+0x284>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d010      	beq.n	800301e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003002:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003008:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800300e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003016:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003018:	4313      	orrs	r3, r2
 800301a:	623b      	str	r3, [r7, #32]
 800301c:	e035      	b.n	800308a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	7f1b      	ldrb	r3, [r3, #28]
 8003022:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800302a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800302c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003032:	2a00      	cmp	r2, #0
 8003034:	d002      	beq.n	800303c <HAL_ADC_Init+0x1fc>
 8003036:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800303a:	e000      	b.n	800303e <HAL_ADC_Init+0x1fe>
 800303c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800303e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003044:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	da04      	bge.n	8003058 <HAL_ADC_Init+0x218>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003056:	e001      	b.n	800305c <HAL_ADC_Init+0x21c>
 8003058:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800305c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	491b      	ldr	r1, [pc, #108]	@ (80030d0 <HAL_ADC_Init+0x290>)
 8003064:	428b      	cmp	r3, r1
 8003066:	d004      	beq.n	8003072 <HAL_ADC_Init+0x232>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4919      	ldr	r1, [pc, #100]	@ (80030d4 <HAL_ADC_Init+0x294>)
 800306e:	428b      	cmp	r3, r1
 8003070:	d103      	bne.n	800307a <HAL_ADC_Init+0x23a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003078:	e003      	b.n	8003082 <HAL_ADC_Init+0x242>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003080:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003082:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	4313      	orrs	r3, r2
 8003088:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d131      	bne.n	80030f8 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0a      	ldr	r2, [pc, #40]	@ (80030c4 <HAL_ADC_Init+0x284>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	3b01      	subs	r3, #1
 80030a4:	045b      	lsls	r3, r3, #17
 80030a6:	6a3a      	ldr	r2, [r7, #32]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	e024      	b.n	80030f8 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d113      	bne.n	80030e0 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	e01a      	b.n	80030f8 <HAL_ADC_Init+0x2b8>
 80030c2:	bf00      	nop
 80030c4:	46021000 	.word	0x46021000
 80030c8:	20000004 	.word	0x20000004
 80030cc:	053e2d63 	.word	0x053e2d63
 80030d0:	42028000 	.word	0x42028000
 80030d4:	42028100 	.word	0x42028100
 80030d8:	42028300 	.word	0x42028300
 80030dc:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a75      	ldr	r2, [pc, #468]	@ (80032d4 <HAL_ADC_Init+0x494>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003116:	4313      	orrs	r3, r2
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	4313      	orrs	r3, r2
 800311c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_ADC_Init+0x498>)
 8003126:	4013      	ands	r3, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	430b      	orrs	r3, r1
 8003130:	60d3      	str	r3, [r2, #12]
 8003132:	e031      	b.n	8003198 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003138:	2b00      	cmp	r3, #0
 800313a:	d009      	beq.n	8003150 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003140:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	4313      	orrs	r3, r2
 800314a:	6a3a      	ldr	r2, [r7, #32]
 800314c:	4313      	orrs	r3, r2
 800314e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	4b61      	ldr	r3, [pc, #388]	@ (80032dc <HAL_ADC_Init+0x49c>)
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6a39      	ldr	r1, [r7, #32]
 8003160:	430b      	orrs	r3, r1
 8003162:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a4d      	ldr	r2, [pc, #308]	@ (80032d4 <HAL_ADC_Init+0x494>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	f000 80a4 	beq.w	80032ec <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fe22 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 80031ae:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe2f 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 80031ba:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d166      	bne.n	8003290 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d163      	bne.n	8003290 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7f1b      	ldrb	r3, [r3, #28]
 80031cc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4943      	ldr	r1, [pc, #268]	@ (80032e0 <HAL_ADC_Init+0x4a0>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d004      	beq.n	80031e2 <HAL_ADC_Init+0x3a2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4941      	ldr	r1, [pc, #260]	@ (80032e4 <HAL_ADC_Init+0x4a4>)
 80031de:	428b      	cmp	r3, r1
 80031e0:	d102      	bne.n	80031e8 <HAL_ADC_Init+0x3a8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	e002      	b.n	80031ee <HAL_ADC_Init+0x3ae>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ec:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031ee:	4313      	orrs	r3, r2
 80031f0:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031fc:	f023 0303 	bic.w	r3, r3, #3
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	430b      	orrs	r3, r1
 8003208:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f7ff fbc1 	bl	80029a4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003228:	2b01      	cmp	r3, #1
 800322a:	d11e      	bne.n	800326a <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003230:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	4b2b      	ldr	r3, [pc, #172]	@ (80032e8 <HAL_ADC_Init+0x4a8>)
 800323a:	4013      	ands	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003240:	0411      	lsls	r1, r2, #16
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003252:	4311      	orrs	r1, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003258:	0892      	lsrs	r2, r2, #2
 800325a:	430a      	orrs	r2, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	611a      	str	r2, [r3, #16]
 8003268:	e007      	b.n	800327a <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10c      	bne.n	80032b2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	f023 010f 	bic.w	r1, r3, #15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	1e5a      	subs	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80032b0:	e007      	b.n	80032c2 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 020f 	bic.w	r2, r2, #15
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032d2:	e092      	b.n	80033fa <HAL_ADC_Init+0x5ba>
 80032d4:	46021000 	.word	0x46021000
 80032d8:	fff0c013 	.word	0xfff0c013
 80032dc:	ffde800d 	.word	0xffde800d
 80032e0:	42028000 	.word	0x42028000
 80032e4:	42028100 	.word	0x42028100
 80032e8:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d111      	bne.n	800331a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80032fe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003304:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800330a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	4313      	orrs	r3, r2
 8003310:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	4b39      	ldr	r3, [pc, #228]	@ (8003408 <HAL_ADC_Init+0x5c8>)
 8003322:	4013      	ands	r3, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	69f9      	ldr	r1, [r7, #28]
 800332a:	430b      	orrs	r3, r1
 800332c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003336:	461a      	mov	r2, r3
 8003338:	2100      	movs	r1, #0
 800333a:	f7ff fb56 	bl	80029ea <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003346:	461a      	mov	r2, r3
 8003348:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800334c:	f7ff fb4d 	bl	80029ea <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d108      	bne.n	800336a <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f062 020f 	orn	r2, r2, #15
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
 8003368:	e018      	b.n	800339c <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003372:	d113      	bne.n	800339c <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	f003 031c 	and.w	r3, r3, #28
 8003386:	f06f 020f 	mvn.w	r2, #15
 800338a:	fa02 f103 	lsl.w	r1, r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <HAL_ADC_Init+0x5cc>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d10b      	bne.n	80033c4 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033c2:	e01a      	b.n	80033fa <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c8:	f023 0312 	bic.w	r3, r3, #18
 80033cc:	f043 0210 	orr.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033e6:	e008      	b.n	80033fa <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80033fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033fe:	4618      	mov	r0, r3
 8003400:	372c      	adds	r7, #44	@ 0x2c
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}
 8003406:	bf00      	nop
 8003408:	f7fffc02 	.word	0xf7fffc02
 800340c:	833ffff3 	.word	0x833ffff3

08003410 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmp_adc_master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a77      	ldr	r2, [pc, #476]	@ (8003610 <HAL_ADC_IRQHandler+0x200>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_ADC_IRQHandler+0x30>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a76      	ldr	r2, [pc, #472]	@ (8003614 <HAL_ADC_IRQHandler+0x204>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d101      	bne.n	8003444 <HAL_ADC_IRQHandler+0x34>
 8003440:	4b75      	ldr	r3, [pc, #468]	@ (8003618 <HAL_ADC_IRQHandler+0x208>)
 8003442:	e000      	b.n	8003446 <HAL_ADC_IRQHandler+0x36>
 8003444:	4b75      	ldr	r3, [pc, #468]	@ (800361c <HAL_ADC_IRQHandler+0x20c>)
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fc56 	bl	8002cf8 <LL_ADC_GetMultimode>
 800344c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d017      	beq.n	8003488 <HAL_ADC_IRQHandler+0x78>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003472:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	679a      	str	r2, [r3, #120]	@ 0x78

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f001 f8f6 	bl	800466c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2202      	movs	r2, #2
 8003486:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_ADC_IRQHandler+0x8c>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80d1 	beq.w	800364a <HAL_ADC_IRQHandler+0x23a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80cb 	beq.w	800364a <HAL_ADC_IRQHandler+0x23a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a53      	ldr	r2, [pc, #332]	@ (8003620 <HAL_ADC_IRQHandler+0x210>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d06c      	beq.n	80035b0 <HAL_ADC_IRQHandler+0x1a0>
    {
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff faa4 	bl	8002a28 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80aa 	beq.w	800363c <HAL_ADC_IRQHandler+0x22c>
      {
        /* Get relevant register CFGR in ADC instance of ADC master or slave    */
        /* in function of multimode state (for devices with multimode           */
        /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a49      	ldr	r2, [pc, #292]	@ (8003614 <HAL_ADC_IRQHandler+0x204>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d002      	beq.n	80034f8 <HAL_ADC_IRQHandler+0xe8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e000      	b.n	80034fa <HAL_ADC_IRQHandler+0xea>
 80034f8:	4b45      	ldr	r3, [pc, #276]	@ (8003610 <HAL_ADC_IRQHandler+0x200>)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	4293      	cmp	r3, r2
 8003500:	d008      	beq.n	8003514 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b05      	cmp	r3, #5
 800350c:	d002      	beq.n	8003514 <HAL_ADC_IRQHandler+0x104>
            || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b09      	cmp	r3, #9
 8003512:	d104      	bne.n	800351e <HAL_ADC_IRQHandler+0x10e>
           )
        {
          /* check CONT bit directly in handle ADC CFGR register */
          tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	e00c      	b.n	8003538 <HAL_ADC_IRQHandler+0x128>
        }
        else
        {
          /* else need to check Master ADC CONT bit */
          tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a3c      	ldr	r2, [pc, #240]	@ (8003614 <HAL_ADC_IRQHandler+0x204>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d002      	beq.n	800352e <HAL_ADC_IRQHandler+0x11e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	e000      	b.n	8003530 <HAL_ADC_IRQHandler+0x120>
 800352e:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <HAL_ADC_IRQHandler+0x200>)
 8003530:	613b      	str	r3, [r7, #16]
          tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	623b      	str	r3, [r7, #32]
#else
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Carry on if continuous mode is disabled */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d17c      	bne.n	800363c <HAL_ADC_IRQHandler+0x22c>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d175      	bne.n	800363c <HAL_ADC_IRQHandler+0x22c>
          {
            /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
            /* ADSTART==0 (no conversion on going)                              */
            if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fc4c 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d11a      	bne.n	8003596 <HAL_ADC_IRQHandler+0x186>
            {
              /* Disable ADC end of sequence conversion interrupt */
              /* Note: Overrun interrupt was enabled with EOC interrupt in      */
              /* HAL_Start_IT(), but is not disabled here because can be used   */
              /* by overrun IRQ process below.                                  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 020c 	bic.w	r2, r2, #12
 800356e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d159      	bne.n	800363c <HAL_ADC_IRQHandler+0x22c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	679a      	str	r2, [r3, #120]	@ 0x78
 8003594:	e052      	b.n	800363c <HAL_ADC_IRQHandler+0x22c>
              }
            }
            else
            {
              /* Change ADC state to error state */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800359a:	f043 0210 	orr.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	67da      	str	r2, [r3, #124]	@ 0x7c
 80035ae:	e045      	b.n	800363c <HAL_ADC_IRQHandler+0x22c>
    else
    {
      /* Determine whether any further conversion upcoming on group regular     */
      /* by external trigger, continuous mode or scan sequence on going         */
      /* to disable interruption.                                               */
      if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fa37 	bl	8002a28 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d03d      	beq.n	800363c <HAL_ADC_IRQHandler+0x22c>
          && (hadc->Init.ContinuousConvMode == DISABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d138      	bne.n	800363c <HAL_ADC_IRQHandler+0x22c>
         )
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d131      	bne.n	800363c <HAL_ADC_IRQHandler+0x22c>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
          /* ADSTART==0 (no conversion on going)                                */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fc08 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d11d      	bne.n	8003624 <HAL_ADC_IRQHandler+0x214>
          {
            /* Disable ADC end of single conversion interrupt on group regular */
            /* Note: Overrun interrupt was enabled with EOC interrupt in        */
            /* HAL_Start_IT(), but is not disabled here because can be used     */
            /* by overrun IRQ process below.                                    */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 020c 	bic.w	r2, r2, #12
 80035f6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY, HAL_ADC_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	679a      	str	r2, [r3, #120]	@ 0x78
 800360c:	e016      	b.n	800363c <HAL_ADC_IRQHandler+0x22c>
 800360e:	bf00      	nop
 8003610:	42028000 	.word	0x42028000
 8003614:	42028100 	.word	0x42028100
 8003618:	42028300 	.word	0x42028300
 800361c:	46021300 	.word	0x46021300
 8003620:	46021000 	.word	0x46021000
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	67da      	str	r2, [r3, #124]	@ 0x7c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f99d 	bl	800397c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	220c      	movs	r2, #12
 8003648:	601a      	str	r2, [r3, #0]
  }

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a8c      	ldr	r2, [pc, #560]	@ (8003880 <HAL_ADC_IRQHandler+0x470>)
 8003650:	4293      	cmp	r3, r2
 8003652:	f000 8095 	beq.w	8003780 <HAL_ADC_IRQHandler+0x370>
  {
    /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <HAL_ADC_IRQHandler+0x25a>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_ADC_IRQHandler+0x270>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8085 	beq.w	8003780 <HAL_ADC_IRQHandler+0x370>
        (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d07f      	beq.n	8003780 <HAL_ADC_IRQHandler+0x370>
    {
      /* Update state machine on conversion status if not in error state */
      if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_ADC_IRQHandler+0x288>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003690:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Retrieve ADC configuration */
      tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fa90 	bl	8002bc2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036a2:	60f8      	str	r0, [r7, #12]
      tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f9bd 	bl	8002a28 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036ae:	60b8      	str	r0, [r7, #8]
      /* Get relevant register CFGR in ADC instance of ADC master or slave  */
      /* in function of multimode state (for devices with multimode         */
      /* available).                                                        */

#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a73      	ldr	r2, [pc, #460]	@ (8003884 <HAL_ADC_IRQHandler+0x474>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d002      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x2b0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e000      	b.n	80036c2 <HAL_ADC_IRQHandler+0x2b2>
 80036c0:	4b71      	ldr	r3, [pc, #452]	@ (8003888 <HAL_ADC_IRQHandler+0x478>)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d008      	beq.n	80036dc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d002      	beq.n	80036dc <HAL_ADC_IRQHandler+0x2cc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b07      	cmp	r3, #7
 80036da:	d104      	bne.n	80036e6 <HAL_ADC_IRQHandler+0x2d6>
         )
      {
        tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	e00c      	b.n	8003700 <HAL_ADC_IRQHandler+0x2f0>
      }
      else
      {
        tmp_adc_master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a66      	ldr	r2, [pc, #408]	@ (8003884 <HAL_ADC_IRQHandler+0x474>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d002      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x2e6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	e000      	b.n	80036f8 <HAL_ADC_IRQHandler+0x2e8>
 80036f6:	4b64      	ldr	r3, [pc, #400]	@ (8003888 <HAL_ADC_IRQHandler+0x478>)
 80036f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	623b      	str	r3, [r7, #32]
      /* Disable interruption if no further conversion upcoming by injected     */
      /* external trigger or by automatic injected conversion with regular      */
      /* group having no further conversion upcoming (same conditions as        */
      /* regular group interruption disabling above),                           */
      /* and if injected scan sequence is completed.                            */
      if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d035      	beq.n	8003772 <HAL_ADC_IRQHandler+0x362>
      {
        if ((READ_BIT(tmp_cfgr, ADC_CFGR1_JAUTO) == 0UL) ||
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_ADC_IRQHandler+0x310>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02d      	beq.n	8003772 <HAL_ADC_IRQHandler+0x362>
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
             (READ_BIT(tmp_cfgr, ADC_CFGR1_CONT) == 0UL)))
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800371c:	2b00      	cmp	r3, #0
 800371e:	d128      	bne.n	8003772 <HAL_ADC_IRQHandler+0x362>
        {
          /* If End of Sequence is reached, disable interrupts */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b40      	cmp	r3, #64	@ 0x40
 800372c:	d121      	bne.n	8003772 <HAL_ADC_IRQHandler+0x362>
            /* Therefore, state of HAL ADC injected group is kept to busy.        */
            /* No ADC_CFGR1_JQM for STM32U5                                       */

            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fb70 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d119      	bne.n	8003772 <HAL_ADC_IRQHandler+0x362>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800374c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003752:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	679a      	str	r2, [r3, #120]	@ 0x78

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d105      	bne.n	8003772 <HAL_ADC_IRQHandler+0x362>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	679a      	str	r2, [r3, #120]	@ 0x78
                interruption has been triggered by end of conversion or end of
                sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 ff5c 	bl	8004630 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2260      	movs	r2, #96	@ 0x60
 800377e:	601a      	str	r2, [r3, #0]
    }
  } /* Specific ADC1 or ADC2 only */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d011      	beq.n	80037ae <HAL_ADC_IRQHandler+0x39e>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00c      	beq.n	80037ae <HAL_ADC_IRQHandler+0x39e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003798:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f8f5 	bl	8003990 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2280      	movs	r2, #128	@ 0x80
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <HAL_ADC_IRQHandler+0x3ce>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00d      	beq.n	80037de <HAL_ADC_IRQHandler+0x3ce>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 ff38 	bl	8004644 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d012      	beq.n	800380e <HAL_ADC_IRQHandler+0x3fe>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_ADC_IRQHandler+0x3fe>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037f6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 ff2a 	bl	8004658 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800380c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05d      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x4c4>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d058      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x4c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_ADC_IRQHandler+0x420>
    {
      overrun_error = 1UL;
 800382a:	2301      	movs	r3, #1
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
 800382e:	e03b      	b.n	80038a8 <HAL_ADC_IRQHandler+0x498>
    }
    else
    {
      /* Check DMA configuration */
      if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <HAL_ADC_IRQHandler+0x470>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02c      	beq.n	8003894 <HAL_ADC_IRQHandler+0x484>
      {
#if defined(ADC_MULTIMODE_SUPPORT)
        /* Check DMA configuration */
        if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_ADC_IRQHandler+0x45c>
        {
          /* Multimode (when feature is available) is enabled,
             Common Control Register MDMA bits must be checked. */
          if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a10      	ldr	r2, [pc, #64]	@ (8003888 <HAL_ADC_IRQHandler+0x478>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_ADC_IRQHandler+0x444>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a0d      	ldr	r2, [pc, #52]	@ (8003884 <HAL_ADC_IRQHandler+0x474>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_ADC_IRQHandler+0x448>
 8003854:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <HAL_ADC_IRQHandler+0x47c>)
 8003856:	e000      	b.n	800385a <HAL_ADC_IRQHandler+0x44a>
 8003858:	4b0d      	ldr	r3, [pc, #52]	@ (8003890 <HAL_ADC_IRQHandler+0x480>)
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fa5a 	bl	8002d14 <LL_ADC_GetMultiDMATransfer>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d020      	beq.n	80038a8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 8003866:	2301      	movs	r3, #1
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
 800386a:	e01d      	b.n	80038a8 <HAL_ADC_IRQHandler+0x498>
          }
        }
        else
        {
          /* Multimode not set or feature not available or ADC independent */
          if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMNGT) != 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_ADC_IRQHandler+0x498>
          {
            overrun_error = 1UL;
 800387a:	2301      	movs	r3, #1
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24
 800387e:	e013      	b.n	80038a8 <HAL_ADC_IRQHandler+0x498>
 8003880:	46021000 	.word	0x46021000
 8003884:	42028100 	.word	0x42028100
 8003888:	42028000 	.word	0x42028000
 800388c:	42028300 	.word	0x42028300
 8003890:	46021300 	.word	0x46021300
#endif /* ADC_MULTIMODE_SUPPORT */
      }
      else
      {
        /* Check DMA configuration */
        if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE_ADC4)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff f984 	bl	8002ba6 <LL_ADC_REG_GetDMATransfer>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_ADC_IRQHandler+0x498>
        {
          overrun_error = 1UL;
 80038a4:	2301      	movs	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10e      	bne.n	80038cc <HAL_ADC_IRQHandler+0x4bc>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038b2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038be:	f043 0202 	orr.w	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	67da      	str	r2, [r3, #124]	@ 0x7c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f86c 	bl	80039a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01b      	beq.n	8003916 <HAL_ADC_IRQHandler+0x506>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d016      	beq.n	8003916 <HAL_ADC_IRQHandler+0x506>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_ADC_IRQHandler+0x4f0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038f8:	f043 0201 	orr.w	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	679a      	str	r2, [r3, #120]	@ 0x78

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f86d 	bl	80039e0 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	605a      	str	r2, [r3, #4]
  }

  if (hadc->Instance == ADC4)  /* ADC4 */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <HAL_ADC_IRQHandler+0x568>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d126      	bne.n	800396e <HAL_ADC_IRQHandler+0x55e>
  {
    /* ========== Check End of Calibration flag ========== */
    if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <HAL_ADC_IRQHandler+0x534>
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_ADC_IRQHandler+0x534>
    {
      /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->CalibrationCpltCallback(hadc);
#else
      HAL_ADC_CalibrationCpltCallback(hadc);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f83f 	bl	80039b8 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear end of calibration flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003942:	601a      	str	r2, [r3, #0]
    }

    /* ========== Check LDO ready flag ========== */
    if (((tmp_isr & ADC_FLAG_LDORDY) == ADC_FLAG_LDORDY) && ((tmp_ier & ADC_IT_LDORDY) == ADC_IT_LDORDY))
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00f      	beq.n	800396e <HAL_ADC_IRQHandler+0x55e>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_ADC_IRQHandler+0x55e>
    {
      /* Voltage Regulator (LDO) Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->VoltageRegulatorCallback(hadc);
#else
      HAL_ADC_VoltageRegulatorCallback(hadc);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f837 	bl	80039cc <HAL_ADC_VoltageRegulatorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Disable Voltage Regulator (LDO) Ready interrupt source */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_LDORDY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800396c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800396e:	bf00      	nop
 8003970:	3728      	adds	r7, #40	@ 0x28
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	46021000 	.word	0x46021000

0800397c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_ADC_VoltageRegulatorCallback>:
  * @brief  Voltage Regulator (LDO) Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_VoltageRegulatorCallback(ADC_HandleTypeDef *hadc)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_VoltageRegulatorCallback must be implemented in the user file.
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b0b7      	sub	sp, #220	@ 0xdc
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4aa8      	ldr	r2, [pc, #672]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x2bc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d103      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x36>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f000 bdfe 	b.w	8004626 <HAL_ADC_ConfigChannel+0xc32>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff f9db 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 85c1 	bne.w	80045c6 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a99      	ldr	r2, [pc, #612]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x2bc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f000 8409 	beq.w	8004262 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x7a>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0e9b      	lsrs	r3, r3, #26
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	2201      	movs	r2, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	e01d      	b.n	8003aaa <HAL_ADC_ConfigChannel+0xb6>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a7a:	fa93 f3a3 	rbit	r3, r3
 8003a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003a8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8003a92:	2320      	movs	r3, #32
 8003a94:	e004      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8003a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	69d1      	ldr	r1, [r2, #28]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f7fe ffc3 	bl	8002a50 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f98f 	bl	8002df2 <LL_ADC_REG_IsConversionOngoing>
 8003ad4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff f99b 	bl	8002e18 <LL_ADC_INJ_IsConversionOngoing>
 8003ae2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 81df 	bne.w	8003eae <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003af0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 81da 	bne.w	8003eae <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f7ff f86e 	bl	8002be8 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d046      	beq.n	8003bbc <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6919      	ldr	r1, [r3, #16]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b3e:	f7fe fea9 	bl	8002894 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6919      	ldr	r1, [r3, #16]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f7fe fed7 	bl	8002902 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	7e9b      	ldrb	r3, [r3, #26]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d11e      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x17e>
 8003b6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b70:	e000      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x180>
 8003b72:	2300      	movs	r3, #0
 8003b74:	461a      	mov	r2, r3
 8003b76:	f7fe fefa 	bl	800296e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d102      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x19c>
 8003b8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b8e:	e000      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x19e>
 8003b90:	2300      	movs	r3, #0
 8003b92:	461a      	mov	r2, r3
 8003b94:	f7fe fed0 	bl	8002938 <LL_ADC_SetOffsetSignedSaturation>
 8003b98:	e189      	b.n	8003eae <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7fe fee2 	bl	800296e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f7fe febf 	bl	8002938 <LL_ADC_SetOffsetSignedSaturation>
 8003bba:	e178      	b.n	8003eae <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fe87 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x1f4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fe7c 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003bde:	4603      	mov	r3, r0
 8003be0:	0e9b      	lsrs	r3, r3, #26
 8003be2:	f003 021f 	and.w	r2, r3, #31
 8003be6:	e01e      	b.n	8003c26 <HAL_ADC_ConfigChannel+0x232>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fe71 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8003c16:	2320      	movs	r3, #32
 8003c18:	e004      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8003c1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d105      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x24a>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	0e9b      	lsrs	r3, r3, #26
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	e018      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x27c>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003c62:	2320      	movs	r3, #32
 8003c64:	e004      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d107      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	2100      	movs	r1, #0
 8003c80:	f7fe fe08 	bl	8002894 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fe23 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x2c0>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fe18 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	0e9b      	lsrs	r3, r3, #26
 8003caa:	f003 021f 	and.w	r2, r3, #31
 8003cae:	e020      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x2fe>
 8003cb0:	46021000 	.word	0x46021000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fe0b 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cd6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e004      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8003ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x316>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	0e9b      	lsrs	r3, r3, #26
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	e018      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x348>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e004      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d107      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f7fe fda2 	bl	8002894 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2102      	movs	r1, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fdbd 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x388>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fdb2 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003d72:	4603      	mov	r3, r0
 8003d74:	0e9b      	lsrs	r3, r3, #26
 8003d76:	f003 021f 	and.w	r2, r3, #31
 8003d7a:	e01a      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x3be>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2102      	movs	r1, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fda7 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003da2:	2320      	movs	r3, #32
 8003da4:	e004      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 8003da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003daa:	fab3 f383 	clz	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x3d6>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	0e9b      	lsrs	r3, r3, #26
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	e011      	b.n	8003dee <HAL_ADC_ConfigChannel+0x3fa>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003dd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dda:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003de2:	2320      	movs	r3, #32
 8003de4:	e003      	b.n	8003dee <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d107      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	f7fe fd49 	bl	8002894 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2103      	movs	r1, #3
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fd64 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x43a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2103      	movs	r1, #3
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fd59 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003e24:	4603      	mov	r3, r0
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	e017      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x46a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2103      	movs	r1, #3
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe fd4e 	bl	80028d6 <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e48:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8003e50:	2320      	movs	r3, #32
 8003e52:	e003      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8003e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x482>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	0e9b      	lsrs	r3, r3, #26
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	e011      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x4a6>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	e003      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e94:	fab3 f383 	clz	r3, r3
 8003e98:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d107      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2103      	movs	r1, #3
 8003eaa:	f7fe fcf3 	bl	8002894 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe ff8a 	bl	8002dcc <LL_ADC_IsEnabled>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 83ad 	bne.w	800461a <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6819      	ldr	r1, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f7fe feef 	bl	8002cb0 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003eda:	f040 80d6 	bne.w	800408a <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x50e>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0e9b      	lsrs	r3, r3, #26
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	2b09      	cmp	r3, #9
 8003ef8:	bf94      	ite	ls
 8003efa:	2301      	movls	r3, #1
 8003efc:	2300      	movhi	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e019      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x542>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f12:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	e003      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	2b09      	cmp	r3, #9
 8003f2e:	bf94      	ite	ls
 8003f30:	2301      	movls	r3, #1
 8003f32:	2300      	movhi	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d04d      	beq.n	8003fd6 <HAL_ADC_ConfigChannel+0x5e2>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x562>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	0e9b      	lsrs	r3, r3, #26
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	069b      	lsls	r3, r3, #26
 8003f50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f54:	e015      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x58e>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f66:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003f6e:	2320      	movs	r3, #32
 8003f70:	e003      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	069b      	lsls	r3, r3, #26
 8003f7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x5ae>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	3301      	adds	r3, #1
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa0:	e017      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x5de>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	e003      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	e04e      	b.n	8004074 <HAL_ADC_ConfigChannel+0x680>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x5fe>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	0e9b      	lsrs	r3, r3, #26
 8003fe8:	3301      	adds	r3, #1
 8003fea:	069b      	lsls	r3, r3, #26
 8003fec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff0:	e015      	b.n	800401e <HAL_ADC_ConfigChannel+0x62a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800400a:	2320      	movs	r3, #32
 800400c:	e003      	b.n	8004016 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800400e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	b2db      	uxtb	r3, r3
 8004016:	3301      	adds	r3, #1
 8004018:	069b      	lsls	r3, r3, #26
 800401a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_ADC_ConfigChannel+0x64a>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	0e9b      	lsrs	r3, r3, #26
 8004030:	3301      	adds	r3, #1
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	e017      	b.n	800406e <HAL_ADC_ConfigChannel+0x67a>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	61bb      	str	r3, [r7, #24]
  return result;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004056:	2320      	movs	r3, #32
 8004058:	e003      	b.n	8004062 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	3301      	adds	r3, #1
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	4313      	orrs	r3, r2
 8004070:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	461a      	mov	r2, r3
 8004082:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004086:	f7fe fdaf 	bl	8002be8 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f280 82c3 	bge.w	800461a <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a92      	ldr	r2, [pc, #584]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d004      	beq.n	80040a8 <HAL_ADC_ConfigChannel+0x6b4>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a91      	ldr	r2, [pc, #580]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x6b8>
 80040a8:	4b90      	ldr	r3, [pc, #576]	@ (80042ec <HAL_ADC_ConfigChannel+0x8f8>)
 80040aa:	e000      	b.n	80040ae <HAL_ADC_ConfigChannel+0x6ba>
 80040ac:	4b90      	ldr	r3, [pc, #576]	@ (80042f0 <HAL_ADC_ConfigChannel+0x8fc>)
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fbc2 	bl	8002838 <LL_ADC_GetCommonPathInternalCh>
 80040b4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a89      	ldr	r2, [pc, #548]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_ADC_ConfigChannel+0x6d8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a88      	ldr	r2, [pc, #544]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10e      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x6f6>
 80040cc:	4885      	ldr	r0, [pc, #532]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 80040ce:	f7fe fe7d 	bl	8002dcc <LL_ADC_IsEnabled>
 80040d2:	4604      	mov	r4, r0
 80040d4:	4884      	ldr	r0, [pc, #528]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80040d6:	f7fe fe79 	bl	8002dcc <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	4323      	orrs	r3, r4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf0c      	ite	eq
 80040e2:	2301      	moveq	r3, #1
 80040e4:	2300      	movne	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e008      	b.n	80040fc <HAL_ADC_ConfigChannel+0x708>
 80040ea:	4882      	ldr	r0, [pc, #520]	@ (80042f4 <HAL_ADC_ConfigChannel+0x900>)
 80040ec:	f7fe fe6e 	bl	8002dcc <LL_ADC_IsEnabled>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80a6 	beq.w	800424e <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7c      	ldr	r2, [pc, #496]	@ (80042f8 <HAL_ADC_ConfigChannel+0x904>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d13c      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800410c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d136      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a71      	ldr	r2, [pc, #452]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00a      	beq.n	8004138 <HAL_ADC_ConfigChannel+0x744>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a70      	ldr	r2, [pc, #448]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d005      	beq.n	8004138 <HAL_ADC_ConfigChannel+0x744>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a70      	ldr	r2, [pc, #448]	@ (80042f4 <HAL_ADC_ConfigChannel+0x900>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 826e 	bne.w	8004614 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a69      	ldr	r2, [pc, #420]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_ADC_ConfigChannel+0x758>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a68      	ldr	r2, [pc, #416]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x75c>
 800414c:	4a67      	ldr	r2, [pc, #412]	@ (80042ec <HAL_ADC_ConfigChannel+0x8f8>)
 800414e:	e000      	b.n	8004152 <HAL_ADC_ConfigChannel+0x75e>
 8004150:	4a67      	ldr	r2, [pc, #412]	@ (80042f0 <HAL_ADC_ConfigChannel+0x8fc>)
 8004152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004156:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7fe fb58 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004162:	4b66      	ldr	r3, [pc, #408]	@ (80042fc <HAL_ADC_ConfigChannel+0x908>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	4a65      	ldr	r2, [pc, #404]	@ (8004300 <HAL_ADC_ConfigChannel+0x90c>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	3301      	adds	r3, #1
 8004172:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004174:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004176:	e002      	b.n	800417e <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	3b01      	subs	r3, #1
 800417c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f9      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004184:	e246      	b.n	8004614 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a5e      	ldr	r2, [pc, #376]	@ (8004304 <HAL_ADC_ConfigChannel+0x910>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d12b      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004194:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004198:	2b00      	cmp	r3, #0
 800419a:	d125      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a50      	ldr	r2, [pc, #320]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00a      	beq.n	80041bc <HAL_ADC_ConfigChannel+0x7c8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a4f      	ldr	r2, [pc, #316]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d005      	beq.n	80041bc <HAL_ADC_ConfigChannel+0x7c8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a4f      	ldr	r2, [pc, #316]	@ (80042f4 <HAL_ADC_ConfigChannel+0x900>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f040 822e 	bne.w	8004618 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a48      	ldr	r2, [pc, #288]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_ADC_ConfigChannel+0x7dc>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a47      	ldr	r2, [pc, #284]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x7e0>
 80041d0:	4a46      	ldr	r2, [pc, #280]	@ (80042ec <HAL_ADC_ConfigChannel+0x8f8>)
 80041d2:	e000      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x7e2>
 80041d4:	4a46      	ldr	r2, [pc, #280]	@ (80042f0 <HAL_ADC_ConfigChannel+0x8fc>)
 80041d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fe fb16 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041e6:	e217      	b.n	8004618 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a46      	ldr	r2, [pc, #280]	@ (8004308 <HAL_ADC_ConfigChannel+0x914>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	f040 8213 	bne.w	800461a <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f040 820c 	bne.w	800461a <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a37      	ldr	r2, [pc, #220]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00a      	beq.n	8004222 <HAL_ADC_ConfigChannel+0x82e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a35      	ldr	r2, [pc, #212]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d005      	beq.n	8004222 <HAL_ADC_ConfigChannel+0x82e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a36      	ldr	r2, [pc, #216]	@ (80042f4 <HAL_ADC_ConfigChannel+0x900>)
 800421c:	4293      	cmp	r3, r2
 800421e:	f040 81fc 	bne.w	800461a <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2f      	ldr	r2, [pc, #188]	@ (80042e4 <HAL_ADC_ConfigChannel+0x8f0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_ADC_ConfigChannel+0x842>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2d      	ldr	r2, [pc, #180]	@ (80042e8 <HAL_ADC_ConfigChannel+0x8f4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_ADC_ConfigChannel+0x846>
 8004236:	4a2d      	ldr	r2, [pc, #180]	@ (80042ec <HAL_ADC_ConfigChannel+0x8f8>)
 8004238:	e000      	b.n	800423c <HAL_ADC_ConfigChannel+0x848>
 800423a:	4a2d      	ldr	r2, [pc, #180]	@ (80042f0 <HAL_ADC_ConfigChannel+0x8fc>)
 800423c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004240:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f7fe fae3 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
 800424c:	e1e5      	b.n	800461a <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004260:	e1db      	b.n	800461a <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	f000 811b 	beq.w	80044aa <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800427c:	d004      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004282:	4a22      	ldr	r2, [pc, #136]	@ (800430c <HAL_ADC_ConfigChannel+0x918>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d107      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe fc3d 	bl	8002b10 <LL_ADC_REG_SetSequencerChAdd>
 8004296:	e059      	b.n	800434c <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 031f 	and.w	r3, r3, #31
 80042a6:	210f      	movs	r1, #15
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	401a      	ands	r2, r3
 80042b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80042b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x8d4>
 80042bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80042c0:	0e9b      	lsrs	r3, r3, #26
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	e027      	b.n	8004318 <HAL_ADC_ConfigChannel+0x924>
 80042c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80042cc:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	60fb      	str	r3, [r7, #12]
  return result;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d117      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80042e0:	2320      	movs	r3, #32
 80042e2:	e019      	b.n	8004318 <HAL_ADC_ConfigChannel+0x924>
 80042e4:	42028000 	.word	0x42028000
 80042e8:	42028100 	.word	0x42028100
 80042ec:	42028300 	.word	0x42028300
 80042f0:	46021300 	.word	0x46021300
 80042f4:	46021000 	.word	0x46021000
 80042f8:	ce080000 	.word	0xce080000
 80042fc:	20000004 	.word	0x20000004
 8004300:	053e2d63 	.word	0x053e2d63
 8004304:	ca040000 	.word	0xca040000
 8004308:	80000001 	.word	0x80000001
 800430c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	6839      	ldr	r1, [r7, #0]
 800431a:	6849      	ldr	r1, [r1, #4]
 800431c:	f001 011f 	and.w	r1, r1, #31
 8004320:	408b      	lsls	r3, r1
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	429a      	cmp	r2, r3
 8004338:	d808      	bhi.n	800434c <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004346:	4619      	mov	r1, r3
 8004348:	f7fe fb82 	bl	8002a50 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	461a      	mov	r2, r3
 8004356:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800435a:	f7fe fc45 	bl	8002be8 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f280 8159 	bge.w	800461a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a9b      	ldr	r2, [pc, #620]	@ (80045dc <HAL_ADC_ConfigChannel+0xbe8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_ADC_ConfigChannel+0x988>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a9a      	ldr	r2, [pc, #616]	@ (80045e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x98c>
 800437c:	4b99      	ldr	r3, [pc, #612]	@ (80045e4 <HAL_ADC_ConfigChannel+0xbf0>)
 800437e:	e000      	b.n	8004382 <HAL_ADC_ConfigChannel+0x98e>
 8004380:	4b99      	ldr	r3, [pc, #612]	@ (80045e8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fa58 	bl	8002838 <LL_ADC_GetCommonPathInternalCh>
 8004388:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a96      	ldr	r2, [pc, #600]	@ (80045ec <HAL_ADC_ConfigChannel+0xbf8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d12b      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800439a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d125      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a8d      	ldr	r2, [pc, #564]	@ (80045dc <HAL_ADC_ConfigChannel+0xbe8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_ADC_ConfigChannel+0x9c2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a8b      	ldr	r2, [pc, #556]	@ (80045e0 <HAL_ADC_ConfigChannel+0xbec>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x9c6>
 80043b6:	4a8b      	ldr	r2, [pc, #556]	@ (80045e4 <HAL_ADC_ConfigChannel+0xbf0>)
 80043b8:	e000      	b.n	80043bc <HAL_ADC_ConfigChannel+0x9c8>
 80043ba:	4a8b      	ldr	r2, [pc, #556]	@ (80045e8 <HAL_ADC_ConfigChannel+0xbf4>)
 80043bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f7fe fa23 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80043cc:	4b88      	ldr	r3, [pc, #544]	@ (80045f0 <HAL_ADC_ConfigChannel+0xbfc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	4a88      	ldr	r2, [pc, #544]	@ (80045f4 <HAL_ADC_ConfigChannel+0xc00>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	099b      	lsrs	r3, r3, #6
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80043de:	e002      	b.n	80043e6 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f9      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80043ec:	e045      	b.n	800447a <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a81      	ldr	r2, [pc, #516]	@ (80045f8 <HAL_ADC_ConfigChannel+0xc04>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d11b      	bne.n	8004430 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004400:	2b00      	cmp	r3, #0
 8004402:	d115      	bne.n	8004430 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a74      	ldr	r2, [pc, #464]	@ (80045dc <HAL_ADC_ConfigChannel+0xbe8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_ADC_ConfigChannel+0xa24>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a73      	ldr	r2, [pc, #460]	@ (80045e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d101      	bne.n	800441c <HAL_ADC_ConfigChannel+0xa28>
 8004418:	4a72      	ldr	r2, [pc, #456]	@ (80045e4 <HAL_ADC_ConfigChannel+0xbf0>)
 800441a:	e000      	b.n	800441e <HAL_ADC_ConfigChannel+0xa2a>
 800441c:	4a72      	ldr	r2, [pc, #456]	@ (80045e8 <HAL_ADC_ConfigChannel+0xbf4>)
 800441e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f7fe f9f2 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
 800442e:	e024      	b.n	800447a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a71      	ldr	r2, [pc, #452]	@ (80045fc <HAL_ADC_ConfigChannel+0xc08>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d11f      	bne.n	800447a <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800443a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800443e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d115      	bne.n	8004472 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a64      	ldr	r2, [pc, #400]	@ (80045dc <HAL_ADC_ConfigChannel+0xbe8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_ADC_ConfigChannel+0xa66>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a62      	ldr	r2, [pc, #392]	@ (80045e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <HAL_ADC_ConfigChannel+0xa6a>
 800445a:	4a62      	ldr	r2, [pc, #392]	@ (80045e4 <HAL_ADC_ConfigChannel+0xbf0>)
 800445c:	e000      	b.n	8004460 <HAL_ADC_ConfigChannel+0xa6c>
 800445e:	4a62      	ldr	r2, [pc, #392]	@ (80045e8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004464:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f7fe f9d1 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
 8004470:	e003      	b.n	800447a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a62      	ldr	r2, [pc, #392]	@ (8004600 <HAL_ADC_ConfigChannel+0xc0c>)
 8004478:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a61      	ldr	r2, [pc, #388]	@ (8004604 <HAL_ADC_ConfigChannel+0xc10>)
 8004480:	4293      	cmp	r3, r2
 8004482:	f040 80ca 	bne.w	800461a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800448a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 80c3 	bne.w	800461a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80044a8:	e0b7      	b.n	800461a <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044b2:	d004      	beq.n	80044be <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80044b8:	4a53      	ldr	r2, [pc, #332]	@ (8004608 <HAL_ADC_ConfigChannel+0xc14>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d106      	bne.n	80044cc <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fb55 	bl	8002b76 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f280 80a2 	bge.w	800461a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a40      	ldr	r2, [pc, #256]	@ (80045dc <HAL_ADC_ConfigChannel+0xbe8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_ADC_ConfigChannel+0xaf6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a3e      	ldr	r2, [pc, #248]	@ (80045e0 <HAL_ADC_ConfigChannel+0xbec>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_ConfigChannel+0xafa>
 80044ea:	4b3e      	ldr	r3, [pc, #248]	@ (80045e4 <HAL_ADC_ConfigChannel+0xbf0>)
 80044ec:	e000      	b.n	80044f0 <HAL_ADC_ConfigChannel+0xafc>
 80044ee:	4b3e      	ldr	r3, [pc, #248]	@ (80045e8 <HAL_ADC_ConfigChannel+0xbf4>)
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe f9a1 	bl	8002838 <LL_ADC_GetCommonPathInternalCh>
 80044f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a43      	ldr	r2, [pc, #268]	@ (800460c <HAL_ADC_ConfigChannel+0xc18>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d115      	bne.n	8004530 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a34      	ldr	r2, [pc, #208]	@ (80045dc <HAL_ADC_ConfigChannel+0xbe8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d004      	beq.n	8004518 <HAL_ADC_ConfigChannel+0xb24>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a33      	ldr	r2, [pc, #204]	@ (80045e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d101      	bne.n	800451c <HAL_ADC_ConfigChannel+0xb28>
 8004518:	4a32      	ldr	r2, [pc, #200]	@ (80045e4 <HAL_ADC_ConfigChannel+0xbf0>)
 800451a:	e000      	b.n	800451e <HAL_ADC_ConfigChannel+0xb2a>
 800451c:	4a32      	ldr	r2, [pc, #200]	@ (80045e8 <HAL_ADC_ConfigChannel+0xbf4>)
 800451e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004522:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f7fe f972 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
 800452e:	e034      	b.n	800459a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a36      	ldr	r2, [pc, #216]	@ (8004610 <HAL_ADC_ConfigChannel+0xc1c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d115      	bne.n	8004566 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a27      	ldr	r2, [pc, #156]	@ (80045dc <HAL_ADC_ConfigChannel+0xbe8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_ADC_ConfigChannel+0xb5a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a25      	ldr	r2, [pc, #148]	@ (80045e0 <HAL_ADC_ConfigChannel+0xbec>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <HAL_ADC_ConfigChannel+0xb5e>
 800454e:	4a25      	ldr	r2, [pc, #148]	@ (80045e4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004550:	e000      	b.n	8004554 <HAL_ADC_ConfigChannel+0xb60>
 8004552:	4a25      	ldr	r2, [pc, #148]	@ (80045e8 <HAL_ADC_ConfigChannel+0xbf4>)
 8004554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004558:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f7fe f957 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
 8004564:	e019      	b.n	800459a <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a24      	ldr	r2, [pc, #144]	@ (80045fc <HAL_ADC_ConfigChannel+0xc08>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d114      	bne.n	800459a <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <HAL_ADC_ConfigChannel+0xbe8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_ADC_ConfigChannel+0xb90>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a18      	ldr	r2, [pc, #96]	@ (80045e0 <HAL_ADC_ConfigChannel+0xbec>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0xb94>
 8004584:	4a17      	ldr	r2, [pc, #92]	@ (80045e4 <HAL_ADC_ConfigChannel+0xbf0>)
 8004586:	e000      	b.n	800458a <HAL_ADC_ConfigChannel+0xb96>
 8004588:	4a17      	ldr	r2, [pc, #92]	@ (80045e8 <HAL_ADC_ConfigChannel+0xbf4>)
 800458a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800458e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7fe f93c 	bl	8002812 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a19      	ldr	r2, [pc, #100]	@ (8004604 <HAL_ADC_ConfigChannel+0xc10>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d13a      	bne.n	800461a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d134      	bne.n	800461a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80045c4:	e029      	b.n	800461a <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80045d8:	e01f      	b.n	800461a <HAL_ADC_ConfigChannel+0xc26>
 80045da:	bf00      	nop
 80045dc:	42028000 	.word	0x42028000
 80045e0:	42028100 	.word	0x42028100
 80045e4:	42028300 	.word	0x42028300
 80045e8:	46021300 	.word	0x46021300
 80045ec:	b6002000 	.word	0xb6002000
 80045f0:	20000004 	.word	0x20000004
 80045f4:	053e2d63 	.word	0x053e2d63
 80045f8:	ba004000 	.word	0xba004000
 80045fc:	80000001 	.word	0x80000001
 8004600:	b2001000 	.word	0xb2001000
 8004604:	d7200000 	.word	0xd7200000
 8004608:	80000010 	.word	0x80000010
 800460c:	ce080000 	.word	0xce080000
 8004610:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004614:	bf00      	nop
 8004616:	e000      	b.n	800461a <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004618:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004622:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004626:	4618      	mov	r0, r3
 8004628:	37dc      	adds	r7, #220	@ 0xdc
 800462a:	46bd      	mov	sp, r7
 800462c:	bd90      	pop	{r4, r7, pc}
 800462e:	bf00      	nop

08004630 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004690:	4b0c      	ldr	r3, [pc, #48]	@ (80046c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800469c:	4013      	ands	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046b2:	4a04      	ldr	r2, [pc, #16]	@ (80046c4 <__NVIC_SetPriorityGrouping+0x44>)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	60d3      	str	r3, [r2, #12]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	e000ed00 	.word	0xe000ed00

080046c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <__NVIC_GetPriorityGrouping+0x18>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	f003 0307 	and.w	r3, r3, #7
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	db0b      	blt.n	800470e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	f003 021f 	and.w	r2, r3, #31
 80046fc:	4907      	ldr	r1, [pc, #28]	@ (800471c <__NVIC_EnableIRQ+0x38>)
 80046fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2001      	movs	r0, #1
 8004706:	fa00 f202 	lsl.w	r2, r0, r2
 800470a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	e000e100 	.word	0xe000e100

08004720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800472c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004730:	2b00      	cmp	r3, #0
 8004732:	db0a      	blt.n	800474a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	490c      	ldr	r1, [pc, #48]	@ (800476c <__NVIC_SetPriority+0x4c>)
 800473a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800473e:	0112      	lsls	r2, r2, #4
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	440b      	add	r3, r1
 8004744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004748:	e00a      	b.n	8004760 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	4908      	ldr	r1, [pc, #32]	@ (8004770 <__NVIC_SetPriority+0x50>)
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	3b04      	subs	r3, #4
 8004758:	0112      	lsls	r2, r2, #4
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	440b      	add	r3, r1
 800475e:	761a      	strb	r2, [r3, #24]
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000e100 	.word	0xe000e100
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f1c3 0307 	rsb	r3, r3, #7
 800478e:	2b04      	cmp	r3, #4
 8004790:	bf28      	it	cs
 8004792:	2304      	movcs	r3, #4
 8004794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3304      	adds	r3, #4
 800479a:	2b06      	cmp	r3, #6
 800479c:	d902      	bls.n	80047a4 <NVIC_EncodePriority+0x30>
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	3b03      	subs	r3, #3
 80047a2:	e000      	b.n	80047a6 <NVIC_EncodePriority+0x32>
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43da      	mvns	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	401a      	ands	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047bc:	f04f 31ff 	mov.w	r1, #4294967295
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	fa01 f303 	lsl.w	r3, r1, r3
 80047c6:	43d9      	mvns	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047cc:	4313      	orrs	r3, r2
         );
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3724      	adds	r7, #36	@ 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ff4c 	bl	8004680 <__NVIC_SetPriorityGrouping>
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047fe:	f7ff ff63 	bl	80046c8 <__NVIC_GetPriorityGrouping>
 8004802:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	6978      	ldr	r0, [r7, #20]
 800480a:	f7ff ffb3 	bl	8004774 <NVIC_EncodePriority>
 800480e:	4602      	mov	r2, r0
 8004810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff82 	bl	8004720 <__NVIC_SetPriority>
}
 800481c:	bf00      	nop
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800482e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff ff56 	bl	80046e4 <__NVIC_EnableIRQ>
}
 8004838:	bf00      	nop
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b04      	cmp	r3, #4
 800484c:	d844      	bhi.n	80048d8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800484e:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004877 	.word	0x08004877
 8004858:	08004895 	.word	0x08004895
 800485c:	080048b7 	.word	0x080048b7
 8004860:	080048d9 	.word	0x080048d9
 8004864:	08004869 	.word	0x08004869
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004868:	4b1f      	ldr	r3, [pc, #124]	@ (80048e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1e      	ldr	r2, [pc, #120]	@ (80048e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	6013      	str	r3, [r2, #0]
      break;
 8004874:	e031      	b.n	80048da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004876:	4b1c      	ldr	r3, [pc, #112]	@ (80048e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004882:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004888:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800488a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800488e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004892:	e022      	b.n	80048da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004894:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a13      	ldr	r2, [pc, #76]	@ (80048e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800489a:	f023 0304 	bic.w	r3, r3, #4
 800489e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80048a0:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80048a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048a6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80048aa:	4a10      	ldr	r2, [pc, #64]	@ (80048ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80048ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80048b4:	e011      	b.n	80048da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80048b6:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a0b      	ldr	r2, [pc, #44]	@ (80048e8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80048bc:	f023 0304 	bic.w	r3, r3, #4
 80048c0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80048c2:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80048c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048c8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80048cc:	4a07      	ldr	r2, [pc, #28]	@ (80048ec <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80048ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80048d6:	e000      	b.n	80048da <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80048d8:	bf00      	nop
  }
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000e010 	.word	0xe000e010
 80048ec:	46020c00 	.word	0x46020c00

080048f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e054      	b.n	80049ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	7f5b      	ldrb	r3, [r3, #29]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fd fa20 	bl	8001d58 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	791b      	ldrb	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10c      	bne.n	8004940 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a22      	ldr	r2, [pc, #136]	@ (80049b4 <HAL_CRC_Init+0xc4>)
 800492c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0218 	bic.w	r2, r2, #24
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	e00c      	b.n	800495a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6899      	ldr	r1, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	461a      	mov	r2, r3
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f834 	bl	80049b8 <HAL_CRCEx_Polynomial_Set>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e028      	b.n	80049ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	795b      	ldrb	r3, [r3, #5]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f04f 32ff 	mov.w	r2, #4294967295
 800496a:	611a      	str	r2, [r3, #16]
 800496c:	e004      	b.n	8004978 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6912      	ldr	r2, [r2, #16]
 8004976:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695a      	ldr	r2, [r3, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	04c11db7 	.word	0x04c11db7

080049b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80049c8:	231f      	movs	r3, #31
 80049ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
 80049da:	e063      	b.n	8004aa4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80049dc:	bf00      	nop
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1e5a      	subs	r2, r3, #1
 80049e2:	613a      	str	r2, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_CRCEx_Polynomial_Set+0x44>
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b18      	cmp	r3, #24
 8004a00:	d846      	bhi.n	8004a90 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004a02:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a97 	.word	0x08004a97
 8004a0c:	08004a91 	.word	0x08004a91
 8004a10:	08004a91 	.word	0x08004a91
 8004a14:	08004a91 	.word	0x08004a91
 8004a18:	08004a91 	.word	0x08004a91
 8004a1c:	08004a91 	.word	0x08004a91
 8004a20:	08004a91 	.word	0x08004a91
 8004a24:	08004a91 	.word	0x08004a91
 8004a28:	08004a85 	.word	0x08004a85
 8004a2c:	08004a91 	.word	0x08004a91
 8004a30:	08004a91 	.word	0x08004a91
 8004a34:	08004a91 	.word	0x08004a91
 8004a38:	08004a91 	.word	0x08004a91
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	08004a91 	.word	0x08004a91
 8004a48:	08004a79 	.word	0x08004a79
 8004a4c:	08004a91 	.word	0x08004a91
 8004a50:	08004a91 	.word	0x08004a91
 8004a54:	08004a91 	.word	0x08004a91
 8004a58:	08004a91 	.word	0x08004a91
 8004a5c:	08004a91 	.word	0x08004a91
 8004a60:	08004a91 	.word	0x08004a91
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004a6d 	.word	0x08004a6d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b06      	cmp	r3, #6
 8004a70:	d913      	bls.n	8004a9a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004a76:	e010      	b.n	8004a9a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b07      	cmp	r3, #7
 8004a7c:	d90f      	bls.n	8004a9e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004a82:	e00c      	b.n	8004a9e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d90b      	bls.n	8004aa2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004a8e:	e008      	b.n	8004aa2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75fb      	strb	r3, [r7, #23]
        break;
 8004a94:	e006      	b.n	8004aa4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004a96:	bf00      	nop
 8004a98:	e004      	b.n	8004aa4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004aa2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10d      	bne.n	8004ac6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 0118 	bic.w	r1, r3, #24
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004ae4:	f023 030f 	bic.w	r3, r3, #15
 8004ae8:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af2:	3b50      	subs	r3, #80	@ 0x50
 8004af4:	09db      	lsrs	r3, r3, #7
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	2201      	movs	r2, #1
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 813b 	beq.w	8004d8a <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d011      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b38:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	f043 0201 	orr.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d011      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b70:	f043 0202 	orr.w	r2, r3, #2
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d011      	beq.n	8004baa <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004b9c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d011      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004bce:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd4:	f043 0208 	orr.w	r2, r3, #8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d013      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c00:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d04c      	beq.n	8004cba <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d045      	beq.n	8004cba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c36:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d12e      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c52:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0202 	orr.w	r2, r2, #2
 8004c62:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2200      	movs	r2, #0
 8004c86:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d07a      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
        }

        return;
 8004ca0:	e075      	b.n	8004d8e <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d039      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d032      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d012      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d116      	bne.n	8004d1a <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d111      	bne.n	8004d1a <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d02:	2201      	movs	r2, #1
 8004d04:	731a      	strb	r2, [r3, #12]
 8004d06:	e008      	b.n	8004d1a <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d103      	bne.n	8004d1a <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004d22:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d025      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0202 	orr.w	r2, r2, #2
 8004d52:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
 8004d88:	e002      	b.n	8004d90 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004d8e:	bf00      	nop
    }
  }
}
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e02b      	b.n	8004e02 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004db2:	f023 030f 	bic.w	r3, r3, #15
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc0:	3b50      	subs	r3, #80	@ 0x50
 8004dc2:	09db      	lsrs	r3, r3, #7
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	2201      	movs	r2, #1
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d012      	beq.n	8004e00 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f003 0311 	and.w	r3, r3, #17
 8004de0:	2b11      	cmp	r3, #17
 8004de2:	d106      	bne.n	8004df2 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	605a      	str	r2, [r3, #4]
 8004df0:	e006      	b.n	8004e00 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e053      	b.n	8004ec8 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fc ffb1 	bl	8001d9c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6851      	ldr	r1, [r2, #4]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	69d2      	ldr	r2, [r2, #28]
 8004e58:	4311      	orrs	r1, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e68:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6891      	ldr	r1, [r2, #8]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6992      	ldr	r2, [r2, #24]
 8004e78:	4311      	orrs	r1, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68d1      	ldr	r1, [r2, #12]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	051a      	lsls	r2, r3, #20
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	055b      	lsls	r3, r3, #21
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d026      	beq.n	8004f40 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d021      	beq.n	8004f40 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f0a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2204      	movs	r2, #4
 8004f24:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d026      	beq.n	8004f98 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d021      	beq.n	8004f98 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f62:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f70:	f043 0202 	orr.w	r2, r3, #2
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d026      	beq.n	8004ff0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d021      	beq.n	8004ff0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc8:	f043 0204 	orr.w	r2, r3, #4
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d013      	beq.n	8005022 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00e      	beq.n	8005022 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005012:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2204      	movs	r2, #4
 800501a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f853 	bl	80050c8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d024      	beq.n	8005076 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01f      	beq.n	8005076 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005044:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2202      	movs	r2, #2
 800504c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01f      	beq.n	80050c0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01a      	beq.n	80050c0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005098:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2210      	movs	r2, #16
 80050a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f80e 	bl	80050dc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

#if defined(DMA2D_FGPFCCR_CSS)
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b01      	cmp	r3, #1
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_DMA2D_ConfigLayer+0x24>
 8005110:	2302      	movs	r3, #2
 8005112:	e092      	b.n	800523a <HAL_DMA2D_ConfigLayer+0x14a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	3328      	adds	r3, #40	@ 0x28
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005148:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005154:	4b3c      	ldr	r3, [pc, #240]	@ (8005248 <HAL_DMA2D_ConfigLayer+0x158>)
 8005156:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b0a      	cmp	r3, #10
 800515e:	d003      	beq.n	8005168 <HAL_DMA2D_ConfigLayer+0x78>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b09      	cmp	r3, #9
 8005166:	d107      	bne.n	8005178 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	e005      	b.n	8005184 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d120      	bne.n	80051cc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	43db      	mvns	r3, r3
 8005194:	ea02 0103 	and.w	r1, r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	430a      	orrs	r2, r1
 80051a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b0a      	cmp	r3, #10
 80051b2:	d003      	beq.n	80051bc <HAL_DMA2D_ConfigLayer+0xcc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	d135      	bne.n	8005228 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80051c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80051ca:	e02d      	b.n	8005228 <HAL_DMA2D_ConfigLayer+0x138>
  /* Configure the foreground DMA2D layer */
  else
  {

#if defined(DMA2D_FGPFCCR_CSS)
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b0b      	cmp	r3, #11
 80051d2:	d109      	bne.n	80051e8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	049b      	lsls	r3, r3, #18
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80051e6:	617b      	str	r3, [r7, #20]
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	ea02 0103 	and.w	r1, r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b0a      	cmp	r3, #10
 8005210:	d003      	beq.n	800521a <HAL_DMA2D_ConfigLayer+0x12a>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b09      	cmp	r3, #9
 8005218:	d106      	bne.n	8005228 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005226:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	ff33000f 	.word	0xff33000f

0800524c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005254:	f7fd fa4e 	bl	80026f4 <HAL_GetTick>
 8005258:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0db      	b.n	800541c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a6e      	ldr	r2, [pc, #440]	@ (8005424 <HAL_DMAEx_List_Init+0x1d8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	f000 809f 	beq.w	80053ae <HAL_DMAEx_List_Init+0x162>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a6c      	ldr	r2, [pc, #432]	@ (8005428 <HAL_DMAEx_List_Init+0x1dc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	f000 8099 	beq.w	80053ae <HAL_DMAEx_List_Init+0x162>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a6a      	ldr	r2, [pc, #424]	@ (800542c <HAL_DMAEx_List_Init+0x1e0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	f000 8093 	beq.w	80053ae <HAL_DMAEx_List_Init+0x162>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a68      	ldr	r2, [pc, #416]	@ (8005430 <HAL_DMAEx_List_Init+0x1e4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	f000 808d 	beq.w	80053ae <HAL_DMAEx_List_Init+0x162>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a66      	ldr	r2, [pc, #408]	@ (8005434 <HAL_DMAEx_List_Init+0x1e8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	f000 8087 	beq.w	80053ae <HAL_DMAEx_List_Init+0x162>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a64      	ldr	r2, [pc, #400]	@ (8005438 <HAL_DMAEx_List_Init+0x1ec>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	f000 8081 	beq.w	80053ae <HAL_DMAEx_List_Init+0x162>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a62      	ldr	r2, [pc, #392]	@ (800543c <HAL_DMAEx_List_Init+0x1f0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d07b      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a61      	ldr	r2, [pc, #388]	@ (8005440 <HAL_DMAEx_List_Init+0x1f4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d076      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a5f      	ldr	r2, [pc, #380]	@ (8005444 <HAL_DMAEx_List_Init+0x1f8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d071      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005448 <HAL_DMAEx_List_Init+0x1fc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d06c      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5c      	ldr	r2, [pc, #368]	@ (800544c <HAL_DMAEx_List_Init+0x200>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d067      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005450 <HAL_DMAEx_List_Init+0x204>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d062      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a59      	ldr	r2, [pc, #356]	@ (8005454 <HAL_DMAEx_List_Init+0x208>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d05d      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a58      	ldr	r2, [pc, #352]	@ (8005458 <HAL_DMAEx_List_Init+0x20c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d058      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a56      	ldr	r2, [pc, #344]	@ (800545c <HAL_DMAEx_List_Init+0x210>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d053      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a55      	ldr	r2, [pc, #340]	@ (8005460 <HAL_DMAEx_List_Init+0x214>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d04e      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a53      	ldr	r2, [pc, #332]	@ (8005464 <HAL_DMAEx_List_Init+0x218>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d049      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a52      	ldr	r2, [pc, #328]	@ (8005468 <HAL_DMAEx_List_Init+0x21c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d044      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a50      	ldr	r2, [pc, #320]	@ (800546c <HAL_DMAEx_List_Init+0x220>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d03f      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a4f      	ldr	r2, [pc, #316]	@ (8005470 <HAL_DMAEx_List_Init+0x224>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d03a      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a4d      	ldr	r2, [pc, #308]	@ (8005474 <HAL_DMAEx_List_Init+0x228>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d035      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a4c      	ldr	r2, [pc, #304]	@ (8005478 <HAL_DMAEx_List_Init+0x22c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d030      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a4a      	ldr	r2, [pc, #296]	@ (800547c <HAL_DMAEx_List_Init+0x230>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d02b      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a49      	ldr	r2, [pc, #292]	@ (8005480 <HAL_DMAEx_List_Init+0x234>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d026      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a47      	ldr	r2, [pc, #284]	@ (8005484 <HAL_DMAEx_List_Init+0x238>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d021      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a46      	ldr	r2, [pc, #280]	@ (8005488 <HAL_DMAEx_List_Init+0x23c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d01c      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a44      	ldr	r2, [pc, #272]	@ (800548c <HAL_DMAEx_List_Init+0x240>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d017      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a43      	ldr	r2, [pc, #268]	@ (8005490 <HAL_DMAEx_List_Init+0x244>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d012      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a41      	ldr	r2, [pc, #260]	@ (8005494 <HAL_DMAEx_List_Init+0x248>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00d      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a40      	ldr	r2, [pc, #256]	@ (8005498 <HAL_DMAEx_List_Init+0x24c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d008      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a3e      	ldr	r2, [pc, #248]	@ (800549c <HAL_DMAEx_List_Init+0x250>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <HAL_DMAEx_List_Init+0x162>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a3d      	ldr	r2, [pc, #244]	@ (80054a0 <HAL_DMAEx_List_Init+0x254>)
 80053ac:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0206 	orr.w	r2, r2, #6
 80053cc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80053ce:	e00f      	b.n	80053f0 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80053d0:	f7fd f990 	bl	80026f4 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b05      	cmp	r3, #5
 80053dc:	d908      	bls.n	80053f0 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2210      	movs	r2, #16
 80053e2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2203      	movs	r2, #3
 80053e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e015      	b.n	800541c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e8      	bne.n	80053d0 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa26 	bl	8005850 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40020050 	.word	0x40020050
 8005428:	50020050 	.word	0x50020050
 800542c:	400200d0 	.word	0x400200d0
 8005430:	500200d0 	.word	0x500200d0
 8005434:	40020150 	.word	0x40020150
 8005438:	50020150 	.word	0x50020150
 800543c:	400201d0 	.word	0x400201d0
 8005440:	500201d0 	.word	0x500201d0
 8005444:	40020250 	.word	0x40020250
 8005448:	50020250 	.word	0x50020250
 800544c:	400202d0 	.word	0x400202d0
 8005450:	500202d0 	.word	0x500202d0
 8005454:	40020350 	.word	0x40020350
 8005458:	50020350 	.word	0x50020350
 800545c:	400203d0 	.word	0x400203d0
 8005460:	500203d0 	.word	0x500203d0
 8005464:	40020450 	.word	0x40020450
 8005468:	50020450 	.word	0x50020450
 800546c:	400204d0 	.word	0x400204d0
 8005470:	500204d0 	.word	0x500204d0
 8005474:	40020550 	.word	0x40020550
 8005478:	50020550 	.word	0x50020550
 800547c:	400205d0 	.word	0x400205d0
 8005480:	500205d0 	.word	0x500205d0
 8005484:	40020650 	.word	0x40020650
 8005488:	50020650 	.word	0x50020650
 800548c:	400206d0 	.word	0x400206d0
 8005490:	500206d0 	.word	0x500206d0
 8005494:	40020750 	.word	0x40020750
 8005498:	50020750 	.word	0x50020750
 800549c:	400207d0 	.word	0x400207d0
 80054a0:	500207d0 	.word	0x500207d0

080054a4 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_DMAEx_List_BuildNode+0x16>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e004      	b.n	80054c8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80054be:	6839      	ldr	r1, [r7, #0]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fb1d 	bl	8005b00 <DMA_List_BuildNode>

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	@ 0x30
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_DMAEx_List_InsertNode+0x18>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0b6      	b.n	800565a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d104      	bne.n	80054fe <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2204      	movs	r2, #4
 80054f8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e0ad      	b.n	800565a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fc4c 	bl	8005da4 <DMA_List_CheckNodesBaseAddresses>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d004      	beq.n	800551c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2205      	movs	r2, #5
 8005516:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e09e      	b.n	800565a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fc6d 	bl	8005e04 <DMA_List_CheckNodesTypes>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2204      	movs	r2, #4
 8005534:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e08f      	b.n	800565a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2202      	movs	r2, #2
 800553e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8005546:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800554a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fc93 	bl	8005e7c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d11a      	bne.n	8005594 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	e06c      	b.n	800564c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800557e:	4013      	ands	r3, r2
 8005580:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005584:	4319      	orrs	r1, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2202      	movs	r2, #2
 8005590:	609a      	str	r2, [r3, #8]
 8005592:	e05b      	b.n	800564c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80055a4:	4013      	ands	r3, r2
 80055a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055aa:	4319      	orrs	r1, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	e043      	b.n	8005642 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	461a      	mov	r2, r3
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fc88 	bl	8005edc <DMA_List_FindNode>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d132      	bne.n	8005638 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d11a      	bne.n	8005612 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00b      	beq.n	80055fc <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80055ee:	4013      	ands	r3, r2
 80055f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f4:	4319      	orrs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005602:	4013      	ands	r3, r2
 8005604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005608:	4319      	orrs	r1, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005610:	e017      	b.n	8005642 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8005612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005628:	4013      	ands	r3, r2
 800562a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800562c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800562e:	4319      	orrs	r1, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005636:	e004      	b.n	8005642 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2206      	movs	r2, #6
 800563c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e00b      	b.n	800565a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3730      	adds	r7, #48	@ 0x30
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b08a      	sub	sp, #40	@ 0x28
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e052      	b.n	800571a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e049      	b.n	800571a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d101      	bne.n	800569e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e03d      	b.n	800571a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2204      	movs	r2, #4
 80056a2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e038      	b.n	800571a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d104      	bne.n	80056ba <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2204      	movs	r2, #4
 80056b4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e02f      	b.n	800571a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f107 0220 	add.w	r2, r7, #32
 80056ce:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fbd2 	bl	8005e7c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80056dc:	f107 030c 	add.w	r3, r7, #12
 80056e0:	461a      	mov	r2, r3
 80056e2:	2100      	movs	r1, #0
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fbf9 	bl	8005edc <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80056f4:	4013      	ands	r3, r2
 80056f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4610      	mov	r0, r2
 80056fc:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80056fe:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005700:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3728      	adds	r7, #40	@ 0x28
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <HAL_DMAEx_List_LinkQ+0x16>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e072      	b.n	8005824 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005744:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d002      	beq.n	8005758 <HAL_DMAEx_List_LinkQ+0x34>
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b05      	cmp	r3, #5
 8005756:	d108      	bne.n	800576a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2240      	movs	r2, #64	@ 0x40
 800575c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e05c      	b.n	8005824 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	7b1b      	ldrb	r3, [r3, #12]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d104      	bne.n	800577e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2201      	movs	r2, #1
 8005778:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e052      	b.n	8005824 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2b      	ldr	r2, [pc, #172]	@ (8005830 <HAL_DMAEx_List_LinkQ+0x10c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d022      	beq.n	80057ce <HAL_DMAEx_List_LinkQ+0xaa>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a29      	ldr	r2, [pc, #164]	@ (8005834 <HAL_DMAEx_List_LinkQ+0x110>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01d      	beq.n	80057ce <HAL_DMAEx_List_LinkQ+0xaa>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a28      	ldr	r2, [pc, #160]	@ (8005838 <HAL_DMAEx_List_LinkQ+0x114>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <HAL_DMAEx_List_LinkQ+0xaa>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a26      	ldr	r2, [pc, #152]	@ (800583c <HAL_DMAEx_List_LinkQ+0x118>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_DMAEx_List_LinkQ+0xaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a25      	ldr	r2, [pc, #148]	@ (8005840 <HAL_DMAEx_List_LinkQ+0x11c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_DMAEx_List_LinkQ+0xaa>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a23      	ldr	r2, [pc, #140]	@ (8005844 <HAL_DMAEx_List_LinkQ+0x120>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_DMAEx_List_LinkQ+0xaa>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <HAL_DMAEx_List_LinkQ+0x124>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_DMAEx_List_LinkQ+0xaa>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a20      	ldr	r2, [pc, #128]	@ (800584c <HAL_DMAEx_List_LinkQ+0x128>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <HAL_DMAEx_List_LinkQ+0xae>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <HAL_DMAEx_List_LinkQ+0xb0>
 80057d2:	2300      	movs	r3, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d004      	beq.n	80057f0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2203      	movs	r2, #3
 80057ea:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e019      	b.n	8005824 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f4:	2b81      	cmp	r3, #129	@ 0x81
 80057f6:	d108      	bne.n	800580a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2204      	movs	r2, #4
 8005804:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e00c      	b.n	8005824 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2204      	movs	r2, #4
 8005816:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e003      	b.n	8005824 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40020650 	.word	0x40020650
 8005834:	50020650 	.word	0x50020650
 8005838:	400206d0 	.word	0x400206d0
 800583c:	500206d0 	.word	0x500206d0
 8005840:	40020750 	.word	0x40020750
 8005844:	50020750 	.word	0x50020750
 8005848:	400207d0 	.word	0x400207d0
 800584c:	500207d0 	.word	0x500207d0

08005850 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a85      	ldr	r2, [pc, #532]	@ (8005a80 <DMA_List_Init+0x230>)
 800586a:	4293      	cmp	r3, r2
 800586c:	f000 80a0 	beq.w	80059b0 <DMA_List_Init+0x160>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a83      	ldr	r2, [pc, #524]	@ (8005a84 <DMA_List_Init+0x234>)
 8005876:	4293      	cmp	r3, r2
 8005878:	f000 809a 	beq.w	80059b0 <DMA_List_Init+0x160>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a81      	ldr	r2, [pc, #516]	@ (8005a88 <DMA_List_Init+0x238>)
 8005882:	4293      	cmp	r3, r2
 8005884:	f000 8094 	beq.w	80059b0 <DMA_List_Init+0x160>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a7f      	ldr	r2, [pc, #508]	@ (8005a8c <DMA_List_Init+0x23c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	f000 808e 	beq.w	80059b0 <DMA_List_Init+0x160>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a7d      	ldr	r2, [pc, #500]	@ (8005a90 <DMA_List_Init+0x240>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f000 8088 	beq.w	80059b0 <DMA_List_Init+0x160>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a7b      	ldr	r2, [pc, #492]	@ (8005a94 <DMA_List_Init+0x244>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	f000 8082 	beq.w	80059b0 <DMA_List_Init+0x160>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a79      	ldr	r2, [pc, #484]	@ (8005a98 <DMA_List_Init+0x248>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d07c      	beq.n	80059b0 <DMA_List_Init+0x160>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a78      	ldr	r2, [pc, #480]	@ (8005a9c <DMA_List_Init+0x24c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d077      	beq.n	80059b0 <DMA_List_Init+0x160>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a76      	ldr	r2, [pc, #472]	@ (8005aa0 <DMA_List_Init+0x250>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d072      	beq.n	80059b0 <DMA_List_Init+0x160>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a75      	ldr	r2, [pc, #468]	@ (8005aa4 <DMA_List_Init+0x254>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d06d      	beq.n	80059b0 <DMA_List_Init+0x160>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a73      	ldr	r2, [pc, #460]	@ (8005aa8 <DMA_List_Init+0x258>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d068      	beq.n	80059b0 <DMA_List_Init+0x160>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a72      	ldr	r2, [pc, #456]	@ (8005aac <DMA_List_Init+0x25c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d063      	beq.n	80059b0 <DMA_List_Init+0x160>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a70      	ldr	r2, [pc, #448]	@ (8005ab0 <DMA_List_Init+0x260>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d05e      	beq.n	80059b0 <DMA_List_Init+0x160>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a6f      	ldr	r2, [pc, #444]	@ (8005ab4 <DMA_List_Init+0x264>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d059      	beq.n	80059b0 <DMA_List_Init+0x160>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a6d      	ldr	r2, [pc, #436]	@ (8005ab8 <DMA_List_Init+0x268>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d054      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a6c      	ldr	r2, [pc, #432]	@ (8005abc <DMA_List_Init+0x26c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d04f      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a6a      	ldr	r2, [pc, #424]	@ (8005ac0 <DMA_List_Init+0x270>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04a      	beq.n	80059b0 <DMA_List_Init+0x160>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a69      	ldr	r2, [pc, #420]	@ (8005ac4 <DMA_List_Init+0x274>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d045      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a67      	ldr	r2, [pc, #412]	@ (8005ac8 <DMA_List_Init+0x278>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d040      	beq.n	80059b0 <DMA_List_Init+0x160>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a66      	ldr	r2, [pc, #408]	@ (8005acc <DMA_List_Init+0x27c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d03b      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a64      	ldr	r2, [pc, #400]	@ (8005ad0 <DMA_List_Init+0x280>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d036      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a63      	ldr	r2, [pc, #396]	@ (8005ad4 <DMA_List_Init+0x284>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d031      	beq.n	80059b0 <DMA_List_Init+0x160>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a61      	ldr	r2, [pc, #388]	@ (8005ad8 <DMA_List_Init+0x288>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02c      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a60      	ldr	r2, [pc, #384]	@ (8005adc <DMA_List_Init+0x28c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d027      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5e      	ldr	r2, [pc, #376]	@ (8005ae0 <DMA_List_Init+0x290>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <DMA_List_Init+0x160>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a5d      	ldr	r2, [pc, #372]	@ (8005ae4 <DMA_List_Init+0x294>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5b      	ldr	r2, [pc, #364]	@ (8005ae8 <DMA_List_Init+0x298>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <DMA_List_Init+0x160>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a5a      	ldr	r2, [pc, #360]	@ (8005aec <DMA_List_Init+0x29c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a58      	ldr	r2, [pc, #352]	@ (8005af0 <DMA_List_Init+0x2a0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <DMA_List_Init+0x160>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a57      	ldr	r2, [pc, #348]	@ (8005af4 <DMA_List_Init+0x2a4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <DMA_List_Init+0x160>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a55      	ldr	r2, [pc, #340]	@ (8005af8 <DMA_List_Init+0x2a8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <DMA_List_Init+0x160>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a54      	ldr	r2, [pc, #336]	@ (8005afc <DMA_List_Init+0x2ac>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d101      	bne.n	80059b4 <DMA_List_Init+0x164>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <DMA_List_Init+0x166>
 80059b4:	2300      	movs	r3, #0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d004      	beq.n	80059c4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2200      	movs	r2, #0
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80059e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2200      	movs	r2, #0
 8005a00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a36      	ldr	r2, [pc, #216]	@ (8005ae0 <DMA_List_Init+0x290>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <DMA_List_Init+0x202>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a34      	ldr	r2, [pc, #208]	@ (8005ae4 <DMA_List_Init+0x294>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01d      	beq.n	8005a52 <DMA_List_Init+0x202>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a33      	ldr	r2, [pc, #204]	@ (8005ae8 <DMA_List_Init+0x298>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <DMA_List_Init+0x202>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a31      	ldr	r2, [pc, #196]	@ (8005aec <DMA_List_Init+0x29c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <DMA_List_Init+0x202>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a30      	ldr	r2, [pc, #192]	@ (8005af0 <DMA_List_Init+0x2a0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <DMA_List_Init+0x202>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2e      	ldr	r2, [pc, #184]	@ (8005af4 <DMA_List_Init+0x2a4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <DMA_List_Init+0x202>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2d      	ldr	r2, [pc, #180]	@ (8005af8 <DMA_List_Init+0x2a8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <DMA_List_Init+0x202>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8005afc <DMA_List_Init+0x2ac>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d101      	bne.n	8005a56 <DMA_List_Init+0x206>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <DMA_List_Init+0x208>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2200      	movs	r2, #0
 8005a72:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	40020050 	.word	0x40020050
 8005a84:	50020050 	.word	0x50020050
 8005a88:	400200d0 	.word	0x400200d0
 8005a8c:	500200d0 	.word	0x500200d0
 8005a90:	40020150 	.word	0x40020150
 8005a94:	50020150 	.word	0x50020150
 8005a98:	400201d0 	.word	0x400201d0
 8005a9c:	500201d0 	.word	0x500201d0
 8005aa0:	40020250 	.word	0x40020250
 8005aa4:	50020250 	.word	0x50020250
 8005aa8:	400202d0 	.word	0x400202d0
 8005aac:	500202d0 	.word	0x500202d0
 8005ab0:	40020350 	.word	0x40020350
 8005ab4:	50020350 	.word	0x50020350
 8005ab8:	400203d0 	.word	0x400203d0
 8005abc:	500203d0 	.word	0x500203d0
 8005ac0:	40020450 	.word	0x40020450
 8005ac4:	50020450 	.word	0x50020450
 8005ac8:	400204d0 	.word	0x400204d0
 8005acc:	500204d0 	.word	0x500204d0
 8005ad0:	40020550 	.word	0x40020550
 8005ad4:	50020550 	.word	0x50020550
 8005ad8:	400205d0 	.word	0x400205d0
 8005adc:	500205d0 	.word	0x500205d0
 8005ae0:	40020650 	.word	0x40020650
 8005ae4:	50020650 	.word	0x50020650
 8005ae8:	400206d0 	.word	0x400206d0
 8005aec:	500206d0 	.word	0x500206d0
 8005af0:	40020750 	.word	0x40020750
 8005af4:	50020750 	.word	0x50020750
 8005af8:	400207d0 	.word	0x400207d0
 8005afc:	500207d0 	.word	0x500207d0

08005b00 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005b12:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005b18:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005b1e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005b24:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d017      	beq.n	8005b66 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b42:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	051b      	lsls	r3, r3, #20
 8005b4c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005b50:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	3b01      	subs	r3, #1
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005b5e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005b60:	431a      	orrs	r2, r3
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6859      	ldr	r1, [r3, #4]
 8005b6e:	f240 237f 	movw	r3, #639	@ 0x27f
 8005b72:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005b74:	431a      	orrs	r2, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b82:	d10c      	bne.n	8005b9e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d011      	beq.n	8005bb4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	e00a      	b.n	8005bb4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba6:	d105      	bne.n	8005bb4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00f      	beq.n	8005bdc <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005bd4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d04e      	beq.n	8005c90 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	0419      	lsls	r1, r3, #16
 8005bfe:	4b67      	ldr	r3, [pc, #412]	@ (8005d9c <DMA_List_BuildNode+0x29c>)
 8005c00:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005c02:	431a      	orrs	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da06      	bge.n	8005c1e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	609a      	str	r2, [r3, #8]
 8005c1c:	e005      	b.n	8005c2a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da06      	bge.n	8005c40 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	609a      	str	r2, [r3, #8]
 8005c3e:	e005      	b.n	8005c4c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	da06      	bge.n	8005c62 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	e005      	b.n	8005c6e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da06      	bge.n	8005c84 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	609a      	str	r2, [r3, #8]
 8005c82:	e005      	b.n	8005c90 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d059      	beq.n	8005d60 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	da09      	bge.n	8005cc8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb8:	425b      	negs	r3, r3
 8005cba:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	615a      	str	r2, [r3, #20]
 8005cc6:	e005      	b.n	8005cd4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ccc:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da0d      	bge.n	8005cf8 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce0:	425b      	negs	r3, r3
 8005ce2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	0419      	lsls	r1, r3, #16
 8005cec:	4b2c      	ldr	r3, [pc, #176]	@ (8005da0 <DMA_List_BuildNode+0x2a0>)
 8005cee:	400b      	ands	r3, r1
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	615a      	str	r2, [r3, #20]
 8005cf6:	e009      	b.n	8005d0c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d00:	0419      	lsls	r1, r3, #16
 8005d02:	4b27      	ldr	r3, [pc, #156]	@ (8005da0 <DMA_List_BuildNode+0x2a0>)
 8005d04:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005d06:	431a      	orrs	r2, r3
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da08      	bge.n	8005d26 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d18:	425b      	negs	r3, r3
 8005d1a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	619a      	str	r2, [r3, #24]
 8005d24:	e004      	b.n	8005d30 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da0b      	bge.n	8005d50 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3c:	425b      	negs	r3, r3
 8005d3e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	619a      	str	r2, [r3, #24]
 8005d4e:	e007      	b.n	8005d60 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d58:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d006      	beq.n	8005d82 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005d80:	e005      	b.n	8005d8e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	07ff0000 	.word	0x07ff0000
 8005da0:	1fff0000 	.word	0x1fff0000

08005da4 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	0c1b      	lsrs	r3, r3, #16
 8005dbc:	041b      	lsls	r3, r3, #16
 8005dbe:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e00a      	b.n	8005de6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e004      	b.n	8005de6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	0c1b      	lsrs	r3, r3, #16
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e00e      	b.n	8005e42 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	e006      	b.n	8005e42 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8005e54:	2302      	movs	r3, #2
 8005e56:	e00b      	b.n	8005e70 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d001      	beq.n	8005e6e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e000      	b.n	8005e70 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00c      	beq.n	8005eae <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ed4 <DMA_List_GetCLLRNodeInfo+0x58>)
 8005e9e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00f      	beq.n	8005ec6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2207      	movs	r2, #7
 8005eaa:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005eac:	e00b      	b.n	8005ec6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4a08      	ldr	r2, [pc, #32]	@ (8005ed8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005eb8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2205      	movs	r2, #5
 8005ec4:	601a      	str	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	fe010000 	.word	0xfe010000
 8005ed8:	f8010000 	.word	0xf8010000

08005edc <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	@ 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d142      	bne.n	8005f86 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8005f00:	e01d      	b.n	8005f3e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d107      	bne.n	8005f18 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005f12:	4013      	ands	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e00f      	b.n	8005f38 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4413      	add	r3, r2
 8005f28:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005f30:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d3dc      	bcc.n	8005f02 <DMA_List_FindNode+0x26>
 8005f48:	e029      	b.n	8005f9e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d107      	bne.n	8005f60 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	e00f      	b.n	8005f80 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	0c1b      	lsrs	r3, r3, #16
 8005f6a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4413      	add	r3, r2
 8005f70:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005f78:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	3301      	adds	r3, #1
 8005f84:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d206      	bcs.n	8005f9e <DMA_List_FindNode+0xc2>
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005f96:	4013      	ands	r3, r2
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d1d5      	bne.n	8005f4a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005faa:	4013      	ands	r3, r2
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d001      	beq.n	8005fb6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e02b      	b.n	800600e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	0c1b      	lsrs	r3, r3, #16
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	0c1b      	lsrs	r3, r3, #16
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00f      	beq.n	800600c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8005ffc:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	0c1b      	lsrs	r3, r3, #16
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3724      	adds	r7, #36	@ 0x24
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800601a:	b480      	push	{r7}
 800601c:	b085      	sub	sp, #20
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	019a      	lsls	r2, r3, #6
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	431a      	orrs	r2, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	431a      	orrs	r2, r3
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	431a      	orrs	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006040:	bf00      	nop
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800605a:	f7fc fb4b 	bl	80026f4 <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006060:	e008      	b.n	8006074 <DSI_ShortWrite+0x28>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006062:	f7fc fb47 	bl	80026f4 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b64      	cmp	r3, #100	@ 0x64
 800606e:	d901      	bls.n	8006074 <DSI_ShortWrite+0x28>
    {
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e015      	b.n	80060a0 <DSI_ShortWrite+0x54>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0ef      	beq.n	8006062 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	019a      	lsls	r2, r3, #6
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	431a      	orrs	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	ea42 0103 	orr.w	r1, r2, r3
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	041a      	lsls	r2, r3, #16
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80060c0:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	@ 0xc04
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	00da      	lsls	r2, r3, #3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	220e      	movs	r2, #14
 80060e2:	f8c3 2c34 	str.w	r2, [r3, #3124]	@ 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	@ 0xc70
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 021f 	bic.w	r2, r2, #31
 80060f6:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6912      	ldr	r2, [r2, #16]
 8006102:	f8c3 2c70 	str.w	r2, [r3, #3184]	@ 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	220e      	movs	r2, #14
 800610c:	f8c3 2ca0 	str.w	r2, [r3, #3232]	@ 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	@ 0xd08
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 021f 	bic.w	r2, r2, #31
 8006120:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6912      	ldr	r2, [r2, #16]
 800612c:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	220e      	movs	r2, #14
 8006136:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	@ 0xc5c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800614a:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	@ 0xcf4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800615e:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d007      	beq.n	800617a <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800616e:	2b02      	cmp	r3, #2
 8006170:	d003      	beq.n	800617a <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8006176:	2b05      	cmp	r3, #5
 8006178:	d10a      	bne.n	8006190 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 800618e:	e02c      	b.n	80061ea <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 800619c:	2b03      	cmp	r3, #3
 800619e:	d007      	beq.n	80061b0 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d003      	beq.n	80061b0 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 80061ac:	2b06      	cmp	r3, #6
 80061ae:	d10a      	bne.n	80061c6 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2210      	movs	r2, #16
 80061b6:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2210      	movs	r2, #16
 80061c0:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
 80061c4:	e011      	b.n	80061ea <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b07      	cmp	r3, #7
 80061cc:	d003      	beq.n	80061d6 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d109      	bne.n	80061ea <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2c5c 	str.w	r2, [r3, #3164]	@ 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	@ 0xc60
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 020f 	bic.w	r2, r2, #15
 80061fa:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	@ 0xcf8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 020f 	bic.w	r2, r2, #15
 800620e:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6952      	ldr	r2, [r2, #20]
 800621a:	f8c3 2c60 	str.w	r2, [r3, #3168]	@ 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6952      	ldr	r2, [r2, #20]
 8006226:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8

}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8006250:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	075a      	lsls	r2, r3, #29
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8d3 2434 	ldr.w	r2, [r3, #1076]	@ 0x434
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800627c:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	031a      	lsls	r2, r3, #12
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	@ 0x434
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	021a      	lsls	r2, r3, #8
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434

}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e124      	b.n	800651a <HAL_DSI_Init+0x25e>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	7e5b      	ldrb	r3, [r3, #25]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fb fd86 	bl	8001dec <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2203      	movs	r2, #3
 80062e4:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062f6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 80062fa:	2002      	movs	r0, #2
 80062fc:	f7fc fa06 	bl	800270c <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b85      	ldr	r3, [pc, #532]	@ (8006524 <HAL_DSI_Init+0x268>)
 800630e:	400b      	ands	r3, r1
 8006310:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006328:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006330:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	693b      	ldr	r3, [r7, #16]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8006364:	2001      	movs	r0, #1
 8006366:	f7fc f9d1 	bl	800270c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800636a:	f7fc f9c3 	bl	80026f4 <HAL_GetTick>
 800636e:	6178      	str	r0, [r7, #20]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006370:	e008      	b.n	8006384 <HAL_DSI_Init+0xc8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006372:	f7fc f9bf 	bl	80026f4 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b64      	cmp	r3, #100	@ 0x64
 800637e:	d901      	bls.n	8006384 <HAL_DSI_Init+0xc8>
    {
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e0ca      	b.n	800651a <HAL_DSI_Init+0x25e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800638c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0ee      	beq.n	8006372 <HAL_DSI_Init+0xb6>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	605a      	str	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80063c4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0202 	orr.w	r2, r2, #2
 80063e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff fe5b 	bl	80060a8 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff ff1e 	bl	8006236 <DSI_SetWrapperPLLTuning>

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0204 	orr.w	r2, r2, #4
 800640a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0203 	bic.w	r2, r2, #3
 800641e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8006438:	f7fc f95c 	bl	80026f4 <HAL_GetTick>
 800643c:	6178      	str	r0, [r7, #20]
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d121      	bne.n	8006492 <HAL_DSI_Init+0x1d6>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800644e:	e00b      	b.n	8006468 <HAL_DSI_Init+0x1ac>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006450:	f7fc f950 	bl	80026f4 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b64      	cmp	r3, #100	@ 0x64
 800645c:	d904      	bls.n	8006468 <HAL_DSI_Init+0x1ac>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e058      	b.n	800651a <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006470:	f003 0314 	and.w	r3, r3, #20
 8006474:	2b14      	cmp	r3, #20
 8006476:	d1eb      	bne.n	8006450 <HAL_DSI_Init+0x194>
 8006478:	e013      	b.n	80064a2 <HAL_DSI_Init+0x1e6>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800647a:	f7fc f93b 	bl	80026f4 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b64      	cmp	r3, #100	@ 0x64
 8006486:	d904      	bls.n	8006492 <HAL_DSI_Init+0x1d6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	761a      	strb	r2, [r3, #24]

        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e043      	b.n	800651a <HAL_DSI_Init+0x25e>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800649a:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800649e:	2b94      	cmp	r3, #148	@ 0x94
 80064a0:	d1eb      	bne.n	800647a <HAL_DSI_Init+0x1be>


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	621a      	str	r2, [r3, #32]

  __HAL_DSI_DISABLE(hdsi);
 80064bc:	2300      	movs	r3, #0
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0201 	bic.w	r2, r2, #1
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	68bb      	ldr	r3, [r7, #8]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0203 	bic.w	r2, r2, #3
 80064ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f042 0201 	orr.w	r2, r2, #1
 8006508:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	e0000003 	.word	0xe0000003

08006528 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7e1b      	ldrb	r3, [r3, #24]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_DSI_ConfigErrorMonitor+0x16>
 800653a:	2302      	movs	r3, #2
 800653c:	e0ba      	b.n	80066b4 <HAL_DSI_ConfigErrorMonitor+0x18c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8006578:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800657c:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800659a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d009      	beq.n	80065bc <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0202 	orr.w	r2, r2, #2
 80065d6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d009      	beq.n	80065f8 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 020c 	orr.w	r2, r2, #12
 80065f4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d009      	beq.n	8006616 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0210 	orr.w	r2, r2, #16
 8006612:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0220 	orr.w	r2, r2, #32
 8006630:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800664e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800666c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 800668a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80066a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00f      	beq.n	80066f8 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f00c f938 	bl	8012968 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00f      	beq.n	8006728 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2202      	movs	r2, #2
 800671e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f00c f940 	bl	80129a8 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8097 	beq.w	8006860 <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800673a:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4013      	ands	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006752:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	4013      	ands	r3, r2
 8006760:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f043 0201 	orr.w	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	f043 0202 	orr.w	r2, r3, #2
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f043 0204 	orr.w	r2, r3, #4
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f043 0208 	orr.w	r2, r3, #8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d005      	beq.n	80067ce <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	f043 0210 	orr.w	r2, r3, #16
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f043 0220 	orr.w	r2, r3, #32
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f804 	bl	8006868 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	7e1b      	ldrb	r3, [r3, #24]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_DSI_SetGenericVCID+0x16>
 800688e:	2302      	movs	r3, #2
 8006890:	e019      	b.n	80068c6 <HAL_DSI_SetGenericVCID+0x4a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 1203 	bic.w	r2, r2, #196611	@ 0x30003
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	7e1b      	ldrb	r3, [r3, #24]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e0c5      	b.n	8006a74 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0203 	bic.w	r2, r2, #3
 8006934:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68d9      	ldr	r1, [r3, #12]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0207 	bic.w	r2, r2, #7
 8006956:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6959      	ldr	r1, [r3, #20]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	69da      	ldr	r2, [r3, #28]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	431a      	orrs	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 020f 	bic.w	r2, r2, #15
 8006984:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6919      	ldr	r1, [r3, #16]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 020e 	bic.w	r2, r2, #14
 80069a8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	005a      	lsls	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80069f6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0201 	bic.w	r2, r2, #1
 8006a30:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0202 	orr.w	r2, r2, #2
 8006a68:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7e1b      	ldrb	r3, [r3, #24]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_DSI_ConfigCommand+0x16>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e049      	b.n	8006b2a <HAL_DSI_ConfigCommand+0xaa>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b24      	ldr	r3, [pc, #144]	@ (8006b38 <HAL_DSI_ConfigCommand+0xb8>)
 8006aa8:	400b      	ands	r3, r1
 8006aaa:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006aba:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8006ac0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8006ac6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8006acc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8006ad2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8006ad8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8006ade:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8006ae4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8006aea:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8006af0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8006af6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0202 	bic.w	r2, r2, #2
 8006b0e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	fef080ff 	.word	0xfef080ff

08006b3c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7e1b      	ldrb	r3, [r3, #24]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d101      	bne.n	8006b52 <HAL_DSI_ConfigFlowControl+0x16>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e016      	b.n	8006b80 <HAL_DSI_ConfigFlowControl+0x44>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8006b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7e1b      	ldrb	r3, [r3, #24]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_DSI_ConfigPhyTimer+0x16>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e084      	b.n	8006cac <HAL_DSI_ConfigPhyTimer+0x120>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	441a      	add	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	18ca      	adds	r2, r1, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	441a      	add	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4293      	cmp	r3, r2
 8006be4:	bf38      	it	cc
 8006be6:	4613      	movcc	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006bfa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	041a      	lsls	r2, r3, #16
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006c28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6812      	ldr	r2, [r2, #0]
 8006c56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006c5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006c88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	021a      	lsls	r2, r3, #8
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	7e1b      	ldrb	r3, [r3, #24]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_DSI_ConfigHostTimeouts+0x16>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e0b4      	b.n	8006e38 <HAL_DSI_ConfigHostTimeouts+0x180>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006ce2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6899      	ldr	r1, [r3, #8]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	021a      	lsls	r2, r3, #8
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	b292      	uxth	r2, r2
 8006d04:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	041a      	lsls	r2, r3, #16
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	041b      	lsls	r3, r3, #16
 8006d28:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	0c1b      	lsrs	r3, r3, #16
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6812      	ldr	r2, [r2, #0]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	69da      	ldr	r2, [r3, #28]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	0c1b      	lsrs	r3, r3, #16
 8006e14:	041b      	lsls	r3, r3, #16
 8006e16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7e1b      	ldrb	r3, [r3, #24]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_DSI_Start+0x14>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e02b      	b.n	8006eb0 <HAL_DSI_Start+0x6c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	761a      	strb	r2, [r3, #24]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0201 	orr.w	r2, r2, #1
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006e80:	2300      	movs	r3, #0
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0208 	orr.w	r2, r2, #8
 8006e94:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7e1b      	ldrb	r3, [r3, #24]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_DSI_Refresh+0x14>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e010      	b.n	8006ef2 <HAL_DSI_Refresh+0x36>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	761a      	strb	r2, [r3, #24]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0204 	orr.w	r2, r2, #4
 8006ee6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b088      	sub	sp, #32
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
 8006f0a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	7e1b      	ldrb	r3, [r3, #24]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_DSI_ShortWrite+0x1a>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e010      	b.n	8006f3a <HAL_DSI_ShortWrite+0x3c>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	761a      	strb	r2, [r3, #24]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff f88f 	bl	800604c <DSI_ShortWrite>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	761a      	strb	r2, [r3, #24]

  return status;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b08c      	sub	sp, #48	@ 0x30
 8006f46:	af02      	add	r7, sp, #8
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8006f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f52:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	7e1b      	ldrb	r3, [r3, #24]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_DSI_LongWrite+0x1e>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e083      	b.n	8007068 <HAL_DSI_LongWrite+0x126>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f66:	f7fb fbc5 	bl	80026f4 <HAL_GetTick>
 8006f6a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006f6c:	e00b      	b.n	8006f86 <HAL_DSI_LongWrite+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006f6e:	f7fb fbc1 	bl	80026f4 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b64      	cmp	r3, #100	@ 0x64
 8006f7a:	d904      	bls.n	8006f86 <HAL_DSI_LongWrite+0x44>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	761a      	strb	r2, [r3, #24]

      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e070      	b.n	8007068 <HAL_DSI_LongWrite+0x126>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0ec      	beq.n	8006f6e <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	bf28      	it	cs
 8006f9e:	2303      	movcs	r3, #3
 8006fa0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	623b      	str	r3, [r7, #32]
 8006fa6:	e00f      	b.n	8006fc8 <HAL_DSI_LongWrite+0x86>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	4413      	add	r3, r2
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	6a3a      	ldr	r2, [r7, #32]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d3eb      	bcc.n	8006fa8 <HAL_DSI_LongWrite+0x66>
  }
  hdsi->Instance->GPDR = fifoword;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006fe8:	e028      	b.n	800703c <HAL_DSI_LongWrite+0xfa>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	bf28      	it	cs
 8006ff0:	2304      	movcs	r3, #4
 8006ff2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	e00e      	b.n	800701c <HAL_DSI_LongWrite+0xda>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	4413      	add	r3, r2
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	4313      	orrs	r3, r2
 8007014:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	3301      	adds	r3, #1
 800701a:	623b      	str	r3, [r7, #32]
 800701c:	6a3a      	ldr	r2, [r7, #32]
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	429a      	cmp	r2, r3
 8007022:	d3ec      	bcc.n	8006ffe <HAL_DSI_LongWrite+0xbc>
    }
    hdsi->Instance->GPDR = fifoword;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 800702c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4413      	add	r3, r2
 800703a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1d3      	bne.n	8006fea <HAL_DSI_LongWrite+0xa8>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800704a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8007052:	b2db      	uxtb	r3, r3
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4613      	mov	r3, r2
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	f7fe ffdd 	bl	800601a <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3728      	adds	r7, #40	@ 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007070:	b480      	push	{r7}
 8007072:	b089      	sub	sp, #36	@ 0x24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007082:	e1ba      	b.n	80073fa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	2101      	movs	r1, #1
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	fa01 f303 	lsl.w	r3, r1, r3
 8007090:	4013      	ands	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 81aa 	beq.w	80073f4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a55      	ldr	r2, [pc, #340]	@ (80071f8 <HAL_GPIO_Init+0x188>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d15d      	bne.n	8007164 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80070ae:	2201      	movs	r2, #1
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	43db      	mvns	r3, r3
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	4013      	ands	r3, r2
 80070bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 0201 	and.w	r2, r3, #1
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	69fa      	ldr	r2, [r7, #28]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80070d8:	4a48      	ldr	r2, [pc, #288]	@ (80071fc <HAL_GPIO_Init+0x18c>)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070e0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80070e2:	4a46      	ldr	r2, [pc, #280]	@ (80071fc <HAL_GPIO_Init+0x18c>)
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4413      	add	r3, r2
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	08da      	lsrs	r2, r3, #3
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3208      	adds	r2, #8
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	220f      	movs	r2, #15
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	43db      	mvns	r3, r3
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	4013      	ands	r3, r2
 8007110:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	220b      	movs	r2, #11
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	4313      	orrs	r3, r2
 8007124:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	08da      	lsrs	r2, r3, #3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	3208      	adds	r2, #8
 800712e:	69f9      	ldr	r1, [r7, #28]
 8007130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	2203      	movs	r2, #3
 8007140:	fa02 f303 	lsl.w	r3, r2, r3
 8007144:	43db      	mvns	r3, r3
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	4013      	ands	r3, r2
 800714a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	2202      	movs	r2, #2
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	4313      	orrs	r3, r2
 800715a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	e067      	b.n	8007234 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d003      	beq.n	8007174 <HAL_GPIO_Init+0x104>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b12      	cmp	r3, #18
 8007172:	d145      	bne.n	8007200 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	08da      	lsrs	r2, r3, #3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3208      	adds	r2, #8
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	220f      	movs	r2, #15
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	43db      	mvns	r3, r3
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	4013      	ands	r3, r2
 8007196:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	f003 020f 	and.w	r2, r3, #15
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	08da      	lsrs	r2, r3, #3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3208      	adds	r2, #8
 80071ba:	69f9      	ldr	r1, [r7, #28]
 80071bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	2203      	movs	r2, #3
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	43db      	mvns	r3, r3
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	4013      	ands	r3, r2
 80071d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f003 0203 	and.w	r2, r3, #3
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e01e      	b.n	8007234 <HAL_GPIO_Init+0x1c4>
 80071f6:	bf00      	nop
 80071f8:	46020000 	.word	0x46020000
 80071fc:	0802d97c 	.word	0x0802d97c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	2203      	movs	r2, #3
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	4013      	ands	r3, r2
 8007216:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 0203 	and.w	r2, r3, #3
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	fa02 f303 	lsl.w	r3, r2, r3
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	4313      	orrs	r3, r2
 800722c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d00b      	beq.n	8007254 <HAL_GPIO_Init+0x1e4>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d007      	beq.n	8007254 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007248:	2b11      	cmp	r3, #17
 800724a:	d003      	beq.n	8007254 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b12      	cmp	r3, #18
 8007252:	d130      	bne.n	80072b6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	2203      	movs	r2, #3
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	43db      	mvns	r3, r3
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	4013      	ands	r3, r2
 800726a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	fa02 f303 	lsl.w	r3, r2, r3
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	4313      	orrs	r3, r2
 800727c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800728a:	2201      	movs	r2, #1
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	fa02 f303 	lsl.w	r3, r2, r3
 8007292:	43db      	mvns	r3, r3
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	4013      	ands	r3, r2
 8007298:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	f003 0201 	and.w	r2, r3, #1
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	fa02 f303 	lsl.w	r3, r2, r3
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d017      	beq.n	80072ee <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	2203      	movs	r2, #3
 80072ca:	fa02 f303 	lsl.w	r3, r2, r3
 80072ce:	43db      	mvns	r3, r3
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	4013      	ands	r3, r2
 80072d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	69fa      	ldr	r2, [r7, #28]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d07c      	beq.n	80073f4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80072fa:	4a47      	ldr	r2, [pc, #284]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	089b      	lsrs	r3, r3, #2
 8007300:	3318      	adds	r3, #24
 8007302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007306:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	220f      	movs	r2, #15
 8007312:	fa02 f303 	lsl.w	r3, r2, r3
 8007316:	43db      	mvns	r3, r3
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	4013      	ands	r3, r2
 800731c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0a9a      	lsrs	r2, r3, #10
 8007322:	4b3e      	ldr	r3, [pc, #248]	@ (800741c <HAL_GPIO_Init+0x3ac>)
 8007324:	4013      	ands	r3, r2
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	f002 0203 	and.w	r2, r2, #3
 800732c:	00d2      	lsls	r2, r2, #3
 800732e:	4093      	lsls	r3, r2
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	4313      	orrs	r3, r2
 8007334:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007336:	4938      	ldr	r1, [pc, #224]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	089b      	lsrs	r3, r3, #2
 800733c:	3318      	adds	r3, #24
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007344:	4b34      	ldr	r3, [pc, #208]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	43db      	mvns	r3, r3
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	4013      	ands	r3, r2
 8007352:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007368:	4a2b      	ldr	r2, [pc, #172]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800736e:	4b2a      	ldr	r3, [pc, #168]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	43db      	mvns	r3, r3
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	4013      	ands	r3, r2
 800737c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007392:	4a21      	ldr	r2, [pc, #132]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007398:	4b1f      	ldr	r3, [pc, #124]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 800739a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800739e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	43db      	mvns	r3, r3
 80073a4:	69fa      	ldr	r2, [r7, #28]
 80073a6:	4013      	ands	r3, r2
 80073a8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80073be:	4a16      	ldr	r2, [pc, #88]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80073c6:	4b14      	ldr	r3, [pc, #80]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 80073c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	4013      	ands	r3, r2
 80073d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80073ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007418 <HAL_GPIO_Init+0x3a8>)
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	3301      	adds	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	fa22 f303 	lsr.w	r3, r2, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f ae3d 	bne.w	8007084 <HAL_GPIO_Init+0x14>
  }
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	3724      	adds	r7, #36	@ 0x24
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	46022000 	.word	0x46022000
 800741c:	002f7f7f 	.word	0x002f7f7f

08007420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	807b      	strh	r3, [r7, #2]
 800742c:	4613      	mov	r3, r2
 800742e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007430:	787b      	ldrb	r3, [r7, #1]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007436:	887a      	ldrh	r2, [r7, #2]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800743c:	e002      	b.n	8007444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800743e:	887a      	ldrh	r2, [r7, #2]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e01c      	b.n	800749c <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	795b      	ldrb	r3, [r3, #5]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fa fd52 	bl	8001f14 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	791b      	ldrb	r3, [r3, #4]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_GPU2D_Init+0x32>
 800747e:	2302      	movs	r3, #2
 8007480:	e00c      	b.n	800749c <HAL_GPU2D_Init+0x4c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_GPU2D_ReadRegister>:
  *                   the configuration information for the GPU2D.
  * @param  offset    The register offset from GPU2D base address to read.
  * @retval Register value
  */
uint32_t HAL_GPU2D_ReadRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since reading a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  value = GPU2D_ReadReg(hgpu2d->Instance, offset);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	4413      	add	r3, r2
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60fb      	str	r3, [r7, #12]

  return value;
 80074ba:	68fb      	ldr	r3, [r7, #12]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_GPU2D_WriteRegister>:
  * @param  offset    The register offset from GPU2D base address to write.
  * @param  value     The value to be written to provided register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_WriteRegister(GPU2D_HandleTypeDef *hgpu2d, uint32_t offset, uint32_t value)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));
  assert_param(IS_GPU2D_OFFSET(offset));

  /* No locking is required since writing a register is an atomic operation
   * and doesn't incur a state change in hal_gpu2d. */
  GPU2D_WriteReg(hgpu2d->Instance, offset, value);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4413      	add	r3, r2
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e08d      	b.n	800761e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fa fd2e 	bl	8001f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2224      	movs	r2, #36	@ 0x24
 8007520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007540:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007550:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d107      	bne.n	800756a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007566:	609a      	str	r2, [r3, #8]
 8007568:	e006      	b.n	8007578 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007576:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d108      	bne.n	8007592 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800758e:	605a      	str	r2, [r3, #4]
 8007590:	e007      	b.n	80075a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80075b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	69d9      	ldr	r1, [r3, #28]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b20      	cmp	r3, #32
 800763a:	d138      	bne.n	80076ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007646:	2302      	movs	r3, #2
 8007648:	e032      	b.n	80076b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2224      	movs	r2, #36	@ 0x24
 8007656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007678:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6819      	ldr	r1, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0201 	orr.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	e000      	b.n	80076b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076ae:	2302      	movs	r3, #2
  }
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d139      	bne.n	8007746 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076dc:	2302      	movs	r3, #2
 80076de:	e033      	b.n	8007748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2224      	movs	r2, #36	@ 0x24
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800770e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e000      	b.n	8007748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007746:	2302      	movs	r3, #2
  }
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8007760:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
 8007770:	e007      	b.n	8007782 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8007772:	4b07      	ldr	r3, [pc, #28]	@ (8007790 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f023 0204 	bic.w	r2, r3, #4
 800777a:	4905      	ldr	r1, [pc, #20]	@ (8007790 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4313      	orrs	r3, r2
 8007780:	600b      	str	r3, [r1, #0]
  }

  return status;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40030400 	.word	0x40030400

08007794 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007798:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <HAL_ICACHE_Enable+0x1c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a04      	ldr	r2, [pc, #16]	@ (80077b0 <HAL_ICACHE_Enable+0x1c>)
 800779e:	f043 0301 	orr.w	r3, r3, #1
 80077a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	40030400 	.word	0x40030400

080077b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e0bf      	b.n	8007946 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fa fc46 	bl	800206c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80077f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6999      	ldr	r1, [r3, #24]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800780c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6899      	ldr	r1, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b4a      	ldr	r3, [pc, #296]	@ (8007950 <HAL_LTDC_Init+0x19c>)
 8007828:	400b      	ands	r3, r1
 800782a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	041b      	lsls	r3, r3, #16
 8007832:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6899      	ldr	r1, [r3, #8]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	431a      	orrs	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68d9      	ldr	r1, [r3, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	4b3e      	ldr	r3, [pc, #248]	@ (8007950 <HAL_LTDC_Init+0x19c>)
 8007856:	400b      	ands	r3, r1
 8007858:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	041b      	lsls	r3, r3, #16
 8007860:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68d9      	ldr	r1, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6919      	ldr	r1, [r3, #16]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	4b33      	ldr	r3, [pc, #204]	@ (8007950 <HAL_LTDC_Init+0x19c>)
 8007884:	400b      	ands	r3, r1
 8007886:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788c:	041b      	lsls	r3, r3, #16
 800788e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6919      	ldr	r1, [r3, #16]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6959      	ldr	r1, [r3, #20]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b27      	ldr	r3, [pc, #156]	@ (8007950 <HAL_LTDC_Init+0x19c>)
 80078b2:	400b      	ands	r3, r1
 80078b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ba:	041b      	lsls	r3, r3, #16
 80078bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6959      	ldr	r1, [r3, #20]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80078da:	021b      	lsls	r3, r3, #8
 80078dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80078e4:	041b      	lsls	r3, r3, #16
 80078e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80078f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0206 	orr.w	r2, r2, #6
 8007922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0201 	orr.w	r2, r2, #1
 8007932:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	f000f800 	.word	0xf000f800

08007954 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007954:	b5b0      	push	{r4, r5, r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_LTDC_ConfigLayer+0x1a>
 800796a:	2302      	movs	r3, #2
 800796c:	e02c      	b.n	80079c8 <HAL_LTDC_ConfigLayer+0x74>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2202      	movs	r2, #2
 800797a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2134      	movs	r1, #52	@ 0x34
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	4413      	add	r3, r2
 800798a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4614      	mov	r4, r2
 8007992:	461d      	mov	r5, r3
 8007994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800799a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800799c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800799e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f840 	bl	8007a2e <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2201      	movs	r2, #1
 80079b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bdb0      	pop	{r4, r5, r7, pc}

080079d0 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_LTDC_Reload+0x18>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e01c      	b.n	8007a22 <HAL_LTDC_Reload+0x52>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0208 	orr.w	r2, r2, #8
 8007a06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b089      	sub	sp, #36	@ 0x24
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a4a:	4413      	add	r3, r2
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	01db      	lsls	r3, r3, #7
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3384      	adds	r3, #132	@ 0x84
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	4611      	mov	r1, r2
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	01d2      	lsls	r2, r2, #7
 8007a6a:	440a      	add	r2, r1
 8007a6c:	3284      	adds	r2, #132	@ 0x84
 8007a6e:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8007a72:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007a84:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007a86:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	01db      	lsls	r3, r3, #7
 8007a92:	440b      	add	r3, r1
 8007a94:	3384      	adds	r3, #132	@ 0x84
 8007a96:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007a9c:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aac:	4413      	add	r3, r2
 8007aae:	041b      	lsls	r3, r3, #16
 8007ab0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	01db      	lsls	r3, r3, #7
 8007abc:	4413      	add	r3, r2
 8007abe:	3384      	adds	r3, #132	@ 0x84
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	01d2      	lsls	r2, r2, #7
 8007acc:	440a      	add	r2, r1
 8007ace:	3284      	adds	r2, #132	@ 0x84
 8007ad0:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8007ad4:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ae4:	4413      	add	r3, r2
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	01db      	lsls	r3, r3, #7
 8007af2:	440b      	add	r3, r1
 8007af4:	3384      	adds	r3, #132	@ 0x84
 8007af6:	4619      	mov	r1, r3
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	01db      	lsls	r3, r3, #7
 8007b08:	4413      	add	r3, r2
 8007b0a:	3384      	adds	r3, #132	@ 0x84
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	6812      	ldr	r2, [r2, #0]
 8007b12:	4611      	mov	r1, r2
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	01d2      	lsls	r2, r2, #7
 8007b18:	440a      	add	r2, r1
 8007b1a:	3284      	adds	r2, #132	@ 0x84
 8007b1c:	f023 0307 	bic.w	r3, r3, #7
 8007b20:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	01db      	lsls	r3, r3, #7
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3384      	adds	r3, #132	@ 0x84
 8007b30:	461a      	mov	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007b48:	041b      	lsls	r3, r3, #16
 8007b4a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	061b      	lsls	r3, r3, #24
 8007b52:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	01db      	lsls	r3, r3, #7
 8007b6e:	440b      	add	r3, r1
 8007b70:	3384      	adds	r3, #132	@ 0x84
 8007b72:	4619      	mov	r1, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	01db      	lsls	r3, r3, #7
 8007b84:	4413      	add	r3, r2
 8007b86:	3384      	adds	r3, #132	@ 0x84
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	01d2      	lsls	r2, r2, #7
 8007b94:	440a      	add	r2, r1
 8007b96:	3284      	adds	r2, #132	@ 0x84
 8007b98:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007b9c:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	01db      	lsls	r3, r3, #7
 8007ba8:	4413      	add	r3, r2
 8007baa:	3384      	adds	r3, #132	@ 0x84
 8007bac:	461a      	mov	r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	01db      	lsls	r3, r3, #7
 8007bbe:	4413      	add	r3, r2
 8007bc0:	3384      	adds	r3, #132	@ 0x84
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	01d2      	lsls	r2, r2, #7
 8007bce:	440a      	add	r2, r1
 8007bd0:	3284      	adds	r2, #132	@ 0x84
 8007bd2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007bd6:	f023 0307 	bic.w	r3, r3, #7
 8007bda:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	68f9      	ldr	r1, [r7, #12]
 8007be6:	6809      	ldr	r1, [r1, #0]
 8007be8:	4608      	mov	r0, r1
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	01c9      	lsls	r1, r1, #7
 8007bee:	4401      	add	r1, r0
 8007bf0:	3184      	adds	r1, #132	@ 0x84
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	01db      	lsls	r3, r3, #7
 8007c00:	4413      	add	r3, r2
 8007c02:	3384      	adds	r3, #132	@ 0x84
 8007c04:	461a      	mov	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8007c14:	2304      	movs	r3, #4
 8007c16:	61fb      	str	r3, [r7, #28]
 8007c18:	e01b      	b.n	8007c52 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d102      	bne.n	8007c28 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8007c22:	2303      	movs	r3, #3
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	e014      	b.n	8007c52 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d00b      	beq.n	8007c48 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d007      	beq.n	8007c48 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d003      	beq.n	8007c48 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007c44:	2b07      	cmp	r3, #7
 8007c46:	d102      	bne.n	8007c4e <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	e001      	b.n	8007c52 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	461a      	mov	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	01db      	lsls	r3, r3, #7
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3384      	adds	r3, #132	@ 0x84
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	4611      	mov	r1, r2
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	01d2      	lsls	r2, r2, #7
 8007c6c:	440a      	add	r2, r1
 8007c6e:	3284      	adds	r2, #132	@ 0x84
 8007c70:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007c74:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6859      	ldr	r1, [r3, #4]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1acb      	subs	r3, r1, r3
 8007c8c:	69f9      	ldr	r1, [r7, #28]
 8007c8e:	fb01 f303 	mul.w	r3, r1, r3
 8007c92:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007c94:	68f9      	ldr	r1, [r7, #12]
 8007c96:	6809      	ldr	r1, [r1, #0]
 8007c98:	4608      	mov	r0, r1
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	01c9      	lsls	r1, r1, #7
 8007c9e:	4401      	add	r1, r0
 8007ca0:	3184      	adds	r1, #132	@ 0x84
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	01db      	lsls	r3, r3, #7
 8007cb0:	4413      	add	r3, r2
 8007cb2:	3384      	adds	r3, #132	@ 0x84
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	6812      	ldr	r2, [r2, #0]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	01d2      	lsls	r2, r2, #7
 8007cc0:	440a      	add	r2, r1
 8007cc2:	3284      	adds	r2, #132	@ 0x84
 8007cc4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007cc8:	f023 0307 	bic.w	r3, r3, #7
 8007ccc:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	01db      	lsls	r3, r3, #7
 8007cd8:	4413      	add	r3, r2
 8007cda:	3384      	adds	r3, #132	@ 0x84
 8007cdc:	461a      	mov	r2, r3
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	01db      	lsls	r3, r3, #7
 8007cee:	4413      	add	r3, r2
 8007cf0:	3384      	adds	r3, #132	@ 0x84
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	01d2      	lsls	r2, r2, #7
 8007cfe:	440a      	add	r2, r1
 8007d00:	3284      	adds	r2, #132	@ 0x84
 8007d02:	f043 0301 	orr.w	r3, r3, #1
 8007d06:	6013      	str	r3, [r2, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	3724      	adds	r7, #36	@ 0x24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007d18:	4b05      	ldr	r3, [pc, #20]	@ (8007d30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1c:	4a04      	ldr	r2, [pc, #16]	@ (8007d30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007d24:	bf00      	nop
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	46020800 	.word	0x46020800

08007d34 <HAL_PWR_DisableBkUpAccess>:
  *         register RCC_BDCR, RTC registers, TAMP registers, backup registers
  *         and backup SRAM).
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007d34:	b480      	push	{r7}
 8007d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007d38:	4b05      	ldr	r3, [pc, #20]	@ (8007d50 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3c:	4a04      	ldr	r2, [pc, #16]	@ (8007d50 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	46020800 	.word	0x46020800

08007d54 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007d5c:	4b39      	ldr	r3, [pc, #228]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007d64:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d10b      	bne.n	8007d86 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d74:	d905      	bls.n	8007d82 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007d76:	4b33      	ldr	r3, [pc, #204]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	4a32      	ldr	r2, [pc, #200]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d80:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e057      	b.n	8007e36 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d8c:	d90a      	bls.n	8007da4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007da0:	60d3      	str	r3, [r2, #12]
 8007da2:	e007      	b.n	8007db4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007da4:	4b27      	ldr	r3, [pc, #156]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007dac:	4925      	ldr	r1, [pc, #148]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007db4:	4b24      	ldr	r3, [pc, #144]	@ (8007e48 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a24      	ldr	r2, [pc, #144]	@ (8007e4c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007dba:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbe:	099b      	lsrs	r3, r3, #6
 8007dc0:	2232      	movs	r2, #50	@ 0x32
 8007dc2:	fb02 f303 	mul.w	r3, r2, r3
 8007dc6:	4a21      	ldr	r2, [pc, #132]	@ (8007e4c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dcc:	099b      	lsrs	r3, r3, #6
 8007dce:	3301      	adds	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007dd2:	e002      	b.n	8007dda <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007dda:	4b1a      	ldr	r3, [pc, #104]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d102      	bne.n	8007dec <HAL_PWREx_ControlVoltageScaling+0x98>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f3      	bne.n	8007dd4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01b      	beq.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007df2:	4b15      	ldr	r3, [pc, #84]	@ (8007e48 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a15      	ldr	r2, [pc, #84]	@ (8007e4c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007df8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfc:	099b      	lsrs	r3, r3, #6
 8007dfe:	2232      	movs	r2, #50	@ 0x32
 8007e00:	fb02 f303 	mul.w	r3, r2, r3
 8007e04:	4a11      	ldr	r2, [pc, #68]	@ (8007e4c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	099b      	lsrs	r3, r3, #6
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007e10:	e002      	b.n	8007e18 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007e18:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f3      	bne.n	8007e12 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e000      	b.n	8007e36 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	46020800 	.word	0x46020800
 8007e48:	20000004 	.word	0x20000004
 8007e4c:	10624dd3 	.word	0x10624dd3

08007e50 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8007e54:	4b04      	ldr	r3, [pc, #16]	@ (8007e68 <HAL_PWREx_GetVoltageRange+0x18>)
 8007e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	46020800 	.word	0x46020800

08007e6c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007e74:	4b22      	ldr	r3, [pc, #136]	@ (8007f00 <HAL_PWREx_ConfigSupply+0x94>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a22      	ldr	r2, [pc, #136]	@ (8007f04 <HAL_PWREx_ConfigSupply+0x98>)
 8007e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7e:	099b      	lsrs	r3, r3, #6
 8007e80:	2232      	movs	r2, #50	@ 0x32
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
 8007e86:	4a1f      	ldr	r2, [pc, #124]	@ (8007f04 <HAL_PWREx_ConfigSupply+0x98>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	099b      	lsrs	r3, r3, #6
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d113      	bne.n	8007ec0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007e98:	4b1b      	ldr	r3, [pc, #108]	@ (8007f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8007f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8007e9e:	f023 0302 	bic.w	r3, r3, #2
 8007ea2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007ea4:	e002      	b.n	8007eac <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007eac:	4b16      	ldr	r3, [pc, #88]	@ (8007f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8007eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d116      	bne.n	8007ee6 <HAL_PWREx_ConfigSupply+0x7a>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1f3      	bne.n	8007ea6 <HAL_PWREx_ConfigSupply+0x3a>
 8007ebe:	e012      	b.n	8007ee6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007ec0:	4b11      	ldr	r3, [pc, #68]	@ (8007f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	4a10      	ldr	r2, [pc, #64]	@ (8007f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007ecc:	e002      	b.n	8007ed4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8007f08 <HAL_PWREx_ConfigSupply+0x9c>)
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <HAL_PWREx_ConfigSupply+0x7a>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f3      	bne.n	8007ece <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e000      	b.n	8007ef2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	20000004 	.word	0x20000004
 8007f04:	10624dd3 	.word	0x10624dd3
 8007f08:	46020800 	.word	0x46020800

08007f0c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007f10:	4b05      	ldr	r3, [pc, #20]	@ (8007f28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	4a04      	ldr	r2, [pc, #16]	@ (8007f28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007f16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f1a:	6113      	str	r3, [r2, #16]
}
 8007f1c:	bf00      	nop
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	46020800 	.word	0x46020800

08007f2c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8007f30:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <HAL_PWREx_EnableVddA+0x1c>)
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	4a04      	ldr	r2, [pc, #16]	@ (8007f48 <HAL_PWREx_EnableVddA+0x1c>)
 8007f36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f3a:	6113      	str	r3, [r2, #16]
}
 8007f3c:	bf00      	nop
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	46020800 	.word	0x46020800

08007f4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	@ 0x38
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	f000 bec8 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f66:	4b99      	ldr	r3, [pc, #612]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
 8007f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f70:	4b96      	ldr	r3, [pc, #600]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8007f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0310 	and.w	r3, r3, #16
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 816c 	beq.w	8008260 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <HAL_RCC_OscConfig+0x52>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	2b0c      	cmp	r3, #12
 8007f92:	f040 80de 	bne.w	8008152 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	f040 80da 	bne.w	8008152 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f000 bea5 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fb0:	4b86      	ldr	r3, [pc, #536]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x7a>
 8007fbc:	4b83      	ldr	r3, [pc, #524]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007fc4:	e005      	b.n	8007fd2 <HAL_RCC_OscConfig+0x86>
 8007fc6:	4b81      	ldr	r3, [pc, #516]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8007fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d255      	bcs.n	8008082 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 fa3d 	bl	8009460 <RCC_SetFlashLatencyFromMSIRange>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f000 be82 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007ff2:	4b76      	ldr	r3, [pc, #472]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	4a75      	ldr	r2, [pc, #468]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8007ff8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ffc:	6093      	str	r3, [r2, #8]
 8007ffe:	4b73      	ldr	r3, [pc, #460]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800a:	4970      	ldr	r1, [pc, #448]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 800800c:	4313      	orrs	r3, r2
 800800e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008014:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008018:	d309      	bcc.n	800802e <HAL_RCC_OscConfig+0xe2>
 800801a:	4b6c      	ldr	r3, [pc, #432]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f023 021f 	bic.w	r2, r3, #31
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	4969      	ldr	r1, [pc, #420]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008028:	4313      	orrs	r3, r2
 800802a:	60cb      	str	r3, [r1, #12]
 800802c:	e07e      	b.n	800812c <HAL_RCC_OscConfig+0x1e0>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008032:	2b00      	cmp	r3, #0
 8008034:	da0a      	bge.n	800804c <HAL_RCC_OscConfig+0x100>
 8008036:	4b65      	ldr	r3, [pc, #404]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	015b      	lsls	r3, r3, #5
 8008044:	4961      	ldr	r1, [pc, #388]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008046:	4313      	orrs	r3, r2
 8008048:	60cb      	str	r3, [r1, #12]
 800804a:	e06f      	b.n	800812c <HAL_RCC_OscConfig+0x1e0>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008054:	d30a      	bcc.n	800806c <HAL_RCC_OscConfig+0x120>
 8008056:	4b5d      	ldr	r3, [pc, #372]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	029b      	lsls	r3, r3, #10
 8008064:	4959      	ldr	r1, [pc, #356]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008066:	4313      	orrs	r3, r2
 8008068:	60cb      	str	r3, [r1, #12]
 800806a:	e05f      	b.n	800812c <HAL_RCC_OscConfig+0x1e0>
 800806c:	4b57      	ldr	r3, [pc, #348]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	03db      	lsls	r3, r3, #15
 800807a:	4954      	ldr	r1, [pc, #336]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 800807c:	4313      	orrs	r3, r2
 800807e:	60cb      	str	r3, [r1, #12]
 8008080:	e054      	b.n	800812c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008082:	4b52      	ldr	r3, [pc, #328]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	4a51      	ldr	r2, [pc, #324]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800808c:	6093      	str	r3, [r2, #8]
 800808e:	4b4f      	ldr	r3, [pc, #316]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809a:	494c      	ldr	r1, [pc, #304]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 800809c:	4313      	orrs	r3, r2
 800809e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80080a8:	d309      	bcc.n	80080be <HAL_RCC_OscConfig+0x172>
 80080aa:	4b48      	ldr	r3, [pc, #288]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f023 021f 	bic.w	r2, r3, #31
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	4945      	ldr	r1, [pc, #276]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60cb      	str	r3, [r1, #12]
 80080bc:	e028      	b.n	8008110 <HAL_RCC_OscConfig+0x1c4>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	da0a      	bge.n	80080dc <HAL_RCC_OscConfig+0x190>
 80080c6:	4b41      	ldr	r3, [pc, #260]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	015b      	lsls	r3, r3, #5
 80080d4:	493d      	ldr	r1, [pc, #244]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60cb      	str	r3, [r1, #12]
 80080da:	e019      	b.n	8008110 <HAL_RCC_OscConfig+0x1c4>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e4:	d30a      	bcc.n	80080fc <HAL_RCC_OscConfig+0x1b0>
 80080e6:	4b39      	ldr	r3, [pc, #228]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	029b      	lsls	r3, r3, #10
 80080f4:	4935      	ldr	r1, [pc, #212]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60cb      	str	r3, [r1, #12]
 80080fa:	e009      	b.n	8008110 <HAL_RCC_OscConfig+0x1c4>
 80080fc:	4b33      	ldr	r3, [pc, #204]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	03db      	lsls	r3, r3, #15
 800810a:	4930      	ldr	r1, [pc, #192]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 800810c:	4313      	orrs	r3, r2
 800810e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811a:	4618      	mov	r0, r3
 800811c:	f001 f9a0 	bl	8009460 <RCC_SetFlashLatencyFromMSIRange>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	f000 bde5 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800812c:	f001 f8de 	bl	80092ec <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008130:	4b27      	ldr	r3, [pc, #156]	@ (80081d0 <HAL_RCC_OscConfig+0x284>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4618      	mov	r0, r3
 8008136:	f7fa f8ab 	bl	8002290 <HAL_InitTick>
 800813a:	4603      	mov	r3, r0
 800813c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8008140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 808a 	beq.w	800825e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800814a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800814e:	f000 bdd2 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d066      	beq.n	8008228 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800815a:	4b1c      	ldr	r3, [pc, #112]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1b      	ldr	r2, [pc, #108]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008166:	f7fa fac5 	bl	80026f4 <HAL_GetTick>
 800816a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800816c:	e009      	b.n	8008182 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800816e:	f7fa fac1 	bl	80026f4 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d902      	bls.n	8008182 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	f000 bdba 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008182:	4b12      	ldr	r3, [pc, #72]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0ef      	beq.n	800816e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800818e:	4b0f      	ldr	r3, [pc, #60]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	4a0e      	ldr	r2, [pc, #56]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 8008194:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008198:	6093      	str	r3, [r2, #8]
 800819a:	4b0c      	ldr	r3, [pc, #48]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a6:	4909      	ldr	r1, [pc, #36]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80081b4:	d30e      	bcc.n	80081d4 <HAL_RCC_OscConfig+0x288>
 80081b6:	4b05      	ldr	r3, [pc, #20]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f023 021f 	bic.w	r2, r3, #31
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	4902      	ldr	r1, [pc, #8]	@ (80081cc <HAL_RCC_OscConfig+0x280>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60cb      	str	r3, [r1, #12]
 80081c8:	e04a      	b.n	8008260 <HAL_RCC_OscConfig+0x314>
 80081ca:	bf00      	nop
 80081cc:	46020c00 	.word	0x46020c00
 80081d0:	20000008 	.word	0x20000008
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da0a      	bge.n	80081f2 <HAL_RCC_OscConfig+0x2a6>
 80081dc:	4b98      	ldr	r3, [pc, #608]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	015b      	lsls	r3, r3, #5
 80081ea:	4995      	ldr	r1, [pc, #596]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60cb      	str	r3, [r1, #12]
 80081f0:	e036      	b.n	8008260 <HAL_RCC_OscConfig+0x314>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081fa:	d30a      	bcc.n	8008212 <HAL_RCC_OscConfig+0x2c6>
 80081fc:	4b90      	ldr	r3, [pc, #576]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	029b      	lsls	r3, r3, #10
 800820a:	498d      	ldr	r1, [pc, #564]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800820c:	4313      	orrs	r3, r2
 800820e:	60cb      	str	r3, [r1, #12]
 8008210:	e026      	b.n	8008260 <HAL_RCC_OscConfig+0x314>
 8008212:	4b8b      	ldr	r3, [pc, #556]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	03db      	lsls	r3, r3, #15
 8008220:	4987      	ldr	r1, [pc, #540]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008222:	4313      	orrs	r3, r2
 8008224:	60cb      	str	r3, [r1, #12]
 8008226:	e01b      	b.n	8008260 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008228:	4b85      	ldr	r3, [pc, #532]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a84      	ldr	r2, [pc, #528]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800822e:	f023 0301 	bic.w	r3, r3, #1
 8008232:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008234:	f7fa fa5e 	bl	80026f4 <HAL_GetTick>
 8008238:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800823a:	e009      	b.n	8008250 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800823c:	f7fa fa5a 	bl	80026f4 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d902      	bls.n	8008250 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	f000 bd53 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008250:	4b7b      	ldr	r3, [pc, #492]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1ef      	bne.n	800823c <HAL_RCC_OscConfig+0x2f0>
 800825c:	e000      	b.n	8008260 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800825e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 808b 	beq.w	8008384 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800826e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008270:	2b08      	cmp	r3, #8
 8008272:	d005      	beq.n	8008280 <HAL_RCC_OscConfig+0x334>
 8008274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008276:	2b0c      	cmp	r3, #12
 8008278:	d109      	bne.n	800828e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800827a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827c:	2b03      	cmp	r3, #3
 800827e:	d106      	bne.n	800828e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d17d      	bne.n	8008384 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	f000 bd34 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008296:	d106      	bne.n	80082a6 <HAL_RCC_OscConfig+0x35a>
 8008298:	4b69      	ldr	r3, [pc, #420]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a68      	ldr	r2, [pc, #416]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800829e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	e041      	b.n	800832a <HAL_RCC_OscConfig+0x3de>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082ae:	d112      	bne.n	80082d6 <HAL_RCC_OscConfig+0x38a>
 80082b0:	4b63      	ldr	r3, [pc, #396]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a62      	ldr	r2, [pc, #392]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	4b60      	ldr	r3, [pc, #384]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a5f      	ldr	r2, [pc, #380]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082c2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	4b5d      	ldr	r3, [pc, #372]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a5c      	ldr	r2, [pc, #368]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e029      	b.n	800832a <HAL_RCC_OscConfig+0x3de>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80082de:	d112      	bne.n	8008306 <HAL_RCC_OscConfig+0x3ba>
 80082e0:	4b57      	ldr	r3, [pc, #348]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a56      	ldr	r2, [pc, #344]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	4b54      	ldr	r3, [pc, #336]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a53      	ldr	r2, [pc, #332]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	4b51      	ldr	r3, [pc, #324]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a50      	ldr	r2, [pc, #320]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80082fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	e011      	b.n	800832a <HAL_RCC_OscConfig+0x3de>
 8008306:	4b4e      	ldr	r3, [pc, #312]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a4d      	ldr	r2, [pc, #308]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800830c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	4b4b      	ldr	r3, [pc, #300]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a4a      	ldr	r2, [pc, #296]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008318:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	4b48      	ldr	r3, [pc, #288]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a47      	ldr	r2, [pc, #284]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008324:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008328:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d014      	beq.n	800835c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8008332:	f7fa f9df 	bl	80026f4 <HAL_GetTick>
 8008336:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008338:	e009      	b.n	800834e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800833a:	f7fa f9db 	bl	80026f4 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b64      	cmp	r3, #100	@ 0x64
 8008346:	d902      	bls.n	800834e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	f000 bcd4 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800834e:	4b3c      	ldr	r3, [pc, #240]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0ef      	beq.n	800833a <HAL_RCC_OscConfig+0x3ee>
 800835a:	e013      	b.n	8008384 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800835c:	f7fa f9ca 	bl	80026f4 <HAL_GetTick>
 8008360:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008362:	e009      	b.n	8008378 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008364:	f7fa f9c6 	bl	80026f4 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b64      	cmp	r3, #100	@ 0x64
 8008370:	d902      	bls.n	8008378 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	f000 bcbf 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008378:	4b31      	ldr	r3, [pc, #196]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1ef      	bne.n	8008364 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d05f      	beq.n	8008450 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008392:	2b04      	cmp	r3, #4
 8008394:	d005      	beq.n	80083a2 <HAL_RCC_OscConfig+0x456>
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d114      	bne.n	80083c6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800839c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d111      	bne.n	80083c6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	f000 bca3 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80083b0:	4b23      	ldr	r3, [pc, #140]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	041b      	lsls	r3, r3, #16
 80083be:	4920      	ldr	r1, [pc, #128]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80083c4:	e044      	b.n	8008450 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d024      	beq.n	8008418 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80083ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80083d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80083da:	f7fa f98b 	bl	80026f4 <HAL_GetTick>
 80083de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083e0:	e009      	b.n	80083f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083e2:	f7fa f987 	bl	80026f4 <HAL_GetTick>
 80083e6:	4602      	mov	r2, r0
 80083e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d902      	bls.n	80083f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	f000 bc80 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083f6:	4b12      	ldr	r3, [pc, #72]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0ef      	beq.n	80083e2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008402:	4b0f      	ldr	r3, [pc, #60]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	041b      	lsls	r3, r3, #16
 8008410:	490b      	ldr	r1, [pc, #44]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 8008412:	4313      	orrs	r3, r2
 8008414:	610b      	str	r3, [r1, #16]
 8008416:	e01b      	b.n	8008450 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008418:	4b09      	ldr	r3, [pc, #36]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a08      	ldr	r2, [pc, #32]	@ (8008440 <HAL_RCC_OscConfig+0x4f4>)
 800841e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008422:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008424:	f7fa f966 	bl	80026f4 <HAL_GetTick>
 8008428:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800842a:	e00b      	b.n	8008444 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800842c:	f7fa f962 	bl	80026f4 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d904      	bls.n	8008444 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	f000 bc5b 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
 8008440:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008444:	4baf      	ldr	r3, [pc, #700]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1ed      	bne.n	800842c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0308 	and.w	r3, r3, #8
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 80c8 	beq.w	80085ee <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800845e:	2300      	movs	r3, #0
 8008460:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008464:	4ba7      	ldr	r3, [pc, #668]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b00      	cmp	r3, #0
 8008470:	d111      	bne.n	8008496 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008472:	4ba4      	ldr	r3, [pc, #656]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008478:	4aa2      	ldr	r2, [pc, #648]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 800847a:	f043 0304 	orr.w	r3, r3, #4
 800847e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008482:	4ba0      	ldr	r3, [pc, #640]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008496:	4b9c      	ldr	r3, [pc, #624]	@ (8008708 <HAL_RCC_OscConfig+0x7bc>)
 8008498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d119      	bne.n	80084d6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80084a2:	4b99      	ldr	r3, [pc, #612]	@ (8008708 <HAL_RCC_OscConfig+0x7bc>)
 80084a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a6:	4a98      	ldr	r2, [pc, #608]	@ (8008708 <HAL_RCC_OscConfig+0x7bc>)
 80084a8:	f043 0301 	orr.w	r3, r3, #1
 80084ac:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084ae:	f7fa f921 	bl	80026f4 <HAL_GetTick>
 80084b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80084b4:	e009      	b.n	80084ca <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084b6:	f7fa f91d 	bl	80026f4 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d902      	bls.n	80084ca <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	f000 bc16 	b.w	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80084ca:	4b8f      	ldr	r3, [pc, #572]	@ (8008708 <HAL_RCC_OscConfig+0x7bc>)
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0ef      	beq.n	80084b6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d05f      	beq.n	800859e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80084de:	4b89      	ldr	r3, [pc, #548]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80084e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084e4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d037      	beq.n	8008564 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d006      	beq.n	800850c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e3f4      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d01b      	beq.n	800854e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008516:	4b7b      	ldr	r3, [pc, #492]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800851c:	4a79      	ldr	r2, [pc, #484]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 800851e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8008522:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8008526:	f7fa f8e5 	bl	80026f4 <HAL_GetTick>
 800852a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800852e:	f7fa f8e1 	bl	80026f4 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b05      	cmp	r3, #5
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e3da      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008540:	4b70      	ldr	r3, [pc, #448]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1ef      	bne.n	800852e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800854e:	4b6d      	ldr	r3, [pc, #436]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008554:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	4969      	ldr	r1, [pc, #420]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 800855e:	4313      	orrs	r3, r2
 8008560:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008564:	4b67      	ldr	r3, [pc, #412]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800856a:	4a66      	ldr	r2, [pc, #408]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 800856c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008570:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008574:	f7fa f8be 	bl	80026f4 <HAL_GetTick>
 8008578:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800857c:	f7fa f8ba 	bl	80026f4 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b05      	cmp	r3, #5
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e3b3      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800858e:	4b5d      	ldr	r3, [pc, #372]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0ef      	beq.n	800857c <HAL_RCC_OscConfig+0x630>
 800859c:	e01b      	b.n	80085d6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800859e:	4b59      	ldr	r3, [pc, #356]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80085a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085a4:	4a57      	ldr	r2, [pc, #348]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80085a6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80085aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80085ae:	f7fa f8a1 	bl	80026f4 <HAL_GetTick>
 80085b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80085b4:	e008      	b.n	80085c8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085b6:	f7fa f89d 	bl	80026f4 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e396      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80085c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80085ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1ef      	bne.n	80085b6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80085d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d107      	bne.n	80085ee <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085de:	4b49      	ldr	r3, [pc, #292]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80085e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085e4:	4a47      	ldr	r2, [pc, #284]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80085e6:	f023 0304 	bic.w	r3, r3, #4
 80085ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8111 	beq.w	800881e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008602:	4b40      	ldr	r3, [pc, #256]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d111      	bne.n	8008634 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008610:	4b3c      	ldr	r3, [pc, #240]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008616:	4a3b      	ldr	r2, [pc, #236]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008618:	f043 0304 	orr.w	r3, r3, #4
 800861c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008620:	4b38      	ldr	r3, [pc, #224]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008626:	f003 0304 	and.w	r3, r3, #4
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800862e:	2301      	movs	r3, #1
 8008630:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008634:	4b34      	ldr	r3, [pc, #208]	@ (8008708 <HAL_RCC_OscConfig+0x7bc>)
 8008636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d118      	bne.n	8008672 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008640:	4b31      	ldr	r3, [pc, #196]	@ (8008708 <HAL_RCC_OscConfig+0x7bc>)
 8008642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008644:	4a30      	ldr	r2, [pc, #192]	@ (8008708 <HAL_RCC_OscConfig+0x7bc>)
 8008646:	f043 0301 	orr.w	r3, r3, #1
 800864a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800864c:	f7fa f852 	bl	80026f4 <HAL_GetTick>
 8008650:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008654:	f7fa f84e 	bl	80026f4 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e347      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008666:	4b28      	ldr	r3, [pc, #160]	@ (8008708 <HAL_RCC_OscConfig+0x7bc>)
 8008668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0f0      	beq.n	8008654 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d01f      	beq.n	80086be <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f003 0304 	and.w	r3, r3, #4
 8008686:	2b00      	cmp	r3, #0
 8008688:	d010      	beq.n	80086ac <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800868a:	4b1e      	ldr	r3, [pc, #120]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 800868c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008690:	4a1c      	ldr	r2, [pc, #112]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 8008692:	f043 0304 	orr.w	r3, r3, #4
 8008696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800869a:	4b1a      	ldr	r3, [pc, #104]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 800869c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086a0:	4a18      	ldr	r2, [pc, #96]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80086a2:	f043 0301 	orr.w	r3, r3, #1
 80086a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80086aa:	e018      	b.n	80086de <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80086ac:	4b15      	ldr	r3, [pc, #84]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80086ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086b2:	4a14      	ldr	r2, [pc, #80]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80086b4:	f043 0301 	orr.w	r3, r3, #1
 80086b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80086bc:	e00f      	b.n	80086de <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80086be:	4b11      	ldr	r3, [pc, #68]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80086c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80086c6:	f023 0301 	bic.w	r3, r3, #1
 80086ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80086ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80086d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086d4:	4a0b      	ldr	r2, [pc, #44]	@ (8008704 <HAL_RCC_OscConfig+0x7b8>)
 80086d6:	f023 0304 	bic.w	r3, r3, #4
 80086da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d057      	beq.n	8008796 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80086e6:	f7fa f805 	bl	80026f4 <HAL_GetTick>
 80086ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086ec:	e00e      	b.n	800870c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ee:	f7fa f801 	bl	80026f4 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d905      	bls.n	800870c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e2f8      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
 8008704:	46020c00 	.word	0x46020c00
 8008708:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800870c:	4b9c      	ldr	r3, [pc, #624]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800870e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0e9      	beq.n	80086ee <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008722:	2b00      	cmp	r3, #0
 8008724:	d01b      	beq.n	800875e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008726:	4b96      	ldr	r3, [pc, #600]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800872c:	4a94      	ldr	r2, [pc, #592]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800872e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008732:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008736:	e00a      	b.n	800874e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008738:	f7f9 ffdc 	bl	80026f4 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008746:	4293      	cmp	r3, r2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e2d3      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800874e:	4b8c      	ldr	r3, [pc, #560]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0ed      	beq.n	8008738 <HAL_RCC_OscConfig+0x7ec>
 800875c:	e053      	b.n	8008806 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800875e:	4b88      	ldr	r3, [pc, #544]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008764:	4a86      	ldr	r2, [pc, #536]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800876e:	e00a      	b.n	8008786 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008770:	f7f9 ffc0 	bl	80026f4 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800877e:	4293      	cmp	r3, r2
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e2b7      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008786:	4b7e      	ldr	r3, [pc, #504]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800878c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1ed      	bne.n	8008770 <HAL_RCC_OscConfig+0x824>
 8008794:	e037      	b.n	8008806 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008796:	f7f9 ffad 	bl	80026f4 <HAL_GetTick>
 800879a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800879c:	e00a      	b.n	80087b4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879e:	f7f9 ffa9 	bl	80026f4 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e2a0      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087b4:	4b72      	ldr	r3, [pc, #456]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80087b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1ed      	bne.n	800879e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80087c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80087c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01a      	beq.n	8008806 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80087d0:	4b6b      	ldr	r3, [pc, #428]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80087d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087d6:	4a6a      	ldr	r2, [pc, #424]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80087d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80087e0:	e00a      	b.n	80087f8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087e2:	f7f9 ff87 	bl	80026f4 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e27e      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80087f8:	4b61      	ldr	r3, [pc, #388]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80087fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1ed      	bne.n	80087e2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008806:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800880a:	2b01      	cmp	r3, #1
 800880c:	d107      	bne.n	800881e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800880e:	4b5c      	ldr	r3, [pc, #368]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008814:	4a5a      	ldr	r2, [pc, #360]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008816:	f023 0304 	bic.w	r3, r3, #4
 800881a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d036      	beq.n	8008898 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d019      	beq.n	8008866 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008832:	4b53      	ldr	r3, [pc, #332]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a52      	ldr	r2, [pc, #328]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800883c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800883e:	f7f9 ff59 	bl	80026f4 <HAL_GetTick>
 8008842:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008846:	f7f9 ff55 	bl	80026f4 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e24e      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008858:	4b49      	ldr	r3, [pc, #292]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f0      	beq.n	8008846 <HAL_RCC_OscConfig+0x8fa>
 8008864:	e018      	b.n	8008898 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008866:	4b46      	ldr	r3, [pc, #280]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a45      	ldr	r2, [pc, #276]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800886c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008870:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008872:	f7f9 ff3f 	bl	80026f4 <HAL_GetTick>
 8008876:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008878:	e008      	b.n	800888c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800887a:	f7f9 ff3b 	bl	80026f4 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e234      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800888c:	4b3c      	ldr	r3, [pc, #240]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f0      	bne.n	800887a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d036      	beq.n	8008912 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d019      	beq.n	80088e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80088ac:	4b34      	ldr	r3, [pc, #208]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a33      	ldr	r2, [pc, #204]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80088b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80088b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80088b8:	f7f9 ff1c 	bl	80026f4 <HAL_GetTick>
 80088bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80088c0:	f7f9 ff18 	bl	80026f4 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e211      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80088d2:	4b2b      	ldr	r3, [pc, #172]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f0      	beq.n	80088c0 <HAL_RCC_OscConfig+0x974>
 80088de:	e018      	b.n	8008912 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80088e0:	4b27      	ldr	r3, [pc, #156]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a26      	ldr	r2, [pc, #152]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 80088e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80088ec:	f7f9 ff02 	bl	80026f4 <HAL_GetTick>
 80088f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80088f4:	f7f9 fefe 	bl	80026f4 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e1f7      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008906:	4b1e      	ldr	r3, [pc, #120]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1f0      	bne.n	80088f4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	d07f      	beq.n	8008a1e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008922:	2b00      	cmp	r3, #0
 8008924:	d062      	beq.n	80089ec <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008926:	4b16      	ldr	r3, [pc, #88]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	4a15      	ldr	r2, [pc, #84]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800892c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008930:	6093      	str	r3, [r2, #8]
 8008932:	4b13      	ldr	r3, [pc, #76]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893e:	4910      	ldr	r1, [pc, #64]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008940:	4313      	orrs	r3, r2
 8008942:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800894c:	d309      	bcc.n	8008962 <HAL_RCC_OscConfig+0xa16>
 800894e:	4b0c      	ldr	r3, [pc, #48]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f023 021f 	bic.w	r2, r3, #31
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	4909      	ldr	r1, [pc, #36]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800895c:	4313      	orrs	r3, r2
 800895e:	60cb      	str	r3, [r1, #12]
 8008960:	e02a      	b.n	80089b8 <HAL_RCC_OscConfig+0xa6c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008966:	2b00      	cmp	r3, #0
 8008968:	da0c      	bge.n	8008984 <HAL_RCC_OscConfig+0xa38>
 800896a:	4b05      	ldr	r3, [pc, #20]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	015b      	lsls	r3, r3, #5
 8008978:	4901      	ldr	r1, [pc, #4]	@ (8008980 <HAL_RCC_OscConfig+0xa34>)
 800897a:	4313      	orrs	r3, r2
 800897c:	60cb      	str	r3, [r1, #12]
 800897e:	e01b      	b.n	80089b8 <HAL_RCC_OscConfig+0xa6c>
 8008980:	46020c00 	.word	0x46020c00
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800898c:	d30a      	bcc.n	80089a4 <HAL_RCC_OscConfig+0xa58>
 800898e:	4ba1      	ldr	r3, [pc, #644]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	029b      	lsls	r3, r3, #10
 800899c:	499d      	ldr	r1, [pc, #628]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	60cb      	str	r3, [r1, #12]
 80089a2:	e009      	b.n	80089b8 <HAL_RCC_OscConfig+0xa6c>
 80089a4:	4b9b      	ldr	r3, [pc, #620]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	03db      	lsls	r3, r3, #15
 80089b2:	4998      	ldr	r1, [pc, #608]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80089b8:	4b96      	ldr	r3, [pc, #600]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a95      	ldr	r2, [pc, #596]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 80089be:	f043 0310 	orr.w	r3, r3, #16
 80089c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80089c4:	f7f9 fe96 	bl	80026f4 <HAL_GetTick>
 80089c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80089cc:	f7f9 fe92 	bl	80026f4 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e18b      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80089de:	4b8d      	ldr	r3, [pc, #564]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCC_OscConfig+0xa80>
 80089ea:	e018      	b.n	8008a1e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80089ec:	4b89      	ldr	r3, [pc, #548]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a88      	ldr	r2, [pc, #544]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 80089f2:	f023 0310 	bic.w	r3, r3, #16
 80089f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80089f8:	f7f9 fe7c 	bl	80026f4 <HAL_GetTick>
 80089fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008a00:	f7f9 fe78 	bl	80026f4 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e171      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008a12:	4b80      	ldr	r3, [pc, #512]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f0      	bne.n	8008a00 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 8166 	beq.w	8008cf4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a2e:	4b79      	ldr	r3, [pc, #484]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f003 030c 	and.w	r3, r3, #12
 8008a36:	2b0c      	cmp	r3, #12
 8008a38:	f000 80f2 	beq.w	8008c20 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	f040 80c5 	bne.w	8008bd0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008a46:	4b73      	ldr	r3, [pc, #460]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a72      	ldr	r2, [pc, #456]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a50:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008a52:	f7f9 fe4f 	bl	80026f4 <HAL_GetTick>
 8008a56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008a58:	e008      	b.n	8008a6c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a5a:	f7f9 fe4b 	bl	80026f4 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e144      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008a6c:	4b69      	ldr	r3, [pc, #420]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1f0      	bne.n	8008a5a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a78:	4b66      	ldr	r3, [pc, #408]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a7e:	f003 0304 	and.w	r3, r3, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d111      	bne.n	8008aaa <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008a86:	4b63      	ldr	r3, [pc, #396]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a8c:	4a61      	ldr	r2, [pc, #388]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a8e:	f043 0304 	orr.w	r3, r3, #4
 8008a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008a96:	4b5f      	ldr	r3, [pc, #380]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8008c18 <HAL_RCC_OscConfig+0xccc>)
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ab6:	d102      	bne.n	8008abe <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008abe:	4b56      	ldr	r3, [pc, #344]	@ (8008c18 <HAL_RCC_OscConfig+0xccc>)
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	4a55      	ldr	r2, [pc, #340]	@ (8008c18 <HAL_RCC_OscConfig+0xccc>)
 8008ac4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008ac8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008aca:	4b52      	ldr	r3, [pc, #328]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	0212      	lsls	r2, r2, #8
 8008ae2:	4311      	orrs	r1, r2
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	494a      	ldr	r1, [pc, #296]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	628b      	str	r3, [r1, #40]	@ 0x28
 8008af0:	4b48      	ldr	r3, [pc, #288]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008af4:	4b49      	ldr	r3, [pc, #292]	@ (8008c1c <HAL_RCC_OscConfig+0xcd0>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008afc:	3a01      	subs	r2, #1
 8008afe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008b06:	3a01      	subs	r2, #1
 8008b08:	0252      	lsls	r2, r2, #9
 8008b0a:	b292      	uxth	r2, r2
 8008b0c:	4311      	orrs	r1, r2
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008b12:	3a01      	subs	r2, #1
 8008b14:	0412      	lsls	r2, r2, #16
 8008b16:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008b1a:	4311      	orrs	r1, r2
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008b20:	3a01      	subs	r2, #1
 8008b22:	0612      	lsls	r2, r2, #24
 8008b24:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	493a      	ldr	r1, [pc, #232]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008b30:	4b38      	ldr	r3, [pc, #224]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b34:	4a37      	ldr	r2, [pc, #220]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b36:	f023 0310 	bic.w	r3, r3, #16
 8008b3a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b40:	4a34      	ldr	r2, [pc, #208]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008b46:	4b33      	ldr	r3, [pc, #204]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b4a:	4a32      	ldr	r2, [pc, #200]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b4c:	f043 0310 	orr.w	r3, r3, #16
 8008b50:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008b52:	4b30      	ldr	r3, [pc, #192]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b56:	f023 020c 	bic.w	r2, r3, #12
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b5e:	492d      	ldr	r1, [pc, #180]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8008b64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d105      	bne.n	8008b78 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8008c18 <HAL_RCC_OscConfig+0xccc>)
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	4a29      	ldr	r2, [pc, #164]	@ (8008c18 <HAL_RCC_OscConfig+0xccc>)
 8008b72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b76:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008b78:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d107      	bne.n	8008b90 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008b80:	4b24      	ldr	r3, [pc, #144]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b86:	4a23      	ldr	r2, [pc, #140]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b88:	f023 0304 	bic.w	r3, r3, #4
 8008b8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008b90:	4b20      	ldr	r3, [pc, #128]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a1f      	ldr	r2, [pc, #124]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b9a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008b9c:	f7f9 fdaa 	bl	80026f4 <HAL_GetTick>
 8008ba0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ba4:	f7f9 fda6 	bl	80026f4 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e09f      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008bb6:	4b17      	ldr	r3, [pc, #92]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f0      	beq.n	8008ba4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008bc2:	4b14      	ldr	r3, [pc, #80]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc6:	4a13      	ldr	r2, [pc, #76]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008bcc:	6293      	str	r3, [r2, #40]	@ 0x28
 8008bce:	e091      	b.n	8008cf4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008bd0:	4b10      	ldr	r3, [pc, #64]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008bd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bda:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008bdc:	f7f9 fd8a 	bl	80026f4 <HAL_GetTick>
 8008be0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008be4:	f7f9 fd86 	bl	80026f4 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e07f      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008bf6:	4b07      	ldr	r3, [pc, #28]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008c02:	4b04      	ldr	r3, [pc, #16]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	4a03      	ldr	r2, [pc, #12]	@ (8008c14 <HAL_RCC_OscConfig+0xcc8>)
 8008c08:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008c0c:	f023 0303 	bic.w	r3, r3, #3
 8008c10:	6293      	str	r3, [r2, #40]	@ 0x28
 8008c12:	e06f      	b.n	8008cf4 <HAL_RCC_OscConfig+0xda8>
 8008c14:	46020c00 	.word	0x46020c00
 8008c18:	46020800 	.word	0x46020800
 8008c1c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008c20:	4b37      	ldr	r3, [pc, #220]	@ (8008d00 <HAL_RCC_OscConfig+0xdb4>)
 8008c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c24:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c26:	4b36      	ldr	r3, [pc, #216]	@ (8008d00 <HAL_RCC_OscConfig+0xdb4>)
 8008c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d039      	beq.n	8008ca8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f003 0203 	and.w	r2, r3, #3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d132      	bne.n	8008ca8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	0a1b      	lsrs	r3, r3, #8
 8008c46:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c4e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d129      	bne.n	8008ca8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d122      	bne.n	8008ca8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c6c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d11a      	bne.n	8008ca8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	0a5b      	lsrs	r3, r3, #9
 8008c76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d111      	bne.n	8008ca8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c90:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d108      	bne.n	8008ca8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	0e1b      	lsrs	r3, r3, #24
 8008c9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d001      	beq.n	8008cac <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e024      	b.n	8008cf6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008cac:	4b14      	ldr	r3, [pc, #80]	@ (8008d00 <HAL_RCC_OscConfig+0xdb4>)
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb0:	08db      	lsrs	r3, r3, #3
 8008cb2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d01a      	beq.n	8008cf4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008cbe:	4b10      	ldr	r3, [pc, #64]	@ (8008d00 <HAL_RCC_OscConfig+0xdb4>)
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8008d00 <HAL_RCC_OscConfig+0xdb4>)
 8008cc4:	f023 0310 	bic.w	r3, r3, #16
 8008cc8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cca:	f7f9 fd13 	bl	80026f4 <HAL_GetTick>
 8008cce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008cd0:	bf00      	nop
 8008cd2:	f7f9 fd0f 	bl	80026f4 <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d0f9      	beq.n	8008cd2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ce2:	4a07      	ldr	r2, [pc, #28]	@ (8008d00 <HAL_RCC_OscConfig+0xdb4>)
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008ce8:	4b05      	ldr	r3, [pc, #20]	@ (8008d00 <HAL_RCC_OscConfig+0xdb4>)
 8008cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cec:	4a04      	ldr	r2, [pc, #16]	@ (8008d00 <HAL_RCC_OscConfig+0xdb4>)
 8008cee:	f043 0310 	orr.w	r3, r3, #16
 8008cf2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3738      	adds	r7, #56	@ 0x38
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	46020c00 	.word	0x46020c00

08008d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e1d9      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d18:	4b9b      	ldr	r3, [pc, #620]	@ (8008f88 <HAL_RCC_ClockConfig+0x284>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 030f 	and.w	r3, r3, #15
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d910      	bls.n	8008d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d26:	4b98      	ldr	r3, [pc, #608]	@ (8008f88 <HAL_RCC_ClockConfig+0x284>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f023 020f 	bic.w	r2, r3, #15
 8008d2e:	4996      	ldr	r1, [pc, #600]	@ (8008f88 <HAL_RCC_ClockConfig+0x284>)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d36:	4b94      	ldr	r3, [pc, #592]	@ (8008f88 <HAL_RCC_ClockConfig+0x284>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 030f 	and.w	r3, r3, #15
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d001      	beq.n	8008d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e1c1      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0310 	and.w	r3, r3, #16
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d010      	beq.n	8008d76 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	695a      	ldr	r2, [r3, #20]
 8008d58:	4b8c      	ldr	r3, [pc, #560]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d908      	bls.n	8008d76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8008d64:	4b89      	ldr	r3, [pc, #548]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	4986      	ldr	r1, [pc, #536]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d012      	beq.n	8008da8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	4b81      	ldr	r3, [pc, #516]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	091b      	lsrs	r3, r3, #4
 8008d8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d909      	bls.n	8008da8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008d94:	4b7d      	ldr	r3, [pc, #500]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	497a      	ldr	r1, [pc, #488]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d010      	beq.n	8008dd6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	4b74      	ldr	r3, [pc, #464]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d908      	bls.n	8008dd6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008dc4:	4b71      	ldr	r3, [pc, #452]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	496e      	ldr	r1, [pc, #440]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d010      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	4b69      	ldr	r3, [pc, #420]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f003 030f 	and.w	r3, r3, #15
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d908      	bls.n	8008e04 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008df2:	4b66      	ldr	r3, [pc, #408]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	f023 020f 	bic.w	r2, r3, #15
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	4963      	ldr	r1, [pc, #396]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 80d2 	beq.w	8008fb6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d143      	bne.n	8008ea6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d110      	bne.n	8008e4e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008e2c:	4b57      	ldr	r3, [pc, #348]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e32:	4a56      	ldr	r2, [pc, #344]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008e34:	f043 0304 	orr.w	r3, r3, #4
 8008e38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008e3c:	4b53      	ldr	r3, [pc, #332]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	60bb      	str	r3, [r7, #8]
 8008e48:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8008e4e:	f7f9 fc51 	bl	80026f4 <HAL_GetTick>
 8008e52:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8008e54:	4b4e      	ldr	r3, [pc, #312]	@ (8008f90 <HAL_RCC_ClockConfig+0x28c>)
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00f      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008e60:	e008      	b.n	8008e74 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8008e62:	f7f9 fc47 	bl	80026f4 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d901      	bls.n	8008e74 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e12b      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008e74:	4b46      	ldr	r3, [pc, #280]	@ (8008f90 <HAL_RCC_ClockConfig+0x28c>)
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0f0      	beq.n	8008e62 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d107      	bne.n	8008e96 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008e86:	4b41      	ldr	r3, [pc, #260]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008e8e:	f023 0304 	bic.w	r3, r3, #4
 8008e92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e96:	4b3d      	ldr	r3, [pc, #244]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d121      	bne.n	8008ee6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e112      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d107      	bne.n	8008ebe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008eae:	4b37      	ldr	r3, [pc, #220]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d115      	bne.n	8008ee6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e106      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d107      	bne.n	8008ed6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008ec6:	4b31      	ldr	r3, [pc, #196]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d109      	bne.n	8008ee6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e0fa      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e0f2      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008ee6:	4b29      	ldr	r3, [pc, #164]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	f023 0203 	bic.w	r2, r3, #3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	4926      	ldr	r1, [pc, #152]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008ef8:	f7f9 fbfc 	bl	80026f4 <HAL_GetTick>
 8008efc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d112      	bne.n	8008f2c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f06:	e00a      	b.n	8008f1e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f08:	f7f9 fbf4 	bl	80026f4 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d901      	bls.n	8008f1e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e0d6      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f003 030c 	and.w	r3, r3, #12
 8008f26:	2b0c      	cmp	r3, #12
 8008f28:	d1ee      	bne.n	8008f08 <HAL_RCC_ClockConfig+0x204>
 8008f2a:	e044      	b.n	8008fb6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d112      	bne.n	8008f5a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f34:	e00a      	b.n	8008f4c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f36:	f7f9 fbdd 	bl	80026f4 <HAL_GetTick>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d901      	bls.n	8008f4c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e0bf      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	f003 030c 	and.w	r3, r3, #12
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d1ee      	bne.n	8008f36 <HAL_RCC_ClockConfig+0x232>
 8008f58:	e02d      	b.n	8008fb6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d123      	bne.n	8008faa <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008f62:	e00a      	b.n	8008f7a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f64:	f7f9 fbc6 	bl	80026f4 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e0a8      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008f7a:	4b04      	ldr	r3, [pc, #16]	@ (8008f8c <HAL_RCC_ClockConfig+0x288>)
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f003 030c 	and.w	r3, r3, #12
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1ee      	bne.n	8008f64 <HAL_RCC_ClockConfig+0x260>
 8008f86:	e016      	b.n	8008fb6 <HAL_RCC_ClockConfig+0x2b2>
 8008f88:	40022000 	.word	0x40022000
 8008f8c:	46020c00 	.word	0x46020c00
 8008f90:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f94:	f7f9 fbae 	bl	80026f4 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d901      	bls.n	8008faa <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e090      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008faa:	4b4a      	ldr	r3, [pc, #296]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f003 030c 	and.w	r3, r3, #12
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	d1ee      	bne.n	8008f94 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d010      	beq.n	8008fe4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	4b43      	ldr	r3, [pc, #268]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d208      	bcs.n	8008fe4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008fd2:	4b40      	ldr	r3, [pc, #256]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f023 020f 	bic.w	r2, r3, #15
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	493d      	ldr	r1, [pc, #244]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80090d8 <HAL_RCC_ClockConfig+0x3d4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 030f 	and.w	r3, r3, #15
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d210      	bcs.n	8009014 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ff2:	4b39      	ldr	r3, [pc, #228]	@ (80090d8 <HAL_RCC_ClockConfig+0x3d4>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f023 020f 	bic.w	r2, r3, #15
 8008ffa:	4937      	ldr	r1, [pc, #220]	@ (80090d8 <HAL_RCC_ClockConfig+0x3d4>)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009002:	4b35      	ldr	r3, [pc, #212]	@ (80090d8 <HAL_RCC_ClockConfig+0x3d4>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d001      	beq.n	8009014 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e05b      	b.n	80090cc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0304 	and.w	r3, r3, #4
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68da      	ldr	r2, [r3, #12]
 8009024:	4b2b      	ldr	r3, [pc, #172]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800902c:	429a      	cmp	r2, r3
 800902e:	d208      	bcs.n	8009042 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009030:	4b28      	ldr	r3, [pc, #160]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8009032:	6a1b      	ldr	r3, [r3, #32]
 8009034:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	4925      	ldr	r1, [pc, #148]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 800903e:	4313      	orrs	r3, r2
 8009040:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d012      	beq.n	8009074 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	691a      	ldr	r2, [r3, #16]
 8009052:	4b20      	ldr	r3, [pc, #128]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	091b      	lsrs	r3, r3, #4
 8009058:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800905c:	429a      	cmp	r2, r3
 800905e:	d209      	bcs.n	8009074 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009060:	4b1c      	ldr	r3, [pc, #112]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	4919      	ldr	r1, [pc, #100]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8009070:	4313      	orrs	r3, r2
 8009072:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	2b00      	cmp	r3, #0
 800907e:	d010      	beq.n	80090a2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695a      	ldr	r2, [r3, #20]
 8009084:	4b13      	ldr	r3, [pc, #76]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8009086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800908c:	429a      	cmp	r2, r3
 800908e:	d208      	bcs.n	80090a2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009090:	4b10      	ldr	r3, [pc, #64]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 8009092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009094:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	490d      	ldr	r1, [pc, #52]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80090a2:	f000 f821 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 80090a6:	4602      	mov	r2, r0
 80090a8:	4b0a      	ldr	r3, [pc, #40]	@ (80090d4 <HAL_RCC_ClockConfig+0x3d0>)
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	490a      	ldr	r1, [pc, #40]	@ (80090dc <HAL_RCC_ClockConfig+0x3d8>)
 80090b2:	5ccb      	ldrb	r3, [r1, r3]
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
 80090b8:	4a09      	ldr	r2, [pc, #36]	@ (80090e0 <HAL_RCC_ClockConfig+0x3dc>)
 80090ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80090bc:	4b09      	ldr	r3, [pc, #36]	@ (80090e4 <HAL_RCC_ClockConfig+0x3e0>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7f9 f8e5 	bl	8002290 <HAL_InitTick>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	46020c00 	.word	0x46020c00
 80090d8:	40022000 	.word	0x40022000
 80090dc:	0802d924 	.word	0x0802d924
 80090e0:	20000004 	.word	0x20000004
 80090e4:	20000008 	.word	0x20000008

080090e8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b08b      	sub	sp, #44	@ 0x2c
 80090ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090f6:	4b78      	ldr	r3, [pc, #480]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	f003 030c 	and.w	r3, r3, #12
 80090fe:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009100:	4b75      	ldr	r3, [pc, #468]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009104:	f003 0303 	and.w	r3, r3, #3
 8009108:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_RCC_GetSysClockFreq+0x34>
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	2b0c      	cmp	r3, #12
 8009114:	d121      	bne.n	800915a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d11e      	bne.n	800915a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800911c:	4b6e      	ldr	r3, [pc, #440]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d107      	bne.n	8009138 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009128:	4b6b      	ldr	r3, [pc, #428]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800912a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800912e:	0b1b      	lsrs	r3, r3, #12
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	627b      	str	r3, [r7, #36]	@ 0x24
 8009136:	e005      	b.n	8009144 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009138:	4b67      	ldr	r3, [pc, #412]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	0f1b      	lsrs	r3, r3, #28
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009144:	4a65      	ldr	r2, [pc, #404]	@ (80092dc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d110      	bne.n	8009176 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009158:	e00d      	b.n	8009176 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800915a:	4b5f      	ldr	r3, [pc, #380]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f003 030c 	and.w	r3, r3, #12
 8009162:	2b04      	cmp	r3, #4
 8009164:	d102      	bne.n	800916c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009166:	4b5e      	ldr	r3, [pc, #376]	@ (80092e0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009168:	623b      	str	r3, [r7, #32]
 800916a:	e004      	b.n	8009176 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2b08      	cmp	r3, #8
 8009170:	d101      	bne.n	8009176 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009172:	4b5b      	ldr	r3, [pc, #364]	@ (80092e0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009174:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	2b0c      	cmp	r3, #12
 800917a:	f040 80a5 	bne.w	80092c8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800917e:	4b56      	ldr	r3, [pc, #344]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009188:	4b53      	ldr	r3, [pc, #332]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800918a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918c:	0a1b      	lsrs	r3, r3, #8
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	3301      	adds	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009196:	4b50      	ldr	r3, [pc, #320]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919a:	091b      	lsrs	r3, r3, #4
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80091a2:	4b4d      	ldr	r3, [pc, #308]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80091a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a6:	08db      	lsrs	r3, r3, #3
 80091a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	fb02 f303 	mul.w	r3, r2, r3
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d003      	beq.n	80091cc <HAL_RCC_GetSysClockFreq+0xe4>
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d022      	beq.n	8009210 <HAL_RCC_GetSysClockFreq+0x128>
 80091ca:	e043      	b.n	8009254 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80092e4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80091da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091de:	4b3e      	ldr	r3, [pc, #248]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80091e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80091ee:	ed97 6a01 	vldr	s12, [r7, #4]
 80091f2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80092e8 <HAL_RCC_GetSysClockFreq+0x200>
 80091f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80091fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80091fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009202:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800920a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800920e:	e046      	b.n	800929e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80092e4 <HAL_RCC_GetSysClockFreq+0x1fc>
 800921e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009222:	4b2d      	ldr	r3, [pc, #180]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009232:	ed97 6a01 	vldr	s12, [r7, #4]
 8009236:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80092e8 <HAL_RCC_GetSysClockFreq+0x200>
 800923a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800923e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009246:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800924a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009252:	e024      	b.n	800929e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800926c:	4b1a      	ldr	r3, [pc, #104]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800926e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009274:	ee07 3a90 	vmov	s15, r3
 8009278:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800927c:	ed97 6a01 	vldr	s12, [r7, #4]
 8009280:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80092e8 <HAL_RCC_GetSysClockFreq+0x200>
 8009284:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009288:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800928c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009290:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009298:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800929c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800929e:	4b0e      	ldr	r3, [pc, #56]	@ (80092d8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80092a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a2:	0e1b      	lsrs	r3, r3, #24
 80092a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092a8:	3301      	adds	r3, #1
 80092aa:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092c2:	ee17 3a90 	vmov	r3, s15
 80092c6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80092c8:	6a3b      	ldr	r3, [r7, #32]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	372c      	adds	r7, #44	@ 0x2c
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	46020c00 	.word	0x46020c00
 80092dc:	0802d93c 	.word	0x0802d93c
 80092e0:	00f42400 	.word	0x00f42400
 80092e4:	4b742400 	.word	0x4b742400
 80092e8:	46000000 	.word	0x46000000

080092ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80092f0:	f7ff fefa 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 80092f4:	4602      	mov	r2, r0
 80092f6:	4b07      	ldr	r3, [pc, #28]	@ (8009314 <HAL_RCC_GetHCLKFreq+0x28>)
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	4906      	ldr	r1, [pc, #24]	@ (8009318 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009300:	5ccb      	ldrb	r3, [r1, r3]
 8009302:	fa22 f303 	lsr.w	r3, r2, r3
 8009306:	4a05      	ldr	r2, [pc, #20]	@ (800931c <HAL_RCC_GetHCLKFreq+0x30>)
 8009308:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800930a:	4b04      	ldr	r3, [pc, #16]	@ (800931c <HAL_RCC_GetHCLKFreq+0x30>)
 800930c:	681b      	ldr	r3, [r3, #0]
}
 800930e:	4618      	mov	r0, r3
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	46020c00 	.word	0x46020c00
 8009318:	0802d924 	.word	0x0802d924
 800931c:	20000004 	.word	0x20000004

08009320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009324:	f7ff ffe2 	bl	80092ec <HAL_RCC_GetHCLKFreq>
 8009328:	4602      	mov	r2, r0
 800932a:	4b05      	ldr	r3, [pc, #20]	@ (8009340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	091b      	lsrs	r3, r3, #4
 8009330:	f003 0307 	and.w	r3, r3, #7
 8009334:	4903      	ldr	r1, [pc, #12]	@ (8009344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009336:	5ccb      	ldrb	r3, [r1, r3]
 8009338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800933c:	4618      	mov	r0, r3
 800933e:	bd80      	pop	{r7, pc}
 8009340:	46020c00 	.word	0x46020c00
 8009344:	0802d934 	.word	0x0802d934

08009348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800934c:	f7ff ffce 	bl	80092ec <HAL_RCC_GetHCLKFreq>
 8009350:	4602      	mov	r2, r0
 8009352:	4b05      	ldr	r3, [pc, #20]	@ (8009368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	0a1b      	lsrs	r3, r3, #8
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	4903      	ldr	r1, [pc, #12]	@ (800936c <HAL_RCC_GetPCLK2Freq+0x24>)
 800935e:	5ccb      	ldrb	r3, [r1, r3]
 8009360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009364:	4618      	mov	r0, r3
 8009366:	bd80      	pop	{r7, pc}
 8009368:	46020c00 	.word	0x46020c00
 800936c:	0802d934 	.word	0x0802d934

08009370 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8009374:	f7ff ffba 	bl	80092ec <HAL_RCC_GetHCLKFreq>
 8009378:	4602      	mov	r2, r0
 800937a:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <HAL_RCC_GetPCLK3Freq+0x20>)
 800937c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937e:	091b      	lsrs	r3, r3, #4
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	4903      	ldr	r1, [pc, #12]	@ (8009394 <HAL_RCC_GetPCLK3Freq+0x24>)
 8009386:	5ccb      	ldrb	r3, [r1, r3]
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800938c:	4618      	mov	r0, r3
 800938e:	bd80      	pop	{r7, pc}
 8009390:	46020c00 	.word	0x46020c00
 8009394:	0802d934 	.word	0x0802d934

08009398 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	221f      	movs	r2, #31
 80093a6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80093a8:	4b15      	ldr	r3, [pc, #84]	@ (8009400 <HAL_RCC_GetClockConfig+0x68>)
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	f003 0203 	and.w	r2, r3, #3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80093b4:	4b12      	ldr	r3, [pc, #72]	@ (8009400 <HAL_RCC_GetClockConfig+0x68>)
 80093b6:	6a1b      	ldr	r3, [r3, #32]
 80093b8:	f003 020f 	and.w	r2, r3, #15
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80093c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009400 <HAL_RCC_GetClockConfig+0x68>)
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80093cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009400 <HAL_RCC_GetClockConfig+0x68>)
 80093ce:	6a1b      	ldr	r3, [r3, #32]
 80093d0:	091b      	lsrs	r3, r3, #4
 80093d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80093da:	4b09      	ldr	r3, [pc, #36]	@ (8009400 <HAL_RCC_GetClockConfig+0x68>)
 80093dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093e6:	4b07      	ldr	r3, [pc, #28]	@ (8009404 <HAL_RCC_GetClockConfig+0x6c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 020f 	and.w	r2, r3, #15
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	601a      	str	r2, [r3, #0]
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	46020c00 	.word	0x46020c00
 8009404:	40022000 	.word	0x40022000

08009408 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800940c:	4b05      	ldr	r3, [pc, #20]	@ (8009424 <HAL_RCC_EnableCSS+0x1c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a04      	ldr	r2, [pc, #16]	@ (8009424 <HAL_RCC_EnableCSS+0x1c>)
 8009412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009416:	6013      	str	r3, [r2, #0]
}
 8009418:	bf00      	nop
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	46020c00 	.word	0x46020c00

08009428 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800942c:	4b07      	ldr	r3, [pc, #28]	@ (800944c <HAL_RCC_NMI_IRQHandler+0x24>)
 800942e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009438:	d105      	bne.n	8009446 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800943a:	4b04      	ldr	r3, [pc, #16]	@ (800944c <HAL_RCC_NMI_IRQHandler+0x24>)
 800943c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009440:	659a      	str	r2, [r3, #88]	@ 0x58

    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009442:	f000 f805 	bl	8009450 <HAL_RCC_CSSCallback>
  }
}
 8009446:	bf00      	nop
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	46020c00 	.word	0x46020c00

08009450 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
	...

08009460 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009468:	4b3e      	ldr	r3, [pc, #248]	@ (8009564 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800946a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009476:	f7fe fceb 	bl	8007e50 <HAL_PWREx_GetVoltageRange>
 800947a:	6178      	str	r0, [r7, #20]
 800947c:	e019      	b.n	80094b2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800947e:	4b39      	ldr	r3, [pc, #228]	@ (8009564 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009484:	4a37      	ldr	r2, [pc, #220]	@ (8009564 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009486:	f043 0304 	orr.w	r3, r3, #4
 800948a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800948e:	4b35      	ldr	r3, [pc, #212]	@ (8009564 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	60fb      	str	r3, [r7, #12]
 800949a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800949c:	f7fe fcd8 	bl	8007e50 <HAL_PWREx_GetVoltageRange>
 80094a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80094a2:	4b30      	ldr	r3, [pc, #192]	@ (8009564 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80094a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094a8:	4a2e      	ldr	r2, [pc, #184]	@ (8009564 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80094aa:	f023 0304 	bic.w	r3, r3, #4
 80094ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094b8:	d003      	beq.n	80094c2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094c0:	d109      	bne.n	80094d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094c8:	d202      	bcs.n	80094d0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80094ca:	2301      	movs	r3, #1
 80094cc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80094ce:	e033      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80094d0:	2300      	movs	r3, #0
 80094d2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80094d4:	e030      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094dc:	d208      	bcs.n	80094f0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094e4:	d102      	bne.n	80094ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80094e6:	2303      	movs	r3, #3
 80094e8:	613b      	str	r3, [r7, #16]
 80094ea:	e025      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e035      	b.n	800955c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094f6:	d90f      	bls.n	8009518 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d109      	bne.n	8009512 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009504:	d902      	bls.n	800950c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009506:	2300      	movs	r3, #0
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	e015      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800950c:	2301      	movs	r3, #1
 800950e:	613b      	str	r3, [r7, #16]
 8009510:	e012      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009512:	2300      	movs	r3, #0
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	e00f      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800951e:	d109      	bne.n	8009534 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009526:	d102      	bne.n	800952e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009528:	2301      	movs	r3, #1
 800952a:	613b      	str	r3, [r7, #16]
 800952c:	e004      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800952e:	2302      	movs	r3, #2
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	e001      	b.n	8009538 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009534:	2301      	movs	r3, #1
 8009536:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009538:	4b0b      	ldr	r3, [pc, #44]	@ (8009568 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f023 020f 	bic.w	r2, r3, #15
 8009540:	4909      	ldr	r1, [pc, #36]	@ (8009568 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	4313      	orrs	r3, r2
 8009546:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009548:	4b07      	ldr	r3, [pc, #28]	@ (8009568 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 030f 	and.w	r3, r3, #15
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	429a      	cmp	r2, r3
 8009554:	d001      	beq.n	800955a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e000      	b.n	800955c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	46020c00 	.word	0x46020c00
 8009568:	40022000 	.word	0x40022000

0800956c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800956c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009570:	b0c8      	sub	sp, #288	@ 0x120
 8009572:	af00      	add	r7, sp, #0
 8009574:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009578:	2300      	movs	r3, #0
 800957a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800957e:	2300      	movs	r3, #0
 8009580:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	f002 0401 	and.w	r4, r2, #1
 8009590:	2500      	movs	r5, #0
 8009592:	ea54 0305 	orrs.w	r3, r4, r5
 8009596:	d00b      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009598:	4bd5      	ldr	r3, [pc, #852]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800959a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800959e:	f023 0103 	bic.w	r1, r3, #3
 80095a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a8:	4ad1      	ldr	r2, [pc, #836]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095aa:	430b      	orrs	r3, r1
 80095ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80095b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f002 0802 	and.w	r8, r2, #2
 80095bc:	f04f 0900 	mov.w	r9, #0
 80095c0:	ea58 0309 	orrs.w	r3, r8, r9
 80095c4:	d00b      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80095c6:	4bca      	ldr	r3, [pc, #808]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095cc:	f023 010c 	bic.w	r1, r3, #12
 80095d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d6:	4ac6      	ldr	r2, [pc, #792]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095d8:	430b      	orrs	r3, r1
 80095da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	f002 0a04 	and.w	sl, r2, #4
 80095ea:	f04f 0b00 	mov.w	fp, #0
 80095ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80095f2:	d00b      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80095f4:	4bbe      	ldr	r3, [pc, #760]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095fa:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80095fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009604:	4aba      	ldr	r2, [pc, #744]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009606:	430b      	orrs	r3, r1
 8009608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800960c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f002 0308 	and.w	r3, r2, #8
 8009618:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800961c:	2300      	movs	r3, #0
 800961e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009622:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009626:	460b      	mov	r3, r1
 8009628:	4313      	orrs	r3, r2
 800962a:	d00b      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800962c:	4bb0      	ldr	r3, [pc, #704]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800962e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009632:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800963c:	4aac      	ldr	r2, [pc, #688]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800963e:	430b      	orrs	r3, r1
 8009640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f002 0310 	and.w	r3, r2, #16
 8009650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009654:	2300      	movs	r3, #0
 8009656:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800965a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800965e:	460b      	mov	r3, r1
 8009660:	4313      	orrs	r3, r2
 8009662:	d00b      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8009664:	4ba2      	ldr	r3, [pc, #648]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800966a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800966e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009674:	4a9e      	ldr	r2, [pc, #632]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009676:	430b      	orrs	r3, r1
 8009678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800967c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009688:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800968c:	2300      	movs	r3, #0
 800968e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009692:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009696:	460b      	mov	r3, r1
 8009698:	4313      	orrs	r3, r2
 800969a:	d00b      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800969c:	4b94      	ldr	r3, [pc, #592]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800969e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80096a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80096a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096ac:	4a90      	ldr	r2, [pc, #576]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096ae:	430b      	orrs	r3, r1
 80096b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	f002 0320 	and.w	r3, r2, #32
 80096c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80096c4:	2300      	movs	r3, #0
 80096c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80096ca:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80096ce:	460b      	mov	r3, r1
 80096d0:	4313      	orrs	r3, r2
 80096d2:	d00b      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80096d4:	4b86      	ldr	r3, [pc, #536]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096da:	f023 0107 	bic.w	r1, r3, #7
 80096de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096e4:	4a82      	ldr	r2, [pc, #520]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096e6:	430b      	orrs	r3, r1
 80096e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80096ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80096f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096fc:	2300      	movs	r3, #0
 80096fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009702:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009706:	460b      	mov	r3, r1
 8009708:	4313      	orrs	r3, r2
 800970a:	d00b      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800970c:	4b78      	ldr	r3, [pc, #480]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800970e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009712:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800971a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800971c:	4a74      	ldr	r2, [pc, #464]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800971e:	430b      	orrs	r3, r1
 8009720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009734:	2300      	movs	r3, #0
 8009736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800973a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800973e:	460b      	mov	r3, r1
 8009740:	4313      	orrs	r3, r2
 8009742:	d00b      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009744:	4b6a      	ldr	r3, [pc, #424]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800974a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800974e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009754:	4a66      	ldr	r2, [pc, #408]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009756:	430b      	orrs	r3, r1
 8009758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800975c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8009768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800976c:	2300      	movs	r3, #0
 800976e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009772:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009776:	460b      	mov	r3, r1
 8009778:	4313      	orrs	r3, r2
 800977a:	d00b      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800977c:	4b5c      	ldr	r3, [pc, #368]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800977e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009782:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800978a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800978c:	4a58      	ldr	r2, [pc, #352]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800978e:	430b      	orrs	r3, r1
 8009790:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80097a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097a4:	2300      	movs	r3, #0
 80097a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80097ae:	460b      	mov	r3, r1
 80097b0:	4313      	orrs	r3, r2
 80097b2:	d00b      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80097b4:	4b4e      	ldr	r3, [pc, #312]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80097ba:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80097be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097c4:	4a4a      	ldr	r2, [pc, #296]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097c6:	430b      	orrs	r3, r1
 80097c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80097cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80097d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097dc:	2300      	movs	r3, #0
 80097de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80097e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4313      	orrs	r3, r2
 80097ea:	d00b      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80097ec:	4b40      	ldr	r3, [pc, #256]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80097f2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80097f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097fc:	4a3c      	ldr	r2, [pc, #240]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80097fe:	430b      	orrs	r3, r1
 8009800:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009814:	2300      	movs	r3, #0
 8009816:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800981a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800981e:	460b      	mov	r3, r1
 8009820:	4313      	orrs	r3, r2
 8009822:	d00c      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009824:	4b32      	ldr	r3, [pc, #200]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009826:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800982a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800982e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009836:	4a2e      	ldr	r2, [pc, #184]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009838:	430b      	orrs	r3, r1
 800983a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800983e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800984a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800984e:	2300      	movs	r3, #0
 8009850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009854:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009858:	460b      	mov	r3, r1
 800985a:	4313      	orrs	r3, r2
 800985c:	d00c      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800985e:	4b24      	ldr	r3, [pc, #144]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009864:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800986c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009870:	4a1f      	ldr	r2, [pc, #124]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009872:	430b      	orrs	r3, r1
 8009874:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009878:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009888:	2300      	movs	r3, #0
 800988a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800988e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009892:	460b      	mov	r3, r1
 8009894:	4313      	orrs	r3, r2
 8009896:	d00c      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009898:	4b15      	ldr	r3, [pc, #84]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800989a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800989e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80098a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098aa:	4a11      	ldr	r2, [pc, #68]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098ac:	430b      	orrs	r3, r1
 80098ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80098b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80098be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098c2:	2300      	movs	r3, #0
 80098c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80098cc:	460b      	mov	r3, r1
 80098ce:	4313      	orrs	r3, r2
 80098d0:	d010      	beq.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80098d2:	4b07      	ldr	r3, [pc, #28]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098e4:	4a02      	ldr	r2, [pc, #8]	@ (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098e6:	430b      	orrs	r3, r1
 80098e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80098ec:	e002      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80098ee:	bf00      	nop
 80098f0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80098f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009904:	2300      	movs	r3, #0
 8009906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800990a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800990e:	460b      	mov	r3, r1
 8009910:	4313      	orrs	r3, r2
 8009912:	d04c      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009918:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800991c:	2b80      	cmp	r3, #128	@ 0x80
 800991e:	d02d      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009920:	2b80      	cmp	r3, #128	@ 0x80
 8009922:	d827      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009924:	2b60      	cmp	r3, #96	@ 0x60
 8009926:	d02b      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009928:	2b60      	cmp	r3, #96	@ 0x60
 800992a:	d823      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800992c:	2b40      	cmp	r3, #64	@ 0x40
 800992e:	d006      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009930:	2b40      	cmp	r3, #64	@ 0x40
 8009932:	d81f      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009938:	2b20      	cmp	r3, #32
 800993a:	d011      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800993c:	e01a      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800993e:	4bc0      	ldr	r3, [pc, #768]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009942:	4abf      	ldr	r2, [pc, #764]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009948:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800994a:	e01a      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800994c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009950:	3308      	adds	r3, #8
 8009952:	4618      	mov	r0, r3
 8009954:	f002 fd36 	bl	800c3c4 <RCCEx_PLL2_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800995e:	e010      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009964:	332c      	adds	r3, #44	@ 0x2c
 8009966:	4618      	mov	r0, r3
 8009968:	f002 fdc4 	bl	800c4f4 <RCCEx_PLL3_Config>
 800996c:	4603      	mov	r3, r0
 800996e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009972:	e006      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800997a:	e002      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800997c:	bf00      	nop
 800997e:	e000      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009982:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10d      	bne.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800998a:	4bad      	ldr	r3, [pc, #692]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800998c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009990:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8009994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009998:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800999c:	4aa8      	ldr	r2, [pc, #672]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800999e:	430b      	orrs	r3, r1
 80099a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80099a4:	e003      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80099aa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80099ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80099ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099be:	2300      	movs	r3, #0
 80099c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099c4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80099c8:	460b      	mov	r3, r1
 80099ca:	4313      	orrs	r3, r2
 80099cc:	d053      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80099ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80099d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099da:	d033      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80099dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e0:	d82c      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80099e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099e6:	d02f      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80099e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099ec:	d826      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80099ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099f2:	d008      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80099f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099f8:	d820      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00a      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80099fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a02:	d011      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009a04:	e01a      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a06:	4b8e      	ldr	r3, [pc, #568]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a0a:	4a8d      	ldr	r2, [pc, #564]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a10:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a12:	e01a      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a18:	3308      	adds	r3, #8
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f002 fcd2 	bl	800c3c4 <RCCEx_PLL2_Config>
 8009a20:	4603      	mov	r3, r0
 8009a22:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a26:	e010      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a2c:	332c      	adds	r3, #44	@ 0x2c
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f002 fd60 	bl	800c4f4 <RCCEx_PLL3_Config>
 8009a34:	4603      	mov	r3, r0
 8009a36:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a3a:	e006      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009a42:	e002      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009a44:	bf00      	nop
 8009a46:	e000      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a4a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10d      	bne.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009a52:	4b7b      	ldr	r3, [pc, #492]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a58:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a64:	4a76      	ldr	r2, [pc, #472]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a66:	430b      	orrs	r3, r1
 8009a68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009a6c:	e003      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a72:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009a82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a86:	2300      	movs	r3, #0
 8009a88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009a90:	460b      	mov	r3, r1
 8009a92:	4313      	orrs	r3, r2
 8009a94:	d046      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009aa2:	d028      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009aa4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009aa8:	d821      	bhi.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aae:	d022      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ab4:	d81b      	bhi.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009ab6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009aba:	d01c      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ac0:	d815      	bhi.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ac6:	d008      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009acc:	d80f      	bhi.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d011      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ad6:	d00e      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009ad8:	e009      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ade:	3308      	adds	r3, #8
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f002 fc6f 	bl	800c3c4 <RCCEx_PLL2_Config>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009aec:	e004      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009af4:	e000      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10d      	bne.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009b00:	4b4f      	ldr	r3, [pc, #316]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b06:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b12:	4a4b      	ldr	r2, [pc, #300]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009b14:	430b      	orrs	r3, r1
 8009b16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009b1a:	e003      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009b20:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009b30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b34:	2300      	movs	r3, #0
 8009b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4313      	orrs	r3, r2
 8009b42:	d03f      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d81e      	bhi.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009b50:	a201      	add	r2, pc, #4	@ (adr r2, 8009b58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b56:	bf00      	nop
 8009b58:	08009b97 	.word	0x08009b97
 8009b5c:	08009b6d 	.word	0x08009b6d
 8009b60:	08009b7b 	.word	0x08009b7b
 8009b64:	08009b97 	.word	0x08009b97
 8009b68:	08009b97 	.word	0x08009b97
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009b6c:	4b34      	ldr	r3, [pc, #208]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	4a33      	ldr	r2, [pc, #204]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b76:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009b78:	e00e      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b7e:	332c      	adds	r3, #44	@ 0x2c
 8009b80:	4618      	mov	r0, r3
 8009b82:	f002 fcb7 	bl	800c4f4 <RCCEx_PLL3_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009b8c:	e004      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009b94:	e000      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8009b96:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009b98:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10d      	bne.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009ba0:	4b27      	ldr	r3, [pc, #156]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ba2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ba6:	f023 0107 	bic.w	r1, r3, #7
 8009baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bb2:	4a23      	ldr	r2, [pc, #140]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009bba:	e003      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bbc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009bc0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bd6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	d04c      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009be8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009bec:	d02a      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009bee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009bf2:	d821      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009bf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009bf8:	d026      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009bfa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009bfe:	d81b      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c04:	d00e      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009c06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c0a:	d815      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01d      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c14:	d110      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c16:	4b0a      	ldr	r3, [pc, #40]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1a:	4a09      	ldr	r2, [pc, #36]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c20:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009c22:	e014      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c28:	332c      	adds	r3, #44	@ 0x2c
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f002 fc62 	bl	800c4f4 <RCCEx_PLL3_Config>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009c36:	e00a      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009c3e:	e006      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009c40:	46020c00 	.word	0x46020c00
        break;
 8009c44:	bf00      	nop
 8009c46:	e002      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009c48:	bf00      	nop
 8009c4a:	e000      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009c4c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009c4e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10d      	bne.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009c56:	4baf      	ldr	r3, [pc, #700]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c5c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c68:	4aaa      	ldr	r2, [pc, #680]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009c70:	e003      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c72:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c76:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009c86:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c88:	2300      	movs	r3, #0
 8009c8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009c90:	460b      	mov	r3, r1
 8009c92:	4313      	orrs	r3, r2
 8009c94:	f000 80b5 	beq.w	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c9e:	4b9d      	ldr	r3, [pc, #628]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d113      	bne.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cac:	4b99      	ldr	r3, [pc, #612]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cb2:	4a98      	ldr	r2, [pc, #608]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009cb4:	f043 0304 	orr.w	r3, r3, #4
 8009cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009cbc:	4b95      	ldr	r3, [pc, #596]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cc2:	f003 0304 	and.w	r3, r3, #4
 8009cc6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009cd4:	4b90      	ldr	r3, [pc, #576]	@ (8009f18 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd8:	4a8f      	ldr	r2, [pc, #572]	@ (8009f18 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009cda:	f043 0301 	orr.w	r3, r3, #1
 8009cde:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ce0:	f7f8 fd08 	bl	80026f4 <HAL_GetTick>
 8009ce4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009ce8:	e00b      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cea:	f7f8 fd03 	bl	80026f4 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d903      	bls.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009d00:	e005      	b.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009d02:	4b85      	ldr	r3, [pc, #532]	@ (8009f18 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0ed      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8009d0e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d165      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009d16:	4b7f      	ldr	r3, [pc, #508]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d023      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d30:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8009d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d01b      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009d3c:	4b75      	ldr	r3, [pc, #468]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d4a:	4b72      	ldr	r3, [pc, #456]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d50:	4a70      	ldr	r2, [pc, #448]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d60:	4a6c      	ldr	r2, [pc, #432]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009d6a:	4a6a      	ldr	r2, [pc, #424]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d019      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d80:	f7f8 fcb8 	bl	80026f4 <HAL_GetTick>
 8009d84:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d88:	e00d      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d8a:	f7f8 fcb3 	bl	80026f4 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d94:	1ad2      	subs	r2, r2, r3
 8009d96:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d903      	bls.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8009da4:	e006      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009da6:	4b5b      	ldr	r3, [pc, #364]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d0ea      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8009db4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10d      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009dbc:	4b55      	ldr	r3, [pc, #340]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8009dce:	4a51      	ldr	r2, [pc, #324]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009dd6:	e008      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dd8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ddc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8009de0:	e003      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009de6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009dea:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d107      	bne.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009df2:	4b48      	ldr	r3, [pc, #288]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009df8:	4a46      	ldr	r2, [pc, #280]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009dfa:	f023 0304 	bic.w	r3, r3, #4
 8009dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e10:	2300      	movs	r3, #0
 8009e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e14:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	d042      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8009e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e26:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009e2a:	d022      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8009e2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009e30:	d81b      	bhi.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8009e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e36:	d011      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009e38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e3c:	d815      	bhi.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d019      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8009e42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e46:	d110      	bne.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f002 fab8 	bl	800c3c4 <RCCEx_PLL2_Config>
 8009e54:	4603      	mov	r3, r0
 8009e56:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e5a:	e00d      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e60:	4a2c      	ldr	r2, [pc, #176]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e66:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009e68:	e006      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009e70:	e002      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8009e72:	bf00      	nop
 8009e74:	e000      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8009e76:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009e78:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10d      	bne.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8009e80:	4b24      	ldr	r3, [pc, #144]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e86:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e92:	4a20      	ldr	r2, [pc, #128]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009e94:	430b      	orrs	r3, r1
 8009e96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009e9a:	e003      	b.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ea0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009eb6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	d031      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ec4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ecc:	d00b      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8009ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ed2:	d804      	bhi.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d008      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009edc:	d007      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009ee4:	e004      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009ee6:	bf00      	nop
 8009ee8:	e002      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009eea:	bf00      	nop
 8009eec:	e000      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009eee:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009ef0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d111      	bne.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009ef8:	4b06      	ldr	r3, [pc, #24]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009efa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009efe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f0a:	4a02      	ldr	r2, [pc, #8]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009f12:	e007      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8009f14:	46020c00 	.word	0x46020c00
 8009f18:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f20:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009f30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f32:	2300      	movs	r3, #0
 8009f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	d00c      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009f40:	4bb2      	ldr	r3, [pc, #712]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f46:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8009f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f52:	4aae      	ldr	r2, [pc, #696]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f54:	430b      	orrs	r3, r1
 8009f56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8009f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009f66:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f68:	2300      	movs	r3, #0
 8009f6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f6c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009f70:	460b      	mov	r3, r1
 8009f72:	4313      	orrs	r3, r2
 8009f74:	d019      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8009f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f82:	d105      	bne.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f84:	4ba1      	ldr	r3, [pc, #644]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f88:	4aa0      	ldr	r2, [pc, #640]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f8e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8009f90:	4b9e      	ldr	r3, [pc, #632]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f96:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009fa2:	4a9a      	ldr	r2, [pc, #616]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fb8:	2300      	movs	r3, #0
 8009fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fbc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	d00c      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009fc6:	4b91      	ldr	r3, [pc, #580]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fcc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fd4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009fd8:	4a8c      	ldr	r2, [pc, #560]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fee:	2300      	movs	r3, #0
 8009ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ff2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	d00c      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009ffc:	4b83      	ldr	r3, [pc, #524]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a002:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a00a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a00e:	4a7f      	ldr	r2, [pc, #508]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a010:	430b      	orrs	r3, r1
 800a012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a022:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a024:	2300      	movs	r3, #0
 800a026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a028:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a02c:	460b      	mov	r3, r1
 800a02e:	4313      	orrs	r3, r2
 800a030:	d00c      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a032:	4b76      	ldr	r3, [pc, #472]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a038:	f023 0118 	bic.w	r1, r3, #24
 800a03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a040:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a044:	4a71      	ldr	r2, [pc, #452]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a046:	430b      	orrs	r3, r1
 800a048:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a04c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800a058:	633b      	str	r3, [r7, #48]	@ 0x30
 800a05a:	2300      	movs	r3, #0
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a05e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a062:	460b      	mov	r3, r1
 800a064:	4313      	orrs	r3, r2
 800a066:	d032      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a06c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a074:	d105      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a076:	4b65      	ldr	r3, [pc, #404]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07a:	4a64      	ldr	r2, [pc, #400]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a07c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a080:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a086:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a08a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a08e:	d108      	bne.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a094:	3308      	adds	r3, #8
 800a096:	4618      	mov	r0, r3
 800a098:	f002 f994 	bl	800c3c4 <RCCEx_PLL2_Config>
 800a09c:	4603      	mov	r3, r0
 800a09e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800a0a2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10d      	bne.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a0aa:	4b58      	ldr	r3, [pc, #352]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a0ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a0b0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a0b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a0bc:	4a53      	ldr	r2, [pc, #332]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a0c4:	e003      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0ca:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	d04a      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a0f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a0f6:	d01e      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a0f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a0fc:	d825      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a0fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a102:	d00e      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a104:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a108:	d81f      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d021      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a10e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a112:	d11a      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a114:	4b3d      	ldr	r3, [pc, #244]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a118:	4a3c      	ldr	r2, [pc, #240]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a11a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a11e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a120:	e018      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a126:	3308      	adds	r3, #8
 800a128:	4618      	mov	r0, r3
 800a12a:	f002 f94b 	bl	800c3c4 <RCCEx_PLL2_Config>
 800a12e:	4603      	mov	r3, r0
 800a130:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a134:	e00e      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a13a:	332c      	adds	r3, #44	@ 0x2c
 800a13c:	4618      	mov	r0, r3
 800a13e:	f002 f9d9 	bl	800c4f4 <RCCEx_PLL3_Config>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a148:	e004      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a150:	e000      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a152:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a154:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10d      	bne.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a15c:	4b2b      	ldr	r3, [pc, #172]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a15e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a162:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a16a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a16e:	4927      	ldr	r1, [pc, #156]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a170:	4313      	orrs	r3, r2
 800a172:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a176:	e003      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a178:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a17c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800a18c:	623b      	str	r3, [r7, #32]
 800a18e:	2300      	movs	r3, #0
 800a190:	627b      	str	r3, [r7, #36]	@ 0x24
 800a192:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a196:	460b      	mov	r3, r1
 800a198:	4313      	orrs	r3, r2
 800a19a:	d03d      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a19c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1a8:	d00e      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a1aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1ae:	d815      	bhi.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d017      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a1b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1b8:	d110      	bne.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1ba:	4b14      	ldr	r3, [pc, #80]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1be:	4a13      	ldr	r2, [pc, #76]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a1c6:	e00e      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f002 f8f8 	bl	800c3c4 <RCCEx_PLL2_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a1da:	e004      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a1e2:	e000      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a1e4:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a1e6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d110      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a1ee:	4b07      	ldr	r3, [pc, #28]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a1f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a200:	4902      	ldr	r1, [pc, #8]	@ (800a20c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a202:	4313      	orrs	r3, r2
 800a204:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a208:	e006      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a20a:	bf00      	nop
 800a20c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a210:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a214:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a224:	61bb      	str	r3, [r7, #24]
 800a226:	2300      	movs	r3, #0
 800a228:	61fb      	str	r3, [r7, #28]
 800a22a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a22e:	460b      	mov	r3, r1
 800a230:	4313      	orrs	r3, r2
 800a232:	d00c      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a234:	4b68      	ldr	r3, [pc, #416]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a23a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a242:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a246:	4964      	ldr	r1, [pc, #400]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a24e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	2100      	movs	r1, #0
 800a258:	6139      	str	r1, [r7, #16]
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a264:	460b      	mov	r3, r1
 800a266:	4313      	orrs	r3, r2
 800a268:	d036      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a26a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a26e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00c      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a276:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a27a:	d113      	bne.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a280:	3308      	adds	r3, #8
 800a282:	4618      	mov	r0, r3
 800a284:	f002 f89e 	bl	800c3c4 <RCCEx_PLL2_Config>
 800a288:	4603      	mov	r3, r0
 800a28a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a28e:	e00d      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a294:	332c      	adds	r3, #44	@ 0x2c
 800a296:	4618      	mov	r0, r3
 800a298:	f002 f92c 	bl	800c4f4 <RCCEx_PLL3_Config>
 800a29c:	4603      	mov	r3, r0
 800a29e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a2a2:	e003      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a2aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10d      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a2b4:	4b48      	ldr	r3, [pc, #288]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a2b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a2be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a2c6:	4944      	ldr	r1, [pc, #272]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a2ce:	e003      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a2d4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	60fb      	str	r3, [r7, #12]
 800a2ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	d024      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d108      	bne.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a304:	332c      	adds	r3, #44	@ 0x2c
 800a306:	4618      	mov	r0, r3
 800a308:	f002 f8f4 	bl	800c4f4 <RCCEx_PLL3_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800a312:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10d      	bne.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a31a:	4b2f      	ldr	r3, [pc, #188]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a31c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a320:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a32c:	492a      	ldr	r1, [pc, #168]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a334:	e003      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a336:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a33a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	2100      	movs	r1, #0
 800a348:	6039      	str	r1, [r7, #0]
 800a34a:	f003 0308 	and.w	r3, r3, #8
 800a34e:	607b      	str	r3, [r7, #4]
 800a350:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a354:	460b      	mov	r3, r1
 800a356:	4313      	orrs	r3, r2
 800a358:	d036      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a35a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a35e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a362:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a366:	d00d      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a368:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a36c:	d811      	bhi.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a36e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a372:	d012      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a378:	d80b      	bhi.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00d      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a37e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a382:	d106      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a384:	4b14      	ldr	r3, [pc, #80]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a388:	4a13      	ldr	r2, [pc, #76]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a38a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a38e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a390:	e004      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a398:	e000      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a39a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a39c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10d      	bne.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a3a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a3ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a3b6:	4908      	ldr	r1, [pc, #32]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a3be:	e003      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a3c4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a3c8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3d8:	46020c00 	.word	0x46020c00

0800a3dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b089      	sub	sp, #36	@ 0x24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a3e4:	4ba6      	ldr	r3, [pc, #664]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ec:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a3ee:	4ba4      	ldr	r3, [pc, #656]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	f003 0303 	and.w	r3, r3, #3
 800a3f6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a3f8:	4ba1      	ldr	r3, [pc, #644]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fc:	0a1b      	lsrs	r3, r3, #8
 800a3fe:	f003 030f 	and.w	r3, r3, #15
 800a402:	3301      	adds	r3, #1
 800a404:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a406:	4b9e      	ldr	r3, [pc, #632]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40a:	091b      	lsrs	r3, r3, #4
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a412:	4b9b      	ldr	r3, [pc, #620]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a416:	08db      	lsrs	r3, r3, #3
 800a418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	fb02 f303 	mul.w	r3, r2, r3
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b03      	cmp	r3, #3
 800a432:	d062      	beq.n	800a4fa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2b03      	cmp	r3, #3
 800a438:	f200 8081 	bhi.w	800a53e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d024      	beq.n	800a48c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2b02      	cmp	r3, #2
 800a446:	d17a      	bne.n	800a53e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	ee07 3a90 	vmov	s15, r3
 800a44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a452:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a684 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a45a:	4b89      	ldr	r3, [pc, #548]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a45c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a45e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a46a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a46e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a688 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a472:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a476:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a47a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a48a:	e08f      	b.n	800a5ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a48c:	4b7c      	ldr	r3, [pc, #496]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d005      	beq.n	800a4a4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a498:	4b79      	ldr	r3, [pc, #484]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	0f1b      	lsrs	r3, r3, #28
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	e006      	b.n	800a4b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a4a4:	4b76      	ldr	r3, [pc, #472]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a4a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4aa:	041b      	lsls	r3, r3, #16
 800a4ac:	0f1b      	lsrs	r3, r3, #28
 800a4ae:	f003 030f 	and.w	r3, r3, #15
 800a4b2:	4a76      	ldr	r2, [pc, #472]	@ (800a68c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	ee07 3a90 	vmov	s15, r3
 800a4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4dc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a688 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a4e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a4f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4f8:	e058      	b.n	800a5ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	ee07 3a90 	vmov	s15, r3
 800a500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a504:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a684 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50c:	4b5c      	ldr	r3, [pc, #368]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a50e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a514:	ee07 3a90 	vmov	s15, r3
 800a518:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a51c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a520:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a688 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a524:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a528:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a52c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a530:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a534:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a538:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a53c:	e036      	b.n	800a5ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a53e:	4b50      	ldr	r3, [pc, #320]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a546:	2b00      	cmp	r3, #0
 800a548:	d005      	beq.n	800a556 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a54a:	4b4d      	ldr	r3, [pc, #308]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	0f1b      	lsrs	r3, r3, #28
 800a550:	f003 030f 	and.w	r3, r3, #15
 800a554:	e006      	b.n	800a564 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a556:	4b4a      	ldr	r3, [pc, #296]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a55c:	041b      	lsls	r3, r3, #16
 800a55e:	0f1b      	lsrs	r3, r3, #28
 800a560:	f003 030f 	and.w	r3, r3, #15
 800a564:	4a49      	ldr	r2, [pc, #292]	@ (800a68c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	ee07 3a90 	vmov	s15, r3
 800a578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a58a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a58e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a688 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a59a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a59e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a5a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5aa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a5ac:	4b34      	ldr	r3, [pc, #208]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d017      	beq.n	800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a5b8:	4b31      	ldr	r3, [pc, #196]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5bc:	0a5b      	lsrs	r3, r3, #9
 800a5be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5c2:	ee07 3a90 	vmov	s15, r3
 800a5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a5ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a5ce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a5d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5de:	ee17 2a90 	vmov	r2, s15
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	e002      	b.n	800a5ee <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a5ee:	4b24      	ldr	r3, [pc, #144]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d017      	beq.n	800a62a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a5fa:	4b21      	ldr	r3, [pc, #132]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fe:	0c1b      	lsrs	r3, r3, #16
 800a600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a604:	ee07 3a90 	vmov	s15, r3
 800a608:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a60c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a610:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a614:	edd7 6a07 	vldr	s13, [r7, #28]
 800a618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a61c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a620:	ee17 2a90 	vmov	r2, s15
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	605a      	str	r2, [r3, #4]
 800a628:	e002      	b.n	800a630 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a630:	4b13      	ldr	r3, [pc, #76]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d017      	beq.n	800a66c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a63c:	4b10      	ldr	r3, [pc, #64]	@ (800a680 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a63e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a640:	0e1b      	lsrs	r3, r3, #24
 800a642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a64e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a652:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a656:	edd7 6a07 	vldr	s13, [r7, #28]
 800a65a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a65e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a662:	ee17 2a90 	vmov	r2, s15
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a66a:	e002      	b.n	800a672 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	609a      	str	r2, [r3, #8]
}
 800a672:	bf00      	nop
 800a674:	3724      	adds	r7, #36	@ 0x24
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	46020c00 	.word	0x46020c00
 800a684:	4b742400 	.word	0x4b742400
 800a688:	46000000 	.word	0x46000000
 800a68c:	0802d93c 	.word	0x0802d93c

0800a690 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a690:	b480      	push	{r7}
 800a692:	b089      	sub	sp, #36	@ 0x24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a698:	4ba6      	ldr	r3, [pc, #664]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a69a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a6a2:	4ba4      	ldr	r3, [pc, #656]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a6:	f003 0303 	and.w	r3, r3, #3
 800a6aa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a6ac:	4ba1      	ldr	r3, [pc, #644]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b0:	0a1b      	lsrs	r3, r3, #8
 800a6b2:	f003 030f 	and.w	r3, r3, #15
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a6ba:	4b9e      	ldr	r3, [pc, #632]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6be:	091b      	lsrs	r3, r3, #4
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a6c6:	4b9b      	ldr	r3, [pc, #620]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ca:	08db      	lsrs	r3, r3, #3
 800a6cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	fb02 f303 	mul.w	r3, r2, r3
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d062      	beq.n	800a7ae <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	f200 8081 	bhi.w	800a7f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d024      	beq.n	800a740 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d17a      	bne.n	800a7f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	ee07 3a90 	vmov	s15, r3
 800a702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a706:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a70e:	4b89      	ldr	r3, [pc, #548]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a71e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a722:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a726:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a72e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a732:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a73e:	e08f      	b.n	800a860 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a740:	4b7c      	ldr	r3, [pc, #496]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d005      	beq.n	800a758 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800a74c:	4b79      	ldr	r3, [pc, #484]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	0f1b      	lsrs	r3, r3, #28
 800a752:	f003 030f 	and.w	r3, r3, #15
 800a756:	e006      	b.n	800a766 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800a758:	4b76      	ldr	r3, [pc, #472]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a75a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a75e:	041b      	lsls	r3, r3, #16
 800a760:	0f1b      	lsrs	r3, r3, #28
 800a762:	f003 030f 	and.w	r3, r3, #15
 800a766:	4a76      	ldr	r2, [pc, #472]	@ (800a940 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a76c:	ee07 3a90 	vmov	s15, r3
 800a770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	ee07 3a90 	vmov	s15, r3
 800a788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a78c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a790:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a79c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a7a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7ac:	e058      	b.n	800a860 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	ee07 3a90 	vmov	s15, r3
 800a7b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a7bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c0:	4b5c      	ldr	r3, [pc, #368]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c8:	ee07 3a90 	vmov	s15, r3
 800a7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7d4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a7d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a7dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a7e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7f0:	e036      	b.n	800a860 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a7f2:	4b50      	ldr	r3, [pc, #320]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d005      	beq.n	800a80a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800a7fe:	4b4d      	ldr	r3, [pc, #308]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	0f1b      	lsrs	r3, r3, #28
 800a804:	f003 030f 	and.w	r3, r3, #15
 800a808:	e006      	b.n	800a818 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800a80a:	4b4a      	ldr	r3, [pc, #296]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a80c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a810:	041b      	lsls	r3, r3, #16
 800a812:	0f1b      	lsrs	r3, r3, #28
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	4a49      	ldr	r2, [pc, #292]	@ (800a940 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	ee07 3a90 	vmov	s15, r3
 800a82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a842:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a84e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a852:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a85e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a860:	4b34      	ldr	r3, [pc, #208]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d017      	beq.n	800a89c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a86c:	4b31      	ldr	r3, [pc, #196]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a86e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a870:	0a5b      	lsrs	r3, r3, #9
 800a872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800a87e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a882:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a886:	edd7 6a07 	vldr	s13, [r7, #28]
 800a88a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a88e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a892:	ee17 2a90 	vmov	r2, s15
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e002      	b.n	800a8a2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a8a2:	4b24      	ldr	r3, [pc, #144]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d017      	beq.n	800a8de <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a8ae:	4b21      	ldr	r3, [pc, #132]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b2:	0c1b      	lsrs	r3, r3, #16
 800a8b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8b8:	ee07 3a90 	vmov	s15, r3
 800a8bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a8c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a8c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a8c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8d4:	ee17 2a90 	vmov	r2, s15
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	605a      	str	r2, [r3, #4]
 800a8dc:	e002      	b.n	800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a8e4:	4b13      	ldr	r3, [pc, #76]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d017      	beq.n	800a920 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a8f0:	4b10      	ldr	r3, [pc, #64]	@ (800a934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f4:	0e1b      	lsrs	r3, r3, #24
 800a8f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8fa:	ee07 3a90 	vmov	s15, r3
 800a8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a902:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a906:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a90a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a90e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a916:	ee17 2a90 	vmov	r2, s15
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a91e:	e002      	b.n	800a926 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	609a      	str	r2, [r3, #8]
}
 800a926:	bf00      	nop
 800a928:	3724      	adds	r7, #36	@ 0x24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	46020c00 	.word	0x46020c00
 800a938:	4b742400 	.word	0x4b742400
 800a93c:	46000000 	.word	0x46000000
 800a940:	0802d93c 	.word	0x0802d93c

0800a944 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a944:	b480      	push	{r7}
 800a946:	b089      	sub	sp, #36	@ 0x24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a94c:	4ba6      	ldr	r3, [pc, #664]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a94e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a954:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a956:	4ba4      	ldr	r3, [pc, #656]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a95a:	f003 0303 	and.w	r3, r3, #3
 800a95e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a960:	4ba1      	ldr	r3, [pc, #644]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a964:	0a1b      	lsrs	r3, r3, #8
 800a966:	f003 030f 	and.w	r3, r3, #15
 800a96a:	3301      	adds	r3, #1
 800a96c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a96e:	4b9e      	ldr	r3, [pc, #632]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a972:	091b      	lsrs	r3, r3, #4
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a97a:	4b9b      	ldr	r3, [pc, #620]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a97c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a97e:	08db      	lsrs	r3, r3, #3
 800a980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	fb02 f303 	mul.w	r3, r2, r3
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a992:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d062      	beq.n	800aa62 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	f200 8081 	bhi.w	800aaa6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d024      	beq.n	800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d17a      	bne.n	800aaa6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800abec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9c2:	4b89      	ldr	r3, [pc, #548]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9d6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800abf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ee:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a9f2:	e08f      	b.n	800ab14 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a9f4:	4b7c      	ldr	r3, [pc, #496]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d005      	beq.n	800aa0c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800aa00:	4b79      	ldr	r3, [pc, #484]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	0f1b      	lsrs	r3, r3, #28
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	e006      	b.n	800aa1a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800aa0c:	4b76      	ldr	r3, [pc, #472]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aa0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa12:	041b      	lsls	r3, r3, #16
 800aa14:	0f1b      	lsrs	r3, r3, #28
 800aa16:	f003 030f 	and.w	r3, r3, #15
 800aa1a:	4a76      	ldr	r2, [pc, #472]	@ (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800aa1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa20:	ee07 3a90 	vmov	s15, r3
 800aa24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa40:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa44:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800abf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aa48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa54:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800aa58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa60:	e058      	b.n	800ab14 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	ee07 3a90 	vmov	s15, r3
 800aa68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800aa70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa74:	4b5c      	ldr	r3, [pc, #368]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aa76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7c:	ee07 3a90 	vmov	s15, r3
 800aa80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa84:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa88:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800abf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aa8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aa90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa98:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aa9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaa4:	e036      	b.n	800ab14 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800aaa6:	4b50      	ldr	r3, [pc, #320]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d005      	beq.n	800aabe <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800aab2:	4b4d      	ldr	r3, [pc, #308]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	0f1b      	lsrs	r3, r3, #28
 800aab8:	f003 030f 	and.w	r3, r3, #15
 800aabc:	e006      	b.n	800aacc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800aabe:	4b4a      	ldr	r3, [pc, #296]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aac4:	041b      	lsls	r3, r3, #16
 800aac6:	0f1b      	lsrs	r3, r3, #28
 800aac8:	f003 030f 	and.w	r3, r3, #15
 800aacc:	4a49      	ldr	r2, [pc, #292]	@ (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800aace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	ee07 3a90 	vmov	s15, r3
 800aae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaf6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800abf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ab0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab12:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ab14:	4b34      	ldr	r3, [pc, #208]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d017      	beq.n	800ab50 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ab20:	4b31      	ldr	r3, [pc, #196]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab24:	0a5b      	lsrs	r3, r3, #9
 800ab26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab2a:	ee07 3a90 	vmov	s15, r3
 800ab2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800ab32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab36:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ab3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab46:	ee17 2a90 	vmov	r2, s15
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	e002      	b.n	800ab56 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ab56:	4b24      	ldr	r3, [pc, #144]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d017      	beq.n	800ab92 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ab62:	4b21      	ldr	r3, [pc, #132]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab66:	0c1b      	lsrs	r3, r3, #16
 800ab68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab6c:	ee07 3a90 	vmov	s15, r3
 800ab70:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ab74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab78:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ab7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab88:	ee17 2a90 	vmov	r2, s15
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	605a      	str	r2, [r3, #4]
 800ab90:	e002      	b.n	800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ab98:	4b13      	ldr	r3, [pc, #76]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ab9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d017      	beq.n	800abd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800aba4:	4b10      	ldr	r3, [pc, #64]	@ (800abe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800aba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba8:	0e1b      	lsrs	r3, r3, #24
 800abaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800abb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800abbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abca:	ee17 2a90 	vmov	r2, s15
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800abd2:	e002      	b.n	800abda <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	609a      	str	r2, [r3, #8]
}
 800abda:	bf00      	nop
 800abdc:	3724      	adds	r7, #36	@ 0x24
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	46020c00 	.word	0x46020c00
 800abec:	4b742400 	.word	0x4b742400
 800abf0:	46000000 	.word	0x46000000
 800abf4:	0802d93c 	.word	0x0802d93c

0800abf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08e      	sub	sp, #56	@ 0x38
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ac02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac06:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800ac0a:	430b      	orrs	r3, r1
 800ac0c:	d145      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ac0e:	4ba7      	ldr	r3, [pc, #668]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac18:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ac1a:	4ba4      	ldr	r3, [pc, #656]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac20:	f003 0302 	and.w	r3, r3, #2
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d108      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ac28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac2e:	d104      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ac30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac36:	f001 bb5a 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ac3a:	4b9c      	ldr	r3, [pc, #624]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac48:	d114      	bne.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac50:	d110      	bne.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ac52:	4b96      	ldr	r3, [pc, #600]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac60:	d103      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800ac62:	23fa      	movs	r3, #250	@ 0xfa
 800ac64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ac66:	f001 bb42 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ac6a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac6e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ac70:	f001 bb3d 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800ac74:	4b8d      	ldr	r3, [pc, #564]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac80:	d107      	bne.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800ac82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac88:	d103      	bne.n	800ac92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800ac8a:	4b89      	ldr	r3, [pc, #548]	@ (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800ac8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8e:	f001 bb2e 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac96:	f001 bb2a 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac9e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800aca2:	430b      	orrs	r3, r1
 800aca4:	d151      	bne.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800aca6:	4b81      	ldr	r3, [pc, #516]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800acac:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800acb0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800acb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb4:	2b80      	cmp	r3, #128	@ 0x80
 800acb6:	d035      	beq.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800acb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acba:	2b80      	cmp	r3, #128	@ 0x80
 800acbc:	d841      	bhi.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	2b60      	cmp	r3, #96	@ 0x60
 800acc2:	d02a      	beq.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800acc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc6:	2b60      	cmp	r3, #96	@ 0x60
 800acc8:	d83b      	bhi.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800accc:	2b40      	cmp	r3, #64	@ 0x40
 800acce:	d009      	beq.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800acd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd2:	2b40      	cmp	r3, #64	@ 0x40
 800acd4:	d835      	bhi.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800acd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00c      	beq.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800acdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acde:	2b20      	cmp	r3, #32
 800ace0:	d012      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ace2:	e02e      	b.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ace4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff fb77 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acf2:	f001 bafc 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acf6:	f107 0318 	add.w	r3, r7, #24
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff fcc8 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad04:	f001 baf3 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad08:	f107 030c 	add.w	r3, r7, #12
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7ff fe19 	bl	800a944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad16:	f001 baea 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ad1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ad1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad20:	f001 bae5 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad24:	4b61      	ldr	r3, [pc, #388]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad30:	d103      	bne.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800ad32:	4b60      	ldr	r3, [pc, #384]	@ (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ad34:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad36:	f001 bada 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad3e:	f001 bad6 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad46:	f001 bad2 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ad4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad4e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ad52:	430b      	orrs	r3, r1
 800ad54:	d158      	bne.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ad56:	4b55      	ldr	r3, [pc, #340]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ad58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ad60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ad62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad68:	d03b      	beq.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad70:	d846      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ad72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad78:	d02e      	beq.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad80:	d83e      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ad82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad88:	d00b      	beq.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad90:	d836      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ad92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00d      	beq.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800ad98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad9e:	d012      	beq.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800ada0:	e02e      	b.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ada2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff fb18 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adb0:	f001 ba9d 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adb4:	f107 0318 	add.w	r3, r7, #24
 800adb8:	4618      	mov	r0, r3
 800adba:	f7ff fc69 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adc2:	f001 ba94 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adc6:	f107 030c 	add.w	r3, r7, #12
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff fdba 	bl	800a944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800add4:	f001 ba8b 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800add8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800addc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adde:	f001 ba86 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ade2:	4b32      	ldr	r3, [pc, #200]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adee:	d103      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800adf0:	4b30      	ldr	r3, [pc, #192]	@ (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800adf2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800adf4:	f001 ba7b 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800adf8:	2300      	movs	r3, #0
 800adfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adfc:	f001 ba77 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800ae00:	2300      	movs	r3, #0
 800ae02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae04:	f001 ba73 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ae08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae0c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ae10:	430b      	orrs	r3, r1
 800ae12:	d126      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ae14:	4b25      	ldr	r3, [pc, #148]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ae16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800ae20:	4b22      	ldr	r3, [pc, #136]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae2c:	d106      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d103      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ae34:	4b1f      	ldr	r3, [pc, #124]	@ (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ae36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae38:	f001 ba59 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ae3c:	4b1b      	ldr	r3, [pc, #108]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae48:	d107      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae50:	d103      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ae52:	4b19      	ldr	r3, [pc, #100]	@ (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ae54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae56:	f001 ba4a 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae5e:	f001 ba46 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ae62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae66:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800ae6a:	430b      	orrs	r3, r1
 800ae6c:	d16e      	bne.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ae6e:	4b0f      	ldr	r3, [pc, #60]	@ (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ae70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae74:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ae78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ae80:	d03d      	beq.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ae82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae84:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ae88:	d85c      	bhi.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae90:	d014      	beq.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ae92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae98:	d854      	bhi.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01f      	beq.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800aea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aea6:	d012      	beq.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800aea8:	e04c      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800aeaa:	bf00      	nop
 800aeac:	46020c00 	.word	0x46020c00
 800aeb0:	0007a120 	.word	0x0007a120
 800aeb4:	00f42400 	.word	0x00f42400
 800aeb8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff fa8b 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800aec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aeca:	f001 ba10 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aece:	f107 0318 	add.w	r3, r7, #24
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7ff fbdc 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aedc:	f001 ba07 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800aee0:	4ba7      	ldr	r3, [pc, #668]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeec:	d103      	bne.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800aeee:	4ba5      	ldr	r3, [pc, #660]	@ (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aef0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aef2:	f001 b9fc 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aefa:	f001 b9f8 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aefe:	4ba0      	ldr	r3, [pc, #640]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0320 	and.w	r3, r3, #32
 800af06:	2b20      	cmp	r3, #32
 800af08:	d118      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af0a:	4b9d      	ldr	r3, [pc, #628]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d005      	beq.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800af16:	4b9a      	ldr	r3, [pc, #616]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	0e1b      	lsrs	r3, r3, #24
 800af1c:	f003 030f 	and.w	r3, r3, #15
 800af20:	e006      	b.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800af22:	4b97      	ldr	r3, [pc, #604]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af28:	041b      	lsls	r3, r3, #16
 800af2a:	0e1b      	lsrs	r3, r3, #24
 800af2c:	f003 030f 	and.w	r3, r3, #15
 800af30:	4a95      	ldr	r2, [pc, #596]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800af32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800af38:	f001 b9d9 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af40:	f001 b9d5 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800af44:	2300      	movs	r3, #0
 800af46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af48:	f001 b9d1 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af50:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800af54:	430b      	orrs	r3, r1
 800af56:	d17f      	bne.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af58:	4b89      	ldr	r3, [pc, #548]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af62:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	2b00      	cmp	r3, #0
 800af68:	d165      	bne.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800af6a:	4b85      	ldr	r3, [pc, #532]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af70:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800af74:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800af7c:	d034      	beq.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800af84:	d853      	bhi.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af8c:	d00b      	beq.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800af8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af94:	d84b      	bhi.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d016      	beq.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800af9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800afa2:	d009      	beq.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800afa4:	e043      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff fa16 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800afb4:	f001 b99b 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afb8:	f107 0318 	add.w	r3, r7, #24
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff fb67 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800afc6:	f001 b992 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800afca:	4b6d      	ldr	r3, [pc, #436]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afd6:	d103      	bne.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800afd8:	4b6a      	ldr	r3, [pc, #424]	@ (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afda:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800afdc:	f001 b987 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800afe4:	f001 b983 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800afe8:	4b65      	ldr	r3, [pc, #404]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 0320 	and.w	r3, r3, #32
 800aff0:	2b20      	cmp	r3, #32
 800aff2:	d118      	bne.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aff4:	4b62      	ldr	r3, [pc, #392]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d005      	beq.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b000:	4b5f      	ldr	r3, [pc, #380]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	f003 030f 	and.w	r3, r3, #15
 800b00a:	e006      	b.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b00c:	4b5c      	ldr	r3, [pc, #368]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b00e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b012:	041b      	lsls	r3, r3, #16
 800b014:	0e1b      	lsrs	r3, r3, #24
 800b016:	f003 030f 	and.w	r3, r3, #15
 800b01a:	4a5b      	ldr	r2, [pc, #364]	@ (800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b020:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b022:	f001 b964 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b026:	2300      	movs	r3, #0
 800b028:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b02a:	f001 b960 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b032:	f001 b95c 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b03c:	d108      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b03e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff f9ca 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b04c:	f001 b94f 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b050:	2300      	movs	r3, #0
 800b052:	637b      	str	r3, [r7, #52]	@ 0x34
 800b054:	f001 b94b 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b05c:	1e51      	subs	r1, r2, #1
 800b05e:	430b      	orrs	r3, r1
 800b060:	d136      	bne.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b062:	4b47      	ldr	r3, [pc, #284]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b068:	f003 0303 	and.w	r3, r3, #3
 800b06c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b070:	2b00      	cmp	r3, #0
 800b072:	d104      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b074:	f7fe f968 	bl	8009348 <HAL_RCC_GetPCLK2Freq>
 800b078:	6378      	str	r0, [r7, #52]	@ 0x34
 800b07a:	f001 b938 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b080:	2b01      	cmp	r3, #1
 800b082:	d104      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b084:	f7fe f830 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b088:	6378      	str	r0, [r7, #52]	@ 0x34
 800b08a:	f001 b930 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b08e:	4b3c      	ldr	r3, [pc, #240]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b09a:	d106      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d103      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b0a2:	4b3a      	ldr	r3, [pc, #232]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0a6:	f001 b922 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b0aa:	4b35      	ldr	r3, [pc, #212]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b0ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0b0:	f003 0302 	and.w	r3, r3, #2
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d107      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d104      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b0be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0c4:	f001 b913 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0cc:	f001 b90f 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d4:	1e91      	subs	r1, r2, #2
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	d136      	bne.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b0da:	4b29      	ldr	r3, [pc, #164]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b0dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0e0:	f003 030c 	and.w	r3, r3, #12
 800b0e4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d104      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b0ec:	f7fe f918 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b0f0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b0f2:	f001 b8fc 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f8:	2b04      	cmp	r3, #4
 800b0fa:	d104      	bne.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b0fc:	f7fd fff4 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b100:	6378      	str	r0, [r7, #52]	@ 0x34
 800b102:	f001 b8f4 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b106:	4b1e      	ldr	r3, [pc, #120]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b10e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b112:	d106      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b116:	2b08      	cmp	r3, #8
 800b118:	d103      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b11a:	4b1c      	ldr	r3, [pc, #112]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b11c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b11e:	f001 b8e6 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b122:	4b17      	ldr	r3, [pc, #92]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	d107      	bne.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b132:	2b0c      	cmp	r3, #12
 800b134:	d104      	bne.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b13a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b13c:	f001 b8d7 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b140:	2300      	movs	r3, #0
 800b142:	637b      	str	r3, [r7, #52]	@ 0x34
 800b144:	f001 b8d3 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b14c:	1f11      	subs	r1, r2, #4
 800b14e:	430b      	orrs	r3, r1
 800b150:	d13f      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b152:	4b0b      	ldr	r3, [pc, #44]	@ (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b15c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b160:	2b00      	cmp	r3, #0
 800b162:	d104      	bne.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b164:	f7fe f8dc 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b168:	6378      	str	r0, [r7, #52]	@ 0x34
 800b16a:	f001 b8c0 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b170:	2b10      	cmp	r3, #16
 800b172:	d10d      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b174:	f7fd ffb8 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b178:	6378      	str	r0, [r7, #52]	@ 0x34
 800b17a:	f001 b8b8 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b17e:	bf00      	nop
 800b180:	46020c00 	.word	0x46020c00
 800b184:	02dc6c00 	.word	0x02dc6c00
 800b188:	0802d93c 	.word	0x0802d93c
 800b18c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b190:	4ba8      	ldr	r3, [pc, #672]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b19c:	d106      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a0:	2b20      	cmp	r3, #32
 800b1a2:	d103      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b1a4:	4ba4      	ldr	r3, [pc, #656]	@ (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b1a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1a8:	f001 b8a1 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b1ac:	4ba1      	ldr	r3, [pc, #644]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d107      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	2b30      	cmp	r3, #48	@ 0x30
 800b1be:	d104      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b1c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c6:	f001 b892 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ce:	f001 b88e 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b1d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d6:	f1a2 0108 	sub.w	r1, r2, #8
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	d136      	bne.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b1de:	4b95      	ldr	r3, [pc, #596]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b1e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d104      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b1f0:	f7fe f896 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b1f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b1f6:	f001 b87a 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fc:	2b40      	cmp	r3, #64	@ 0x40
 800b1fe:	d104      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b200:	f7fd ff72 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b204:	6378      	str	r0, [r7, #52]	@ 0x34
 800b206:	f001 b872 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b20a:	4b8a      	ldr	r3, [pc, #552]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b216:	d106      	bne.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21a:	2b80      	cmp	r3, #128	@ 0x80
 800b21c:	d103      	bne.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b21e:	4b86      	ldr	r3, [pc, #536]	@ (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b220:	637b      	str	r3, [r7, #52]	@ 0x34
 800b222:	f001 b864 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b226:	4b83      	ldr	r3, [pc, #524]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b02      	cmp	r3, #2
 800b232:	d107      	bne.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b236:	2bc0      	cmp	r3, #192	@ 0xc0
 800b238:	d104      	bne.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b23a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b23e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b240:	f001 b855 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b244:	2300      	movs	r3, #0
 800b246:	637b      	str	r3, [r7, #52]	@ 0x34
 800b248:	f001 b851 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b24c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b250:	f1a2 0110 	sub.w	r1, r2, #16
 800b254:	430b      	orrs	r3, r1
 800b256:	d139      	bne.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b258:	4b76      	ldr	r3, [pc, #472]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b25a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b25e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b262:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b266:	2b00      	cmp	r3, #0
 800b268:	d104      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b26a:	f7fe f859 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b26e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b270:	f001 b83d 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b27a:	d104      	bne.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b27c:	f7fd ff34 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b280:	6378      	str	r0, [r7, #52]	@ 0x34
 800b282:	f001 b834 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b286:	4b6b      	ldr	r3, [pc, #428]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b28e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b292:	d107      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b29a:	d103      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b29c:	4b66      	ldr	r3, [pc, #408]	@ (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2a0:	f001 b825 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b2a4:	4b63      	ldr	r3, [pc, #396]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b2a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2aa:	f003 0302 	and.w	r3, r3, #2
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d108      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2b8:	d104      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b2ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c0:	f001 b815 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c8:	f001 b811 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b2cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2d0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800b2d4:	430b      	orrs	r3, r1
 800b2d6:	d139      	bne.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b2d8:	4b56      	ldr	r3, [pc, #344]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b2da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d104      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b2ea:	f7fe f819 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b2ee:	6378      	str	r0, [r7, #52]	@ 0x34
 800b2f0:	f000 bffd 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2fa:	d104      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b2fc:	f7fd fef4 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b300:	6378      	str	r0, [r7, #52]	@ 0x34
 800b302:	f000 bff4 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b306:	4b4b      	ldr	r3, [pc, #300]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b30e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b312:	d107      	bne.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b31a:	d103      	bne.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b31c:	4b46      	ldr	r3, [pc, #280]	@ (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b31e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b320:	f000 bfe5 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b324:	4b43      	ldr	r3, [pc, #268]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b32a:	f003 0302 	and.w	r3, r3, #2
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d108      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b338:	d104      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b33a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b340:	f000 bfd5 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b344:	2300      	movs	r3, #0
 800b346:	637b      	str	r3, [r7, #52]	@ 0x34
 800b348:	f000 bfd1 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b34c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b350:	f1a2 0120 	sub.w	r1, r2, #32
 800b354:	430b      	orrs	r3, r1
 800b356:	d158      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b358:	4b36      	ldr	r3, [pc, #216]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b35a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b35e:	f003 0307 	and.w	r3, r3, #7
 800b362:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b366:	2b00      	cmp	r3, #0
 800b368:	d104      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b36a:	f7fe f801 	bl	8009370 <HAL_RCC_GetPCLK3Freq>
 800b36e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b370:	f000 bfbd 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b376:	2b01      	cmp	r3, #1
 800b378:	d104      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b37a:	f7fd feb5 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b37e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b380:	f000 bfb5 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b384:	4b2b      	ldr	r3, [pc, #172]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b38c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b390:	d106      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b394:	2b02      	cmp	r3, #2
 800b396:	d103      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b398:	4b27      	ldr	r3, [pc, #156]	@ (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b39c:	f000 bfa7 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b3a0:	4b24      	ldr	r3, [pc, #144]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b3a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3a6:	f003 0302 	and.w	r3, r3, #2
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d107      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b0:	2b03      	cmp	r3, #3
 800b3b2:	d104      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b3b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ba:	f000 bf98 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b3be:	4b1d      	ldr	r3, [pc, #116]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0320 	and.w	r3, r3, #32
 800b3c6:	2b20      	cmp	r3, #32
 800b3c8:	d11b      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d118      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b3d0:	4b18      	ldr	r3, [pc, #96]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b3dc:	4b15      	ldr	r3, [pc, #84]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	0e1b      	lsrs	r3, r3, #24
 800b3e2:	f003 030f 	and.w	r3, r3, #15
 800b3e6:	e006      	b.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b3e8:	4b12      	ldr	r3, [pc, #72]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b3ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b3ee:	041b      	lsls	r3, r3, #16
 800b3f0:	0e1b      	lsrs	r3, r3, #24
 800b3f2:	f003 030f 	and.w	r3, r3, #15
 800b3f6:	4a11      	ldr	r2, [pc, #68]	@ (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3fe:	f000 bf76 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b402:	2300      	movs	r3, #0
 800b404:	637b      	str	r3, [r7, #52]	@ 0x34
 800b406:	f000 bf72 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b40e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b412:	430b      	orrs	r3, r1
 800b414:	d172      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b416:	4b07      	ldr	r3, [pc, #28]	@ (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b41c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b420:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b428:	d10a      	bne.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b42a:	f7fd fe5d 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b42e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b430:	f000 bf5d 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b434:	46020c00 	.word	0x46020c00
 800b438:	00f42400 	.word	0x00f42400
 800b43c:	0802d93c 	.word	0x0802d93c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b446:	d108      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b448:	f107 0318 	add.w	r3, r7, #24
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff f91f 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	637b      	str	r3, [r7, #52]	@ 0x34
 800b456:	f000 bf4a 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d104      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b460:	f7fd ff44 	bl	80092ec <HAL_RCC_GetHCLKFreq>
 800b464:	6378      	str	r0, [r7, #52]	@ 0x34
 800b466:	f000 bf42 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b470:	d122      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b472:	4bb0      	ldr	r3, [pc, #704]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0320 	and.w	r3, r3, #32
 800b47a:	2b20      	cmp	r3, #32
 800b47c:	d118      	bne.n	800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b47e:	4bad      	ldr	r3, [pc, #692]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d005      	beq.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b48a:	4baa      	ldr	r3, [pc, #680]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	0e1b      	lsrs	r3, r3, #24
 800b490:	f003 030f 	and.w	r3, r3, #15
 800b494:	e006      	b.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b496:	4ba7      	ldr	r3, [pc, #668]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b49c:	041b      	lsls	r3, r3, #16
 800b49e:	0e1b      	lsrs	r3, r3, #24
 800b4a0:	f003 030f 	and.w	r3, r3, #15
 800b4a4:	4aa4      	ldr	r2, [pc, #656]	@ (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b4a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ac:	f000 bf1f 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4b4:	f000 bf1b 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b4b8:	4b9e      	ldr	r3, [pc, #632]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4c4:	d107      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4cc:	d103      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b4ce:	4b9b      	ldr	r3, [pc, #620]	@ (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4d2:	f000 bf0c 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b4d6:	4b97      	ldr	r3, [pc, #604]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4e2:	d107      	bne.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4ea:	d103      	bne.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b4ec:	4b93      	ldr	r3, [pc, #588]	@ (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f0:	f000 befd 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f8:	f000 bef9 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b4fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b500:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b504:	430b      	orrs	r3, r1
 800b506:	d158      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b508:	4b8a      	ldr	r3, [pc, #552]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b50a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b50e:	f003 0307 	and.w	r3, r3, #7
 800b512:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b516:	2b04      	cmp	r3, #4
 800b518:	d84b      	bhi.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b51a:	a201      	add	r2, pc, #4	@ (adr r2, 800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b559 	.word	0x0800b559
 800b524:	0800b535 	.word	0x0800b535
 800b528:	0800b547 	.word	0x0800b547
 800b52c:	0800b563 	.word	0x0800b563
 800b530:	0800b56d 	.word	0x0800b56d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe ff4f 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b542:	f000 bed4 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b546:	f107 030c 	add.w	r3, r7, #12
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff f9fa 	bl	800a944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b554:	f000 becb 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b558:	f7fd fec8 	bl	80092ec <HAL_RCC_GetHCLKFreq>
 800b55c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b55e:	f000 bec6 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b562:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b566:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b568:	f000 bec1 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b56c:	4b71      	ldr	r3, [pc, #452]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0320 	and.w	r3, r3, #32
 800b574:	2b20      	cmp	r3, #32
 800b576:	d118      	bne.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b578:	4b6e      	ldr	r3, [pc, #440]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b584:	4b6b      	ldr	r3, [pc, #428]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	0e1b      	lsrs	r3, r3, #24
 800b58a:	f003 030f 	and.w	r3, r3, #15
 800b58e:	e006      	b.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b590:	4b68      	ldr	r3, [pc, #416]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b596:	041b      	lsls	r3, r3, #16
 800b598:	0e1b      	lsrs	r3, r3, #24
 800b59a:	f003 030f 	and.w	r3, r3, #15
 800b59e:	4a66      	ldr	r2, [pc, #408]	@ (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b5a6:	f000 bea2 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5ae:	f000 be9e 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5b6:	f000 be9a 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b5ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5be:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800b5c2:	430b      	orrs	r3, r1
 800b5c4:	d167      	bne.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b5c6:	4b5b      	ldr	r3, [pc, #364]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b5c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5cc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b5d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5d8:	d036      	beq.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5e0:	d855      	bhi.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5e8:	d029      	beq.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5f0:	d84d      	bhi.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5f8:	d013      	beq.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b600:	d845      	bhi.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b604:	2b00      	cmp	r3, #0
 800b606:	d015      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b60e:	d13e      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe fee1 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b61e:	f000 be66 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b622:	f107 030c 	add.w	r3, r7, #12
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff f98c 	bl	800a944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b630:	f000 be5d 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b634:	f7fd fe5a 	bl	80092ec <HAL_RCC_GetHCLKFreq>
 800b638:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b63a:	f000 be58 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b63e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b644:	f000 be53 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b648:	4b3a      	ldr	r3, [pc, #232]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 0320 	and.w	r3, r3, #32
 800b650:	2b20      	cmp	r3, #32
 800b652:	d118      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b654:	4b37      	ldr	r3, [pc, #220]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d005      	beq.n	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b660:	4b34      	ldr	r3, [pc, #208]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	0e1b      	lsrs	r3, r3, #24
 800b666:	f003 030f 	and.w	r3, r3, #15
 800b66a:	e006      	b.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b66c:	4b31      	ldr	r3, [pc, #196]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b66e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b672:	041b      	lsls	r3, r3, #16
 800b674:	0e1b      	lsrs	r3, r3, #24
 800b676:	f003 030f 	and.w	r3, r3, #15
 800b67a:	4a2f      	ldr	r2, [pc, #188]	@ (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b680:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b682:	f000 be34 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b686:	2300      	movs	r3, #0
 800b688:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b68a:	f000 be30 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b692:	f000 be2c 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b69a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	d152      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b6a2:	4b24      	ldr	r3, [pc, #144]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b6a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b6ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d104      	bne.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b6b4:	f7fd fe34 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b6b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6ba:	f000 be18 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6c4:	d104      	bne.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b6c6:	f7fd fd0f 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b6ca:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6cc:	f000 be0f 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b6d0:	4b18      	ldr	r3, [pc, #96]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6dc:	d107      	bne.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6e4:	d103      	bne.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b6e6:	4b15      	ldr	r3, [pc, #84]	@ (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ea:	f000 be00 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b6ee:	4b11      	ldr	r3, [pc, #68]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b20      	cmp	r3, #32
 800b6f8:	d122      	bne.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b700:	d11e      	bne.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b702:	4b0c      	ldr	r3, [pc, #48]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d005      	beq.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b70e:	4b09      	ldr	r3, [pc, #36]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	0e1b      	lsrs	r3, r3, #24
 800b714:	f003 030f 	and.w	r3, r3, #15
 800b718:	e006      	b.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b71a:	4b06      	ldr	r3, [pc, #24]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b71c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b720:	041b      	lsls	r3, r3, #16
 800b722:	0e1b      	lsrs	r3, r3, #24
 800b724:	f003 030f 	and.w	r3, r3, #15
 800b728:	4a03      	ldr	r2, [pc, #12]	@ (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b730:	f000 bddd 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b734:	46020c00 	.word	0x46020c00
 800b738:	0802d93c 	.word	0x0802d93c
 800b73c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800b740:	2300      	movs	r3, #0
 800b742:	637b      	str	r3, [r7, #52]	@ 0x34
 800b744:	f000 bdd3 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800b748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b74c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800b750:	430b      	orrs	r3, r1
 800b752:	d14c      	bne.n	800b7ee <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b754:	4ba8      	ldr	r3, [pc, #672]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b75a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b75e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	2b00      	cmp	r3, #0
 800b764:	d104      	bne.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b766:	f7fd fddb 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b76a:	6378      	str	r0, [r7, #52]	@ 0x34
 800b76c:	f000 bdbf 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800b770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b776:	d104      	bne.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b778:	f7fd fcb6 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b77c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b77e:	f000 bdb6 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b782:	4b9d      	ldr	r3, [pc, #628]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b78a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b78e:	d107      	bne.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b796:	d103      	bne.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800b798:	4b98      	ldr	r3, [pc, #608]	@ (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b79a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b79c:	f000 bda7 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b7a0:	4b95      	ldr	r3, [pc, #596]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0320 	and.w	r3, r3, #32
 800b7a8:	2b20      	cmp	r3, #32
 800b7aa:	d11c      	bne.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b7b2:	d118      	bne.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b7b4:	4b90      	ldr	r3, [pc, #576]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d005      	beq.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b7c0:	4b8d      	ldr	r3, [pc, #564]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	0e1b      	lsrs	r3, r3, #24
 800b7c6:	f003 030f 	and.w	r3, r3, #15
 800b7ca:	e006      	b.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800b7cc:	4b8a      	ldr	r3, [pc, #552]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7d2:	041b      	lsls	r3, r3, #16
 800b7d4:	0e1b      	lsrs	r3, r3, #24
 800b7d6:	f003 030f 	and.w	r3, r3, #15
 800b7da:	4a89      	ldr	r2, [pc, #548]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7e2:	f000 bd84 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ea:	f000 bd80 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800b7ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7f2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	d158      	bne.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b7fa:	4b7f      	ldr	r3, [pc, #508]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b800:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b804:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	2bc0      	cmp	r3, #192	@ 0xc0
 800b80a:	d028      	beq.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b810:	d848      	bhi.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b814:	2b80      	cmp	r3, #128	@ 0x80
 800b816:	d00e      	beq.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81a:	2b80      	cmp	r3, #128	@ 0x80
 800b81c:	d842      	bhi.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800b824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b826:	2b40      	cmp	r3, #64	@ 0x40
 800b828:	d014      	beq.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b82a:	e03b      	b.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800b82c:	f7fd fda0 	bl	8009370 <HAL_RCC_GetPCLK3Freq>
 800b830:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b832:	f000 bd5c 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b836:	4b70      	ldr	r3, [pc, #448]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b83e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b842:	d103      	bne.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800b844:	4b6d      	ldr	r3, [pc, #436]	@ (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b846:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b848:	f000 bd51 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b84c:	2300      	movs	r3, #0
 800b84e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b850:	f000 bd4d 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800b854:	f7fd fc48 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b858:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b85a:	f000 bd48 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b85e:	4b66      	ldr	r3, [pc, #408]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 0320 	and.w	r3, r3, #32
 800b866:	2b20      	cmp	r3, #32
 800b868:	d118      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b86a:	4b63      	ldr	r3, [pc, #396]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800b876:	4b60      	ldr	r3, [pc, #384]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	0e1b      	lsrs	r3, r3, #24
 800b87c:	f003 030f 	and.w	r3, r3, #15
 800b880:	e006      	b.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800b882:	4b5d      	ldr	r3, [pc, #372]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b888:	041b      	lsls	r3, r3, #16
 800b88a:	0e1b      	lsrs	r3, r3, #24
 800b88c:	f003 030f 	and.w	r3, r3, #15
 800b890:	4a5b      	ldr	r2, [pc, #364]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b896:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b898:	f000 bd29 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b89c:	2300      	movs	r3, #0
 800b89e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8a0:	f000 bd25 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8a8:	f000 bd21 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800b8ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8b0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	d14c      	bne.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b8b8:	4b4f      	ldr	r3, [pc, #316]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b8ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b8c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d104      	bne.n	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b8ca:	f7fd fd29 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b8ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800b8d0:	f000 bd0d 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8da:	d104      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b8dc:	f7fd fc04 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b8e0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b8e2:	f000 bd04 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b8e6:	4b44      	ldr	r3, [pc, #272]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b8ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8f2:	d107      	bne.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8fa:	d103      	bne.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800b8fc:	4b3f      	ldr	r3, [pc, #252]	@ (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b8fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b900:	f000 bcf5 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b904:	4b3c      	ldr	r3, [pc, #240]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 0320 	and.w	r3, r3, #32
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	d11c      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800b910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b912:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b916:	d118      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b918:	4b37      	ldr	r3, [pc, #220]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800b924:	4b34      	ldr	r3, [pc, #208]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	0e1b      	lsrs	r3, r3, #24
 800b92a:	f003 030f 	and.w	r3, r3, #15
 800b92e:	e006      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b930:	4b31      	ldr	r3, [pc, #196]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b936:	041b      	lsls	r3, r3, #16
 800b938:	0e1b      	lsrs	r3, r3, #24
 800b93a:	f003 030f 	and.w	r3, r3, #15
 800b93e:	4a30      	ldr	r2, [pc, #192]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b944:	637b      	str	r3, [r7, #52]	@ 0x34
 800b946:	f000 bcd2 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b94e:	f000 bcce 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800b952:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b956:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800b95a:	430b      	orrs	r3, r1
 800b95c:	d152      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800b95e:	4b26      	ldr	r3, [pc, #152]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b964:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b968:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800b96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d104      	bne.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b970:	f7fd fcd6 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800b974:	6378      	str	r0, [r7, #52]	@ 0x34
 800b976:	f000 bcba 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b980:	d104      	bne.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b982:	f7fd fbb1 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800b986:	6378      	str	r0, [r7, #52]	@ 0x34
 800b988:	f000 bcb1 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800b98c:	4b1a      	ldr	r3, [pc, #104]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b998:	d107      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800b99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9a0:	d103      	bne.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800b9a2:	4b16      	ldr	r3, [pc, #88]	@ (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b9a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9a6:	f000 bca2 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800b9aa:	4b13      	ldr	r3, [pc, #76]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0320 	and.w	r3, r3, #32
 800b9b2:	2b20      	cmp	r3, #32
 800b9b4:	d11c      	bne.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b9bc:	d118      	bne.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9be:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d005      	beq.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b9ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	0e1b      	lsrs	r3, r3, #24
 800b9d0:	f003 030f 	and.w	r3, r3, #15
 800b9d4:	e006      	b.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b9d6:	4b08      	ldr	r3, [pc, #32]	@ (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b9d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9dc:	041b      	lsls	r3, r3, #16
 800b9de:	0e1b      	lsrs	r3, r3, #24
 800b9e0:	f003 030f 	and.w	r3, r3, #15
 800b9e4:	4a06      	ldr	r2, [pc, #24]	@ (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9ec:	f000 bc7f 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f4:	f000 bc7b 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b9f8:	46020c00 	.word	0x46020c00
 800b9fc:	00f42400 	.word	0x00f42400
 800ba00:	0802d93c 	.word	0x0802d93c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800ba04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba08:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	d14c      	bne.n	800baaa <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800ba10:	4ba6      	ldr	r3, [pc, #664]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ba16:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ba1a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d104      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ba22:	f7fd fc7d 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800ba26:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba28:	f000 bc61 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba32:	d104      	bne.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ba34:	f7fd fb58 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800ba38:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba3a:	f000 bc58 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800ba3e:	4b9b      	ldr	r3, [pc, #620]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba4a:	d107      	bne.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba52:	d103      	bne.n	800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800ba54:	4b96      	ldr	r3, [pc, #600]	@ (800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ba56:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba58:	f000 bc49 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800ba5c:	4b93      	ldr	r3, [pc, #588]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0320 	and.w	r3, r3, #32
 800ba64:	2b20      	cmp	r3, #32
 800ba66:	d11c      	bne.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800ba68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ba6e:	d118      	bne.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba70:	4b8e      	ldr	r3, [pc, #568]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d005      	beq.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800ba7c:	4b8b      	ldr	r3, [pc, #556]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	0e1b      	lsrs	r3, r3, #24
 800ba82:	f003 030f 	and.w	r3, r3, #15
 800ba86:	e006      	b.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800ba88:	4b88      	ldr	r3, [pc, #544]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba8e:	041b      	lsls	r3, r3, #16
 800ba90:	0e1b      	lsrs	r3, r3, #24
 800ba92:	f003 030f 	and.w	r3, r3, #15
 800ba96:	4a87      	ldr	r2, [pc, #540]	@ (800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800ba98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba9e:	f000 bc26 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800baa2:	2300      	movs	r3, #0
 800baa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800baa6:	f000 bc22 	b.w	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800baaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baae:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800bab2:	430b      	orrs	r3, r1
 800bab4:	d164      	bne.n	800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bab6:	4b7d      	ldr	r3, [pc, #500]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800babc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bac0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d120      	bne.n	800bb0a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bac8:	4b78      	ldr	r3, [pc, #480]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b20      	cmp	r3, #32
 800bad2:	d117      	bne.n	800bb04 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bad4:	4b75      	ldr	r3, [pc, #468]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d005      	beq.n	800baec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800bae0:	4b72      	ldr	r3, [pc, #456]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	0e1b      	lsrs	r3, r3, #24
 800bae6:	f003 030f 	and.w	r3, r3, #15
 800baea:	e006      	b.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800baec:	4b6f      	ldr	r3, [pc, #444]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800baee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800baf2:	041b      	lsls	r3, r3, #16
 800baf4:	0e1b      	lsrs	r3, r3, #24
 800baf6:	f003 030f 	and.w	r3, r3, #15
 800bafa:	4a6e      	ldr	r2, [pc, #440]	@ (800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb00:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb02:	e3f4      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bb04:	2300      	movs	r3, #0
 800bb06:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb08:	e3f1      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bb0a:	4b68      	ldr	r3, [pc, #416]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bb0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb18:	d112      	bne.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb20:	d10e      	bne.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bb22:	4b62      	ldr	r3, [pc, #392]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bb24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bb2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb30:	d102      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800bb32:	23fa      	movs	r3, #250	@ 0xfa
 800bb34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bb36:	e3da      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bb38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bb3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bb3e:	e3d6      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800bb40:	4b5a      	ldr	r3, [pc, #360]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb4c:	d106      	bne.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb54:	d102      	bne.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800bb56:	4b56      	ldr	r3, [pc, #344]	@ (800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bb58:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb5a:	e3c8      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800bb5c:	4b53      	ldr	r3, [pc, #332]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bb5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb62:	f003 0302 	and.w	r3, r3, #2
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d107      	bne.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb70:	d103      	bne.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800bb72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb76:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb78:	e3b9      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb7e:	e3b6      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800bb80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb84:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800bb88:	430b      	orrs	r3, r1
 800bb8a:	d164      	bne.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800bb8c:	4b47      	ldr	r3, [pc, #284]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bb8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb96:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800bb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d120      	bne.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bb9e:	4b43      	ldr	r3, [pc, #268]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0320 	and.w	r3, r3, #32
 800bba6:	2b20      	cmp	r3, #32
 800bba8:	d117      	bne.n	800bbda <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbaa:	4b40      	ldr	r3, [pc, #256]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d005      	beq.n	800bbc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800bbb6:	4b3d      	ldr	r3, [pc, #244]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	0e1b      	lsrs	r3, r3, #24
 800bbbc:	f003 030f 	and.w	r3, r3, #15
 800bbc0:	e006      	b.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800bbc2:	4b3a      	ldr	r3, [pc, #232]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bbc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bbc8:	041b      	lsls	r3, r3, #16
 800bbca:	0e1b      	lsrs	r3, r3, #24
 800bbcc:	f003 030f 	and.w	r3, r3, #15
 800bbd0:	4a38      	ldr	r2, [pc, #224]	@ (800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bbd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbd8:	e389      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbde:	e386      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800bbe0:	4b32      	ldr	r3, [pc, #200]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bbe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bbe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbee:	d112      	bne.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbf6:	d10e      	bne.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bbf8:	4b2c      	ldr	r3, [pc, #176]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bbfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bbfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc06:	d102      	bne.n	800bc0e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800bc08:	23fa      	movs	r3, #250	@ 0xfa
 800bc0a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bc0c:	e36f      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bc0e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bc12:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bc14:	e36b      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800bc16:	4b25      	ldr	r3, [pc, #148]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc22:	d106      	bne.n	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800bc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc2a:	d102      	bne.n	800bc32 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800bc2c:	4b20      	ldr	r3, [pc, #128]	@ (800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bc2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc30:	e35d      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800bc32:	4b1e      	ldr	r3, [pc, #120]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d107      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800bc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bc46:	d103      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800bc48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc4e:	e34e      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc54:	e34b      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800bc56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc5a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800bc5e:	430b      	orrs	r3, r1
 800bc60:	d14e      	bne.n	800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bc62:	4b12      	ldr	r3, [pc, #72]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc68:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800bc6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d103      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bc74:	f7fd fb54 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800bc78:	6378      	str	r0, [r7, #52]	@ 0x34
 800bc7a:	e338      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc8a:	d119      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800bc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc92:	d115      	bne.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bc94:	4b05      	ldr	r3, [pc, #20]	@ (800bcac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bc96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bca2:	d109      	bne.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800bca4:	23fa      	movs	r3, #250	@ 0xfa
 800bca6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bca8:	e321      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bcaa:	bf00      	nop
 800bcac:	46020c00 	.word	0x46020c00
 800bcb0:	00f42400 	.word	0x00f42400
 800bcb4:	0802d93c 	.word	0x0802d93c
      }
      else
      {
        frequency = LSI_VALUE;
 800bcb8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bcbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bcbe:	e316      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bcc0:	4ba8      	ldr	r3, [pc, #672]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bccc:	d106      	bne.n	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800bcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bcd4:	d102      	bne.n	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800bcd6:	4ba4      	ldr	r3, [pc, #656]	@ (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bcd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcda:	e308      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bcdc:	4ba1      	ldr	r3, [pc, #644]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bcde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d107      	bne.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800bcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bcf0:	d103      	bne.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800bcf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcf8:	e2f9      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcfe:	e2f6      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bd00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd04:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800bd08:	430b      	orrs	r3, r1
 800bd0a:	d12d      	bne.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bd0c:	4b95      	ldr	r3, [pc, #596]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bd0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd12:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800bd16:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bd18:	4b92      	ldr	r3, [pc, #584]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd24:	d105      	bne.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800bd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800bd2c:	4b8e      	ldr	r3, [pc, #568]	@ (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bd2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd30:	e2dd      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd38:	d107      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe fb4c 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd46:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd48:	e2d1      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd50:	d107      	bne.n	800bd62 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd52:	f107 0318 	add.w	r3, r7, #24
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fc9a 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800bd5c:	69bb      	ldr	r3, [r7, #24]
 800bd5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd60:	e2c5      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd66:	e2c2      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800bd68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd6c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800bd70:	430b      	orrs	r3, r1
 800bd72:	d156      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800bd74:	4b7b      	ldr	r3, [pc, #492]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bd76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bd7a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bd7e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800bd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bd86:	d028      	beq.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800bd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bd8e:	d845      	bhi.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800bd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd96:	d013      	beq.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800bd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd9e:	d83d      	bhi.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800bda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d004      	beq.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800bda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdac:	d004      	beq.n	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800bdae:	e035      	b.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800bdb0:	f7fd faca 	bl	8009348 <HAL_RCC_GetPCLK2Freq>
 800bdb4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bdb6:	e29a      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bdb8:	f7fd f996 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800bdbc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bdbe:	e296      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bdc0:	4b68      	ldr	r3, [pc, #416]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bdc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bdcc:	d102      	bne.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800bdce:	4b66      	ldr	r3, [pc, #408]	@ (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bdd0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bdd2:	e28c      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdd8:	e289      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bdda:	4b62      	ldr	r3, [pc, #392]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0320 	and.w	r3, r3, #32
 800bde2:	2b20      	cmp	r3, #32
 800bde4:	d117      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bde6:	4b5f      	ldr	r3, [pc, #380]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d005      	beq.n	800bdfe <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800bdf2:	4b5c      	ldr	r3, [pc, #368]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	0e1b      	lsrs	r3, r3, #24
 800bdf8:	f003 030f 	and.w	r3, r3, #15
 800bdfc:	e006      	b.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800bdfe:	4b59      	ldr	r3, [pc, #356]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800be00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be04:	041b      	lsls	r3, r3, #16
 800be06:	0e1b      	lsrs	r3, r3, #24
 800be08:	f003 030f 	and.w	r3, r3, #15
 800be0c:	4a57      	ldr	r2, [pc, #348]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800be0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800be14:	e26b      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800be16:	2300      	movs	r3, #0
 800be18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be1a:	e268      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be20:	e265      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800be22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be26:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800be2a:	430b      	orrs	r3, r1
 800be2c:	d156      	bne.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800be2e:	4b4d      	ldr	r3, [pc, #308]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800be30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800be34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800be38:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800be3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be40:	d028      	beq.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800be42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be48:	d845      	bhi.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be50:	d013      	beq.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be58:	d83d      	bhi.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800be5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d004      	beq.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800be60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be66:	d004      	beq.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800be68:	e035      	b.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800be6a:	f7fd fa59 	bl	8009320 <HAL_RCC_GetPCLK1Freq>
 800be6e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800be70:	e23d      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800be72:	f7fd f939 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800be76:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800be78:	e239      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be7a:	4b3a      	ldr	r3, [pc, #232]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be86:	d102      	bne.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800be88:	4b37      	ldr	r3, [pc, #220]	@ (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800be8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800be8c:	e22f      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800be8e:	2300      	movs	r3, #0
 800be90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be92:	e22c      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be94:	4b33      	ldr	r3, [pc, #204]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 0320 	and.w	r3, r3, #32
 800be9c:	2b20      	cmp	r3, #32
 800be9e:	d117      	bne.n	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bea0:	4b30      	ldr	r3, [pc, #192]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d005      	beq.n	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800beac:	4b2d      	ldr	r3, [pc, #180]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	0e1b      	lsrs	r3, r3, #24
 800beb2:	f003 030f 	and.w	r3, r3, #15
 800beb6:	e006      	b.n	800bec6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800beb8:	4b2a      	ldr	r3, [pc, #168]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800beba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bebe:	041b      	lsls	r3, r3, #16
 800bec0:	0e1b      	lsrs	r3, r3, #24
 800bec2:	f003 030f 	and.w	r3, r3, #15
 800bec6:	4a29      	ldr	r2, [pc, #164]	@ (800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800bec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800becc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bece:	e20e      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bed0:	2300      	movs	r3, #0
 800bed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bed4:	e20b      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bed6:	2300      	movs	r3, #0
 800bed8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800beda:	e208      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800bedc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bee0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800bee4:	430b      	orrs	r3, r1
 800bee6:	d17c      	bne.n	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800bee8:	4b1e      	ldr	r3, [pc, #120]	@ (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800beea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800beee:	f003 0318 	and.w	r3, r3, #24
 800bef2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800bef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef6:	2b18      	cmp	r3, #24
 800bef8:	d870      	bhi.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800befa:	a201      	add	r2, pc, #4	@ (adr r2, 800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800befc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf00:	0800bf71 	.word	0x0800bf71
 800bf04:	0800bfdd 	.word	0x0800bfdd
 800bf08:	0800bfdd 	.word	0x0800bfdd
 800bf0c:	0800bfdd 	.word	0x0800bfdd
 800bf10:	0800bfdd 	.word	0x0800bfdd
 800bf14:	0800bfdd 	.word	0x0800bfdd
 800bf18:	0800bfdd 	.word	0x0800bfdd
 800bf1c:	0800bfdd 	.word	0x0800bfdd
 800bf20:	0800bf79 	.word	0x0800bf79
 800bf24:	0800bfdd 	.word	0x0800bfdd
 800bf28:	0800bfdd 	.word	0x0800bfdd
 800bf2c:	0800bfdd 	.word	0x0800bfdd
 800bf30:	0800bfdd 	.word	0x0800bfdd
 800bf34:	0800bfdd 	.word	0x0800bfdd
 800bf38:	0800bfdd 	.word	0x0800bfdd
 800bf3c:	0800bfdd 	.word	0x0800bfdd
 800bf40:	0800bf81 	.word	0x0800bf81
 800bf44:	0800bfdd 	.word	0x0800bfdd
 800bf48:	0800bfdd 	.word	0x0800bfdd
 800bf4c:	0800bfdd 	.word	0x0800bfdd
 800bf50:	0800bfdd 	.word	0x0800bfdd
 800bf54:	0800bfdd 	.word	0x0800bfdd
 800bf58:	0800bfdd 	.word	0x0800bfdd
 800bf5c:	0800bfdd 	.word	0x0800bfdd
 800bf60:	0800bf9b 	.word	0x0800bf9b
 800bf64:	46020c00 	.word	0x46020c00
 800bf68:	00f42400 	.word	0x00f42400
 800bf6c:	0802d93c 	.word	0x0802d93c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800bf70:	f7fd f9fe 	bl	8009370 <HAL_RCC_GetPCLK3Freq>
 800bf74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bf76:	e1ba      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bf78:	f7fd f8b6 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800bf7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bf7e:	e1b6      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf80:	4b9f      	ldr	r3, [pc, #636]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf8c:	d102      	bne.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800bf8e:	4b9d      	ldr	r3, [pc, #628]	@ (800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800bf90:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bf92:	e1ac      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bf94:	2300      	movs	r3, #0
 800bf96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf98:	e1a9      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bf9a:	4b99      	ldr	r3, [pc, #612]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0320 	and.w	r3, r3, #32
 800bfa2:	2b20      	cmp	r3, #32
 800bfa4:	d117      	bne.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bfa6:	4b96      	ldr	r3, [pc, #600]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800bfb2:	4b93      	ldr	r3, [pc, #588]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	0e1b      	lsrs	r3, r3, #24
 800bfb8:	f003 030f 	and.w	r3, r3, #15
 800bfbc:	e006      	b.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800bfbe:	4b90      	ldr	r3, [pc, #576]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bfc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bfc4:	041b      	lsls	r3, r3, #16
 800bfc6:	0e1b      	lsrs	r3, r3, #24
 800bfc8:	f003 030f 	and.w	r3, r3, #15
 800bfcc:	4a8e      	ldr	r2, [pc, #568]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800bfce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bfd4:	e18b      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfda:	e188      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfe0:	e185      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800bfe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800bfea:	430b      	orrs	r3, r1
 800bfec:	d155      	bne.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800bfee:	4b84      	ldr	r3, [pc, #528]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bff0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bff4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bff8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800bffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c000:	d013      	beq.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c008:	d844      	bhi.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c010:	d013      	beq.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c018:	d83c      	bhi.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d014      	beq.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c026:	d014      	beq.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c028:	e034      	b.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c02a:	f107 0318 	add.w	r3, r7, #24
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fb2e 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c038:	e159      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c03a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fe f9cc 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c046:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c048:	e151      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c04a:	f7fd f84d 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800c04e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c050:	e14d      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c052:	4b6b      	ldr	r3, [pc, #428]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 0320 	and.w	r3, r3, #32
 800c05a:	2b20      	cmp	r3, #32
 800c05c:	d117      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c05e:	4b68      	ldr	r3, [pc, #416]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c06a:	4b65      	ldr	r3, [pc, #404]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	0e1b      	lsrs	r3, r3, #24
 800c070:	f003 030f 	and.w	r3, r3, #15
 800c074:	e006      	b.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c076:	4b62      	ldr	r3, [pc, #392]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c07c:	041b      	lsls	r3, r3, #16
 800c07e:	0e1b      	lsrs	r3, r3, #24
 800c080:	f003 030f 	and.w	r3, r3, #15
 800c084:	4a60      	ldr	r2, [pc, #384]	@ (800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c08a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c08c:	e12f      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c08e:	2300      	movs	r3, #0
 800c090:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c092:	e12c      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c094:	2300      	movs	r3, #0
 800c096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c098:	e129      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c09e:	1e59      	subs	r1, r3, #1
 800c0a0:	ea52 0301 	orrs.w	r3, r2, r1
 800c0a4:	d13c      	bne.n	800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c0a6:	4b56      	ldr	r3, [pc, #344]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c0a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c0ac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c0b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c0b8:	d027      	beq.n	800c10a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c0c0:	d82b      	bhi.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c0c8:	d017      	beq.n	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c0d0:	d823      	bhi.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d004      	beq.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c0de:	d004      	beq.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c0e0:	e01b      	b.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c0e2:	f7fd f801 	bl	80090e8 <HAL_RCC_GetSysClockFreq>
 800c0e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c0e8:	e101      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe f974 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0f8:	e0f9      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0fa:	f107 0318 	add.w	r3, r7, #24
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fac6 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c108:	e0f1      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c10a:	f107 030c 	add.w	r3, r7, #12
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe fc18 	bl	800a944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c118:	e0e9      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c11a:	2300      	movs	r3, #0
 800c11c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c11e:	e0e6      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c124:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800c128:	430b      	orrs	r3, r1
 800c12a:	d131      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c12c:	4b34      	ldr	r3, [pc, #208]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c12e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c136:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c138:	4b31      	ldr	r3, [pc, #196]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c13a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c13e:	f003 0302 	and.w	r3, r3, #2
 800c142:	2b02      	cmp	r3, #2
 800c144:	d106      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c14c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c150:	637b      	str	r3, [r7, #52]	@ 0x34
 800c152:	e0cc      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c154:	4b2a      	ldr	r3, [pc, #168]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c15a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c15e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c162:	d112      	bne.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c16a:	d10e      	bne.n	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c16c:	4b24      	ldr	r3, [pc, #144]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c16e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c17a:	d102      	bne.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c17c:	23fa      	movs	r3, #250	@ 0xfa
 800c17e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c180:	e0b5      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c182:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c186:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c188:	e0b1      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c18e:	e0ae      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c194:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c198:	430b      	orrs	r3, r1
 800c19a:	d13b      	bne.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c19c:	4b18      	ldr	r3, [pc, #96]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c19e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c1a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c1a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c1a8:	4b15      	ldr	r3, [pc, #84]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1b4:	d105      	bne.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d102      	bne.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c1bc:	4b13      	ldr	r3, [pc, #76]	@ (800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c1be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1c0:	e095      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c1c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1ce:	d106      	bne.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1d6:	d102      	bne.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c1da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1dc:	e087      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c1de:	4b08      	ldr	r3, [pc, #32]	@ (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1ea:	d106      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1f2:	d102      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c1f4:	4b03      	ldr	r3, [pc, #12]	@ (800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1f8:	e079      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1fe:	e076      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c200:	46020c00 	.word	0x46020c00
 800c204:	00f42400 	.word	0x00f42400
 800c208:	0802d93c 	.word	0x0802d93c
 800c20c:	02dc6c00 	.word	0x02dc6c00
 800c210:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c214:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c218:	1e99      	subs	r1, r3, #2
 800c21a:	ea52 0301 	orrs.w	r3, r2, r1
 800c21e:	d120      	bne.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c220:	4b35      	ldr	r3, [pc, #212]	@ (800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c222:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c22a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c238:	d008      	beq.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c23a:	e00f      	b.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c23c:	f107 030c 	add.w	r3, r7, #12
 800c240:	4618      	mov	r0, r3
 800c242:	f7fe fb7f 	bl	800a944 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c24a:	e050      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c24c:	f107 0318 	add.w	r3, r7, #24
 800c250:	4618      	mov	r0, r3
 800c252:	f7fe fa1d 	bl	800a690 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c25a:	e048      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c25c:	2300      	movs	r3, #0
 800c25e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c260:	e045      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c262:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c266:	f1a3 0108 	sub.w	r1, r3, #8
 800c26a:	ea52 0301 	orrs.w	r3, r2, r1
 800c26e:	d13c      	bne.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c270:	4b21      	ldr	r3, [pc, #132]	@ (800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c272:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c276:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c27a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c27c:	4b1e      	ldr	r3, [pc, #120]	@ (800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c288:	d105      	bne.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d102      	bne.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c290:	4b1a      	ldr	r3, [pc, #104]	@ (800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c292:	637b      	str	r3, [r7, #52]	@ 0x34
 800c294:	e02b      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c296:	4b18      	ldr	r3, [pc, #96]	@ (800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c29e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2a2:	d106      	bne.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2aa:	d102      	bne.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c2ac:	4b14      	ldr	r3, [pc, #80]	@ (800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c2ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2b0:	e01d      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2b8:	d107      	bne.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fe f88c 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2c8:	e011      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c2d0:	d108      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fe f880 	bl	800a3dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2de:	085b      	lsrs	r3, r3, #1
 800c2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2e2:	e004      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2e8:	e001      	b.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800c2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3738      	adds	r7, #56	@ 0x38
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	46020c00 	.word	0x46020c00
 800c2fc:	00f42400 	.word	0x00f42400
 800c300:	007a1200 	.word	0x007a1200

0800c304 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c308:	4b06      	ldr	r3, [pc, #24]	@ (800c324 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c30a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c30e:	4a05      	ldr	r2, [pc, #20]	@ (800c324 <HAL_RCCEx_EnableLSECSS+0x20>)
 800c310:	f043 0320 	orr.w	r3, r3, #32
 800c314:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800c318:	bf00      	nop
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	46020c00 	.word	0x46020c00

0800c328 <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  FlagStatus       pwrclkchanged = RESET;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
  FlagStatus       backupchanged = RESET;
 800c334:	2300      	movs	r3, #0
 800c336:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* Update LSCOSEL clock source in Backup Domain control register */
  if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c338:	4b20      	ldr	r3, [pc, #128]	@ (800c3bc <HAL_RCCEx_EnableLSCO+0x94>)
 800c33a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c33e:	f003 0304 	and.w	r3, r3, #4
 800c342:	2b00      	cmp	r3, #0
 800c344:	d110      	bne.n	800c368 <HAL_RCCEx_EnableLSCO+0x40>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c346:	4b1d      	ldr	r3, [pc, #116]	@ (800c3bc <HAL_RCCEx_EnableLSCO+0x94>)
 800c348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c34c:	4a1b      	ldr	r2, [pc, #108]	@ (800c3bc <HAL_RCCEx_EnableLSCO+0x94>)
 800c34e:	f043 0304 	orr.w	r3, r3, #4
 800c352:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800c356:	4b19      	ldr	r3, [pc, #100]	@ (800c3bc <HAL_RCCEx_EnableLSCO+0x94>)
 800c358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c35c:	f003 0304 	and.w	r3, r3, #4
 800c360:	60bb      	str	r3, [r7, #8]
 800c362:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800c364:	2301      	movs	r3, #1
 800c366:	73fb      	strb	r3, [r7, #15]
  }
  if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800c368:	4b15      	ldr	r3, [pc, #84]	@ (800c3c0 <HAL_RCCEx_EnableLSCO+0x98>)
 800c36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c36c:	f003 0301 	and.w	r3, r3, #1
 800c370:	2b00      	cmp	r3, #0
 800c372:	d103      	bne.n	800c37c <HAL_RCCEx_EnableLSCO+0x54>
  {
    HAL_PWR_EnableBkUpAccess();
 800c374:	f7fb fcce 	bl	8007d14 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800c378:	2301      	movs	r3, #1
 800c37a:	73bb      	strb	r3, [r7, #14]
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800c37c:	4b0f      	ldr	r3, [pc, #60]	@ (800c3bc <HAL_RCCEx_EnableLSCO+0x94>)
 800c37e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c382:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4313      	orrs	r3, r2
 800c38a:	4a0c      	ldr	r2, [pc, #48]	@ (800c3bc <HAL_RCCEx_EnableLSCO+0x94>)
 800c38c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c390:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  if (backupchanged == SET)
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d101      	bne.n	800c39e <HAL_RCCEx_EnableLSCO+0x76>
  {
    HAL_PWR_DisableBkUpAccess();
 800c39a:	f7fb fccb 	bl	8007d34 <HAL_PWR_DisableBkUpAccess>
  }
  if (pwrclkchanged == SET)
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d107      	bne.n	800c3b4 <HAL_RCCEx_EnableLSCO+0x8c>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 800c3a4:	4b05      	ldr	r3, [pc, #20]	@ (800c3bc <HAL_RCCEx_EnableLSCO+0x94>)
 800c3a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c3aa:	4a04      	ldr	r2, [pc, #16]	@ (800c3bc <HAL_RCCEx_EnableLSCO+0x94>)
 800c3ac:	f023 0304 	bic.w	r3, r3, #4
 800c3b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }
}
 800c3b4:	bf00      	nop
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	46020c00 	.word	0x46020c00
 800c3c0:	46020800 	.word	0x46020800

0800c3c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c3cc:	4b47      	ldr	r3, [pc, #284]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a46      	ldr	r2, [pc, #280]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c3d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c3d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c3d8:	f7f6 f98c 	bl	80026f4 <HAL_GetTick>
 800c3dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3de:	e008      	b.n	800c3f2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3e0:	f7f6 f988 	bl	80026f4 <HAL_GetTick>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d901      	bls.n	800c3f2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e077      	b.n	800c4e2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3f2:	4b3e      	ldr	r3, [pc, #248]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1f0      	bne.n	800c3e0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c3fe:	4b3b      	ldr	r3, [pc, #236]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c402:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c406:	f023 0303 	bic.w	r3, r3, #3
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	6811      	ldr	r1, [r2, #0]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	6852      	ldr	r2, [r2, #4]
 800c412:	3a01      	subs	r2, #1
 800c414:	0212      	lsls	r2, r2, #8
 800c416:	430a      	orrs	r2, r1
 800c418:	4934      	ldr	r1, [pc, #208]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c41a:	4313      	orrs	r3, r2
 800c41c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c41e:	4b33      	ldr	r3, [pc, #204]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c422:	4b33      	ldr	r3, [pc, #204]	@ (800c4f0 <RCCEx_PLL2_Config+0x12c>)
 800c424:	4013      	ands	r3, r2
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	6892      	ldr	r2, [r2, #8]
 800c42a:	3a01      	subs	r2, #1
 800c42c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	68d2      	ldr	r2, [r2, #12]
 800c434:	3a01      	subs	r2, #1
 800c436:	0252      	lsls	r2, r2, #9
 800c438:	b292      	uxth	r2, r2
 800c43a:	4311      	orrs	r1, r2
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	6912      	ldr	r2, [r2, #16]
 800c440:	3a01      	subs	r2, #1
 800c442:	0412      	lsls	r2, r2, #16
 800c444:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c448:	4311      	orrs	r1, r2
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	6952      	ldr	r2, [r2, #20]
 800c44e:	3a01      	subs	r2, #1
 800c450:	0612      	lsls	r2, r2, #24
 800c452:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c456:	430a      	orrs	r2, r1
 800c458:	4924      	ldr	r1, [pc, #144]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c45a:	4313      	orrs	r3, r2
 800c45c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c45e:	4b23      	ldr	r3, [pc, #140]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c462:	f023 020c 	bic.w	r2, r3, #12
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	4920      	ldr	r1, [pc, #128]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c470:	4b1e      	ldr	r3, [pc, #120]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a1b      	ldr	r3, [r3, #32]
 800c478:	491c      	ldr	r1, [pc, #112]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c47a:	4313      	orrs	r3, r2
 800c47c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c47e:	4b1b      	ldr	r3, [pc, #108]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c482:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c484:	f023 0310 	bic.w	r3, r3, #16
 800c488:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c48a:	4b18      	ldr	r3, [pc, #96]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c48c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c48e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c492:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	69d2      	ldr	r2, [r2, #28]
 800c49a:	00d2      	lsls	r2, r2, #3
 800c49c:	4913      	ldr	r1, [pc, #76]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c4a2:	4b12      	ldr	r3, [pc, #72]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a6:	4a11      	ldr	r2, [pc, #68]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c4a8:	f043 0310 	orr.w	r3, r3, #16
 800c4ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c4ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a0e      	ldr	r2, [pc, #56]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c4b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c4ba:	f7f6 f91b 	bl	80026f4 <HAL_GetTick>
 800c4be:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4c0:	e008      	b.n	800c4d4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4c2:	f7f6 f917 	bl	80026f4 <HAL_GetTick>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d901      	bls.n	800c4d4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e006      	b.n	800c4e2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4d4:	4b05      	ldr	r3, [pc, #20]	@ (800c4ec <RCCEx_PLL2_Config+0x128>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d0f0      	beq.n	800c4c2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0

}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	46020c00 	.word	0x46020c00
 800c4f0:	80800000 	.word	0x80800000

0800c4f4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c4fc:	4b47      	ldr	r3, [pc, #284]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a46      	ldr	r2, [pc, #280]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c506:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c508:	f7f6 f8f4 	bl	80026f4 <HAL_GetTick>
 800c50c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c50e:	e008      	b.n	800c522 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c510:	f7f6 f8f0 	bl	80026f4 <HAL_GetTick>
 800c514:	4602      	mov	r2, r0
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d901      	bls.n	800c522 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e077      	b.n	800c612 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c522:	4b3e      	ldr	r3, [pc, #248]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1f0      	bne.n	800c510 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c52e:	4b3b      	ldr	r3, [pc, #236]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c532:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c536:	f023 0303 	bic.w	r3, r3, #3
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	6811      	ldr	r1, [r2, #0]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	6852      	ldr	r2, [r2, #4]
 800c542:	3a01      	subs	r2, #1
 800c544:	0212      	lsls	r2, r2, #8
 800c546:	430a      	orrs	r2, r1
 800c548:	4934      	ldr	r1, [pc, #208]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	630b      	str	r3, [r1, #48]	@ 0x30
 800c54e:	4b33      	ldr	r3, [pc, #204]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c552:	4b33      	ldr	r3, [pc, #204]	@ (800c620 <RCCEx_PLL3_Config+0x12c>)
 800c554:	4013      	ands	r3, r2
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	6892      	ldr	r2, [r2, #8]
 800c55a:	3a01      	subs	r2, #1
 800c55c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	68d2      	ldr	r2, [r2, #12]
 800c564:	3a01      	subs	r2, #1
 800c566:	0252      	lsls	r2, r2, #9
 800c568:	b292      	uxth	r2, r2
 800c56a:	4311      	orrs	r1, r2
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	6912      	ldr	r2, [r2, #16]
 800c570:	3a01      	subs	r2, #1
 800c572:	0412      	lsls	r2, r2, #16
 800c574:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c578:	4311      	orrs	r1, r2
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	6952      	ldr	r2, [r2, #20]
 800c57e:	3a01      	subs	r2, #1
 800c580:	0612      	lsls	r2, r2, #24
 800c582:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c586:	430a      	orrs	r2, r1
 800c588:	4924      	ldr	r1, [pc, #144]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c58e:	4b23      	ldr	r3, [pc, #140]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c592:	f023 020c 	bic.w	r2, r3, #12
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	4920      	ldr	r1, [pc, #128]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c59c:	4313      	orrs	r3, r2
 800c59e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c5a0:	4b1e      	ldr	r3, [pc, #120]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	491c      	ldr	r1, [pc, #112]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c5ae:	4b1b      	ldr	r3, [pc, #108]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5b2:	4a1a      	ldr	r2, [pc, #104]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5b4:	f023 0310 	bic.w	r3, r3, #16
 800c5b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c5ba:	4b18      	ldr	r3, [pc, #96]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c5c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	69d2      	ldr	r2, [r2, #28]
 800c5ca:	00d2      	lsls	r2, r2, #3
 800c5cc:	4913      	ldr	r1, [pc, #76]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c5d2:	4b12      	ldr	r3, [pc, #72]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5d6:	4a11      	ldr	r2, [pc, #68]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5d8:	f043 0310 	orr.w	r3, r3, #16
 800c5dc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c5de:	4b0f      	ldr	r3, [pc, #60]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a0e      	ldr	r2, [pc, #56]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c5e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c5e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c5ea:	f7f6 f883 	bl	80026f4 <HAL_GetTick>
 800c5ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5f0:	e008      	b.n	800c604 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c5f2:	f7f6 f87f 	bl	80026f4 <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d901      	bls.n	800c604 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e006      	b.n	800c612 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c604:	4b05      	ldr	r3, [pc, #20]	@ (800c61c <RCCEx_PLL3_Config+0x128>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0f0      	beq.n	800c5f2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	46020c00 	.word	0x46020c00
 800c620:	80800000 	.word	0x80800000

0800c624 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d071      	beq.n	800c71a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d106      	bne.n	800c650 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7f5 fd5c 	bl	8002108 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2202      	movs	r2, #2
 800c654:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c658:	4b32      	ldr	r3, [pc, #200]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	f003 0310 	and.w	r3, r3, #16
 800c660:	2b10      	cmp	r3, #16
 800c662:	d051      	beq.n	800c708 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c664:	4b2f      	ldr	r3, [pc, #188]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c666:	22ca      	movs	r2, #202	@ 0xca
 800c668:	625a      	str	r2, [r3, #36]	@ 0x24
 800c66a:	4b2e      	ldr	r3, [pc, #184]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c66c:	2253      	movs	r2, #83	@ 0x53
 800c66e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f88b 	bl	800c78c <RTC_EnterInitMode>
 800c676:	4603      	mov	r3, r0
 800c678:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d13f      	bne.n	800c700 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c680:	4b28      	ldr	r3, [pc, #160]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	4a27      	ldr	r2, [pc, #156]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c686:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c68a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c68e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c690:	4b24      	ldr	r3, [pc, #144]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c692:	699a      	ldr	r2, [r3, #24]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6859      	ldr	r1, [r3, #4]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	691b      	ldr	r3, [r3, #16]
 800c69c:	4319      	orrs	r1, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	430b      	orrs	r3, r1
 800c6a4:	491f      	ldr	r1, [pc, #124]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68da      	ldr	r2, [r3, #12]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	041b      	lsls	r3, r3, #16
 800c6b4:	491b      	ldr	r1, [pc, #108]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c6ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ca:	430b      	orrs	r3, r1
 800c6cc:	4915      	ldr	r1, [pc, #84]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f896 	bl	800c804 <RTC_ExitInitMode>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10e      	bne.n	800c700 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c6e2:	4b10      	ldr	r3, [pc, #64]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c6e4:	699b      	ldr	r3, [r3, #24]
 800c6e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a19      	ldr	r1, [r3, #32]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	4319      	orrs	r1, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	430b      	orrs	r3, r1
 800c6fa:	490a      	ldr	r1, [pc, #40]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c700:	4b08      	ldr	r3, [pc, #32]	@ (800c724 <HAL_RTC_Init+0x100>)
 800c702:	22ff      	movs	r2, #255	@ 0xff
 800c704:	625a      	str	r2, [r3, #36]	@ 0x24
 800c706:	e001      	b.n	800c70c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d103      	bne.n	800c71a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	46007800 	.word	0x46007800

0800c728 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c730:	4b15      	ldr	r3, [pc, #84]	@ (800c788 <HAL_RTC_WaitForSynchro+0x60>)
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	4a14      	ldr	r2, [pc, #80]	@ (800c788 <HAL_RTC_WaitForSynchro+0x60>)
 800c736:	f023 0320 	bic.w	r3, r3, #32
 800c73a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c73c:	f7f5 ffda 	bl	80026f4 <HAL_GetTick>
 800c740:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c742:	e013      	b.n	800c76c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c744:	f7f5 ffd6 	bl	80026f4 <HAL_GetTick>
 800c748:	4602      	mov	r2, r0
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	1ad3      	subs	r3, r2, r3
 800c74e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c752:	d90b      	bls.n	800c76c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c754:	4b0c      	ldr	r3, [pc, #48]	@ (800c788 <HAL_RTC_WaitForSynchro+0x60>)
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	f003 0320 	and.w	r3, r3, #32
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10c      	bne.n	800c77a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2203      	movs	r2, #3
 800c764:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800c768:	2303      	movs	r3, #3
 800c76a:	e008      	b.n	800c77e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c76c:	4b06      	ldr	r3, [pc, #24]	@ (800c788 <HAL_RTC_WaitForSynchro+0x60>)
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	f003 0320 	and.w	r3, r3, #32
 800c774:	2b00      	cmp	r3, #0
 800c776:	d0e5      	beq.n	800c744 <HAL_RTC_WaitForSynchro+0x1c>
 800c778:	e000      	b.n	800c77c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c77a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	46007800 	.word	0x46007800

0800c78c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c798:	4b19      	ldr	r3, [pc, #100]	@ (800c800 <RTC_EnterInitMode+0x74>)
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d128      	bne.n	800c7f6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c7a4:	4b16      	ldr	r3, [pc, #88]	@ (800c800 <RTC_EnterInitMode+0x74>)
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	4a15      	ldr	r2, [pc, #84]	@ (800c800 <RTC_EnterInitMode+0x74>)
 800c7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ae:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c7b0:	f7f5 ffa0 	bl	80026f4 <HAL_GetTick>
 800c7b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c7b6:	e013      	b.n	800c7e0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c7b8:	f7f5 ff9c 	bl	80026f4 <HAL_GetTick>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c7c6:	d90b      	bls.n	800c7e0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c7c8:	4b0d      	ldr	r3, [pc, #52]	@ (800c800 <RTC_EnterInitMode+0x74>)
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10f      	bne.n	800c7f4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2203      	movs	r2, #3
 800c7dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c7e0:	4b07      	ldr	r3, [pc, #28]	@ (800c800 <RTC_EnterInitMode+0x74>)
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d104      	bne.n	800c7f6 <RTC_EnterInitMode+0x6a>
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d1e2      	bne.n	800c7b8 <RTC_EnterInitMode+0x2c>
 800c7f2:	e000      	b.n	800c7f6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c7f4:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	46007800 	.word	0x46007800

0800c804 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c80c:	2300      	movs	r3, #0
 800c80e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c810:	4b1a      	ldr	r3, [pc, #104]	@ (800c87c <RTC_ExitInitMode+0x78>)
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	4a19      	ldr	r2, [pc, #100]	@ (800c87c <RTC_ExitInitMode+0x78>)
 800c816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c81a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c81c:	4b17      	ldr	r3, [pc, #92]	@ (800c87c <RTC_ExitInitMode+0x78>)
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10c      	bne.n	800c842 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ff7d 	bl	800c728 <HAL_RTC_WaitForSynchro>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d01e      	beq.n	800c872 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2203      	movs	r2, #3
 800c838:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	73fb      	strb	r3, [r7, #15]
 800c840:	e017      	b.n	800c872 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c842:	4b0e      	ldr	r3, [pc, #56]	@ (800c87c <RTC_ExitInitMode+0x78>)
 800c844:	699b      	ldr	r3, [r3, #24]
 800c846:	4a0d      	ldr	r2, [pc, #52]	@ (800c87c <RTC_ExitInitMode+0x78>)
 800c848:	f023 0320 	bic.w	r3, r3, #32
 800c84c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7ff ff6a 	bl	800c728 <HAL_RTC_WaitForSynchro>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d005      	beq.n	800c866 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2203      	movs	r2, #3
 800c85e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c862:	2303      	movs	r3, #3
 800c864:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c866:	4b05      	ldr	r3, [pc, #20]	@ (800c87c <RTC_ExitInitMode+0x78>)
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	4a04      	ldr	r2, [pc, #16]	@ (800c87c <RTC_ExitInitMode+0x78>)
 800c86c:	f043 0320 	orr.w	r3, r3, #32
 800c870:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c872:	7bfb      	ldrb	r3, [r7, #15]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	46007800 	.word	0x46007800

0800c880 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	4910      	ldr	r1, [pc, #64]	@ (800c8d4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c894:	4313      	orrs	r3, r2
 800c896:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	689a      	ldr	r2, [r3, #8]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	431a      	orrs	r2, r3
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	490c      	ldr	r1, [pc, #48]	@ (800c8d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c8ae:	6a1b      	ldr	r3, [r3, #32]
 800c8b0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	6919      	ldr	r1, [r3, #16]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	041b      	lsls	r3, r3, #16
 800c8be:	430b      	orrs	r3, r1
 800c8c0:	4905      	ldr	r1, [pc, #20]	@ (800c8d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	46007800 	.word	0x46007800
 800c8d8:	46007c00 	.word	0x46007c00

0800c8dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e049      	b.n	800c982 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d106      	bne.n	800c908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f841 	bl	800c98a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2202      	movs	r2, #2
 800c90c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	3304      	adds	r3, #4
 800c918:	4619      	mov	r1, r3
 800c91a:	4610      	mov	r0, r2
 800c91c:	f000 fa58 	bl	800cdd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b083      	sub	sp, #12
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c992:	bf00      	nop
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
	...

0800c9a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d001      	beq.n	800c9b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e072      	b.n	800ca9e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68da      	ldr	r2, [r3, #12]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f042 0201 	orr.w	r2, r2, #1
 800c9ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a35      	ldr	r2, [pc, #212]	@ (800caac <HAL_TIM_Base_Start_IT+0x10c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d040      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a34      	ldr	r2, [pc, #208]	@ (800cab0 <HAL_TIM_Base_Start_IT+0x110>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d03b      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9ec:	d036      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c9f6:	d031      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a2d      	ldr	r2, [pc, #180]	@ (800cab4 <HAL_TIM_Base_Start_IT+0x114>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d02c      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a2c      	ldr	r2, [pc, #176]	@ (800cab8 <HAL_TIM_Base_Start_IT+0x118>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d027      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a2a      	ldr	r2, [pc, #168]	@ (800cabc <HAL_TIM_Base_Start_IT+0x11c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d022      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a29      	ldr	r2, [pc, #164]	@ (800cac0 <HAL_TIM_Base_Start_IT+0x120>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d01d      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a27      	ldr	r2, [pc, #156]	@ (800cac4 <HAL_TIM_Base_Start_IT+0x124>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d018      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a26      	ldr	r2, [pc, #152]	@ (800cac8 <HAL_TIM_Base_Start_IT+0x128>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d013      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a24      	ldr	r2, [pc, #144]	@ (800cacc <HAL_TIM_Base_Start_IT+0x12c>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d00e      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a23      	ldr	r2, [pc, #140]	@ (800cad0 <HAL_TIM_Base_Start_IT+0x130>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d009      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a21      	ldr	r2, [pc, #132]	@ (800cad4 <HAL_TIM_Base_Start_IT+0x134>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d004      	beq.n	800ca5c <HAL_TIM_Base_Start_IT+0xbc>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a20      	ldr	r2, [pc, #128]	@ (800cad8 <HAL_TIM_Base_Start_IT+0x138>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d115      	bne.n	800ca88 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	689a      	ldr	r2, [r3, #8]
 800ca62:	4b1e      	ldr	r3, [pc, #120]	@ (800cadc <HAL_TIM_Base_Start_IT+0x13c>)
 800ca64:	4013      	ands	r3, r2
 800ca66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2b06      	cmp	r3, #6
 800ca6c:	d015      	beq.n	800ca9a <HAL_TIM_Base_Start_IT+0xfa>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca74:	d011      	beq.n	800ca9a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f042 0201 	orr.w	r2, r2, #1
 800ca84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca86:	e008      	b.n	800ca9a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f042 0201 	orr.w	r2, r2, #1
 800ca96:	601a      	str	r2, [r3, #0]
 800ca98:	e000      	b.n	800ca9c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca9c:	2300      	movs	r3, #0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3714      	adds	r7, #20
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	40012c00 	.word	0x40012c00
 800cab0:	50012c00 	.word	0x50012c00
 800cab4:	40000400 	.word	0x40000400
 800cab8:	50000400 	.word	0x50000400
 800cabc:	40000800 	.word	0x40000800
 800cac0:	50000800 	.word	0x50000800
 800cac4:	40000c00 	.word	0x40000c00
 800cac8:	50000c00 	.word	0x50000c00
 800cacc:	40013400 	.word	0x40013400
 800cad0:	50013400 	.word	0x50013400
 800cad4:	40014000 	.word	0x40014000
 800cad8:	50014000 	.word	0x50014000
 800cadc:	00010007 	.word	0x00010007

0800cae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	f003 0302 	and.w	r3, r3, #2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d020      	beq.n	800cb44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f003 0302 	and.w	r3, r3, #2
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01b      	beq.n	800cb44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f06f 0202 	mvn.w	r2, #2
 800cb14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	f003 0303 	and.w	r3, r3, #3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d003      	beq.n	800cb32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f931 	bl	800cd92 <HAL_TIM_IC_CaptureCallback>
 800cb30:	e005      	b.n	800cb3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f923 	bl	800cd7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f934 	bl	800cda6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	f003 0304 	and.w	r3, r3, #4
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d020      	beq.n	800cb90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f003 0304 	and.w	r3, r3, #4
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01b      	beq.n	800cb90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f06f 0204 	mvn.w	r2, #4
 800cb60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2202      	movs	r2, #2
 800cb66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 f90b 	bl	800cd92 <HAL_TIM_IC_CaptureCallback>
 800cb7c:	e005      	b.n	800cb8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f8fd 	bl	800cd7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 f90e 	bl	800cda6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	f003 0308 	and.w	r3, r3, #8
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d020      	beq.n	800cbdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f003 0308 	and.w	r3, r3, #8
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d01b      	beq.n	800cbdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f06f 0208 	mvn.w	r2, #8
 800cbac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2204      	movs	r2, #4
 800cbb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	69db      	ldr	r3, [r3, #28]
 800cbba:	f003 0303 	and.w	r3, r3, #3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f8e5 	bl	800cd92 <HAL_TIM_IC_CaptureCallback>
 800cbc8:	e005      	b.n	800cbd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f8d7 	bl	800cd7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f8e8 	bl	800cda6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f003 0310 	and.w	r3, r3, #16
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d020      	beq.n	800cc28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f003 0310 	and.w	r3, r3, #16
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d01b      	beq.n	800cc28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f06f 0210 	mvn.w	r2, #16
 800cbf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2208      	movs	r2, #8
 800cbfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	69db      	ldr	r3, [r3, #28]
 800cc06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f8bf 	bl	800cd92 <HAL_TIM_IC_CaptureCallback>
 800cc14:	e005      	b.n	800cc22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f8b1 	bl	800cd7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f8c2 	bl	800cda6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	f003 0301 	and.w	r3, r3, #1
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00c      	beq.n	800cc4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f003 0301 	and.w	r3, r3, #1
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d007      	beq.n	800cc4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f06f 0201 	mvn.w	r2, #1
 800cc44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7f4 fec2 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d104      	bne.n	800cc60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00c      	beq.n	800cc7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d007      	beq.n	800cc7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cc72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f9bb 	bl	800cff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00c      	beq.n	800cc9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d007      	beq.n	800cc9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cc96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f9b3 	bl	800d004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00c      	beq.n	800ccc2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d007      	beq.n	800ccc2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ccba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 f87c 	bl	800cdba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00c      	beq.n	800cce6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d007      	beq.n	800cce6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f06f 0220 	mvn.w	r2, #32
 800ccde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 f97b 	bl	800cfdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00c      	beq.n	800cd0a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d007      	beq.n	800cd0a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800cd02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f987 	bl	800d018 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00c      	beq.n	800cd2e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d007      	beq.n	800cd2e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800cd26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 f97f 	bl	800d02c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00c      	beq.n	800cd52 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d007      	beq.n	800cd52 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800cd4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f977 	bl	800d040 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00c      	beq.n	800cd76 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d007      	beq.n	800cd76 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800cd6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f96f 	bl	800d054 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd76:	bf00      	nop
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd7e:	b480      	push	{r7}
 800cd80:	b083      	sub	sp, #12
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd86:	bf00      	nop
 800cd88:	370c      	adds	r7, #12
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd92:	b480      	push	{r7}
 800cd94:	b083      	sub	sp, #12
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd9a:	bf00      	nop
 800cd9c:	370c      	adds	r7, #12
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cda6:	b480      	push	{r7}
 800cda8:	b083      	sub	sp, #12
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cdae:	bf00      	nop
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cdba:	b480      	push	{r7}
 800cdbc:	b083      	sub	sp, #12
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cdc2:	bf00      	nop
 800cdc4:	370c      	adds	r7, #12
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
	...

0800cdd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4a6e      	ldr	r2, [pc, #440]	@ (800cf9c <TIM_Base_SetConfig+0x1cc>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d02b      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a6d      	ldr	r2, [pc, #436]	@ (800cfa0 <TIM_Base_SetConfig+0x1d0>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d027      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdf6:	d023      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cdfe:	d01f      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a68      	ldr	r2, [pc, #416]	@ (800cfa4 <TIM_Base_SetConfig+0x1d4>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d01b      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a67      	ldr	r2, [pc, #412]	@ (800cfa8 <TIM_Base_SetConfig+0x1d8>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d017      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a66      	ldr	r2, [pc, #408]	@ (800cfac <TIM_Base_SetConfig+0x1dc>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d013      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a65      	ldr	r2, [pc, #404]	@ (800cfb0 <TIM_Base_SetConfig+0x1e0>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d00f      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a64      	ldr	r2, [pc, #400]	@ (800cfb4 <TIM_Base_SetConfig+0x1e4>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d00b      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a63      	ldr	r2, [pc, #396]	@ (800cfb8 <TIM_Base_SetConfig+0x1e8>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d007      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a62      	ldr	r2, [pc, #392]	@ (800cfbc <TIM_Base_SetConfig+0x1ec>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d003      	beq.n	800ce40 <TIM_Base_SetConfig+0x70>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a61      	ldr	r2, [pc, #388]	@ (800cfc0 <TIM_Base_SetConfig+0x1f0>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d108      	bne.n	800ce52 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4a51      	ldr	r2, [pc, #324]	@ (800cf9c <TIM_Base_SetConfig+0x1cc>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d043      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4a50      	ldr	r2, [pc, #320]	@ (800cfa0 <TIM_Base_SetConfig+0x1d0>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d03f      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce68:	d03b      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce70:	d037      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4a4b      	ldr	r2, [pc, #300]	@ (800cfa4 <TIM_Base_SetConfig+0x1d4>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d033      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4a4a      	ldr	r2, [pc, #296]	@ (800cfa8 <TIM_Base_SetConfig+0x1d8>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d02f      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a49      	ldr	r2, [pc, #292]	@ (800cfac <TIM_Base_SetConfig+0x1dc>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d02b      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a48      	ldr	r2, [pc, #288]	@ (800cfb0 <TIM_Base_SetConfig+0x1e0>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d027      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a47      	ldr	r2, [pc, #284]	@ (800cfb4 <TIM_Base_SetConfig+0x1e4>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d023      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a46      	ldr	r2, [pc, #280]	@ (800cfb8 <TIM_Base_SetConfig+0x1e8>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d01f      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a45      	ldr	r2, [pc, #276]	@ (800cfbc <TIM_Base_SetConfig+0x1ec>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d01b      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4a44      	ldr	r2, [pc, #272]	@ (800cfc0 <TIM_Base_SetConfig+0x1f0>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d017      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a43      	ldr	r2, [pc, #268]	@ (800cfc4 <TIM_Base_SetConfig+0x1f4>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d013      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a42      	ldr	r2, [pc, #264]	@ (800cfc8 <TIM_Base_SetConfig+0x1f8>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d00f      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4a41      	ldr	r2, [pc, #260]	@ (800cfcc <TIM_Base_SetConfig+0x1fc>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d00b      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a40      	ldr	r2, [pc, #256]	@ (800cfd0 <TIM_Base_SetConfig+0x200>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d007      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a3f      	ldr	r2, [pc, #252]	@ (800cfd4 <TIM_Base_SetConfig+0x204>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d003      	beq.n	800cee2 <TIM_Base_SetConfig+0x112>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4a3e      	ldr	r2, [pc, #248]	@ (800cfd8 <TIM_Base_SetConfig+0x208>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d108      	bne.n	800cef4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	4313      	orrs	r3, r2
 800cf00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	68fa      	ldr	r2, [r7, #12]
 800cf06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	689a      	ldr	r2, [r3, #8]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a20      	ldr	r2, [pc, #128]	@ (800cf9c <TIM_Base_SetConfig+0x1cc>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d023      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a1f      	ldr	r2, [pc, #124]	@ (800cfa0 <TIM_Base_SetConfig+0x1d0>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d01f      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a24      	ldr	r2, [pc, #144]	@ (800cfbc <TIM_Base_SetConfig+0x1ec>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d01b      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a23      	ldr	r2, [pc, #140]	@ (800cfc0 <TIM_Base_SetConfig+0x1f0>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d017      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a22      	ldr	r2, [pc, #136]	@ (800cfc4 <TIM_Base_SetConfig+0x1f4>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d013      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a21      	ldr	r2, [pc, #132]	@ (800cfc8 <TIM_Base_SetConfig+0x1f8>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d00f      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a20      	ldr	r2, [pc, #128]	@ (800cfcc <TIM_Base_SetConfig+0x1fc>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d00b      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a1f      	ldr	r2, [pc, #124]	@ (800cfd0 <TIM_Base_SetConfig+0x200>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d007      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	4a1e      	ldr	r2, [pc, #120]	@ (800cfd4 <TIM_Base_SetConfig+0x204>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d003      	beq.n	800cf68 <TIM_Base_SetConfig+0x198>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a1d      	ldr	r2, [pc, #116]	@ (800cfd8 <TIM_Base_SetConfig+0x208>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d103      	bne.n	800cf70 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	691a      	ldr	r2, [r3, #16]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d105      	bne.n	800cf8e <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	f023 0201 	bic.w	r2, r3, #1
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	611a      	str	r2, [r3, #16]
  }
}
 800cf8e:	bf00      	nop
 800cf90:	3714      	adds	r7, #20
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	40012c00 	.word	0x40012c00
 800cfa0:	50012c00 	.word	0x50012c00
 800cfa4:	40000400 	.word	0x40000400
 800cfa8:	50000400 	.word	0x50000400
 800cfac:	40000800 	.word	0x40000800
 800cfb0:	50000800 	.word	0x50000800
 800cfb4:	40000c00 	.word	0x40000c00
 800cfb8:	50000c00 	.word	0x50000c00
 800cfbc:	40013400 	.word	0x40013400
 800cfc0:	50013400 	.word	0x50013400
 800cfc4:	40014000 	.word	0x40014000
 800cfc8:	50014000 	.word	0x50014000
 800cfcc:	40014400 	.word	0x40014400
 800cfd0:	50014400 	.word	0x50014400
 800cfd4:	40014800 	.word	0x40014800
 800cfd8:	50014800 	.word	0x50014800

0800cfdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e042      	b.n	800d100 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d080:	2b00      	cmp	r3, #0
 800d082:	d106      	bne.n	800d092 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7f5 f887 	bl	80021a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2224      	movs	r2, #36	@ 0x24
 800d096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f022 0201 	bic.w	r2, r2, #1
 800d0a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f9d6 	bl	800d464 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f825 	bl	800d108 <UART_SetConfig>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d101      	bne.n	800d0c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e01b      	b.n	800d100 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	685a      	ldr	r2, [r3, #4]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689a      	ldr	r2, [r3, #8]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f042 0201 	orr.w	r2, r2, #1
 800d0f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fa55 	bl	800d5a8 <UART_CheckIdleState>
 800d0fe:	4603      	mov	r3, r0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d10c:	b094      	sub	sp, #80	@ 0x50
 800d10e:	af00      	add	r7, sp, #0
 800d110:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	4b83      	ldr	r3, [pc, #524]	@ (800d32c <UART_SetConfig+0x224>)
 800d11e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d122:	689a      	ldr	r2, [r3, #8]
 800d124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d126:	691b      	ldr	r3, [r3, #16]
 800d128:	431a      	orrs	r2, r3
 800d12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12c:	695b      	ldr	r3, [r3, #20]
 800d12e:	431a      	orrs	r2, r3
 800d130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d132:	69db      	ldr	r3, [r3, #28]
 800d134:	4313      	orrs	r3, r2
 800d136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	497c      	ldr	r1, [pc, #496]	@ (800d330 <UART_SetConfig+0x228>)
 800d140:	4019      	ands	r1, r3
 800d142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d148:	430b      	orrs	r3, r1
 800d14a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d158:	68d9      	ldr	r1, [r3, #12]
 800d15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	ea40 0301 	orr.w	r3, r0, r1
 800d162:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	4b6f      	ldr	r3, [pc, #444]	@ (800d32c <UART_SetConfig+0x224>)
 800d170:	429a      	cmp	r2, r3
 800d172:	d009      	beq.n	800d188 <UART_SetConfig+0x80>
 800d174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	4b6e      	ldr	r3, [pc, #440]	@ (800d334 <UART_SetConfig+0x22c>)
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d004      	beq.n	800d188 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d180:	6a1a      	ldr	r2, [r3, #32]
 800d182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d184:	4313      	orrs	r3, r2
 800d186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d192:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d19c:	430b      	orrs	r3, r1
 800d19e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a6:	f023 000f 	bic.w	r0, r3, #15
 800d1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	ea40 0301 	orr.w	r3, r0, r1
 800d1b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	4b5e      	ldr	r3, [pc, #376]	@ (800d338 <UART_SetConfig+0x230>)
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d102      	bne.n	800d1c8 <UART_SetConfig+0xc0>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1c6:	e032      	b.n	800d22e <UART_SetConfig+0x126>
 800d1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	4b5b      	ldr	r3, [pc, #364]	@ (800d33c <UART_SetConfig+0x234>)
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d102      	bne.n	800d1d8 <UART_SetConfig+0xd0>
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1d6:	e02a      	b.n	800d22e <UART_SetConfig+0x126>
 800d1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	4b58      	ldr	r3, [pc, #352]	@ (800d340 <UART_SetConfig+0x238>)
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d102      	bne.n	800d1e8 <UART_SetConfig+0xe0>
 800d1e2:	2304      	movs	r3, #4
 800d1e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1e6:	e022      	b.n	800d22e <UART_SetConfig+0x126>
 800d1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	4b55      	ldr	r3, [pc, #340]	@ (800d344 <UART_SetConfig+0x23c>)
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d102      	bne.n	800d1f8 <UART_SetConfig+0xf0>
 800d1f2:	2308      	movs	r3, #8
 800d1f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1f6:	e01a      	b.n	800d22e <UART_SetConfig+0x126>
 800d1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	4b52      	ldr	r3, [pc, #328]	@ (800d348 <UART_SetConfig+0x240>)
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d102      	bne.n	800d208 <UART_SetConfig+0x100>
 800d202:	2310      	movs	r3, #16
 800d204:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d206:	e012      	b.n	800d22e <UART_SetConfig+0x126>
 800d208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	4b4f      	ldr	r3, [pc, #316]	@ (800d34c <UART_SetConfig+0x244>)
 800d20e:	429a      	cmp	r2, r3
 800d210:	d103      	bne.n	800d21a <UART_SetConfig+0x112>
 800d212:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d216:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d218:	e009      	b.n	800d22e <UART_SetConfig+0x126>
 800d21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	4b43      	ldr	r3, [pc, #268]	@ (800d32c <UART_SetConfig+0x224>)
 800d220:	429a      	cmp	r2, r3
 800d222:	d102      	bne.n	800d22a <UART_SetConfig+0x122>
 800d224:	2320      	movs	r3, #32
 800d226:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d228:	e001      	b.n	800d22e <UART_SetConfig+0x126>
 800d22a:	2300      	movs	r3, #0
 800d22c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b3e      	ldr	r3, [pc, #248]	@ (800d32c <UART_SetConfig+0x224>)
 800d234:	429a      	cmp	r2, r3
 800d236:	d005      	beq.n	800d244 <UART_SetConfig+0x13c>
 800d238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	4b3d      	ldr	r3, [pc, #244]	@ (800d334 <UART_SetConfig+0x22c>)
 800d23e:	429a      	cmp	r2, r3
 800d240:	f040 8088 	bne.w	800d354 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d246:	2200      	movs	r2, #0
 800d248:	623b      	str	r3, [r7, #32]
 800d24a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d24c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d250:	f7fd fcd2 	bl	800abf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d254:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 80eb 	beq.w	800d434 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d262:	4a3b      	ldr	r2, [pc, #236]	@ (800d350 <UART_SetConfig+0x248>)
 800d264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d268:	461a      	mov	r2, r3
 800d26a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d26c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d270:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	4613      	mov	r3, r2
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	4413      	add	r3, r2
 800d27c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d27e:	429a      	cmp	r2, r3
 800d280:	d305      	bcc.n	800d28e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d288:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d903      	bls.n	800d296 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d294:	e048      	b.n	800d328 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d298:	2200      	movs	r2, #0
 800d29a:	61bb      	str	r3, [r7, #24]
 800d29c:	61fa      	str	r2, [r7, #28]
 800d29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2a2:	4a2b      	ldr	r2, [pc, #172]	@ (800d350 <UART_SetConfig+0x248>)
 800d2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	613b      	str	r3, [r7, #16]
 800d2ae:	617a      	str	r2, [r7, #20]
 800d2b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d2b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d2b8:	f7f3 f91a 	bl	80004f0 <__aeabi_uldivmod>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	f04f 0200 	mov.w	r2, #0
 800d2c8:	f04f 0300 	mov.w	r3, #0
 800d2cc:	020b      	lsls	r3, r1, #8
 800d2ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2d2:	0202      	lsls	r2, r0, #8
 800d2d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2d6:	6849      	ldr	r1, [r1, #4]
 800d2d8:	0849      	lsrs	r1, r1, #1
 800d2da:	2000      	movs	r0, #0
 800d2dc:	460c      	mov	r4, r1
 800d2de:	4605      	mov	r5, r0
 800d2e0:	eb12 0804 	adds.w	r8, r2, r4
 800d2e4:	eb43 0905 	adc.w	r9, r3, r5
 800d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	60bb      	str	r3, [r7, #8]
 800d2f0:	60fa      	str	r2, [r7, #12]
 800d2f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	f7f3 f8f9 	bl	80004f0 <__aeabi_uldivmod>
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	4613      	mov	r3, r2
 800d304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d30c:	d308      	bcc.n	800d320 <UART_SetConfig+0x218>
 800d30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d314:	d204      	bcs.n	800d320 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d31c:	60da      	str	r2, [r3, #12]
 800d31e:	e003      	b.n	800d328 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d326:	e085      	b.n	800d434 <UART_SetConfig+0x32c>
 800d328:	e084      	b.n	800d434 <UART_SetConfig+0x32c>
 800d32a:	bf00      	nop
 800d32c:	46002400 	.word	0x46002400
 800d330:	cfff69f3 	.word	0xcfff69f3
 800d334:	56002400 	.word	0x56002400
 800d338:	40013800 	.word	0x40013800
 800d33c:	40004400 	.word	0x40004400
 800d340:	40004800 	.word	0x40004800
 800d344:	40004c00 	.word	0x40004c00
 800d348:	40005000 	.word	0x40005000
 800d34c:	40006400 	.word	0x40006400
 800d350:	0802d9fc 	.word	0x0802d9fc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d356:	69db      	ldr	r3, [r3, #28]
 800d358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d35c:	d13c      	bne.n	800d3d8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d35e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d360:	2200      	movs	r2, #0
 800d362:	603b      	str	r3, [r7, #0]
 800d364:	607a      	str	r2, [r7, #4]
 800d366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d36a:	f7fd fc45 	bl	800abf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d36e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d372:	2b00      	cmp	r3, #0
 800d374:	d05e      	beq.n	800d434 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d37a:	4a39      	ldr	r2, [pc, #228]	@ (800d460 <UART_SetConfig+0x358>)
 800d37c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d380:	461a      	mov	r2, r3
 800d382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d384:	fbb3 f3f2 	udiv	r3, r3, r2
 800d388:	005a      	lsls	r2, r3, #1
 800d38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	085b      	lsrs	r3, r3, #1
 800d390:	441a      	add	r2, r3
 800d392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	fbb2 f3f3 	udiv	r3, r2, r3
 800d39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d39e:	2b0f      	cmp	r3, #15
 800d3a0:	d916      	bls.n	800d3d0 <UART_SetConfig+0x2c8>
 800d3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3a8:	d212      	bcs.n	800d3d0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	f023 030f 	bic.w	r3, r3, #15
 800d3b2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b6:	085b      	lsrs	r3, r3, #1
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	f003 0307 	and.w	r3, r3, #7
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d3cc:	60da      	str	r2, [r3, #12]
 800d3ce:	e031      	b.n	800d434 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d3d6:	e02d      	b.n	800d434 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d3d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3da:	2200      	movs	r2, #0
 800d3dc:	469a      	mov	sl, r3
 800d3de:	4693      	mov	fp, r2
 800d3e0:	4650      	mov	r0, sl
 800d3e2:	4659      	mov	r1, fp
 800d3e4:	f7fd fc08 	bl	800abf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3e8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d021      	beq.n	800d434 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f4:	4a1a      	ldr	r2, [pc, #104]	@ (800d460 <UART_SetConfig+0x358>)
 800d3f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800d402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	085b      	lsrs	r3, r3, #1
 800d408:	441a      	add	r2, r3
 800d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d412:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d416:	2b0f      	cmp	r3, #15
 800d418:	d909      	bls.n	800d42e <UART_SetConfig+0x326>
 800d41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d41c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d420:	d205      	bcs.n	800d42e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d424:	b29a      	uxth	r2, r3
 800d426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	60da      	str	r2, [r3, #12]
 800d42c:	e002      	b.n	800d434 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d436:	2201      	movs	r2, #1
 800d438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d43e:	2201      	movs	r2, #1
 800d440:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d446:	2200      	movs	r2, #0
 800d448:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44c:	2200      	movs	r2, #0
 800d44e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d450:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d454:	4618      	mov	r0, r3
 800d456:	3750      	adds	r7, #80	@ 0x50
 800d458:	46bd      	mov	sp, r7
 800d45a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d45e:	bf00      	nop
 800d460:	0802d9fc 	.word	0x0802d9fc

0800d464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d470:	f003 0308 	and.w	r3, r3, #8
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00a      	beq.n	800d48e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	430a      	orrs	r2, r1
 800d48c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d492:	f003 0301 	and.w	r3, r3, #1
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00a      	beq.n	800d4b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	430a      	orrs	r2, r1
 800d4ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b4:	f003 0302 	and.w	r3, r3, #2
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00a      	beq.n	800d4d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	430a      	orrs	r2, r1
 800d4d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4d6:	f003 0304 	and.w	r3, r3, #4
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00a      	beq.n	800d4f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	430a      	orrs	r2, r1
 800d4f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4f8:	f003 0310 	and.w	r3, r3, #16
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00a      	beq.n	800d516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	430a      	orrs	r2, r1
 800d514:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d51a:	f003 0320 	and.w	r3, r3, #32
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00a      	beq.n	800d538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	430a      	orrs	r2, r1
 800d536:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d540:	2b00      	cmp	r3, #0
 800d542:	d01a      	beq.n	800d57a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	430a      	orrs	r2, r1
 800d558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d55e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d562:	d10a      	bne.n	800d57a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	430a      	orrs	r2, r1
 800d578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d57e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d582:	2b00      	cmp	r3, #0
 800d584:	d00a      	beq.n	800d59c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	430a      	orrs	r2, r1
 800d59a:	605a      	str	r2, [r3, #4]
  }
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b098      	sub	sp, #96	@ 0x60
 800d5ac:	af02      	add	r7, sp, #8
 800d5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5b8:	f7f5 f89c 	bl	80026f4 <HAL_GetTick>
 800d5bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f003 0308 	and.w	r3, r3, #8
 800d5c8:	2b08      	cmp	r3, #8
 800d5ca:	d12f      	bne.n	800d62c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 f88e 	bl	800d6fc <UART_WaitOnFlagUntilTimeout>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d022      	beq.n	800d62c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ee:	e853 3f00 	ldrex	r3, [r3]
 800d5f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	461a      	mov	r2, r3
 800d602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d604:	647b      	str	r3, [r7, #68]	@ 0x44
 800d606:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d608:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d60a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d60c:	e841 2300 	strex	r3, r2, [r1]
 800d610:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1e6      	bne.n	800d5e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2220      	movs	r2, #32
 800d61c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d628:	2303      	movs	r3, #3
 800d62a:	e063      	b.n	800d6f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f003 0304 	and.w	r3, r3, #4
 800d636:	2b04      	cmp	r3, #4
 800d638:	d149      	bne.n	800d6ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d63a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d642:	2200      	movs	r2, #0
 800d644:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f857 	bl	800d6fc <UART_WaitOnFlagUntilTimeout>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d03c      	beq.n	800d6ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65c:	e853 3f00 	ldrex	r3, [r3]
 800d660:	623b      	str	r3, [r7, #32]
   return(result);
 800d662:	6a3b      	ldr	r3, [r7, #32]
 800d664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	461a      	mov	r2, r3
 800d670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d672:	633b      	str	r3, [r7, #48]	@ 0x30
 800d674:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d67a:	e841 2300 	strex	r3, r2, [r1]
 800d67e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1e6      	bne.n	800d654 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	3308      	adds	r3, #8
 800d68c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	e853 3f00 	ldrex	r3, [r3]
 800d694:	60fb      	str	r3, [r7, #12]
   return(result);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f023 0301 	bic.w	r3, r3, #1
 800d69c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	3308      	adds	r3, #8
 800d6a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6a6:	61fa      	str	r2, [r7, #28]
 800d6a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6aa:	69b9      	ldr	r1, [r7, #24]
 800d6ac:	69fa      	ldr	r2, [r7, #28]
 800d6ae:	e841 2300 	strex	r3, r2, [r1]
 800d6b2:	617b      	str	r3, [r7, #20]
   return(result);
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1e5      	bne.n	800d686 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2220      	movs	r2, #32
 800d6be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	e012      	b.n	800d6f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2220      	movs	r2, #32
 800d6da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3758      	adds	r7, #88	@ 0x58
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	603b      	str	r3, [r7, #0]
 800d708:	4613      	mov	r3, r2
 800d70a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d70c:	e04f      	b.n	800d7ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d714:	d04b      	beq.n	800d7ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d716:	f7f4 ffed 	bl	80026f4 <HAL_GetTick>
 800d71a:	4602      	mov	r2, r0
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	69ba      	ldr	r2, [r7, #24]
 800d722:	429a      	cmp	r2, r3
 800d724:	d302      	bcc.n	800d72c <UART_WaitOnFlagUntilTimeout+0x30>
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d101      	bne.n	800d730 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d72c:	2303      	movs	r3, #3
 800d72e:	e04e      	b.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f003 0304 	and.w	r3, r3, #4
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d037      	beq.n	800d7ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b80      	cmp	r3, #128	@ 0x80
 800d742:	d034      	beq.n	800d7ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	2b40      	cmp	r3, #64	@ 0x40
 800d748:	d031      	beq.n	800d7ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	69db      	ldr	r3, [r3, #28]
 800d750:	f003 0308 	and.w	r3, r3, #8
 800d754:	2b08      	cmp	r3, #8
 800d756:	d110      	bne.n	800d77a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2208      	movs	r2, #8
 800d75e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 f838 	bl	800d7d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2208      	movs	r2, #8
 800d76a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d776:	2301      	movs	r3, #1
 800d778:	e029      	b.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	69db      	ldr	r3, [r3, #28]
 800d780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d788:	d111      	bne.n	800d7ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f000 f81e 	bl	800d7d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2220      	movs	r2, #32
 800d79e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	e00f      	b.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	69da      	ldr	r2, [r3, #28]
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	4013      	ands	r3, r2
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	bf0c      	ite	eq
 800d7be:	2301      	moveq	r3, #1
 800d7c0:	2300      	movne	r3, #0
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	79fb      	ldrb	r3, [r7, #7]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d0a0      	beq.n	800d70e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7d6:	b480      	push	{r7}
 800d7d8:	b095      	sub	sp, #84	@ 0x54
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e6:	e853 3f00 	ldrex	r3, [r3]
 800d7ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d800:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d802:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d804:	e841 2300 	strex	r3, r2, [r1]
 800d808:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1e6      	bne.n	800d7de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3308      	adds	r3, #8
 800d816:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d818:	6a3b      	ldr	r3, [r7, #32]
 800d81a:	e853 3f00 	ldrex	r3, [r3]
 800d81e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d826:	f023 0301 	bic.w	r3, r3, #1
 800d82a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3308      	adds	r3, #8
 800d832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d834:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d836:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d83a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d83c:	e841 2300 	strex	r3, r2, [r1]
 800d840:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1e3      	bne.n	800d810 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d118      	bne.n	800d882 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	e853 3f00 	ldrex	r3, [r3]
 800d85c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	f023 0310 	bic.w	r3, r3, #16
 800d864:	647b      	str	r3, [r7, #68]	@ 0x44
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	461a      	mov	r2, r3
 800d86c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d86e:	61bb      	str	r3, [r7, #24]
 800d870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d872:	6979      	ldr	r1, [r7, #20]
 800d874:	69ba      	ldr	r2, [r7, #24]
 800d876:	e841 2300 	strex	r3, r2, [r1]
 800d87a:	613b      	str	r3, [r7, #16]
   return(result);
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1e6      	bne.n	800d850 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2220      	movs	r2, #32
 800d886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d896:	bf00      	nop
 800d898:	3754      	adds	r7, #84	@ 0x54
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b085      	sub	sp, #20
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d101      	bne.n	800d8b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	e027      	b.n	800d908 <HAL_UARTEx_DisableFifoMode+0x66>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2224      	movs	r2, #36	@ 0x24
 800d8c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f022 0201 	bic.w	r2, r2, #1
 800d8de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d8e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2220      	movs	r2, #32
 800d8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3714      	adds	r7, #20
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d924:	2b01      	cmp	r3, #1
 800d926:	d101      	bne.n	800d92c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d928:	2302      	movs	r3, #2
 800d92a:	e02d      	b.n	800d988 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2224      	movs	r2, #36	@ 0x24
 800d938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f022 0201 	bic.w	r2, r2, #1
 800d952:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	430a      	orrs	r2, r1
 800d966:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f84f 	bl	800da0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2220      	movs	r2, #32
 800d97a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d101      	bne.n	800d9a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9a4:	2302      	movs	r3, #2
 800d9a6:	e02d      	b.n	800da04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2224      	movs	r2, #36	@ 0x24
 800d9b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f022 0201 	bic.w	r2, r2, #1
 800d9ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 f811 	bl	800da0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2220      	movs	r2, #32
 800d9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3710      	adds	r7, #16
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d108      	bne.n	800da2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da2c:	e031      	b.n	800da92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da2e:	2308      	movs	r3, #8
 800da30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da32:	2308      	movs	r3, #8
 800da34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	0e5b      	lsrs	r3, r3, #25
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 0307 	and.w	r3, r3, #7
 800da44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	0f5b      	lsrs	r3, r3, #29
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 0307 	and.w	r3, r3, #7
 800da54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da56:	7bbb      	ldrb	r3, [r7, #14]
 800da58:	7b3a      	ldrb	r2, [r7, #12]
 800da5a:	4911      	ldr	r1, [pc, #68]	@ (800daa0 <UARTEx_SetNbDataToProcess+0x94>)
 800da5c:	5c8a      	ldrb	r2, [r1, r2]
 800da5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da62:	7b3a      	ldrb	r2, [r7, #12]
 800da64:	490f      	ldr	r1, [pc, #60]	@ (800daa4 <UARTEx_SetNbDataToProcess+0x98>)
 800da66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da68:	fb93 f3f2 	sdiv	r3, r3, r2
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	7b7a      	ldrb	r2, [r7, #13]
 800da78:	4909      	ldr	r1, [pc, #36]	@ (800daa0 <UARTEx_SetNbDataToProcess+0x94>)
 800da7a:	5c8a      	ldrb	r2, [r1, r2]
 800da7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da80:	7b7a      	ldrb	r2, [r7, #13]
 800da82:	4908      	ldr	r1, [pc, #32]	@ (800daa4 <UARTEx_SetNbDataToProcess+0x98>)
 800da84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da86:	fb93 f3f2 	sdiv	r3, r3, r2
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800da92:	bf00      	nop
 800da94:	3714      	adds	r7, #20
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	0802da14 	.word	0x0802da14
 800daa4:	0802da1c 	.word	0x0802da1c

0800daa8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b096      	sub	sp, #88	@ 0x58
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
 800dab4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	3303      	adds	r3, #3
 800daba:	f023 0303 	bic.w	r3, r3, #3
 800dabe:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dac0:	f3ef 8310 	mrs	r3, PRIMASK
 800dac4:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800dac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800dac8:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800daca:	b672      	cpsid	i
#endif
    return(int_posture);
 800dacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800dace:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800dad0:	4b55      	ldr	r3, [pc, #340]	@ (800dc28 <_tx_byte_allocate+0x180>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800dad6:	2300      	movs	r3, #0
 800dad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dade:	621a      	str	r2, [r3, #32]
 800dae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dae2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae6:	f383 8810 	msr	PRIMASK, r3
}
 800daea:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800daec:	6879      	ldr	r1, [r7, #4]
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f000 f9b2 	bl	800de58 <_tx_byte_pool_search>
 800daf4:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800daf6:	f3ef 8310 	mrs	r3, PRIMASK
 800dafa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800dafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800dafe:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800db00:	b672      	cpsid	i
    return(int_posture);
 800db02:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800db04:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800db06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d002      	beq.n	800db12 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800db0c:	2301      	movs	r3, #1
 800db0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db10:	e006      	b.n	800db20 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6a1b      	ldr	r3, [r3, #32]
 800db16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db18:	429a      	cmp	r2, r3
 800db1a:	d101      	bne.n	800db20 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800db1c:	2301      	movs	r3, #1
 800db1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800db20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db22:	2b00      	cmp	r3, #0
 800db24:	d0d9      	beq.n	800dada <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db2a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800db2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d008      	beq.n	800db44 <_tx_byte_allocate+0x9c>
 800db32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db34:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	f383 8810 	msr	PRIMASK, r3
}
 800db3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800db3e:	2300      	movs	r3, #0
 800db40:	653b      	str	r3, [r7, #80]	@ 0x50
 800db42:	e06c      	b.n	800dc1e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d061      	beq.n	800dc0e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800db4a:	4b38      	ldr	r3, [pc, #224]	@ (800dc2c <_tx_byte_allocate+0x184>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d007      	beq.n	800db62 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800db52:	2310      	movs	r3, #16
 800db54:	653b      	str	r3, [r7, #80]	@ 0x50
 800db56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db58:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	f383 8810 	msr	PRIMASK, r3
}
 800db60:	e05d      	b.n	800dc1e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800db62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db64:	4a32      	ldr	r2, [pc, #200]	@ (800dc30 <_tx_byte_allocate+0x188>)
 800db66:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800db68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800db6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800db74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800db7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800db80:	1c5a      	adds	r2, r3, #1
 800db82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db8c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800db98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d109      	bne.n	800dbb2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dba2:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800dba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dba8:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800dbaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbae:	675a      	str	r2, [r3, #116]	@ 0x74
 800dbb0:	e011      	b.n	800dbd6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800dbb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dbbc:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800dbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbc2:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800dbc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbc8:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800dbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbce:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800dbd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbd4:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800dbd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbd8:	2209      	movs	r2, #9
 800dbda:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800dbdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbde:	2201      	movs	r2, #1
 800dbe0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800dbe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800dbe8:	4b10      	ldr	r3, [pc, #64]	@ (800dc2c <_tx_byte_allocate+0x184>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	3301      	adds	r3, #1
 800dbee:	4a0f      	ldr	r2, [pc, #60]	@ (800dc2c <_tx_byte_allocate+0x184>)
 800dbf0:	6013      	str	r3, [r2, #0]
 800dbf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbf4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	f383 8810 	msr	PRIMASK, r3
}
 800dbfc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800dbfe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800dc00:	f001 fb82 	bl	800f308 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800dc04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc0c:	e007      	b.n	800dc1e <_tx_byte_allocate+0x176>
 800dc0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f383 8810 	msr	PRIMASK, r3
}
 800dc18:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800dc1a:	2310      	movs	r3, #16
 800dc1c:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800dc1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3758      	adds	r7, #88	@ 0x58
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	20157ed4 	.word	0x20157ed4
 800dc2c:	20157f6c 	.word	0x20157f6c
 800dc30:	0800dc35 	.word	0x0800dc35

0800dc34 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08e      	sub	sp, #56	@ 0x38
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dc3e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc42:	623b      	str	r3, [r7, #32]
    return(posture);
 800dc44:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800dc46:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dc48:	b672      	cpsid	i
    return(int_posture);
 800dc4a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800dc4c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc52:	4a33      	ldr	r2, [pc, #204]	@ (800dd20 <_tx_byte_pool_cleanup+0xec>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d158      	bne.n	800dd0a <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d152      	bne.n	800dd0a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc68:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d04c      	beq.n	800dd0a <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800dc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a2b      	ldr	r2, [pc, #172]	@ (800dd24 <_tx_byte_pool_cleanup+0xf0>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d147      	bne.n	800dd0a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d043      	beq.n	800dd0a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800dc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc8c:	1e5a      	subs	r2, r3, #1
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc90:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800dc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc96:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800dc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d103      	bne.n	800dca6 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca0:	2200      	movs	r2, #0
 800dca2:	625a      	str	r2, [r3, #36]	@ 0x24
 800dca4:	e013      	b.n	800dcce <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dcaa:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dcb0:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800dcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcb6:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcbc:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800dcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d102      	bne.n	800dcce <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800dcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dccc:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcd2:	2b09      	cmp	r3, #9
 800dcd4:	d119      	bne.n	800dd0a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2210      	movs	r2, #16
 800dcda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800dcde:	4b12      	ldr	r3, [pc, #72]	@ (800dd28 <_tx_byte_pool_cleanup+0xf4>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3301      	adds	r3, #1
 800dce4:	4a10      	ldr	r2, [pc, #64]	@ (800dd28 <_tx_byte_pool_cleanup+0xf4>)
 800dce6:	6013      	str	r3, [r2, #0]
 800dce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	f383 8810 	msr	PRIMASK, r3
}
 800dcf2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f001 fa07 	bl	800f108 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcfa:	f3ef 8310 	mrs	r3, PRIMASK
 800dcfe:	61bb      	str	r3, [r7, #24]
    return(posture);
 800dd00:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800dd02:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd04:	b672      	cpsid	i
    return(int_posture);
 800dd06:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800dd08:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f383 8810 	msr	PRIMASK, r3
}
 800dd14:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800dd16:	bf00      	nop
 800dd18:	3738      	adds	r7, #56	@ 0x38
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	0800dc35 	.word	0x0800dc35
 800dd24:	42595445 	.word	0x42595445
 800dd28:	20157f6c 	.word	0x20157f6c

0800dd2c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b08e      	sub	sp, #56	@ 0x38
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	607a      	str	r2, [r7, #4]
 800dd38:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800dd3a:	2234      	movs	r2, #52	@ 0x34
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f01e f941 	bl	802bfc6 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	f023 0303 	bic.w	r3, r3, #3
 800dd4a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	68ba      	ldr	r2, [r7, #8]
 800dd50:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	f1a3 0208 	sub.w	r2, r3, #8
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2202      	movs	r2, #2
 800dd78:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800dd7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	4413      	add	r3, r2
 800dd84:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800dd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd88:	3b04      	subs	r3, #4
 800dd8a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800dd90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800dd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd98:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800dd9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd9c:	3b04      	subs	r3, #4
 800dd9e:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800dda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dda2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800dda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800ddb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddb6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800ddbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800ddc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800ddc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddc8:	4a1f      	ldr	r2, [pc, #124]	@ (800de48 <_tx_byte_pool_create+0x11c>)
 800ddca:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddd2:	f3ef 8310 	mrs	r3, PRIMASK
 800ddd6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ddd8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ddda:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dddc:	b672      	cpsid	i
    return(int_posture);
 800ddde:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800dde0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	4a19      	ldr	r2, [pc, #100]	@ (800de4c <_tx_byte_pool_create+0x120>)
 800dde6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800dde8:	4b19      	ldr	r3, [pc, #100]	@ (800de50 <_tx_byte_pool_create+0x124>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d109      	bne.n	800de04 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800ddf0:	4a18      	ldr	r2, [pc, #96]	@ (800de54 <_tx_byte_pool_create+0x128>)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	631a      	str	r2, [r3, #48]	@ 0x30
 800de02:	e011      	b.n	800de28 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800de04:	4b13      	ldr	r3, [pc, #76]	@ (800de54 <_tx_byte_pool_create+0x128>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800de0a:	6a3b      	ldr	r3, [r7, #32]
 800de0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de0e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800de10:	6a3b      	ldr	r3, [r7, #32]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	69fa      	ldr	r2, [r7, #28]
 800de20:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6a3a      	ldr	r2, [r7, #32]
 800de26:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800de28:	4b09      	ldr	r3, [pc, #36]	@ (800de50 <_tx_byte_pool_create+0x124>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3301      	adds	r3, #1
 800de2e:	4a08      	ldr	r2, [pc, #32]	@ (800de50 <_tx_byte_pool_create+0x124>)
 800de30:	6013      	str	r3, [r2, #0]
 800de32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	f383 8810 	msr	PRIMASK, r3
}
 800de3c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3738      	adds	r7, #56	@ 0x38
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	ffffeeee 	.word	0xffffeeee
 800de4c:	42595445 	.word	0x42595445
 800de50:	20157ec8 	.word	0x20157ec8
 800de54:	20157ec4 	.word	0x20157ec4

0800de58 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800de58:	b480      	push	{r7}
 800de5a:	b097      	sub	sp, #92	@ 0x5c
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800de62:	2300      	movs	r3, #0
 800de64:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de66:	f3ef 8310 	mrs	r3, PRIMASK
 800de6a:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800de6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800de6e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de70:	b672      	cpsid	i
    return(int_posture);
 800de72:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800de74:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	689a      	ldr	r2, [r3, #8]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	3b02      	subs	r3, #2
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	4413      	add	r3, r2
 800de84:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d308      	bcc.n	800dea0 <_tx_byte_pool_search+0x48>
 800de8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de90:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	f383 8810 	msr	PRIMASK, r3
}
 800de98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	653b      	str	r3, [r7, #80]	@ 0x50
 800de9e:	e0dd      	b.n	800e05c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800dea0:	4b72      	ldr	r3, [pc, #456]	@ (800e06c <_tx_byte_pool_search+0x214>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800deaa:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	3301      	adds	r3, #1
 800deb8:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800deba:	2300      	movs	r3, #0
 800debc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800debe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dec0:	3304      	adds	r3, #4
 800dec2:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800dec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec6:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800dec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a68      	ldr	r2, [pc, #416]	@ (800e070 <_tx_byte_pool_search+0x218>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d143      	bne.n	800df5a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800ded2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d104      	bne.n	800dee2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dedc:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800dede:	2301      	movs	r3, #1
 800dee0:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800dee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dee4:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800dee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800deec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800deee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800def4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800def6:	3b08      	subs	r3, #8
 800def8:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800defa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	429a      	cmp	r2, r3
 800df00:	d257      	bcs.n	800dfb2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800df02:	2300      	movs	r3, #0
 800df04:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800df06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df08:	3304      	adds	r3, #4
 800df0a:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800df0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0e:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800df10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a56      	ldr	r2, [pc, #344]	@ (800e070 <_tx_byte_pool_search+0x218>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d113      	bne.n	800df42 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800df1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1c:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800df1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df24:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	1e5a      	subs	r2, r3, #1
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	695b      	ldr	r3, [r3, #20]
 800df34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df36:	429a      	cmp	r2, r3
 800df38:	d114      	bne.n	800df64 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df3e:	615a      	str	r2, [r3, #20]
 800df40:	e010      	b.n	800df64 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800df42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df44:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800df46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800df4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d008      	beq.n	800df64 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800df52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df54:	3b01      	subs	r3, #1
 800df56:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df58:	e004      	b.n	800df64 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800df5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df5c:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800df5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800df64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df66:	2b00      	cmp	r3, #0
 800df68:	d002      	beq.n	800df70 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800df6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df6c:	3b01      	subs	r3, #1
 800df6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df72:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f383 8810 	msr	PRIMASK, r3
}
 800df7a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df7c:	f3ef 8310 	mrs	r3, PRIMASK
 800df80:	61bb      	str	r3, [r7, #24]
    return(posture);
 800df82:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800df84:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df86:	b672      	cpsid	i
    return(int_posture);
 800df88:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800df8a:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a1b      	ldr	r3, [r3, #32]
 800df90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800df92:	429a      	cmp	r2, r3
 800df94:	d009      	beq.n	800dfaa <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	695b      	ldr	r3, [r3, #20]
 800df9a:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dfa8:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800dfaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d186      	bne.n	800debe <_tx_byte_pool_search+0x66>
 800dfb0:	e000      	b.n	800dfb4 <_tx_byte_pool_search+0x15c>
                    break;
 800dfb2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800dfb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d048      	beq.n	800e04c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800dfba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	2b13      	cmp	r3, #19
 800dfc2:	d91e      	bls.n	800e002 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dfca:	4413      	add	r3, r2
 800dfcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800dfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd0:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800dfd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfd4:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfdc:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800dfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800dfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe6:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800dfe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfea:	4a21      	ldr	r2, [pc, #132]	@ (800e070 <_tx_byte_pool_search+0x218>)
 800dfec:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800dff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dffc:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800e002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e004:	3304      	adds	r3, #4
 800e006:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800e008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00a:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800e00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	689a      	ldr	r2, [r3, #8]
 800e016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	f1a3 0208 	sub.w	r2, r3, #8
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e028:	429a      	cmp	r2, r3
 800e02a:	d105      	bne.n	800e038 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800e02c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e02e:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800e030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	615a      	str	r2, [r3, #20]
 800e038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e03a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	f383 8810 	msr	PRIMASK, r3
}
 800e042:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800e044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e046:	3308      	adds	r3, #8
 800e048:	653b      	str	r3, [r7, #80]	@ 0x50
 800e04a:	e007      	b.n	800e05c <_tx_byte_pool_search+0x204>
 800e04c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e04e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	f383 8810 	msr	PRIMASK, r3
}
 800e056:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800e058:	2300      	movs	r3, #0
 800e05a:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800e05c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800e05e:	4618      	mov	r0, r3
 800e060:	375c      	adds	r7, #92	@ 0x5c
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	20157ed4 	.word	0x20157ed4
 800e070:	ffffeeee 	.word	0xffffeeee

0800e074 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800e078:	f000 ff04 	bl	800ee84 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800e07c:	f001 fb0c 	bl	800f698 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800e080:	4b12      	ldr	r3, [pc, #72]	@ (800e0cc <_tx_initialize_high_level+0x58>)
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]
 800e086:	4b12      	ldr	r3, [pc, #72]	@ (800e0d0 <_tx_initialize_high_level+0x5c>)
 800e088:	2200      	movs	r2, #0
 800e08a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800e08c:	4b11      	ldr	r3, [pc, #68]	@ (800e0d4 <_tx_initialize_high_level+0x60>)
 800e08e:	2200      	movs	r2, #0
 800e090:	601a      	str	r2, [r3, #0]
 800e092:	4b11      	ldr	r3, [pc, #68]	@ (800e0d8 <_tx_initialize_high_level+0x64>)
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800e098:	4b10      	ldr	r3, [pc, #64]	@ (800e0dc <_tx_initialize_high_level+0x68>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	4b10      	ldr	r3, [pc, #64]	@ (800e0e0 <_tx_initialize_high_level+0x6c>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e4 <_tx_initialize_high_level+0x70>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e8 <_tx_initialize_high_level+0x74>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800e0b0:	4b0e      	ldr	r3, [pc, #56]	@ (800e0ec <_tx_initialize_high_level+0x78>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e0f0 <_tx_initialize_high_level+0x7c>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800e0bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f4 <_tx_initialize_high_level+0x80>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f8 <_tx_initialize_high_level+0x84>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
#endif
}
 800e0c8:	bf00      	nop
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	20157e9c 	.word	0x20157e9c
 800e0d0:	20157ea0 	.word	0x20157ea0
 800e0d4:	20157ea4 	.word	0x20157ea4
 800e0d8:	20157ea8 	.word	0x20157ea8
 800e0dc:	20157eac 	.word	0x20157eac
 800e0e0:	20157eb0 	.word	0x20157eb0
 800e0e4:	20157ebc 	.word	0x20157ebc
 800e0e8:	20157ec0 	.word	0x20157ec0
 800e0ec:	20157ec4 	.word	0x20157ec4
 800e0f0:	20157ec8 	.word	0x20157ec8
 800e0f4:	20157eb4 	.word	0x20157eb4
 800e0f8:	20157eb8 	.word	0x20157eb8

0800e0fc <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800e100:	4b10      	ldr	r3, [pc, #64]	@ (800e144 <_tx_initialize_kernel_enter+0x48>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800e108:	d00c      	beq.n	800e124 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800e10a:	4b0e      	ldr	r3, [pc, #56]	@ (800e144 <_tx_initialize_kernel_enter+0x48>)
 800e10c:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800e110:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800e112:	f7f2 f8cf 	bl	80002b4 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800e116:	f7ff ffad 	bl	800e074 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800e11a:	4b0b      	ldr	r3, [pc, #44]	@ (800e148 <_tx_initialize_kernel_enter+0x4c>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3301      	adds	r3, #1
 800e120:	4a09      	ldr	r2, [pc, #36]	@ (800e148 <_tx_initialize_kernel_enter+0x4c>)
 800e122:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800e124:	4b07      	ldr	r3, [pc, #28]	@ (800e144 <_tx_initialize_kernel_enter+0x48>)
 800e126:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800e12a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800e12c:	4b07      	ldr	r3, [pc, #28]	@ (800e14c <_tx_initialize_kernel_enter+0x50>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4618      	mov	r0, r3
 800e132:	f7f2 fb69 	bl	8000808 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800e136:	4b03      	ldr	r3, [pc, #12]	@ (800e144 <_tx_initialize_kernel_enter+0x48>)
 800e138:	2200      	movs	r2, #0
 800e13a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800e13c:	f7f2 f8f6 	bl	800032c <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800e140:	bf00      	nop
 800e142:	bd80      	pop	{r7, pc}
 800e144:	20000010 	.word	0x20000010
 800e148:	20157f6c 	.word	0x20157f6c
 800e14c:	20157ecc 	.word	0x20157ecc

0800e150 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b08e      	sub	sp, #56	@ 0x38
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e15a:	f3ef 8310 	mrs	r3, PRIMASK
 800e15e:	623b      	str	r3, [r7, #32]
    return(posture);
 800e160:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e162:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e164:	b672      	cpsid	i
    return(int_posture);
 800e166:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 800e168:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e16e:	4a37      	ldr	r2, [pc, #220]	@ (800e24c <_tx_queue_cleanup+0xfc>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d161      	bne.n	800e238 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e17a:	683a      	ldr	r2, [r7, #0]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d15b      	bne.n	800e238 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e184:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 800e186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d055      	beq.n	800e238 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 800e18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a2f      	ldr	r2, [pc, #188]	@ (800e250 <_tx_queue_cleanup+0x100>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d150      	bne.n	800e238 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 800e196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d04c      	beq.n	800e238 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a8:	1e5a      	subs	r2, r3, #1
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ac:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800e1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d103      	bne.n	800e1c2 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1bc:	2200      	movs	r2, #0
 800e1be:	629a      	str	r2, [r3, #40]	@ 0x28
 800e1c0:	e013      	b.n	800e1ea <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1cc:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1d2:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1d8:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 800e1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d102      	bne.n	800e1ea <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1e8:	629a      	str	r2, [r3, #40]	@ 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1ee:	2b05      	cmp	r3, #5
 800e1f0:	d122      	bne.n	800e238 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d004      	beq.n	800e204 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	220b      	movs	r2, #11
 800e1fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800e202:	e003      	b.n	800e20c <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	220a      	movs	r2, #10
 800e208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800e20c:	4b11      	ldr	r3, [pc, #68]	@ (800e254 <_tx_queue_cleanup+0x104>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	3301      	adds	r3, #1
 800e212:	4a10      	ldr	r2, [pc, #64]	@ (800e254 <_tx_queue_cleanup+0x104>)
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e218:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	f383 8810 	msr	PRIMASK, r3
}
 800e220:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 ff70 	bl	800f108 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e228:	f3ef 8310 	mrs	r3, PRIMASK
 800e22c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e22e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e230:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e232:	b672      	cpsid	i
    return(int_posture);
 800e234:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800e236:	637b      	str	r3, [r7, #52]	@ 0x34
 800e238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e23a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f383 8810 	msr	PRIMASK, r3
}
 800e242:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800e244:	bf00      	nop
 800e246:	3738      	adds	r7, #56	@ 0x38
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	0800e151 	.word	0x0800e151
 800e250:	51554555 	.word	0x51554555
 800e254:	20157f6c 	.word	0x20157f6c

0800e258 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b08c      	sub	sp, #48	@ 0x30
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
 800e264:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 800e266:	2238      	movs	r2, #56	@ 0x38
 800e268:	2100      	movs	r1, #0
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f01d feab 	bl	802bfc6 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e282:	fbb2 f3f3 	udiv	r3, r2, r3
 800e286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    used_words =  capacity * message_size;
 800e288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	fb02 f303 	mul.w	r3, r2, r3
 800e290:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	699a      	ldr	r2, [r3, #24]
 800e29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	441a      	add	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2b6:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2bc:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e2be:	f3ef 8310 	mrs	r3, PRIMASK
 800e2c2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e2c4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e2c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e2c8:	b672      	cpsid	i
    return(int_posture);
 800e2ca:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 800e2cc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4a18      	ldr	r2, [pc, #96]	@ (800e334 <_tx_queue_create+0xdc>)
 800e2d2:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 800e2d4:	4b18      	ldr	r3, [pc, #96]	@ (800e338 <_tx_queue_create+0xe0>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d109      	bne.n	800e2f0 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 800e2dc:	4a17      	ldr	r2, [pc, #92]	@ (800e33c <_tx_queue_create+0xe4>)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	631a      	str	r2, [r3, #48]	@ 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	635a      	str	r2, [r3, #52]	@ 0x34
 800e2ee:	e011      	b.n	800e314 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 800e2f0:	4b12      	ldr	r3, [pc, #72]	@ (800e33c <_tx_queue_create+0xe4>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
 800e2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2fa:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	68fa      	ldr	r2, [r7, #12]
 800e300:	635a      	str	r2, [r3, #52]	@ 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	69fa      	ldr	r2, [r7, #28]
 800e30c:	635a      	str	r2, [r3, #52]	@ 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	6a3a      	ldr	r2, [r7, #32]
 800e312:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 800e314:	4b08      	ldr	r3, [pc, #32]	@ (800e338 <_tx_queue_create+0xe0>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3301      	adds	r3, #1
 800e31a:	4a07      	ldr	r2, [pc, #28]	@ (800e338 <_tx_queue_create+0xe0>)
 800e31c:	6013      	str	r3, [r2, #0]
 800e31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e320:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	f383 8810 	msr	PRIMASK, r3
}
 800e328:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3730      	adds	r7, #48	@ 0x30
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	51554555 	.word	0x51554555
 800e338:	20157ea8 	.word	0x20157ea8
 800e33c:	20157ea4 	.word	0x20157ea4

0800e340 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b096      	sub	sp, #88	@ 0x58
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800e34c:	2300      	movs	r3, #0
 800e34e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e350:	f3ef 8310 	mrs	r3, PRIMASK
 800e354:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 800e356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 800e358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800e35a:	b672      	cpsid	i
    return(int_posture);
 800e35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 800e35e:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e364:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f000 8136 	beq.w	800e5dc <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800e370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e372:	2b00      	cmp	r3, #0
 800e374:	d13c      	bne.n	800e3f0 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	657b      	str	r3, [r7, #84]	@ 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	653b      	str	r3, [r7, #80]	@ 0x50
            size =         queue_ptr -> tx_queue_message_size;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800e386:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e388:	1d13      	adds	r3, r2, #4
 800e38a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e38c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e38e:	1d19      	adds	r1, r3, #4
 800e390:	6539      	str	r1, [r7, #80]	@ 0x50
 800e392:	6812      	ldr	r2, [r2, #0]
 800e394:	601a      	str	r2, [r3, #0]
 800e396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d90e      	bls.n	800e3ba <_tx_queue_receive+0x7a>
 800e39c:	e007      	b.n	800e3ae <_tx_queue_receive+0x6e>
 800e39e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3a0:	1d13      	adds	r3, r2, #4
 800e3a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800e3a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3a6:	1d19      	adds	r1, r3, #4
 800e3a8:	6539      	str	r1, [r7, #80]	@ 0x50
 800e3aa:	6812      	ldr	r2, [r2, #0]
 800e3ac:	601a      	str	r2, [r3, #0]
 800e3ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1f1      	bne.n	800e39e <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	69db      	ldr	r3, [r3, #28]
 800e3be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d102      	bne.n	800e3ca <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	699b      	ldr	r3, [r3, #24]
 800e3c8:	657b      	str	r3, [r7, #84]	@ 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3ce:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	691b      	ldr	r3, [r3, #16]
 800e3de:	1e5a      	subs	r2, r3, #1
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	611a      	str	r2, [r3, #16]
 800e3e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ea:	f383 8810 	msr	PRIMASK, r3
}
 800e3ee:	e163      	b.n	800e6b8 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800e3f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d153      	bne.n	800e4a8 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800e400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e404:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800e410:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e412:	1d13      	adds	r3, r2, #4
 800e414:	657b      	str	r3, [r7, #84]	@ 0x54
 800e416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e418:	1d19      	adds	r1, r3, #4
 800e41a:	6539      	str	r1, [r7, #80]	@ 0x50
 800e41c:	6812      	ldr	r2, [r2, #0]
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e422:	2b01      	cmp	r3, #1
 800e424:	d90e      	bls.n	800e444 <_tx_queue_receive+0x104>
 800e426:	e007      	b.n	800e438 <_tx_queue_receive+0xf8>
 800e428:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e42a:	1d13      	adds	r3, r2, #4
 800e42c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e42e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e430:	1d19      	adds	r1, r3, #4
 800e432:	6539      	str	r1, [r7, #80]	@ 0x50
 800e434:	6812      	ldr	r2, [r2, #0]
 800e436:	601a      	str	r2, [r3, #0]
 800e438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e43a:	3b01      	subs	r3, #1
 800e43c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e43e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1f1      	bne.n	800e428 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800e444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e446:	3b01      	subs	r3, #1
 800e448:	643b      	str	r3, [r7, #64]	@ 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800e44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d103      	bne.n	800e458 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	629a      	str	r2, [r3, #40]	@ 0x28
 800e456:	e00e      	b.n	800e476 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800e458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e45a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e45c:	63bb      	str	r3, [r7, #56]	@ 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e462:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800e464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e468:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800e46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e46e:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 800e470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e472:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e474:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e47a:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e47e:	2200      	movs	r2, #0
 800e480:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800e482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e484:	2200      	movs	r2, #0
 800e486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800e48a:	4b8e      	ldr	r3, [pc, #568]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3301      	adds	r3, #1
 800e490:	4a8c      	ldr	r2, [pc, #560]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e492:	6013      	str	r3, [r2, #0]
 800e494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e496:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49a:	f383 8810 	msr	PRIMASK, r3
}
 800e49e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800e4a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e4a2:	f000 fe31 	bl	800f108 <_tx_thread_system_resume>
 800e4a6:	e107      	b.n	800e6b8 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6a1b      	ldr	r3, [r3, #32]
 800e4ac:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800e4b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e4ba:	1d13      	adds	r3, r2, #4
 800e4bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4c0:	1d19      	adds	r1, r3, #4
 800e4c2:	6539      	str	r1, [r7, #80]	@ 0x50
 800e4c4:	6812      	ldr	r2, [r2, #0]
 800e4c6:	601a      	str	r2, [r3, #0]
 800e4c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d90e      	bls.n	800e4ec <_tx_queue_receive+0x1ac>
 800e4ce:	e007      	b.n	800e4e0 <_tx_queue_receive+0x1a0>
 800e4d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e4d2:	1d13      	adds	r3, r2, #4
 800e4d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800e4d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4d8:	1d19      	adds	r1, r3, #4
 800e4da:	6539      	str	r1, [r7, #80]	@ 0x50
 800e4dc:	6812      	ldr	r2, [r2, #0]
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1f1      	bne.n	800e4d0 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	69db      	ldr	r3, [r3, #28]
 800e4f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d102      	bne.n	800e4fc <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	699b      	ldr	r3, [r3, #24]
 800e4fa:	657b      	str	r3, [r7, #84]	@ 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e500:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800e502:	4b70      	ldr	r3, [pc, #448]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3301      	adds	r3, #1
 800e508:	4a6e      	ldr	r2, [pc, #440]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e50a:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800e50c:	4b6d      	ldr	r3, [pc, #436]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	3b01      	subs	r3, #1
 800e512:	4a6c      	ldr	r2, [pc, #432]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e514:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800e516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e51a:	657b      	str	r3, [r7, #84]	@ 0x54
                destination =  queue_ptr -> tx_queue_write;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e520:	653b      	str	r3, [r7, #80]	@ 0x50
                size =         queue_ptr -> tx_queue_message_size;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800e528:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e52a:	1d13      	adds	r3, r2, #4
 800e52c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e530:	1d19      	adds	r1, r3, #4
 800e532:	6539      	str	r1, [r7, #80]	@ 0x50
 800e534:	6812      	ldr	r2, [r2, #0]
 800e536:	601a      	str	r2, [r3, #0]
 800e538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d90e      	bls.n	800e55c <_tx_queue_receive+0x21c>
 800e53e:	e007      	b.n	800e550 <_tx_queue_receive+0x210>
 800e540:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e542:	1d13      	adds	r3, r2, #4
 800e544:	657b      	str	r3, [r7, #84]	@ 0x54
 800e546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e548:	1d19      	adds	r1, r3, #4
 800e54a:	6539      	str	r1, [r7, #80]	@ 0x50
 800e54c:	6812      	ldr	r2, [r2, #0]
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e552:	3b01      	subs	r3, #1
 800e554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1f1      	bne.n	800e540 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	69db      	ldr	r3, [r3, #28]
 800e560:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e562:	429a      	cmp	r2, r3
 800e564:	d102      	bne.n	800e56c <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	699b      	ldr	r3, [r3, #24]
 800e56a:	653b      	str	r3, [r7, #80]	@ 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e570:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e576:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 800e578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e57a:	3b01      	subs	r3, #1
 800e57c:	643b      	str	r3, [r7, #64]	@ 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 800e57e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e580:	2b00      	cmp	r3, #0
 800e582:	d103      	bne.n	800e58c <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	629a      	str	r2, [r3, #40]	@ 0x28
 800e58a:	e00e      	b.n	800e5aa <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800e58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e58e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e590:	63bb      	str	r3, [r7, #56]	@ 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e596:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e59a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e59c:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5a2:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 800e5a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5a8:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e5ae:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800e5b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800e5be:	4b41      	ldr	r3, [pc, #260]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	4a3f      	ldr	r2, [pc, #252]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e5c6:	6013      	str	r3, [r2, #0]
 800e5c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5ca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	f383 8810 	msr	PRIMASK, r3
}
 800e5d2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 800e5d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e5d6:	f000 fd97 	bl	800f108 <_tx_thread_system_resume>
 800e5da:	e06d      	b.n	800e6b8 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d062      	beq.n	800e6a8 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800e5e2:	4b38      	ldr	r3, [pc, #224]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <_tx_queue_receive+0x2bc>
 800e5ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5ec:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	f383 8810 	msr	PRIMASK, r3
}
 800e5f4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800e5f6:	230a      	movs	r3, #10
 800e5f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5fa:	e05d      	b.n	800e6b8 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e5fc:	4b32      	ldr	r3, [pc, #200]	@ (800e6c8 <_tx_queue_receive+0x388>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800e602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e604:	4a31      	ldr	r2, [pc, #196]	@ (800e6cc <_tx_queue_receive+0x38c>)
 800e606:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800e608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 800e60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800e614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e616:	2200      	movs	r2, #0
 800e618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800e61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e61e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e626:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800e62a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d109      	bne.n	800e644 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e634:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800e636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e638:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e63a:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800e63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e63e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e640:	675a      	str	r2, [r3, #116]	@ 0x74
 800e642:	e011      	b.n	800e668 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e648:	63bb      	str	r3, [r7, #56]	@ 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800e64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e64c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e64e:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800e650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e654:	637b      	str	r3, [r7, #52]	@ 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800e656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e65a:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800e65c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e65e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e660:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800e662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e664:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e666:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800e668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800e670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e672:	2205      	movs	r2, #5
 800e674:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e678:	2201      	movs	r2, #1
 800e67a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800e67c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800e682:	4b10      	ldr	r3, [pc, #64]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3301      	adds	r3, #1
 800e688:	4a0e      	ldr	r2, [pc, #56]	@ (800e6c4 <_tx_queue_receive+0x384>)
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e68e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	f383 8810 	msr	PRIMASK, r3
}
 800e696:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800e698:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e69a:	f000 fe35 	bl	800f308 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800e69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6a6:	e007      	b.n	800e6b8 <_tx_queue_receive+0x378>
 800e6a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	f383 8810 	msr	PRIMASK, r3
}
 800e6b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 800e6b4:	230a      	movs	r3, #10
 800e6b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    /* Return completion status.  */
    return(status);
 800e6b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3758      	adds	r7, #88	@ 0x58
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20157f6c 	.word	0x20157f6c
 800e6c8:	20157ed4 	.word	0x20157ed4
 800e6cc:	0800e151 	.word	0x0800e151

0800e6d0 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b094      	sub	sp, #80	@ 0x50
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800e6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800e6e8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e6ea:	b672      	cpsid	i
    return(int_posture);
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 800e6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	695b      	ldr	r3, [r3, #20]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f000 809b 	beq.w	800e836 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 800e700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e702:	2b00      	cmp	r3, #0
 800e704:	d13c      	bne.n	800e780 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	1e5a      	subs	r2, r3, #1
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	1c5a      	adds	r2, r3, #1
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  queue_ptr -> tx_queue_write;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e722:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800e72a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e72c:	1d13      	adds	r3, r2, #4
 800e72e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e732:	1d19      	adds	r1, r3, #4
 800e734:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e736:	6812      	ldr	r2, [r2, #0]
 800e738:	601a      	str	r2, [r3, #0]
 800e73a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d90e      	bls.n	800e75e <_tx_queue_send+0x8e>
 800e740:	e007      	b.n	800e752 <_tx_queue_send+0x82>
 800e742:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e744:	1d13      	adds	r3, r2, #4
 800e746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e74a:	1d19      	adds	r1, r3, #4
 800e74c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e74e:	6812      	ldr	r2, [r2, #0]
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e754:	3b01      	subs	r3, #1
 800e756:	647b      	str	r3, [r7, #68]	@ 0x44
 800e758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1f1      	bne.n	800e742 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	69db      	ldr	r3, [r3, #28]
 800e762:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e764:	429a      	cmp	r2, r3
 800e766:	d102      	bne.n	800e76e <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	699b      	ldr	r3, [r3, #24]
 800e76c:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e772:	625a      	str	r2, [r3, #36]	@ 0x24
 800e774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e776:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e778:	6a3b      	ldr	r3, [r7, #32]
 800e77a:	f383 8810 	msr	PRIMASK, r3
}
 800e77e:	e0c8      	b.n	800e912 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e784:	637b      	str	r3, [r7, #52]	@ 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 800e786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e788:	3b01      	subs	r3, #1
 800e78a:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 800e78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2200      	movs	r2, #0
 800e796:	629a      	str	r2, [r3, #40]	@ 0x28
 800e798:	e012      	b.n	800e7c0 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800e79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e79c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800e7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7a6:	633b      	str	r3, [r7, #48]	@ 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7ac:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7b8:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 800e7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7be:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7c4:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800e7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800e7dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e7de:	1d13      	adds	r3, r2, #4
 800e7e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7e4:	1d19      	adds	r1, r3, #4
 800e7e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e7e8:	6812      	ldr	r2, [r2, #0]
 800e7ea:	601a      	str	r2, [r3, #0]
 800e7ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d90e      	bls.n	800e810 <_tx_queue_send+0x140>
 800e7f2:	e007      	b.n	800e804 <_tx_queue_send+0x134>
 800e7f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e7f6:	1d13      	adds	r3, r2, #4
 800e7f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7fc:	1d19      	adds	r1, r3, #4
 800e7fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e800:	6812      	ldr	r2, [r2, #0]
 800e802:	601a      	str	r2, [r3, #0]
 800e804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e806:	3b01      	subs	r3, #1
 800e808:	647b      	str	r3, [r7, #68]	@ 0x44
 800e80a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1f1      	bne.n	800e7f4 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800e810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e812:	2200      	movs	r2, #0
 800e814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800e818:	4b40      	ldr	r3, [pc, #256]	@ (800e91c <_tx_queue_send+0x24c>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	3301      	adds	r3, #1
 800e81e:	4a3f      	ldr	r2, [pc, #252]	@ (800e91c <_tx_queue_send+0x24c>)
 800e820:	6013      	str	r3, [r2, #0]
 800e822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e824:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	f383 8810 	msr	PRIMASK, r3
}
 800e82c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800e82e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e830:	f000 fc6a 	bl	800f108 <_tx_thread_system_resume>
 800e834:	e06d      	b.n	800e912 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d062      	beq.n	800e902 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800e83c:	4b37      	ldr	r3, [pc, #220]	@ (800e91c <_tx_queue_send+0x24c>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d008      	beq.n	800e856 <_tx_queue_send+0x186>
 800e844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e846:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	f383 8810 	msr	PRIMASK, r3
}
 800e84e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 800e850:	230b      	movs	r3, #11
 800e852:	643b      	str	r3, [r7, #64]	@ 0x40
 800e854:	e05d      	b.n	800e912 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e856:	4b32      	ldr	r3, [pc, #200]	@ (800e920 <_tx_queue_send+0x250>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 800e85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e85e:	4a31      	ldr	r2, [pc, #196]	@ (800e924 <_tx_queue_send+0x254>)
 800e860:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800e862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 800e868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 800e86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e870:	2200      	movs	r2, #0
 800e872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800e876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e87c:	1c5a      	adds	r2, r3, #1
 800e87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e880:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800e884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e886:	2b00      	cmp	r3, #0
 800e888:	d109      	bne.n	800e89e <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e88e:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800e890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e892:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e894:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800e896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e89a:	675a      	str	r2, [r3, #116]	@ 0x74
 800e89c:	e011      	b.n	800e8c2 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8a2:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800e8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8a8:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800e8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800e8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8b4:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800e8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8ba:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800e8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8c0:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800e8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8c4:	1c5a      	adds	r2, r3, #1
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 800e8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8cc:	2205      	movs	r2, #5
 800e8ce:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800e8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800e8dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e91c <_tx_queue_send+0x24c>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	4a0e      	ldr	r2, [pc, #56]	@ (800e91c <_tx_queue_send+0x24c>)
 800e8e4:	6013      	str	r3, [r2, #0]
 800e8e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	f383 8810 	msr	PRIMASK, r3
}
 800e8f0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800e8f2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e8f4:	f000 fd08 	bl	800f308 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800e8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800e900:	e007      	b.n	800e912 <_tx_queue_send+0x242>
 800e902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e904:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	f383 8810 	msr	PRIMASK, r3
}
 800e90c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 800e90e:	230b      	movs	r3, #11
 800e910:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 800e912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800e914:	4618      	mov	r0, r3
 800e916:	3750      	adds	r7, #80	@ 0x50
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	20157f6c 	.word	0x20157f6c
 800e920:	20157ed4 	.word	0x20157ed4
 800e924:	0800e151 	.word	0x0800e151

0800e928 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b08e      	sub	sp, #56	@ 0x38
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e932:	f3ef 8310 	mrs	r3, PRIMASK
 800e936:	623b      	str	r3, [r7, #32]
    return(posture);
 800e938:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e93a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e93c:	b672      	cpsid	i
    return(int_posture);
 800e93e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800e940:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e946:	4a33      	ldr	r2, [pc, #204]	@ (800ea14 <_tx_semaphore_cleanup+0xec>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d158      	bne.n	800e9fe <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e952:	683a      	ldr	r2, [r7, #0]
 800e954:	429a      	cmp	r2, r3
 800e956:	d152      	bne.n	800e9fe <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e95c:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800e95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e960:	2b00      	cmp	r3, #0
 800e962:	d04c      	beq.n	800e9fe <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800e964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a2b      	ldr	r2, [pc, #172]	@ (800ea18 <_tx_semaphore_cleanup+0xf0>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d147      	bne.n	800e9fe <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800e96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d043      	beq.n	800e9fe <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800e97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e97e:	691b      	ldr	r3, [r3, #16]
 800e980:	1e5a      	subs	r2, r3, #1
 800e982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e984:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800e986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800e98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d103      	bne.n	800e99a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800e992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e994:	2200      	movs	r2, #0
 800e996:	60da      	str	r2, [r3, #12]
 800e998:	e013      	b.n	800e9c2 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e99e:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9a4:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800e9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9aa:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9b0:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d102      	bne.n	800e9c2 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9c0:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9c6:	2b06      	cmp	r3, #6
 800e9c8:	d119      	bne.n	800e9fe <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	220d      	movs	r2, #13
 800e9ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800e9d2:	4b12      	ldr	r3, [pc, #72]	@ (800ea1c <_tx_semaphore_cleanup+0xf4>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	4a10      	ldr	r2, [pc, #64]	@ (800ea1c <_tx_semaphore_cleanup+0xf4>)
 800e9da:	6013      	str	r3, [r2, #0]
 800e9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9de:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	f383 8810 	msr	PRIMASK, r3
}
 800e9e6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 fb8d 	bl	800f108 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e9f2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800e9f4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800e9f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9f8:	b672      	cpsid	i
    return(int_posture);
 800e9fa:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800e9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea00:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f383 8810 	msr	PRIMASK, r3
}
 800ea08:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ea0a:	bf00      	nop
 800ea0c:	3738      	adds	r7, #56	@ 0x38
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	0800e929 	.word	0x0800e929
 800ea18:	53454d41 	.word	0x53454d41
 800ea1c:	20157f6c 	.word	0x20157f6c

0800ea20 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b08a      	sub	sp, #40	@ 0x28
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800ea2c:	221c      	movs	r2, #28
 800ea2e:	2100      	movs	r1, #0
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f01d fac8 	bl	802bfc6 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ea42:	f3ef 8310 	mrs	r3, PRIMASK
 800ea46:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ea48:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ea4a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ea4c:	b672      	cpsid	i
    return(int_posture);
 800ea4e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800ea50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	4a18      	ldr	r2, [pc, #96]	@ (800eab8 <_tx_semaphore_create+0x98>)
 800ea56:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800ea58:	4b18      	ldr	r3, [pc, #96]	@ (800eabc <_tx_semaphore_create+0x9c>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d109      	bne.n	800ea74 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800ea60:	4a17      	ldr	r2, [pc, #92]	@ (800eac0 <_tx_semaphore_create+0xa0>)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	619a      	str	r2, [r3, #24]
 800ea72:	e011      	b.n	800ea98 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800ea74:	4b12      	ldr	r3, [pc, #72]	@ (800eac0 <_tx_semaphore_create+0xa0>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	699b      	ldr	r3, [r3, #24]
 800ea7e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800ea80:	6a3b      	ldr	r3, [r7, #32]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	69fa      	ldr	r2, [r7, #28]
 800ea90:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6a3a      	ldr	r2, [r7, #32]
 800ea96:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800ea98:	4b08      	ldr	r3, [pc, #32]	@ (800eabc <_tx_semaphore_create+0x9c>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	4a07      	ldr	r2, [pc, #28]	@ (800eabc <_tx_semaphore_create+0x9c>)
 800eaa0:	6013      	str	r3, [r2, #0]
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	f383 8810 	msr	PRIMASK, r3
}
 800eaac:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800eaae:	2300      	movs	r3, #0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3728      	adds	r7, #40	@ 0x28
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	53454d41 	.word	0x53454d41
 800eabc:	20157ea0 	.word	0x20157ea0
 800eac0:	20157e9c 	.word	0x20157e9c

0800eac4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08e      	sub	sp, #56	@ 0x38
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800eace:	2300      	movs	r3, #0
 800ead0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ead2:	f3ef 8310 	mrs	r3, PRIMASK
 800ead6:	623b      	str	r3, [r7, #32]
    return(posture);
 800ead8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800eada:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eadc:	b672      	cpsid	i
    return(int_posture);
 800eade:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800eae0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00a      	beq.n	800eb00 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	1e5a      	subs	r2, r3, #1
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	609a      	str	r2, [r3, #8]
 800eaf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	f383 8810 	msr	PRIMASK, r3
}
 800eafe:	e068      	b.n	800ebd2 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d05d      	beq.n	800ebc2 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800eb06:	4b35      	ldr	r3, [pc, #212]	@ (800ebdc <_tx_semaphore_get+0x118>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d008      	beq.n	800eb20 <_tx_semaphore_get+0x5c>
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb10:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f383 8810 	msr	PRIMASK, r3
}
 800eb18:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800eb1a:	230d      	movs	r3, #13
 800eb1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb1e:	e058      	b.n	800ebd2 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800eb20:	4b2f      	ldr	r3, [pc, #188]	@ (800ebe0 <_tx_semaphore_get+0x11c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800eb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb28:	4a2e      	ldr	r2, [pc, #184]	@ (800ebe4 <_tx_semaphore_get+0x120>)
 800eb2a:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800eb32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d109      	bne.n	800eb5c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb4c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800eb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb52:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800eb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb58:	675a      	str	r2, [r3, #116]	@ 0x74
 800eb5a:	e011      	b.n	800eb80 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800eb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb66:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800eb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb6c:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800eb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb72:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800eb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb78:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800eb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb7e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	691b      	ldr	r3, [r3, #16]
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800eb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb8c:	2206      	movs	r2, #6
 800eb8e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800eb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb92:	2201      	movs	r2, #1
 800eb94:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800eb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb98:	683a      	ldr	r2, [r7, #0]
 800eb9a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800eb9c:	4b0f      	ldr	r3, [pc, #60]	@ (800ebdc <_tx_semaphore_get+0x118>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3301      	adds	r3, #1
 800eba2:	4a0e      	ldr	r2, [pc, #56]	@ (800ebdc <_tx_semaphore_get+0x118>)
 800eba4:	6013      	str	r3, [r2, #0]
 800eba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	f383 8810 	msr	PRIMASK, r3
}
 800ebb0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ebb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebb4:	f000 fba8 	bl	800f308 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ebb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ebc0:	e007      	b.n	800ebd2 <_tx_semaphore_get+0x10e>
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f383 8810 	msr	PRIMASK, r3
}
 800ebcc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800ebce:	230d      	movs	r3, #13
 800ebd0:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800ebd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3738      	adds	r7, #56	@ 0x38
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	20157f6c 	.word	0x20157f6c
 800ebe0:	20157ed4 	.word	0x20157ed4
 800ebe4:	0800e929 	.word	0x0800e929

0800ebe8 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b08c      	sub	sp, #48	@ 0x30
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ebf0:	f3ef 8310 	mrs	r3, PRIMASK
 800ebf4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ebf6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ebf8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ebfa:	b672      	cpsid	i
    return(int_posture);
 800ebfc:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800ebfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800ec06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d10a      	bne.n	800ec22 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	609a      	str	r2, [r3, #8]
 800ec16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	f383 8810 	msr	PRIMASK, r3
}
 800ec20:	e033      	b.n	800ec8a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	68db      	ldr	r3, [r3, #12]
 800ec26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800ec28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800ec2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d103      	bne.n	800ec3c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2200      	movs	r2, #0
 800ec38:	60da      	str	r2, [r3, #12]
 800ec3a:	e00e      	b.n	800ec5a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec40:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a3a      	ldr	r2, [r7, #32]
 800ec46:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800ec48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec4c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ec4e:	6a3b      	ldr	r3, [r7, #32]
 800ec50:	69fa      	ldr	r2, [r7, #28]
 800ec52:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	6a3a      	ldr	r2, [r7, #32]
 800ec58:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec5e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ec60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec62:	2200      	movs	r2, #0
 800ec64:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ec66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800ec6e:	4b09      	ldr	r3, [pc, #36]	@ (800ec94 <_tx_semaphore_put+0xac>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	3301      	adds	r3, #1
 800ec74:	4a07      	ldr	r2, [pc, #28]	@ (800ec94 <_tx_semaphore_put+0xac>)
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f383 8810 	msr	PRIMASK, r3
}
 800ec82:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ec84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec86:	f000 fa3f 	bl	800f108 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800ec8a:	2300      	movs	r3, #0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3730      	adds	r7, #48	@ 0x30
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	20157f6c 	.word	0x20157f6c

0800ec98 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b092      	sub	sp, #72	@ 0x48
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800eca6:	2300      	movs	r3, #0
 800eca8:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800ecaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ecac:	21ef      	movs	r1, #239	@ 0xef
 800ecae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ecb0:	f01d f989 	bl	802bfc6 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ecb4:	22b0      	movs	r2, #176	@ 0xb0
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f01d f984 	bl	802bfc6 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	68ba      	ldr	r2, [r7, #8]
 800ecc2:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	683a      	ldr	r2, [r7, #0]
 800ecce:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecd4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ecda:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ece0:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ece6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ecee:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ecf4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2220      	movs	r2, #32
 800ecfa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800ecfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800ed02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed04:	3b01      	subs	r3, #1
 800ed06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed08:	4413      	add	r3, r2
 800ed0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed10:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800ed12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d007      	beq.n	800ed2a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800ed28:	e006      	b.n	800ed38 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed2e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed34:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2203      	movs	r2, #3
 800ed3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	4a48      	ldr	r2, [pc, #288]	@ (800ee64 <_tx_thread_create+0x1cc>)
 800ed42:	655a      	str	r2, [r3, #84]	@ 0x54
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800ed4a:	4947      	ldr	r1, [pc, #284]	@ (800ee68 <_tx_thread_create+0x1d0>)
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7f1 fb53 	bl	80003f8 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed52:	f3ef 8310 	mrs	r3, PRIMASK
 800ed56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ed58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ed5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed5c:	b672      	cpsid	i
    return(int_posture);
 800ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ed60:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	4a41      	ldr	r2, [pc, #260]	@ (800ee6c <_tx_thread_create+0x1d4>)
 800ed66:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ed68:	4b41      	ldr	r3, [pc, #260]	@ (800ee70 <_tx_thread_create+0x1d8>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10b      	bne.n	800ed88 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ed70:	4a40      	ldr	r2, [pc, #256]	@ (800ee74 <_tx_thread_create+0x1dc>)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800ed86:	e016      	b.n	800edb6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ed88:	4b3a      	ldr	r3, [pc, #232]	@ (800ee74 <_tx_thread_create+0x1dc>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ed8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed94:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ed96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800edb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800edb6:	4b2e      	ldr	r3, [pc, #184]	@ (800ee70 <_tx_thread_create+0x1d8>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	3301      	adds	r3, #1
 800edbc:	4a2c      	ldr	r2, [pc, #176]	@ (800ee70 <_tx_thread_create+0x1d8>)
 800edbe:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800edc0:	4b2d      	ldr	r3, [pc, #180]	@ (800ee78 <_tx_thread_create+0x1e0>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	3301      	adds	r3, #1
 800edc6:	4a2c      	ldr	r2, [pc, #176]	@ (800ee78 <_tx_thread_create+0x1e0>)
 800edc8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800edca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d129      	bne.n	800ee24 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800edd0:	f3ef 8305 	mrs	r3, IPSR
 800edd4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800edd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800edd8:	4b28      	ldr	r3, [pc, #160]	@ (800ee7c <_tx_thread_create+0x1e4>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4313      	orrs	r3, r2
 800edde:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ede2:	d30d      	bcc.n	800ee00 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ede4:	4b26      	ldr	r3, [pc, #152]	@ (800ee80 <_tx_thread_create+0x1e8>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800edea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edec:	2b00      	cmp	r3, #0
 800edee:	d009      	beq.n	800ee04 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800edf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edf4:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800edf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 800edfe:	e001      	b.n	800ee04 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ee00:	2300      	movs	r3, #0
 800ee02:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee06:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee08:	6a3b      	ldr	r3, [r7, #32]
 800ee0a:	f383 8810 	msr	PRIMASK, r3
}
 800ee0e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 f979 	bl	800f108 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800ee16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d01e      	beq.n	800ee5a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ee1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee20:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ee22:	e01a      	b.n	800ee5a <_tx_thread_create+0x1c2>
 800ee24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee26:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	f383 8810 	msr	PRIMASK, r3
}
 800ee2e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee30:	f3ef 8310 	mrs	r3, PRIMASK
 800ee34:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ee36:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ee38:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ee3a:	b672      	cpsid	i
    return(int_posture);
 800ee3c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800ee3e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800ee40:	4b0d      	ldr	r3, [pc, #52]	@ (800ee78 <_tx_thread_create+0x1e0>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	3b01      	subs	r3, #1
 800ee46:	4a0c      	ldr	r2, [pc, #48]	@ (800ee78 <_tx_thread_create+0x1e0>)
 800ee48:	6013      	str	r3, [r2, #0]
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee4c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	f383 8810 	msr	PRIMASK, r3
}
 800ee54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ee56:	f000 f91d 	bl	800f094 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3748      	adds	r7, #72	@ 0x48
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	0800f5dd 	.word	0x0800f5dd
 800ee68:	0800eefd 	.word	0x0800eefd
 800ee6c:	54485244 	.word	0x54485244
 800ee70:	20157ee0 	.word	0x20157ee0
 800ee74:	20157edc 	.word	0x20157edc
 800ee78:	20157f6c 	.word	0x20157f6c
 800ee7c:	20000010 	.word	0x20000010
 800ee80:	20157ed8 	.word	0x20157ed8

0800ee84 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800ee88:	4b12      	ldr	r3, [pc, #72]	@ (800eed4 <_tx_thread_initialize+0x50>)
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800ee8e:	4b12      	ldr	r3, [pc, #72]	@ (800eed8 <_tx_thread_initialize+0x54>)
 800ee90:	2200      	movs	r2, #0
 800ee92:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800ee94:	4b11      	ldr	r3, [pc, #68]	@ (800eedc <_tx_thread_initialize+0x58>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ee9a:	4b11      	ldr	r3, [pc, #68]	@ (800eee0 <_tx_thread_initialize+0x5c>)
 800ee9c:	2220      	movs	r2, #32
 800ee9e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800eea0:	2280      	movs	r2, #128	@ 0x80
 800eea2:	2100      	movs	r1, #0
 800eea4:	480f      	ldr	r0, [pc, #60]	@ (800eee4 <_tx_thread_initialize+0x60>)
 800eea6:	f01d f88e 	bl	802bfc6 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800eeaa:	4b0f      	ldr	r3, [pc, #60]	@ (800eee8 <_tx_thread_initialize+0x64>)
 800eeac:	2200      	movs	r2, #0
 800eeae:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800eeb0:	4b0e      	ldr	r3, [pc, #56]	@ (800eeec <_tx_thread_initialize+0x68>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800eeb6:	4b0e      	ldr	r3, [pc, #56]	@ (800eef0 <_tx_thread_initialize+0x6c>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800eebc:	4b0d      	ldr	r3, [pc, #52]	@ (800eef4 <_tx_thread_initialize+0x70>)
 800eebe:	2200      	movs	r2, #0
 800eec0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800eec2:	4b0d      	ldr	r3, [pc, #52]	@ (800eef8 <_tx_thread_initialize+0x74>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800eeca:	4a0b      	ldr	r2, [pc, #44]	@ (800eef8 <_tx_thread_initialize+0x74>)
 800eecc:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800eece:	bf00      	nop
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	20157ed4 	.word	0x20157ed4
 800eed8:	20157ed8 	.word	0x20157ed8
 800eedc:	20157ee4 	.word	0x20157ee4
 800eee0:	20157ee8 	.word	0x20157ee8
 800eee4:	20157eec 	.word	0x20157eec
 800eee8:	20157edc 	.word	0x20157edc
 800eeec:	20157ee0 	.word	0x20157ee0
 800eef0:	20157f6c 	.word	0x20157f6c
 800eef4:	20157f70 	.word	0x20157f70
 800eef8:	20157f74 	.word	0x20157f74

0800eefc <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b088      	sub	sp, #32
 800ef00:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ef02:	4b21      	ldr	r3, [pc, #132]	@ (800ef88 <_tx_thread_shell_entry+0x8c>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef0c:	69fa      	ldr	r2, [r7, #28]
 800ef0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ef10:	4610      	mov	r0, r2
 800ef12:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ef14:	4b1d      	ldr	r3, [pc, #116]	@ (800ef8c <_tx_thread_shell_entry+0x90>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d003      	beq.n	800ef24 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ef1c:	4b1b      	ldr	r3, [pc, #108]	@ (800ef8c <_tx_thread_shell_entry+0x90>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	69f8      	ldr	r0, [r7, #28]
 800ef22:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ef24:	f3ef 8310 	mrs	r3, PRIMASK
 800ef28:	607b      	str	r3, [r7, #4]
    return(posture);
 800ef2a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ef2c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ef2e:	b672      	cpsid	i
    return(int_posture);
 800ef30:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800ef32:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	2201      	movs	r2, #1
 800ef38:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	2200      	movs	r2, #0
 800ef44:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ef46:	4b12      	ldr	r3, [pc, #72]	@ (800ef90 <_tx_thread_shell_entry+0x94>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	4a10      	ldr	r2, [pc, #64]	@ (800ef90 <_tx_thread_shell_entry+0x94>)
 800ef4e:	6013      	str	r3, [r2, #0]
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	f383 8810 	msr	PRIMASK, r3
}
 800ef5a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ef5c:	f3ef 8314 	mrs	r3, CONTROL
 800ef60:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ef62:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800ef64:	617b      	str	r3, [r7, #20]
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	f023 0304 	bic.w	r3, r3, #4
 800ef6c:	617b      	str	r3, [r7, #20]
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	f383 8814 	msr	CONTROL, r3
}
 800ef78:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800ef7a:	69f8      	ldr	r0, [r7, #28]
 800ef7c:	f000 f9c4 	bl	800f308 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ef80:	bf00      	nop
 800ef82:	3720      	adds	r7, #32
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	20157ed4 	.word	0x20157ed4
 800ef8c:	20157f70 	.word	0x20157f70
 800ef90:	20157f6c 	.word	0x20157f6c

0800ef94 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b08e      	sub	sp, #56	@ 0x38
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ef9c:	f3ef 8310 	mrs	r3, PRIMASK
 800efa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800efa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800efa4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800efa6:	b672      	cpsid	i
    return(int_posture);
 800efa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800efaa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800efac:	4b35      	ldr	r3, [pc, #212]	@ (800f084 <_tx_thread_sleep+0xf0>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800efb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d108      	bne.n	800efca <_tx_thread_sleep+0x36>
 800efb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	f383 8810 	msr	PRIMASK, r3
}
 800efc2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800efc4:	2313      	movs	r3, #19
 800efc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800efc8:	e056      	b.n	800f078 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800efca:	f3ef 8305 	mrs	r3, IPSR
 800efce:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800efd0:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800efd2:	4b2d      	ldr	r3, [pc, #180]	@ (800f088 <_tx_thread_sleep+0xf4>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4313      	orrs	r3, r2
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d008      	beq.n	800efee <_tx_thread_sleep+0x5a>
 800efdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efde:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	f383 8810 	msr	PRIMASK, r3
}
 800efe6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800efe8:	2313      	movs	r3, #19
 800efea:	637b      	str	r3, [r7, #52]	@ 0x34
 800efec:	e044      	b.n	800f078 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800efee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eff0:	4a26      	ldr	r2, [pc, #152]	@ (800f08c <_tx_thread_sleep+0xf8>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d108      	bne.n	800f008 <_tx_thread_sleep+0x74>
 800eff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eff8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	f383 8810 	msr	PRIMASK, r3
}
 800f000:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800f002:	2313      	movs	r3, #19
 800f004:	637b      	str	r3, [r7, #52]	@ 0x34
 800f006:	e037      	b.n	800f078 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d108      	bne.n	800f020 <_tx_thread_sleep+0x8c>
 800f00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f010:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	f383 8810 	msr	PRIMASK, r3
}
 800f018:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800f01a:	2300      	movs	r3, #0
 800f01c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f01e:	e02b      	b.n	800f078 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800f020:	4b1b      	ldr	r3, [pc, #108]	@ (800f090 <_tx_thread_sleep+0xfc>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d008      	beq.n	800f03a <_tx_thread_sleep+0xa6>
 800f028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f02a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f383 8810 	msr	PRIMASK, r3
}
 800f032:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800f034:	2313      	movs	r3, #19
 800f036:	637b      	str	r3, [r7, #52]	@ 0x34
 800f038:	e01e      	b.n	800f078 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800f03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f03c:	2204      	movs	r2, #4
 800f03e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f042:	2201      	movs	r2, #1
 800f044:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800f046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f048:	2200      	movs	r2, #0
 800f04a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800f04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800f054:	4b0e      	ldr	r3, [pc, #56]	@ (800f090 <_tx_thread_sleep+0xfc>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	3301      	adds	r3, #1
 800f05a:	4a0d      	ldr	r2, [pc, #52]	@ (800f090 <_tx_thread_sleep+0xfc>)
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f060:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	f383 8810 	msr	PRIMASK, r3
}
 800f068:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800f06a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f06c:	f000 f94c 	bl	800f308 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800f070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f076:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800f078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3738      	adds	r7, #56	@ 0x38
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	20157ed4 	.word	0x20157ed4
 800f088:	20000010 	.word	0x20000010
 800f08c:	2015801c 	.word	0x2015801c
 800f090:	20157f6c 	.word	0x20157f6c

0800f094 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800f094:	b480      	push	{r7}
 800f096:	b089      	sub	sp, #36	@ 0x24
 800f098:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800f09a:	4b17      	ldr	r3, [pc, #92]	@ (800f0f8 <_tx_thread_system_preempt_check+0x64>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d121      	bne.n	800f0ea <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800f0a6:	4b15      	ldr	r3, [pc, #84]	@ (800f0fc <_tx_thread_system_preempt_check+0x68>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800f0ac:	4b14      	ldr	r3, [pc, #80]	@ (800f100 <_tx_thread_system_preempt_check+0x6c>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d017      	beq.n	800f0ea <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800f0ba:	4b12      	ldr	r3, [pc, #72]	@ (800f104 <_tx_thread_system_preempt_check+0x70>)
 800f0bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0c0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f0c2:	f3ef 8305 	mrs	r3, IPSR
 800f0c6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f0c8:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d10c      	bne.n	800f0e8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f0ce:	f3ef 8310 	mrs	r3, PRIMASK
 800f0d2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800f0d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800f0d8:	b662      	cpsie	i
}
 800f0da:	bf00      	nop
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f383 8810 	msr	PRIMASK, r3
}
 800f0e6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800f0e8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800f0ea:	bf00      	nop
 800f0ec:	3724      	adds	r7, #36	@ 0x24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	20157f6c 	.word	0x20157f6c
 800f0fc:	20157ed4 	.word	0x20157ed4
 800f100:	20157ed8 	.word	0x20157ed8
 800f104:	e000ed04 	.word	0xe000ed04

0800f108 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b096      	sub	sp, #88	@ 0x58
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f110:	f3ef 8310 	mrs	r3, PRIMASK
 800f114:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800f116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800f118:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800f11a:	b672      	cpsid	i
    return(int_posture);
 800f11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800f11e:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f124:	2b00      	cmp	r3, #0
 800f126:	d005      	beq.n	800f134 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	334c      	adds	r3, #76	@ 0x4c
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 fb91 	bl	800f854 <_tx_timer_system_deactivate>
 800f132:	e002      	b.n	800f13a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800f13a:	4b6c      	ldr	r3, [pc, #432]	@ (800f2ec <_tx_thread_system_resume+0x1e4>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	3b01      	subs	r3, #1
 800f140:	4a6a      	ldr	r2, [pc, #424]	@ (800f2ec <_tx_thread_system_resume+0x1e4>)
 800f142:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f040 8083 	bne.w	800f254 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f152:	2b00      	cmp	r3, #0
 800f154:	f000 8097 	beq.w	800f286 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d172      	bne.n	800f246 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f16a:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800f16c:	4a60      	ldr	r2, [pc, #384]	@ (800f2f0 <_tx_thread_system_resume+0x1e8>)
 800f16e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f174:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800f176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d154      	bne.n	800f226 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800f17c:	495c      	ldr	r1, [pc, #368]	@ (800f2f0 <_tx_thread_system_resume+0x1e8>)
 800f17e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800f192:	2201      	movs	r2, #1
 800f194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f196:	fa02 f303 	lsl.w	r3, r2, r3
 800f19a:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800f19c:	4b55      	ldr	r3, [pc, #340]	@ (800f2f4 <_tx_thread_system_resume+0x1ec>)
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	4a53      	ldr	r2, [pc, #332]	@ (800f2f4 <_tx_thread_system_resume+0x1ec>)
 800f1a6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800f1a8:	4b53      	ldr	r3, [pc, #332]	@ (800f2f8 <_tx_thread_system_resume+0x1f0>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d269      	bcs.n	800f286 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800f1b2:	4a51      	ldr	r2, [pc, #324]	@ (800f2f8 <_tx_thread_system_resume+0x1f0>)
 800f1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1b6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800f1b8:	4b50      	ldr	r3, [pc, #320]	@ (800f2fc <_tx_thread_system_resume+0x1f4>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800f1be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d103      	bne.n	800f1cc <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800f1c4:	4a4d      	ldr	r2, [pc, #308]	@ (800f2fc <_tx_thread_system_resume+0x1f4>)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6013      	str	r3, [r2, #0]
 800f1ca:	e05c      	b.n	800f286 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800f1cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d257      	bcs.n	800f286 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800f1d6:	4a49      	ldr	r2, [pc, #292]	@ (800f2fc <_tx_thread_system_resume+0x1f4>)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e2:	f383 8810 	msr	PRIMASK, r3
}
 800f1e6:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800f1e8:	4b40      	ldr	r3, [pc, #256]	@ (800f2ec <_tx_thread_system_resume+0x1e4>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800f1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d174      	bne.n	800f2de <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800f1f4:	4b42      	ldr	r3, [pc, #264]	@ (800f300 <_tx_thread_system_resume+0x1f8>)
 800f1f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1fa:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f1fc:	f3ef 8305 	mrs	r3, IPSR
 800f200:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800f202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10c      	bne.n	800f222 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f208:	f3ef 8310 	mrs	r3, PRIMASK
 800f20c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800f20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800f210:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800f212:	b662      	cpsie	i
}
 800f214:	bf00      	nop
 800f216:	6a3b      	ldr	r3, [r7, #32]
 800f218:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	f383 8810 	msr	PRIMASK, r3
}
 800f220:	bf00      	nop
}
 800f222:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800f224:	e05b      	b.n	800f2de <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800f226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f22a:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800f22c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800f232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f23c:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f242:	621a      	str	r2, [r3, #32]
 800f244:	e01f      	b.n	800f286 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2200      	movs	r2, #0
 800f24a:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2203      	movs	r2, #3
 800f250:	631a      	str	r2, [r3, #48]	@ 0x30
 800f252:	e018      	b.n	800f286 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d014      	beq.n	800f286 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f260:	2b02      	cmp	r3, #2
 800f262:	d010      	beq.n	800f286 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d106      	bne.n	800f27a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	631a      	str	r2, [r3, #48]	@ 0x30
 800f278:	e005      	b.n	800f286 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2203      	movs	r2, #3
 800f284:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800f286:	4b1f      	ldr	r3, [pc, #124]	@ (800f304 <_tx_thread_system_resume+0x1fc>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f28c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f28e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	f383 8810 	msr	PRIMASK, r3
}
 800f296:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800f298:	4b18      	ldr	r3, [pc, #96]	@ (800f2fc <_tx_thread_system_resume+0x1f4>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d020      	beq.n	800f2e4 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800f2a2:	4b12      	ldr	r3, [pc, #72]	@ (800f2ec <_tx_thread_system_resume+0x1e4>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800f2a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d11a      	bne.n	800f2e4 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800f2ae:	4b14      	ldr	r3, [pc, #80]	@ (800f300 <_tx_thread_system_resume+0x1f8>)
 800f2b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2b4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f2b6:	f3ef 8305 	mrs	r3, IPSR
 800f2ba:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f2bc:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10f      	bne.n	800f2e2 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f2c2:	f3ef 8310 	mrs	r3, PRIMASK
 800f2c6:	613b      	str	r3, [r7, #16]
    return(posture);
 800f2c8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800f2ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800f2cc:	b662      	cpsie	i
}
 800f2ce:	bf00      	nop
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	f383 8810 	msr	PRIMASK, r3
}
 800f2da:	bf00      	nop
}
 800f2dc:	e001      	b.n	800f2e2 <_tx_thread_system_resume+0x1da>
                                return;
 800f2de:	bf00      	nop
 800f2e0:	e000      	b.n	800f2e4 <_tx_thread_system_resume+0x1dc>
 800f2e2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800f2e4:	3758      	adds	r7, #88	@ 0x58
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20157f6c 	.word	0x20157f6c
 800f2f0:	20157eec 	.word	0x20157eec
 800f2f4:	20157ee4 	.word	0x20157ee4
 800f2f8:	20157ee8 	.word	0x20157ee8
 800f2fc:	20157ed8 	.word	0x20157ed8
 800f300:	e000ed04 	.word	0xe000ed04
 800f304:	20157ed4 	.word	0x20157ed4

0800f308 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b09e      	sub	sp, #120	@ 0x78
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800f310:	4b81      	ldr	r3, [pc, #516]	@ (800f518 <_tx_thread_system_suspend+0x210>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f316:	f3ef 8310 	mrs	r3, PRIMASK
 800f31a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800f31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800f31e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800f320:	b672      	cpsid	i
    return(int_posture);
 800f322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800f324:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d112      	bne.n	800f354 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f332:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800f334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f336:	2b00      	cmp	r3, #0
 800f338:	d008      	beq.n	800f34c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800f33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f340:	d004      	beq.n	800f34c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	334c      	adds	r3, #76	@ 0x4c
 800f346:	4618      	mov	r0, r3
 800f348:	f000 fa22 	bl	800f790 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	69db      	ldr	r3, [r3, #28]
 800f350:	4a72      	ldr	r2, [pc, #456]	@ (800f51c <_tx_thread_system_suspend+0x214>)
 800f352:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800f354:	4b72      	ldr	r3, [pc, #456]	@ (800f520 <_tx_thread_system_suspend+0x218>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3b01      	subs	r3, #1
 800f35a:	4a71      	ldr	r2, [pc, #452]	@ (800f520 <_tx_thread_system_suspend+0x218>)
 800f35c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f362:	2b01      	cmp	r3, #1
 800f364:	f040 80a6 	bne.w	800f4b4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f372:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6a1b      	ldr	r3, [r3, #32]
 800f378:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800f37a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d015      	beq.n	800f3ae <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f386:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800f388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f38a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f38c:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800f38e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f390:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f392:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800f394:	4a63      	ldr	r2, [pc, #396]	@ (800f524 <_tx_thread_system_suspend+0x21c>)
 800f396:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d157      	bne.n	800f452 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800f3a2:	4960      	ldr	r1, [pc, #384]	@ (800f524 <_tx_thread_system_suspend+0x21c>)
 800f3a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f3a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f3a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f3ac:	e051      	b.n	800f452 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800f3ae:	4a5d      	ldr	r2, [pc, #372]	@ (800f524 <_tx_thread_system_suspend+0x21c>)
 800f3b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f3c0:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800f3c2:	4b59      	ldr	r3, [pc, #356]	@ (800f528 <_tx_thread_system_suspend+0x220>)
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3c8:	43db      	mvns	r3, r3
 800f3ca:	4013      	ands	r3, r2
 800f3cc:	4a56      	ldr	r2, [pc, #344]	@ (800f528 <_tx_thread_system_suspend+0x220>)
 800f3ce:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800f3d4:	4b54      	ldr	r3, [pc, #336]	@ (800f528 <_tx_thread_system_suspend+0x220>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800f3da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d12b      	bne.n	800f438 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800f3e0:	4b52      	ldr	r3, [pc, #328]	@ (800f52c <_tx_thread_system_suspend+0x224>)
 800f3e2:	2220      	movs	r2, #32
 800f3e4:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800f3e6:	4b52      	ldr	r3, [pc, #328]	@ (800f530 <_tx_thread_system_suspend+0x228>)
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	601a      	str	r2, [r3, #0]
 800f3ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f3ee:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3f2:	f383 8810 	msr	PRIMASK, r3
}
 800f3f6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800f3f8:	4b49      	ldr	r3, [pc, #292]	@ (800f520 <_tx_thread_system_suspend+0x218>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800f3fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f400:	2b00      	cmp	r3, #0
 800f402:	f040 8081 	bne.w	800f508 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800f406:	4b4b      	ldr	r3, [pc, #300]	@ (800f534 <_tx_thread_system_suspend+0x22c>)
 800f408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f40c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f40e:	f3ef 8305 	mrs	r3, IPSR
 800f412:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800f414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800f416:	2b00      	cmp	r3, #0
 800f418:	d10c      	bne.n	800f434 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f41a:	f3ef 8310 	mrs	r3, PRIMASK
 800f41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800f420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800f422:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800f424:	b662      	cpsie	i
}
 800f426:	bf00      	nop
 800f428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42a:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f42e:	f383 8810 	msr	PRIMASK, r3
}
 800f432:	bf00      	nop
}
 800f434:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800f436:	e067      	b.n	800f508 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800f438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f43a:	fa93 f3a3 	rbit	r3, r3
 800f43e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f442:	fab3 f383 	clz	r3, r3
 800f446:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800f448:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f44a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f44c:	4413      	add	r3, r2
 800f44e:	4a37      	ldr	r2, [pc, #220]	@ (800f52c <_tx_thread_system_suspend+0x224>)
 800f450:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800f452:	4b37      	ldr	r3, [pc, #220]	@ (800f530 <_tx_thread_system_suspend+0x228>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d12b      	bne.n	800f4b4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800f45c:	4b33      	ldr	r3, [pc, #204]	@ (800f52c <_tx_thread_system_suspend+0x224>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a30      	ldr	r2, [pc, #192]	@ (800f524 <_tx_thread_system_suspend+0x21c>)
 800f462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f466:	4a32      	ldr	r2, [pc, #200]	@ (800f530 <_tx_thread_system_suspend+0x228>)
 800f468:	6013      	str	r3, [r2, #0]
 800f46a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f46c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f470:	f383 8810 	msr	PRIMASK, r3
}
 800f474:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800f476:	4b2a      	ldr	r3, [pc, #168]	@ (800f520 <_tx_thread_system_suspend+0x218>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800f47c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d144      	bne.n	800f50c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800f482:	4b2c      	ldr	r3, [pc, #176]	@ (800f534 <_tx_thread_system_suspend+0x22c>)
 800f484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f488:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f48a:	f3ef 8305 	mrs	r3, IPSR
 800f48e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800f490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800f492:	2b00      	cmp	r3, #0
 800f494:	d10c      	bne.n	800f4b0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f496:	f3ef 8310 	mrs	r3, PRIMASK
 800f49a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800f49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800f49e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800f4a0:	b662      	cpsie	i
}
 800f4a2:	bf00      	nop
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4a6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4a8:	6a3b      	ldr	r3, [r7, #32]
 800f4aa:	f383 8810 	msr	PRIMASK, r3
}
 800f4ae:	bf00      	nop
}
 800f4b0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800f4b2:	e02b      	b.n	800f50c <_tx_thread_system_suspend+0x204>
 800f4b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f4b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	f383 8810 	msr	PRIMASK, r3
}
 800f4be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800f4c0:	4b1b      	ldr	r3, [pc, #108]	@ (800f530 <_tx_thread_system_suspend+0x228>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d022      	beq.n	800f510 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800f4ca:	4b15      	ldr	r3, [pc, #84]	@ (800f520 <_tx_thread_system_suspend+0x218>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800f4d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d11c      	bne.n	800f510 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800f4d6:	4b17      	ldr	r3, [pc, #92]	@ (800f534 <_tx_thread_system_suspend+0x22c>)
 800f4d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4dc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f4de:	f3ef 8305 	mrs	r3, IPSR
 800f4e2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f4e4:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d10c      	bne.n	800f504 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f4ea:	f3ef 8310 	mrs	r3, PRIMASK
 800f4ee:	617b      	str	r3, [r7, #20]
    return(posture);
 800f4f0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800f4f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800f4f4:	b662      	cpsie	i
}
 800f4f6:	bf00      	nop
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f383 8810 	msr	PRIMASK, r3
}
 800f502:	bf00      	nop
}
 800f504:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800f506:	e003      	b.n	800f510 <_tx_thread_system_suspend+0x208>
                return;
 800f508:	bf00      	nop
 800f50a:	e002      	b.n	800f512 <_tx_thread_system_suspend+0x20a>
            return;
 800f50c:	bf00      	nop
 800f50e:	e000      	b.n	800f512 <_tx_thread_system_suspend+0x20a>
    return;
 800f510:	bf00      	nop
}
 800f512:	3778      	adds	r7, #120	@ 0x78
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	20157ed4 	.word	0x20157ed4
 800f51c:	201584d8 	.word	0x201584d8
 800f520:	20157f6c 	.word	0x20157f6c
 800f524:	20157eec 	.word	0x20157eec
 800f528:	20157ee4 	.word	0x20157ee4
 800f52c:	20157ee8 	.word	0x20157ee8
 800f530:	20157ed8 	.word	0x20157ed8
 800f534:	e000ed04 	.word	0xe000ed04

0800f538 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800f538:	b480      	push	{r7}
 800f53a:	b087      	sub	sp, #28
 800f53c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f53e:	4b21      	ldr	r3, [pc, #132]	@ (800f5c4 <_tx_thread_time_slice+0x8c>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f544:	f3ef 8310 	mrs	r3, PRIMASK
 800f548:	60fb      	str	r3, [r7, #12]
    return(posture);
 800f54a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800f54c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f54e:	b672      	cpsid	i
    return(int_posture);
 800f550:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800f552:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800f554:	4b1c      	ldr	r3, [pc, #112]	@ (800f5c8 <_tx_thread_time_slice+0x90>)
 800f556:	2200      	movs	r2, #0
 800f558:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d024      	beq.n	800f5aa <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f564:	2b00      	cmp	r3, #0
 800f566:	d120      	bne.n	800f5aa <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	69da      	ldr	r2, [r3, #28]
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	699b      	ldr	r3, [r3, #24]
 800f574:	4a15      	ldr	r2, [pc, #84]	@ (800f5cc <_tx_thread_time_slice+0x94>)
 800f576:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	6a1b      	ldr	r3, [r3, #32]
 800f57c:	697a      	ldr	r2, [r7, #20]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d013      	beq.n	800f5aa <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d10d      	bne.n	800f5aa <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	6a12      	ldr	r2, [r2, #32]
 800f596:	490e      	ldr	r1, [pc, #56]	@ (800f5d0 <_tx_thread_time_slice+0x98>)
 800f598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800f59c:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d4 <_tx_thread_time_slice+0x9c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4a0b      	ldr	r2, [pc, #44]	@ (800f5d0 <_tx_thread_time_slice+0x98>)
 800f5a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800f5d8 <_tx_thread_time_slice+0xa0>)
 800f5a8:	6013      	str	r3, [r2, #0]
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f383 8810 	msr	PRIMASK, r3
}
 800f5b4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800f5b6:	bf00      	nop
 800f5b8:	371c      	adds	r7, #28
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	20157ed4 	.word	0x20157ed4
 800f5c8:	20157f7c 	.word	0x20157f7c
 800f5cc:	201584d8 	.word	0x201584d8
 800f5d0:	20157eec 	.word	0x20157eec
 800f5d4:	20157ee8 	.word	0x20157ee8
 800f5d8:	20157ed8 	.word	0x20157ed8

0800f5dc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08a      	sub	sp, #40	@ 0x28
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f5e8:	f3ef 8310 	mrs	r3, PRIMASK
 800f5ec:	617b      	str	r3, [r7, #20]
    return(posture);
 800f5ee:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f5f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f5f2:	b672      	cpsid	i
    return(int_posture);
 800f5f4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800f5f6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800f5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5fc:	2b04      	cmp	r3, #4
 800f5fe:	d10e      	bne.n	800f61e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800f600:	4b13      	ldr	r3, [pc, #76]	@ (800f650 <_tx_thread_timeout+0x74>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	3301      	adds	r3, #1
 800f606:	4a12      	ldr	r2, [pc, #72]	@ (800f650 <_tx_thread_timeout+0x74>)
 800f608:	6013      	str	r3, [r2, #0]
 800f60a:	6a3b      	ldr	r3, [r7, #32]
 800f60c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f383 8810 	msr	PRIMASK, r3
}
 800f614:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f616:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f618:	f7ff fd76 	bl	800f108 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800f61c:	e013      	b.n	800f646 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800f61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f622:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800f624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f62a:	61bb      	str	r3, [r7, #24]
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	f383 8810 	msr	PRIMASK, r3
}
 800f636:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d003      	beq.n	800f646 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	69b9      	ldr	r1, [r7, #24]
 800f642:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f644:	4798      	blx	r3
}
 800f646:	bf00      	nop
 800f648:	3728      	adds	r7, #40	@ 0x28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	20157f6c 	.word	0x20157f6c

0800f654 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f65a:	f3ef 8310 	mrs	r3, PRIMASK
 800f65e:	607b      	str	r3, [r7, #4]
    return(posture);
 800f660:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800f662:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f664:	b672      	cpsid	i
    return(int_posture);
 800f666:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800f668:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800f66a:	4b09      	ldr	r3, [pc, #36]	@ (800f690 <_tx_timer_expiration_process+0x3c>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	3301      	adds	r3, #1
 800f670:	4a07      	ldr	r2, [pc, #28]	@ (800f690 <_tx_timer_expiration_process+0x3c>)
 800f672:	6013      	str	r3, [r2, #0]
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	f383 8810 	msr	PRIMASK, r3
}
 800f67e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800f680:	4804      	ldr	r0, [pc, #16]	@ (800f694 <_tx_timer_expiration_process+0x40>)
 800f682:	f7ff fd41 	bl	800f108 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f686:	bf00      	nop
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	20157f6c 	.word	0x20157f6c
 800f694:	2015801c 	.word	0x2015801c

0800f698 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800f698:	b590      	push	{r4, r7, lr}
 800f69a:	b089      	sub	sp, #36	@ 0x24
 800f69c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800f69e:	4b28      	ldr	r3, [pc, #160]	@ (800f740 <_tx_timer_initialize+0xa8>)
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800f6a4:	4b27      	ldr	r3, [pc, #156]	@ (800f744 <_tx_timer_initialize+0xac>)
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800f6aa:	4b27      	ldr	r3, [pc, #156]	@ (800f748 <_tx_timer_initialize+0xb0>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800f6b0:	4b26      	ldr	r3, [pc, #152]	@ (800f74c <_tx_timer_initialize+0xb4>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800f6b6:	4b26      	ldr	r3, [pc, #152]	@ (800f750 <_tx_timer_initialize+0xb8>)
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800f6bc:	2280      	movs	r2, #128	@ 0x80
 800f6be:	2100      	movs	r1, #0
 800f6c0:	4824      	ldr	r0, [pc, #144]	@ (800f754 <_tx_timer_initialize+0xbc>)
 800f6c2:	f01c fc80 	bl	802bfc6 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800f6c6:	4b24      	ldr	r3, [pc, #144]	@ (800f758 <_tx_timer_initialize+0xc0>)
 800f6c8:	4a22      	ldr	r2, [pc, #136]	@ (800f754 <_tx_timer_initialize+0xbc>)
 800f6ca:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800f6cc:	4b23      	ldr	r3, [pc, #140]	@ (800f75c <_tx_timer_initialize+0xc4>)
 800f6ce:	4a21      	ldr	r2, [pc, #132]	@ (800f754 <_tx_timer_initialize+0xbc>)
 800f6d0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800f6d2:	4b23      	ldr	r3, [pc, #140]	@ (800f760 <_tx_timer_initialize+0xc8>)
 800f6d4:	4a23      	ldr	r2, [pc, #140]	@ (800f764 <_tx_timer_initialize+0xcc>)
 800f6d6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800f6d8:	4b21      	ldr	r3, [pc, #132]	@ (800f760 <_tx_timer_initialize+0xc8>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	3304      	adds	r3, #4
 800f6de:	4a20      	ldr	r2, [pc, #128]	@ (800f760 <_tx_timer_initialize+0xc8>)
 800f6e0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800f6e2:	4b21      	ldr	r3, [pc, #132]	@ (800f768 <_tx_timer_initialize+0xd0>)
 800f6e4:	4a21      	ldr	r2, [pc, #132]	@ (800f76c <_tx_timer_initialize+0xd4>)
 800f6e6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800f6e8:	4b21      	ldr	r3, [pc, #132]	@ (800f770 <_tx_timer_initialize+0xd8>)
 800f6ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f6ee:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800f6f0:	4b20      	ldr	r3, [pc, #128]	@ (800f774 <_tx_timer_initialize+0xdc>)
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800f6f6:	4b1c      	ldr	r3, [pc, #112]	@ (800f768 <_tx_timer_initialize+0xd0>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a1d      	ldr	r2, [pc, #116]	@ (800f770 <_tx_timer_initialize+0xd8>)
 800f6fc:	6812      	ldr	r2, [r2, #0]
 800f6fe:	491d      	ldr	r1, [pc, #116]	@ (800f774 <_tx_timer_initialize+0xdc>)
 800f700:	6809      	ldr	r1, [r1, #0]
 800f702:	481c      	ldr	r0, [pc, #112]	@ (800f774 <_tx_timer_initialize+0xdc>)
 800f704:	6800      	ldr	r0, [r0, #0]
 800f706:	2400      	movs	r4, #0
 800f708:	9405      	str	r4, [sp, #20]
 800f70a:	2400      	movs	r4, #0
 800f70c:	9404      	str	r4, [sp, #16]
 800f70e:	9003      	str	r0, [sp, #12]
 800f710:	9102      	str	r1, [sp, #8]
 800f712:	9201      	str	r2, [sp, #4]
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	4b18      	ldr	r3, [pc, #96]	@ (800f778 <_tx_timer_initialize+0xe0>)
 800f718:	4a18      	ldr	r2, [pc, #96]	@ (800f77c <_tx_timer_initialize+0xe4>)
 800f71a:	4919      	ldr	r1, [pc, #100]	@ (800f780 <_tx_timer_initialize+0xe8>)
 800f71c:	4819      	ldr	r0, [pc, #100]	@ (800f784 <_tx_timer_initialize+0xec>)
 800f71e:	f7ff fabb 	bl	800ec98 <_tx_thread_create>
 800f722:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d1e5      	bne.n	800f6f6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800f72a:	4b17      	ldr	r3, [pc, #92]	@ (800f788 <_tx_timer_initialize+0xf0>)
 800f72c:	2200      	movs	r2, #0
 800f72e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800f730:	4b16      	ldr	r3, [pc, #88]	@ (800f78c <_tx_timer_initialize+0xf4>)
 800f732:	2200      	movs	r2, #0
 800f734:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800f736:	bf00      	nop
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd90      	pop	{r4, r7, pc}
 800f73e:	bf00      	nop
 800f740:	20157f78 	.word	0x20157f78
 800f744:	201584d8 	.word	0x201584d8
 800f748:	20157f7c 	.word	0x20157f7c
 800f74c:	2015800c 	.word	0x2015800c
 800f750:	20158018 	.word	0x20158018
 800f754:	20157f80 	.word	0x20157f80
 800f758:	20158000 	.word	0x20158000
 800f75c:	20158008 	.word	0x20158008
 800f760:	20158004 	.word	0x20158004
 800f764:	20157ffc 	.word	0x20157ffc
 800f768:	201580cc 	.word	0x201580cc
 800f76c:	201580d8 	.word	0x201580d8
 800f770:	201580d0 	.word	0x201580d0
 800f774:	201580d4 	.word	0x201580d4
 800f778:	4154494d 	.word	0x4154494d
 800f77c:	0800f8c5 	.word	0x0800f8c5
 800f780:	0802cc74 	.word	0x0802cc74
 800f784:	2015801c 	.word	0x2015801c
 800f788:	20158010 	.word	0x20158010
 800f78c:	20158014 	.word	0x20158014

0800f790 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800f790:	b480      	push	{r7}
 800f792:	b089      	sub	sp, #36	@ 0x24
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d04a      	beq.n	800f83a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7aa:	d046      	beq.n	800f83a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	699b      	ldr	r3, [r3, #24]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d142      	bne.n	800f83a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	2b20      	cmp	r3, #32
 800f7b8:	d902      	bls.n	800f7c0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800f7ba:	231f      	movs	r3, #31
 800f7bc:	61bb      	str	r3, [r7, #24]
 800f7be:	e002      	b.n	800f7c6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800f7c6:	4b20      	ldr	r3, [pc, #128]	@ (800f848 <_tx_timer_system_activate+0xb8>)
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	009b      	lsls	r3, r3, #2
 800f7ce:	4413      	add	r3, r2
 800f7d0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800f7d2:	4b1e      	ldr	r3, [pc, #120]	@ (800f84c <_tx_timer_system_activate+0xbc>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	69fa      	ldr	r2, [r7, #28]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d30b      	bcc.n	800f7f4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800f7dc:	4b1b      	ldr	r3, [pc, #108]	@ (800f84c <_tx_timer_system_activate+0xbc>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	69fa      	ldr	r2, [r7, #28]
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	109b      	asrs	r3, r3, #2
 800f7e6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800f7e8:	4b19      	ldr	r3, [pc, #100]	@ (800f850 <_tx_timer_system_activate+0xc0>)
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	4413      	add	r3, r2
 800f7f2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d109      	bne.n	800f810 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	601a      	str	r2, [r3, #0]
 800f80e:	e011      	b.n	800f834 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	69fa      	ldr	r2, [r7, #28]
 800f838:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800f83a:	bf00      	nop
 800f83c:	3724      	adds	r7, #36	@ 0x24
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop
 800f848:	20158008 	.word	0x20158008
 800f84c:	20158004 	.word	0x20158004
 800f850:	20158000 	.word	0x20158000

0800f854 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800f854:	b480      	push	{r7}
 800f856:	b087      	sub	sp, #28
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	699b      	ldr	r3, [r3, #24]
 800f860:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d026      	beq.n	800f8b6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	691b      	ldr	r3, [r3, #16]
 800f86c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	429a      	cmp	r2, r3
 800f874:	d108      	bne.n	800f888 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d117      	bne.n	800f8b0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	2200      	movs	r2, #0
 800f884:	601a      	str	r2, [r3, #0]
 800f886:	e013      	b.n	800f8b0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	695b      	ldr	r3, [r3, #20]
 800f88c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	693a      	ldr	r2, [r7, #16]
 800f898:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d105      	bne.n	800f8b0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	693a      	ldr	r2, [r7, #16]
 800f8ae:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	619a      	str	r2, [r3, #24]
    }
}
 800f8b6:	bf00      	nop
 800f8b8:	371c      	adds	r7, #28
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr
	...

0800f8c4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b098      	sub	sp, #96	@ 0x60
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a73      	ldr	r2, [pc, #460]	@ (800faa0 <_tx_timer_thread_entry+0x1dc>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	f040 80de 	bne.w	800fa96 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f8da:	f3ef 8310 	mrs	r3, PRIMASK
 800f8de:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800f8e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800f8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800f8e4:	b672      	cpsid	i
    return(int_posture);
 800f8e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800f8e8:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800f8ea:	4b6e      	ldr	r3, [pc, #440]	@ (800faa4 <_tx_timer_thread_entry+0x1e0>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d003      	beq.n	800f900 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f107 020c 	add.w	r2, r7, #12
 800f8fe:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800f900:	4b68      	ldr	r3, [pc, #416]	@ (800faa4 <_tx_timer_thread_entry+0x1e0>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2200      	movs	r2, #0
 800f906:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800f908:	4b66      	ldr	r3, [pc, #408]	@ (800faa4 <_tx_timer_thread_entry+0x1e0>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3304      	adds	r3, #4
 800f90e:	4a65      	ldr	r2, [pc, #404]	@ (800faa4 <_tx_timer_thread_entry+0x1e0>)
 800f910:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800f912:	4b64      	ldr	r3, [pc, #400]	@ (800faa4 <_tx_timer_thread_entry+0x1e0>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	4b64      	ldr	r3, [pc, #400]	@ (800faa8 <_tx_timer_thread_entry+0x1e4>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d103      	bne.n	800f926 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800f91e:	4b63      	ldr	r3, [pc, #396]	@ (800faac <_tx_timer_thread_entry+0x1e8>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	4a60      	ldr	r2, [pc, #384]	@ (800faa4 <_tx_timer_thread_entry+0x1e0>)
 800f924:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800f926:	4b62      	ldr	r3, [pc, #392]	@ (800fab0 <_tx_timer_thread_entry+0x1ec>)
 800f928:	2200      	movs	r2, #0
 800f92a:	601a      	str	r2, [r3, #0]
 800f92c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f92e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f932:	f383 8810 	msr	PRIMASK, r3
}
 800f936:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f938:	f3ef 8310 	mrs	r3, PRIMASK
 800f93c:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800f93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800f940:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800f942:	b672      	cpsid	i
    return(int_posture);
 800f944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800f946:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800f948:	e07f      	b.n	800fa4a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	691b      	ldr	r3, [r3, #16]
 800f952:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800f954:	2300      	movs	r3, #0
 800f956:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800f958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f95a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d102      	bne.n	800f966 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800f960:	2300      	movs	r3, #0
 800f962:	60fb      	str	r3, [r7, #12]
 800f964:	e00e      	b.n	800f984 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800f966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f968:	695b      	ldr	r3, [r3, #20]
 800f96a:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800f96c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f96e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f970:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800f972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f976:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800f978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f97a:	f107 020c 	add.w	r2, r7, #12
 800f97e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800f980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f982:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800f984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2b20      	cmp	r3, #32
 800f98a:	d911      	bls.n	800f9b0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800f98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800f994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f996:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800f998:	2300      	movs	r3, #0
 800f99a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800f99c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f99e:	f107 0208 	add.w	r2, r7, #8
 800f9a2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800f9a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f9a8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800f9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ac:	60bb      	str	r3, [r7, #8]
 800f9ae:	e01a      	b.n	800f9e6 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800f9b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800f9b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800f9bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9be:	685a      	ldr	r2, [r3, #4]
 800f9c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9c2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800f9c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d009      	beq.n	800f9e0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800f9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ce:	f107 0208 	add.w	r2, r7, #8
 800f9d2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800f9d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f9d8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800f9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9dc:	60bb      	str	r3, [r7, #8]
 800f9de:	e002      	b.n	800f9e6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800f9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800f9e6:	4a33      	ldr	r2, [pc, #204]	@ (800fab4 <_tx_timer_thread_entry+0x1f0>)
 800f9e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ea:	6013      	str	r3, [r2, #0]
 800f9ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f2:	f383 8810 	msr	PRIMASK, r3
}
 800f9f6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800f9f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d002      	beq.n	800fa04 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800f9fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa00:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800fa02:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa04:	f3ef 8310 	mrs	r3, PRIMASK
 800fa08:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800fa0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800fa0c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa0e:	b672      	cpsid	i
    return(int_posture);
 800fa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800fa12:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800fa14:	4b27      	ldr	r3, [pc, #156]	@ (800fab4 <_tx_timer_thread_entry+0x1f0>)
 800fa16:	2200      	movs	r2, #0
 800fa18:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d105      	bne.n	800fa2e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800fa22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa24:	2200      	movs	r2, #0
 800fa26:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800fa28:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fa2a:	f7ff feb1 	bl	800f790 <_tx_timer_system_activate>
 800fa2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa30:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	f383 8810 	msr	PRIMASK, r3
}
 800fa38:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa3a:	f3ef 8310 	mrs	r3, PRIMASK
 800fa3e:	623b      	str	r3, [r7, #32]
    return(posture);
 800fa40:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fa42:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa44:	b672      	cpsid	i
    return(int_posture);
 800fa46:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800fa48:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f47f af7c 	bne.w	800f94a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800fa52:	4b17      	ldr	r3, [pc, #92]	@ (800fab0 <_tx_timer_thread_entry+0x1ec>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d116      	bne.n	800fa88 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800fa5a:	4b17      	ldr	r3, [pc, #92]	@ (800fab8 <_tx_timer_thread_entry+0x1f4>)
 800fa5c:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800fa5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa60:	2203      	movs	r2, #3
 800fa62:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fa64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa66:	2201      	movs	r2, #1
 800fa68:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800fa6a:	4b14      	ldr	r3, [pc, #80]	@ (800fabc <_tx_timer_thread_entry+0x1f8>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	4a12      	ldr	r2, [pc, #72]	@ (800fabc <_tx_timer_thread_entry+0x1f8>)
 800fa72:	6013      	str	r3, [r2, #0]
 800fa74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa76:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	f383 8810 	msr	PRIMASK, r3
}
 800fa7e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800fa80:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800fa82:	f7ff fc41 	bl	800f308 <_tx_thread_system_suspend>
 800fa86:	e728      	b.n	800f8da <_tx_timer_thread_entry+0x16>
 800fa88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	f383 8810 	msr	PRIMASK, r3
}
 800fa92:	bf00      	nop
            TX_DISABLE
 800fa94:	e721      	b.n	800f8da <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800fa96:	bf00      	nop
 800fa98:	3760      	adds	r7, #96	@ 0x60
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	4154494d 	.word	0x4154494d
 800faa4:	20158008 	.word	0x20158008
 800faa8:	20158004 	.word	0x20158004
 800faac:	20158000 	.word	0x20158000
 800fab0:	2015800c 	.word	0x2015800c
 800fab4:	20158018 	.word	0x20158018
 800fab8:	2015801c 	.word	0x2015801c
 800fabc:	20157f6c 	.word	0x20157f6c

0800fac0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b08a      	sub	sp, #40	@ 0x28
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800face:	2300      	movs	r3, #0
 800fad0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d102      	bne.n	800fade <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800fad8:	2302      	movs	r3, #2
 800fada:	627b      	str	r3, [r7, #36]	@ 0x24
 800fadc:	e029      	b.n	800fb32 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	4a2d      	ldr	r2, [pc, #180]	@ (800fb98 <_txe_byte_allocate+0xd8>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d002      	beq.n	800faee <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800fae8:	2302      	movs	r3, #2
 800faea:	627b      	str	r3, [r7, #36]	@ 0x24
 800faec:	e021      	b.n	800fb32 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d102      	bne.n	800fafa <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800faf4:	2303      	movs	r3, #3
 800faf6:	627b      	str	r3, [r7, #36]	@ 0x24
 800faf8:	e01b      	b.n	800fb32 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d102      	bne.n	800fb06 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800fb00:	2305      	movs	r3, #5
 800fb02:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb04:	e015      	b.n	800fb32 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	69db      	ldr	r3, [r3, #28]
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d902      	bls.n	800fb16 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800fb10:	2305      	movs	r3, #5
 800fb12:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb14:	e00d      	b.n	800fb32 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00a      	beq.n	800fb32 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fb1c:	f3ef 8305 	mrs	r3, IPSR
 800fb20:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800fb22:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800fb24:	4b1d      	ldr	r3, [pc, #116]	@ (800fb9c <_txe_byte_allocate+0xdc>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d001      	beq.n	800fb32 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800fb2e:	2304      	movs	r3, #4
 800fb30:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800fb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d108      	bne.n	800fb4a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800fb38:	4b19      	ldr	r3, [pc, #100]	@ (800fba0 <_txe_byte_allocate+0xe0>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800fb3e:	6a3b      	ldr	r3, [r7, #32]
 800fb40:	4a18      	ldr	r2, [pc, #96]	@ (800fba4 <_txe_byte_allocate+0xe4>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d101      	bne.n	800fb4a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800fb46:	2313      	movs	r3, #19
 800fb48:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800fb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d114      	bne.n	800fb7a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fb50:	f3ef 8305 	mrs	r3, IPSR
 800fb54:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800fb56:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800fb58:	4b10      	ldr	r3, [pc, #64]	@ (800fb9c <_txe_byte_allocate+0xdc>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00b      	beq.n	800fb7a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fb62:	f3ef 8305 	mrs	r3, IPSR
 800fb66:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800fb68:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800fb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fb9c <_txe_byte_allocate+0xdc>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800fb74:	d201      	bcs.n	800fb7a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800fb76:	2313      	movs	r3, #19
 800fb78:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800fb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d106      	bne.n	800fb8e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	68b9      	ldr	r1, [r7, #8]
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f7fd ff8e 	bl	800daa8 <_tx_byte_allocate>
 800fb8c:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800fb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3728      	adds	r7, #40	@ 0x28
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	42595445 	.word	0x42595445
 800fb9c:	20000010 	.word	0x20000010
 800fba0:	20157ed4 	.word	0x20157ed4
 800fba4:	2015801c 	.word	0x2015801c

0800fba8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b092      	sub	sp, #72	@ 0x48
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
 800fbb4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d102      	bne.n	800fbc6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800fbc0:	2302      	movs	r3, #2
 800fbc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbc4:	e075      	b.n	800fcb2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800fbc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbc8:	2b34      	cmp	r3, #52	@ 0x34
 800fbca:	d002      	beq.n	800fbd2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800fbcc:	2302      	movs	r3, #2
 800fbce:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbd0:	e06f      	b.n	800fcb2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fbd2:	f3ef 8310 	mrs	r3, PRIMASK
 800fbd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800fbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800fbda:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800fbdc:	b672      	cpsid	i
    return(int_posture);
 800fbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800fbe0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800fbe2:	4b3b      	ldr	r3, [pc, #236]	@ (800fcd0 <_txe_byte_pool_create+0x128>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	4a39      	ldr	r2, [pc, #228]	@ (800fcd0 <_txe_byte_pool_create+0x128>)
 800fbea:	6013      	str	r3, [r2, #0]
 800fbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbee:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbf2:	f383 8810 	msr	PRIMASK, r3
}
 800fbf6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800fbf8:	4b36      	ldr	r3, [pc, #216]	@ (800fcd4 <_txe_byte_pool_create+0x12c>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800fbfe:	2300      	movs	r3, #0
 800fc00:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc02:	e009      	b.n	800fc18 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d00b      	beq.n	800fc24 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800fc0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800fc12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc14:	3301      	adds	r3, #1
 800fc16:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc18:	4b2f      	ldr	r3, [pc, #188]	@ (800fcd8 <_txe_byte_pool_create+0x130>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d3f0      	bcc.n	800fc04 <_txe_byte_pool_create+0x5c>
 800fc22:	e000      	b.n	800fc26 <_txe_byte_pool_create+0x7e>
                break;
 800fc24:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc26:	f3ef 8310 	mrs	r3, PRIMASK
 800fc2a:	623b      	str	r3, [r7, #32]
    return(posture);
 800fc2c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fc2e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc30:	b672      	cpsid	i
    return(int_posture);
 800fc32:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800fc34:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800fc36:	4b26      	ldr	r3, [pc, #152]	@ (800fcd0 <_txe_byte_pool_create+0x128>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	3b01      	subs	r3, #1
 800fc3c:	4a24      	ldr	r2, [pc, #144]	@ (800fcd0 <_txe_byte_pool_create+0x128>)
 800fc3e:	6013      	str	r3, [r2, #0]
 800fc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc42:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc46:	f383 8810 	msr	PRIMASK, r3
}
 800fc4a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800fc4c:	f7ff fa22 	bl	800f094 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d102      	bne.n	800fc5e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800fc58:	2302      	movs	r3, #2
 800fc5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc5c:	e029      	b.n	800fcb2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800fc64:	2303      	movs	r3, #3
 800fc66:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc68:	e023      	b.n	800fcb2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	2b63      	cmp	r3, #99	@ 0x63
 800fc6e:	d802      	bhi.n	800fc76 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800fc70:	2305      	movs	r3, #5
 800fc72:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc74:	e01d      	b.n	800fcb2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800fc76:	4b19      	ldr	r3, [pc, #100]	@ (800fcdc <_txe_byte_pool_create+0x134>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800fc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc7e:	4a18      	ldr	r2, [pc, #96]	@ (800fce0 <_txe_byte_pool_create+0x138>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d101      	bne.n	800fc88 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800fc84:	2313      	movs	r3, #19
 800fc86:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fc88:	f3ef 8305 	mrs	r3, IPSR
 800fc8c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800fc8e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800fc90:	4b14      	ldr	r3, [pc, #80]	@ (800fce4 <_txe_byte_pool_create+0x13c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4313      	orrs	r3, r2
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d00b      	beq.n	800fcb2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fc9a:	f3ef 8305 	mrs	r3, IPSR
 800fc9e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800fca0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800fca2:	4b10      	ldr	r3, [pc, #64]	@ (800fce4 <_txe_byte_pool_create+0x13c>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	4313      	orrs	r3, r2
 800fca8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800fcac:	d201      	bcs.n	800fcb2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800fcae:	2313      	movs	r3, #19
 800fcb0:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800fcb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d106      	bne.n	800fcc6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	68b9      	ldr	r1, [r7, #8]
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	f7fe f834 	bl	800dd2c <_tx_byte_pool_create>
 800fcc4:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800fcc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3748      	adds	r7, #72	@ 0x48
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	20157f6c 	.word	0x20157f6c
 800fcd4:	20157ec4 	.word	0x20157ec4
 800fcd8:	20157ec8 	.word	0x20157ec8
 800fcdc:	20157ed4 	.word	0x20157ed4
 800fce0:	2015801c 	.word	0x2015801c
 800fce4:	20000010 	.word	0x20000010

0800fce8 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b094      	sub	sp, #80	@ 0x50
 800fcec:	af02      	add	r7, sp, #8
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
 800fcf4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d102      	bne.n	800fd06 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800fd00:	2309      	movs	r3, #9
 800fd02:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd04:	e083      	b.n	800fe0e <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800fd06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd08:	2b38      	cmp	r3, #56	@ 0x38
 800fd0a:	d002      	beq.n	800fd12 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800fd0c:	2309      	movs	r3, #9
 800fd0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd10:	e07d      	b.n	800fe0e <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fd12:	f3ef 8310 	mrs	r3, PRIMASK
 800fd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800fd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800fd1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800fd1c:	b672      	cpsid	i
    return(int_posture);
 800fd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800fd20:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800fd22:	4b43      	ldr	r3, [pc, #268]	@ (800fe30 <_txe_queue_create+0x148>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	3301      	adds	r3, #1
 800fd28:	4a41      	ldr	r2, [pc, #260]	@ (800fe30 <_txe_queue_create+0x148>)
 800fd2a:	6013      	str	r3, [r2, #0]
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd32:	f383 8810 	msr	PRIMASK, r3
}
 800fd36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800fd38:	4b3e      	ldr	r3, [pc, #248]	@ (800fe34 <_txe_queue_create+0x14c>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800fd3e:	2300      	movs	r3, #0
 800fd40:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd42:	e009      	b.n	800fd58 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d00b      	beq.n	800fd64 <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800fd52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd54:	3301      	adds	r3, #1
 800fd56:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd58:	4b37      	ldr	r3, [pc, #220]	@ (800fe38 <_txe_queue_create+0x150>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d3f0      	bcc.n	800fd44 <_txe_queue_create+0x5c>
 800fd62:	e000      	b.n	800fd66 <_txe_queue_create+0x7e>
                break;
 800fd64:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fd66:	f3ef 8310 	mrs	r3, PRIMASK
 800fd6a:	623b      	str	r3, [r7, #32]
    return(posture);
 800fd6c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fd6e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fd70:	b672      	cpsid	i
    return(int_posture);
 800fd72:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800fd74:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800fd76:	4b2e      	ldr	r3, [pc, #184]	@ (800fe30 <_txe_queue_create+0x148>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	4a2c      	ldr	r2, [pc, #176]	@ (800fe30 <_txe_queue_create+0x148>)
 800fd7e:	6013      	str	r3, [r2, #0]
 800fd80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd82:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd86:	f383 8810 	msr	PRIMASK, r3
}
 800fd8a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800fd8c:	f7ff f982 	bl	800f094 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800fd90:	68fa      	ldr	r2, [r7, #12]
 800fd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d102      	bne.n	800fd9e <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800fd98:	2309      	movs	r3, #9
 800fd9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd9c:	e037      	b.n	800fe0e <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d102      	bne.n	800fdaa <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800fda4:	2303      	movs	r3, #3
 800fda6:	647b      	str	r3, [r7, #68]	@ 0x44
 800fda8:	e031      	b.n	800fe0e <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d102      	bne.n	800fdb6 <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800fdb0:	2305      	movs	r3, #5
 800fdb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800fdb4:	e02b      	b.n	800fe0e <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2b10      	cmp	r3, #16
 800fdba:	d902      	bls.n	800fdc2 <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800fdbc:	2305      	movs	r3, #5
 800fdbe:	647b      	str	r3, [r7, #68]	@ 0x44
 800fdc0:	e025      	b.n	800fe0e <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800fdc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fdc4:	089b      	lsrs	r3, r3, #2
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d902      	bls.n	800fdd2 <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800fdcc:	2305      	movs	r3, #5
 800fdce:	647b      	str	r3, [r7, #68]	@ 0x44
 800fdd0:	e01d      	b.n	800fe0e <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800fdd2:	4b1a      	ldr	r3, [pc, #104]	@ (800fe3c <_txe_queue_create+0x154>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800fdd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdda:	4a19      	ldr	r2, [pc, #100]	@ (800fe40 <_txe_queue_create+0x158>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d101      	bne.n	800fde4 <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800fde0:	2313      	movs	r3, #19
 800fde2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fde4:	f3ef 8305 	mrs	r3, IPSR
 800fde8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800fdea:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800fdec:	4b15      	ldr	r3, [pc, #84]	@ (800fe44 <_txe_queue_create+0x15c>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4313      	orrs	r3, r2
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d00b      	beq.n	800fe0e <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fdf6:	f3ef 8305 	mrs	r3, IPSR
 800fdfa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800fdfc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800fdfe:	4b11      	ldr	r3, [pc, #68]	@ (800fe44 <_txe_queue_create+0x15c>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800fe08:	d201      	bcs.n	800fe0e <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800fe0a:	2313      	movs	r3, #19
 800fe0c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800fe0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d108      	bne.n	800fe26 <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800fe14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	687a      	ldr	r2, [r7, #4]
 800fe1c:	68b9      	ldr	r1, [r7, #8]
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7fe fa1a 	bl	800e258 <_tx_queue_create>
 800fe24:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800fe26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3748      	adds	r7, #72	@ 0x48
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	20157f6c 	.word	0x20157f6c
 800fe34:	20157ea4 	.word	0x20157ea4
 800fe38:	20157ea8 	.word	0x20157ea8
 800fe3c:	20157ed4 	.word	0x20157ed4
 800fe40:	2015801c 	.word	0x2015801c
 800fe44:	20000010 	.word	0x20000010

0800fe48 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b088      	sub	sp, #32
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800fe54:	2300      	movs	r3, #0
 800fe56:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d102      	bne.n	800fe64 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800fe5e:	2309      	movs	r3, #9
 800fe60:	61fb      	str	r3, [r7, #28]
 800fe62:	e025      	b.n	800feb0 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4a18      	ldr	r2, [pc, #96]	@ (800fecc <_txe_queue_receive+0x84>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d002      	beq.n	800fe74 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800fe6e:	2309      	movs	r3, #9
 800fe70:	61fb      	str	r3, [r7, #28]
 800fe72:	e01d      	b.n	800feb0 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d102      	bne.n	800fe80 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800fe7a:	2303      	movs	r3, #3
 800fe7c:	61fb      	str	r3, [r7, #28]
 800fe7e:	e017      	b.n	800feb0 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d014      	beq.n	800feb0 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fe86:	f3ef 8305 	mrs	r3, IPSR
 800fe8a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800fe8c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800fe8e:	4b10      	ldr	r3, [pc, #64]	@ (800fed0 <_txe_queue_receive+0x88>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4313      	orrs	r3, r2
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d002      	beq.n	800fe9e <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800fe98:	2304      	movs	r3, #4
 800fe9a:	61fb      	str	r3, [r7, #28]
 800fe9c:	e008      	b.n	800feb0 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800fe9e:	4b0d      	ldr	r3, [pc, #52]	@ (800fed4 <_txe_queue_receive+0x8c>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800fea4:	69bb      	ldr	r3, [r7, #24]
 800fea6:	4a0c      	ldr	r2, [pc, #48]	@ (800fed8 <_txe_queue_receive+0x90>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d101      	bne.n	800feb0 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800feac:	2304      	movs	r3, #4
 800feae:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d105      	bne.n	800fec2 <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	68b9      	ldr	r1, [r7, #8]
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f7fe fa40 	bl	800e340 <_tx_queue_receive>
 800fec0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800fec2:	69fb      	ldr	r3, [r7, #28]
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3720      	adds	r7, #32
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	51554555 	.word	0x51554555
 800fed0:	20000010 	.word	0x20000010
 800fed4:	20157ed4 	.word	0x20157ed4
 800fed8:	2015801c 	.word	0x2015801c

0800fedc <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b088      	sub	sp, #32
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800fee8:	2300      	movs	r3, #0
 800feea:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d102      	bne.n	800fef8 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800fef2:	2309      	movs	r3, #9
 800fef4:	61fb      	str	r3, [r7, #28]
 800fef6:	e025      	b.n	800ff44 <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4a18      	ldr	r2, [pc, #96]	@ (800ff60 <_txe_queue_send+0x84>)
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d002      	beq.n	800ff08 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ff02:	2309      	movs	r3, #9
 800ff04:	61fb      	str	r3, [r7, #28]
 800ff06:	e01d      	b.n	800ff44 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d102      	bne.n	800ff14 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ff0e:	2303      	movs	r3, #3
 800ff10:	61fb      	str	r3, [r7, #28]
 800ff12:	e017      	b.n	800ff44 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d014      	beq.n	800ff44 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ff1a:	f3ef 8305 	mrs	r3, IPSR
 800ff1e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ff20:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ff22:	4b10      	ldr	r3, [pc, #64]	@ (800ff64 <_txe_queue_send+0x88>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ff2c:	2304      	movs	r3, #4
 800ff2e:	61fb      	str	r3, [r7, #28]
 800ff30:	e008      	b.n	800ff44 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ff32:	4b0d      	ldr	r3, [pc, #52]	@ (800ff68 <_txe_queue_send+0x8c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ff38:	69bb      	ldr	r3, [r7, #24]
 800ff3a:	4a0c      	ldr	r2, [pc, #48]	@ (800ff6c <_txe_queue_send+0x90>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d101      	bne.n	800ff44 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ff40:	2304      	movs	r3, #4
 800ff42:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d105      	bne.n	800ff56 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800ff4a:	687a      	ldr	r2, [r7, #4]
 800ff4c:	68b9      	ldr	r1, [r7, #8]
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f7fe fbbe 	bl	800e6d0 <_tx_queue_send>
 800ff54:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800ff56:	69fb      	ldr	r3, [r7, #28]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3720      	adds	r7, #32
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	51554555 	.word	0x51554555
 800ff64:	20000010 	.word	0x20000010
 800ff68:	20157ed4 	.word	0x20157ed4
 800ff6c:	2015801c 	.word	0x2015801c

0800ff70 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b092      	sub	sp, #72	@ 0x48
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
 800ff7c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d102      	bne.n	800ff8e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ff88:	230c      	movs	r3, #12
 800ff8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff8c:	e054      	b.n	8010038 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	2b1c      	cmp	r3, #28
 800ff92:	d002      	beq.n	800ff9a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ff94:	230c      	movs	r3, #12
 800ff96:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff98:	e04e      	b.n	8010038 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ff9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800ffa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800ffa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ffa4:	b672      	cpsid	i
    return(int_posture);
 800ffa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ffa8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ffaa:	4b36      	ldr	r3, [pc, #216]	@ (8010084 <_txe_semaphore_create+0x114>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	4a34      	ldr	r2, [pc, #208]	@ (8010084 <_txe_semaphore_create+0x114>)
 800ffb2:	6013      	str	r3, [r2, #0]
 800ffb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb6:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ffb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffba:	f383 8810 	msr	PRIMASK, r3
}
 800ffbe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800ffc0:	4b31      	ldr	r3, [pc, #196]	@ (8010088 <_txe_semaphore_create+0x118>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ffca:	e009      	b.n	800ffe0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d00b      	beq.n	800ffec <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800ffd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffd6:	695b      	ldr	r3, [r3, #20]
 800ffd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800ffda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffdc:	3301      	adds	r3, #1
 800ffde:	643b      	str	r3, [r7, #64]	@ 0x40
 800ffe0:	4b2a      	ldr	r3, [pc, #168]	@ (801008c <_txe_semaphore_create+0x11c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d3f0      	bcc.n	800ffcc <_txe_semaphore_create+0x5c>
 800ffea:	e000      	b.n	800ffee <_txe_semaphore_create+0x7e>
                break;
 800ffec:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ffee:	f3ef 8310 	mrs	r3, PRIMASK
 800fff2:	623b      	str	r3, [r7, #32]
    return(posture);
 800fff4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fff6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fff8:	b672      	cpsid	i
    return(int_posture);
 800fffa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800fffc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800fffe:	4b21      	ldr	r3, [pc, #132]	@ (8010084 <_txe_semaphore_create+0x114>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3b01      	subs	r3, #1
 8010004:	4a1f      	ldr	r2, [pc, #124]	@ (8010084 <_txe_semaphore_create+0x114>)
 8010006:	6013      	str	r3, [r2, #0]
 8010008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801000a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801000c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000e:	f383 8810 	msr	PRIMASK, r3
}
 8010012:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8010014:	f7ff f83e 	bl	800f094 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8010018:	68fa      	ldr	r2, [r7, #12]
 801001a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801001c:	429a      	cmp	r2, r3
 801001e:	d102      	bne.n	8010026 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8010020:	230c      	movs	r3, #12
 8010022:	647b      	str	r3, [r7, #68]	@ 0x44
 8010024:	e008      	b.n	8010038 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8010026:	4b1a      	ldr	r3, [pc, #104]	@ (8010090 <_txe_semaphore_create+0x120>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 801002c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801002e:	4a19      	ldr	r2, [pc, #100]	@ (8010094 <_txe_semaphore_create+0x124>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d101      	bne.n	8010038 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8010034:	2313      	movs	r3, #19
 8010036:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8010038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801003a:	2b00      	cmp	r3, #0
 801003c:	d114      	bne.n	8010068 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801003e:	f3ef 8305 	mrs	r3, IPSR
 8010042:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010044:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8010046:	4b14      	ldr	r3, [pc, #80]	@ (8010098 <_txe_semaphore_create+0x128>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4313      	orrs	r3, r2
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00b      	beq.n	8010068 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010050:	f3ef 8305 	mrs	r3, IPSR
 8010054:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010056:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8010058:	4b0f      	ldr	r3, [pc, #60]	@ (8010098 <_txe_semaphore_create+0x128>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4313      	orrs	r3, r2
 801005e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8010062:	d201      	bcs.n	8010068 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8010064:	2313      	movs	r3, #19
 8010066:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8010068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801006a:	2b00      	cmp	r3, #0
 801006c:	d105      	bne.n	801007a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	68b9      	ldr	r1, [r7, #8]
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f7fe fcd4 	bl	800ea20 <_tx_semaphore_create>
 8010078:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 801007a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 801007c:	4618      	mov	r0, r3
 801007e:	3748      	adds	r7, #72	@ 0x48
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	20157f6c 	.word	0x20157f6c
 8010088:	20157e9c 	.word	0x20157e9c
 801008c:	20157ea0 	.word	0x20157ea0
 8010090:	20157ed4 	.word	0x20157ed4
 8010094:	2015801c 	.word	0x2015801c
 8010098:	20000010 	.word	0x20000010

0801009c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b086      	sub	sp, #24
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80100a6:	2300      	movs	r3, #0
 80100a8:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d102      	bne.n	80100b6 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80100b0:	230c      	movs	r3, #12
 80100b2:	617b      	str	r3, [r7, #20]
 80100b4:	e01f      	b.n	80100f6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4a15      	ldr	r2, [pc, #84]	@ (8010110 <_txe_semaphore_get+0x74>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d002      	beq.n	80100c6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80100c0:	230c      	movs	r3, #12
 80100c2:	617b      	str	r3, [r7, #20]
 80100c4:	e017      	b.n	80100f6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d014      	beq.n	80100f6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80100cc:	f3ef 8305 	mrs	r3, IPSR
 80100d0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80100d2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80100d4:	4b0f      	ldr	r3, [pc, #60]	@ (8010114 <_txe_semaphore_get+0x78>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4313      	orrs	r3, r2
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d002      	beq.n	80100e4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80100de:	2304      	movs	r3, #4
 80100e0:	617b      	str	r3, [r7, #20]
 80100e2:	e008      	b.n	80100f6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80100e4:	4b0c      	ldr	r3, [pc, #48]	@ (8010118 <_txe_semaphore_get+0x7c>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	4a0b      	ldr	r2, [pc, #44]	@ (801011c <_txe_semaphore_get+0x80>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d101      	bne.n	80100f6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80100f2:	2304      	movs	r3, #4
 80100f4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d104      	bne.n	8010106 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 80100fc:	6839      	ldr	r1, [r7, #0]
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f7fe fce0 	bl	800eac4 <_tx_semaphore_get>
 8010104:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8010106:	697b      	ldr	r3, [r7, #20]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3718      	adds	r7, #24
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	53454d41 	.word	0x53454d41
 8010114:	20000010 	.word	0x20000010
 8010118:	20157ed4 	.word	0x20157ed4
 801011c:	2015801c 	.word	0x2015801c

08010120 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d102      	bne.n	8010134 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801012e:	230c      	movs	r3, #12
 8010130:	60fb      	str	r3, [r7, #12]
 8010132:	e00b      	b.n	801014c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4a07      	ldr	r2, [pc, #28]	@ (8010158 <_txe_semaphore_put+0x38>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d002      	beq.n	8010144 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801013e:	230c      	movs	r3, #12
 8010140:	60fb      	str	r3, [r7, #12]
 8010142:	e003      	b.n	801014c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7fe fd4f 	bl	800ebe8 <_tx_semaphore_put>
 801014a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801014c:	68fb      	ldr	r3, [r7, #12]
}
 801014e:	4618      	mov	r0, r3
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	53454d41 	.word	0x53454d41

0801015c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b09a      	sub	sp, #104	@ 0x68
 8010160:	af06      	add	r7, sp, #24
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
 8010168:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801016a:	2300      	movs	r3, #0
 801016c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d102      	bne.n	801017a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8010174:	230e      	movs	r3, #14
 8010176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010178:	e0bb      	b.n	80102f2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801017a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801017c:	2bb0      	cmp	r3, #176	@ 0xb0
 801017e:	d002      	beq.n	8010186 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8010180:	230e      	movs	r3, #14
 8010182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010184:	e0b5      	b.n	80102f2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010186:	f3ef 8310 	mrs	r3, PRIMASK
 801018a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 801018c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 801018e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8010190:	b672      	cpsid	i
    return(int_posture);
 8010192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8010194:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8010196:	4b64      	ldr	r3, [pc, #400]	@ (8010328 <_txe_thread_create+0x1cc>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	3301      	adds	r3, #1
 801019c:	4a62      	ldr	r2, [pc, #392]	@ (8010328 <_txe_thread_create+0x1cc>)
 801019e:	6013      	str	r3, [r2, #0]
 80101a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80101a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101a6:	f383 8810 	msr	PRIMASK, r3
}
 80101aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80101ac:	2300      	movs	r3, #0
 80101ae:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 80101b0:	4b5e      	ldr	r3, [pc, #376]	@ (801032c <_txe_thread_create+0x1d0>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80101b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80101b8:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80101ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101bc:	3b01      	subs	r3, #1
 80101be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101c0:	4413      	add	r3, r2
 80101c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80101c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80101c8:	2300      	movs	r3, #0
 80101ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80101cc:	e02b      	b.n	8010226 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d101      	bne.n	80101da <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80101d6:	2301      	movs	r3, #1
 80101d8:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80101da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d028      	beq.n	8010232 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80101e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d308      	bcc.n	80101fc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80101ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101ec:	691b      	ldr	r3, [r3, #16]
 80101ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d203      	bcs.n	80101fc <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80101f4:	2300      	movs	r3, #0
 80101f6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80101f8:	2301      	movs	r3, #1
 80101fa:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80101fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010202:	429a      	cmp	r2, r3
 8010204:	d308      	bcc.n	8010218 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8010206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010208:	691b      	ldr	r3, [r3, #16]
 801020a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801020c:	429a      	cmp	r2, r3
 801020e:	d203      	bcs.n	8010218 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8010210:	2300      	movs	r3, #0
 8010212:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8010214:	2301      	movs	r3, #1
 8010216:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8010218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801021a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801021e:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8010220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010222:	3301      	adds	r3, #1
 8010224:	647b      	str	r3, [r7, #68]	@ 0x44
 8010226:	4b42      	ldr	r3, [pc, #264]	@ (8010330 <_txe_thread_create+0x1d4>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801022c:	429a      	cmp	r2, r3
 801022e:	d3ce      	bcc.n	80101ce <_txe_thread_create+0x72>
 8010230:	e000      	b.n	8010234 <_txe_thread_create+0xd8>
                break;
 8010232:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010234:	f3ef 8310 	mrs	r3, PRIMASK
 8010238:	61fb      	str	r3, [r7, #28]
    return(posture);
 801023a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801023c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801023e:	b672      	cpsid	i
    return(int_posture);
 8010240:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8010242:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8010244:	4b38      	ldr	r3, [pc, #224]	@ (8010328 <_txe_thread_create+0x1cc>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	3b01      	subs	r3, #1
 801024a:	4a37      	ldr	r2, [pc, #220]	@ (8010328 <_txe_thread_create+0x1cc>)
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010250:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	f383 8810 	msr	PRIMASK, r3
}
 8010258:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801025a:	f7fe ff1b 	bl	800f094 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010262:	429a      	cmp	r2, r3
 8010264:	d102      	bne.n	801026c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8010266:	230e      	movs	r3, #14
 8010268:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801026a:	e042      	b.n	80102f2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 801026c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801026e:	2b00      	cmp	r3, #0
 8010270:	d102      	bne.n	8010278 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8010272:	2303      	movs	r3, #3
 8010274:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010276:	e03c      	b.n	80102f2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d102      	bne.n	8010284 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801027e:	2303      	movs	r3, #3
 8010280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010282:	e036      	b.n	80102f2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8010284:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010286:	2bc7      	cmp	r3, #199	@ 0xc7
 8010288:	d802      	bhi.n	8010290 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 801028a:	2305      	movs	r3, #5
 801028c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801028e:	e030      	b.n	80102f2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8010290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010292:	2b1f      	cmp	r3, #31
 8010294:	d902      	bls.n	801029c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8010296:	230f      	movs	r3, #15
 8010298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801029a:	e02a      	b.n	80102f2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 801029c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801029e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d902      	bls.n	80102aa <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80102a4:	2318      	movs	r3, #24
 80102a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102a8:	e023      	b.n	80102f2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80102aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d902      	bls.n	80102b6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80102b0:	2310      	movs	r3, #16
 80102b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102b4:	e01d      	b.n	80102f2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80102b6:	4b1f      	ldr	r3, [pc, #124]	@ (8010334 <_txe_thread_create+0x1d8>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80102bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102be:	4a1e      	ldr	r2, [pc, #120]	@ (8010338 <_txe_thread_create+0x1dc>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d101      	bne.n	80102c8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80102c4:	2313      	movs	r3, #19
 80102c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80102c8:	f3ef 8305 	mrs	r3, IPSR
 80102cc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80102ce:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80102d0:	4b1a      	ldr	r3, [pc, #104]	@ (801033c <_txe_thread_create+0x1e0>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00b      	beq.n	80102f2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80102da:	f3ef 8305 	mrs	r3, IPSR
 80102de:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80102e0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80102e2:	4b16      	ldr	r3, [pc, #88]	@ (801033c <_txe_thread_create+0x1e0>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80102ec:	d201      	bcs.n	80102f2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80102ee:	2313      	movs	r3, #19
 80102f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80102f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d112      	bne.n	801031e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80102f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80102fa:	9305      	str	r3, [sp, #20]
 80102fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80102fe:	9304      	str	r3, [sp, #16]
 8010300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010302:	9303      	str	r3, [sp, #12]
 8010304:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010306:	9302      	str	r3, [sp, #8]
 8010308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801030a:	9301      	str	r3, [sp, #4]
 801030c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	68b9      	ldr	r1, [r7, #8]
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f7fe fcbe 	bl	800ec98 <_tx_thread_create>
 801031c:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801031e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8010320:	4618      	mov	r0, r3
 8010322:	3750      	adds	r7, #80	@ 0x50
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	20157f6c 	.word	0x20157f6c
 801032c:	20157edc 	.word	0x20157edc
 8010330:	20157ee0 	.word	0x20157ee0
 8010334:	20157ed4 	.word	0x20157ed4
 8010338:	2015801c 	.word	0x2015801c
 801033c:	20000010 	.word	0x20000010

08010340 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8010344:	f003 fbc2 	bl	8013acc <touchgfx_components_init>
    touchgfx_init();
 8010348:	f003 fb90 	bl	8013a6c <touchgfx_init>
}
 801034c:	bf00      	nop
 801034e:	bd80      	pop	{r7, pc}

08010350 <MX_TouchGFX_Init>:

/**
 * Create TouchGFX Thread
 */
UINT MX_TouchGFX_Init(VOID* memory_ptr)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b08c      	sub	sp, #48	@ 0x30
 8010354:	af08      	add	r7, sp, #32
 8010356:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8010358:	2300      	movs	r3, #0
 801035a:	60fb      	str	r3, [r7, #12]
    CHAR* pointer = 0;
 801035c:	2300      	movs	r3, #0
 801035e:	60bb      	str	r3, [r7, #8]

    /* Allocate the stack for TouchGFX Thread.  */
    if (tx_byte_allocate((TX_BYTE_POOL*)memory_ptr, (VOID**) &pointer,
 8010360:	f107 0108 	add.w	r1, r7, #8
 8010364:	2300      	movs	r3, #0
 8010366:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f7ff fba8 	bl	800fac0 <_txe_byte_allocate>
 8010370:	4603      	mov	r3, r0
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <MX_TouchGFX_Init+0x2c>
                         TOUCHGFX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
    {
        ret = TX_POOL_ERROR;
 8010376:	2302      	movs	r3, #2
 8010378:	60fb      	str	r3, [r7, #12]
 801037a:	e019      	b.n	80103b0 <MX_TouchGFX_Init+0x60>
    }

    /* Create TouchGFX Thread */
    else if (tx_thread_create(&TouchGFXThread, (CHAR*)"TouchGFX", TouchGFX_Task, 0,
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	22b0      	movs	r2, #176	@ 0xb0
 8010380:	9206      	str	r2, [sp, #24]
 8010382:	2201      	movs	r2, #1
 8010384:	9205      	str	r2, [sp, #20]
 8010386:	2200      	movs	r2, #0
 8010388:	9204      	str	r2, [sp, #16]
 801038a:	2205      	movs	r2, #5
 801038c:	9203      	str	r2, [sp, #12]
 801038e:	2205      	movs	r2, #5
 8010390:	9202      	str	r2, [sp, #8]
 8010392:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 8010396:	9201      	str	r2, [sp, #4]
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	2300      	movs	r3, #0
 801039c:	4a07      	ldr	r2, [pc, #28]	@ (80103bc <MX_TouchGFX_Init+0x6c>)
 801039e:	4908      	ldr	r1, [pc, #32]	@ (80103c0 <MX_TouchGFX_Init+0x70>)
 80103a0:	4808      	ldr	r0, [pc, #32]	@ (80103c4 <MX_TouchGFX_Init+0x74>)
 80103a2:	f7ff fedb 	bl	801015c <_txe_thread_create>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d001      	beq.n	80103b0 <MX_TouchGFX_Init+0x60>
                              pointer, TOUCHGFX_STACK_SIZE,
                              5, 5,
                              TX_NO_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
    {
        ret = TX_THREAD_ERROR;
 80103ac:	230e      	movs	r3, #14
 80103ae:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 80103b0:	68fb      	ldr	r3, [r7, #12]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	080103c9 	.word	0x080103c9
 80103c0:	0802cc88 	.word	0x0802cc88
 80103c4:	201584dc 	.word	0x201584dc

080103c8 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(unsigned long thread_input)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 80103d0:	f003 fb82 	bl	8013ad8 <touchgfx_taskEntry>
}
 80103d4:	bf00      	nop
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
    {
 80103e4:	4a04      	ldr	r2, [pc, #16]	@ (80103f8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	601a      	str	r2, [r3, #0]
    }
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4618      	mov	r0, r3
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	0802da40 	.word	0x0802da40

080103fc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
    }
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff ffe9 	bl	80103dc <_ZN8touchgfx12FontProviderD1Ev>
 801040a:	2104      	movs	r1, #4
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f01b fba6 	bl	802bb5e <_ZdlPvj>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	460b      	mov	r3, r1
 8010426:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8010428:	887b      	ldrh	r3, [r7, #2]
 801042a:	2b02      	cmp	r3, #2
 801042c:	d010      	beq.n	8010450 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 801042e:	2b02      	cmp	r3, #2
 8010430:	dc13      	bgt.n	801045a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8010432:	2b00      	cmp	r3, #0
 8010434:	d002      	beq.n	801043c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8010436:	2b01      	cmp	r3, #1
 8010438:	d005      	beq.n	8010446 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 801043a:	e00e      	b.n	801045a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801043c:	f001 fdb8 	bl	8011fb0 <_ZN17TypedTextDatabase8getFontsEv>
 8010440:	4603      	mov	r3, r0
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	e00a      	b.n	801045c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8010446:	f001 fdb3 	bl	8011fb0 <_ZN17TypedTextDatabase8getFontsEv>
 801044a:	4603      	mov	r3, r0
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	e005      	b.n	801045c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8010450:	f001 fdae 	bl	8011fb0 <_ZN17TypedTextDatabase8getFontsEv>
 8010454:	4603      	mov	r3, r0
 8010456:	689b      	ldr	r3, [r3, #8]
 8010458:	e000      	b.n	801045c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 801045a:	2300      	movs	r3, #0
    }
}
 801045c:	4618      	mov	r0, r3
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	4a05      	ldr	r2, [pc, #20]	@ (8010484 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	601a      	str	r2, [r3, #0]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4618      	mov	r0, r3
 8010476:	f7ff ffb1 	bl	80103dc <_ZN8touchgfx12FontProviderD1Ev>
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4618      	mov	r0, r3
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	0802da2c 	.word	0x0802da2c

08010488 <_ZN23ApplicationFontProviderD0Ev>:
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f7ff ffe7 	bl	8010464 <_ZN23ApplicationFontProviderD1Ev>
 8010496:	2104      	movs	r1, #4
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f01b fb60 	bl	802bb5e <_ZdlPvj>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4618      	mov	r0, r3
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
    {
 80104b0:	4a04      	ldr	r2, [pc, #16]	@ (80104c4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	601a      	str	r2, [r3, #0]
    }
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	4618      	mov	r0, r3
 80104ba:	370c      	adds	r7, #12
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr
 80104c4:	0802dce8 	.word	0x0802dce8

080104c8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
    }
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f7ff ffe9 	bl	80104a8 <_ZN8touchgfx4FontD1Ev>
 80104d6:	2114      	movs	r1, #20
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f01b fb40 	bl	802bb5e <_ZdlPvj>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4618      	mov	r0, r3
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80104e8:	b590      	push	{r4, r7, lr}
 80104ea:	b087      	sub	sp, #28
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	460b      	mov	r3, r1
 80104f2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80104f4:	887b      	ldrh	r3, [r7, #2]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d101      	bne.n	80104fe <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	e010      	b.n	8010520 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80104fe:	2300      	movs	r3, #0
 8010500:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8010502:	2300      	movs	r3, #0
 8010504:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	3308      	adds	r3, #8
 801050c:	681c      	ldr	r4, [r3, #0]
 801050e:	f107 030f 	add.w	r3, r7, #15
 8010512:	f107 0210 	add.w	r2, r7, #16
 8010516:	8879      	ldrh	r1, [r7, #2]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	47a0      	blx	r4
 801051c:	6178      	str	r0, [r7, #20]
        return glyph;
 801051e:	697b      	ldr	r3, [r7, #20]
    }
 8010520:	4618      	mov	r0, r3
 8010522:	371c      	adds	r7, #28
 8010524:	46bd      	mov	sp, r7
 8010526:	bd90      	pop	{r4, r7, pc}

08010528 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	89db      	ldrh	r3, [r3, #14]
    }
 8010534:	4618      	mov	r0, r3
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	8a1b      	ldrh	r3, [r3, #16]
    }
 801054c:	4618      	mov	r0, r3
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr

08010558 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	88db      	ldrh	r3, [r3, #6]
    }
 8010564:	4618      	mov	r0, r3
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	889b      	ldrh	r3, [r3, #4]
    }
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	7a9b      	ldrb	r3, [r3, #10]
 8010594:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8010598:	b2db      	uxtb	r3, r3
    }
 801059a:	4618      	mov	r0, r3
 801059c:	370c      	adds	r7, #12
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr

080105a6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 80105a6:	b480      	push	{r7}
 80105a8:	b083      	sub	sp, #12
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	7a9b      	ldrb	r3, [r3, #10]
 80105b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80105b6:	b2db      	uxtb	r3, r3
    }
 80105b8:	4618      	mov	r0, r3
 80105ba:	370c      	adds	r7, #12
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr

080105c4 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
    {
        return false;
 80105cc:	2300      	movs	r3, #0
    }
 80105ce:	4618      	mov	r0, r3
 80105d0:	370c      	adds	r7, #12
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr

080105da <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 80105da:	b480      	push	{r7}
 80105dc:	b083      	sub	sp, #12
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80105e2:	f04f 0300 	mov.w	r3, #0
 80105e6:	ee07 3a90 	vmov	s15, r3
    }
 80105ea:	eeb0 0a67 	vmov.f32	s0, s15
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	4a05      	ldr	r2, [pc, #20]	@ (8010618 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff ff4d 	bl	80104a8 <_ZN8touchgfx4FontD1Ev>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4618      	mov	r0, r3
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	0802e508 	.word	0x0802e508

0801061c <_ZN8touchgfx9ConstFontD0Ev>:
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f7ff ffe7 	bl	80105f8 <_ZN8touchgfx9ConstFontD1Ev>
 801062a:	211c      	movs	r1, #28
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f01b fa96 	bl	802bb5e <_ZdlPvj>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	4a05      	ldr	r2, [pc, #20]	@ (801065c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	601a      	str	r2, [r3, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	f7ff ffd3 	bl	80105f8 <_ZN8touchgfx9ConstFontD1Ev>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	4618      	mov	r0, r3
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	0802da54 	.word	0x0802da54

08010660 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7ff ffe7 	bl	801063c <_ZN8touchgfx13GeneratedFontD1Ev>
 801066e:	212c      	movs	r1, #44	@ 0x2c
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f01b fa74 	bl	802bb5e <_ZdlPvj>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 801068c:	4618      	mov	r0, r3
 801068e:	370c      	adds	r7, #12
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr

08010698 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 80106a4:	4618      	mov	r0, r3
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b08e      	sub	sp, #56	@ 0x38
 80106b4:	af0a      	add	r7, sp, #40	@ 0x28
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	4611      	mov	r1, r2
 80106bc:	461a      	mov	r2, r3
 80106be:	460b      	mov	r3, r1
 80106c0:	80fb      	strh	r3, [r7, #6]
 80106c2:	4613      	mov	r3, r2
 80106c4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	88b9      	ldrh	r1, [r7, #4]
 80106ca:	88fa      	ldrh	r2, [r7, #6]
 80106cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80106d0:	9308      	str	r3, [sp, #32]
 80106d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80106d4:	9307      	str	r3, [sp, #28]
 80106d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80106da:	9306      	str	r3, [sp, #24]
 80106dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80106e0:	9305      	str	r3, [sp, #20]
 80106e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80106e6:	9304      	str	r3, [sp, #16]
 80106e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80106ec:	9303      	str	r3, [sp, #12]
 80106ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106f2:	9302      	str	r3, [sp, #8]
 80106f4:	7f3b      	ldrb	r3, [r7, #28]
 80106f6:	9301      	str	r3, [sp, #4]
 80106f8:	8b3b      	ldrh	r3, [r7, #24]
 80106fa:	9300      	str	r3, [sp, #0]
 80106fc:	460b      	mov	r3, r1
 80106fe:	68b9      	ldr	r1, [r7, #8]
 8010700:	f007 f9e4 	bl	8017acc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8010704:	4a09      	ldr	r2, [pc, #36]	@ (801072c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801070e:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010714:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801071a:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010720:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	4618      	mov	r0, r3
 8010726:	3710      	adds	r7, #16
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	0802da54 	.word	0x0802da54

08010730 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8010730:	b480      	push	{r7}
 8010732:	b085      	sub	sp, #20
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	69db      	ldr	r3, [r3, #28]
 801073e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	889b      	ldrh	r3, [r3, #4]
 8010744:	0adb      	lsrs	r3, r3, #11
 8010746:	b29b      	uxth	r3, r3
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	4413      	add	r3, r2
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4413      	add	r3, r2
}
 8010756:	4618      	mov	r0, r3
 8010758:	3714      	adds	r7, #20
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010762:	b480      	push	{r7}
 8010764:	b089      	sub	sp, #36	@ 0x24
 8010766:	af00      	add	r7, sp, #0
 8010768:	60f8      	str	r0, [r7, #12]
 801076a:	460b      	mov	r3, r1
 801076c:	607a      	str	r2, [r7, #4]
 801076e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d003      	beq.n	801077e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	7b1b      	ldrb	r3, [r3, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d101      	bne.n	8010782 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801077e:	2300      	movs	r3, #0
 8010780:	e031      	b.n	80107e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6a1a      	ldr	r2, [r3, #32]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	7b5b      	ldrb	r3, [r3, #13]
 801078e:	021b      	lsls	r3, r3, #8
 8010790:	b21b      	sxth	r3, r3
 8010792:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010796:	b219      	sxth	r1, r3
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	7adb      	ldrb	r3, [r3, #11]
 801079c:	b21b      	sxth	r3, r3
 801079e:	430b      	orrs	r3, r1
 80107a0:	b21b      	sxth	r3, r3
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	4413      	add	r3, r2
 80107a8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	7b1b      	ldrb	r3, [r3, #12]
 80107ae:	837b      	strh	r3, [r7, #26]
 80107b0:	e013      	b.n	80107da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	881b      	ldrh	r3, [r3, #0]
 80107b6:	897a      	ldrh	r2, [r7, #10]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d103      	bne.n	80107c4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80107c2:	e010      	b.n	80107e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	897a      	ldrh	r2, [r7, #10]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d309      	bcc.n	80107e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80107ce:	8b7b      	ldrh	r3, [r7, #26]
 80107d0:	3b01      	subs	r3, #1
 80107d2:	837b      	strh	r3, [r7, #26]
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	3304      	adds	r3, #4
 80107d8:	61fb      	str	r3, [r7, #28]
 80107da:	8b7b      	ldrh	r3, [r7, #26]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d1e8      	bne.n	80107b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80107e0:	e000      	b.n	80107e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80107e2:	bf00      	nop
        }
    }
    return 0;
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3724      	adds	r7, #36	@ 0x24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
	...

080107f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80107f4:	b580      	push	{r7, lr}
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	4801      	ldr	r0, [pc, #4]	@ (8010800 <__tcf_0+0xc>)
 80107fa:	f7ff ff1f 	bl	801063c <_ZN8touchgfx13GeneratedFontD1Ev>
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	2015858c 	.word	0x2015858c

08010804 <_Z23getFont_verdana_10_4bppv>:
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b08e      	sub	sp, #56	@ 0x38
 8010808:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 801080a:	4b20      	ldr	r3, [pc, #128]	@ (801088c <_Z23getFont_verdana_10_4bppv+0x88>)
 801080c:	e8d3 3faf 	lda	r3, [r3]
 8010810:	f003 0301 	and.w	r3, r3, #1
 8010814:	2b00      	cmp	r3, #0
 8010816:	bf0c      	ite	eq
 8010818:	2301      	moveq	r3, #1
 801081a:	2300      	movne	r3, #0
 801081c:	b2db      	uxtb	r3, r3
 801081e:	2b00      	cmp	r3, #0
 8010820:	d030      	beq.n	8010884 <_Z23getFont_verdana_10_4bppv+0x80>
 8010822:	481a      	ldr	r0, [pc, #104]	@ (801088c <_Z23getFont_verdana_10_4bppv+0x88>)
 8010824:	f01b f99d 	bl	802bb62 <__cxa_guard_acquire>
 8010828:	4603      	mov	r3, r0
 801082a:	2b00      	cmp	r3, #0
 801082c:	bf14      	ite	ne
 801082e:	2301      	movne	r3, #1
 8010830:	2300      	moveq	r3, #0
 8010832:	b2db      	uxtb	r3, r3
 8010834:	2b00      	cmp	r3, #0
 8010836:	d025      	beq.n	8010884 <_Z23getFont_verdana_10_4bppv+0x80>
 8010838:	2300      	movs	r3, #0
 801083a:	930c      	str	r3, [sp, #48]	@ 0x30
 801083c:	2300      	movs	r3, #0
 801083e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010840:	2300      	movs	r3, #0
 8010842:	930a      	str	r3, [sp, #40]	@ 0x28
 8010844:	233f      	movs	r3, #63	@ 0x3f
 8010846:	9309      	str	r3, [sp, #36]	@ 0x24
 8010848:	4b11      	ldr	r3, [pc, #68]	@ (8010890 <_Z23getFont_verdana_10_4bppv+0x8c>)
 801084a:	9308      	str	r3, [sp, #32]
 801084c:	4b11      	ldr	r3, [pc, #68]	@ (8010894 <_Z23getFont_verdana_10_4bppv+0x90>)
 801084e:	9307      	str	r3, [sp, #28]
 8010850:	2300      	movs	r3, #0
 8010852:	9306      	str	r3, [sp, #24]
 8010854:	2300      	movs	r3, #0
 8010856:	9305      	str	r3, [sp, #20]
 8010858:	2301      	movs	r3, #1
 801085a:	9304      	str	r3, [sp, #16]
 801085c:	2304      	movs	r3, #4
 801085e:	9303      	str	r3, [sp, #12]
 8010860:	2300      	movs	r3, #0
 8010862:	9302      	str	r3, [sp, #8]
 8010864:	2300      	movs	r3, #0
 8010866:	9301      	str	r3, [sp, #4]
 8010868:	230a      	movs	r3, #10
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	230a      	movs	r3, #10
 801086e:	2201      	movs	r2, #1
 8010870:	4909      	ldr	r1, [pc, #36]	@ (8010898 <_Z23getFont_verdana_10_4bppv+0x94>)
 8010872:	480a      	ldr	r0, [pc, #40]	@ (801089c <_Z23getFont_verdana_10_4bppv+0x98>)
 8010874:	f7ff ff1c 	bl	80106b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010878:	4809      	ldr	r0, [pc, #36]	@ (80108a0 <_Z23getFont_verdana_10_4bppv+0x9c>)
 801087a:	f01b f9bb 	bl	802bbf4 <atexit>
 801087e:	4803      	ldr	r0, [pc, #12]	@ (801088c <_Z23getFont_verdana_10_4bppv+0x88>)
 8010880:	f01b f97b 	bl	802bb7a <__cxa_guard_release>
    return verdana_10_4bpp;
 8010884:	4b05      	ldr	r3, [pc, #20]	@ (801089c <_Z23getFont_verdana_10_4bppv+0x98>)
}
 8010886:	4618      	mov	r0, r3
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	201585b8 	.word	0x201585b8
 8010890:	08030ab0 	.word	0x08030ab0
 8010894:	08030abc 	.word	0x08030abc
 8010898:	08030a80 	.word	0x08030a80
 801089c:	2015858c 	.word	0x2015858c
 80108a0:	080107f5 	.word	0x080107f5

080108a4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80108a4:	b580      	push	{r7, lr}
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	4801      	ldr	r0, [pc, #4]	@ (80108b0 <__tcf_0+0xc>)
 80108aa:	f7ff fec7 	bl	801063c <_ZN8touchgfx13GeneratedFontD1Ev>
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	201585bc 	.word	0x201585bc

080108b4 <_Z23getFont_verdana_20_4bppv>:
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b08e      	sub	sp, #56	@ 0x38
 80108b8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80108ba:	4b20      	ldr	r3, [pc, #128]	@ (801093c <_Z23getFont_verdana_20_4bppv+0x88>)
 80108bc:	e8d3 3faf 	lda	r3, [r3]
 80108c0:	f003 0301 	and.w	r3, r3, #1
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	bf0c      	ite	eq
 80108c8:	2301      	moveq	r3, #1
 80108ca:	2300      	movne	r3, #0
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d030      	beq.n	8010934 <_Z23getFont_verdana_20_4bppv+0x80>
 80108d2:	481a      	ldr	r0, [pc, #104]	@ (801093c <_Z23getFont_verdana_20_4bppv+0x88>)
 80108d4:	f01b f945 	bl	802bb62 <__cxa_guard_acquire>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	bf14      	ite	ne
 80108de:	2301      	movne	r3, #1
 80108e0:	2300      	moveq	r3, #0
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d025      	beq.n	8010934 <_Z23getFont_verdana_20_4bppv+0x80>
 80108e8:	2300      	movs	r3, #0
 80108ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80108ec:	2300      	movs	r3, #0
 80108ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108f0:	2300      	movs	r3, #0
 80108f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80108f4:	233f      	movs	r3, #63	@ 0x3f
 80108f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80108f8:	4b11      	ldr	r3, [pc, #68]	@ (8010940 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80108fa:	9308      	str	r3, [sp, #32]
 80108fc:	4b11      	ldr	r3, [pc, #68]	@ (8010944 <_Z23getFont_verdana_20_4bppv+0x90>)
 80108fe:	9307      	str	r3, [sp, #28]
 8010900:	2300      	movs	r3, #0
 8010902:	9306      	str	r3, [sp, #24]
 8010904:	2300      	movs	r3, #0
 8010906:	9305      	str	r3, [sp, #20]
 8010908:	2301      	movs	r3, #1
 801090a:	9304      	str	r3, [sp, #16]
 801090c:	2304      	movs	r3, #4
 801090e:	9303      	str	r3, [sp, #12]
 8010910:	2300      	movs	r3, #0
 8010912:	9302      	str	r3, [sp, #8]
 8010914:	2300      	movs	r3, #0
 8010916:	9301      	str	r3, [sp, #4]
 8010918:	2314      	movs	r3, #20
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	2314      	movs	r3, #20
 801091e:	2201      	movs	r2, #1
 8010920:	4909      	ldr	r1, [pc, #36]	@ (8010948 <_Z23getFont_verdana_20_4bppv+0x94>)
 8010922:	480a      	ldr	r0, [pc, #40]	@ (801094c <_Z23getFont_verdana_20_4bppv+0x98>)
 8010924:	f7ff fec4 	bl	80106b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010928:	4809      	ldr	r0, [pc, #36]	@ (8010950 <_Z23getFont_verdana_20_4bppv+0x9c>)
 801092a:	f01b f963 	bl	802bbf4 <atexit>
 801092e:	4803      	ldr	r0, [pc, #12]	@ (801093c <_Z23getFont_verdana_20_4bppv+0x88>)
 8010930:	f01b f923 	bl	802bb7a <__cxa_guard_release>
    return verdana_20_4bpp;
 8010934:	4b05      	ldr	r3, [pc, #20]	@ (801094c <_Z23getFont_verdana_20_4bppv+0x98>)
}
 8010936:	4618      	mov	r0, r3
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	201585e8 	.word	0x201585e8
 8010940:	08030ab4 	.word	0x08030ab4
 8010944:	08030ac0 	.word	0x08030ac0
 8010948:	08030a90 	.word	0x08030a90
 801094c:	201585bc 	.word	0x201585bc
 8010950:	080108a5 	.word	0x080108a5

08010954 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8010954:	b580      	push	{r7, lr}
 8010956:	af00      	add	r7, sp, #0
 8010958:	4801      	ldr	r0, [pc, #4]	@ (8010960 <__tcf_0+0xc>)
 801095a:	f7ff fe6f 	bl	801063c <_ZN8touchgfx13GeneratedFontD1Ev>
 801095e:	bd80      	pop	{r7, pc}
 8010960:	201585ec 	.word	0x201585ec

08010964 <_Z23getFont_verdana_40_4bppv>:
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b08e      	sub	sp, #56	@ 0x38
 8010968:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 801096a:	4b20      	ldr	r3, [pc, #128]	@ (80109ec <_Z23getFont_verdana_40_4bppv+0x88>)
 801096c:	e8d3 3faf 	lda	r3, [r3]
 8010970:	f003 0301 	and.w	r3, r3, #1
 8010974:	2b00      	cmp	r3, #0
 8010976:	bf0c      	ite	eq
 8010978:	2301      	moveq	r3, #1
 801097a:	2300      	movne	r3, #0
 801097c:	b2db      	uxtb	r3, r3
 801097e:	2b00      	cmp	r3, #0
 8010980:	d030      	beq.n	80109e4 <_Z23getFont_verdana_40_4bppv+0x80>
 8010982:	481a      	ldr	r0, [pc, #104]	@ (80109ec <_Z23getFont_verdana_40_4bppv+0x88>)
 8010984:	f01b f8ed 	bl	802bb62 <__cxa_guard_acquire>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	bf14      	ite	ne
 801098e:	2301      	movne	r3, #1
 8010990:	2300      	moveq	r3, #0
 8010992:	b2db      	uxtb	r3, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	d025      	beq.n	80109e4 <_Z23getFont_verdana_40_4bppv+0x80>
 8010998:	2300      	movs	r3, #0
 801099a:	930c      	str	r3, [sp, #48]	@ 0x30
 801099c:	2300      	movs	r3, #0
 801099e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109a0:	2300      	movs	r3, #0
 80109a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80109a4:	233f      	movs	r3, #63	@ 0x3f
 80109a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80109a8:	4b11      	ldr	r3, [pc, #68]	@ (80109f0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80109aa:	9308      	str	r3, [sp, #32]
 80109ac:	4b11      	ldr	r3, [pc, #68]	@ (80109f4 <_Z23getFont_verdana_40_4bppv+0x90>)
 80109ae:	9307      	str	r3, [sp, #28]
 80109b0:	2300      	movs	r3, #0
 80109b2:	9306      	str	r3, [sp, #24]
 80109b4:	2300      	movs	r3, #0
 80109b6:	9305      	str	r3, [sp, #20]
 80109b8:	2301      	movs	r3, #1
 80109ba:	9304      	str	r3, [sp, #16]
 80109bc:	2304      	movs	r3, #4
 80109be:	9303      	str	r3, [sp, #12]
 80109c0:	2300      	movs	r3, #0
 80109c2:	9302      	str	r3, [sp, #8]
 80109c4:	2300      	movs	r3, #0
 80109c6:	9301      	str	r3, [sp, #4]
 80109c8:	2328      	movs	r3, #40	@ 0x28
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	2328      	movs	r3, #40	@ 0x28
 80109ce:	2201      	movs	r2, #1
 80109d0:	4909      	ldr	r1, [pc, #36]	@ (80109f8 <_Z23getFont_verdana_40_4bppv+0x94>)
 80109d2:	480a      	ldr	r0, [pc, #40]	@ (80109fc <_Z23getFont_verdana_40_4bppv+0x98>)
 80109d4:	f7ff fe6c 	bl	80106b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80109d8:	4809      	ldr	r0, [pc, #36]	@ (8010a00 <_Z23getFont_verdana_40_4bppv+0x9c>)
 80109da:	f01b f90b 	bl	802bbf4 <atexit>
 80109de:	4803      	ldr	r0, [pc, #12]	@ (80109ec <_Z23getFont_verdana_40_4bppv+0x88>)
 80109e0:	f01b f8cb 	bl	802bb7a <__cxa_guard_release>
    return verdana_40_4bpp;
 80109e4:	4b05      	ldr	r3, [pc, #20]	@ (80109fc <_Z23getFont_verdana_40_4bppv+0x98>)
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	20158618 	.word	0x20158618
 80109f0:	08030ab8 	.word	0x08030ab8
 80109f4:	08030ac4 	.word	0x08030ac4
 80109f8:	08030aa0 	.word	0x08030aa0
 80109fc:	201585ec 	.word	0x201585ec
 8010a00:	08010955 	.word	0x08010955

08010a04 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010a04:	b480      	push	{r7}
 8010a06:	b083      	sub	sp, #12
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	4618      	mov	r0, r3
 8010a12:	370c      	adds	r7, #12
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr

08010a1c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010a26:	bf00      	nop
 8010a28:	370c      	adds	r7, #12
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a30:	4770      	bx	lr

08010a32 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010a32:	b480      	push	{r7}
 8010a34:	b083      	sub	sp, #12
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
 8010a3a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010a3c:	bf00      	nop
 8010a3e:	370c      	adds	r7, #12
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr

08010a48 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010a52:	bf00      	nop
 8010a54:	370c      	adds	r7, #12
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr

08010a5e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8010a5e:	b480      	push	{r7}
 8010a60:	b083      	sub	sp, #12
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
 8010a66:	460b      	mov	r3, r1
 8010a68:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8010a6a:	bf00      	nop
 8010a6c:	370c      	adds	r7, #12
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr

08010a76 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8010a76:	b480      	push	{r7}
 8010a78:	b083      	sub	sp, #12
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
    {
    }
 8010a7e:	bf00      	nop
 8010a80:	370c      	adds	r7, #12
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr

08010a8a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8010a8a:	b480      	push	{r7}
 8010a8c:	b083      	sub	sp, #12
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
    {
    }
 8010a92:	bf00      	nop
 8010a94:	370c      	adds	r7, #12
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr
	...

08010aa0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
    {
 8010aa8:	4a04      	ldr	r2, [pc, #16]	@ (8010abc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	601a      	str	r2, [r3, #0]
    }
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr
 8010abc:	0802dbdc 	.word	0x0802dbdc

08010ac0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
    }
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f7ff ffe9 	bl	8010aa0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8010ace:	2104      	movs	r1, #4
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f01b f844 	bl	802bb5e <_ZdlPvj>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}

08010ae0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8010ae0:	b480      	push	{r7}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
    {
    }
 8010ae8:	bf00      	nop
 8010aea:	370c      	adds	r7, #12
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010af4:	b480      	push	{r7}
 8010af6:	b083      	sub	sp, #12
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	460b      	mov	r3, r1
 8010afe:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8010b00:	bf00      	nop
 8010b02:	370c      	adds	r7, #12
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr

08010b0c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8010b0c:	b480      	push	{r7}
 8010b0e:	b083      	sub	sp, #12
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	683a      	ldr	r2, [r7, #0]
 8010b1a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8010b1e:	6810      	ldr	r0, [r2, #0]
 8010b20:	6851      	ldr	r1, [r2, #4]
 8010b22:	c303      	stmia	r3!, {r0, r1}
    }
 8010b24:	bf00      	nop
 8010b26:	370c      	adds	r7, #12
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	3304      	adds	r3, #4
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f005 fec6 	bl	80168ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8010b42:	bf00      	nop
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
	...

08010b4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8010b4c:	b480      	push	{r7}
 8010b4e:	b083      	sub	sp, #12
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
    {
 8010b54:	4a04      	ldr	r2, [pc, #16]	@ (8010b68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	601a      	str	r2, [r3, #0]
    }
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	370c      	adds	r7, #12
 8010b60:	46bd      	mov	sp, r7
 8010b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b66:	4770      	bx	lr
 8010b68:	0802dbc4 	.word	0x0802dbc4

08010b6c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
    }
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7ff ffe9 	bl	8010b4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010b7a:	2104      	movs	r1, #4
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f01a ffee 	bl	802bb5e <_ZdlPvj>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4618      	mov	r0, r3
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010b8c:	b480      	push	{r7}
 8010b8e:	af00      	add	r7, sp, #0
    {
        return instance;
 8010b90:	4b03      	ldr	r3, [pc, #12]	@ (8010ba0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010b92:	681b      	ldr	r3, [r3, #0]
    }
 8010b94:	4618      	mov	r0, r3
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop
 8010ba0:	2015a078 	.word	0x2015a078

08010ba4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8010ba4:	b480      	push	{r7}
 8010ba6:	b083      	sub	sp, #12
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8010bac:	4a07      	ldr	r2, [pc, #28]	@ (8010bcc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	601a      	str	r2, [r3, #0]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	605a      	str	r2, [r3, #4]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	721a      	strb	r2, [r3, #8]
    {
    }
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	370c      	adds	r7, #12
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr
 8010bcc:	0802dba0 	.word	0x0802dba0

08010bd0 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
    {
 8010bd8:	4a04      	ldr	r2, [pc, #16]	@ (8010bec <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	601a      	str	r2, [r3, #0]
    }
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr
 8010bec:	0802dba0 	.word	0x0802dba0

08010bf0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
    }
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff ffe9 	bl	8010bd0 <_ZN8touchgfx10TransitionD1Ev>
 8010bfe:	210c      	movs	r1, #12
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f01a ffac 	bl	802bb5e <_ZdlPvj>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
    {
    }
 8010c18:	bf00      	nop
 8010c1a:	370c      	adds	r7, #12
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr

08010c24 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
    {
    }
 8010c2c:	bf00      	nop
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
    {
    }
 8010c40:	bf00      	nop
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8010c54:	f005 fe16 	bl	8016884 <_ZN8touchgfx11Application11getInstanceEv>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	323c      	adds	r2, #60	@ 0x3c
 8010c5e:	6812      	ldr	r2, [r2, #0]
 8010c60:	4618      	mov	r0, r3
 8010c62:	4790      	blx	r2
    }
 8010c64:	bf00      	nop
 8010c66:	3708      	adds	r7, #8
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010c6c:	b480      	push	{r7}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	683a      	ldr	r2, [r7, #0]
 8010c7a:	605a      	str	r2, [r3, #4]
    }
 8010c7c:	bf00      	nop
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	4a05      	ldr	r2, [pc, #20]	@ (8010ca8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7ff ff01 	bl	8010aa0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	0802e44c 	.word	0x0802e44c

08010cac <_ZN8touchgfx11ApplicationD0Ev>:
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f7ff ffe7 	bl	8010c88 <_ZN8touchgfx11ApplicationD1Ev>
 8010cba:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f01a ff4d 	bl	802bb5e <_ZdlPvj>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3708      	adds	r7, #8
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
	...

08010cd0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f005 fe94 	bl	8016a08 <_ZN8touchgfx11ApplicationC1Ev>
 8010ce0:	4a09      	ldr	r2, [pc, #36]	@ (8010d08 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4a04      	ldr	r2, [pc, #16]	@ (8010d0c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010cfa:	6013      	str	r3, [r2, #0]
    }
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3708      	adds	r7, #8
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	0802db4c 	.word	0x0802db4c
 8010d0c:	2015a0c4 	.word	0x2015a0c4

08010d10 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 f804 	bl	8010d26 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010d1e:	bf00      	nop
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b082      	sub	sp, #8
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00f      	beq.n	8010d58 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	330c      	adds	r3, #12
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4610      	mov	r0, r2
 8010d4c:	4798      	blx	r3
 8010d4e:	4603      	mov	r3, r0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d001      	beq.n	8010d58 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010d54:	2301      	movs	r3, #1
 8010d56:	e000      	b.n	8010d5a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00e      	beq.n	8010d7c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	3308      	adds	r3, #8
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4610      	mov	r0, r2
 8010d72:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2200      	movs	r2, #0
 8010d78:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 8010d7c:	bf00      	nop
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	683a      	ldr	r2, [r7, #0]
 8010d92:	601a      	str	r2, [r3, #0]
    }
 8010d94:	bf00      	nop
 8010d96:	370c      	adds	r7, #12
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr

08010da0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	4a05      	ldr	r2, [pc, #20]	@ (8010dc0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	601a      	str	r2, [r3, #0]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff ff69 	bl	8010c88 <_ZN8touchgfx11ApplicationD1Ev>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4618      	mov	r0, r3
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	0802db4c 	.word	0x0802db4c

08010dc4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f7ff ffe7 	bl	8010da0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010dd2:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f01a fec1 	bl	802bb5e <_ZdlPvj>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4618      	mov	r0, r3
 8010de0:	3708      	adds	r7, #8
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
	...

08010de8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	4a08      	ldr	r2, [pc, #32]	@ (8010e14 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	601a      	str	r2, [r3, #0]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f000 fabd 	bl	801137c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff ffcb 	bl	8010da0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	0802dae0 	.word	0x0802dae0

08010e18 <_ZN23FrontendApplicationBaseD0Ev>:
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7ff ffe1 	bl	8010de8 <_ZN23FrontendApplicationBaseD1Ev>
 8010e26:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f01a fe97 	bl	802bb5e <_ZdlPvj>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	4618      	mov	r0, r3
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b082      	sub	sp, #8
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f000 f874 	bl	8010f30 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8010e48:	bf00      	nop
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	721a      	strb	r2, [r3, #8]
    }
 8010e5e:	bf00      	nop
 8010e60:	370c      	adds	r7, #12
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr

08010e6a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8010e6a:	b480      	push	{r7}
 8010e6c:	b083      	sub	sp, #12
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
 8010e72:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	683a      	ldr	r2, [r7, #0]
 8010e78:	605a      	str	r2, [r3, #4]
    }
 8010e7a:	bf00      	nop
 8010e7c:	370c      	adds	r7, #12
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e84:	4770      	bx	lr
	...

08010e88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7ff ff1a 	bl	8010cd0 <_ZN8touchgfx14MVPApplicationC1Ev>
 8010e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8010edc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f000 f897 	bl	8010fdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8010ebe:	f7ff fe65 	bl	8010b8c <_ZN8touchgfx3HAL11getInstanceEv>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	3208      	adds	r2, #8
 8010ec8:	6812      	ldr	r2, [r2, #0]
 8010eca:	2100      	movs	r1, #0
 8010ecc:	4618      	mov	r0, r3
 8010ece:	4790      	blx	r2
#ifdef SIMULATOR
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
#endif
}
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	0802dae0 	.word	0x0802dae0

08010ee0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	4618      	mov	r0, r3
 8010eee:	370c      	adds	r7, #12
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr

08010ef8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6039      	str	r1, [r7, #0]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	683a      	ldr	r2, [r7, #0]
 8010f06:	4611      	mov	r1, r2
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7ff ffe9 	bl	8010ee0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	685a      	ldr	r2, [r3, #4]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	605a      	str	r2, [r3, #4]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	683a      	ldr	r2, [r7, #0]
 8010f1a:	3308      	adds	r3, #8
 8010f1c:	3208      	adds	r2, #8
 8010f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f22:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8010f30:	b590      	push	{r4, r7, lr}
 8010f32:	b089      	sub	sp, #36	@ 0x24
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 8010f3e:	4b10      	ldr	r3, [pc, #64]	@ (8010f80 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8010f40:	61bb      	str	r3, [r7, #24]
 8010f42:	2300      	movs	r3, #0
 8010f44:	61fb      	str	r3, [r7, #28]
 8010f46:	f107 0008 	add.w	r0, r7, #8
 8010f4a:	f107 0318 	add.w	r3, r7, #24
 8010f4e:	cb0c      	ldmia	r3, {r2, r3}
 8010f50:	6879      	ldr	r1, [r7, #4]
 8010f52:	f000 f85f 	bl	8011014 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8010f56:	f107 0308 	add.w	r3, r7, #8
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f7ff ffcb 	bl	8010ef8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010f62:	f107 0308 	add.w	r3, r7, #8
 8010f66:	4618      	mov	r0, r3
 8010f68:	f000 fa08 	bl	801137c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8010f78:	bf00      	nop
 8010f7a:	3724      	adds	r7, #36	@ 0x24
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd90      	pop	{r4, r7, pc}
 8010f80:	08010f85 	.word	0x08010f85

08010f84 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af02      	add	r7, sp, #8
 8010f8a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8010f98:	461a      	mov	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8010fa0:	9300      	str	r3, [sp, #0]
 8010fa2:	4b04      	ldr	r3, [pc, #16]	@ (8010fb4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8010fa4:	4804      	ldr	r0, [pc, #16]	@ (8010fb8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8010fa6:	f000 f867 	bl	8011078 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8010faa:	bf00      	nop
 8010fac:	3708      	adds	r7, #8
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	2015a0b8 	.word	0x2015a0b8
 8010fb8:	2015a0b4 	.word	0x2015a0b4

08010fbc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	4a04      	ldr	r2, [pc, #16]	@ (8010fd8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	601a      	str	r2, [r3, #0]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	370c      	adds	r7, #12
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr
 8010fd8:	0802dbc4 	.word	0x0802dbc4

08010fdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7ff ffe8 	bl	8010fbc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010fec:	4a08      	ldr	r2, [pc, #32]	@ (8011010 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	601a      	str	r2, [r3, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	605a      	str	r2, [r3, #4]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	609a      	str	r2, [r3, #8]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2200      	movs	r2, #0
 8011002:	60da      	str	r2, [r3, #12]
    {
    }
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	3708      	adds	r7, #8
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	0802db34 	.word	0x0802db34

08011014 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	4639      	mov	r1, r7
 8011020:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	4618      	mov	r0, r3
 8011028:	f7ff ffc8 	bl	8010fbc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801102c:	4a08      	ldr	r2, [pc, #32]	@ (8011050 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	601a      	str	r2, [r3, #0]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	68ba      	ldr	r2, [r7, #8]
 8011036:	605a      	str	r2, [r3, #4]
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	3308      	adds	r3, #8
 801103c:	463a      	mov	r2, r7
 801103e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011042:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	4618      	mov	r0, r3
 801104a:	3710      	adds	r7, #16
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}
 8011050:	0802db34 	.word	0x0802db34

08011054 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	4618      	mov	r0, r3
 8011060:	f7ff fda0 	bl	8010ba4 <_ZN8touchgfx10TransitionC1Ev>
 8011064:	4a03      	ldr	r2, [pc, #12]	@ (8011074 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	601a      	str	r2, [r3, #0]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	4618      	mov	r0, r3
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	0802dabc 	.word	0x0802dabc

08011078 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011078:	b590      	push	{r4, r7, lr}
 801107a:	b08f      	sub	sp, #60	@ 0x3c
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]
 8011084:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	689a      	ldr	r2, [r3, #8]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	689b      	ldr	r3, [r3, #8]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3320      	adds	r3, #32
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4610      	mov	r0, r2
 8011096:	4798      	blx	r3
 8011098:	4603      	mov	r3, r0
 801109a:	2bc3      	cmp	r3, #195	@ 0xc3
 801109c:	d805      	bhi.n	80110aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 801109e:	4b7d      	ldr	r3, [pc, #500]	@ (8011294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x21c>)
 80110a0:	4a7d      	ldr	r2, [pc, #500]	@ (8011298 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80110a2:	21a3      	movs	r1, #163	@ 0xa3
 80110a4:	487d      	ldr	r0, [pc, #500]	@ (801129c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80110a6:	f01a fd87 	bl	802bbb8 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	685a      	ldr	r2, [r3, #4]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	3320      	adds	r3, #32
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4610      	mov	r0, r2
 80110ba:	4798      	blx	r3
 80110bc:	4603      	mov	r3, r0
 80110be:	2b0f      	cmp	r3, #15
 80110c0:	d805      	bhi.n	80110ce <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x56>
 80110c2:	4b77      	ldr	r3, [pc, #476]	@ (80112a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80110c4:	4a74      	ldr	r2, [pc, #464]	@ (8011298 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80110c6:	21a4      	movs	r1, #164	@ 0xa4
 80110c8:	4874      	ldr	r0, [pc, #464]	@ (801129c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80110ca:	f01a fd75 	bl	802bbb8 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	68da      	ldr	r2, [r3, #12]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	3320      	adds	r3, #32
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4610      	mov	r0, r2
 80110de:	4798      	blx	r3
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b0b      	cmp	r3, #11
 80110e4:	d805      	bhi.n	80110f2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7a>
 80110e6:	4b6f      	ldr	r3, [pc, #444]	@ (80112a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80110e8:	4a6b      	ldr	r2, [pc, #428]	@ (8011298 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80110ea:	21a5      	movs	r1, #165	@ 0xa5
 80110ec:	486b      	ldr	r0, [pc, #428]	@ (801129c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80110ee:	f01a fd63 	bl	802bbb8 <__assert_func>
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80110fe:	f005 fbc1 	bl	8016884 <_ZN8touchgfx11Application11getInstanceEv>
 8011102:	4603      	mov	r3, r0
 8011104:	4618      	mov	r0, r3
 8011106:	f7ff fd13 	bl	8010b30 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801110a:	6a3b      	ldr	r3, [r7, #32]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d008      	beq.n	8011124 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xac>
        (*currentTrans)->tearDown();
 8011112:	6a3b      	ldr	r3, [r7, #32]
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	6a3b      	ldr	r3, [r7, #32]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	330c      	adds	r3, #12
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4610      	mov	r0, r2
 8011122:	4798      	blx	r3
    if (*currentTrans)
 8011124:	6a3b      	ldr	r3, [r7, #32]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d007      	beq.n	801113c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc4>
        (*currentTrans)->~Transition();
 801112c:	6a3b      	ldr	r3, [r7, #32]
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	6a3b      	ldr	r3, [r7, #32]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4610      	mov	r0, r2
 801113a:	4798      	blx	r3
    if (*currentScreen)
 801113c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d008      	beq.n	8011156 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
        (*currentScreen)->tearDownScreen();
 8011144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011146:	681a      	ldr	r2, [r3, #0]
 8011148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	3314      	adds	r3, #20
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4610      	mov	r0, r2
 8011154:	4798      	blx	r3
    if (*currentPresenter)
 8011156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d008      	beq.n	8011170 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xf8>
        (*currentPresenter)->deactivate();
 801115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	3304      	adds	r3, #4
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4610      	mov	r0, r2
 801116e:	4798      	blx	r3
    if (*currentScreen)
 8011170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d007      	beq.n	8011188 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
        (*currentScreen)->~Screen();
 8011178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117a:	681a      	ldr	r2, [r3, #0]
 801117c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4610      	mov	r0, r2
 8011186:	4798      	blx	r3
    if (*currentPresenter)
 8011188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d008      	beq.n	80111a2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
        (*currentPresenter)->~Presenter();
 8011190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	3308      	adds	r3, #8
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	4610      	mov	r0, r2
 80111a0:	4798      	blx	r3
}
 80111a2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	2100      	movs	r1, #0
 80111aa:	4618      	mov	r0, r3
 80111ac:	f000 f87c 	bl	80112a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80111b0:	4603      	mov	r3, r0
 80111b2:	4619      	mov	r1, r3
 80111b4:	200c      	movs	r0, #12
 80111b6:	f7ff fc25 	bl	8010a04 <_ZnwjPv>
 80111ba:	4604      	mov	r4, r0
 80111bc:	4620      	mov	r0, r4
 80111be:	f7ff ff49 	bl	8011054 <_ZN8touchgfx12NoTransitionC1Ev>
 80111c2:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	689b      	ldr	r3, [r3, #8]
 80111c8:	2100      	movs	r1, #0
 80111ca:	4618      	mov	r0, r3
 80111cc:	f000 f87f 	bl	80112ce <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80111d0:	4603      	mov	r3, r0
 80111d2:	4619      	mov	r1, r3
 80111d4:	20c4      	movs	r0, #196	@ 0xc4
 80111d6:	f7ff fc15 	bl	8010a04 <_ZnwjPv>
 80111da:	4604      	mov	r4, r0
 80111dc:	4620      	mov	r0, r4
 80111de:	f001 f881 	bl	80122e4 <_ZN11Screen1ViewC1Ev>
 80111e2:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	2100      	movs	r1, #0
 80111ea:	4618      	mov	r0, r3
 80111ec:	f000 f882 	bl	80112f4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80111f0:	4603      	mov	r3, r0
 80111f2:	4619      	mov	r1, r3
 80111f4:	2010      	movs	r0, #16
 80111f6:	f7ff fc05 	bl	8010a04 <_ZnwjPv>
 80111fa:	4604      	mov	r4, r0
 80111fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80111fe:	4620      	mov	r0, r4
 8011200:	f001 f81a 	bl	8012238 <_ZN16Screen1PresenterC1ER11Screen1View>
 8011204:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801120a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011210:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011216:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801121a:	2b00      	cmp	r3, #0
 801121c:	d002      	beq.n	8011224 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ac>
 801121e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011220:	3304      	adds	r3, #4
 8011222:	e000      	b.n	8011226 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ae>
 8011224:	2300      	movs	r3, #0
 8011226:	4619      	mov	r1, r3
 8011228:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801122a:	f7ff fdab 	bl	8010d84 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011230:	3304      	adds	r3, #4
 8011232:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011234:	4618      	mov	r0, r3
 8011236:	f7ff fe18 	bl	8010e6a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801123a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801123c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801123e:	4618      	mov	r0, r3
 8011240:	f000 f86b 	bl	801131a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8011244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011246:	61fb      	str	r3, [r7, #28]
 8011248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801124a:	61bb      	str	r3, [r7, #24]
 801124c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801124e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	330c      	adds	r3, #12
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	69f8      	ldr	r0, [r7, #28]
 801125a:	4798      	blx	r3
    newPresenter->activate();
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	69b8      	ldr	r0, [r7, #24]
 8011264:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8011266:	6979      	ldr	r1, [r7, #20]
 8011268:	69f8      	ldr	r0, [r7, #28]
 801126a:	f006 ffcd 	bl	8018208 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	3310      	adds	r3, #16
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	6978      	ldr	r0, [r7, #20]
 8011278:	4798      	blx	r3
    newTransition->invalidate();
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	3314      	adds	r3, #20
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	6978      	ldr	r0, [r7, #20]
 8011284:	4798      	blx	r3
}
 8011286:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8011288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801128a:	4618      	mov	r0, r3
 801128c:	373c      	adds	r7, #60	@ 0x3c
 801128e:	46bd      	mov	sp, r7
 8011290:	bd90      	pop	{r4, r7, pc}
 8011292:	bf00      	nop
 8011294:	0802cc94 	.word	0x0802cc94
 8011298:	0802cd24 	.word	0x0802cd24
 801129c:	0802cdf8 	.word	0x0802cdf8
 80112a0:	0802ce3c 	.word	0x0802ce3c
 80112a4:	0802cee0 	.word	0x0802cee0

080112a8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	460b      	mov	r3, r1
 80112b2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	3324      	adds	r3, #36	@ 0x24
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	887a      	ldrh	r2, [r7, #2]
 80112be:	4611      	mov	r1, r2
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	4798      	blx	r3
 80112c4:	4603      	mov	r3, r0
    }
 80112c6:	4618      	mov	r0, r3
 80112c8:	3708      	adds	r7, #8
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}

080112ce <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80112ce:	b580      	push	{r7, lr}
 80112d0:	b082      	sub	sp, #8
 80112d2:	af00      	add	r7, sp, #0
 80112d4:	6078      	str	r0, [r7, #4]
 80112d6:	460b      	mov	r3, r1
 80112d8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	3324      	adds	r3, #36	@ 0x24
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	887a      	ldrh	r2, [r7, #2]
 80112e4:	4611      	mov	r1, r2
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	4798      	blx	r3
 80112ea:	4603      	mov	r3, r0
    }
 80112ec:	4618      	mov	r0, r3
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	460b      	mov	r3, r1
 80112fe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	3324      	adds	r3, #36	@ 0x24
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	887a      	ldrh	r2, [r7, #2]
 801130a:	4611      	mov	r1, r2
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	4798      	blx	r3
 8011310:	4603      	mov	r3, r0
    }
 8011312:	4618      	mov	r0, r3
 8011314:	3708      	adds	r7, #8
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}

0801131a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 801131a:	b480      	push	{r7}
 801131c:	b083      	sub	sp, #12
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
 8011322:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	683a      	ldr	r2, [r7, #0]
 8011328:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 801132a:	bf00      	nop
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
	...

08011338 <_ZN8touchgfx12NoTransitionD1Ev>:
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	4a05      	ldr	r2, [pc, #20]	@ (8011358 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	601a      	str	r2, [r3, #0]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff fc41 	bl	8010bd0 <_ZN8touchgfx10TransitionD1Ev>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4618      	mov	r0, r3
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	0802dabc 	.word	0x0802dabc

0801135c <_ZN8touchgfx12NoTransitionD0Ev>:
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f7ff ffe7 	bl	8011338 <_ZN8touchgfx12NoTransitionD1Ev>
 801136a:	210c      	movs	r1, #12
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f01a fbf6 	bl	802bb5e <_ZdlPvj>
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	4618      	mov	r0, r3
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	4a05      	ldr	r2, [pc, #20]	@ (801139c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	601a      	str	r2, [r3, #0]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff fbdd 	bl	8010b4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	0802db34 	.word	0x0802db34

080113a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7ff ffe7 	bl	801137c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80113ae:	2110      	movs	r1, #16
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f01a fbd4 	bl	802bb5e <_ZdlPvj>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	4618      	mov	r0, r3
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	68d2      	ldr	r2, [r2, #12]
 80113d0:	1052      	asrs	r2, r2, #1
 80113d2:	1899      	adds	r1, r3, r2
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	f003 0301 	and.w	r3, r3, #1
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d102      	bne.n	80113e6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	e00a      	b.n	80113fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	68d2      	ldr	r2, [r2, #12]
 80113ee:	1052      	asrs	r2, r2, #1
 80113f0:	4413      	add	r3, r2
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	6892      	ldr	r2, [r2, #8]
 80113f8:	4413      	add	r3, r2
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4608      	mov	r0, r1
 80113fe:	4798      	blx	r3
    }
 8011400:	bf00      	nop
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d010      	beq.n	801143a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d107      	bne.n	8011430 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	68db      	ldr	r3, [r3, #12]
 8011424:	f003 0301 	and.w	r3, r3, #1
 8011428:	2b00      	cmp	r3, #0
 801142a:	d101      	bne.n	8011430 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801142c:	2301      	movs	r3, #1
 801142e:	e000      	b.n	8011432 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011430:	2300      	movs	r3, #0
 8011432:	2b01      	cmp	r3, #1
 8011434:	d001      	beq.n	801143a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011436:	2301      	movs	r3, #1
 8011438:	e000      	b.n	801143c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801143a:	2300      	movs	r3, #0
    }
 801143c:	4618      	mov	r0, r3
 801143e:	370c      	adds	r7, #12
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8011448:	b480      	push	{r7}
 801144a:	b083      	sub	sp, #12
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
        : color(col)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	683a      	ldr	r2, [r7, #0]
 8011456:	601a      	str	r2, [r3, #0]
    {
    }
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	4618      	mov	r0, r3
 801145c:	370c      	adds	r7, #12
 801145e:	46bd      	mov	sp, r7
 8011460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011464:	4770      	bx	lr

08011466 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8011466:	b480      	push	{r7}
 8011468:	b083      	sub	sp, #12
 801146a:	af00      	add	r7, sp, #0
 801146c:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2200      	movs	r2, #0
 8011472:	801a      	strh	r2, [r3, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	805a      	strh	r2, [r3, #2]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2200      	movs	r2, #0
 801147e:	809a      	strh	r2, [r3, #4]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2200      	movs	r2, #0
 8011484:	80da      	strh	r2, [r3, #6]
    {
    }
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4618      	mov	r0, r3
 801148a:	370c      	adds	r7, #12
 801148c:	46bd      	mov	sp, r7
 801148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011492:	4770      	bx	lr

08011494 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 801149c:	4a14      	ldr	r2, [pc, #80]	@ (80114f0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	601a      	str	r2, [r3, #0]
        : rect(),
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	3304      	adds	r3, #4
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7ff ffdd 	bl	8011466 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	330c      	adds	r3, #12
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff ffd8 	bl	8011466 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2200      	movs	r2, #0
 80114ba:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2201      	movs	r2, #1
 80114e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4618      	mov	r0, r3
 80114e8:	3708      	adds	r7, #8
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop
 80114f0:	0802e4a0 	.word	0x0802e4a0

080114f4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
    {
 80114fc:	4a04      	ldr	r2, [pc, #16]	@ (8011510 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	601a      	str	r2, [r3, #0]
    }
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	4618      	mov	r0, r3
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	0802e4a0 	.word	0x0802e4a0

08011514 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
    }
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7ff ffe9 	bl	80114f4 <_ZN8touchgfx8DrawableD1Ev>
 8011522:	2128      	movs	r1, #40	@ 0x28
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f01a fb1a 	bl	802bb5e <_ZdlPvj>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4618      	mov	r0, r3
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8011542:	2b00      	cmp	r3, #0
 8011544:	d005      	beq.n	8011552 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	3314      	adds	r3, #20
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	4798      	blx	r3
        }
    }
 8011552:	bf00      	nop
 8011554:	3708      	adds	r7, #8
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}

0801155a <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 801155a:	b480      	push	{r7}
 801155c:	b083      	sub	sp, #12
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011562:	2300      	movs	r3, #0
    }
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	4608      	mov	r0, r1
 801157a:	4611      	mov	r1, r2
 801157c:	461a      	mov	r2, r3
 801157e:	4603      	mov	r3, r0
 8011580:	817b      	strh	r3, [r7, #10]
 8011582:	460b      	mov	r3, r1
 8011584:	813b      	strh	r3, [r7, #8]
 8011586:	4613      	mov	r3, r2
 8011588:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 801158a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801158e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011592:	4619      	mov	r1, r3
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f000 f82a 	bl	80115ee <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 801159a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 801159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115a2:	4619      	mov	r1, r3
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	f000 f87e 	bl	80116a6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80115aa:	bf00      	nop
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80115b2:	b480      	push	{r7}
 80115b4:	b083      	sub	sp, #12
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	460b      	mov	r3, r1
 80115bc:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	887a      	ldrh	r2, [r7, #2]
 80115c2:	809a      	strh	r2, [r3, #4]
    }
 80115c4:	bf00      	nop
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
 80115d8:	460b      	mov	r3, r1
 80115da:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	887a      	ldrh	r2, [r7, #2]
 80115e0:	80da      	strh	r2, [r3, #6]
    }
 80115e2:	bf00      	nop
 80115e4:	370c      	adds	r7, #12
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr

080115ee <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b082      	sub	sp, #8
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
 80115f6:	460b      	mov	r3, r1
 80115f8:	807b      	strh	r3, [r7, #2]
 80115fa:	4613      	mov	r3, r2
 80115fc:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	3330      	adds	r3, #48	@ 0x30
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801160a:	4611      	mov	r1, r2
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	4798      	blx	r3
        setY(y);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	3334      	adds	r3, #52	@ 0x34
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	f9b7 2000 	ldrsh.w	r2, [r7]
 801161c:	4611      	mov	r1, r2
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	4798      	blx	r3
    }
 8011622:	bf00      	nop
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 801162a:	b480      	push	{r7}
 801162c:	b083      	sub	sp, #12
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	460b      	mov	r3, r1
 8011634:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	887a      	ldrh	r2, [r7, #2]
 801163a:	811a      	strh	r2, [r3, #8]
    }
 801163c:	bf00      	nop
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	460b      	mov	r3, r1
 8011652:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	887a      	ldrh	r2, [r7, #2]
 8011658:	815a      	strh	r2, [r3, #10]
    }
 801165a:	bf00      	nop
 801165c:	370c      	adds	r7, #12
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr

08011666 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8011666:	b480      	push	{r7}
 8011668:	b083      	sub	sp, #12
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
    {
    }
 801166e:	bf00      	nop
 8011670:	370c      	adds	r7, #12
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr

0801167a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801167a:	b480      	push	{r7}
 801167c:	b083      	sub	sp, #12
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
 8011682:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8011684:	bf00      	nop
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 801169a:	bf00      	nop
 801169c:	370c      	adds	r7, #12
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr

080116a6 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b082      	sub	sp, #8
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	460b      	mov	r3, r1
 80116b0:	807b      	strh	r3, [r7, #2]
 80116b2:	4613      	mov	r3, r2
 80116b4:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3338      	adds	r3, #56	@ 0x38
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80116c2:	4611      	mov	r1, r2
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	4798      	blx	r3
        setHeight(height);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	333c      	adds	r3, #60	@ 0x3c
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80116d4:	4611      	mov	r1, r2
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	4798      	blx	r3
    }
 80116da:	bf00      	nop
 80116dc:	3708      	adds	r7, #8
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}

080116e2 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80116e2:	b480      	push	{r7}
 80116e4:	b083      	sub	sp, #12
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	6078      	str	r0, [r7, #4]
 80116ea:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80116ec:	bf00      	nop
 80116ee:	370c      	adds	r7, #12
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80116f8:	b480      	push	{r7}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
    {
    }
 8011700:	bf00      	nop
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr

0801170c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 801170c:	b480      	push	{r7}
 801170e:	b083      	sub	sp, #12
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 801171a:	4618      	mov	r0, r3
 801171c:	370c      	adds	r7, #12
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr

08011726 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8011726:	b480      	push	{r7}
 8011728:	b083      	sub	sp, #12
 801172a:	af00      	add	r7, sp, #0
 801172c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8011734:	4618      	mov	r0, r3
 8011736:	370c      	adds	r7, #12
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr

08011740 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	460b      	mov	r3, r1
 801174a:	807b      	strh	r3, [r7, #2]
 801174c:	4613      	mov	r3, r2
 801174e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	3354      	adds	r3, #84	@ 0x54
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	8879      	ldrh	r1, [r7, #2]
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8011760:	b292      	uxth	r2, r2
 8011762:	1a8a      	subs	r2, r1, r2
 8011764:	b292      	uxth	r2, r2
 8011766:	b210      	sxth	r0, r2
 8011768:	8839      	ldrh	r1, [r7, #0]
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011770:	b292      	uxth	r2, r2
 8011772:	1a8a      	subs	r2, r1, r2
 8011774:	b292      	uxth	r2, r2
 8011776:	b212      	sxth	r2, r2
 8011778:	4601      	mov	r1, r0
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	4798      	blx	r3
    }
 801177e:	bf00      	nop
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8011786:	b480      	push	{r7}
 8011788:	b083      	sub	sp, #12
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011794:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801179c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80117a4:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 80117a6:	bf00      	nop
 80117a8:	370c      	adds	r7, #12
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr

080117b2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80117b2:	b580      	push	{r7, lr}
 80117b4:	b084      	sub	sp, #16
 80117b6:	af00      	add	r7, sp, #0
 80117b8:	60f8      	str	r0, [r7, #12]
 80117ba:	60b9      	str	r1, [r7, #8]
 80117bc:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 80117be:	68f8      	ldr	r0, [r7, #12]
 80117c0:	f7ff ffe1 	bl	8011786 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	68fa      	ldr	r2, [r7, #12]
 80117d0:	601a      	str	r2, [r3, #0]
    }
 80117d2:	bf00      	nop
 80117d4:	3710      	adds	r7, #16
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}

080117da <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80117da:	b580      	push	{r7, lr}
 80117dc:	b084      	sub	sp, #16
 80117de:	af00      	add	r7, sp, #0
 80117e0:	60f8      	str	r0, [r7, #12]
 80117e2:	607b      	str	r3, [r7, #4]
 80117e4:	460b      	mov	r3, r1
 80117e6:	817b      	strh	r3, [r7, #10]
 80117e8:	4613      	mov	r3, r2
 80117ea:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7ff ff8c 	bl	801170c <_ZNK8touchgfx8Drawable9isVisibleEv>
 80117f4:	4603      	mov	r3, r0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d008      	beq.n	801180c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7ff ff92 	bl	8011726 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d001      	beq.n	801180c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8011808:	2301      	movs	r3, #1
 801180a:	e000      	b.n	801180e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 801180c:	2300      	movs	r3, #0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d002      	beq.n	8011818 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8011812:	68fa      	ldr	r2, [r7, #12]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	601a      	str	r2, [r3, #0]
        }
    }
 8011818:	bf00      	nop
 801181a:	3710      	adds	r7, #16
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
    {
 8011828:	4a06      	ldr	r2, [pc, #24]	@ (8011844 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	601a      	str	r2, [r3, #0]
    }
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	3304      	adds	r3, #4
 8011832:	4618      	mov	r0, r3
 8011834:	f000 f9e4 	bl	8011c00 <_ZN8touchgfx9ContainerD1Ev>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4618      	mov	r0, r3
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}
 8011842:	bf00      	nop
 8011844:	0802e5ac 	.word	0x0802e5ac

08011848 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
    }
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff ffe5 	bl	8011820 <_ZN8touchgfx6ScreenD1Ev>
 8011856:	213c      	movs	r1, #60	@ 0x3c
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f01a f980 	bl	802bb5e <_ZdlPvj>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4618      	mov	r0, r3
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
    {
    }
 8011870:	bf00      	nop
 8011872:	370c      	adds	r7, #12
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 801187c:	b480      	push	{r7}
 801187e:	b083      	sub	sp, #12
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
    {
    }
 8011884:	bf00      	nop
 8011886:	370c      	adds	r7, #12
 8011888:	46bd      	mov	sp, r7
 801188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188e:	4770      	bx	lr

08011890 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
    {
    }
 8011898:	bf00      	nop
 801189a:	370c      	adds	r7, #12
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
    {
    }
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	460b      	mov	r3, r1
 80118c2:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80118c4:	bf00      	nop
 80118c6:	370c      	adds	r7, #12
 80118c8:	46bd      	mov	sp, r7
 80118ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ce:	4770      	bx	lr

080118d0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	3304      	adds	r3, #4
 80118de:	6839      	ldr	r1, [r7, #0]
 80118e0:	4618      	mov	r0, r3
 80118e2:	f002 fde3 	bl	80144ac <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80118e6:	bf00      	nop
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
	...

080118f0 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7ff fdca 	bl	8011494 <_ZN8touchgfx8DrawableC1Ev>
 8011900:	4a03      	ldr	r2, [pc, #12]	@ (8011910 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	601a      	str	r2, [r3, #0]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	4618      	mov	r0, r3
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	0802dc6c 	.word	0x0802dc6c

08011914 <_ZN8touchgfx6WidgetD1Ev>:
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	4a05      	ldr	r2, [pc, #20]	@ (8011934 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	601a      	str	r2, [r3, #0]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4618      	mov	r0, r3
 8011926:	f7ff fde5 	bl	80114f4 <_ZN8touchgfx8DrawableD1Ev>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4618      	mov	r0, r3
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}
 8011934:	0802dc6c 	.word	0x0802dc6c

08011938 <_ZN8touchgfx6WidgetD0Ev>:
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7ff ffe7 	bl	8011914 <_ZN8touchgfx6WidgetD1Ev>
 8011946:	2128      	movs	r1, #40	@ 0x28
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f01a f908 	bl	802bb5e <_ZdlPvj>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	4618      	mov	r0, r3
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4618      	mov	r0, r3
 8011964:	2326      	movs	r3, #38	@ 0x26
 8011966:	461a      	mov	r2, r3
 8011968:	2100      	movs	r1, #0
 801196a:	f01a fb2c 	bl	802bfc6 <memset>
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	4618      	mov	r0, r3
 8011972:	f7ff ffbd 	bl	80118f0 <_ZN8touchgfx6WidgetC1Ev>
 8011976:	4a09      	ldr	r2, [pc, #36]	@ (801199c <_ZN8touchgfx3BoxC1Ev+0x44>)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	601a      	str	r2, [r3, #0]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	22ff      	movs	r2, #255	@ 0xff
 8011980:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	3328      	adds	r3, #40	@ 0x28
 8011988:	2100      	movs	r1, #0
 801198a:	4618      	mov	r0, r3
 801198c:	f7ff fd5c 	bl	8011448 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	4618      	mov	r0, r3
 8011994:	3708      	adds	r7, #8
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	0802e38c 	.word	0x0802e38c

080119a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	683a      	ldr	r2, [r7, #0]
 80119ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 80119b0:	bf00      	nop
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	4a05      	ldr	r2, [pc, #20]	@ (80119dc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	601a      	str	r2, [r3, #0]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7ff ff27 	bl	8011820 <_ZN8touchgfx6ScreenD1Ev>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	4618      	mov	r0, r3
 80119d6:	3708      	adds	r7, #8
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	0802dc38 	.word	0x0802dc38

080119e0 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7ff ffe7 	bl	80119bc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80119ee:	2140      	movs	r1, #64	@ 0x40
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f01a f8b4 	bl	802bb5e <_ZdlPvj>
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	4618      	mov	r0, r3
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <_ZN15Screen1ViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase()
 8011a00:	b590      	push	{r4, r7, lr}
 8011a02:	b08b      	sub	sp, #44	@ 0x2c
 8011a04:	af02      	add	r7, sp, #8
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f000 f8e2 	bl	8011bd4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8011a10:	4a51      	ldr	r2, [pc, #324]	@ (8011b58 <_ZN15Screen1ViewBaseC1Ev+0x158>)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	601a      	str	r2, [r3, #0]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	3340      	adds	r3, #64	@ 0x40
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7ff ff9c 	bl	8011958 <_ZN8touchgfx3BoxC1Ev>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	336c      	adds	r3, #108	@ 0x6c
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7ff ff97 	bl	8011958 <_ZN8touchgfx3BoxC1Ev>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	3398      	adds	r3, #152	@ 0x98
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7ff ff92 	bl	8011958 <_ZN8touchgfx3BoxC1Ev>
{
    __background.setPosition(0, 0, 416, 416);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8011a3a:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8011a3e:	9300      	str	r3, [sp, #0]
 8011a40:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8011a44:	2200      	movs	r2, #0
 8011a46:	2100      	movs	r1, #0
 8011a48:	f7ff fd92 	bl	8011570 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8011a52:	2300      	movs	r3, #0
 8011a54:	767b      	strb	r3, [r7, #25]
 8011a56:	2300      	movs	r3, #0
 8011a58:	763b      	strb	r3, [r7, #24]
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	75fb      	strb	r3, [r7, #23]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8011a5e:	7e7b      	ldrb	r3, [r7, #25]
 8011a60:	041a      	lsls	r2, r3, #16
 8011a62:	7e3b      	ldrb	r3, [r7, #24]
 8011a64:	021b      	lsls	r3, r3, #8
 8011a66:	431a      	orrs	r2, r3
 8011a68:	7dfb      	ldrb	r3, [r7, #23]
 8011a6a:	4313      	orrs	r3, r2
 8011a6c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011a70:	f107 0310 	add.w	r3, r7, #16
 8011a74:	4611      	mov	r1, r2
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7ff fce6 	bl	8011448 <_ZN8touchgfx9colortypeC1Em>
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	4619      	mov	r1, r3
 8011a80:	4620      	mov	r0, r4
 8011a82:	f7ff ff8d 	bl	80119a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	3340      	adds	r3, #64	@ 0x40
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	4610      	mov	r0, r2
 8011a90:	f7ff ff1e 	bl	80118d0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 238, 208);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8011a9a:	23d0      	movs	r3, #208	@ 0xd0
 8011a9c:	9300      	str	r3, [sp, #0]
 8011a9e:	23ee      	movs	r3, #238	@ 0xee
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	2100      	movs	r1, #0
 8011aa4:	f7ff fd64 	bl	8011570 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(61, 103, 166));
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8011aae:	233d      	movs	r3, #61	@ 0x3d
 8011ab0:	773b      	strb	r3, [r7, #28]
 8011ab2:	2367      	movs	r3, #103	@ 0x67
 8011ab4:	76fb      	strb	r3, [r7, #27]
 8011ab6:	23a6      	movs	r3, #166	@ 0xa6
 8011ab8:	76bb      	strb	r3, [r7, #26]
 8011aba:	7f3b      	ldrb	r3, [r7, #28]
 8011abc:	041a      	lsls	r2, r3, #16
 8011abe:	7efb      	ldrb	r3, [r7, #27]
 8011ac0:	021b      	lsls	r3, r3, #8
 8011ac2:	431a      	orrs	r2, r3
 8011ac4:	7ebb      	ldrb	r3, [r7, #26]
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011acc:	f107 030c 	add.w	r3, r7, #12
 8011ad0:	4611      	mov	r1, r2
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7ff fcb8 	bl	8011448 <_ZN8touchgfx9colortypeC1Em>
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	4619      	mov	r1, r3
 8011adc:	4620      	mov	r0, r4
 8011ade:	f7ff ff5f 	bl	80119a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	336c      	adds	r3, #108	@ 0x6c
 8011ae8:	4619      	mov	r1, r3
 8011aea:	4610      	mov	r0, r2
 8011aec:	f7ff fef0 	bl	80118d0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box2.setPosition(169, 149, 247, 267);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8011af6:	f240 130b 	movw	r3, #267	@ 0x10b
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	23f7      	movs	r3, #247	@ 0xf7
 8011afe:	2295      	movs	r2, #149	@ 0x95
 8011b00:	21a9      	movs	r1, #169	@ 0xa9
 8011b02:	f7ff fd35 	bl	8011570 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(130, 44, 138));
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 8011b0c:	2382      	movs	r3, #130	@ 0x82
 8011b0e:	77fb      	strb	r3, [r7, #31]
 8011b10:	232c      	movs	r3, #44	@ 0x2c
 8011b12:	77bb      	strb	r3, [r7, #30]
 8011b14:	238a      	movs	r3, #138	@ 0x8a
 8011b16:	777b      	strb	r3, [r7, #29]
 8011b18:	7ffb      	ldrb	r3, [r7, #31]
 8011b1a:	041a      	lsls	r2, r3, #16
 8011b1c:	7fbb      	ldrb	r3, [r7, #30]
 8011b1e:	021b      	lsls	r3, r3, #8
 8011b20:	431a      	orrs	r2, r3
 8011b22:	7f7b      	ldrb	r3, [r7, #29]
 8011b24:	4313      	orrs	r3, r2
 8011b26:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011b2a:	f107 0308 	add.w	r3, r7, #8
 8011b2e:	4611      	mov	r1, r2
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7ff fc89 	bl	8011448 <_ZN8touchgfx9colortypeC1Em>
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f7ff ff30 	bl	80119a0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box2);
 8011b40:	687a      	ldr	r2, [r7, #4]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	3398      	adds	r3, #152	@ 0x98
 8011b46:	4619      	mov	r1, r3
 8011b48:	4610      	mov	r0, r2
 8011b4a:	f7ff fec1 	bl	80118d0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4618      	mov	r0, r3
 8011b52:	3724      	adds	r7, #36	@ 0x24
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd90      	pop	{r4, r7, pc}
 8011b58:	0802dc04 	.word	0x0802dc04

08011b5c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	4a0d      	ldr	r2, [pc, #52]	@ (8011b9c <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	601a      	str	r2, [r3, #0]
{

}
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	3398      	adds	r3, #152	@ 0x98
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f000 f868 	bl	8011c44 <_ZN8touchgfx3BoxD1Ev>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	336c      	adds	r3, #108	@ 0x6c
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f000 f863 	bl	8011c44 <_ZN8touchgfx3BoxD1Ev>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	3340      	adds	r3, #64	@ 0x40
 8011b82:	4618      	mov	r0, r3
 8011b84:	f000 f85e 	bl	8011c44 <_ZN8touchgfx3BoxD1Ev>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7ff ff16 	bl	80119bc <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	4618      	mov	r0, r3
 8011b94:	3708      	adds	r7, #8
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	0802dc04 	.word	0x0802dc04

08011ba0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
}
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff ffd7 	bl	8011b5c <_ZN15Screen1ViewBaseD1Ev>
 8011bae:	21c4      	movs	r1, #196	@ 0xc4
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f019 ffd4 	bl	802bb5e <_ZdlPvj>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3708      	adds	r7, #8
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]

}
 8011bc8:	bf00      	nop
 8011bca:	370c      	adds	r7, #12
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr

08011bd4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f006 f966 	bl	8017eb0 <_ZN8touchgfx6ScreenC1Ev>
 8011be4:	4a05      	ldr	r2, [pc, #20]	@ (8011bfc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	601a      	str	r2, [r3, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2200      	movs	r2, #0
 8011bee:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	0802dc38 	.word	0x0802dc38

08011c00 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	4a05      	ldr	r2, [pc, #20]	@ (8011c20 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	601a      	str	r2, [r3, #0]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7ff fc6f 	bl	80114f4 <_ZN8touchgfx8DrawableD1Ev>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3708      	adds	r7, #8
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	0802e1a4 	.word	0x0802e1a4

08011c24 <_ZN8touchgfx9ContainerD0Ev>:
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7ff ffe7 	bl	8011c00 <_ZN8touchgfx9ContainerD1Ev>
 8011c32:	212c      	movs	r1, #44	@ 0x2c
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f019 ff92 	bl	802bb5e <_ZdlPvj>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b082      	sub	sp, #8
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	4a05      	ldr	r2, [pc, #20]	@ (8011c64 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	601a      	str	r2, [r3, #0]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ff fe5d 	bl	8011914 <_ZN8touchgfx6WidgetD1Ev>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3708      	adds	r7, #8
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	0802e38c 	.word	0x0802e38c

08011c68 <_ZN8touchgfx3BoxD0Ev>:
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7ff ffe7 	bl	8011c44 <_ZN8touchgfx3BoxD1Ev>
 8011c76:	212c      	movs	r1, #44	@ 0x2c
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f019 ff70 	bl	802bb5e <_ZdlPvj>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4618      	mov	r0, r3
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011c88:	b480      	push	{r7}
 8011c8a:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011c8c:	4b02      	ldr	r3, [pc, #8]	@ (8011c98 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr
 8011c98:	0802dccc 	.word	0x0802dccc

08011c9c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011ca0:	2301      	movs	r3, #1
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr

08011cac <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8011cac:	b480      	push	{r7}
 8011cae:	b085      	sub	sp, #20
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	460b      	mov	r3, r1
 8011cb6:	607a      	str	r2, [r7, #4]
 8011cb8:	817b      	strh	r3, [r7, #10]
        return 0;
 8011cba:	2300      	movs	r3, #0
    }
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3714      	adds	r7, #20
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc6:	4770      	bx	lr

08011cc8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 8011cc8:	b480      	push	{r7}
 8011cca:	b083      	sub	sp, #12
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
        return 0;
 8011cd0:	2300      	movs	r3, #0
    }
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	370c      	adds	r7, #12
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8011cde:	b480      	push	{r7}
 8011ce0:	b083      	sub	sp, #12
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
        return 0;
 8011ce6:	2300      	movs	r3, #0
    }
 8011ce8:	4618      	mov	r0, r3
 8011cea:	370c      	adds	r7, #12
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr

08011cf4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011cf4:	b480      	push	{r7}
 8011cf6:	b085      	sub	sp, #20
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8011d02:	4a07      	ldr	r2, [pc, #28]	@ (8011d20 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011d08:	4a06      	ldr	r2, [pc, #24]	@ (8011d24 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8011d0e:	4a06      	ldr	r2, [pc, #24]	@ (8011d28 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011d10:	88fb      	ldrh	r3, [r7, #6]
 8011d12:	8013      	strh	r3, [r2, #0]
    }
 8011d14:	bf00      	nop
 8011d16:	3714      	adds	r7, #20
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr
 8011d20:	2015a0c8 	.word	0x2015a0c8
 8011d24:	2015a0d0 	.word	0x2015a0d0
 8011d28:	2015a0cc 	.word	0x2015a0cc

08011d2c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011d2c:	b40e      	push	{r1, r2, r3}
 8011d2e:	b580      	push	{r7, lr}
 8011d30:	b085      	sub	sp, #20
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8011d36:	f107 0320 	add.w	r3, r7, #32
 8011d3a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	69fa      	ldr	r2, [r7, #28]
 8011d40:	2100      	movs	r1, #0
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f005 fcea 	bl	801771c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011d4c:	89fb      	ldrh	r3, [r7, #14]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3714      	adds	r7, #20
 8011d52:	46bd      	mov	sp, r7
 8011d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011d58:	b003      	add	sp, #12
 8011d5a:	4770      	bx	lr

08011d5c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011d5c:	b40c      	push	{r2, r3}
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b084      	sub	sp, #16
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	460b      	mov	r3, r1
 8011d68:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8011d6a:	f107 031c 	add.w	r3, r7, #28
 8011d6e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011d70:	78f9      	ldrb	r1, [r7, #3]
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	69ba      	ldr	r2, [r7, #24]
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f005 fcd0 	bl	801771c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011d80:	89fb      	ldrh	r3, [r7, #14]
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	3710      	adds	r7, #16
 8011d86:	46bd      	mov	sp, r7
 8011d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011d8c:	b002      	add	sp, #8
 8011d8e:	4770      	bx	lr

08011d90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b08a      	sub	sp, #40	@ 0x28
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	460b      	mov	r3, r1
 8011d9a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d016      	beq.n	8011dd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	3322      	adds	r3, #34	@ 0x22
 8011da8:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dac:	8adb      	ldrh	r3, [r3, #22]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d105      	bne.n	8011dbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8011db2:	4b43      	ldr	r3, [pc, #268]	@ (8011ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011db4:	4a43      	ldr	r2, [pc, #268]	@ (8011ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011db6:	21c5      	movs	r1, #197	@ 0xc5
 8011db8:	4843      	ldr	r0, [pc, #268]	@ (8011ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011dba:	f019 fefd 	bl	802bbb8 <__assert_func>
            return buffer[pos];
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc0:	8a9b      	ldrh	r3, [r3, #20]
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d001      	beq.n	8011dd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e000      	b.n	8011dd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d06a      	beq.n	8011eae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f006 fedc 	bl	8018b96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	3322      	adds	r3, #34	@ 0x22
 8011de2:	623b      	str	r3, [r7, #32]
 8011de4:	2301      	movs	r3, #1
 8011de6:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011de8:	6a3b      	ldr	r3, [r7, #32]
 8011dea:	8adb      	ldrh	r3, [r3, #22]
 8011dec:	8bfa      	ldrh	r2, [r7, #30]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d305      	bcc.n	8011dfe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8011df2:	4b36      	ldr	r3, [pc, #216]	@ (8011ecc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011df4:	4a36      	ldr	r2, [pc, #216]	@ (8011ed0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011df6:	21cb      	movs	r1, #203	@ 0xcb
 8011df8:	4833      	ldr	r0, [pc, #204]	@ (8011ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011dfa:	f019 fedd 	bl	802bbb8 <__assert_func>
            const uint16_t index = pos + offset;
 8011dfe:	6a3b      	ldr	r3, [r7, #32]
 8011e00:	8a9a      	ldrh	r2, [r3, #20]
 8011e02:	8bfb      	ldrh	r3, [r7, #30]
 8011e04:	4413      	add	r3, r2
 8011e06:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011e08:	8bbb      	ldrh	r3, [r7, #28]
 8011e0a:	2b09      	cmp	r3, #9
 8011e0c:	d801      	bhi.n	8011e12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8011e0e:	8bbb      	ldrh	r3, [r7, #28]
 8011e10:	e001      	b.n	8011e16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8011e12:	8bbb      	ldrh	r3, [r7, #28]
 8011e14:	3b0a      	subs	r3, #10
 8011e16:	6a3a      	ldr	r2, [r7, #32]
 8011e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e1c:	f640 123f 	movw	r2, #2367	@ 0x93f
 8011e20:	4293      	cmp	r3, r2
 8011e22:	bf0c      	ite	eq
 8011e24:	2301      	moveq	r3, #1
 8011e26:	2300      	movne	r3, #0
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d03f      	beq.n	8011eae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	3322      	adds	r3, #34	@ 0x22
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	3222      	adds	r2, #34	@ 0x22
 8011e36:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	8ad2      	ldrh	r2, [r2, #22]
 8011e3c:	2a00      	cmp	r2, #0
 8011e3e:	d105      	bne.n	8011e4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8011e40:	4b1f      	ldr	r3, [pc, #124]	@ (8011ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011e42:	4a20      	ldr	r2, [pc, #128]	@ (8011ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011e44:	21c5      	movs	r1, #197	@ 0xc5
 8011e46:	4820      	ldr	r0, [pc, #128]	@ (8011ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011e48:	f019 feb6 	bl	802bbb8 <__assert_func>
            return buffer[pos];
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	8a92      	ldrh	r2, [r2, #20]
 8011e50:	4611      	mov	r1, r2
 8011e52:	68ba      	ldr	r2, [r7, #8]
 8011e54:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011e58:	613b      	str	r3, [r7, #16]
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	8adb      	ldrh	r3, [r3, #22]
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d806      	bhi.n	8011e74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011e66:	4b1b      	ldr	r3, [pc, #108]	@ (8011ed4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011e68:	4a1b      	ldr	r2, [pc, #108]	@ (8011ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8011e6a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8011e6e:	4816      	ldr	r0, [pc, #88]	@ (8011ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011e70:	f019 fea2 	bl	802bbb8 <__assert_func>
            const uint16_t index = pos + 1;
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	8a9b      	ldrh	r3, [r3, #20]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8011e7c:	89bb      	ldrh	r3, [r7, #12]
 8011e7e:	2b09      	cmp	r3, #9
 8011e80:	d801      	bhi.n	8011e86 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8011e82:	89bb      	ldrh	r3, [r7, #12]
 8011e84:	e000      	b.n	8011e88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8011e86:	2300      	movs	r3, #0
 8011e88:	693a      	ldr	r2, [r7, #16]
 8011e8a:	89f9      	ldrh	r1, [r7, #14]
 8011e8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011e90:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	3322      	adds	r3, #34	@ 0x22
 8011e96:	61bb      	str	r3, [r7, #24]
 8011e98:	f640 133f 	movw	r3, #2367	@ 0x93f
 8011e9c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	8a9b      	ldrh	r3, [r3, #20]
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	69bb      	ldr	r3, [r7, #24]
 8011ea6:	8afa      	ldrh	r2, [r7, #22]
 8011ea8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8011eac:	bf00      	nop
        }
    }
    return getNextChar();
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f006 fd74 	bl	801899c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011eb4:	4603      	mov	r3, r0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3728      	adds	r7, #40	@ 0x28
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	0802cf84 	.word	0x0802cf84
 8011ec4:	0802cf90 	.word	0x0802cf90
 8011ec8:	0802d03c 	.word	0x0802d03c
 8011ecc:	0802d084 	.word	0x0802d084
 8011ed0:	0802d094 	.word	0x0802d094
 8011ed4:	0802d168 	.word	0x0802d168
 8011ed8:	0802d174 	.word	0x0802d174

08011edc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f006 fd20 	bl	801892a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011eea:	bf00      	nop
 8011eec:	3708      	adds	r7, #8
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
	...

08011ef4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011ef4:	b590      	push	{r4, r7, lr}
 8011ef6:	b085      	sub	sp, #20
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	4603      	mov	r3, r0
 8011efc:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011efe:	2300      	movs	r3, #0
 8011f00:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011f02:	88fb      	ldrh	r3, [r7, #6]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d127      	bne.n	8011f58 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011f08:	88fb      	ldrh	r3, [r7, #6]
 8011f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8011f84 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d016      	beq.n	8011f42 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011f14:	88fb      	ldrh	r3, [r7, #6]
 8011f16:	4a1b      	ldr	r2, [pc, #108]	@ (8011f84 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f1c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	68ba      	ldr	r2, [r7, #8]
 8011f24:	4413      	add	r3, r2
 8011f26:	4a18      	ldr	r2, [pc, #96]	@ (8011f88 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011f28:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	68ba      	ldr	r2, [r7, #8]
 8011f30:	4413      	add	r3, r2
 8011f32:	4a16      	ldr	r2, [pc, #88]	@ (8011f8c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011f34:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	689b      	ldr	r3, [r3, #8]
 8011f3a:	68ba      	ldr	r2, [r7, #8]
 8011f3c:	4413      	add	r3, r2
 8011f3e:	60fb      	str	r3, [r7, #12]
 8011f40:	e00a      	b.n	8011f58 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011f42:	4b11      	ldr	r3, [pc, #68]	@ (8011f88 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011f44:	4a12      	ldr	r2, [pc, #72]	@ (8011f90 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011f46:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011f48:	4a12      	ldr	r2, [pc, #72]	@ (8011f94 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011f4a:	4b10      	ldr	r3, [pc, #64]	@ (8011f8c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011f4c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011f4e:	88fb      	ldrh	r3, [r7, #6]
 8011f50:	4a11      	ldr	r2, [pc, #68]	@ (8011f98 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8011f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f56:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d00d      	beq.n	8011f7a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8011f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8011f9c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8011f60:	88fb      	ldrh	r3, [r7, #6]
 8011f62:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8011f64:	f000 f824 	bl	8011fb0 <_ZN17TypedTextDatabase8getFontsEv>
 8011f68:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8011f6a:	f000 f819 	bl	8011fa0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	461a      	mov	r2, r3
 8011f72:	4621      	mov	r1, r4
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7ff febd 	bl	8011cf4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8011f7a:	bf00      	nop
 8011f7c:	3714      	adds	r7, #20
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd90      	pop	{r4, r7, pc}
 8011f82:	bf00      	nop
 8011f84:	2015861c 	.word	0x2015861c
 8011f88:	20158624 	.word	0x20158624
 8011f8c:	20158628 	.word	0x20158628
 8011f90:	08030acc 	.word	0x08030acc
 8011f94:	08030ac8 	.word	0x08030ac8
 8011f98:	08030ad4 	.word	0x08030ad4
 8011f9c:	20158620 	.word	0x20158620

08011fa0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	af00      	add	r7, sp, #0
    return 0;
 8011fa4:	2300      	movs	r3, #0
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011fb4:	4b02      	ldr	r3, [pc, #8]	@ (8011fc0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr
 8011fc0:	2015862c 	.word	0x2015862c

08011fc4 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d113      	bne.n	8011ffc <_Z41__static_initialization_and_destruction_0ii+0x38>
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d10e      	bne.n	8011ffc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8011fde:	f7fe fc69 	bl	80108b4 <_Z23getFont_verdana_20_4bppv>
 8011fe2:	4603      	mov	r3, r0
};
 8011fe4:	4a07      	ldr	r2, [pc, #28]	@ (8012004 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011fe6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8011fe8:	f7fe fcbc 	bl	8010964 <_Z23getFont_verdana_40_4bppv>
 8011fec:	4603      	mov	r3, r0
};
 8011fee:	4a05      	ldr	r2, [pc, #20]	@ (8012004 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011ff0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8011ff2:	f7fe fc07 	bl	8010804 <_Z23getFont_verdana_10_4bppv>
 8011ff6:	4603      	mov	r3, r0
};
 8011ff8:	4a02      	ldr	r2, [pc, #8]	@ (8012004 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8011ffa:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8011ffc:	bf00      	nop
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	2015862c 	.word	0x2015862c

08012008 <_GLOBAL__sub_I_touchgfx_fonts>:
 8012008:	b580      	push	{r7, lr}
 801200a:	af00      	add	r7, sp, #0
 801200c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012010:	2001      	movs	r0, #1
 8012012:	f7ff ffd7 	bl	8011fc4 <_Z41__static_initialization_and_destruction_0ii>
 8012016:	bd80      	pop	{r7, pc}

08012018 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	4a05      	ldr	r2, [pc, #20]	@ (8012038 <_ZN19FrontendApplicationD1Ev+0x20>)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	601a      	str	r2, [r3, #0]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe fedd 	bl	8010de8 <_ZN23FrontendApplicationBaseD1Ev>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	4618      	mov	r0, r3
 8012032:	3708      	adds	r7, #8
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	0802dd4c 	.word	0x0802dd4c

0801203c <_ZN19FrontendApplicationD0Ev>:
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff ffe7 	bl	8012018 <_ZN19FrontendApplicationD1Ev>
 801204a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f019 fd85 	bl	802bb5e <_ZdlPvj>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	4618      	mov	r0, r3
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}

0801205e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801205e:	b580      	push	{r7, lr}
 8012060:	b082      	sub	sp, #8
 8012062:	af00      	add	r7, sp, #0
 8012064:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801206c:	4618      	mov	r0, r3
 801206e:	f000 f82d 	bl	80120cc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	4618      	mov	r0, r3
 8012076:	f004 fc87 	bl	8016988 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801207a:	bf00      	nop
 801207c:	3708      	adds	r7, #8
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
	...

08012084 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	68b9      	ldr	r1, [r7, #8]
 8012096:	4618      	mov	r0, r3
 8012098:	f7fe fef6 	bl	8010e88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801209c:	4a03      	ldr	r2, [pc, #12]	@ (80120ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	601a      	str	r2, [r3, #0]
{

}
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	4618      	mov	r0, r3
 80120a6:	3710      	adds	r7, #16
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	0802dd4c 	.word	0x0802dd4c

080120b0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	601a      	str	r2, [r3, #0]
{

}
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4618      	mov	r0, r3
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <_ZN5Model4tickEv>:

void Model::tick()
{
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]

}
 80120d4:	bf00      	nop
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
    {
    }
 80120e8:	bf00      	nop
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr

080120f4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
    {
    }
 80120fc:	bf00      	nop
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr

08012108 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
    {
 8012110:	4a04      	ldr	r2, [pc, #16]	@ (8012124 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	601a      	str	r2, [r3, #0]
    }
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	4618      	mov	r0, r3
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr
 8012124:	0802ddd8 	.word	0x0802ddd8

08012128 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
    }
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f7ff ffe9 	bl	8012108 <_ZN8touchgfx9PresenterD1Ev>
 8012136:	2104      	movs	r1, #4
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f019 fd10 	bl	802bb5e <_ZdlPvj>
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
    {
 8012150:	4a04      	ldr	r2, [pc, #16]	@ (8012164 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	601a      	str	r2, [r3, #0]
    }
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	4618      	mov	r0, r3
 801215a:	370c      	adds	r7, #12
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr
 8012164:	0802ddd8 	.word	0x0802ddd8

08012168 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	4a06      	ldr	r2, [pc, #24]	@ (801218c <_ZN13ModelListenerC1Ev+0x24>)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	601a      	str	r2, [r3, #0]
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2200      	movs	r2, #0
 801217a:	605a      	str	r2, [r3, #4]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	4618      	mov	r0, r3
 8012180:	370c      	adds	r7, #12
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr
 801218a:	bf00      	nop
 801218c:	0802ddc8 	.word	0x0802ddc8

08012190 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	4a04      	ldr	r2, [pc, #16]	@ (80121ac <_ZN13ModelListenerD1Ev+0x1c>)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	601a      	str	r2, [r3, #0]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	4618      	mov	r0, r3
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr
 80121ac:	0802ddc8 	.word	0x0802ddc8

080121b0 <_ZN13ModelListenerD0Ev>:
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f7ff ffe9 	bl	8012190 <_ZN13ModelListenerD1Ev>
 80121be:	2108      	movs	r1, #8
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f019 fccc 	bl	802bb5e <_ZdlPvj>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4618      	mov	r0, r3
 80121ca:	3708      	adds	r7, #8
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	4a09      	ldr	r2, [pc, #36]	@ (8012200 <_ZN16Screen1PresenterD1Ev+0x30>)
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	601a      	str	r2, [r3, #0]
 80121de:	4a09      	ldr	r2, [pc, #36]	@ (8012204 <_ZN16Screen1PresenterD1Ev+0x34>)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	605a      	str	r2, [r3, #4]
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	3304      	adds	r3, #4
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7ff ffd1 	bl	8012190 <_ZN13ModelListenerD1Ev>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7ff ff89 	bl	8012108 <_ZN8touchgfx9PresenterD1Ev>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	4618      	mov	r0, r3
 80121fa:	3708      	adds	r7, #8
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	0802dda0 	.word	0x0802dda0
 8012204:	0802ddb8 	.word	0x0802ddb8

08012208 <_ZThn4_N16Screen1PresenterD1Ev>:
 8012208:	f1a0 0004 	sub.w	r0, r0, #4
 801220c:	e7e0      	b.n	80121d0 <_ZN16Screen1PresenterD1Ev>
 801220e:	bf00      	nop

08012210 <_ZN16Screen1PresenterD0Ev>:
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f7ff ffd9 	bl	80121d0 <_ZN16Screen1PresenterD1Ev>
 801221e:	2110      	movs	r1, #16
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f019 fc9c 	bl	802bb5e <_ZdlPvj>
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	3708      	adds	r7, #8
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}

08012230 <_ZThn4_N16Screen1PresenterD0Ev>:
 8012230:	f1a0 0004 	sub.w	r0, r0, #4
 8012234:	e7ec      	b.n	8012210 <_ZN16Screen1PresenterD0Ev>
	...

08012238 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8012238:	b580      	push	{r7, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
    : view(v)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	4618      	mov	r0, r3
 8012246:	f7ff ff7f 	bl	8012148 <_ZN8touchgfx9PresenterC1Ev>
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	3304      	adds	r3, #4
 801224e:	4618      	mov	r0, r3
 8012250:	f7ff ff8a 	bl	8012168 <_ZN13ModelListenerC1Ev>
 8012254:	4a06      	ldr	r2, [pc, #24]	@ (8012270 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	4a06      	ldr	r2, [pc, #24]	@ (8012274 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	605a      	str	r2, [r3, #4]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	683a      	ldr	r2, [r7, #0]
 8012264:	60da      	str	r2, [r3, #12]
{

}
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4618      	mov	r0, r3
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	0802dda0 	.word	0x0802dda0
 8012274:	0802ddb8 	.word	0x0802ddb8

08012278 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8012278:	b480      	push	{r7}
 801227a:	b083      	sub	sp, #12
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]

}
 8012280:	bf00      	nop
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228a:	4770      	bx	lr

0801228c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801228c:	b480      	push	{r7}
 801228e:	b083      	sub	sp, #12
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]

}
 8012294:	bf00      	nop
 8012296:	370c      	adds	r7, #12
 8012298:	46bd      	mov	sp, r7
 801229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229e:	4770      	bx	lr

080122a0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	4a05      	ldr	r2, [pc, #20]	@ (80122c0 <_ZN11Screen1ViewD1Ev+0x20>)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	601a      	str	r2, [r3, #0]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7ff fc53 	bl	8011b5c <_ZN15Screen1ViewBaseD1Ev>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4618      	mov	r0, r3
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	0802ddf0 	.word	0x0802ddf0

080122c4 <_ZN11Screen1ViewD0Ev>:
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b082      	sub	sp, #8
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7ff ffe7 	bl	80122a0 <_ZN11Screen1ViewD1Ev>
 80122d2:	21c4      	movs	r1, #196	@ 0xc4
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f019 fc42 	bl	802bb5e <_ZdlPvj>
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	4618      	mov	r0, r3
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7ff fb86 	bl	8011a00 <_ZN15Screen1ViewBaseC1Ev>
 80122f4:	4a03      	ldr	r2, [pc, #12]	@ (8012304 <_ZN11Screen1ViewC1Ev+0x20>)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	601a      	str	r2, [r3, #0]
{

}
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	4618      	mov	r0, r3
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	0802ddf0 	.word	0x0802ddf0

08012308 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	4618      	mov	r0, r3
 8012314:	f7ff fc54 	bl	8011bc0 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8012318:	bf00      	nop
 801231a:	3708      	adds	r7, #8
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4618      	mov	r0, r3
 801232c:	f7ff fab0 	bl	8011890 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012330:	bf00      	nop
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
    {
 8012340:	4a04      	ldr	r2, [pc, #16]	@ (8012354 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	601a      	str	r2, [r3, #0]
    }
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	4618      	mov	r0, r3
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr
 8012354:	0802de3c 	.word	0x0802de3c

08012358 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
    }
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7ff ffe9 	bl	8012338 <_ZN8touchgfx15TouchControllerD1Ev>
 8012366:	2104      	movs	r1, #4
 8012368:	6878      	ldr	r0, [r7, #4]
 801236a:	f019 fbf8 	bl	802bb5e <_ZdlPvj>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	4618      	mov	r0, r3
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8012378:	b480      	push	{r7}
 801237a:	b083      	sub	sp, #12
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012380:	bf00      	nop
 8012382:	370c      	adds	r7, #12
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr

0801238c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801238c:	b480      	push	{r7}
 801238e:	b085      	sub	sp, #20
 8012390:	af00      	add	r7, sp, #0
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8012398:	2300      	movs	r3, #0
}
 801239a:	4618      	mov	r0, r3
 801239c:	3714      	adds	r7, #20
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr
	...

080123a8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
 80123b0:	4a05      	ldr	r2, [pc, #20]	@ (80123c8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	601a      	str	r2, [r3, #0]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7ff ffbd 	bl	8012338 <_ZN8touchgfx15TouchControllerD1Ev>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	4618      	mov	r0, r3
 80123c2:	3708      	adds	r7, #8
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	0802de24 	.word	0x0802de24

080123cc <_ZN20STM32TouchControllerD0Ev>:
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff ffe7 	bl	80123a8 <_ZN20STM32TouchControllerD1Ev>
 80123da:	2104      	movs	r1, #4
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f019 fbbe 	bl	802bb5e <_ZdlPvj>
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	4618      	mov	r0, r3
 80123e6:	3708      	adds	r7, #8
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 80123ec:	b480      	push	{r7}
 80123ee:	af00      	add	r7, sp, #0

}
 80123f0:	bf00      	nop
 80123f2:	46bd      	mov	sp, r7
 80123f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f8:	4770      	bx	lr
	...

080123fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
 8012402:	4603      	mov	r3, r0
 8012404:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8012406:	79fb      	ldrb	r3, [r7, #7]
 8012408:	2b03      	cmp	r3, #3
 801240a:	d80c      	bhi.n	8012426 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 801240c:	a201      	add	r2, pc, #4	@ (adr r2, 8012414 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 801240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012412:	bf00      	nop
 8012414:	08012425 	.word	0x08012425
 8012418:	08012425 	.word	0x08012425
 801241c:	08012425 	.word	0x08012425
 8012420:	08012425 	.word	0x08012425
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8012424:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 8012426:	bf00      	nop
 8012428:	370c      	adds	r7, #12
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop

08012434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8012434:	b480      	push	{r7}
 8012436:	b083      	sub	sp, #12
 8012438:	af00      	add	r7, sp, #0
 801243a:	4603      	mov	r3, r0
 801243c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801243e:	79fb      	ldrb	r3, [r7, #7]
 8012440:	2b03      	cmp	r3, #3
 8012442:	d80c      	bhi.n	801245e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8012444:	a201      	add	r2, pc, #4	@ (adr r2, 801244c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8012446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801244a:	bf00      	nop
 801244c:	0801245d 	.word	0x0801245d
 8012450:	0801245d 	.word	0x0801245d
 8012454:	0801245d 	.word	0x0801245d
 8012458:	0801245d 	.word	0x0801245d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 801245c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 801245e:	bf00      	nop
 8012460:	370c      	adds	r7, #12
 8012462:	46bd      	mov	sp, r7
 8012464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012468:	4770      	bx	lr
 801246a:	bf00      	nop

0801246c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	4603      	mov	r3, r0
 8012474:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8012476:	79fb      	ldrb	r3, [r7, #7]
 8012478:	2b03      	cmp	r3, #3
 801247a:	d80c      	bhi.n	8012496 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 801247c:	a201      	add	r2, pc, #4	@ (adr r2, 8012484 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 801247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012482:	bf00      	nop
 8012484:	08012495 	.word	0x08012495
 8012488:	08012495 	.word	0x08012495
 801248c:	08012495 	.word	0x08012495
 8012490:	08012495 	.word	0x08012495
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8012494:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8012496:	bf00      	nop
 8012498:	370c      	adds	r7, #12
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr
 80124a2:	bf00      	nop

080124a4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80124a4:	b480      	push	{r7}
 80124a6:	b083      	sub	sp, #12
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
    {
 80124ac:	4a04      	ldr	r2, [pc, #16]	@ (80124c0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	601a      	str	r2, [r3, #0]
    }
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4618      	mov	r0, r3
 80124b6:	370c      	adds	r7, #12
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr
 80124c0:	0802e240 	.word	0x0802e240

080124c4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
    }
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f7ff ffe9 	bl	80124a4 <_ZN8touchgfx3HALD1Ev>
 80124d2:	217c      	movs	r1, #124	@ 0x7c
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f019 fb42 	bl	802bb5e <_ZdlPvj>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	3708      	adds	r7, #8
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	460b      	mov	r3, r1
 80124ee:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	78fa      	ldrb	r2, [r7, #3]
 80124f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2201      	movs	r2, #1
 80124fc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8012500:	bf00      	nop
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	460b      	mov	r3, r1
 8012516:	807b      	strh	r3, [r7, #2]
 8012518:	4613      	mov	r3, r2
 801251a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 801251c:	4b0c      	ldr	r3, [pc, #48]	@ (8012550 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 801251e:	881b      	ldrh	r3, [r3, #0]
 8012520:	887a      	ldrh	r2, [r7, #2]
 8012522:	429a      	cmp	r2, r3
 8012524:	d304      	bcc.n	8012530 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8012526:	4b0b      	ldr	r3, [pc, #44]	@ (8012554 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8012528:	881b      	ldrh	r3, [r3, #0]
 801252a:	883a      	ldrh	r2, [r7, #0]
 801252c:	429a      	cmp	r2, r3
 801252e:	d205      	bcs.n	801253c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8012530:	4b09      	ldr	r3, [pc, #36]	@ (8012558 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8012532:	4a0a      	ldr	r2, [pc, #40]	@ (801255c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8012534:	219e      	movs	r1, #158	@ 0x9e
 8012536:	480a      	ldr	r0, [pc, #40]	@ (8012560 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8012538:	f019 fb3e 	bl	802bbb8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 801253c:	4a09      	ldr	r2, [pc, #36]	@ (8012564 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 801253e:	887b      	ldrh	r3, [r7, #2]
 8012540:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8012542:	4a09      	ldr	r2, [pc, #36]	@ (8012568 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8012544:	883b      	ldrh	r3, [r7, #0]
 8012546:	8013      	strh	r3, [r2, #0]
    }
 8012548:	bf00      	nop
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	2015a06c 	.word	0x2015a06c
 8012554:	2015a06e 	.word	0x2015a06e
 8012558:	0802d228 	.word	0x0802d228
 801255c:	0802d28c 	.word	0x0802d28c
 8012560:	0802d2d0 	.word	0x0802d2d0
 8012564:	2015a072 	.word	0x2015a072
 8012568:	2015a074 	.word	0x2015a074

0801256c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 801257a:	2b00      	cmp	r3, #0
 801257c:	d009      	beq.n	8012592 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	685a      	ldr	r2, [r3, #4]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	4610      	mov	r0, r2
 801258c:	4798      	blx	r3
 801258e:	4603      	mov	r3, r0
 8012590:	e000      	b.n	8012594 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8012592:	2300      	movs	r3, #0
    }
 8012594:	4618      	mov	r0, r3
 8012596:	3708      	adds	r7, #8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <_ZN8touchgfx3HAL5vSyncEv>:
    /**
     * Called by the VSync interrupt.
     *
     * Called by the VSync interrupt for counting of LCD refreshes.
     */
    void vSync()
 801259c:	b480      	push	{r7}
 801259e:	b083      	sub	sp, #12
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
    {
        vSyncCnt++;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80125aa:	3301      	adds	r3, #1
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 80125b4:	bf00      	nop
 80125b6:	370c      	adds	r7, #12
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr

080125c0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f002 ffab 	bl	8015524 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	33ac      	adds	r3, #172	@ 0xac
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	4798      	blx	r3
    }
 80125da:	bf00      	nop
 80125dc:	3708      	adds	r7, #8
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}

080125e2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80125e2:	b480      	push	{r7}
 80125e4:	b083      	sub	sp, #12
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	6078      	str	r0, [r7, #4]
 80125ea:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 80125ec:	2300      	movs	r3, #0
    }
 80125ee:	4618      	mov	r0, r3
 80125f0:	370c      	adds	r7, #12
 80125f2:	46bd      	mov	sp, r7
 80125f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f8:	4770      	bx	lr
	...

080125fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b084      	sub	sp, #16
 8012600:	af00      	add	r7, sp, #0
 8012602:	60f8      	str	r0, [r7, #12]
 8012604:	60b9      	str	r1, [r7, #8]
 8012606:	607a      	str	r2, [r7, #4]
 8012608:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d106      	bne.n	801261e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012610:	4b0f      	ldr	r3, [pc, #60]	@ (8012650 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8012612:	4a10      	ldr	r2, [pc, #64]	@ (8012654 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8012614:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8012618:	480f      	ldr	r0, [pc, #60]	@ (8012658 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801261a:	f019 facd 	bl	802bbb8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	68ba      	ldr	r2, [r7, #8]
 8012622:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2b00      	cmp	r3, #0
 801262e:	bf14      	ite	ne
 8012630:	2301      	movne	r3, #1
 8012632:	2300      	moveq	r3, #0
 8012634:	b2da      	uxtb	r2, r3
 8012636:	4b09      	ldr	r3, [pc, #36]	@ (801265c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012638:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	338c      	adds	r3, #140	@ 0x8c
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	6839      	ldr	r1, [r7, #0]
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	4798      	blx	r3
    }
 8012648:	bf00      	nop
 801264a:	3710      	adds	r7, #16
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}
 8012650:	0802d314 	.word	0x0802d314
 8012654:	0802d34c 	.word	0x0802d34c
 8012658:	0802d2d0 	.word	0x0802d2d0
 801265c:	2015a076 	.word	0x2015a076

08012660 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	683a      	ldr	r2, [r7, #0]
 801266e:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	bf14      	ite	ne
 8012676:	2301      	movne	r3, #1
 8012678:	2300      	moveq	r3, #0
 801267a:	b2da      	uxtb	r2, r3
 801267c:	4b03      	ldr	r3, [pc, #12]	@ (801268c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801267e:	701a      	strb	r2, [r3, #0]
    }
 8012680:	bf00      	nop
 8012682:	370c      	adds	r7, #12
 8012684:	46bd      	mov	sp, r7
 8012686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268a:	4770      	bx	lr
 801268c:	2015a077 	.word	0x2015a077

08012690 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8012698:	2300      	movs	r3, #0
    }
 801269a:	4618      	mov	r0, r3
 801269c:	370c      	adds	r7, #12
 801269e:	46bd      	mov	sp, r7
 80126a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a4:	4770      	bx	lr

080126a6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b082      	sub	sp, #8
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
 80126ae:	460b      	mov	r3, r1
 80126b0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d004      	beq.n	80126c4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126be:	887a      	ldrh	r2, [r7, #2]
 80126c0:	4610      	mov	r0, r2
 80126c2:	4798      	blx	r3
        }
    }
 80126c4:	bf00      	nop
 80126c6:	3708      	adds	r7, #8
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}

080126cc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	685a      	ldr	r2, [r3, #4]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	685b      	ldr	r3, [r3, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	3318      	adds	r3, #24
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	4610      	mov	r0, r2
 80126e4:	4798      	blx	r3
 80126e6:	4603      	mov	r3, r0
    }
 80126e8:	4618      	mov	r0, r3
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80126f0:	b480      	push	{r7}
 80126f2:	b085      	sub	sp, #20
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012704:	429a      	cmp	r2, r3
 8012706:	d011      	beq.n	801272c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012708:	4b14      	ldr	r3, [pc, #80]	@ (801275c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d11e      	bne.n	801274e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8012710:	4b13      	ldr	r3, [pc, #76]	@ (8012760 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012712:	881b      	ldrh	r3, [r3, #0]
 8012714:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8012716:	4b13      	ldr	r3, [pc, #76]	@ (8012764 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012718:	881a      	ldrh	r2, [r3, #0]
 801271a:	4b11      	ldr	r3, [pc, #68]	@ (8012760 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801271c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801271e:	4a11      	ldr	r2, [pc, #68]	@ (8012764 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012720:	89bb      	ldrh	r3, [r7, #12]
 8012722:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8012724:	4b0d      	ldr	r3, [pc, #52]	@ (801275c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012726:	2201      	movs	r2, #1
 8012728:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801272a:	e010      	b.n	801274e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801272c:	4b0b      	ldr	r3, [pc, #44]	@ (801275c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d00c      	beq.n	801274e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8012734:	4b0a      	ldr	r3, [pc, #40]	@ (8012760 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012736:	881b      	ldrh	r3, [r3, #0]
 8012738:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801273a:	4b0a      	ldr	r3, [pc, #40]	@ (8012764 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801273c:	881a      	ldrh	r2, [r3, #0]
 801273e:	4b08      	ldr	r3, [pc, #32]	@ (8012760 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012740:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8012742:	4a08      	ldr	r2, [pc, #32]	@ (8012764 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012744:	89fb      	ldrh	r3, [r7, #14]
 8012746:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8012748:	4b04      	ldr	r3, [pc, #16]	@ (801275c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801274a:	2200      	movs	r2, #0
 801274c:	701a      	strb	r2, [r3, #0]
    }
 801274e:	bf00      	nop
 8012750:	3714      	adds	r7, #20
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	2015a070 	.word	0x2015a070
 8012760:	2015a06e 	.word	0x2015a06e
 8012764:	2015a06c 	.word	0x2015a06c

08012768 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
    {
    }
 8012770:	bf00      	nop
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr

0801277c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
    {
    }
 8012784:	bf00      	nop
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <_ZN8touchgfx8HALGPU2DD1Ev>:

#include <nema_cmdlist.h>

namespace touchgfx
{
class HALGPU2D : public touchgfx::HAL
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	4a05      	ldr	r2, [pc, #20]	@ (80127b0 <_ZN8touchgfx8HALGPU2DD1Ev+0x20>)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	601a      	str	r2, [r3, #0]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7ff fe7f 	bl	80124a4 <_ZN8touchgfx3HALD1Ev>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4618      	mov	r0, r3
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	0802e718 	.word	0x0802e718

080127b4 <_ZN8touchgfx8HALGPU2DD0Ev>:
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ff ffe7 	bl	8012790 <_ZN8touchgfx8HALGPU2DD1Ev>
 80127c2:	21a8      	movs	r1, #168	@ 0xa8
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f019 f9ca 	bl	802bb5e <_ZdlPvj>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	4618      	mov	r0, r3
 80127e0:	f002 f8f1 	bl	80149c6 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80127e4:	bf00      	nop
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HALGPU2D
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	4a05      	ldr	r2, [pc, #20]	@ (801280c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	601a      	str	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7ff ffc7 	bl	8012790 <_ZN8touchgfx8HALGPU2DD1Ev>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4618      	mov	r0, r3
 8012806:	3708      	adds	r7, #8
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}
 801280c:	0802e074 	.word	0x0802e074

08012810 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7ff ffe7 	bl	80127ec <_ZN20TouchGFXGeneratedHALD1Ev>
 801281e:	21a8      	movs	r1, #168	@ 0xa8
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f019 f99c 	bl	802bb5e <_ZdlPvj>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4618      	mov	r0, r3
 801282a:	3708      	adds	r7, #8
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	4618      	mov	r0, r3
 801283c:	f7ff ffca 	bl	80127d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8012840:	bf00      	nop
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <_ZN11TouchGFXHAL10initializeEv>:
#include <stm32u5xx_hal_ltdc.h>

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	4618      	mov	r0, r3
 8012854:	f001 fbae 	bl	8013fb4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8012858:	bf00      	nop
 801285a:	3708      	adds	r7, #8
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	4618      	mov	r0, r3
 801286c:	f001 fc50 	bl	8014110 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012870:	4603      	mov	r3, r0
}
 8012872:	4618      	mov	r0, r3
 8012874:	3708      	adds	r7, #8
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b082      	sub	sp, #8
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
 8012882:	6039      	str	r1, [r7, #0]
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6839      	ldr	r1, [r7, #0]
 8012888:	4618      	mov	r0, r3
 801288a:	f001 fc4f 	bl	801412c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801288e:	bf00      	nop
 8012890:	3708      	adds	r7, #8
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012896:	b580      	push	{r7, lr}
 8012898:	b082      	sub	sp, #8
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
 801289e:	6039      	str	r1, [r7, #0]
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6839      	ldr	r1, [r7, #0]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f001 fc57 	bl	8014158 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80128aa:	bf00      	nop
 80128ac:	3708      	adds	r7, #8
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}

080128b2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80128b2:	b580      	push	{r7, lr}
 80128b4:	b084      	sub	sp, #16
 80128b6:	af00      	add	r7, sp, #0
 80128b8:	60f8      	str	r0, [r7, #12]
 80128ba:	60b9      	str	r1, [r7, #8]
 80128bc:	607a      	str	r2, [r7, #4]
 80128be:	603b      	str	r3, [r7, #0]
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	68b9      	ldr	r1, [r7, #8]
 80128c8:	f001 fc54 	bl	8014174 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80128cc:	4603      	mov	r3, r0
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}

080128d6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80128d6:	b580      	push	{r7, lr}
 80128d8:	b082      	sub	sp, #8
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4618      	mov	r0, r3
 80128e2:	f001 fb97 	bl	8014014 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80128e6:	bf00      	nop
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b082      	sub	sp, #8
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f001 fb9f 	bl	801403c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80128fe:	bf00      	nop
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b082      	sub	sp, #8
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	4618      	mov	r0, r3
 8012912:	f001 fba4 	bl	801405e <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8012916:	bf00      	nop
 8012918:	3708      	adds	r7, #8
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}

0801291e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801291e:	b580      	push	{r7, lr}
 8012920:	b082      	sub	sp, #8
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4618      	mov	r0, r3
 801292a:	f001 fba9 	bl	8014080 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801292e:	bf00      	nop
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8012936:	b580      	push	{r7, lr}
 8012938:	b082      	sub	sp, #8
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
	return TouchGFXGeneratedHAL::beginFrame();
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	4618      	mov	r0, r3
 8012942:	f001 fbcb 	bl	80140dc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8012946:	4603      	mov	r3, r0
}
 8012948:	4618      	mov	r0, r3
 801294a:	3708      	adds	r7, #8
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
	TouchGFXGeneratedHAL::endFrame();
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	4618      	mov	r0, r3
 801295c:	f001 fbcb 	bl	80140f6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8012960:	bf00      	nop
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <HAL_DSI_TearingEffectCallback>:

extern "C"
{
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b0ac      	sub	sp, #176	@ 0xb0
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
	GPIO::set(GPIO::VSYNC_FREQ);
 8012970:	2000      	movs	r0, #0
 8012972:	f7ff fd43 	bl	80123fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
	HAL::getInstance()->vSync();
 8012976:	f7fe f909 	bl	8010b8c <_ZN8touchgfx3HAL11getInstanceEv>
 801297a:	4603      	mov	r3, r0
 801297c:	4618      	mov	r0, r3
 801297e:	f7ff fe0d 	bl	801259c <_ZN8touchgfx3HAL5vSyncEv>
	OSWrappers::signalVSync();
 8012982:	f000 f97b 	bl	8012c7c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

//	HAL_LTDC_SetAddress_NoReload(&hltdc, (uint32_t) HAL::getInstance()->getTFTFrameBuffer(), 0);
	LTDC_HandleTypeDef f = hltdc;
 8012986:	4a07      	ldr	r2, [pc, #28]	@ (80129a4 <HAL_DSI_TearingEffectCallback+0x3c>)
 8012988:	f107 0308 	add.w	r3, r7, #8
 801298c:	4611      	mov	r1, r2
 801298e:	22a8      	movs	r2, #168	@ 0xa8
 8012990:	4618      	mov	r0, r3
 8012992:	f019 fbe8 	bl	802c166 <memcpy>
//		// any effect if already swapped.
//		HAL::getInstance()->swapFrameBuffers();
//	}

	// Transfer frame buffer data
	HAL_DSI_Refresh(hdsi);
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f7f4 fa90 	bl	8006ebc <HAL_DSI_Refresh>
}
 801299c:	bf00      	nop
 801299e:	37b0      	adds	r7, #176	@ 0xb0
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	200aecdc 	.word	0x200aecdc

080129a8 <HAL_DSI_EndOfRefreshCallback>:


extern "C"
{
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b084      	sub	sp, #16
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
	//Point LTDC base address to the new frame buffer:
	__HAL_DSI_WRAPPER_DISABLE(hdsi);
 80129b0:	2300      	movs	r3, #0
 80129b2:	60fb      	str	r3, [r7, #12]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f022 0208 	bic.w	r2, r2, #8
 80129c4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80129d0:	f003 0308 	and.w	r3, r3, #8
 80129d4:	60fb      	str	r3, [r7, #12]
 80129d6:	68fb      	ldr	r3, [r7, #12]
//	LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase);
	__HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80129d8:	4b13      	ldr	r3, [pc, #76]	@ (8012a28 <HAL_DSI_EndOfRefreshCallback+0x80>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129de:	4b12      	ldr	r3, [pc, #72]	@ (8012a28 <HAL_DSI_EndOfRefreshCallback+0x80>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f042 0201 	orr.w	r2, r2, #1
 80129e6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 80129e8:	2102      	movs	r1, #2
 80129ea:	480f      	ldr	r0, [pc, #60]	@ (8012a28 <HAL_DSI_EndOfRefreshCallback+0x80>)
 80129ec:	f7f4 fff0 	bl	80079d0 <HAL_LTDC_Reload>
	__HAL_DSI_WRAPPER_ENABLE(hdsi);
 80129f0:	2300      	movs	r3, #0
 80129f2:	60bb      	str	r3, [r7, #8]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	f042 0208 	orr.w	r2, r2, #8
 8012a04:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8012a10:	f003 0308 	and.w	r3, r3, #8
 8012a14:	60bb      	str	r3, [r7, #8]
 8012a16:	68bb      	ldr	r3, [r7, #8]

	GPIO::clear(GPIO::VSYNC_FREQ);
 8012a18:	2000      	movs	r0, #0
 8012a1a:	f7ff fd0b 	bl	8012434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
}
 8012a1e:	bf00      	nop
 8012a20:	3710      	adds	r7, #16
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	200aecdc 	.word	0x200aecdc

08012a2c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	4a05      	ldr	r2, [pc, #20]	@ (8012a4c <_ZN11TouchGFXHALD1Ev+0x20>)
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	601a      	str	r2, [r3, #0]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7ff fed5 	bl	80127ec <_ZN20TouchGFXGeneratedHALD1Ev>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	4618      	mov	r0, r3
 8012a46:	3708      	adds	r7, #8
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	0802de54 	.word	0x0802de54

08012a50 <_ZN11TouchGFXHALD0Ev>:
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f7ff ffe7 	bl	8012a2c <_ZN11TouchGFXHALD1Ev>
 8012a5e:	21a8      	movs	r1, #168	@ 0xa8
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f019 f87c 	bl	802bb5e <_ZdlPvj>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af02      	add	r7, sp, #8
    CHAR* pointer;

    /* Create a byte memory pool from which to allocate the thread stacks.  */
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8012a76:	2334      	movs	r3, #52	@ 0x34
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	2364      	movs	r3, #100	@ 0x64
 8012a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8012b2c <_ZN8touchgfx10OSWrappers10initializeEv+0xbc>)
 8012a7e:	492c      	ldr	r1, [pc, #176]	@ (8012b30 <_ZN8touchgfx10OSWrappers10initializeEv+0xc0>)
 8012a80:	482c      	ldr	r0, [pc, #176]	@ (8012b34 <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8012a82:	f7fd f891 	bl	800fba8 <_txe_byte_pool_create>
 8012a86:	4603      	mov	r3, r0
                            OSWRAPPER_BYTE_POOL_SIZE) != TX_SUCCESS)
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	bf14      	ite	ne
 8012a8c:	2301      	movne	r3, #1
 8012a8e:	2300      	moveq	r3, #0
 8012a90:	b2db      	uxtb	r3, r3
    if (tx_byte_pool_create(&oswrapper_byte_pool, (CHAR*) "OSWrapper Byte Pool", oswrapper_pool_mem,
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d005      	beq.n	8012aa2 <_ZN8touchgfx10OSWrappers10initializeEv+0x32>
    {
        assert(0 && "Failed to create OSWrapper Pool memory!");
 8012a96:	4b28      	ldr	r3, [pc, #160]	@ (8012b38 <_ZN8touchgfx10OSWrappers10initializeEv+0xc8>)
 8012a98:	4a28      	ldr	r2, [pc, #160]	@ (8012b3c <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8012a9a:	2138      	movs	r1, #56	@ 0x38
 8012a9c:	4828      	ldr	r0, [pc, #160]	@ (8012b40 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8012a9e:	f019 f88b 	bl	802bbb8 <__assert_func>
    }

    /* Allocate the vsync_q.  */
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8012aa2:	1d39      	adds	r1, r7, #4
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	2204      	movs	r2, #4
 8012aa8:	4822      	ldr	r0, [pc, #136]	@ (8012b34 <_ZN8touchgfx10OSWrappers10initializeEv+0xc4>)
 8012aaa:	f7fd f809 	bl	800fac0 <_txe_byte_allocate>
 8012aae:	4603      	mov	r3, r0
                         OSWRAPPER_QUEUE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	bf14      	ite	ne
 8012ab4:	2301      	movne	r3, #1
 8012ab6:	2300      	moveq	r3, #0
 8012ab8:	b2db      	uxtb	r3, r3
    if (tx_byte_allocate(&oswrapper_byte_pool, (VOID**) &pointer,
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d005      	beq.n	8012aca <_ZN8touchgfx10OSWrappers10initializeEv+0x5a>
    {
        assert(0 && "Failed to allocate memory for the Vsync Message Queue!");
 8012abe:	4b21      	ldr	r3, [pc, #132]	@ (8012b44 <_ZN8touchgfx10OSWrappers10initializeEv+0xd4>)
 8012ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8012b3c <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8012ac2:	213f      	movs	r1, #63	@ 0x3f
 8012ac4:	481e      	ldr	r0, [pc, #120]	@ (8012b40 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8012ac6:	f019 f877 	bl	802bbb8 <__assert_func>
    }

    // Create a queue of length 1
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2238      	movs	r2, #56	@ 0x38
 8012ace:	9201      	str	r2, [sp, #4]
 8012ad0:	2204      	movs	r2, #4
 8012ad2:	9200      	str	r2, [sp, #0]
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	491c      	ldr	r1, [pc, #112]	@ (8012b48 <_ZN8touchgfx10OSWrappers10initializeEv+0xd8>)
 8012ad8:	481c      	ldr	r0, [pc, #112]	@ (8012b4c <_ZN8touchgfx10OSWrappers10initializeEv+0xdc>)
 8012ada:	f7fd f905 	bl	800fce8 <_txe_queue_create>
 8012ade:	4603      	mov	r3, r0
                        pointer, OSWRAPPER_QUEUE_SIZE) != TX_SUCCESS)
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	bf14      	ite	ne
 8012ae4:	2301      	movne	r3, #1
 8012ae6:	2300      	moveq	r3, #0
 8012ae8:	b2db      	uxtb	r3, r3
    if (tx_queue_create(&vsync_q, (CHAR*) "Vsync Message Queue", TX_1_ULONG,
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d005      	beq.n	8012afa <_ZN8touchgfx10OSWrappers10initializeEv+0x8a>
    {
        assert(0 && "Failed to create Vsync Message Queue!");
 8012aee:	4b18      	ldr	r3, [pc, #96]	@ (8012b50 <_ZN8touchgfx10OSWrappers10initializeEv+0xe0>)
 8012af0:	4a12      	ldr	r2, [pc, #72]	@ (8012b3c <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8012af2:	2146      	movs	r1, #70	@ 0x46
 8012af4:	4812      	ldr	r0, [pc, #72]	@ (8012b40 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8012af6:	f019 f85f 	bl	802bbb8 <__assert_func>
    }

    // Create the Framebuffer Semaphore (Binary)
    if (tx_semaphore_create(&frame_buffer_sem, (CHAR*) "FrameBuffer Semaphore", 1) != TX_SUCCESS)
 8012afa:	231c      	movs	r3, #28
 8012afc:	2201      	movs	r2, #1
 8012afe:	4915      	ldr	r1, [pc, #84]	@ (8012b54 <_ZN8touchgfx10OSWrappers10initializeEv+0xe4>)
 8012b00:	4815      	ldr	r0, [pc, #84]	@ (8012b58 <_ZN8touchgfx10OSWrappers10initializeEv+0xe8>)
 8012b02:	f7fd fa35 	bl	800ff70 <_txe_semaphore_create>
 8012b06:	4603      	mov	r3, r0
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	bf14      	ite	ne
 8012b0c:	2301      	movne	r3, #1
 8012b0e:	2300      	moveq	r3, #0
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d005      	beq.n	8012b22 <_ZN8touchgfx10OSWrappers10initializeEv+0xb2>
    {
        assert(0 && "Failed to create FrameBuffer Semaphore!");
 8012b16:	4b11      	ldr	r3, [pc, #68]	@ (8012b5c <_ZN8touchgfx10OSWrappers10initializeEv+0xec>)
 8012b18:	4a08      	ldr	r2, [pc, #32]	@ (8012b3c <_ZN8touchgfx10OSWrappers10initializeEv+0xcc>)
 8012b1a:	214c      	movs	r1, #76	@ 0x4c
 8012b1c:	4808      	ldr	r0, [pc, #32]	@ (8012b40 <_ZN8touchgfx10OSWrappers10initializeEv+0xd0>)
 8012b1e:	f019 f84b 	bl	802bbb8 <__assert_func>
    }
}
 8012b22:	bf00      	nop
 8012b24:	3708      	adds	r7, #8
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	20158638 	.word	0x20158638
 8012b30:	0802d39c 	.word	0x0802d39c
 8012b34:	2015869c 	.word	0x2015869c
 8012b38:	0802d3b0 	.word	0x0802d3b0
 8012b3c:	0802d3e0 	.word	0x0802d3e0
 8012b40:	0802d410 	.word	0x0802d410
 8012b44:	0802d43c 	.word	0x0802d43c
 8012b48:	0802d47c 	.word	0x0802d47c
 8012b4c:	201586ec 	.word	0x201586ec
 8012b50:	0802d490 	.word	0x0802d490
 8012b54:	0802d4c0 	.word	0x0802d4c0
 8012b58:	201586d0 	.word	0x201586d0
 8012b5c:	0802d4d8 	.word	0x0802d4d8

08012b60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_WAIT_FOREVER) != TX_SUCCESS)
 8012b64:	f04f 31ff 	mov.w	r1, #4294967295
 8012b68:	4809      	ldr	r0, [pc, #36]	@ (8012b90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 8012b6a:	f7fd fa97 	bl	801009c <_txe_semaphore_get>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	bf14      	ite	ne
 8012b74:	2301      	movne	r3, #1
 8012b76:	2300      	moveq	r3, #0
 8012b78:	b2db      	uxtb	r3, r3
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d005      	beq.n	8012b8a <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2a>
    {
        assert(0 && "Failed to get FrameBuffer Semaphore!");
 8012b7e:	4b05      	ldr	r3, [pc, #20]	@ (8012b94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8012b80:	4a05      	ldr	r2, [pc, #20]	@ (8012b98 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 8012b82:	2157      	movs	r1, #87	@ 0x57
 8012b84:	4805      	ldr	r0, [pc, #20]	@ (8012b9c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x3c>)
 8012b86:	f019 f817 	bl	802bbb8 <__assert_func>
    }
}
 8012b8a:	bf00      	nop
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	201586d0 	.word	0x201586d0
 8012b94:	0802d508 	.word	0x0802d508
 8012b98:	0802d534 	.word	0x0802d534
 8012b9c:	0802d410 	.word	0x0802d410

08012ba0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	af00      	add	r7, sp, #0
    if (!frame_buffer_sem.tx_semaphore_count)
 8012ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8012bd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8012ba6:	689b      	ldr	r3, [r3, #8]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d110      	bne.n	8012bce <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8012bac:	4809      	ldr	r0, [pc, #36]	@ (8012bd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8012bae:	f7fd fab7 	bl	8010120 <_txe_semaphore_put>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	bf14      	ite	ne
 8012bb8:	2301      	movne	r3, #1
 8012bba:	2300      	moveq	r3, #0
 8012bbc:	b2db      	uxtb	r3, r3
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d005      	beq.n	8012bce <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2e>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8012bc2:	4b05      	ldr	r3, [pc, #20]	@ (8012bd8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x38>)
 8012bc4:	4a05      	ldr	r2, [pc, #20]	@ (8012bdc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x3c>)
 8012bc6:	2164      	movs	r1, #100	@ 0x64
 8012bc8:	4805      	ldr	r0, [pc, #20]	@ (8012be0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x40>)
 8012bca:	f018 fff5 	bl	802bbb8 <__assert_func>
        }
    }
}
 8012bce:	bf00      	nop
 8012bd0:	bd80      	pop	{r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	201586d0 	.word	0x201586d0
 8012bd8:	0802d574 	.word	0x0802d574
 8012bdc:	0802d5a0 	.word	0x0802d5a0
 8012be0:	0802d410 	.word	0x0802d410

08012be4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	af00      	add	r7, sp, #0
    if (tx_semaphore_get(&frame_buffer_sem, TX_NO_WAIT) != TX_SUCCESS)
 8012be8:	2100      	movs	r1, #0
 8012bea:	4803      	ldr	r0, [pc, #12]	@ (8012bf8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012bec:	f7fd fa56 	bl	801009c <_txe_semaphore_get>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2b00      	cmp	r3, #0
    {
        // Typically we should inform the requester about failing to get this semaphore
        // Maybe we should update the prototype of this method to return the result of the try
        // assert(0 && "Failed to get FrameBuffer Semaphore!");
    }
}
 8012bf4:	bf00      	nop
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	201586d0 	.word	0x201586d0

08012bfc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012c02:	f3ef 8310 	mrs	r3, PRIMASK
 8012c06:	60bb      	str	r3, [r7, #8]
    return(posture);
 8012c08:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8012c0a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012c0c:	b672      	cpsid	i
    return(int_posture);
 8012c0e:	687b      	ldr	r3, [r7, #4]
    TX_INTERRUPT_SAVE_AREA
    TX_DISABLE;
 8012c10:	60fb      	str	r3, [r7, #12]
    _tx_thread_preempt_disable++;
 8012c12:	4b15      	ldr	r3, [pc, #84]	@ (8012c68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	3301      	adds	r3, #1
 8012c18:	4a13      	ldr	r2, [pc, #76]	@ (8012c68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8012c1a:	6013      	str	r3, [r2, #0]
    if (!frame_buffer_sem.tx_semaphore_count)
 8012c1c:	4b13      	ldr	r3, [pc, #76]	@ (8012c6c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8012c1e:	689b      	ldr	r3, [r3, #8]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d110      	bne.n	8012c46 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
    {
        if (tx_semaphore_put(&frame_buffer_sem) != TX_SUCCESS)
 8012c24:	4811      	ldr	r0, [pc, #68]	@ (8012c6c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x70>)
 8012c26:	f7fd fa7b 	bl	8010120 <_txe_semaphore_put>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	bf14      	ite	ne
 8012c30:	2301      	movne	r3, #1
 8012c32:	2300      	moveq	r3, #0
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d005      	beq.n	8012c46 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x4a>
        {
            assert(0 && "Failed to put FrameBuffer Semaphore!");
 8012c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c70 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x74>)
 8012c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8012c74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x78>)
 8012c3e:	218a      	movs	r1, #138	@ 0x8a
 8012c40:	480d      	ldr	r0, [pc, #52]	@ (8012c78 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x7c>)
 8012c42:	f018 ffb9 	bl	802bbb8 <__assert_func>
        }
    }
    _tx_thread_preempt_disable--;
 8012c46:	4b08      	ldr	r3, [pc, #32]	@ (8012c68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	3b01      	subs	r3, #1
 8012c4c:	4a06      	ldr	r2, [pc, #24]	@ (8012c68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x6c>)
 8012c4e:	6013      	str	r3, [r2, #0]
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	f383 8810 	msr	PRIMASK, r3
}
 8012c5a:	bf00      	nop
    TX_RESTORE;
    _tx_thread_system_preempt_check();
 8012c5c:	f7fc fa1a 	bl	800f094 <_tx_thread_system_preempt_check>
}
 8012c60:	bf00      	nop
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	20157f6c 	.word	0x20157f6c
 8012c6c:	201586d0 	.word	0x201586d0
 8012c70:	0802d574 	.word	0x0802d574
 8012c74:	0802d5e0 	.word	0x0802d5e0
 8012c78:	0802d410 	.word	0x0802d410

08012c7c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
    UINT ret;

    // Send the message only if the queue is empty.
    // This call is from ISR, so no need to re-send
    // the message if not yet consumed by threads
    if (vsync_q.tx_queue_enqueued == 0)
 8012c82:	4b0b      	ldr	r3, [pc, #44]	@ (8012cb0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8012c84:	691b      	ldr	r3, [r3, #16]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d10e      	bne.n	8012ca8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
    {
        // This is supposed to be called from Vsync Interrupt Handler
        // So wait_option should be equal to TX_NO_WAIT
        ret = tx_queue_send(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	4909      	ldr	r1, [pc, #36]	@ (8012cb4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x38>)
 8012c8e:	4808      	ldr	r0, [pc, #32]	@ (8012cb0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x34>)
 8012c90:	f7fd f924 	bl	800fedc <_txe_queue_send>
 8012c94:	6078      	str	r0, [r7, #4]
        if (ret != TX_SUCCESS)
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d005      	beq.n	8012ca8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x2c>
        {
            assert(0 && "Failed to Signal Vsync!");
 8012c9c:	4b06      	ldr	r3, [pc, #24]	@ (8012cb8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x3c>)
 8012c9e:	4a07      	ldr	r2, [pc, #28]	@ (8012cbc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8012ca0:	21a6      	movs	r1, #166	@ 0xa6
 8012ca2:	4807      	ldr	r0, [pc, #28]	@ (8012cc0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8012ca4:	f018 ff88 	bl	802bbb8 <__assert_func>
        }
    }
}
 8012ca8:	bf00      	nop
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	201586ec 	.word	0x201586ec
 8012cb4:	20000014 	.word	0x20000014
 8012cb8:	0802d624 	.word	0x0802d624
 8012cbc:	0802d644 	.word	0x0802d644
 8012cc0:	0802d410 	.word	0x0802d410

08012cc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
    UINT ret;

    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_NO_WAIT);
 8012cca:	2200      	movs	r2, #0
 8012ccc:	490f      	ldr	r1, [pc, #60]	@ (8012d0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8012cce:	4810      	ldr	r0, [pc, #64]	@ (8012d10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8012cd0:	f7fd f8ba 	bl	800fe48 <_txe_queue_receive>
 8012cd4:	6078      	str	r0, [r7, #4]

    if ((ret == TX_SUCCESS) || (ret == TX_QUEUE_EMPTY))
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d002      	beq.n	8012ce2 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1e>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2b0a      	cmp	r3, #10
 8012ce0:	d106      	bne.n	8012cf0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        // Then, wait for next VSYNC to occur.
        ret = tx_queue_receive(&vsync_q, &dummy_msg, TX_WAIT_FOREVER);
 8012ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce6:	4909      	ldr	r1, [pc, #36]	@ (8012d0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x48>)
 8012ce8:	4809      	ldr	r0, [pc, #36]	@ (8012d10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x4c>)
 8012cea:	f7fd f8ad 	bl	800fe48 <_txe_queue_receive>
 8012cee:	6078      	str	r0, [r7, #4]
    }

    if (ret != TX_SUCCESS)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d005      	beq.n	8012d02 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x3e>
    {
        assert(0 && "Failed to Wait for Vsync!");
 8012cf6:	4b07      	ldr	r3, [pc, #28]	@ (8012d14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x50>)
 8012cf8:	4a07      	ldr	r2, [pc, #28]	@ (8012d18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x54>)
 8012cfa:	21c9      	movs	r1, #201	@ 0xc9
 8012cfc:	4807      	ldr	r0, [pc, #28]	@ (8012d1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x58>)
 8012cfe:	f018 ff5b 	bl	802bbb8 <__assert_func>
    }
}
 8012d02:	bf00      	nop
 8012d04:	3708      	adds	r7, #8
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}
 8012d0a:	bf00      	nop
 8012d0c:	20000014 	.word	0x20000014
 8012d10:	201586ec 	.word	0x201586ec
 8012d14:	0802d674 	.word	0x0802d674
 8012d18:	0802d698 	.word	0x0802d698
 8012d1c:	0802d410 	.word	0x0802d410

08012d20 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	4603      	mov	r3, r0
 8012d28:	80fb      	strh	r3, [r7, #6]
    tx_thread_sleep(ms);
 8012d2a:	88fb      	ldrh	r3, [r7, #6]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fc f931 	bl	800ef94 <_tx_thread_sleep>
}
 8012d32:	bf00      	nop
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}
	...

08012d3c <__NVIC_EnableIRQ>:
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	4603      	mov	r3, r0
 8012d44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	db0b      	blt.n	8012d66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012d4e:	88fb      	ldrh	r3, [r7, #6]
 8012d50:	f003 021f 	and.w	r2, r3, #31
 8012d54:	4907      	ldr	r1, [pc, #28]	@ (8012d74 <__NVIC_EnableIRQ+0x38>)
 8012d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d5a:	095b      	lsrs	r3, r3, #5
 8012d5c:	2001      	movs	r0, #1
 8012d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8012d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012d66:	bf00      	nop
 8012d68:	370c      	adds	r7, #12
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	e000e100 	.word	0xe000e100

08012d78 <__NVIC_DisableIRQ>:
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	4603      	mov	r3, r0
 8012d80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	db12      	blt.n	8012db0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012d8a:	88fb      	ldrh	r3, [r7, #6]
 8012d8c:	f003 021f 	and.w	r2, r3, #31
 8012d90:	490a      	ldr	r1, [pc, #40]	@ (8012dbc <__NVIC_DisableIRQ+0x44>)
 8012d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d96:	095b      	lsrs	r3, r3, #5
 8012d98:	2001      	movs	r0, #1
 8012d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8012d9e:	3320      	adds	r3, #32
 8012da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012da4:	f3bf 8f4f 	dsb	sy
}
 8012da8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012daa:	f3bf 8f6f 	isb	sy
}
 8012dae:	bf00      	nop
}
 8012db0:	bf00      	nop
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr
 8012dbc:	e000e100 	.word	0xe000e100

08012dc0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8012dc0:	b480      	push	{r7}
 8012dc2:	b083      	sub	sp, #12
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
        : color(0)
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	601a      	str	r2, [r3, #0]
    }
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	370c      	adds	r7, #12
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr

08012ddc <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
        return color;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
    }
 8012de8:	4618      	mov	r0, r3
 8012dea:	370c      	adds	r7, #12
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr

08012df4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
    {
 8012dfc:	4a04      	ldr	r2, [pc, #16]	@ (8012e10 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	601a      	str	r2, [r3, #0]
    }
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4618      	mov	r0, r3
 8012e06:	370c      	adds	r7, #12
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr
 8012e10:	0802df7c 	.word	0x0802df7c

08012e14 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
    }
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7ff ffe9 	bl	8012df4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012e22:	2104      	movs	r1, #4
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f018 fe9a 	bl	802bb5e <_ZdlPvj>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b082      	sub	sp, #8
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	3344      	adds	r3, #68	@ 0x44
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	4798      	blx	r3
    }
 8012e48:	bf00      	nop
 8012e4a:	3708      	adds	r7, #8
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012e50:	b480      	push	{r7}
 8012e52:	b083      	sub	sp, #12
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
    {
 8012e58:	4a04      	ldr	r2, [pc, #16]	@ (8012e6c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	601a      	str	r2, [r3, #0]
    }
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4618      	mov	r0, r3
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr
 8012e6c:	0802e318 	.word	0x0802e318

08012e70 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b082      	sub	sp, #8
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
    }
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff ffe9 	bl	8012e50 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012e7e:	210c      	movs	r1, #12
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f018 fe6c 	bl	802bb5e <_ZdlPvj>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3708      	adds	r7, #8
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012e90:	b480      	push	{r7}
 8012e92:	b083      	sub	sp, #12
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012e9a:	4a09      	ldr	r2, [pc, #36]	@ (8012ec0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	601a      	str	r2, [r3, #0]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	683a      	ldr	r2, [r7, #0]
 8012ea4:	605a      	str	r2, [r3, #4]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	721a      	strb	r2, [r3, #8]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	725a      	strb	r2, [r3, #9]
    {
    }
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	370c      	adds	r7, #12
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr
 8012ec0:	0802e318 	.word	0x0802e318

08012ec4 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8012ecc:	2301      	movs	r3, #1
    }
 8012ece:	4618      	mov	r0, r3
 8012ed0:	370c      	adds	r7, #12
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr

08012eda <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8012eda:	b580      	push	{r7, lr}
 8012edc:	b082      	sub	sp, #8
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8012ee2:	687a      	ldr	r2, [r7, #4]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	3328      	adds	r3, #40	@ 0x28
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	4610      	mov	r0, r2
 8012eee:	4798      	blx	r3
    }
 8012ef0:	bf00      	nop
 8012ef2:	3708      	adds	r7, #8
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	685a      	ldr	r2, [r3, #4]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	3314      	adds	r3, #20
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4610      	mov	r0, r2
 8012f10:	4798      	blx	r3
    }
 8012f12:	bf00      	nop
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b082      	sub	sp, #8
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8012f22:	f7fd fe33 	bl	8010b8c <_ZN8touchgfx3HAL11getInstanceEv>
 8012f26:	4603      	mov	r3, r0
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7ff ffe5 	bl	8012ef8 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8012f2e:	bf00      	nop
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}

08012f36 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012f36:	b580      	push	{r7, lr}
 8012f38:	b082      	sub	sp, #8
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	330c      	adds	r3, #12
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7ff ff3c 	bl	8012dc0 <_ZN8touchgfx9colortypeC1Ev>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3708      	adds	r7, #8
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
	...

08012f54 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8012f54:	b5b0      	push	{r4, r5, r7, lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	330c      	adds	r3, #12
 8012f62:	4619      	mov	r1, r3
 8012f64:	4610      	mov	r0, r2
 8012f66:	f7ff ff93 	bl	8012e90 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8012fa4 <_ZN8STM32DMAC1Ev+0x50>)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	601a      	str	r2, [r3, #0]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f103 000c 	add.w	r0, r3, #12
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	3320      	adds	r3, #32
 8012f7a:	2260      	movs	r2, #96	@ 0x60
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	f002 fc0b 	bl	8015798 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	3320      	adds	r3, #32
 8012f86:	245f      	movs	r4, #95	@ 0x5f
 8012f88:	461d      	mov	r5, r3
 8012f8a:	e004      	b.n	8012f96 <_ZN8STM32DMAC1Ev+0x42>
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	f7ff ffd2 	bl	8012f36 <_ZN8touchgfx6BlitOpC1Ev>
 8012f92:	3c01      	subs	r4, #1
 8012f94:	3524      	adds	r5, #36	@ 0x24
 8012f96:	2c00      	cmp	r4, #0
 8012f98:	daf8      	bge.n	8012f8c <_ZN8STM32DMAC1Ev+0x38>
{
}
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8012fa4:	0802df2c 	.word	0x0802df2c

08012fa8 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	4a09      	ldr	r2, [pc, #36]	@ (8012fd8 <_ZN8STM32DMAD1Ev+0x30>)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012fb6:	2076      	movs	r0, #118	@ 0x76
 8012fb8:	f7ff fede 	bl	8012d78 <__NVIC_DisableIRQ>
}
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	330c      	adds	r3, #12
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f000 fb49 	bl	8013658 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7ff ff41 	bl	8012e50 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	0802df2c 	.word	0x0802df2c

08012fdc <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
}
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f7ff ffdf 	bl	8012fa8 <_ZN8STM32DMAD1Ev>
 8012fea:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f018 fdb5 	bl	802bb5e <_ZdlPvj>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
	...

08013000 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8013008:	4b12      	ldr	r3, [pc, #72]	@ (8013054 <_ZN8STM32DMA10initializeEv+0x54>)
 801300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801300e:	4a11      	ldr	r2, [pc, #68]	@ (8013054 <_ZN8STM32DMA10initializeEv+0x54>)
 8013010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8013018:	4b0e      	ldr	r3, [pc, #56]	@ (8013054 <_ZN8STM32DMA10initializeEv+0x54>)
 801301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801301e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8013022:	60fb      	str	r3, [r7, #12]
 8013024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8013026:	4b0b      	ldr	r3, [pc, #44]	@ (8013054 <_ZN8STM32DMA10initializeEv+0x54>)
 8013028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801302a:	4a0a      	ldr	r2, [pc, #40]	@ (8013054 <_ZN8STM32DMA10initializeEv+0x54>)
 801302c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013030:	6613      	str	r3, [r2, #96]	@ 0x60
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8013032:	4b08      	ldr	r3, [pc, #32]	@ (8013054 <_ZN8STM32DMA10initializeEv+0x54>)
 8013034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013036:	4a07      	ldr	r2, [pc, #28]	@ (8013054 <_ZN8STM32DMA10initializeEv+0x54>)
 8013038:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801303c:	6613      	str	r3, [r2, #96]	@ 0x60

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 801303e:	4b06      	ldr	r3, [pc, #24]	@ (8013058 <_ZN8STM32DMA10initializeEv+0x58>)
 8013040:	4a06      	ldr	r2, [pc, #24]	@ (801305c <_ZN8STM32DMA10initializeEv+0x5c>)
 8013042:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013044:	2076      	movs	r0, #118	@ 0x76
 8013046:	f7ff fe79 	bl	8012d3c <__NVIC_EnableIRQ>
}
 801304a:	bf00      	nop
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}
 8013052:	bf00      	nop
 8013054:	46020c00 	.word	0x46020c00
 8013058:	200aebf0 	.word	0x200aebf0
 801305c:	08012f1b 	.word	0x08012f1b

08013060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	460b      	mov	r3, r1
 801306a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 801306c:	2300      	movs	r3, #0
 801306e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8013070:	78fb      	ldrb	r3, [r7, #3]
 8013072:	2b0b      	cmp	r3, #11
 8013074:	d826      	bhi.n	80130c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8013076:	a201      	add	r2, pc, #4	@ (adr r2, 801307c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801307c:	080130b9 	.word	0x080130b9
 8013080:	080130b3 	.word	0x080130b3
 8013084:	080130ad 	.word	0x080130ad
 8013088:	080130c5 	.word	0x080130c5
 801308c:	080130c5 	.word	0x080130c5
 8013090:	080130c5 	.word	0x080130c5
 8013094:	080130c5 	.word	0x080130c5
 8013098:	080130bf 	.word	0x080130bf
 801309c:	080130bf 	.word	0x080130bf
 80130a0:	080130bf 	.word	0x080130bf
 80130a4:	080130bf 	.word	0x080130bf
 80130a8:	080130bf 	.word	0x080130bf
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80130ac:	2300      	movs	r3, #0
 80130ae:	60fb      	str	r3, [r7, #12]
        break;
 80130b0:	e00e      	b.n	80130d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80130b2:	2301      	movs	r3, #1
 80130b4:	60fb      	str	r3, [r7, #12]
        break;
 80130b6:	e00b      	b.n	80130d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80130b8:	2302      	movs	r3, #2
 80130ba:	60fb      	str	r3, [r7, #12]
        break;
 80130bc:	e008      	b.n	80130d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80130be:	2305      	movs	r3, #5
 80130c0:	60fb      	str	r3, [r7, #12]
        break;
 80130c2:	e005      	b.n	80130d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80130c4:	4b05      	ldr	r3, [pc, #20]	@ (80130dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80130c6:	4a06      	ldr	r2, [pc, #24]	@ (80130e0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80130c8:	2165      	movs	r1, #101	@ 0x65
 80130ca:	4806      	ldr	r0, [pc, #24]	@ (80130e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80130cc:	f018 fd74 	bl	802bbb8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80130d0:	68fb      	ldr	r3, [r7, #12]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3710      	adds	r7, #16
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	0802d6cc 	.word	0x0802d6cc
 80130e0:	0802d6e8 	.word	0x0802d6e8
 80130e4:	0802d734 	.word	0x0802d734

080130e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b084      	sub	sp, #16
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	460b      	mov	r3, r1
 80130f2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80130f4:	2300      	movs	r3, #0
 80130f6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80130f8:	78fb      	ldrb	r3, [r7, #3]
 80130fa:	2b0a      	cmp	r3, #10
 80130fc:	d821      	bhi.n	8013142 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80130fe:	a201      	add	r2, pc, #4	@ (adr r2, 8013104 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013104:	0801313d 	.word	0x0801313d
 8013108:	08013137 	.word	0x08013137
 801310c:	08013131 	.word	0x08013131
 8013110:	08013143 	.word	0x08013143
 8013114:	08013143 	.word	0x08013143
 8013118:	08013143 	.word	0x08013143
 801311c:	08013143 	.word	0x08013143
 8013120:	08013137 	.word	0x08013137
 8013124:	08013137 	.word	0x08013137
 8013128:	08013137 	.word	0x08013137
 801312c:	08013137 	.word	0x08013137
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013130:	2300      	movs	r3, #0
 8013132:	60fb      	str	r3, [r7, #12]
        break;
 8013134:	e00b      	b.n	801314e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8013136:	2301      	movs	r3, #1
 8013138:	60fb      	str	r3, [r7, #12]
        break;
 801313a:	e008      	b.n	801314e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 801313c:	2302      	movs	r3, #2
 801313e:	60fb      	str	r3, [r7, #12]
        break;
 8013140:	e005      	b.n	801314e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013142:	4b05      	ldr	r3, [pc, #20]	@ (8013158 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8013144:	4a05      	ldr	r2, [pc, #20]	@ (801315c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8013146:	2186      	movs	r1, #134	@ 0x86
 8013148:	4805      	ldr	r0, [pc, #20]	@ (8013160 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801314a:	f018 fd35 	bl	802bbb8 <__assert_func>
        break;
    }

    return dma2dColorMode;
 801314e:	68fb      	ldr	r3, [r7, #12]
}
 8013150:	4618      	mov	r0, r3
 8013152:	3710      	adds	r7, #16
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	0802d6cc 	.word	0x0802d6cc
 801315c:	0802d760 	.word	0x0802d760
 8013160:	0802d734 	.word	0x0802d734

08013164 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8013164:	b480      	push	{r7}
 8013166:	b083      	sub	sp, #12
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_16BIT
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 801316c:	f640 73ef 	movw	r3, #4079	@ 0xfef
}
 8013170:	4618      	mov	r0, r3
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr

0801317c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b088      	sub	sp, #32
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	7f5b      	ldrb	r3, [r3, #29]
 801318a:	4619      	mov	r1, r3
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f7ff ff67 	bl	8013060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013192:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	7f9b      	ldrb	r3, [r3, #30]
 8013198:	4619      	mov	r1, r3
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7ff ff60 	bl	8013060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80131a0:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	7f9b      	ldrb	r3, [r3, #30]
 80131a6:	4619      	mov	r1, r3
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7ff ff9d 	bl	80130e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80131ae:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	8b5b      	ldrh	r3, [r3, #26]
 80131b4:	461a      	mov	r2, r3
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	8a9b      	ldrh	r3, [r3, #20]
 80131ba:	1ad2      	subs	r2, r2, r3
 80131bc:	4b98      	ldr	r3, [pc, #608]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80131be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration -*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	8b5b      	ldrh	r3, [r3, #26]
 80131c4:	461a      	mov	r2, r3
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	8a9b      	ldrh	r3, [r3, #20]
 80131ca:	1ad2      	subs	r2, r2, r3
 80131cc:	4b94      	ldr	r3, [pc, #592]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80131ce:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	8b1b      	ldrh	r3, [r3, #24]
 80131d4:	461a      	mov	r2, r3
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	8a9b      	ldrh	r3, [r3, #20]
 80131da:	1ad2      	subs	r2, r2, r3
 80131dc:	4b90      	ldr	r3, [pc, #576]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80131de:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80131e0:	4a8f      	ldr	r2, [pc, #572]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	8adb      	ldrh	r3, [r3, #22]
 80131ea:	461a      	mov	r2, r3
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	8a9b      	ldrh	r3, [r3, #20]
 80131f0:	041b      	lsls	r3, r3, #16
 80131f2:	431a      	orrs	r2, r3
 80131f4:	4b8a      	ldr	r3, [pc, #552]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80131f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	691a      	ldr	r2, [r3, #16]
 80131fc:	4b88      	ldr	r3, [pc, #544]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80131fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	685a      	ldr	r2, [r3, #4]
 8013204:	4b86      	ldr	r3, [pc, #536]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013206:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013210:	d046      	beq.n	80132a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8013212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013216:	f200 815a 	bhi.w	80134ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x352>
 801321a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801321e:	d015      	beq.n	801324c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8013220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013224:	f200 8153 	bhi.w	80134ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x352>
 8013228:	2b80      	cmp	r3, #128	@ 0x80
 801322a:	f000 8083 	beq.w	8013334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>
 801322e:	2b80      	cmp	r3, #128	@ 0x80
 8013230:	f200 814d 	bhi.w	80134ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x352>
 8013234:	2b40      	cmp	r3, #64	@ 0x40
 8013236:	f000 812a 	beq.w	801348e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x312>
 801323a:	2b40      	cmp	r3, #64	@ 0x40
 801323c:	f200 8147 	bhi.w	80134ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x352>
 8013240:	2b04      	cmp	r3, #4
 8013242:	d057      	beq.n	80132f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x178>
 8013244:	2b20      	cmp	r3, #32
 8013246:	f000 80f9 	beq.w	801343c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>
 801324a:	e140      	b.n	80134ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x352>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	7f1b      	ldrb	r3, [r3, #28]
 8013250:	061b      	lsls	r3, r3, #24
 8013252:	4a73      	ldr	r2, [pc, #460]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013258:	f043 030a 	orr.w	r3, r3, #10
 801325c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	330c      	adds	r3, #12
 8013262:	4618      	mov	r0, r3
 8013264:	f7ff fdba 	bl	8012ddc <_ZNK8touchgfx9colortypecvmEv>
 8013268:	4603      	mov	r3, r0
 801326a:	4a6d      	ldr	r2, [pc, #436]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801326c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013270:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	7fdb      	ldrb	r3, [r3, #31]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d007      	beq.n	801328a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10e>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 801327a:	4a69      	ldr	r2, [pc, #420]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013286:	6253      	str	r3, [r2, #36]	@ 0x24
 8013288:	e002      	b.n	8013290 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x114>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801328a:	4a65      	ldr	r2, [pc, #404]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	691a      	ldr	r2, [r3, #16]
 8013294:	4b62      	ldr	r3, [pc, #392]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013296:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013298:	4b61      	ldr	r3, [pc, #388]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801329a:	4a62      	ldr	r2, [pc, #392]	@ (8013424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801329c:	601a      	str	r2, [r3, #0]
        break;
 801329e:	e139      	b.n	8013514 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	7f1b      	ldrb	r3, [r3, #28]
 80132a4:	061b      	lsls	r3, r3, #24
 80132a6:	4a5e      	ldr	r2, [pc, #376]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80132ac:	f043 0309 	orr.w	r3, r3, #9
 80132b0:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	330c      	adds	r3, #12
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7ff fd90 	bl	8012ddc <_ZNK8touchgfx9colortypecvmEv>
 80132bc:	4603      	mov	r3, r0
 80132be:	4a58      	ldr	r2, [pc, #352]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80132c4:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	7fdb      	ldrb	r3, [r3, #31]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d007      	beq.n	80132de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80132ce:	4a54      	ldr	r2, [pc, #336]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80132d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80132da:	6253      	str	r3, [r2, #36]	@ 0x24
 80132dc:	e002      	b.n	80132e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80132de:	4a50      	ldr	r2, [pc, #320]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	691a      	ldr	r2, [r3, #16]
 80132e8:	4b4d      	ldr	r3, [pc, #308]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132ea:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80132ec:	4b4c      	ldr	r3, [pc, #304]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132ee:	4a4d      	ldr	r2, [pc, #308]	@ (8013424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80132f0:	601a      	str	r2, [r3, #0]
        break;
 80132f2:	e10f      	b.n	8013514 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	7f1b      	ldrb	r3, [r3, #28]
 80132f8:	061a      	lsls	r2, r3, #24
 80132fa:	69bb      	ldr	r3, [r7, #24]
 80132fc:	4313      	orrs	r3, r2
 80132fe:	4a48      	ldr	r2, [pc, #288]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013304:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	7fdb      	ldrb	r3, [r3, #31]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d007      	beq.n	801331e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a2>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 801330e:	4a44      	ldr	r2, [pc, #272]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013310:	697b      	ldr	r3, [r7, #20]
 8013312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801331a:	6253      	str	r3, [r2, #36]	@ 0x24
 801331c:	e002      	b.n	8013324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801331e:	4a40      	ldr	r2, [pc, #256]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	691a      	ldr	r2, [r3, #16]
 8013328:	4b3d      	ldr	r3, [pc, #244]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801332a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801332c:	4b3c      	ldr	r3, [pc, #240]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801332e:	4a3d      	ldr	r2, [pc, #244]	@ (8013424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8013330:	601a      	str	r2, [r3, #0]
        break;
 8013332:	e0ef      	b.n	8013514 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8013334:	2301      	movs	r3, #1
 8013336:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	1d1a      	adds	r2, r3, #4
 8013342:	4b37      	ldr	r3, [pc, #220]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013344:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	7f1b      	ldrb	r3, [r3, #28]
 801334a:	061a      	lsls	r2, r3, #24
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	4313      	orrs	r3, r2
 8013350:	4a33      	ldr	r2, [pc, #204]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013356:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            if (blitOp.replaceBgAlpha)
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	7fdb      	ldrb	r3, [r3, #31]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d007      	beq.n	8013370 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013360:	4a2f      	ldr	r2, [pc, #188]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013362:	697b      	ldr	r3, [r7, #20]
 8013364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801336c:	6253      	str	r3, [r2, #36]	@ 0x24
 801336e:	e002      	b.n	8013376 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fa>
            }
            else
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013370:	4a2b      	ldr	r2, [pc, #172]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	6253      	str	r3, [r2, #36]	@ 0x24
            }

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	691a      	ldr	r2, [r3, #16]
 801337a:	4b29      	ldr	r3, [pc, #164]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801337c:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	881b      	ldrh	r3, [r3, #0]
 8013382:	b2db      	uxtb	r3, r3
 8013384:	2b00      	cmp	r3, #0
 8013386:	d002      	beq.n	801338e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x212>
 8013388:	2b01      	cmp	r3, #1
 801338a:	d00f      	beq.n	80133ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 801338c:	e024      	b.n	80133d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25c>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 801338e:	4b24      	ldr	r3, [pc, #144]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013390:	69db      	ldr	r3, [r3, #28]
 8013392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013396:	f023 0310 	bic.w	r3, r3, #16
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	8852      	ldrh	r2, [r2, #2]
 801339e:	3a01      	subs	r2, #1
 80133a0:	0212      	lsls	r2, r2, #8
 80133a2:	4611      	mov	r1, r2
 80133a4:	4a1e      	ldr	r2, [pc, #120]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80133a6:	430b      	orrs	r3, r1
 80133a8:	61d3      	str	r3, [r2, #28]
                break;
 80133aa:	e01c      	b.n	80133e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26a>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	7f1b      	ldrb	r3, [r3, #28]
 80133b0:	2bff      	cmp	r3, #255	@ 0xff
 80133b2:	d101      	bne.n	80133b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
                {
                    blend = false;
 80133b4:	2300      	movs	r3, #0
 80133b6:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80133b8:	4b19      	ldr	r3, [pc, #100]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80133ba:	69db      	ldr	r3, [r3, #28]
 80133bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80133c0:	f023 0310 	bic.w	r3, r3, #16
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	8852      	ldrh	r2, [r2, #2]
 80133c8:	3a01      	subs	r2, #1
 80133ca:	0212      	lsls	r2, r2, #8
 80133cc:	4313      	orrs	r3, r2
 80133ce:	4a14      	ldr	r2, [pc, #80]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80133d0:	f043 0310 	orr.w	r3, r3, #16
 80133d4:	61d3      	str	r3, [r2, #28]
                break;
 80133d6:	e006      	b.n	80133e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26a>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80133d8:	4b13      	ldr	r3, [pc, #76]	@ (8013428 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80133da:	4a14      	ldr	r2, [pc, #80]	@ (801342c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80133dc:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 80133e0:	4813      	ldr	r0, [pc, #76]	@ (8013430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80133e2:	f018 fbe9 	bl	802bbb8 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80133e6:	4b0e      	ldr	r3, [pc, #56]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80133e8:	69db      	ldr	r3, [r3, #28]
 80133ea:	4a0d      	ldr	r2, [pc, #52]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80133ec:	f043 0320 	orr.w	r3, r3, #32
 80133f0:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80133f2:	bf00      	nop
 80133f4:	4b0a      	ldr	r3, [pc, #40]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80133f6:	69db      	ldr	r3, [r3, #28]
 80133f8:	f003 0320 	and.w	r3, r3, #32
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	bf14      	ite	ne
 8013400:	2301      	movne	r3, #1
 8013402:	2300      	moveq	r3, #0
 8013404:	b2db      	uxtb	r3, r3
 8013406:	2b00      	cmp	r3, #0
 8013408:	d1f4      	bne.n	80133f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x278>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 801340a:	4b05      	ldr	r3, [pc, #20]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801340c:	2210      	movs	r2, #16
 801340e:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8013410:	7ffb      	ldrb	r3, [r7, #31]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d00e      	beq.n	8013434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013416:	4b02      	ldr	r3, [pc, #8]	@ (8013420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8013418:	4a02      	ldr	r2, [pc, #8]	@ (8013424 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801341a:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 801341c:	e07a      	b.n	8013514 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>
 801341e:	bf00      	nop
 8013420:	4002b000 	.word	0x4002b000
 8013424:	00020201 	.word	0x00020201
 8013428:	0802d7ac 	.word	0x0802d7ac
 801342c:	0802d7c8 	.word	0x0802d7c8
 8013430:	0802d734 	.word	0x0802d734
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8013434:	4b39      	ldr	r3, [pc, #228]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 8013436:	4a3a      	ldr	r2, [pc, #232]	@ (8013520 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a4>)
 8013438:	601a      	str	r2, [r3, #0]
        break;
 801343a:	e06b      	b.n	8013514 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>
    case BLIT_OP_COPY_ARGB8888:
        /* Write DMA2D FGPFCCR register */
        if (blitOp.replaceFgAlpha)
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d009      	beq.n	801345a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2de>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	7f1b      	ldrb	r3, [r3, #28]
 801344a:	061a      	lsls	r2, r3, #24
 801344c:	69bb      	ldr	r3, [r7, #24]
 801344e:	4313      	orrs	r3, r2
 8013450:	4a32      	ldr	r2, [pc, #200]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 8013452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013456:	61d3      	str	r3, [r2, #28]
 8013458:	e002      	b.n	8013460 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2e4>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801345a:	4a30      	ldr	r2, [pc, #192]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	61d3      	str	r3, [r2, #28]
        }

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	7fdb      	ldrb	r3, [r3, #31]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d007      	beq.n	8013478 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2fc>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013468:	4a2c      	ldr	r2, [pc, #176]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8013470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013474:	6253      	str	r3, [r2, #36]	@ 0x24
 8013476:	e002      	b.n	801347e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x302>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013478:	4a28      	ldr	r2, [pc, #160]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	691a      	ldr	r2, [r3, #16]
 8013482:	4b26      	ldr	r3, [pc, #152]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 8013484:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013486:	4b25      	ldr	r3, [pc, #148]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 8013488:	4a26      	ldr	r2, [pc, #152]	@ (8013524 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a8>)
 801348a:	601a      	str	r2, [r3, #0]
        break;
 801348c:	e042      	b.n	8013514 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>

    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	7f1b      	ldrb	r3, [r3, #28]
 8013492:	061a      	lsls	r2, r3, #24
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	4313      	orrs	r3, r2
 8013498:	4a20      	ldr	r2, [pc, #128]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 801349a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801349e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	7fdb      	ldrb	r3, [r3, #31]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d007      	beq.n	80134b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x33c>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80134a8:	4a1c      	ldr	r2, [pc, #112]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80134b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80134b4:	6253      	str	r3, [r2, #36]	@ 0x24
 80134b6:	e002      	b.n	80134be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80134b8:	4a18      	ldr	r2, [pc, #96]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	691a      	ldr	r2, [r3, #16]
 80134c2:	4b16      	ldr	r3, [pc, #88]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 80134c4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80134c6:	4b15      	ldr	r3, [pc, #84]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 80134c8:	4a16      	ldr	r2, [pc, #88]	@ (8013524 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a8>)
 80134ca:	601a      	str	r2, [r3, #0]
        break;
 80134cc:	e022      	b.n	8013514 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>
    default: /* BLIT_OP_COPY & BLIT_OP_COPY_16BIT */
        /* Set DMA2D color mode and alpha mode */
        if (blitOp.replaceFgAlpha)
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d007      	beq.n	80134e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x36c>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80134d8:	4a10      	ldr	r2, [pc, #64]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80134e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80134e4:	61d3      	str	r3, [r2, #28]
 80134e6:	e002      	b.n	80134ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x372>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80134e8:	4a0c      	ldr	r2, [pc, #48]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	61d3      	str	r3, [r2, #28]
        }

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	7f5a      	ldrb	r2, [r3, #29]
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	7f9b      	ldrb	r3, [r3, #30]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d007      	beq.n	801350a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38e>
        {
            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	691a      	ldr	r2, [r3, #16]
 80134fe:	4b07      	ldr	r3, [pc, #28]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 8013500:	615a      	str	r2, [r3, #20]

            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8013502:	4b06      	ldr	r3, [pc, #24]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 8013504:	4a06      	ldr	r2, [pc, #24]	@ (8013520 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a4>)
 8013506:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8013508:	e003      	b.n	8013512 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x396>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 801350a:	4b04      	ldr	r3, [pc, #16]	@ (801351c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x3a0>)
 801350c:	f240 2201 	movw	r2, #513	@ 0x201
 8013510:	601a      	str	r2, [r3, #0]
        break;
 8013512:	bf00      	nop
    }
}
 8013514:	bf00      	nop
 8013516:	3720      	adds	r7, #32
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}
 801351c:	4002b000 	.word	0x4002b000
 8013520:	00010201 	.word	0x00010201
 8013524:	00020201 	.word	0x00020201

08013528 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * BLIT_OP_FILL
 * BLIT_OP_FILL_16BIT
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8013528:	b590      	push	{r4, r7, lr}
 801352a:	b085      	sub	sp, #20
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	7f9b      	ldrb	r3, [r3, #30]
 8013536:	4619      	mov	r1, r3
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f7ff fdd5 	bl	80130e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801353e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8013540:	4a41      	ldr	r2, [pc, #260]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	8adb      	ldrh	r3, [r3, #22]
 801354a:	461a      	mov	r2, r3
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	8a9b      	ldrh	r3, [r3, #20]
 8013550:	041b      	lsls	r3, r3, #16
 8013552:	431a      	orrs	r2, r3
 8013554:	4b3c      	ldr	r3, [pc, #240]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8013556:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	691a      	ldr	r2, [r3, #16]
 801355c:	4b3a      	ldr	r3, [pc, #232]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 801355e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	8b5b      	ldrh	r3, [r3, #26]
 8013564:	461a      	mov	r2, r3
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	8a9b      	ldrh	r3, [r3, #20]
 801356a:	1ad2      	subs	r2, r2, r3
 801356c:	4b36      	ldr	r3, [pc, #216]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 801356e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b08      	cmp	r3, #8
 8013576:	d13d      	bne.n	80135f4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xcc>
    {
        /* DMA2D BGOR register configuration -*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	8b5b      	ldrh	r3, [r3, #26]
 801357c:	461a      	mov	r2, r3
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	8a9b      	ldrh	r3, [r3, #20]
 8013582:	1ad2      	subs	r2, r2, r3
 8013584:	4b30      	ldr	r3, [pc, #192]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8013586:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	8b5b      	ldrh	r3, [r3, #26]
 801358c:	461a      	mov	r2, r3
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	8a9b      	ldrh	r3, [r3, #20]
 8013592:	1ad2      	subs	r2, r2, r3
 8013594:	4b2c      	ldr	r3, [pc, #176]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8013596:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	7fdb      	ldrb	r3, [r3, #31]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d007      	beq.n	80135b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x88>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80135a0:	4a29      	ldr	r2, [pc, #164]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80135a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80135ac:	6253      	str	r3, [r2, #36]	@ 0x24
 80135ae:	e002      	b.n	80135b6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8e>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80135b0:	4a25      	ldr	r2, [pc, #148]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	6253      	str	r3, [r2, #36]	@ 0x24
        }

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	7f1b      	ldrb	r3, [r3, #28]
 80135ba:	061b      	lsls	r3, r3, #24
 80135bc:	4a22      	ldr	r2, [pc, #136]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80135c2:	f043 0309 	orr.w	r3, r3, #9
 80135c6:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	330c      	adds	r3, #12
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff fc05 	bl	8012ddc <_ZNK8touchgfx9colortypecvmEv>
 80135d2:	4603      	mov	r3, r0
 80135d4:	4a1c      	ldr	r2, [pc, #112]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80135da:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	691a      	ldr	r2, [r3, #16]
 80135e0:	4b19      	ldr	r3, [pc, #100]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135e2:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	691a      	ldr	r2, [r3, #16]
 80135e8:	4b17      	ldr	r3, [pc, #92]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135ea:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80135ec:	4b16      	ldr	r3, [pc, #88]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135ee:	4a17      	ldr	r2, [pc, #92]	@ (801364c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x124>)
 80135f0:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80135f2:	e025      	b.n	8013640 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x118>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80135f4:	4a14      	ldr	r2, [pc, #80]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80135fa:	4b13      	ldr	r3, [pc, #76]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80135fc:	2200      	movs	r2, #0
 80135fe:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	7f9b      	ldrb	r3, [r3, #30]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d10a      	bne.n	801361e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf6>
            WRITE_REG(DMA2D->OCOLR, blitOp.color & (DMA2D_OCOLR_BLUE_2 | DMA2D_OCOLR_GREEN_2 | DMA2D_OCOLR_RED_2));
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	330c      	adds	r3, #12
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff fbe5 	bl	8012ddc <_ZNK8touchgfx9colortypecvmEv>
 8013612:	4602      	mov	r2, r0
 8013614:	490c      	ldr	r1, [pc, #48]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8013616:	4b0e      	ldr	r3, [pc, #56]	@ (8013650 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x128>)
 8013618:	4013      	ands	r3, r2
 801361a:	638b      	str	r3, [r1, #56]	@ 0x38
 801361c:	e00d      	b.n	801363a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	7f1b      	ldrb	r3, [r3, #28]
 8013622:	061c      	lsls	r4, r3, #24
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	330c      	adds	r3, #12
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff fbd7 	bl	8012ddc <_ZNK8touchgfx9colortypecvmEv>
 801362e:	4603      	mov	r3, r0
 8013630:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013634:	4a04      	ldr	r2, [pc, #16]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 8013636:	4323      	orrs	r3, r4
 8013638:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 801363a:	4b03      	ldr	r3, [pc, #12]	@ (8013648 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 801363c:	4a05      	ldr	r2, [pc, #20]	@ (8013654 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>)
 801363e:	601a      	str	r2, [r3, #0]
}
 8013640:	bf00      	nop
 8013642:	3714      	adds	r7, #20
 8013644:	46bd      	mov	sp, r7
 8013646:	bd90      	pop	{r4, r7, pc}
 8013648:	4002b000 	.word	0x4002b000
 801364c:	00020201 	.word	0x00020201
 8013650:	0007cfdf 	.word	0x0007cfdf
 8013654:	00030201 	.word	0x00030201

08013658 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	4a05      	ldr	r2, [pc, #20]	@ (8013678 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	601a      	str	r2, [r3, #0]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	4618      	mov	r0, r3
 801366a:	f7ff fbc3 	bl	8012df4 <_ZN8touchgfx9DMA_QueueD1Ev>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	4618      	mov	r0, r3
 8013672:	3708      	adds	r7, #8
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}
 8013678:	0802e368 	.word	0x0802e368

0801367c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7ff ffe7 	bl	8013658 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801368a:	2114      	movs	r1, #20
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f018 fa66 	bl	802bb5e <_ZdlPvj>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	4618      	mov	r0, r3
 8013696:	3708      	adds	r7, #8
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}

0801369c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 801369c:	b480      	push	{r7}
 801369e:	b083      	sub	sp, #12
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80136a4:	4a04      	ldr	r2, [pc, #16]	@ (80136b8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6013      	str	r3, [r2, #0]
    }
 80136aa:	bf00      	nop
 80136ac:	370c      	adds	r7, #12
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr
 80136b6:	bf00      	nop
 80136b8:	2015a0d4 	.word	0x2015a0d4

080136bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80136bc:	b480      	push	{r7}
 80136be:	b085      	sub	sp, #20
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
 80136c8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80136ca:	4a0b      	ldr	r2, [pc, #44]	@ (80136f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	68ba      	ldr	r2, [r7, #8]
 80136d4:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	683a      	ldr	r2, [r7, #0]
 80136e0:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	69ba      	ldr	r2, [r7, #24]
 80136e6:	611a      	str	r2, [r3, #16]
    {
    }
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	4618      	mov	r0, r3
 80136ec:	3714      	adds	r7, #20
 80136ee:	46bd      	mov	sp, r7
 80136f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop
 80136f8:	0802e064 	.word	0x0802e064

080136fc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80136fc:	b480      	push	{r7}
 80136fe:	b083      	sub	sp, #12
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
    {
 8013704:	4a04      	ldr	r2, [pc, #16]	@ (8013718 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	601a      	str	r2, [r3, #0]
    }
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	4618      	mov	r0, r3
 801370e:	370c      	adds	r7, #12
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr
 8013718:	0802e064 	.word	0x0802e064

0801371c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
    }
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7ff ffe9 	bl	80136fc <_ZN8touchgfx7MVPHeapD1Ev>
 801372a:	2114      	movs	r1, #20
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f018 fa16 	bl	802bb5e <_ZdlPvj>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	4618      	mov	r0, r3
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
    {
 8013744:	4a04      	ldr	r2, [pc, #16]	@ (8013758 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	601a      	str	r2, [r3, #0]
    }
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	4618      	mov	r0, r3
 801374e:	370c      	adds	r7, #12
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr
 8013758:	0802e3f4 	.word	0x0802e3f4

0801375c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801375c:	b580      	push	{r7, lr}
 801375e:	b082      	sub	sp, #8
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
    }
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f7ff ffe9 	bl	801373c <_ZN8touchgfx3LCDD1Ev>
 801376a:	210c      	movs	r1, #12
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f018 f9f6 	bl	802bb5e <_ZdlPvj>
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	4618      	mov	r0, r3
 8013776:	3708      	adds	r7, #8
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}

0801377c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	4618      	mov	r0, r3
 801378a:	f7fd fbd1 	bl	8010f30 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801378e:	bf00      	nop
 8013790:	3708      	adds	r7, #8
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
	...

08013798 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013798:	b580      	push	{r7, lr}
 801379a:	b086      	sub	sp, #24
 801379c:	af02      	add	r7, sp, #8
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	60b9      	str	r1, [r7, #8]
 80137a2:	607a      	str	r2, [r7, #4]
 80137a4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	9300      	str	r3, [sp, #0]
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	68b9      	ldr	r1, [r7, #8]
 80137b2:	f7ff ff83 	bl	80136bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80137b6:	4a04      	ldr	r2, [pc, #16]	@ (80137c8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	601a      	str	r2, [r3, #0]
    {

    }
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	4618      	mov	r0, r3
 80137c0:	3710      	adds	r7, #16
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	bf00      	nop
 80137c8:	0802e050 	.word	0x0802e050

080137cc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80137cc:	b580      	push	{r7, lr}
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	4801      	ldr	r0, [pc, #4]	@ (80137d8 <__tcf_0+0xc>)
 80137d2:	f000 f98b 	bl	8013aec <_ZN12FrontendHeapD1Ev>
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	20158724 	.word	0x20158724

080137dc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80137dc:	b580      	push	{r7, lr}
 80137de:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80137e0:	4b11      	ldr	r3, [pc, #68]	@ (8013828 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80137e2:	e8d3 3faf 	lda	r3, [r3]
 80137e6:	f003 0301 	and.w	r3, r3, #1
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	bf0c      	ite	eq
 80137ee:	2301      	moveq	r3, #1
 80137f0:	2300      	movne	r3, #0
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d013      	beq.n	8013820 <_ZN12FrontendHeap11getInstanceEv+0x44>
 80137f8:	480b      	ldr	r0, [pc, #44]	@ (8013828 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80137fa:	f018 f9b2 	bl	802bb62 <__cxa_guard_acquire>
 80137fe:	4603      	mov	r3, r0
 8013800:	2b00      	cmp	r3, #0
 8013802:	bf14      	ite	ne
 8013804:	2301      	movne	r3, #1
 8013806:	2300      	moveq	r3, #0
 8013808:	b2db      	uxtb	r3, r3
 801380a:	2b00      	cmp	r3, #0
 801380c:	d008      	beq.n	8013820 <_ZN12FrontendHeap11getInstanceEv+0x44>
 801380e:	4807      	ldr	r0, [pc, #28]	@ (801382c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013810:	f000 f868 	bl	80138e4 <_ZN12FrontendHeapC1Ev>
 8013814:	4806      	ldr	r0, [pc, #24]	@ (8013830 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8013816:	f018 f9ed 	bl	802bbf4 <atexit>
 801381a:	4803      	ldr	r0, [pc, #12]	@ (8013828 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801381c:	f018 f9ad 	bl	802bb7a <__cxa_guard_release>
        return instance;
 8013820:	4b02      	ldr	r3, [pc, #8]	@ (801382c <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8013822:	4618      	mov	r0, r3
 8013824:	bd80      	pop	{r7, pc}
 8013826:	bf00      	nop
 8013828:	20158990 	.word	0x20158990
 801382c:	20158724 	.word	0x20158724
 8013830:	080137cd 	.word	0x080137cd

08013834 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	4a05      	ldr	r2, [pc, #20]	@ (8013854 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	601a      	str	r2, [r3, #0]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4618      	mov	r0, r3
 8013846:	f7ff ff59 	bl	80136fc <_ZN8touchgfx7MVPHeapD1Ev>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	4618      	mov	r0, r3
 801384e:	3708      	adds	r7, #8
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	0802e050 	.word	0x0802e050

08013858 <_ZN16FrontendHeapBaseD0Ev>:
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f7ff ffe7 	bl	8013834 <_ZN16FrontendHeapBaseD1Ev>
 8013866:	2114      	movs	r1, #20
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f018 f978 	bl	802bb5e <_ZdlPvj>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	4618      	mov	r0, r3
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	4618      	mov	r0, r3
 8013884:	f000 fdfe 	bl	8014484 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013888:	4a03      	ldr	r2, [pc, #12]	@ (8013898 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	601a      	str	r2, [r3, #0]
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	4618      	mov	r0, r3
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	0802e01c 	.word	0x0802e01c

0801389c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	4618      	mov	r0, r3
 80138a8:	f000 fdec 	bl	8014484 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80138ac:	4a03      	ldr	r2, [pc, #12]	@ (80138bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	4618      	mov	r0, r3
 80138b6:	3708      	adds	r7, #8
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	0802dfe8 	.word	0x0802dfe8

080138c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b082      	sub	sp, #8
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	4618      	mov	r0, r3
 80138cc:	f000 fdda 	bl	8014484 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80138d0:	4a03      	ldr	r2, [pc, #12]	@ (80138e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	601a      	str	r2, [r3, #0]
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	4618      	mov	r0, r3
 80138da:	3708      	adds	r7, #8
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	0802dfb4 	.word	0x0802dfb4

080138e4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80138e4:	b590      	push	{r4, r7, lr}
 80138e6:	b085      	sub	sp, #20
 80138e8:	af02      	add	r7, sp, #8
 80138ea:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f103 0114 	add.w	r1, r3, #20
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f103 04f8 	add.w	r4, r3, #248	@ 0xf8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f503 7388 	add.w	r3, r3, #272	@ 0x110
                     app(model, *this)
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	4623      	mov	r3, r4
 801390a:	f7ff ff45 	bl	8013798 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801390e:	4a17      	ldr	r2, [pc, #92]	@ (801396c <_ZN12FrontendHeapC1Ev+0x88>)
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	601a      	str	r2, [r3, #0]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	3314      	adds	r3, #20
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff ffad 	bl	8013878 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	332c      	adds	r3, #44	@ 0x2c
 8013922:	4618      	mov	r0, r3
 8013924:	f7ff ffba 	bl	801389c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	33f8      	adds	r3, #248	@ 0xf8
 801392c:	4618      	mov	r0, r3
 801392e:	f7ff ffc7 	bl	80138c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8013938:	4618      	mov	r0, r3
 801393a:	f7fe fbb9 	bl	80120b0 <_ZN5ModelC1Ev>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	4619      	mov	r1, r3
 801394e:	f7fe fb99 	bl	8012084 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801395a:	4619      	mov	r1, r3
 801395c:	4610      	mov	r0, r2
 801395e:	f7ff ff0d 	bl	801377c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	4618      	mov	r0, r3
 8013966:	370c      	adds	r7, #12
 8013968:	46bd      	mov	sp, r7
 801396a:	bd90      	pop	{r4, r7, pc}
 801396c:	0802dfa0 	.word	0x0802dfa0

08013970 <_ZN8touchgfx8LCDGPU2DD1Ev>:
class LCDGPU2D : public LCD
{
public:
    LCDGPU2D();

    virtual ~LCDGPU2D()
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
    {
 8013978:	4a05      	ldr	r2, [pc, #20]	@ (8013990 <_ZN8touchgfx8LCDGPU2DD1Ev+0x20>)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	601a      	str	r2, [r3, #0]
    }
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4618      	mov	r0, r3
 8013982:	f7ff fedb 	bl	801373c <_ZN8touchgfx3LCDD1Ev>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4618      	mov	r0, r3
 801398a:	3708      	adds	r7, #8
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}
 8013990:	0802f2cc 	.word	0x0802f2cc

08013994 <_ZN8touchgfx8LCDGPU2DD0Ev>:
    virtual ~LCDGPU2D()
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
    }
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7ff ffe7 	bl	8013970 <_ZN8touchgfx8LCDGPU2DD1Ev>
 80139a2:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f018 f8d9 	bl	802bb5e <_ZdlPvj>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4618      	mov	r0, r3
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
	...

080139b8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b086      	sub	sp, #24
 80139bc:	af02      	add	r7, sp, #8
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	607a      	str	r2, [r7, #4]
 80139c4:	603b      	str	r3, [r7, #0]
        touchgfx::HALGPU2D(dma, display, tc, width, height)
 80139c6:	68f8      	ldr	r0, [r7, #12]
 80139c8:	8bbb      	ldrh	r3, [r7, #28]
 80139ca:	9301      	str	r3, [sp, #4]
 80139cc:	8b3b      	ldrh	r3, [r7, #24]
 80139ce:	9300      	str	r3, [sp, #0]
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	68b9      	ldr	r1, [r7, #8]
 80139d6:	f008 fab7 	bl	801bf48 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80139da:	4a04      	ldr	r2, [pc, #16]	@ (80139ec <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	601a      	str	r2, [r3, #0]
    }
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	4618      	mov	r0, r3
 80139e4:	3710      	adds	r7, #16
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	0802e074 	.word	0x0802e074

080139f0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b086      	sub	sp, #24
 80139f4:	af02      	add	r7, sp, #8
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	607a      	str	r2, [r7, #4]
 80139fc:	603b      	str	r3, [r7, #0]
 80139fe:	68f8      	ldr	r0, [r7, #12]
 8013a00:	8bbb      	ldrh	r3, [r7, #28]
 8013a02:	9301      	str	r3, [sp, #4]
 8013a04:	8b3b      	ldrh	r3, [r7, #24]
 8013a06:	9300      	str	r3, [sp, #0]
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	68b9      	ldr	r1, [r7, #8]
 8013a0e:	f7ff ffd3 	bl	80139b8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013a12:	4a04      	ldr	r2, [pc, #16]	@ (8013a24 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	601a      	str	r2, [r3, #0]
    }
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3710      	adds	r7, #16
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	bf00      	nop
 8013a24:	0802de54 	.word	0x0802de54

08013a28 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013a28:	b480      	push	{r7}
 8013a2a:	b083      	sub	sp, #12
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	4a04      	ldr	r2, [pc, #16]	@ (8013a44 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	601a      	str	r2, [r3, #0]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	4618      	mov	r0, r3
 8013a3a:	370c      	adds	r7, #12
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a42:	4770      	bx	lr
 8013a44:	0802de3c 	.word	0x0802de3c

08013a48 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7ff ffe8 	bl	8013a28 <_ZN8touchgfx15TouchControllerC1Ev>
 8013a58:	4a03      	ldr	r2, [pc, #12]	@ (8013a68 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	601a      	str	r2, [r3, #0]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	4618      	mov	r0, r3
 8013a62:	3708      	adds	r7, #8
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	0802de24 	.word	0x0802de24

08013a6c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 416, 416);

void touchgfx_init()
{
 8013a6c:	b590      	push	{r4, r7, lr}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013a72:	f7fe f909 	bl	8011c88 <_ZN14BitmapDatabase11getInstanceEv>
 8013a76:	4604      	mov	r4, r0
 8013a78:	f7fe f910 	bl	8011c9c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	4619      	mov	r1, r3
 8013a80:	2300      	movs	r3, #0
 8013a82:	9300      	str	r3, [sp, #0]
 8013a84:	2300      	movs	r3, #0
 8013a86:	2200      	movs	r2, #0
 8013a88:	4620      	mov	r0, r4
 8013a8a:	f005 fb59 	bl	8019140 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8013a8e:	480b      	ldr	r0, [pc, #44]	@ (8013abc <touchgfx_init+0x50>)
 8013a90:	f7ff fe04 	bl	801369c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013a94:	2000      	movs	r0, #0
 8013a96:	f7fe fa2d 	bl	8011ef4 <_ZN8touchgfx5Texts11setLanguageEt>

    display.setFrameBufferFormat(Bitmap::ARGB8888);
 8013a9a:	2102      	movs	r1, #2
 8013a9c:	4808      	ldr	r0, [pc, #32]	@ (8013ac0 <touchgfx_init+0x54>)
 8013a9e:	f00c fc45 	bl	802032c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>

    FontManager::setFontProvider(&fontProvider);
 8013aa2:	4808      	ldr	r0, [pc, #32]	@ (8013ac4 <touchgfx_init+0x58>)
 8013aa4:	f005 fab4 	bl	8019010 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013aa8:	f7ff fe98 	bl	80137dc <_ZN12FrontendHeap11getInstanceEv>
 8013aac:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8013aae:	4806      	ldr	r0, [pc, #24]	@ (8013ac8 <touchgfx_init+0x5c>)
 8013ab0:	f7fe feca 	bl	8012848 <_ZN11TouchGFXHAL10initializeEv>
}
 8013ab4:	bf00      	nop
 8013ab6:	370c      	adds	r7, #12
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd90      	pop	{r4, r7, pc}
 8013abc:	20159f88 	.word	0x20159f88
 8013ac0:	20159738 	.word	0x20159738
 8013ac4:	20000018 	.word	0x20000018
 8013ac8:	20159f8c 	.word	0x20159f8c

08013acc <touchgfx_components_init>:

void touchgfx_components_init()
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	af00      	add	r7, sp, #0
    nema_init();
 8013ad0:	f005 ffd0 	bl	8019a74 <nema_init>
}
 8013ad4:	bf00      	nop
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8013adc:	4802      	ldr	r0, [pc, #8]	@ (8013ae8 <touchgfx_taskEntry+0x10>)
 8013ade:	f000 ffdc 	bl	8014a9a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8013ae2:	bf00      	nop
 8013ae4:	bd80      	pop	{r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	20159f8c 	.word	0x20159f8c

08013aec <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	4a10      	ldr	r2, [pc, #64]	@ (8013b38 <_ZN12FrontendHeapD1Ev+0x4c>)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	601a      	str	r2, [r3, #0]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7fe fa89 	bl	8012018 <_ZN19FrontendApplicationD1Ev>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	33f8      	adds	r3, #248	@ 0xf8
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f000 f828 	bl	8013b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	332c      	adds	r3, #44	@ 0x2c
 8013b14:	4618      	mov	r0, r3
 8013b16:	f000 f845 	bl	8013ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	3314      	adds	r3, #20
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f000 f862 	bl	8013be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7ff fe84 	bl	8013834 <_ZN16FrontendHeapBaseD1Ev>
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3708      	adds	r7, #8
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	bf00      	nop
 8013b38:	0802dfa0 	.word	0x0802dfa0

08013b3c <_ZN12FrontendHeapD0Ev>:
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b082      	sub	sp, #8
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7ff ffd1 	bl	8013aec <_ZN12FrontendHeapD1Ev>
 8013b4a:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f018 f805 	bl	802bb5e <_ZdlPvj>
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	4618      	mov	r0, r3
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}
	...

08013b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b082      	sub	sp, #8
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	4a05      	ldr	r2, [pc, #20]	@ (8013b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	601a      	str	r2, [r3, #0]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	4618      	mov	r0, r3
 8013b72:	f000 fc85 	bl	8014480 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3708      	adds	r7, #8
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	0802dfb4 	.word	0x0802dfb4

08013b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b082      	sub	sp, #8
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f7ff ffe7 	bl	8013b60 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b92:	2114      	movs	r1, #20
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f017 ffe2 	bl	802bb5e <_ZdlPvj>
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	4a05      	ldr	r2, [pc, #20]	@ (8013bc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	601a      	str	r2, [r3, #0]
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f000 fc63 	bl	8014480 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	0802dfe8 	.word	0x0802dfe8

08013bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f7ff ffe7 	bl	8013ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013bd6:	21cc      	movs	r1, #204	@ 0xcc
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f017 ffc0 	bl	802bb5e <_ZdlPvj>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4618      	mov	r0, r3
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}

08013be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	4a05      	ldr	r2, [pc, #20]	@ (8013c08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	601a      	str	r2, [r3, #0]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f000 fc41 	bl	8014480 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	4618      	mov	r0, r3
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	0802e01c 	.word	0x0802e01c

08013c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f7ff ffe7 	bl	8013be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013c1a:	2118      	movs	r1, #24
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f017 ff9e 	bl	802bb5e <_ZdlPvj>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <_Z41__static_initialization_and_destruction_0ii>:
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af02      	add	r7, sp, #8
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6039      	str	r1, [r7, #0]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d119      	bne.n	8013c70 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c42:	4293      	cmp	r3, r2
 8013c44:	d114      	bne.n	8013c70 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8013c46:	4818      	ldr	r0, [pc, #96]	@ (8013ca8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013c48:	f7ff fefe 	bl	8013a48 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8013c4c:	4817      	ldr	r0, [pc, #92]	@ (8013cac <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013c4e:	f7ff f981 	bl	8012f54 <_ZN8STM32DMAC1Ev>
static LCDGPU2D display;
 8013c52:	4817      	ldr	r0, [pc, #92]	@ (8013cb0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013c54:	f00c fb5c 	bl	8020310 <_ZN8touchgfx8LCDGPU2DC1Ev>
static TouchGFXHAL hal(dma, display, tc, 416, 416);
 8013c58:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8013c5c:	9301      	str	r3, [sp, #4]
 8013c5e:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8013c62:	9300      	str	r3, [sp, #0]
 8013c64:	4b10      	ldr	r3, [pc, #64]	@ (8013ca8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013c66:	4a12      	ldr	r2, [pc, #72]	@ (8013cb0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013c68:	4910      	ldr	r1, [pc, #64]	@ (8013cac <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013c6a:	4812      	ldr	r0, [pc, #72]	@ (8013cb4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013c6c:	f7ff fec0 	bl	80139f0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d113      	bne.n	8013c9e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c7c:	4293      	cmp	r3, r2
 8013c7e:	d10e      	bne.n	8013c9e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013c80:	480c      	ldr	r0, [pc, #48]	@ (8013cb4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013c82:	f7fe fed3 	bl	8012a2c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013c86:	480c      	ldr	r0, [pc, #48]	@ (8013cb8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8013c88:	f7fc fbec 	bl	8010464 <_ZN23ApplicationFontProviderD1Ev>
static LCDGPU2D display;
 8013c8c:	4808      	ldr	r0, [pc, #32]	@ (8013cb0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013c8e:	f7ff fe6f 	bl	8013970 <_ZN8touchgfx8LCDGPU2DD1Ev>
static STM32DMA dma;
 8013c92:	4806      	ldr	r0, [pc, #24]	@ (8013cac <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013c94:	f7ff f988 	bl	8012fa8 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8013c98:	4803      	ldr	r0, [pc, #12]	@ (8013ca8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013c9a:	f7fe fb85 	bl	80123a8 <_ZN20STM32TouchControllerD1Ev>
}
 8013c9e:	bf00      	nop
 8013ca0:	3708      	adds	r7, #8
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	20158994 	.word	0x20158994
 8013cac:	20158998 	.word	0x20158998
 8013cb0:	20159738 	.word	0x20159738
 8013cb4:	20159f8c 	.word	0x20159f8c
 8013cb8:	20000018 	.word	0x20000018

08013cbc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013cc4:	2301      	movs	r3, #1
    }
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	370c      	adds	r7, #12
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd0:	4770      	bx	lr

08013cd2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8013cd2:	b480      	push	{r7}
 8013cd4:	b083      	sub	sp, #12
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8013cda:	230c      	movs	r3, #12
    }
 8013cdc:	4618      	mov	r0, r3
 8013cde:	370c      	adds	r7, #12
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce6:	4770      	bx	lr

08013ce8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8013ce8:	b480      	push	{r7}
 8013cea:	b083      	sub	sp, #12
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	460b      	mov	r3, r1
 8013cf2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013cf4:	887a      	ldrh	r2, [r7, #2]
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	005b      	lsls	r3, r3, #1
 8013cfa:	4413      	add	r3, r2
 8013cfc:	009b      	lsls	r3, r3, #2
 8013cfe:	3308      	adds	r3, #8
 8013d00:	687a      	ldr	r2, [r7, #4]
 8013d02:	4413      	add	r3, r2
    }
 8013d04:	4618      	mov	r0, r3
 8013d06:	370c      	adds	r7, #12
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr

08013d10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8013d10:	b480      	push	{r7}
 8013d12:	b083      	sub	sp, #12
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	460b      	mov	r3, r1
 8013d1a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013d1c:	887a      	ldrh	r2, [r7, #2]
 8013d1e:	4613      	mov	r3, r2
 8013d20:	005b      	lsls	r3, r3, #1
 8013d22:	4413      	add	r3, r2
 8013d24:	009b      	lsls	r3, r3, #2
 8013d26:	3308      	adds	r3, #8
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	4413      	add	r3, r2
    }
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	370c      	adds	r7, #12
 8013d30:	46bd      	mov	sp, r7
 8013d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d36:	4770      	bx	lr

08013d38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013d38:	b480      	push	{r7}
 8013d3a:	b083      	sub	sp, #12
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013d40:	2301      	movs	r3, #1
    }
 8013d42:	4618      	mov	r0, r3
 8013d44:	370c      	adds	r7, #12
 8013d46:	46bd      	mov	sp, r7
 8013d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4c:	4770      	bx	lr

08013d4e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013d4e:	b480      	push	{r7}
 8013d50:	b083      	sub	sp, #12
 8013d52:	af00      	add	r7, sp, #0
 8013d54:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013d56:	23c4      	movs	r3, #196	@ 0xc4
    }
 8013d58:	4618      	mov	r0, r3
 8013d5a:	370c      	adds	r7, #12
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr

08013d64 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013d64:	b480      	push	{r7}
 8013d66:	b083      	sub	sp, #12
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013d70:	887b      	ldrh	r3, [r7, #2]
 8013d72:	22c4      	movs	r2, #196	@ 0xc4
 8013d74:	fb02 f303 	mul.w	r3, r2, r3
 8013d78:	3308      	adds	r3, #8
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	4413      	add	r3, r2
    }
 8013d7e:	4618      	mov	r0, r3
 8013d80:	370c      	adds	r7, #12
 8013d82:	46bd      	mov	sp, r7
 8013d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d88:	4770      	bx	lr

08013d8a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013d8a:	b480      	push	{r7}
 8013d8c:	b083      	sub	sp, #12
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	6078      	str	r0, [r7, #4]
 8013d92:	460b      	mov	r3, r1
 8013d94:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013d96:	887b      	ldrh	r3, [r7, #2]
 8013d98:	22c4      	movs	r2, #196	@ 0xc4
 8013d9a:	fb02 f303 	mul.w	r3, r2, r3
 8013d9e:	3308      	adds	r3, #8
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	4413      	add	r3, r2
    }
 8013da4:	4618      	mov	r0, r3
 8013da6:	370c      	adds	r7, #12
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr

08013db0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013db0:	b480      	push	{r7}
 8013db2:	b083      	sub	sp, #12
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013db8:	2301      	movs	r3, #1
    }
 8013dba:	4618      	mov	r0, r3
 8013dbc:	370c      	adds	r7, #12
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc4:	4770      	bx	lr

08013dc6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013dc6:	b480      	push	{r7}
 8013dc8:	b083      	sub	sp, #12
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013dce:	2310      	movs	r3, #16
    }
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	370c      	adds	r7, #12
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dda:	4770      	bx	lr

08013ddc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	460b      	mov	r3, r1
 8013de6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013de8:	887b      	ldrh	r3, [r7, #2]
 8013dea:	011b      	lsls	r3, r3, #4
 8013dec:	3308      	adds	r3, #8
 8013dee:	687a      	ldr	r2, [r7, #4]
 8013df0:	4413      	add	r3, r2
    }
 8013df2:	4618      	mov	r0, r3
 8013df4:	370c      	adds	r7, #12
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr

08013dfe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013dfe:	b480      	push	{r7}
 8013e00:	b083      	sub	sp, #12
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
 8013e06:	460b      	mov	r3, r1
 8013e08:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013e0a:	887b      	ldrh	r3, [r7, #2]
 8013e0c:	011b      	lsls	r3, r3, #4
 8013e0e:	3308      	adds	r3, #8
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	4413      	add	r3, r2
    }
 8013e14:	4618      	mov	r0, r3
 8013e16:	370c      	adds	r7, #12
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr

08013e20 <_GLOBAL__sub_I_touchgfx_init>:
 8013e20:	b580      	push	{r7, lr}
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013e28:	2001      	movs	r0, #1
 8013e2a:	f7ff feff 	bl	8013c2c <_Z41__static_initialization_and_destruction_0ii>
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <_GLOBAL__sub_D_touchgfx_init>:
 8013e30:	b580      	push	{r7, lr}
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013e38:	2000      	movs	r0, #0
 8013e3a:	f7ff fef7 	bl	8013c2c <_Z41__static_initialization_and_destruction_0ii>
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	460b      	mov	r3, r1
 8013e4a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013e4c:	78fb      	ldrb	r3, [r7, #3]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d002      	beq.n	8013e58 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8013e52:	78fb      	ldrb	r3, [r7, #3]
 8013e54:	2b02      	cmp	r3, #2
 8013e56:	d105      	bne.n	8013e64 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	78fa      	ldrb	r2, [r7, #3]
 8013e5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 8013e60:	2301      	movs	r3, #1
 8013e62:	e027      	b.n	8013eb4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8013e64:	78fb      	ldrb	r3, [r7, #3]
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d123      	bne.n	8013eb2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d014      	beq.n	8013e9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	339c      	adds	r3, #156	@ 0x9c
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	4798      	blx	r3
 8013e7e:	4603      	mov	r3, r0
 8013e80:	461a      	mov	r2, r3
 8013e82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d008      	beq.n	8013e9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8013ebc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	f083 0301 	eor.w	r3, r3, #1
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d001      	beq.n	8013e9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013e98:	2301      	movs	r3, #1
 8013e9a:	e000      	b.n	8013e9e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d005      	beq.n	8013eae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	78fa      	ldrb	r2, [r7, #3]
 8013ea6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 8013eaa:	2301      	movs	r3, #1
 8013eac:	e002      	b.n	8013eb4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	e000      	b.n	8013eb4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8013eb2:	2300      	movs	r3, #0
    }
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3708      	adds	r7, #8
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}
 8013ebc:	2015a076 	.word	0x2015a076

08013ec0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8013ec0:	b480      	push	{r7}
 8013ec2:	b083      	sub	sp, #12
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	683a      	ldr	r2, [r7, #0]
 8013ece:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8013ed0:	bf00      	nop
 8013ed2:	370c      	adds	r7, #12
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr

08013edc <__NVIC_EnableIRQ>:
{
 8013edc:	b480      	push	{r7}
 8013ede:	b083      	sub	sp, #12
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	db0b      	blt.n	8013f06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013eee:	88fb      	ldrh	r3, [r7, #6]
 8013ef0:	f003 021f 	and.w	r2, r3, #31
 8013ef4:	4907      	ldr	r1, [pc, #28]	@ (8013f14 <__NVIC_EnableIRQ+0x38>)
 8013ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013efa:	095b      	lsrs	r3, r3, #5
 8013efc:	2001      	movs	r0, #1
 8013efe:	fa00 f202 	lsl.w	r2, r0, r2
 8013f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013f06:	bf00      	nop
 8013f08:	370c      	adds	r7, #12
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr
 8013f12:	bf00      	nop
 8013f14:	e000e100 	.word	0xe000e100

08013f18 <__NVIC_DisableIRQ>:
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	4603      	mov	r3, r0
 8013f20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	db12      	blt.n	8013f50 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013f2a:	88fb      	ldrh	r3, [r7, #6]
 8013f2c:	f003 021f 	and.w	r2, r3, #31
 8013f30:	490a      	ldr	r1, [pc, #40]	@ (8013f5c <__NVIC_DisableIRQ+0x44>)
 8013f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f36:	095b      	lsrs	r3, r3, #5
 8013f38:	2001      	movs	r0, #1
 8013f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8013f3e:	3320      	adds	r3, #32
 8013f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013f44:	f3bf 8f4f 	dsb	sy
}
 8013f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013f4a:	f3bf 8f6f 	isb	sy
}
 8013f4e:	bf00      	nop
}
 8013f50:	bf00      	nop
 8013f52:	370c      	adds	r7, #12
 8013f54:	46bd      	mov	sp, r7
 8013f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5a:	4770      	bx	lr
 8013f5c:	e000e100 	.word	0xe000e100

08013f60 <__NVIC_SetPriority>:
{
 8013f60:	b480      	push	{r7}
 8013f62:	b083      	sub	sp, #12
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	4603      	mov	r3, r0
 8013f68:	6039      	str	r1, [r7, #0]
 8013f6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8013f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	db0a      	blt.n	8013f8a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	b2da      	uxtb	r2, r3
 8013f78:	490c      	ldr	r1, [pc, #48]	@ (8013fac <__NVIC_SetPriority+0x4c>)
 8013f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f7e:	0112      	lsls	r2, r2, #4
 8013f80:	b2d2      	uxtb	r2, r2
 8013f82:	440b      	add	r3, r1
 8013f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013f88:	e00a      	b.n	8013fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	b2da      	uxtb	r2, r3
 8013f8e:	4908      	ldr	r1, [pc, #32]	@ (8013fb0 <__NVIC_SetPriority+0x50>)
 8013f90:	88fb      	ldrh	r3, [r7, #6]
 8013f92:	f003 030f 	and.w	r3, r3, #15
 8013f96:	3b04      	subs	r3, #4
 8013f98:	0112      	lsls	r2, r2, #4
 8013f9a:	b2d2      	uxtb	r2, r2
 8013f9c:	440b      	add	r3, r1
 8013f9e:	761a      	strb	r2, [r3, #24]
}
 8013fa0:	bf00      	nop
 8013fa2:	370c      	adds	r7, #12
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013faa:	4770      	bx	lr
 8013fac:	e000e100 	.word	0xe000e100
 8013fb0:	e000ed00 	.word	0xe000ed00

08013fb4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013fb4:	b5b0      	push	{r4, r5, r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
    HALGPU2D::initialize(8192);
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f008 f828 	bl	801c018 <_ZN8touchgfx8HALGPU2D10initializeEi>
    registerEventListener(*(Application::getInstance()));
 8013fc8:	687d      	ldr	r5, [r7, #4]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	3364      	adds	r3, #100	@ 0x64
 8013fd0:	681c      	ldr	r4, [r3, #0]
 8013fd2:	f002 fc57 	bl	8016884 <_ZN8touchgfx11Application11getInstanceEv>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	4619      	mov	r1, r3
 8013fda:	4628      	mov	r0, r5
 8013fdc:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	490a      	ldr	r1, [pc, #40]	@ (801400c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7ff ff6c 	bl	8013ec0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2101      	movs	r1, #1
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7ff ff27 	bl	8013e40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	3388      	adds	r3, #136	@ 0x88
 8013ffa:	681c      	ldr	r4, [r3, #0]
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	2200      	movs	r2, #0
 8014000:	4903      	ldr	r1, [pc, #12]	@ (8014010 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>)
 8014002:	47a0      	blx	r4
}
 8014004:	bf00      	nop
 8014006:	3708      	adds	r7, #8
 8014008:	46bd      	mov	sp, r7
 801400a:	bdb0      	pop	{r4, r5, r7, pc}
 801400c:	08012d21 	.word	0x08012d21
 8014010:	200001b8 	.word	0x200001b8

08014014 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 801401c:	2109      	movs	r1, #9
 801401e:	2076      	movs	r0, #118	@ 0x76
 8014020:	f7ff ff9e 	bl	8013f60 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014024:	2109      	movs	r1, #9
 8014026:	2087      	movs	r0, #135	@ 0x87
 8014028:	f7ff ff9a 	bl	8013f60 <__NVIC_SetPriority>
    NVIC_SetPriority(GPU2D_IRQn, 9);
 801402c:	2109      	movs	r1, #9
 801402e:	2084      	movs	r0, #132	@ 0x84
 8014030:	f7ff ff96 	bl	8013f60 <__NVIC_SetPriority>
}
 8014034:	bf00      	nop
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014044:	2076      	movs	r0, #118	@ 0x76
 8014046:	f7ff ff49 	bl	8013edc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801404a:	2087      	movs	r0, #135	@ 0x87
 801404c:	f7ff ff46 	bl	8013edc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(GPU2D_IRQn);
 8014050:	2084      	movs	r0, #132	@ 0x84
 8014052:	f7ff ff43 	bl	8013edc <__NVIC_EnableIRQ>
}
 8014056:	bf00      	nop
 8014058:	3708      	adds	r7, #8
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801405e:	b580      	push	{r7, lr}
 8014060:	b082      	sub	sp, #8
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014066:	2076      	movs	r0, #118	@ 0x76
 8014068:	f7ff ff56 	bl	8013f18 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801406c:	2087      	movs	r0, #135	@ 0x87
 801406e:	f7ff ff53 	bl	8013f18 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(GPU2D_IRQn);
 8014072:	2084      	movs	r0, #132	@ 0x84
 8014074:	f7ff ff50 	bl	8013f18 <__NVIC_DisableIRQ>
}
 8014078:	bf00      	nop
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014080:	b480      	push	{r7}
 8014082:	b083      	sub	sp, #12
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8014088:	4b11      	ldr	r3, [pc, #68]	@ (80140d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	b29b      	uxth	r3, r3
 801408e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014092:	b29b      	uxth	r3, r3
 8014094:	3b01      	subs	r3, #1
 8014096:	b29a      	uxth	r2, r3
 8014098:	4b0e      	ldr	r3, [pc, #56]	@ (80140d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801409a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801409c:	4b0c      	ldr	r3, [pc, #48]	@ (80140d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801409e:	691b      	ldr	r3, [r3, #16]
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	3b01      	subs	r3, #1
 80140aa:	b29a      	uxth	r2, r3
 80140ac:	4b0a      	ldr	r3, [pc, #40]	@ (80140d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80140ae:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80140b0:	4b08      	ldr	r3, [pc, #32]	@ (80140d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80140b2:	881a      	ldrh	r2, [r3, #0]
 80140b4:	4b06      	ldr	r3, [pc, #24]	@ (80140d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80140b6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80140b8:	4b05      	ldr	r3, [pc, #20]	@ (80140d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80140ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140bc:	4a04      	ldr	r2, [pc, #16]	@ (80140d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80140be:	f043 0301 	orr.w	r3, r3, #1
 80140c2:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80140c4:	bf00      	nop
 80140c6:	370c      	adds	r7, #12
 80140c8:	46bd      	mov	sp, r7
 80140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ce:	4770      	bx	lr
 80140d0:	40016800 	.word	0x40016800
 80140d4:	2015a034 	.word	0x2015a034
 80140d8:	2015a036 	.word	0x2015a036

080140dc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
    return HALGPU2D::beginFrame();
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	4618      	mov	r0, r3
 80140e8:	f007 fec0 	bl	801be6c <_ZN8touchgfx8HALGPU2D10beginFrameEv>
 80140ec:	4603      	mov	r3, r0
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	3708      	adds	r7, #8
 80140f2:	46bd      	mov	sp, r7
 80140f4:	bd80      	pop	{r7, pc}

080140f6 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80140f6:	b580      	push	{r7, lr}
 80140f8:	b082      	sub	sp, #8
 80140fa:	af00      	add	r7, sp, #0
 80140fc:	6078      	str	r0, [r7, #4]
    HALGPU2D::endFrame();
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	4618      	mov	r0, r3
 8014102:	f007 fedf 	bl	801bec4 <_ZN8touchgfx8HALGPU2D8endFrameEv>
}
 8014106:	bf00      	nop
 8014108:	3708      	adds	r7, #8
 801410a:	46bd      	mov	sp, r7
 801410c:	bd80      	pop	{r7, pc}
	...

08014110 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014110:	b480      	push	{r7}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014118:	4b03      	ldr	r3, [pc, #12]	@ (8014128 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801411a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 801411c:	4618      	mov	r0, r3
 801411e:	370c      	adds	r7, #12
 8014120:	46bd      	mov	sp, r7
 8014122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014126:	4770      	bx	lr
 8014128:	40016884 	.word	0x40016884

0801412c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801412c:	b480      	push	{r7}
 801412e:	b083      	sub	sp, #12
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014136:	4a06      	ldr	r2, [pc, #24]	@ (8014150 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801413c:	4b05      	ldr	r3, [pc, #20]	@ (8014154 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801413e:	2201      	movs	r2, #1
 8014140:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8014142:	bf00      	nop
 8014144:	370c      	adds	r7, #12
 8014146:	46bd      	mov	sp, r7
 8014148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop
 8014150:	40016884 	.word	0x40016884
 8014154:	40016800 	.word	0x40016800

08014158 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	6039      	str	r1, [r7, #0]
    HALGPU2D::flushFrameBuffer(rect);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6839      	ldr	r1, [r7, #0]
 8014166:	4618      	mov	r0, r3
 8014168:	f000 fc33 	bl	80149d2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801416c:	bf00      	nop
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
 8014180:	603b      	str	r3, [r7, #0]
    return HALGPU2D::blockCopy(dest, src, numBytes);
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	68b9      	ldr	r1, [r7, #8]
 801418a:	f000 fd94 	bl	8014cb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801418e:	4603      	mov	r3, r0
}
 8014190:	4618      	mov	r0, r3
 8014192:	3710      	adds	r7, #16
 8014194:	46bd      	mov	sp, r7
 8014196:	bd80      	pop	{r7, pc}

08014198 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014198:	b480      	push	{r7}
 801419a:	b085      	sub	sp, #20
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80141a0:	4b0d      	ldr	r3, [pc, #52]	@ (80141d8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80141a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80141a4:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80141a6:	4b0c      	ldr	r3, [pc, #48]	@ (80141d8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80141a8:	68db      	ldr	r3, [r3, #12]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	3301      	adds	r3, #1
 80141b4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 80141b6:	89fa      	ldrh	r2, [r7, #14]
 80141b8:	89bb      	ldrh	r3, [r7, #12]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d304      	bcc.n	80141c8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 80141be:	89fa      	ldrh	r2, [r7, #14]
 80141c0:	89bb      	ldrh	r3, [r7, #12]
 80141c2:	1ad3      	subs	r3, r2, r3
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	e000      	b.n	80141ca <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80141c8:	2300      	movs	r3, #0
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	3714      	adds	r7, #20
 80141ce:	46bd      	mov	sp, r7
 80141d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop
 80141d8:	40016800 	.word	0x40016800

080141dc <nema_sys_init>:
    /* Return a token back to a semaphore */
    tx_semaphore_put(&nema_irq_sem);
}

int32_t nema_sys_init(void)
{
 80141dc:	b590      	push	{r4, r7, lr}
 80141de:	b089      	sub	sp, #36	@ 0x24
 80141e0:	af02      	add	r7, sp, #8
    int error_code = 0;
 80141e2:	2300      	movs	r3, #0
 80141e4:	617b      	str	r3, [r7, #20]
    /* Register Command List Comlete Callback */
    HAL_GPU2D_RegisterCommandListCpltCallback(&hgpu2d, GPU2D_CommandListCpltCallback);
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Create IRQ semaphore */
    error_code = tx_semaphore_create(&nema_irq_sem, "nema sema irq", 0);
 80141e6:	231c      	movs	r3, #28
 80141e8:	2200      	movs	r2, #0
 80141ea:	4925      	ldr	r1, [pc, #148]	@ (8014280 <nema_sys_init+0xa4>)
 80141ec:	4825      	ldr	r0, [pc, #148]	@ (8014284 <nema_sys_init+0xa8>)
 80141ee:	f7fb febf 	bl	800ff70 <_txe_semaphore_create>
 80141f2:	4603      	mov	r3, r0
 80141f4:	617b      	str	r3, [r7, #20]
    assert(error_code == TX_SUCCESS);
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d005      	beq.n	8014208 <nema_sys_init+0x2c>
 80141fc:	4b22      	ldr	r3, [pc, #136]	@ (8014288 <nema_sys_init+0xac>)
 80141fe:	4a23      	ldr	r2, [pc, #140]	@ (801428c <nema_sys_init+0xb0>)
 8014200:	2152      	movs	r1, #82	@ 0x52
 8014202:	4823      	ldr	r0, [pc, #140]	@ (8014290 <nema_sys_init+0xb4>)
 8014204:	f017 fcd8 	bl	802bbb8 <__assert_func>

    /* Initialise Mem Space */
    error_code = tsi_malloc_init_pool_aligned(0, (void*)nemagfx_pool_mem, (uintptr_t)nemagfx_pool_mem, NEMAGFX_MEM_POOL_SIZE, 1, 8);
 8014208:	4a22      	ldr	r2, [pc, #136]	@ (8014294 <nema_sys_init+0xb8>)
 801420a:	2308      	movs	r3, #8
 801420c:	9301      	str	r3, [sp, #4]
 801420e:	2301      	movs	r3, #1
 8014210:	9300      	str	r3, [sp, #0]
 8014212:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8014216:	491f      	ldr	r1, [pc, #124]	@ (8014294 <nema_sys_init+0xb8>)
 8014218:	2000      	movs	r0, #0
 801421a:	f006 fd51 	bl	801acc0 <tsi_malloc_init_pool_aligned>
 801421e:	6178      	str	r0, [r7, #20]
    assert(error_code == 0);
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d005      	beq.n	8014232 <nema_sys_init+0x56>
 8014226:	4b1c      	ldr	r3, [pc, #112]	@ (8014298 <nema_sys_init+0xbc>)
 8014228:	4a18      	ldr	r2, [pc, #96]	@ (801428c <nema_sys_init+0xb0>)
 801422a:	2156      	movs	r1, #86	@ 0x56
 801422c:	4818      	ldr	r0, [pc, #96]	@ (8014290 <nema_sys_init+0xb4>)
 801422e:	f017 fcc3 	bl	802bbb8 <__assert_func>

    /* Allocate ring_buffer memory */
    ring_buffer_str.bo = nema_buffer_create(RING_SIZE);
 8014232:	4c1a      	ldr	r4, [pc, #104]	@ (801429c <nema_sys_init+0xc0>)
 8014234:	463b      	mov	r3, r7
 8014236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801423a:	4618      	mov	r0, r3
 801423c:	f000 f88e 	bl	801435c <nema_buffer_create>
 8014240:	463b      	mov	r3, r7
 8014242:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    assert(ring_buffer_str.bo.base_virt);
 8014248:	4b14      	ldr	r3, [pc, #80]	@ (801429c <nema_sys_init+0xc0>)
 801424a:	689b      	ldr	r3, [r3, #8]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d105      	bne.n	801425c <nema_sys_init+0x80>
 8014250:	4b13      	ldr	r3, [pc, #76]	@ (80142a0 <nema_sys_init+0xc4>)
 8014252:	4a0e      	ldr	r2, [pc, #56]	@ (801428c <nema_sys_init+0xb0>)
 8014254:	215a      	movs	r1, #90	@ 0x5a
 8014256:	480e      	ldr	r0, [pc, #56]	@ (8014290 <nema_sys_init+0xb4>)
 8014258:	f017 fcae 	bl	802bbb8 <__assert_func>

    /* Initialize Ring Buffer */
    error_code = nema_rb_init(&ring_buffer_str, 1);
 801425c:	2101      	movs	r1, #1
 801425e:	480f      	ldr	r0, [pc, #60]	@ (801429c <nema_sys_init+0xc0>)
 8014260:	f005 f9ca 	bl	80195f8 <nema_rb_init>
 8014264:	6178      	str	r0, [r7, #20]
    if (error_code < 0)
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	2b00      	cmp	r3, #0
 801426a:	da01      	bge.n	8014270 <nema_sys_init+0x94>
    {
        return error_code;
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	e003      	b.n	8014278 <nema_sys_init+0x9c>
    }

    /* Reset last_cl_id counter */
    last_cl_id = 0;
 8014270:	4b0c      	ldr	r3, [pc, #48]	@ (80142a4 <nema_sys_init+0xc8>)
 8014272:	2200      	movs	r2, #0
 8014274:	601a      	str	r2, [r3, #0]

    return error_code;
 8014276:	697b      	ldr	r3, [r7, #20]
}
 8014278:	4618      	mov	r0, r3
 801427a:	371c      	adds	r7, #28
 801427c:	46bd      	mov	sp, r7
 801427e:	bd90      	pop	{r4, r7, pc}
 8014280:	0802d808 	.word	0x0802d808
 8014284:	2015a050 	.word	0x2015a050
 8014288:	0802d818 	.word	0x0802d818
 801428c:	0802e144 	.word	0x0802e144
 8014290:	0802d834 	.word	0x0802d834
 8014294:	200a91b8 	.word	0x200a91b8
 8014298:	0802d85c 	.word	0x0802d85c
 801429c:	2015a038 	.word	0x2015a038
 80142a0:	0802d86c 	.word	0x0802d86c
 80142a4:	2000001c 	.word	0x2000001c

080142a8 <nema_reg_read>:

uint32_t nema_reg_read(uint32_t reg)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
    return HAL_GPU2D_ReadRegister(&hgpu2d, reg);
 80142b0:	6879      	ldr	r1, [r7, #4]
 80142b2:	4804      	ldr	r0, [pc, #16]	@ (80142c4 <nema_reg_read+0x1c>)
 80142b4:	f7f3 f8f6 	bl	80074a4 <HAL_GPU2D_ReadRegister>
 80142b8:	4603      	mov	r3, r0
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	200aec7c 	.word	0x200aec7c

080142c8 <nema_reg_write>:

void nema_reg_write(uint32_t reg, uint32_t value)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
    HAL_GPU2D_WriteRegister(&hgpu2d, reg, value);
 80142d2:	683a      	ldr	r2, [r7, #0]
 80142d4:	6879      	ldr	r1, [r7, #4]
 80142d6:	4803      	ldr	r0, [pc, #12]	@ (80142e4 <nema_reg_write+0x1c>)
 80142d8:	f7f3 f8f6 	bl	80074c8 <HAL_GPU2D_WriteRegister>
}
 80142dc:	bf00      	nop
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	200aec7c 	.word	0x200aec7c

080142e8 <nema_wait_irq>:

int nema_wait_irq(void)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	af00      	add	r7, sp, #0
    /* Wait indefinitely for a free semaphore */
    tx_semaphore_get(&nema_irq_sem, TX_WAIT_FOREVER);
 80142ec:	f04f 31ff 	mov.w	r1, #4294967295
 80142f0:	4802      	ldr	r0, [pc, #8]	@ (80142fc <nema_wait_irq+0x14>)
 80142f2:	f7fb fed3 	bl	801009c <_txe_semaphore_get>

    return 0;
 80142f6:	2300      	movs	r3, #0
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	bd80      	pop	{r7, pc}
 80142fc:	2015a050 	.word	0x2015a050

08014300 <nema_wait_irq_cl>:

int nema_wait_irq_cl(int cl_id)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
    while (last_cl_id < cl_id)
 8014308:	e001      	b.n	801430e <nema_wait_irq_cl+0xe>
    {
        (void)nema_wait_irq();
 801430a:	f7ff ffed 	bl	80142e8 <nema_wait_irq>
    while (last_cl_id < cl_id)
 801430e:	4b05      	ldr	r3, [pc, #20]	@ (8014324 <nema_wait_irq_cl+0x24>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	429a      	cmp	r2, r3
 8014316:	dcf8      	bgt.n	801430a <nema_wait_irq_cl+0xa>
    }

    return 0;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	3708      	adds	r7, #8
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	2000001c 	.word	0x2000001c

08014328 <nema_host_free>:

    return 0;
}

void nema_host_free(void* ptr)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b082      	sub	sp, #8
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
    tsi_free(ptr);
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f006 fd7f 	bl	801ae34 <tsi_free>
}
 8014336:	bf00      	nop
 8014338:	3708      	adds	r7, #8
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <nema_host_malloc>:

void* nema_host_malloc(unsigned size)
{
 801433e:	b580      	push	{r7, lr}
 8014340:	b082      	sub	sp, #8
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
    return tsi_malloc(size);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	4619      	mov	r1, r3
 801434a:	2000      	movs	r0, #0
 801434c:	f006 fd14 	bl	801ad78 <tsi_malloc_pool>
 8014350:	4603      	mov	r3, r0
}
 8014352:	4618      	mov	r0, r3
 8014354:	3708      	adds	r7, #8
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}
	...

0801435c <nema_buffer_create>:

nema_buffer_t nema_buffer_create(int size)
{
 801435c:	b590      	push	{r4, r7, lr}
 801435e:	b087      	sub	sp, #28
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	6039      	str	r1, [r7, #0]
    nema_buffer_t bo;
    memset(&bo, 0, sizeof(bo));
 8014366:	f107 0308 	add.w	r3, r7, #8
 801436a:	2210      	movs	r2, #16
 801436c:	2100      	movs	r1, #0
 801436e:	4618      	mov	r0, r3
 8014370:	f017 fe29 	bl	802bfc6 <memset>
    bo.base_virt = tsi_malloc(size);
 8014374:	6839      	ldr	r1, [r7, #0]
 8014376:	2000      	movs	r0, #0
 8014378:	f006 fcfe 	bl	801ad78 <tsi_malloc_pool>
 801437c:	4603      	mov	r3, r0
 801437e:	613b      	str	r3, [r7, #16]
    bo.base_phys = (uint32_t)bo.base_virt;
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	617b      	str	r3, [r7, #20]
    bo.size      = size;
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	60bb      	str	r3, [r7, #8]
    assert(bo.base_virt != 0 && "Unable to allocate memory in nema_buffer_create");
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d105      	bne.n	801439a <nema_buffer_create+0x3e>
 801438e:	4b08      	ldr	r3, [pc, #32]	@ (80143b0 <nema_buffer_create+0x54>)
 8014390:	4a08      	ldr	r2, [pc, #32]	@ (80143b4 <nema_buffer_create+0x58>)
 8014392:	21a0      	movs	r1, #160	@ 0xa0
 8014394:	4808      	ldr	r0, [pc, #32]	@ (80143b8 <nema_buffer_create+0x5c>)
 8014396:	f017 fc0f 	bl	802bbb8 <__assert_func>

    return bo;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	461c      	mov	r4, r3
 801439e:	f107 0308 	add.w	r3, r7, #8
 80143a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	371c      	adds	r7, #28
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd90      	pop	{r4, r7, pc}
 80143b0:	0802d88c 	.word	0x0802d88c
 80143b4:	0802e154 	.word	0x0802e154
 80143b8:	0802d834 	.word	0x0802d834

080143bc <nema_buffer_create_pool>:

nema_buffer_t nema_buffer_create_pool(int pool, int size)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b084      	sub	sp, #16
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	60b9      	str	r1, [r7, #8]
 80143c6:	607a      	str	r2, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(pool);

    return nema_buffer_create(size);
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	6879      	ldr	r1, [r7, #4]
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7ff ffc5 	bl	801435c <nema_buffer_create>
}
 80143d2:	68f8      	ldr	r0, [r7, #12]
 80143d4:	3710      	adds	r7, #16
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}

080143da <nema_buffer_map>:

void* nema_buffer_map(nema_buffer_t* bo)
{
 80143da:	b480      	push	{r7}
 80143dc:	b083      	sub	sp, #12
 80143de:	af00      	add	r7, sp, #0
 80143e0:	6078      	str	r0, [r7, #4]
    return bo->base_virt;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	689b      	ldr	r3, [r3, #8]
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	370c      	adds	r7, #12
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr

080143f2 <nema_buffer_flush>:
{
    return bo->base_phys;
}

void nema_buffer_flush(nema_buffer_t* bo)
{
 80143f2:	b480      	push	{r7}
 80143f4:	b083      	sub	sp, #12
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(bo);
}
 80143fa:	bf00      	nop
 80143fc:	370c      	adds	r7, #12
 80143fe:	46bd      	mov	sp, r7
 8014400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014404:	4770      	bx	lr

08014406 <nema_mutex_lock>:

int nema_mutex_lock(int mutex_id)
{
 8014406:	b480      	push	{r7}
 8014408:	b085      	sub	sp, #20
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
    int retval = 0;
 801440e:	2300      	movs	r3, #0
 8014410:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN nema_mutex_lock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
    /* USER CODE END nema_mutex_lock */

    return retval;
 8014412:	68fb      	ldr	r3, [r7, #12]
}
 8014414:	4618      	mov	r0, r3
 8014416:	3714      	adds	r7, #20
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr

08014420 <nema_mutex_unlock>:

int nema_mutex_unlock(int mutex_id)
{
 8014420:	b480      	push	{r7}
 8014422:	b085      	sub	sp, #20
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
    int retval = 0;
 8014428:	2300      	movs	r3, #0
 801442a:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN nema_mutex_unlock */
    /* Prevent unused argument(s) compilation warning */
    UNUSED(mutex_id);
    /* USER CODE END nema_mutex_unlock */

    return retval;
 801442c:	68fb      	ldr	r3, [r7, #12]
}
 801442e:	4618      	mov	r0, r3
 8014430:	3714      	adds	r7, #20
 8014432:	46bd      	mov	sp, r7
 8014434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014438:	4770      	bx	lr

0801443a <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801443a:	8880      	ldrh	r0, [r0, #4]
 801443c:	4770      	bx	lr

0801443e <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801443e:	b570      	push	{r4, r5, r6, lr}
 8014440:	6803      	ldr	r3, [r0, #0]
 8014442:	4605      	mov	r5, r0
 8014444:	460c      	mov	r4, r1
 8014446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014448:	2100      	movs	r1, #0
 801444a:	4798      	blx	r3
 801444c:	682b      	ldr	r3, [r5, #0]
 801444e:	4606      	mov	r6, r0
 8014450:	6a1b      	ldr	r3, [r3, #32]
 8014452:	4628      	mov	r0, r5
 8014454:	4798      	blx	r3
 8014456:	1ba4      	subs	r4, r4, r6
 8014458:	b2a4      	uxth	r4, r4
 801445a:	fbb4 f0f0 	udiv	r0, r4, r0
 801445e:	bd70      	pop	{r4, r5, r6, pc}

08014460 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8014460:	2300      	movs	r3, #0
 8014462:	8083      	strh	r3, [r0, #4]
 8014464:	4770      	bx	lr

08014466 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8014466:	b510      	push	{r4, lr}
 8014468:	4604      	mov	r4, r0
 801446a:	6803      	ldr	r3, [r0, #0]
 801446c:	8881      	ldrh	r1, [r0, #4]
 801446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014470:	4798      	blx	r3
 8014472:	88a3      	ldrh	r3, [r4, #4]
 8014474:	3301      	adds	r3, #1
 8014476:	80a3      	strh	r3, [r4, #4]
 8014478:	bd10      	pop	{r4, pc}

0801447a <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801447a:	6803      	ldr	r3, [r0, #0]
 801447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801447e:	4718      	bx	r3

08014480 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8014480:	4770      	bx	lr
	...

08014484 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8014484:	4a02      	ldr	r2, [pc, #8]	@ (8014490 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8014486:	6002      	str	r2, [r0, #0]
 8014488:	2200      	movs	r2, #0
 801448a:	8082      	strh	r2, [r0, #4]
 801448c:	4770      	bx	lr
 801448e:	bf00      	nop
 8014490:	0802e170 	.word	0x0802e170

08014494 <_ZN8touchgfx9Container13getFirstChildEv>:
 8014494:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8014496:	4770      	bx	lr

08014498 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014498:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801449a:	2000      	movs	r0, #0
 801449c:	b12b      	cbz	r3, 80144aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801449e:	b920      	cbnz	r0, 80144aa <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80144a0:	1a5a      	subs	r2, r3, r1
 80144a2:	4250      	negs	r0, r2
 80144a4:	4150      	adcs	r0, r2
 80144a6:	699b      	ldr	r3, [r3, #24]
 80144a8:	e7f8      	b.n	801449c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80144aa:	4770      	bx	lr

080144ac <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80144ac:	2300      	movs	r3, #0
 80144ae:	6148      	str	r0, [r1, #20]
 80144b0:	618b      	str	r3, [r1, #24]
 80144b2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80144b4:	b913      	cbnz	r3, 80144bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80144b6:	6281      	str	r1, [r0, #40]	@ 0x28
 80144b8:	4770      	bx	lr
 80144ba:	4613      	mov	r3, r2
 80144bc:	699a      	ldr	r2, [r3, #24]
 80144be:	2a00      	cmp	r2, #0
 80144c0:	d1fb      	bne.n	80144ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80144c2:	6199      	str	r1, [r3, #24]
 80144c4:	4770      	bx	lr

080144c6 <_ZN8touchgfx9Container9removeAllEv>:
 80144c6:	2200      	movs	r2, #0
 80144c8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80144ca:	b123      	cbz	r3, 80144d6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80144cc:	6999      	ldr	r1, [r3, #24]
 80144ce:	6281      	str	r1, [r0, #40]	@ 0x28
 80144d0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80144d4:	e7f8      	b.n	80144c8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80144d6:	4770      	bx	lr

080144d8 <_ZN8touchgfx9Container6unlinkEv>:
 80144d8:	2300      	movs	r3, #0
 80144da:	6283      	str	r3, [r0, #40]	@ 0x28
 80144dc:	4770      	bx	lr

080144de <_ZNK8touchgfx9Container12getSolidRectEv>:
 80144de:	2200      	movs	r2, #0
 80144e0:	8002      	strh	r2, [r0, #0]
 80144e2:	8042      	strh	r2, [r0, #2]
 80144e4:	8082      	strh	r2, [r0, #4]
 80144e6:	80c2      	strh	r2, [r0, #6]
 80144e8:	4770      	bx	lr

080144ea <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80144ea:	b570      	push	{r4, r5, r6, lr}
 80144ec:	460d      	mov	r5, r1
 80144ee:	4616      	mov	r6, r2
 80144f0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80144f2:	b13c      	cbz	r4, 8014504 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80144f4:	6823      	ldr	r3, [r4, #0]
 80144f6:	4620      	mov	r0, r4
 80144f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80144fa:	4632      	mov	r2, r6
 80144fc:	4629      	mov	r1, r5
 80144fe:	4798      	blx	r3
 8014500:	69a4      	ldr	r4, [r4, #24]
 8014502:	e7f6      	b.n	80144f2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014504:	bd70      	pop	{r4, r5, r6, pc}

08014506 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014506:	b538      	push	{r3, r4, r5, lr}
 8014508:	460d      	mov	r5, r1
 801450a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801450c:	b134      	cbz	r4, 801451c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801450e:	682b      	ldr	r3, [r5, #0]
 8014510:	4621      	mov	r1, r4
 8014512:	689b      	ldr	r3, [r3, #8]
 8014514:	4628      	mov	r0, r5
 8014516:	4798      	blx	r3
 8014518:	69a4      	ldr	r4, [r4, #24]
 801451a:	e7f7      	b.n	801450c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801451c:	bd38      	pop	{r3, r4, r5, pc}

0801451e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801451e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014520:	b19b      	cbz	r3, 801454a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014522:	428b      	cmp	r3, r1
 8014524:	d109      	bne.n	801453a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014526:	2100      	movs	r1, #0
 8014528:	699a      	ldr	r2, [r3, #24]
 801452a:	6159      	str	r1, [r3, #20]
 801452c:	6282      	str	r2, [r0, #40]	@ 0x28
 801452e:	b902      	cbnz	r2, 8014532 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014530:	4770      	bx	lr
 8014532:	6199      	str	r1, [r3, #24]
 8014534:	4770      	bx	lr
 8014536:	4613      	mov	r3, r2
 8014538:	b13a      	cbz	r2, 801454a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801453a:	699a      	ldr	r2, [r3, #24]
 801453c:	428a      	cmp	r2, r1
 801453e:	d1fa      	bne.n	8014536 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014540:	698a      	ldr	r2, [r1, #24]
 8014542:	619a      	str	r2, [r3, #24]
 8014544:	2300      	movs	r3, #0
 8014546:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801454a:	4770      	bx	lr

0801454c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801454c:	b410      	push	{r4}
 801454e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014550:	4604      	mov	r4, r0
 8014552:	b92b      	cbnz	r3, 8014560 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014554:	6803      	ldr	r3, [r0, #0]
 8014556:	4611      	mov	r1, r2
 8014558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801455a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801455e:	4718      	bx	r3
 8014560:	b941      	cbnz	r1, 8014574 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014562:	6193      	str	r3, [r2, #24]
 8014564:	6282      	str	r2, [r0, #40]	@ 0x28
 8014566:	6154      	str	r4, [r2, #20]
 8014568:	f85d 4b04 	ldr.w	r4, [sp], #4
 801456c:	4770      	bx	lr
 801456e:	4603      	mov	r3, r0
 8014570:	2800      	cmp	r0, #0
 8014572:	d0f9      	beq.n	8014568 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014574:	4299      	cmp	r1, r3
 8014576:	6998      	ldr	r0, [r3, #24]
 8014578:	d1f9      	bne.n	801456e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801457a:	6190      	str	r0, [r2, #24]
 801457c:	618a      	str	r2, [r1, #24]
 801457e:	e7f2      	b.n	8014566 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08014580 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014584:	461f      	mov	r7, r3
 8014586:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801458a:	460d      	mov	r5, r1
 801458c:	4616      	mov	r6, r2
 801458e:	b103      	cbz	r3, 8014592 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014590:	6038      	str	r0, [r7, #0]
 8014592:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014594:	b314      	cbz	r4, 80145dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014596:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801459a:	b1eb      	cbz	r3, 80145d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801459c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80145a0:	428d      	cmp	r5, r1
 80145a2:	db19      	blt.n	80145d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80145a4:	8923      	ldrh	r3, [r4, #8]
 80145a6:	b289      	uxth	r1, r1
 80145a8:	440b      	add	r3, r1
 80145aa:	b21b      	sxth	r3, r3
 80145ac:	429d      	cmp	r5, r3
 80145ae:	da13      	bge.n	80145d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80145b0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80145b4:	4296      	cmp	r6, r2
 80145b6:	db0f      	blt.n	80145d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80145b8:	8963      	ldrh	r3, [r4, #10]
 80145ba:	b292      	uxth	r2, r2
 80145bc:	4413      	add	r3, r2
 80145be:	b21b      	sxth	r3, r3
 80145c0:	429e      	cmp	r6, r3
 80145c2:	da09      	bge.n	80145d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80145c4:	6823      	ldr	r3, [r4, #0]
 80145c6:	1ab2      	subs	r2, r6, r2
 80145c8:	1a69      	subs	r1, r5, r1
 80145ca:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80145ce:	b212      	sxth	r2, r2
 80145d0:	463b      	mov	r3, r7
 80145d2:	b209      	sxth	r1, r1
 80145d4:	4620      	mov	r0, r4
 80145d6:	47c0      	blx	r8
 80145d8:	69a4      	ldr	r4, [r4, #24]
 80145da:	e7db      	b.n	8014594 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80145dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80145e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e4:	4c6c      	ldr	r4, [pc, #432]	@ (8014798 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 80145e6:	b0a1      	sub	sp, #132	@ 0x84
 80145e8:	6824      	ldr	r4, [r4, #0]
 80145ea:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80145ec:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 80145f0:	2400      	movs	r4, #0
 80145f2:	802c      	strh	r4, [r5, #0]
 80145f4:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80145f6:	4606      	mov	r6, r0
 80145f8:	802c      	strh	r4, [r5, #0]
 80145fa:	601c      	str	r4, [r3, #0]
 80145fc:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8014600:	9303      	str	r3, [sp, #12]
 8014602:	f7ff ffbd 	bl	8014580 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014606:	f1b9 0f03 	cmp.w	r9, #3
 801460a:	f340 80bf 	ble.w	801478c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 801460e:	4631      	mov	r1, r6
 8014610:	a80c      	add	r0, sp, #48	@ 0x30
 8014612:	f003 fa49 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014616:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801461a:	9306      	str	r3, [sp, #24]
 801461c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014620:	9307      	str	r3, [sp, #28]
 8014622:	9b03      	ldr	r3, [sp, #12]
 8014624:	f8d3 a000 	ldr.w	sl, [r3]
 8014628:	f1ba 0f00 	cmp.w	sl, #0
 801462c:	f000 80b1 	beq.w	8014792 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8014630:	4651      	mov	r1, sl
 8014632:	a810      	add	r0, sp, #64	@ 0x40
 8014634:	f003 fa38 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014638:	2002      	movs	r0, #2
 801463a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 801463e:	9b01      	ldr	r3, [sp, #4]
 8014640:	fb91 f1f0 	sdiv	r1, r1, r0
 8014644:	9a06      	ldr	r2, [sp, #24]
 8014646:	189d      	adds	r5, r3, r2
 8014648:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 801464c:	9a07      	ldr	r2, [sp, #28]
 801464e:	4419      	add	r1, r3
 8014650:	9b02      	ldr	r3, [sp, #8]
 8014652:	1a6d      	subs	r5, r5, r1
 8014654:	4413      	add	r3, r2
 8014656:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801465a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801465e:	fb92 f2f0 	sdiv	r2, r2, r0
 8014662:	440a      	add	r2, r1
 8014664:	1a9b      	subs	r3, r3, r2
 8014666:	435b      	muls	r3, r3
 8014668:	fb05 3505 	mla	r5, r5, r5, r3
 801466c:	4f4b      	ldr	r7, [pc, #300]	@ (801479c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801466e:	ac10      	add	r4, sp, #64	@ 0x40
 8014670:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014674:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014678:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801467a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801467c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8014680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014684:	2303      	movs	r3, #3
 8014686:	f1b9 0f0c 	cmp.w	r9, #12
 801468a:	bfda      	itte	le
 801468c:	f109 32ff 	addle.w	r2, r9, #4294967295
 8014690:	fb92 f8f3 	sdivle	r8, r2, r3
 8014694:	4698      	movgt	r8, r3
 8014696:	2400      	movs	r4, #0
 8014698:	f8cd 9000 	str.w	r9, [sp]
 801469c:	1c63      	adds	r3, r4, #1
 801469e:	9308      	str	r3, [sp, #32]
 80146a0:	9b00      	ldr	r3, [sp, #0]
 80146a2:	f04f 0b00 	mov.w	fp, #0
 80146a6:	fb93 f3f8 	sdiv	r3, r3, r8
 80146aa:	f004 0401 	and.w	r4, r4, #1
 80146ae:	aa10      	add	r2, sp, #64	@ 0x40
 80146b0:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	3404      	adds	r4, #4
 80146b8:	9304      	str	r3, [sp, #16]
 80146ba:	9a04      	ldr	r2, [sp, #16]
 80146bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80146c0:	fb13 f302 	smulbb	r3, r3, r2
 80146c4:	9a01      	ldr	r2, [sp, #4]
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	1899      	adds	r1, r3, r2
 80146ca:	9305      	str	r3, [sp, #20]
 80146cc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80146d0:	b209      	sxth	r1, r1
 80146d2:	4299      	cmp	r1, r3
 80146d4:	db4d      	blt.n	8014772 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80146d6:	8932      	ldrh	r2, [r6, #8]
 80146d8:	4413      	add	r3, r2
 80146da:	b21b      	sxth	r3, r3
 80146dc:	4299      	cmp	r1, r3
 80146de:	da48      	bge.n	8014772 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80146e0:	9b04      	ldr	r3, [sp, #16]
 80146e2:	6827      	ldr	r7, [r4, #0]
 80146e4:	fb17 f703 	smulbb	r7, r7, r3
 80146e8:	9b02      	ldr	r3, [sp, #8]
 80146ea:	b2bf      	uxth	r7, r7
 80146ec:	18fa      	adds	r2, r7, r3
 80146ee:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80146f2:	b212      	sxth	r2, r2
 80146f4:	429a      	cmp	r2, r3
 80146f6:	db3c      	blt.n	8014772 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80146f8:	8970      	ldrh	r0, [r6, #10]
 80146fa:	4403      	add	r3, r0
 80146fc:	b21b      	sxth	r3, r3
 80146fe:	429a      	cmp	r2, r3
 8014700:	da37      	bge.n	8014772 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014702:	2300      	movs	r3, #0
 8014704:	4630      	mov	r0, r6
 8014706:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014708:	ab0b      	add	r3, sp, #44	@ 0x2c
 801470a:	f7ff ff39 	bl	8014580 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801470e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014710:	b37a      	cbz	r2, 8014772 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014712:	4552      	cmp	r2, sl
 8014714:	d02d      	beq.n	8014772 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8014716:	4611      	mov	r1, r2
 8014718:	a80e      	add	r0, sp, #56	@ 0x38
 801471a:	9209      	str	r2, [sp, #36]	@ 0x24
 801471c:	f003 f9c4 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014720:	f04f 0e02 	mov.w	lr, #2
 8014724:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8014728:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801472c:	fb91 f1fe 	sdiv	r1, r1, lr
 8014730:	fb9c fcfe 	sdiv	ip, ip, lr
 8014734:	9a06      	ldr	r2, [sp, #24]
 8014736:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801473a:	9b01      	ldr	r3, [sp, #4]
 801473c:	4401      	add	r1, r0
 801473e:	4413      	add	r3, r2
 8014740:	1a58      	subs	r0, r3, r1
 8014742:	9a07      	ldr	r2, [sp, #28]
 8014744:	9b02      	ldr	r3, [sp, #8]
 8014746:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801474a:	4413      	add	r3, r2
 801474c:	448c      	add	ip, r1
 801474e:	eba3 030c 	sub.w	r3, r3, ip
 8014752:	435b      	muls	r3, r3
 8014754:	fb00 3300 	mla	r3, r0, r0, r3
 8014758:	42ab      	cmp	r3, r5
 801475a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801475c:	d208      	bcs.n	8014770 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 801475e:	461d      	mov	r5, r3
 8014760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014762:	9803      	ldr	r0, [sp, #12]
 8014764:	6001      	str	r1, [r0, #0]
 8014766:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8014768:	9805      	ldr	r0, [sp, #20]
 801476a:	8008      	strh	r0, [r1, #0]
 801476c:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801476e:	800f      	strh	r7, [r1, #0]
 8014770:	4692      	mov	sl, r2
 8014772:	f10b 0b01 	add.w	fp, fp, #1
 8014776:	f1bb 0f04 	cmp.w	fp, #4
 801477a:	f104 0408 	add.w	r4, r4, #8
 801477e:	d19c      	bne.n	80146ba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8014780:	9b00      	ldr	r3, [sp, #0]
 8014782:	9c08      	ldr	r4, [sp, #32]
 8014784:	444b      	add	r3, r9
 8014786:	4544      	cmp	r4, r8
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	d187      	bne.n	801469c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 801478c:	b021      	add	sp, #132	@ 0x84
 801478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014792:	f04f 35ff 	mov.w	r5, #4294967295
 8014796:	e769      	b.n	801466c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8014798:	2015a078 	.word	0x2015a078
 801479c:	0802d8d4 	.word	0x0802d8d4

080147a0 <_ZN8touchgfx4RectaNERKS0_>:
 80147a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147a4:	f9b1 7000 	ldrsh.w	r7, [r1]
 80147a8:	888c      	ldrh	r4, [r1, #4]
 80147aa:	f9b0 9000 	ldrsh.w	r9, [r0]
 80147ae:	443c      	add	r4, r7
 80147b0:	b2a4      	uxth	r4, r4
 80147b2:	fa0f f884 	sxth.w	r8, r4
 80147b6:	45c1      	cmp	r9, r8
 80147b8:	da2f      	bge.n	801481a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80147ba:	8882      	ldrh	r2, [r0, #4]
 80147bc:	444a      	add	r2, r9
 80147be:	b292      	uxth	r2, r2
 80147c0:	fa0f fe82 	sxth.w	lr, r2
 80147c4:	4577      	cmp	r7, lr
 80147c6:	da28      	bge.n	801481a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80147c8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80147cc:	88cb      	ldrh	r3, [r1, #6]
 80147ce:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80147d2:	442b      	add	r3, r5
 80147d4:	b21b      	sxth	r3, r3
 80147d6:	429e      	cmp	r6, r3
 80147d8:	da1f      	bge.n	801481a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80147da:	88c3      	ldrh	r3, [r0, #6]
 80147dc:	4433      	add	r3, r6
 80147de:	b29b      	uxth	r3, r3
 80147e0:	fa0f fc83 	sxth.w	ip, r3
 80147e4:	4565      	cmp	r5, ip
 80147e6:	da18      	bge.n	801481a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80147e8:	454f      	cmp	r7, r9
 80147ea:	bfb8      	it	lt
 80147ec:	464f      	movlt	r7, r9
 80147ee:	42b5      	cmp	r5, r6
 80147f0:	bfb8      	it	lt
 80147f2:	4635      	movlt	r5, r6
 80147f4:	45f0      	cmp	r8, lr
 80147f6:	bfd8      	it	le
 80147f8:	4622      	movle	r2, r4
 80147fa:	1bd2      	subs	r2, r2, r7
 80147fc:	8082      	strh	r2, [r0, #4]
 80147fe:	884a      	ldrh	r2, [r1, #2]
 8014800:	88c9      	ldrh	r1, [r1, #6]
 8014802:	8007      	strh	r7, [r0, #0]
 8014804:	440a      	add	r2, r1
 8014806:	b292      	uxth	r2, r2
 8014808:	b211      	sxth	r1, r2
 801480a:	458c      	cmp	ip, r1
 801480c:	bfa8      	it	ge
 801480e:	4613      	movge	r3, r2
 8014810:	1b5b      	subs	r3, r3, r5
 8014812:	80c3      	strh	r3, [r0, #6]
 8014814:	8045      	strh	r5, [r0, #2]
 8014816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801481a:	2300      	movs	r3, #0
 801481c:	8003      	strh	r3, [r0, #0]
 801481e:	8043      	strh	r3, [r0, #2]
 8014820:	8083      	strh	r3, [r0, #4]
 8014822:	80c3      	strh	r3, [r0, #6]
 8014824:	e7f7      	b.n	8014816 <_ZN8touchgfx4RectaNERKS0_+0x76>

08014826 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014826:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801482a:	2b00      	cmp	r3, #0
 801482c:	dd06      	ble.n	801483c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801482e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014832:	2800      	cmp	r0, #0
 8014834:	bfcc      	ite	gt
 8014836:	2000      	movgt	r0, #0
 8014838:	2001      	movle	r0, #1
 801483a:	4770      	bx	lr
 801483c:	2001      	movs	r0, #1
 801483e:	4770      	bx	lr

08014840 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014840:	2300      	movs	r3, #0
 8014842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014846:	4604      	mov	r4, r0
 8014848:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801484a:	8003      	strh	r3, [r0, #0]
 801484c:	8043      	strh	r3, [r0, #2]
 801484e:	8083      	strh	r3, [r0, #4]
 8014850:	80c3      	strh	r3, [r0, #6]
 8014852:	2d00      	cmp	r5, #0
 8014854:	d040      	beq.n	80148d8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014856:	1d28      	adds	r0, r5, #4
 8014858:	f7ff ffe5 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801485c:	b988      	cbnz	r0, 8014882 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801485e:	4620      	mov	r0, r4
 8014860:	f7ff ffe1 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014864:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014868:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801486c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014870:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014874:	b138      	cbz	r0, 8014886 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014876:	8022      	strh	r2, [r4, #0]
 8014878:	8063      	strh	r3, [r4, #2]
 801487a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801487e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014882:	69ad      	ldr	r5, [r5, #24]
 8014884:	e7e5      	b.n	8014852 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014886:	f9b4 0000 	ldrsh.w	r0, [r4]
 801488a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801488e:	4290      	cmp	r0, r2
 8014890:	4607      	mov	r7, r0
 8014892:	bfa8      	it	ge
 8014894:	4617      	movge	r7, r2
 8014896:	4299      	cmp	r1, r3
 8014898:	460e      	mov	r6, r1
 801489a:	bfa8      	it	ge
 801489c:	461e      	movge	r6, r3
 801489e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80148a2:	4472      	add	r2, lr
 80148a4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80148a8:	4440      	add	r0, r8
 80148aa:	4471      	add	r1, lr
 80148ac:	4463      	add	r3, ip
 80148ae:	b200      	sxth	r0, r0
 80148b0:	b212      	sxth	r2, r2
 80148b2:	b209      	sxth	r1, r1
 80148b4:	b21b      	sxth	r3, r3
 80148b6:	4290      	cmp	r0, r2
 80148b8:	bfac      	ite	ge
 80148ba:	ebc7 0200 	rsbge	r2, r7, r0
 80148be:	ebc7 0202 	rsblt	r2, r7, r2
 80148c2:	4299      	cmp	r1, r3
 80148c4:	bfac      	ite	ge
 80148c6:	ebc6 0301 	rsbge	r3, r6, r1
 80148ca:	ebc6 0303 	rsblt	r3, r6, r3
 80148ce:	8027      	strh	r7, [r4, #0]
 80148d0:	8066      	strh	r6, [r4, #2]
 80148d2:	80a2      	strh	r2, [r4, #4]
 80148d4:	80e3      	strh	r3, [r4, #6]
 80148d6:	e7d4      	b.n	8014882 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80148d8:	4620      	mov	r0, r4
 80148da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148de <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80148de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80148e2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80148e6:	b383      	cbz	r3, 801494a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80148e8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80148ea:	b374      	cbz	r4, 801494a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80148ec:	f9b1 5000 	ldrsh.w	r5, [r1]
 80148f0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80148f4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80148f8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80148fc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014900:	b303      	cbz	r3, 8014944 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014902:	4668      	mov	r0, sp
 8014904:	1d21      	adds	r1, r4, #4
 8014906:	f8ad 5000 	strh.w	r5, [sp]
 801490a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801490e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014912:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014916:	f7ff ff43 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 801491a:	4668      	mov	r0, sp
 801491c:	f7ff ff83 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014920:	b980      	cbnz	r0, 8014944 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014922:	f8bd 3000 	ldrh.w	r3, [sp]
 8014926:	88a2      	ldrh	r2, [r4, #4]
 8014928:	4669      	mov	r1, sp
 801492a:	1a9b      	subs	r3, r3, r2
 801492c:	f8ad 3000 	strh.w	r3, [sp]
 8014930:	88e2      	ldrh	r2, [r4, #6]
 8014932:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014936:	4620      	mov	r0, r4
 8014938:	1a9b      	subs	r3, r3, r2
 801493a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801493e:	6823      	ldr	r3, [r4, #0]
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	4798      	blx	r3
 8014944:	69a4      	ldr	r4, [r4, #24]
 8014946:	2c00      	cmp	r4, #0
 8014948:	d1d8      	bne.n	80148fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801494a:	b002      	add	sp, #8
 801494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014950 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014950:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014952:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8014956:	460d      	mov	r5, r1
 8014958:	4616      	mov	r6, r2
 801495a:	b323      	cbz	r3, 80149a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801495c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801495e:	b314      	cbz	r4, 80149a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014960:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014964:	b1eb      	cbz	r3, 80149a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014966:	466b      	mov	r3, sp
 8014968:	6828      	ldr	r0, [r5, #0]
 801496a:	6869      	ldr	r1, [r5, #4]
 801496c:	c303      	stmia	r3!, {r0, r1}
 801496e:	4668      	mov	r0, sp
 8014970:	1d21      	adds	r1, r4, #4
 8014972:	f7ff ff15 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 8014976:	4668      	mov	r0, sp
 8014978:	f7ff ff55 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801497c:	b988      	cbnz	r0, 80149a2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801497e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014982:	88a2      	ldrh	r2, [r4, #4]
 8014984:	4669      	mov	r1, sp
 8014986:	1a9b      	subs	r3, r3, r2
 8014988:	f8ad 3000 	strh.w	r3, [sp]
 801498c:	88e2      	ldrh	r2, [r4, #6]
 801498e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014992:	4620      	mov	r0, r4
 8014994:	1a9b      	subs	r3, r3, r2
 8014996:	f8ad 3002 	strh.w	r3, [sp, #2]
 801499a:	6823      	ldr	r3, [r4, #0]
 801499c:	4632      	mov	r2, r6
 801499e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149a0:	4798      	blx	r3
 80149a2:	69a4      	ldr	r4, [r4, #24]
 80149a4:	e7db      	b.n	801495e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80149a6:	b002      	add	sp, #8
 80149a8:	bd70      	pop	{r4, r5, r6, pc}

080149aa <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80149aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80149ae:	4770      	bx	lr

080149b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80149b0:	b513      	push	{r0, r1, r4, lr}
 80149b2:	6803      	ldr	r3, [r0, #0]
 80149b4:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80149b8:	2300      	movs	r3, #0
 80149ba:	e9cd 3300 	strd	r3, r3, [sp]
 80149be:	466b      	mov	r3, sp
 80149c0:	47a0      	blx	r4
 80149c2:	b002      	add	sp, #8
 80149c4:	bd10      	pop	{r4, pc}

080149c6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80149c6:	2301      	movs	r3, #1
 80149c8:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80149cc:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80149d0:	4770      	bx	lr

080149d2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80149d2:	2301      	movs	r3, #1
 80149d4:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80149d8:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80149dc:	4770      	bx	lr

080149de <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80149de:	2201      	movs	r2, #1
 80149e0:	6843      	ldr	r3, [r0, #4]
 80149e2:	725a      	strb	r2, [r3, #9]
 80149e4:	6840      	ldr	r0, [r0, #4]
 80149e6:	6803      	ldr	r3, [r0, #0]
 80149e8:	691b      	ldr	r3, [r3, #16]
 80149ea:	4718      	bx	r3

080149ec <_ZN8touchgfx3HAL8flushDMAEv>:
 80149ec:	6840      	ldr	r0, [r0, #4]
 80149ee:	6803      	ldr	r3, [r0, #0]
 80149f0:	689b      	ldr	r3, [r3, #8]
 80149f2:	4718      	bx	r3

080149f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80149f4:	b530      	push	{r4, r5, lr}
 80149f6:	b08b      	sub	sp, #44	@ 0x2c
 80149f8:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80149fc:	6804      	ldr	r4, [r0, #0]
 80149fe:	9509      	str	r5, [sp, #36]	@ 0x24
 8014a00:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8014a04:	9508      	str	r5, [sp, #32]
 8014a06:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8014a0a:	9507      	str	r5, [sp, #28]
 8014a0c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8014a10:	9506      	str	r5, [sp, #24]
 8014a12:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8014a16:	9505      	str	r5, [sp, #20]
 8014a18:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8014a1c:	9504      	str	r5, [sp, #16]
 8014a1e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8014a22:	9503      	str	r5, [sp, #12]
 8014a24:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8014a28:	9502      	str	r5, [sp, #8]
 8014a2a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8014a2e:	e9cd 3500 	strd	r3, r5, [sp]
 8014a32:	4613      	mov	r3, r2
 8014a34:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8014a36:	2200      	movs	r2, #0
 8014a38:	47a0      	blx	r4
 8014a3a:	b00b      	add	sp, #44	@ 0x2c
 8014a3c:	bd30      	pop	{r4, r5, pc}
	...

08014a40 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014a40:	4b04      	ldr	r3, [pc, #16]	@ (8014a54 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	b123      	cbz	r3, 8014a50 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014a46:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8014a4a:	f080 0001 	eor.w	r0, r0, #1
 8014a4e:	4770      	bx	lr
 8014a50:	2001      	movs	r0, #1
 8014a52:	4770      	bx	lr
 8014a54:	2015a076 	.word	0x2015a076

08014a58 <_ZN8touchgfx3HAL8endFrameEv>:
 8014a58:	b510      	push	{r4, lr}
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	6840      	ldr	r0, [r0, #4]
 8014a5e:	6803      	ldr	r3, [r0, #0]
 8014a60:	689b      	ldr	r3, [r3, #8]
 8014a62:	4798      	blx	r3
 8014a64:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8014a68:	b113      	cbz	r3, 8014a70 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014a70:	bd10      	pop	{r4, pc}

08014a72 <_ZN8touchgfx3HAL10initializeEv>:
 8014a72:	b510      	push	{r4, lr}
 8014a74:	4604      	mov	r4, r0
 8014a76:	f7fd fffb 	bl	8012a70 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014a7a:	f7fd fcb7 	bl	80123ec <_ZN8touchgfx4GPIO4initEv>
 8014a7e:	6860      	ldr	r0, [r4, #4]
 8014a80:	6803      	ldr	r3, [r0, #0]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	4798      	blx	r3
 8014a86:	68e0      	ldr	r0, [r4, #12]
 8014a88:	6803      	ldr	r3, [r0, #0]
 8014a8a:	689b      	ldr	r3, [r3, #8]
 8014a8c:	4798      	blx	r3
 8014a8e:	6823      	ldr	r3, [r4, #0]
 8014a90:	4620      	mov	r0, r4
 8014a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a98:	4718      	bx	r3

08014a9a <_ZN8touchgfx3HAL9taskEntryEv>:
 8014a9a:	4604      	mov	r4, r0
 8014a9c:	b508      	push	{r3, lr}
 8014a9e:	6803      	ldr	r3, [r0, #0]
 8014aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014aa4:	4798      	blx	r3
 8014aa6:	6823      	ldr	r3, [r4, #0]
 8014aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014aaa:	4620      	mov	r0, r4
 8014aac:	4798      	blx	r3
 8014aae:	f7fe f909 	bl	8012cc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014ab2:	6823      	ldr	r3, [r4, #0]
 8014ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ab6:	e7f8      	b.n	8014aaa <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014ab8 <_ZN8touchgfx3HAL4tickEv>:
 8014ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014aba:	6803      	ldr	r3, [r0, #0]
 8014abc:	4604      	mov	r4, r0
 8014abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014ac2:	4798      	blx	r3
 8014ac4:	4d59      	ldr	r5, [pc, #356]	@ (8014c2c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8014ac6:	2800      	cmp	r0, #0
 8014ac8:	f000 8095 	beq.w	8014bf6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8014acc:	2600      	movs	r6, #0
 8014ace:	2001      	movs	r0, #1
 8014ad0:	f7fd fc94 	bl	80123fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014ad4:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8014ad8:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8014adc:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014ae0:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8014ae4:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8014ae8:	b133      	cbz	r3, 8014af8 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014aea:	6823      	ldr	r3, [r4, #0]
 8014aec:	4620      	mov	r0, r4
 8014aee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014af2:	4798      	blx	r3
 8014af4:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8014af8:	2601      	movs	r6, #1
 8014afa:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8014afe:	6862      	ldr	r2, [r4, #4]
 8014b00:	f083 0301 	eor.w	r3, r3, #1
 8014b04:	7253      	strb	r3, [r2, #9]
 8014b06:	702e      	strb	r6, [r5, #0]
 8014b08:	f001 febc 	bl	8016884 <_ZN8touchgfx11Application11getInstanceEv>
 8014b0c:	6803      	ldr	r3, [r0, #0]
 8014b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b10:	4798      	blx	r3
 8014b12:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014b16:	b90b      	cbnz	r3, 8014b1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8014b18:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8014b1c:	f001 feb2 	bl	8016884 <_ZN8touchgfx11Application11getInstanceEv>
 8014b20:	6803      	ldr	r3, [r0, #0]
 8014b22:	695b      	ldr	r3, [r3, #20]
 8014b24:	4798      	blx	r3
 8014b26:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014b28:	6803      	ldr	r3, [r0, #0]
 8014b2a:	691b      	ldr	r3, [r3, #16]
 8014b2c:	4798      	blx	r3
 8014b2e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014b32:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8014b36:	3b01      	subs	r3, #1
 8014b38:	b2db      	uxtb	r3, r3
 8014b3a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014b3e:	b10a      	cbz	r2, 8014b44 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d1eb      	bne.n	8014b1c <_ZN8touchgfx3HAL4tickEv+0x64>
 8014b44:	4a3a      	ldr	r2, [pc, #232]	@ (8014c30 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014b46:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014b4a:	7813      	ldrb	r3, [r2, #0]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	b25b      	sxtb	r3, r3
 8014b50:	4299      	cmp	r1, r3
 8014b52:	7013      	strb	r3, [r2, #0]
 8014b54:	dc10      	bgt.n	8014b78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014b56:	2300      	movs	r3, #0
 8014b58:	68e0      	ldr	r0, [r4, #12]
 8014b5a:	7013      	strb	r3, [r2, #0]
 8014b5c:	6803      	ldr	r3, [r0, #0]
 8014b5e:	aa03      	add	r2, sp, #12
 8014b60:	68db      	ldr	r3, [r3, #12]
 8014b62:	a902      	add	r1, sp, #8
 8014b64:	4798      	blx	r3
 8014b66:	6823      	ldr	r3, [r4, #0]
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d050      	beq.n	8014c0e <_ZN8touchgfx3HAL4tickEv+0x156>
 8014b6c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014b70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014b74:	4620      	mov	r0, r4
 8014b76:	4798      	blx	r3
 8014b78:	2300      	movs	r3, #0
 8014b7a:	6960      	ldr	r0, [r4, #20]
 8014b7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8014b80:	b158      	cbz	r0, 8014b9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014b82:	6803      	ldr	r3, [r0, #0]
 8014b84:	f10d 0107 	add.w	r1, sp, #7
 8014b88:	68db      	ldr	r3, [r3, #12]
 8014b8a:	4798      	blx	r3
 8014b8c:	b128      	cbz	r0, 8014b9a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014b8e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014b90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014b94:	6803      	ldr	r3, [r0, #0]
 8014b96:	68db      	ldr	r3, [r3, #12]
 8014b98:	4798      	blx	r3
 8014b9a:	f104 001c 	add.w	r0, r4, #28
 8014b9e:	f004 fc7b 	bl	8019498 <_ZN8touchgfx8Gestures4tickEv>
 8014ba2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8014ba6:	b30b      	cbz	r3, 8014bec <_ZN8touchgfx3HAL4tickEv+0x134>
 8014ba8:	6920      	ldr	r0, [r4, #16]
 8014baa:	6803      	ldr	r3, [r0, #0]
 8014bac:	691b      	ldr	r3, [r3, #16]
 8014bae:	4798      	blx	r3
 8014bb0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014bb2:	4606      	mov	r6, r0
 8014bb4:	b903      	cbnz	r3, 8014bb8 <_ZN8touchgfx3HAL4tickEv+0x100>
 8014bb6:	6760      	str	r0, [r4, #116]	@ 0x74
 8014bb8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014bba:	4a1e      	ldr	r2, [pc, #120]	@ (8014c34 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014bbc:	1af3      	subs	r3, r6, r3
 8014bbe:	4293      	cmp	r3, r2
 8014bc0:	d914      	bls.n	8014bec <_ZN8touchgfx3HAL4tickEv+0x134>
 8014bc2:	6920      	ldr	r0, [r4, #16]
 8014bc4:	6803      	ldr	r3, [r0, #0]
 8014bc6:	699b      	ldr	r3, [r3, #24]
 8014bc8:	4798      	blx	r3
 8014bca:	2264      	movs	r2, #100	@ 0x64
 8014bcc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8014bce:	1af3      	subs	r3, r6, r3
 8014bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8014bd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	dc1d      	bgt.n	8014c18 <_ZN8touchgfx3HAL4tickEv+0x160>
 8014bdc:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8014be0:	6920      	ldr	r0, [r4, #16]
 8014be2:	2100      	movs	r1, #0
 8014be4:	6803      	ldr	r3, [r0, #0]
 8014be6:	69db      	ldr	r3, [r3, #28]
 8014be8:	4798      	blx	r3
 8014bea:	6766      	str	r6, [r4, #116]	@ 0x74
 8014bec:	f001 fe4a 	bl	8016884 <_ZN8touchgfx11Application11getInstanceEv>
 8014bf0:	6803      	ldr	r3, [r0, #0]
 8014bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014bf4:	4798      	blx	r3
 8014bf6:	6823      	ldr	r3, [r4, #0]
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8014bfe:	4798      	blx	r3
 8014c00:	2001      	movs	r0, #1
 8014c02:	f7fd fc17 	bl	8012434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8014c06:	2300      	movs	r3, #0
 8014c08:	702b      	strb	r3, [r5, #0]
 8014c0a:	b004      	add	sp, #16
 8014c0c:	bd70      	pop	{r4, r5, r6, pc}
 8014c0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014c12:	4620      	mov	r0, r4
 8014c14:	4798      	blx	r3
 8014c16:	e7af      	b.n	8014b78 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014c18:	2863      	cmp	r0, #99	@ 0x63
 8014c1a:	bfcb      	itete	gt
 8014c1c:	2300      	movgt	r3, #0
 8014c1e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8014c22:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8014c26:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8014c2a:	e7d9      	b.n	8014be0 <_ZN8touchgfx3HAL4tickEv+0x128>
 8014c2c:	2015a07c 	.word	0x2015a07c
 8014c30:	2015a07d 	.word	0x2015a07d
 8014c34:	05f5e100 	.word	0x05f5e100

08014c38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014c38:	b510      	push	{r4, lr}
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	f7fd ffb0 	bl	8012ba0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8014c40:	2200      	movs	r2, #0
 8014c42:	6863      	ldr	r3, [r4, #4]
 8014c44:	729a      	strb	r2, [r3, #10]
 8014c46:	bd10      	pop	{r4, pc}

08014c48 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014c48:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8014c4a:	301c      	adds	r0, #28
 8014c4c:	f004 bc22 	b.w	8019494 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014c50 <_ZN8touchgfx3HAL5touchEll>:
 8014c50:	b530      	push	{r4, r5, lr}
 8014c52:	4604      	mov	r4, r0
 8014c54:	b087      	sub	sp, #28
 8014c56:	a804      	add	r0, sp, #16
 8014c58:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014c5c:	f001 fc04 	bl	8016468 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014c60:	9b04      	ldr	r3, [sp, #16]
 8014c62:	a906      	add	r1, sp, #24
 8014c64:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014c68:	9b05      	ldr	r3, [sp, #20]
 8014c6a:	a803      	add	r0, sp, #12
 8014c6c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014c70:	f001 fc4c 	bl	801650c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014c74:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8014c78:	f104 001c 	add.w	r0, r4, #28
 8014c7c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014c80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014c84:	b189      	cbz	r1, 8014caa <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014c86:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8014c8a:	9300      	str	r3, [sp, #0]
 8014c8c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8014c90:	4613      	mov	r3, r2
 8014c92:	462a      	mov	r2, r5
 8014c94:	f004 fc0e 	bl	80194b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014c98:	b128      	cbz	r0, 8014ca6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8014c9a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014c9e:	6623      	str	r3, [r4, #96]	@ 0x60
 8014ca0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014ca4:	6663      	str	r3, [r4, #100]	@ 0x64
 8014ca6:	b007      	add	sp, #28
 8014ca8:	bd30      	pop	{r4, r5, pc}
 8014caa:	f004 fc43 	bl	8019534 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014cae:	2301      	movs	r3, #1
 8014cb0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014cb4:	e7f1      	b.n	8014c9a <_ZN8touchgfx3HAL5touchEll+0x4a>

08014cb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014cb6:	b510      	push	{r4, lr}
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d046      	beq.n	8014d4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014cbc:	ea81 0002 	eor.w	r0, r1, r2
 8014cc0:	07c4      	lsls	r4, r0, #31
 8014cc2:	d508      	bpl.n	8014cd6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014cc4:	440b      	add	r3, r1
 8014cc6:	3a01      	subs	r2, #1
 8014cc8:	428b      	cmp	r3, r1
 8014cca:	d93e      	bls.n	8014d4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014ccc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014cd0:	f801 0b01 	strb.w	r0, [r1], #1
 8014cd4:	e7f8      	b.n	8014cc8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014cd6:	07d0      	lsls	r0, r2, #31
 8014cd8:	bf42      	ittt	mi
 8014cda:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014cde:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8014ce2:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014ce6:	2b01      	cmp	r3, #1
 8014ce8:	d911      	bls.n	8014d0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014cea:	ea81 0402 	eor.w	r4, r1, r2
 8014cee:	07a4      	lsls	r4, r4, #30
 8014cf0:	4610      	mov	r0, r2
 8014cf2:	d022      	beq.n	8014d3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014cf4:	f023 0401 	bic.w	r4, r3, #1
 8014cf8:	440c      	add	r4, r1
 8014cfa:	428c      	cmp	r4, r1
 8014cfc:	4602      	mov	r2, r0
 8014cfe:	d904      	bls.n	8014d0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014d00:	8812      	ldrh	r2, [r2, #0]
 8014d02:	3002      	adds	r0, #2
 8014d04:	f821 2b02 	strh.w	r2, [r1], #2
 8014d08:	e7f7      	b.n	8014cfa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014d0a:	f003 0301 	and.w	r3, r3, #1
 8014d0e:	f023 0003 	bic.w	r0, r3, #3
 8014d12:	4408      	add	r0, r1
 8014d14:	4288      	cmp	r0, r1
 8014d16:	4614      	mov	r4, r2
 8014d18:	d904      	bls.n	8014d24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014d1a:	6824      	ldr	r4, [r4, #0]
 8014d1c:	3204      	adds	r2, #4
 8014d1e:	f841 4b04 	str.w	r4, [r1], #4
 8014d22:	e7f7      	b.n	8014d14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014d24:	f003 0303 	and.w	r3, r3, #3
 8014d28:	440b      	add	r3, r1
 8014d2a:	3a01      	subs	r2, #1
 8014d2c:	428b      	cmp	r3, r1
 8014d2e:	d90c      	bls.n	8014d4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014d30:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014d34:	f801 0b01 	strb.w	r0, [r1], #1
 8014d38:	e7f8      	b.n	8014d2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014d3a:	0790      	lsls	r0, r2, #30
 8014d3c:	d0e7      	beq.n	8014d0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014d3e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014d42:	3b02      	subs	r3, #2
 8014d44:	f821 0b02 	strh.w	r0, [r1], #2
 8014d48:	e7e1      	b.n	8014d0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014d4a:	2001      	movs	r0, #1
 8014d4c:	bd10      	pop	{r4, pc}

08014d4e <_ZN8touchgfx3HAL7noTouchEv>:
 8014d4e:	b510      	push	{r4, lr}
 8014d50:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8014d54:	4604      	mov	r4, r0
 8014d56:	b153      	cbz	r3, 8014d6e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014d58:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8014d5c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8014d60:	2101      	movs	r1, #1
 8014d62:	301c      	adds	r0, #28
 8014d64:	f004 fbe6 	bl	8019534 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014d68:	2300      	movs	r3, #0
 8014d6a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8014d6e:	bd10      	pop	{r4, pc}

08014d70 <_ZN8touchgfx3HAL3lcdEv>:
 8014d70:	4b04      	ldr	r3, [pc, #16]	@ (8014d84 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8014d78:	b10a      	cbz	r2, 8014d7e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8014d7a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8014d7c:	b900      	cbnz	r0, 8014d80 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8014d7e:	6898      	ldr	r0, [r3, #8]
 8014d80:	4770      	bx	lr
 8014d82:	bf00      	nop
 8014d84:	2015a078 	.word	0x2015a078

08014d88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d8c:	4604      	mov	r4, r0
 8014d8e:	2000      	movs	r0, #0
 8014d90:	b085      	sub	sp, #20
 8014d92:	ad04      	add	r5, sp, #16
 8014d94:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014d98:	69a0      	ldr	r0, [r4, #24]
 8014d9a:	4699      	mov	r9, r3
 8014d9c:	6806      	ldr	r6, [r0, #0]
 8014d9e:	9501      	str	r5, [sp, #4]
 8014da0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8014da4:	460f      	mov	r7, r1
 8014da6:	9500      	str	r5, [sp, #0]
 8014da8:	6835      	ldr	r5, [r6, #0]
 8014daa:	4690      	mov	r8, r2
 8014dac:	47a8      	blx	r5
 8014dae:	4d10      	ldr	r5, [pc, #64]	@ (8014df0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014db0:	4606      	mov	r6, r0
 8014db2:	f8a5 9000 	strh.w	r9, [r5]
 8014db6:	f7ff ffdb 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 8014dba:	6803      	ldr	r3, [r0, #0]
 8014dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dbe:	4798      	blx	r3
 8014dc0:	b128      	cbz	r0, 8014dce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8014dc2:	2801      	cmp	r0, #1
 8014dc4:	d00b      	beq.n	8014dde <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	b005      	add	sp, #20
 8014dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dce:	882b      	ldrh	r3, [r5, #0]
 8014dd0:	fb08 7203 	mla	r2, r8, r3, r7
 8014dd4:	9b03      	ldr	r3, [sp, #12]
 8014dd6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014dda:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014ddc:	e7f3      	b.n	8014dc6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014dde:	882a      	ldrh	r2, [r5, #0]
 8014de0:	9b03      	ldr	r3, [sp, #12]
 8014de2:	fb08 7202 	mla	r2, r8, r2, r7
 8014de6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014dea:	1a9a      	subs	r2, r3, r2
 8014dec:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8014dee:	e7ea      	b.n	8014dc6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014df0:	2015a072 	.word	0x2015a072

08014df4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014df6:	b08b      	sub	sp, #44	@ 0x2c
 8014df8:	4617      	mov	r7, r2
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	460e      	mov	r6, r1
 8014dfe:	461d      	mov	r5, r3
 8014e00:	f7ff ffb6 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 8014e04:	6803      	ldr	r3, [r0, #0]
 8014e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e08:	4798      	blx	r3
 8014e0a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014e0e:	9007      	str	r0, [sp, #28]
 8014e10:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014e14:	4b0d      	ldr	r3, [pc, #52]	@ (8014e4c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014e16:	6822      	ldr	r2, [r4, #0]
 8014e18:	881b      	ldrh	r3, [r3, #0]
 8014e1a:	4631      	mov	r1, r6
 8014e1c:	9306      	str	r3, [sp, #24]
 8014e1e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8014e22:	4620      	mov	r0, r4
 8014e24:	9305      	str	r3, [sp, #20]
 8014e26:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8014e2a:	9304      	str	r3, [sp, #16]
 8014e2c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014e30:	9303      	str	r3, [sp, #12]
 8014e32:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8014e36:	9302      	str	r3, [sp, #8]
 8014e38:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8014e3c:	e9cd 5300 	strd	r5, r3, [sp]
 8014e40:	463b      	mov	r3, r7
 8014e42:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8014e44:	2200      	movs	r2, #0
 8014e46:	47a8      	blx	r5
 8014e48:	b00b      	add	sp, #44	@ 0x2c
 8014e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e4c:	2015a072 	.word	0x2015a072

08014e50 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e54:	4698      	mov	r8, r3
 8014e56:	6803      	ldr	r3, [r0, #0]
 8014e58:	b08b      	sub	sp, #44	@ 0x2c
 8014e5a:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8014e5c:	4b14      	ldr	r3, [pc, #80]	@ (8014eb0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014e5e:	4617      	mov	r7, r2
 8014e60:	f8b3 9000 	ldrh.w	r9, [r3]
 8014e64:	460e      	mov	r6, r1
 8014e66:	4604      	mov	r4, r0
 8014e68:	f7ff ff82 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 8014e6c:	6803      	ldr	r3, [r0, #0]
 8014e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e70:	4798      	blx	r3
 8014e72:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8014e76:	2200      	movs	r2, #0
 8014e78:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014e7c:	2302      	movs	r3, #2
 8014e7e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8014e82:	2301      	movs	r3, #1
 8014e84:	9305      	str	r3, [sp, #20]
 8014e86:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8014e8a:	4631      	mov	r1, r6
 8014e8c:	9304      	str	r3, [sp, #16]
 8014e8e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8014e92:	4620      	mov	r0, r4
 8014e94:	9303      	str	r3, [sp, #12]
 8014e96:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8014e9a:	9302      	str	r3, [sp, #8]
 8014e9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8014ea0:	e9cd 8300 	strd	r8, r3, [sp]
 8014ea4:	463b      	mov	r3, r7
 8014ea6:	47a8      	blx	r5
 8014ea8:	b00b      	add	sp, #44	@ 0x2c
 8014eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014eae:	bf00      	nop
 8014eb0:	2015a072 	.word	0x2015a072

08014eb4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8014eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014eb8:	4698      	mov	r8, r3
 8014eba:	6803      	ldr	r3, [r0, #0]
 8014ebc:	b087      	sub	sp, #28
 8014ebe:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8014ec0:	4b10      	ldr	r3, [pc, #64]	@ (8014f04 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8014ec2:	460e      	mov	r6, r1
 8014ec4:	f8b3 9000 	ldrh.w	r9, [r3]
 8014ec8:	4617      	mov	r7, r2
 8014eca:	4604      	mov	r4, r0
 8014ecc:	f7ff ff50 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 8014ed0:	6803      	ldr	r3, [r0, #0]
 8014ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ed4:	4798      	blx	r3
 8014ed6:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8014eda:	f8cd 900c 	str.w	r9, [sp, #12]
 8014ede:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014ee2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8014ee6:	463a      	mov	r2, r7
 8014ee8:	9302      	str	r3, [sp, #8]
 8014eea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8014eee:	4631      	mov	r1, r6
 8014ef0:	9301      	str	r3, [sp, #4]
 8014ef2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	9300      	str	r3, [sp, #0]
 8014efa:	4643      	mov	r3, r8
 8014efc:	47a8      	blx	r5
 8014efe:	b007      	add	sp, #28
 8014f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f04:	2015a072 	.word	0x2015a072

08014f08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	b08f      	sub	sp, #60	@ 0x3c
 8014f10:	4610      	mov	r0, r2
 8014f12:	460d      	mov	r5, r1
 8014f14:	4691      	mov	r9, r2
 8014f16:	461e      	mov	r6, r3
 8014f18:	f004 f892 	bl	8019040 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	f000 809d 	beq.w	801505c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014f22:	6823      	ldr	r3, [r4, #0]
 8014f24:	4620      	mov	r0, r4
 8014f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f28:	4798      	blx	r3
 8014f2a:	6823      	ldr	r3, [r4, #0]
 8014f2c:	f8df b190 	ldr.w	fp, [pc, #400]	@ 80150c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f32:	4620      	mov	r0, r4
 8014f34:	4798      	blx	r3
 8014f36:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80150c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014f3a:	f8bb 3000 	ldrh.w	r3, [fp]
 8014f3e:	4f5d      	ldr	r7, [pc, #372]	@ (80150b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014f40:	9301      	str	r3, [sp, #4]
 8014f42:	f8ba 3000 	ldrh.w	r3, [sl]
 8014f46:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8014f4a:	9302      	str	r3, [sp, #8]
 8014f4c:	883b      	ldrh	r3, [r7, #0]
 8014f4e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014f52:	9303      	str	r3, [sp, #12]
 8014f54:	4b58      	ldr	r3, [pc, #352]	@ (80150b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014f56:	4640      	mov	r0, r8
 8014f58:	881a      	ldrh	r2, [r3, #0]
 8014f5a:	9305      	str	r3, [sp, #20]
 8014f5c:	9204      	str	r2, [sp, #16]
 8014f5e:	f004 f903 	bl	8019168 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014f62:	8038      	strh	r0, [r7, #0]
 8014f64:	4640      	mov	r0, r8
 8014f66:	f004 f933 	bl	80191d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014f6a:	9b05      	ldr	r3, [sp, #20]
 8014f6c:	b280      	uxth	r0, r0
 8014f6e:	8018      	strh	r0, [r3, #0]
 8014f70:	4b52      	ldr	r3, [pc, #328]	@ (80150bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d174      	bne.n	8015062 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014f78:	883b      	ldrh	r3, [r7, #0]
 8014f7a:	f8aa 0000 	strh.w	r0, [sl]
 8014f7e:	f8ab 3000 	strh.w	r3, [fp]
 8014f82:	4648      	mov	r0, r9
 8014f84:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8014f88:	f004 f85a 	bl	8019040 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8014f92:	4611      	mov	r1, r2
 8014f94:	4628      	mov	r0, r5
 8014f96:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014f9a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014f9e:	f7fc fb26 	bl	80115ee <_ZN8touchgfx8Drawable5setXYEss>
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8014fa8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8014fac:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	dd5c      	ble.n	801506e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014fb4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	dd58      	ble.n	801506e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014fbc:	462a      	mov	r2, r5
 8014fbe:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014fc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8014fc4:	6851      	ldr	r1, [r2, #4]
 8014fc6:	c303      	stmia	r3!, {r0, r1}
 8014fc8:	4631      	mov	r1, r6
 8014fca:	a80a      	add	r0, sp, #40	@ 0x28
 8014fcc:	f7ff fbe8 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 8014fd0:	2100      	movs	r1, #0
 8014fd2:	4b38      	ldr	r3, [pc, #224]	@ (80150b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014fd4:	910c      	str	r1, [sp, #48]	@ 0x30
 8014fd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014fda:	4b37      	ldr	r3, [pc, #220]	@ (80150b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014fdc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8014fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014fe4:	aa0a      	add	r2, sp, #40	@ 0x28
 8014fe6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8014fea:	ab08      	add	r3, sp, #32
 8014fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ff0:	e883 0003 	stmia.w	r3, {r0, r1}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	a90c      	add	r1, sp, #48	@ 0x30
 8014ff8:	f7ff fbd2 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 8014ffc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d13c      	bne.n	801507c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8015002:	2000      	movs	r0, #0
 8015004:	2600      	movs	r6, #0
 8015006:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 801500a:	696b      	ldr	r3, [r5, #20]
 801500c:	682a      	ldr	r2, [r5, #0]
 801500e:	616e      	str	r6, [r5, #20]
 8015010:	9305      	str	r3, [sp, #20]
 8015012:	6892      	ldr	r2, [r2, #8]
 8015014:	a908      	add	r1, sp, #32
 8015016:	4628      	mov	r0, r5
 8015018:	4790      	blx	r2
 801501a:	9b05      	ldr	r3, [sp, #20]
 801501c:	4652      	mov	r2, sl
 801501e:	616b      	str	r3, [r5, #20]
 8015020:	4649      	mov	r1, r9
 8015022:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8015026:	4628      	mov	r0, r5
 8015028:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 801502c:	f7fc fadf 	bl	80115ee <_ZN8touchgfx8Drawable5setXYEss>
 8015030:	9a01      	ldr	r2, [sp, #4]
 8015032:	4b23      	ldr	r3, [pc, #140]	@ (80150c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015034:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8015038:	801a      	strh	r2, [r3, #0]
 801503a:	9a02      	ldr	r2, [sp, #8]
 801503c:	4b21      	ldr	r3, [pc, #132]	@ (80150c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801503e:	4620      	mov	r0, r4
 8015040:	801a      	strh	r2, [r3, #0]
 8015042:	9a03      	ldr	r2, [sp, #12]
 8015044:	4b1b      	ldr	r3, [pc, #108]	@ (80150b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015046:	801a      	strh	r2, [r3, #0]
 8015048:	4b1b      	ldr	r3, [pc, #108]	@ (80150b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801504a:	9a04      	ldr	r2, [sp, #16]
 801504c:	801a      	strh	r2, [r3, #0]
 801504e:	6823      	ldr	r3, [r4, #0]
 8015050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015052:	4798      	blx	r3
 8015054:	6823      	ldr	r3, [r4, #0]
 8015056:	4620      	mov	r0, r4
 8015058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801505a:	4798      	blx	r3
 801505c:	b00f      	add	sp, #60	@ 0x3c
 801505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015062:	883b      	ldrh	r3, [r7, #0]
 8015064:	f8ab 0000 	strh.w	r0, [fp]
 8015068:	f8aa 3000 	strh.w	r3, [sl]
 801506c:	e789      	b.n	8014f82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801506e:	462a      	mov	r2, r5
 8015070:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015074:	ab0a      	add	r3, sp, #40	@ 0x28
 8015076:	6851      	ldr	r1, [r2, #4]
 8015078:	c303      	stmia	r3!, {r0, r1}
 801507a:	e7a9      	b.n	8014fd0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801507c:	a807      	add	r0, sp, #28
 801507e:	f004 f95f 	bl	8019340 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015082:	4606      	mov	r6, r0
 8015084:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8015086:	6803      	ldr	r3, [r0, #0]
 8015088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801508a:	4798      	blx	r3
 801508c:	4286      	cmp	r6, r0
 801508e:	d1b8      	bne.n	8015002 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8015090:	f7ff fe6e 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 8015094:	6803      	ldr	r3, [r0, #0]
 8015096:	4606      	mov	r6, r0
 8015098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801509a:	a807      	add	r0, sp, #28
 801509c:	9305      	str	r3, [sp, #20]
 801509e:	f004 f94f 	bl	8019340 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80150a2:	9b05      	ldr	r3, [sp, #20]
 80150a4:	4601      	mov	r1, r0
 80150a6:	4630      	mov	r0, r6
 80150a8:	4798      	blx	r3
 80150aa:	f080 0001 	eor.w	r0, r0, #1
 80150ae:	b2c0      	uxtb	r0, r0
 80150b0:	e7a8      	b.n	8015004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80150b2:	bf00      	nop
 80150b4:	2015a06c 	.word	0x2015a06c
 80150b8:	2015a06e 	.word	0x2015a06e
 80150bc:	2015a070 	.word	0x2015a070
 80150c0:	2015a072 	.word	0x2015a072
 80150c4:	2015a074 	.word	0x2015a074

080150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80150c8:	b510      	push	{r4, lr}
 80150ca:	4b07      	ldr	r3, [pc, #28]	@ (80150e8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80150cc:	4604      	mov	r4, r0
 80150ce:	781b      	ldrb	r3, [r3, #0]
 80150d0:	b13b      	cbz	r3, 80150e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80150d2:	6803      	ldr	r3, [r0, #0]
 80150d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80150d6:	4798      	blx	r3
 80150d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80150da:	4283      	cmp	r3, r0
 80150dc:	d101      	bne.n	80150e2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80150de:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80150e0:	bd10      	pop	{r4, pc}
 80150e2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80150e4:	e7fc      	b.n	80150e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80150e6:	bf00      	nop
 80150e8:	2015a076 	.word	0x2015a076

080150ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80150ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150f0:	461d      	mov	r5, r3
 80150f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80150f6:	2400      	movs	r4, #0
 80150f8:	b08a      	sub	sp, #40	@ 0x28
 80150fa:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80150fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015102:	4690      	mov	r8, r2
 8015104:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015108:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801510c:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8015110:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015114:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015118:	4607      	mov	r7, r0
 801511a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801511e:	9404      	str	r4, [sp, #16]
 8015120:	f88d 4020 	strb.w	r4, [sp, #32]
 8015124:	f7ff ffd0 	bl	80150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015128:	fb06 8505 	mla	r5, r6, r5, r8
 801512c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	9505      	str	r5, [sp, #20]
 8015134:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015138:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801513c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8015140:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015144:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015148:	6803      	ldr	r3, [r0, #0]
 801514a:	a901      	add	r1, sp, #4
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	4798      	blx	r3
 8015150:	b00a      	add	sp, #40	@ 0x28
 8015152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015156 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801515a:	2400      	movs	r4, #0
 801515c:	461d      	mov	r5, r3
 801515e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015162:	4691      	mov	r9, r2
 8015164:	b08b      	sub	sp, #44	@ 0x2c
 8015166:	4688      	mov	r8, r1
 8015168:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801516c:	4607      	mov	r7, r0
 801516e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015172:	9404      	str	r4, [sp, #16]
 8015174:	f7ff ffa8 	bl	80150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015178:	fb06 9505 	mla	r5, r6, r5, r9
 801517c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015180:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015184:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015188:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	9505      	str	r5, [sp, #20]
 8015190:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015194:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015198:	f8ad 601e 	strh.w	r6, [sp, #30]
 801519c:	f8cd 8010 	str.w	r8, [sp, #16]
 80151a0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80151a4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80151a8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80151ac:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80151b0:	6803      	ldr	r3, [r0, #0]
 80151b2:	a901      	add	r1, sp, #4
 80151b4:	685b      	ldr	r3, [r3, #4]
 80151b6:	4798      	blx	r3
 80151b8:	b00b      	add	sp, #44	@ 0x2c
 80151ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080151c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80151c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c4:	4698      	mov	r8, r3
 80151c6:	2300      	movs	r3, #0
 80151c8:	b08a      	sub	sp, #40	@ 0x28
 80151ca:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80151ce:	4606      	mov	r6, r0
 80151d0:	2d0b      	cmp	r5, #11
 80151d2:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80151d6:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 80151da:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 80151de:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 80151e2:	9304      	str	r3, [sp, #16]
 80151e4:	d137      	bne.n	8015256 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80151e6:	2380      	movs	r3, #128	@ 0x80
 80151e8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80151ec:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80151f0:	f88d 0020 	strb.w	r0, [sp, #32]
 80151f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80151f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80151fc:	4630      	mov	r0, r6
 80151fe:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015202:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015206:	9203      	str	r2, [sp, #12]
 8015208:	f8ad 301c 	strh.w	r3, [sp, #28]
 801520c:	f7ff ff5c 	bl	80150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015210:	2c0b      	cmp	r4, #11
 8015212:	bf8c      	ite	hi
 8015214:	2100      	movhi	r1, #0
 8015216:	4b1b      	ldrls	r3, [pc, #108]	@ (8015284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015218:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801521c:	bf98      	it	ls
 801521e:	5d19      	ldrbls	r1, [r3, r4]
 8015220:	fb02 8307 	mla	r3, r2, r7, r8
 8015224:	10c9      	asrs	r1, r1, #3
 8015226:	fb01 0003 	mla	r0, r1, r3, r0
 801522a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801522e:	9005      	str	r0, [sp, #20]
 8015230:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015234:	2300      	movs	r3, #0
 8015236:	6870      	ldr	r0, [r6, #4]
 8015238:	f8ad 701e 	strh.w	r7, [sp, #30]
 801523c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8015240:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015244:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015248:	6803      	ldr	r3, [r0, #0]
 801524a:	a901      	add	r1, sp, #4
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	4798      	blx	r3
 8015250:	b00a      	add	sp, #40	@ 0x28
 8015252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015256:	2d02      	cmp	r5, #2
 8015258:	d109      	bne.n	801526e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801525a:	28ff      	cmp	r0, #255	@ 0xff
 801525c:	d105      	bne.n	801526a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801525e:	f1bc 0f00 	cmp.w	ip, #0
 8015262:	bf14      	ite	ne
 8015264:	2340      	movne	r3, #64	@ 0x40
 8015266:	2320      	moveq	r3, #32
 8015268:	e7be      	b.n	80151e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801526a:	2340      	movs	r3, #64	@ 0x40
 801526c:	e7bc      	b.n	80151e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801526e:	28ff      	cmp	r0, #255	@ 0xff
 8015270:	d105      	bne.n	801527e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8015272:	f1bc 0f00 	cmp.w	ip, #0
 8015276:	bf14      	ite	ne
 8015278:	2304      	movne	r3, #4
 801527a:	2301      	moveq	r3, #1
 801527c:	e7b4      	b.n	80151e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801527e:	2304      	movs	r3, #4
 8015280:	e7b2      	b.n	80151e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8015282:	bf00      	nop
 8015284:	0802e22c 	.word	0x0802e22c

08015288 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8015288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801528c:	b08b      	sub	sp, #44	@ 0x2c
 801528e:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8015292:	461d      	mov	r5, r3
 8015294:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8015298:	bf14      	ite	ne
 801529a:	2308      	movne	r3, #8
 801529c:	2302      	moveq	r3, #2
 801529e:	2400      	movs	r4, #0
 80152a0:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80152a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152a8:	4688      	mov	r8, r1
 80152aa:	4693      	mov	fp, r2
 80152ac:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80152b0:	9404      	str	r4, [sp, #16]
 80152b2:	4607      	mov	r7, r0
 80152b4:	f7ff ff08 	bl	80150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80152b8:	2e0b      	cmp	r6, #11
 80152ba:	bf98      	it	ls
 80152bc:	4b15      	ldrls	r3, [pc, #84]	@ (8015314 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80152be:	fb05 b50a 	mla	r5, r5, sl, fp
 80152c2:	bf98      	it	ls
 80152c4:	5d9c      	ldrbls	r4, [r3, r6]
 80152c6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80152ca:	10e4      	asrs	r4, r4, #3
 80152cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80152d0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80152d4:	fb04 0405 	mla	r4, r4, r5, r0
 80152d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80152dc:	2300      	movs	r3, #0
 80152de:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80152e2:	6878      	ldr	r0, [r7, #4]
 80152e4:	9405      	str	r4, [sp, #20]
 80152e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80152ea:	f8ad a01e 	strh.w	sl, [sp, #30]
 80152ee:	f8cd 8010 	str.w	r8, [sp, #16]
 80152f2:	f88d 9020 	strb.w	r9, [sp, #32]
 80152f6:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80152fa:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80152fe:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8015302:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8015306:	6803      	ldr	r3, [r0, #0]
 8015308:	a901      	add	r1, sp, #4
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	4798      	blx	r3
 801530e:	b00b      	add	sp, #44	@ 0x2c
 8015310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015314:	0802e22c 	.word	0x0802e22c

08015318 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801531c:	461e      	mov	r6, r3
 801531e:	4b0a      	ldr	r3, [pc, #40]	@ (8015348 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8015320:	460f      	mov	r7, r1
 8015322:	881d      	ldrh	r5, [r3, #0]
 8015324:	4690      	mov	r8, r2
 8015326:	f7ff fd23 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 801532a:	6803      	ldr	r3, [r0, #0]
 801532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801532e:	4798      	blx	r3
 8015330:	280b      	cmp	r0, #11
 8015332:	bf8e      	itee	hi
 8015334:	2400      	movhi	r4, #0
 8015336:	4b05      	ldrls	r3, [pc, #20]	@ (801534c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015338:	5c1c      	ldrbls	r4, [r3, r0]
 801533a:	fb08 7005 	mla	r0, r8, r5, r7
 801533e:	10e4      	asrs	r4, r4, #3
 8015340:	fb04 6000 	mla	r0, r4, r0, r6
 8015344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015348:	2015a072 	.word	0x2015a072
 801534c:	0802e22c 	.word	0x0802e22c

08015350 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8015350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015352:	2500      	movs	r5, #0
 8015354:	b08b      	sub	sp, #44	@ 0x2c
 8015356:	461f      	mov	r7, r3
 8015358:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801535c:	4604      	mov	r4, r0
 801535e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015362:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015366:	4616      	mov	r6, r2
 8015368:	f8ad 3018 	strh.w	r3, [sp, #24]
 801536c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015370:	9504      	str	r5, [sp, #16]
 8015372:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015376:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801537a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801537e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015382:	f88d 3020 	strb.w	r3, [sp, #32]
 8015386:	f7ff fe9f 	bl	80150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801538a:	463a      	mov	r2, r7
 801538c:	4631      	mov	r1, r6
 801538e:	4603      	mov	r3, r0
 8015390:	4620      	mov	r0, r4
 8015392:	f7ff ffc1 	bl	8015318 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015396:	4b0e      	ldr	r3, [pc, #56]	@ (80153d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015398:	9005      	str	r0, [sp, #20]
 801539a:	881b      	ldrh	r3, [r3, #0]
 801539c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80153a0:	f7ff fce6 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 80153a4:	6803      	ldr	r3, [r0, #0]
 80153a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153a8:	4798      	blx	r3
 80153aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80153ac:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80153b0:	9304      	str	r3, [sp, #16]
 80153b2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80153b6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80153ba:	6860      	ldr	r0, [r4, #4]
 80153bc:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80153c0:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80153c4:	6803      	ldr	r3, [r0, #0]
 80153c6:	a901      	add	r1, sp, #4
 80153c8:	685b      	ldr	r3, [r3, #4]
 80153ca:	4798      	blx	r3
 80153cc:	b00b      	add	sp, #44	@ 0x2c
 80153ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153d0:	2015a072 	.word	0x2015a072

080153d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80153d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153d6:	b08d      	sub	sp, #52	@ 0x34
 80153d8:	466b      	mov	r3, sp
 80153da:	e883 0006 	stmia.w	r3, {r1, r2}
 80153de:	2300      	movs	r3, #0
 80153e0:	2501      	movs	r5, #1
 80153e2:	9306      	str	r3, [sp, #24]
 80153e4:	6803      	ldr	r3, [r0, #0]
 80153e6:	9503      	str	r5, [sp, #12]
 80153e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153ea:	4604      	mov	r4, r0
 80153ec:	f8bd 6000 	ldrh.w	r6, [sp]
 80153f0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80153f4:	4798      	blx	r3
 80153f6:	463a      	mov	r2, r7
 80153f8:	4631      	mov	r1, r6
 80153fa:	4603      	mov	r3, r0
 80153fc:	4620      	mov	r0, r4
 80153fe:	f7ff ff8b 	bl	8015318 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015402:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015404:	9004      	str	r0, [sp, #16]
 8015406:	9307      	str	r3, [sp, #28]
 8015408:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801540c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015410:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015414:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015418:	4b0e      	ldr	r3, [pc, #56]	@ (8015454 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801541a:	881b      	ldrh	r3, [r3, #0]
 801541c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015420:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015424:	f7ff fca4 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 8015428:	6803      	ldr	r3, [r0, #0]
 801542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801542c:	4798      	blx	r3
 801542e:	23ff      	movs	r3, #255	@ 0xff
 8015430:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015434:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015438:	6860      	ldr	r0, [r4, #4]
 801543a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801543e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015442:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8015446:	6803      	ldr	r3, [r0, #0]
 8015448:	a903      	add	r1, sp, #12
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	4798      	blx	r3
 801544e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8015450:	b00d      	add	sp, #52	@ 0x34
 8015452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015454:	2015a072 	.word	0x2015a072

08015458 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801545c:	b08c      	sub	sp, #48	@ 0x30
 801545e:	466d      	mov	r5, sp
 8015460:	461e      	mov	r6, r3
 8015462:	2300      	movs	r3, #0
 8015464:	e885 0006 	stmia.w	r5, {r1, r2}
 8015468:	2501      	movs	r5, #1
 801546a:	9306      	str	r3, [sp, #24]
 801546c:	6803      	ldr	r3, [r0, #0]
 801546e:	9503      	str	r5, [sp, #12]
 8015470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015472:	4604      	mov	r4, r0
 8015474:	f8bd 7000 	ldrh.w	r7, [sp]
 8015478:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801547c:	4798      	blx	r3
 801547e:	4642      	mov	r2, r8
 8015480:	4639      	mov	r1, r7
 8015482:	4603      	mov	r3, r0
 8015484:	4620      	mov	r0, r4
 8015486:	f7ff ff47 	bl	8015318 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801548a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801548e:	9004      	str	r0, [sp, #16]
 8015490:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015494:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015498:	9607      	str	r6, [sp, #28]
 801549a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801549e:	4b10      	ldr	r3, [pc, #64]	@ (80154e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80154a0:	881b      	ldrh	r3, [r3, #0]
 80154a2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80154a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80154a8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80154ac:	f7ff fc60 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 80154b0:	6803      	ldr	r3, [r0, #0]
 80154b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154b4:	4798      	blx	r3
 80154b6:	23ff      	movs	r3, #255	@ 0xff
 80154b8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80154bc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80154c0:	6860      	ldr	r0, [r4, #4]
 80154c2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80154c6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80154ca:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80154ce:	6803      	ldr	r3, [r0, #0]
 80154d0:	a903      	add	r1, sp, #12
 80154d2:	685b      	ldr	r3, [r3, #4]
 80154d4:	4798      	blx	r3
 80154d6:	4630      	mov	r0, r6
 80154d8:	b00c      	add	sp, #48	@ 0x30
 80154da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154de:	bf00      	nop
 80154e0:	2015a072 	.word	0x2015a072

080154e4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80154e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154e6:	b085      	sub	sp, #20
 80154e8:	ac02      	add	r4, sp, #8
 80154ea:	e884 0006 	stmia.w	r4, {r1, r2}
 80154ee:	4605      	mov	r5, r0
 80154f0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80154f4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80154f8:	f7ff fde6 	bl	80150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80154fc:	463a      	mov	r2, r7
 80154fe:	4603      	mov	r3, r0
 8015500:	4631      	mov	r1, r6
 8015502:	4628      	mov	r0, r5
 8015504:	f7ff ff08 	bl	8015318 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015508:	4a05      	ldr	r2, [pc, #20]	@ (8015520 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801550a:	682b      	ldr	r3, [r5, #0]
 801550c:	8812      	ldrh	r2, [r2, #0]
 801550e:	9200      	str	r2, [sp, #0]
 8015510:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8015512:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015516:	4603      	mov	r3, r0
 8015518:	4628      	mov	r0, r5
 801551a:	47b0      	blx	r6
 801551c:	b005      	add	sp, #20
 801551e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015520:	2015a072 	.word	0x2015a072

08015524 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015524:	b570      	push	{r4, r5, r6, lr}
 8015526:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801552a:	4604      	mov	r4, r0
 801552c:	b19b      	cbz	r3, 8015556 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801552e:	2002      	movs	r0, #2
 8015530:	f7fc ff9c 	bl	801246c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015534:	2300      	movs	r3, #0
 8015536:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801553a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801553e:	6823      	ldr	r3, [r4, #0]
 8015540:	4620      	mov	r0, r4
 8015542:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8015546:	f7ff fdbf 	bl	80150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801554a:	462b      	mov	r3, r5
 801554c:	4601      	mov	r1, r0
 801554e:	4620      	mov	r0, r4
 8015550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015554:	4718      	bx	r3
 8015556:	bd70      	pop	{r4, r5, r6, pc}

08015558 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015558:	b538      	push	{r3, r4, r5, lr}
 801555a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801555e:	4604      	mov	r4, r0
 8015560:	428b      	cmp	r3, r1
 8015562:	460d      	mov	r5, r1
 8015564:	d006      	beq.n	8015574 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8015566:	6803      	ldr	r3, [r0, #0]
 8015568:	b929      	cbnz	r1, 8015576 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801556a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801556e:	4798      	blx	r3
 8015570:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8015574:	bd38      	pop	{r3, r4, r5, pc}
 8015576:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801557a:	e7f8      	b.n	801556e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801557c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801557c:	b510      	push	{r4, lr}
 801557e:	4b0d      	ldr	r3, [pc, #52]	@ (80155b4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015580:	4604      	mov	r4, r0
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	b95b      	cbnz	r3, 801559e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015586:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801558a:	2b02      	cmp	r3, #2
 801558c:	d007      	beq.n	801559e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801558e:	6840      	ldr	r0, [r0, #4]
 8015590:	f000 f90e 	bl	80157b0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015594:	b118      	cbz	r0, 801559e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015596:	6862      	ldr	r2, [r4, #4]
 8015598:	7a53      	ldrb	r3, [r2, #9]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d0fc      	beq.n	8015598 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801559e:	f7fd fadf 	bl	8012b60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80155a2:	4620      	mov	r0, r4
 80155a4:	2100      	movs	r1, #0
 80155a6:	f7ff ffd7 	bl	8015558 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80155aa:	4620      	mov	r0, r4
 80155ac:	f7ff fd8c 	bl	80150c8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80155b0:	bd10      	pop	{r4, pc}
 80155b2:	bf00      	nop
 80155b4:	2015a076 	.word	0x2015a076

080155b8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80155b8:	4770      	bx	lr

080155ba <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80155ba:	2000      	movs	r0, #0
 80155bc:	4770      	bx	lr

080155be <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80155be:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80155c2:	1a13      	subs	r3, r2, r0
 80155c4:	4258      	negs	r0, r3
 80155c6:	4158      	adcs	r0, r3
 80155c8:	4770      	bx	lr

080155ca <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80155ca:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80155ce:	1a9b      	subs	r3, r3, r2
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	bfdc      	itt	le
 80155d4:	6882      	ldrle	r2, [r0, #8]
 80155d6:	189b      	addle	r3, r3, r2
 80155d8:	2b01      	cmp	r3, #1
 80155da:	bfcc      	ite	gt
 80155dc:	2000      	movgt	r0, #0
 80155de:	2001      	movle	r0, #1
 80155e0:	4770      	bx	lr

080155e2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80155e2:	6902      	ldr	r2, [r0, #16]
 80155e4:	6843      	ldr	r3, [r0, #4]
 80155e6:	2024      	movs	r0, #36	@ 0x24
 80155e8:	fb00 3002 	mla	r0, r0, r2, r3
 80155ec:	4770      	bx	lr

080155ee <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80155ee:	6803      	ldr	r3, [r0, #0]
 80155f0:	691b      	ldr	r3, [r3, #16]
 80155f2:	4718      	bx	r3

080155f4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80155f4:	2301      	movs	r3, #1
 80155f6:	b570      	push	{r4, r5, r6, lr}
 80155f8:	7203      	strb	r3, [r0, #8]
 80155fa:	4604      	mov	r4, r0
 80155fc:	6840      	ldr	r0, [r0, #4]
 80155fe:	6803      	ldr	r3, [r0, #0]
 8015600:	699b      	ldr	r3, [r3, #24]
 8015602:	4798      	blx	r3
 8015604:	6803      	ldr	r3, [r0, #0]
 8015606:	4605      	mov	r5, r0
 8015608:	2b40      	cmp	r3, #64	@ 0x40
 801560a:	d00c      	beq.n	8015626 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801560c:	d810      	bhi.n	8015630 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801560e:	2b04      	cmp	r3, #4
 8015610:	d01d      	beq.n	801564e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015612:	d804      	bhi.n	801561e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015614:	2b01      	cmp	r3, #1
 8015616:	d006      	beq.n	8015626 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015618:	2b02      	cmp	r3, #2
 801561a:	d02c      	beq.n	8015676 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801561c:	bd70      	pop	{r4, r5, r6, pc}
 801561e:	2b08      	cmp	r3, #8
 8015620:	d01d      	beq.n	801565e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015622:	2b20      	cmp	r3, #32
 8015624:	d1fa      	bne.n	801561c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015626:	6823      	ldr	r3, [r4, #0]
 8015628:	4620      	mov	r0, r4
 801562a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801562c:	4798      	blx	r3
 801562e:	e013      	b.n	8015658 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015634:	d0f7      	beq.n	8015626 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015636:	d804      	bhi.n	8015642 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015638:	2b80      	cmp	r3, #128	@ 0x80
 801563a:	d0f4      	beq.n	8015626 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801563c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015640:	e7f0      	b.n	8015624 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8015642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015646:	d0ee      	beq.n	8015626 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801564c:	e7e5      	b.n	801561a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801564e:	6823      	ldr	r3, [r4, #0]
 8015650:	7f01      	ldrb	r1, [r0, #28]
 8015652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015654:	4620      	mov	r0, r4
 8015656:	4798      	blx	r3
 8015658:	6823      	ldr	r3, [r4, #0]
 801565a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801565c:	e006      	b.n	801566c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801565e:	6823      	ldr	r3, [r4, #0]
 8015660:	7f01      	ldrb	r1, [r0, #28]
 8015662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015664:	4620      	mov	r0, r4
 8015666:	4798      	blx	r3
 8015668:	6823      	ldr	r3, [r4, #0]
 801566a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801566c:	4629      	mov	r1, r5
 801566e:	4620      	mov	r0, r4
 8015670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015674:	4718      	bx	r3
 8015676:	6823      	ldr	r3, [r4, #0]
 8015678:	4620      	mov	r0, r4
 801567a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801567c:	4798      	blx	r3
 801567e:	e7f3      	b.n	8015668 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015680 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015680:	4770      	bx	lr

08015682 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015682:	4770      	bx	lr

08015684 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015684:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015688:	1ad2      	subs	r2, r2, r3
 801568a:	2a00      	cmp	r2, #0
 801568c:	b510      	push	{r4, lr}
 801568e:	bfdc      	itt	le
 8015690:	6884      	ldrle	r4, [r0, #8]
 8015692:	1912      	addle	r2, r2, r4
 8015694:	2a01      	cmp	r2, #1
 8015696:	dd16      	ble.n	80156c6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015698:	2424      	movs	r4, #36	@ 0x24
 801569a:	6842      	ldr	r2, [r0, #4]
 801569c:	fb04 2303 	mla	r3, r4, r3, r2
 80156a0:	f101 0220 	add.w	r2, r1, #32
 80156a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80156a8:	4291      	cmp	r1, r2
 80156aa:	f843 4b04 	str.w	r4, [r3], #4
 80156ae:	d1f9      	bne.n	80156a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80156b0:	780a      	ldrb	r2, [r1, #0]
 80156b2:	701a      	strb	r2, [r3, #0]
 80156b4:	68c3      	ldr	r3, [r0, #12]
 80156b6:	6882      	ldr	r2, [r0, #8]
 80156b8:	3301      	adds	r3, #1
 80156ba:	429a      	cmp	r2, r3
 80156bc:	bfd8      	it	le
 80156be:	1a9b      	suble	r3, r3, r2
 80156c0:	f3bf 8f5b 	dmb	ish
 80156c4:	60c3      	str	r3, [r0, #12]
 80156c6:	bd10      	pop	{r4, pc}

080156c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80156c8:	6903      	ldr	r3, [r0, #16]
 80156ca:	6882      	ldr	r2, [r0, #8]
 80156cc:	3301      	adds	r3, #1
 80156ce:	429a      	cmp	r2, r3
 80156d0:	bfd8      	it	le
 80156d2:	1a9b      	suble	r3, r3, r2
 80156d4:	f3bf 8f5b 	dmb	ish
 80156d8:	6103      	str	r3, [r0, #16]
 80156da:	4770      	bx	lr

080156dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80156dc:	b570      	push	{r4, r5, r6, lr}
 80156de:	4604      	mov	r4, r0
 80156e0:	460e      	mov	r6, r1
 80156e2:	6860      	ldr	r0, [r4, #4]
 80156e4:	6803      	ldr	r3, [r0, #0]
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	4798      	blx	r3
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d1f9      	bne.n	80156e2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80156ee:	4d0d      	ldr	r5, [pc, #52]	@ (8015724 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80156f0:	6828      	ldr	r0, [r5, #0]
 80156f2:	6803      	ldr	r3, [r0, #0]
 80156f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80156f6:	4798      	blx	r3
 80156f8:	f7fd fa74 	bl	8012be4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80156fc:	6828      	ldr	r0, [r5, #0]
 80156fe:	2101      	movs	r1, #1
 8015700:	f7ff ff2a 	bl	8015558 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015704:	6860      	ldr	r0, [r4, #4]
 8015706:	4631      	mov	r1, r6
 8015708:	6803      	ldr	r3, [r0, #0]
 801570a:	689b      	ldr	r3, [r3, #8]
 801570c:	4798      	blx	r3
 801570e:	6823      	ldr	r3, [r4, #0]
 8015710:	4620      	mov	r0, r4
 8015712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015714:	4798      	blx	r3
 8015716:	6828      	ldr	r0, [r5, #0]
 8015718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801571c:	6803      	ldr	r3, [r0, #0]
 801571e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015720:	4718      	bx	r3
 8015722:	bf00      	nop
 8015724:	2015a078 	.word	0x2015a078

08015728 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015728:	b508      	push	{r3, lr}
 801572a:	f7fd fa19 	bl	8012b60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801572e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015732:	f7fd ba35 	b.w	8012ba0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015736 <_ZN8touchgfx13DMA_Interface5startEv>:
 8015736:	b510      	push	{r4, lr}
 8015738:	4604      	mov	r4, r0
 801573a:	6840      	ldr	r0, [r0, #4]
 801573c:	6803      	ldr	r3, [r0, #0]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	4798      	blx	r3
 8015742:	b948      	cbnz	r0, 8015758 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015744:	7a63      	ldrb	r3, [r4, #9]
 8015746:	b13b      	cbz	r3, 8015758 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015748:	7a23      	ldrb	r3, [r4, #8]
 801574a:	b92b      	cbnz	r3, 8015758 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801574c:	6823      	ldr	r3, [r4, #0]
 801574e:	4620      	mov	r0, r4
 8015750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015756:	4718      	bx	r3
 8015758:	bd10      	pop	{r4, pc}

0801575a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801575a:	b570      	push	{r4, r5, r6, lr}
 801575c:	4604      	mov	r4, r0
 801575e:	6840      	ldr	r0, [r0, #4]
 8015760:	6803      	ldr	r3, [r0, #0]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	4798      	blx	r3
 8015766:	4605      	mov	r5, r0
 8015768:	b930      	cbnz	r0, 8015778 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801576a:	7a23      	ldrb	r3, [r4, #8]
 801576c:	b123      	cbz	r3, 8015778 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801576e:	6860      	ldr	r0, [r4, #4]
 8015770:	6803      	ldr	r3, [r0, #0]
 8015772:	695b      	ldr	r3, [r3, #20]
 8015774:	4798      	blx	r3
 8015776:	7225      	strb	r5, [r4, #8]
 8015778:	6860      	ldr	r0, [r4, #4]
 801577a:	6803      	ldr	r3, [r0, #0]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	4798      	blx	r3
 8015780:	b928      	cbnz	r0, 801578e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015782:	6823      	ldr	r3, [r4, #0]
 8015784:	4620      	mov	r0, r4
 8015786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801578c:	4718      	bx	r3
 801578e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015792:	f7fd ba33 	b.w	8012bfc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08015798 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015798:	6082      	str	r2, [r0, #8]
 801579a:	2200      	movs	r2, #0
 801579c:	b510      	push	{r4, lr}
 801579e:	4c03      	ldr	r4, [pc, #12]	@ (80157ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80157a0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80157a4:	e9c0 4100 	strd	r4, r1, [r0]
 80157a8:	bd10      	pop	{r4, pc}
 80157aa:	bf00      	nop
 80157ac:	0802e368 	.word	0x0802e368

080157b0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80157b0:	6840      	ldr	r0, [r0, #4]
 80157b2:	6803      	ldr	r3, [r0, #0]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	4718      	bx	r3

080157b8 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80157b8:	2300      	movs	r3, #0
 80157ba:	8083      	strh	r3, [r0, #4]
 80157bc:	80c3      	strh	r3, [r0, #6]
 80157be:	8003      	strh	r3, [r0, #0]
 80157c0:	8043      	strh	r3, [r0, #2]
 80157c2:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80157c6:	2bff      	cmp	r3, #255	@ 0xff
 80157c8:	bf01      	itttt	eq
 80157ca:	890b      	ldrheq	r3, [r1, #8]
 80157cc:	8083      	strheq	r3, [r0, #4]
 80157ce:	894b      	ldrheq	r3, [r1, #10]
 80157d0:	80c3      	strheq	r3, [r0, #6]
 80157d2:	4770      	bx	lr

080157d4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80157d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80157d6:	4604      	mov	r4, r0
 80157d8:	466b      	mov	r3, sp
 80157da:	6808      	ldr	r0, [r1, #0]
 80157dc:	6849      	ldr	r1, [r1, #4]
 80157de:	c303      	stmia	r3!, {r0, r1}
 80157e0:	6823      	ldr	r3, [r4, #0]
 80157e2:	4669      	mov	r1, sp
 80157e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157e6:	4620      	mov	r0, r4
 80157e8:	4798      	blx	r3
 80157ea:	4b08      	ldr	r3, [pc, #32]	@ (801580c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80157f2:	b10a      	cbz	r2, 80157f8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80157f4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80157f6:	b900      	cbnz	r0, 80157fa <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80157f8:	6898      	ldr	r0, [r3, #8]
 80157fa:	6803      	ldr	r3, [r0, #0]
 80157fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80157fe:	6a1d      	ldr	r5, [r3, #32]
 8015800:	4669      	mov	r1, sp
 8015802:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8015806:	47a8      	blx	r5
 8015808:	b003      	add	sp, #12
 801580a:	bd30      	pop	{r4, r5, pc}
 801580c:	2015a078 	.word	0x2015a078

08015810 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015810:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8015814:	b12a      	cbz	r2, 8015822 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015816:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801581a:	b112      	cbz	r2, 8015822 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801581c:	6803      	ldr	r3, [r0, #0]
 801581e:	695b      	ldr	r3, [r3, #20]
 8015820:	4718      	bx	r3
 8015822:	4770      	bx	lr

08015824 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015824:	b510      	push	{r4, lr}
 8015826:	6803      	ldr	r3, [r0, #0]
 8015828:	460c      	mov	r4, r1
 801582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801582c:	4798      	blx	r3
 801582e:	1b03      	subs	r3, r0, r4
 8015830:	4258      	negs	r0, r3
 8015832:	4158      	adcs	r0, r3
 8015834:	bd10      	pop	{r4, pc}
	...

08015838 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015838:	4b01      	ldr	r3, [pc, #4]	@ (8015840 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801583a:	6019      	str	r1, [r3, #0]
 801583c:	4770      	bx	lr
 801583e:	bf00      	nop
 8015840:	2015a080 	.word	0x2015a080

08015844 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015848:	4696      	mov	lr, r2
 801584a:	4614      	mov	r4, r2
 801584c:	4605      	mov	r5, r0
 801584e:	460e      	mov	r6, r1
 8015850:	461f      	mov	r7, r3
 8015852:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015856:	b097      	sub	sp, #92	@ 0x5c
 8015858:	f10d 0c1c 	add.w	ip, sp, #28
 801585c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015860:	f8de 3000 	ldr.w	r3, [lr]
 8015864:	f104 0e14 	add.w	lr, r4, #20
 8015868:	f8cc 3000 	str.w	r3, [ip]
 801586c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015870:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015874:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015878:	f8de 3000 	ldr.w	r3, [lr]
 801587c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8015880:	f8cc 3000 	str.w	r3, [ip]
 8015884:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015888:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801588c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015890:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8015894:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8015898:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801589c:	f8de 3000 	ldr.w	r3, [lr]
 80158a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80158a2:	f8cc 3000 	str.w	r3, [ip]
 80158a6:	9201      	str	r2, [sp, #4]
 80158a8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80158ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80158ae:	682b      	ldr	r3, [r5, #0]
 80158b0:	9200      	str	r2, [sp, #0]
 80158b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80158b6:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80158ba:	aa07      	add	r2, sp, #28
 80158bc:	463b      	mov	r3, r7
 80158be:	4631      	mov	r1, r6
 80158c0:	4628      	mov	r0, r5
 80158c2:	47d8      	blx	fp
 80158c4:	46a6      	mov	lr, r4
 80158c6:	f10d 0c1c 	add.w	ip, sp, #28
 80158ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158d2:	f8de 3000 	ldr.w	r3, [lr]
 80158d6:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80158da:	f8cc 3000 	str.w	r3, [ip]
 80158de:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80158e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158ea:	f8de 3000 	ldr.w	r3, [lr]
 80158ee:	343c      	adds	r4, #60	@ 0x3c
 80158f0:	f8cc 3000 	str.w	r3, [ip]
 80158f4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80158f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158fe:	6823      	ldr	r3, [r4, #0]
 8015900:	4631      	mov	r1, r6
 8015902:	f8cc 3000 	str.w	r3, [ip]
 8015906:	682b      	ldr	r3, [r5, #0]
 8015908:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801590c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801590e:	f8cd 8008 	str.w	r8, [sp, #8]
 8015912:	9201      	str	r2, [sp, #4]
 8015914:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015916:	4628      	mov	r0, r5
 8015918:	9200      	str	r2, [sp, #0]
 801591a:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801591c:	aa07      	add	r2, sp, #28
 801591e:	463b      	mov	r3, r7
 8015920:	47a0      	blx	r4
 8015922:	b017      	add	sp, #92	@ 0x5c
 8015924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015928 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015928:	2000      	movs	r0, #0
 801592a:	4770      	bx	lr

0801592c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015930:	b08d      	sub	sp, #52	@ 0x34
 8015932:	4688      	mov	r8, r1
 8015934:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8015936:	f8d3 c000 	ldr.w	ip, [r3]
 801593a:	680f      	ldr	r7, [r1, #0]
 801593c:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8015940:	eba7 070c 	sub.w	r7, r7, ip
 8015944:	42bc      	cmp	r4, r7
 8015946:	bfa8      	it	ge
 8015948:	463c      	movge	r4, r7
 801594a:	ee07 4a90 	vmov	s15, r4
 801594e:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8015952:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015956:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801595a:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801595e:	edd3 6a07 	vldr	s13, [r3, #28]
 8015962:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015966:	ee65 4a24 	vmul.f32	s9, s10, s9
 801596a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801596e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015972:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8015976:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801597a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801597e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015980:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8015984:	f9b1 9000 	ldrsh.w	r9, [r1]
 8015988:	f9ba 1000 	ldrsh.w	r1, [sl]
 801598c:	eb09 0e0c 	add.w	lr, r9, ip
 8015990:	4571      	cmp	r1, lr
 8015992:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8015996:	ee32 1a05 	vadd.f32	s2, s4, s10
 801599a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801599e:	ee61 1a87 	vmul.f32	s3, s3, s14
 80159a2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80159a6:	f340 808c 	ble.w	8015ac2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80159aa:	eba1 060e 	sub.w	r6, r1, lr
 80159ae:	fb96 f5f4 	sdiv	r5, r6, r4
 80159b2:	ee07 5a10 	vmov	s14, r5
 80159b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80159ba:	2d00      	cmp	r5, #0
 80159bc:	fb04 6615 	mls	r6, r4, r5, r6
 80159c0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80159c4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80159c8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80159cc:	dd12      	ble.n	80159f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80159ce:	ee70 6a44 	vsub.f32	s13, s0, s8
 80159d2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80159d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159da:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80159de:	bf14      	ite	ne
 80159e0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80159e4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80159e8:	ee31 2a45 	vsub.f32	s4, s2, s10
 80159ec:	ee61 1a87 	vmul.f32	s3, s3, s14
 80159f0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80159f4:	fb05 f204 	mul.w	r2, r5, r4
 80159f8:	1abf      	subs	r7, r7, r2
 80159fa:	4494      	add	ip, r2
 80159fc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015a00:	4411      	add	r1, r2
 8015a02:	eb09 020c 	add.w	r2, r9, ip
 8015a06:	443a      	add	r2, r7
 8015a08:	b209      	sxth	r1, r1
 8015a0a:	428a      	cmp	r2, r1
 8015a0c:	bfc4      	itt	gt
 8015a0e:	eba1 0209 	subgt.w	r2, r1, r9
 8015a12:	eba2 070c 	subgt.w	r7, r2, ip
 8015a16:	2f00      	cmp	r7, #0
 8015a18:	dd50      	ble.n	8015abc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015a1a:	fb97 f1f4 	sdiv	r1, r7, r4
 8015a1e:	fb04 7211 	mls	r2, r4, r1, r7
 8015a22:	b90a      	cbnz	r2, 8015a28 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015a24:	4622      	mov	r2, r4
 8015a26:	3901      	subs	r1, #1
 8015a28:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015a2c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015a30:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015a34:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015a38:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a3c:	ee17 7a90 	vmov	r7, s15
 8015a40:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015a44:	eef0 6a42 	vmov.f32	s13, s4
 8015a48:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015a4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a50:	ee17 ca90 	vmov	ip, s15
 8015a54:	eeb0 7a61 	vmov.f32	s14, s3
 8015a58:	6840      	ldr	r0, [r0, #4]
 8015a5a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8015a5e:	f8d0 a000 	ldr.w	sl, [r0]
 8015a62:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015a64:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015a66:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015a6a:	9008      	str	r0, [sp, #32]
 8015a6c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8015a6e:	695b      	ldr	r3, [r3, #20]
 8015a70:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015a74:	fb9c fcf4 	sdiv	ip, ip, r4
 8015a78:	445b      	add	r3, fp
 8015a7a:	9307      	str	r3, [sp, #28]
 8015a7c:	ee16 3a90 	vmov	r3, s13
 8015a80:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015a84:	fb0c 3306 	mla	r3, ip, r6, r3
 8015a88:	fb97 f7f4 	sdiv	r7, r7, r4
 8015a8c:	9302      	str	r3, [sp, #8]
 8015a8e:	ee17 3a10 	vmov	r3, s14
 8015a92:	2900      	cmp	r1, #0
 8015a94:	bfcc      	ite	gt
 8015a96:	46a1      	movgt	r9, r4
 8015a98:	4691      	movle	r9, r2
 8015a9a:	44b6      	add	lr, r6
 8015a9c:	fb04 e505 	mla	r5, r4, r5, lr
 8015aa0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015aa4:	fb07 3706 	mla	r7, r7, r6, r3
 8015aa8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015aac:	e9cd 4700 	strd	r4, r7, [sp]
 8015ab0:	eba9 0306 	sub.w	r3, r9, r6
 8015ab4:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015ab8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8015aba:	47a0      	blx	r4
 8015abc:	b00d      	add	sp, #52	@ 0x34
 8015abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac2:	2500      	movs	r5, #0
 8015ac4:	462e      	mov	r6, r5
 8015ac6:	e799      	b.n	80159fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015ac8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015acc:	461d      	mov	r5, r3
 8015ace:	b0db      	sub	sp, #364	@ 0x16c
 8015ad0:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8015ad4:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8015ad8:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8015adc:	9009      	str	r0, [sp, #36]	@ 0x24
 8015ade:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015ae0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8015ae4:	4614      	mov	r4, r2
 8015ae6:	9310      	str	r3, [sp, #64]	@ 0x40
 8015ae8:	6803      	ldr	r3, [r0, #0]
 8015aea:	4629      	mov	r1, r5
 8015aec:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8015aee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015af2:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8015af6:	47b8      	blx	r7
 8015af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015afa:	6058      	str	r0, [r3, #4]
 8015afc:	2800      	cmp	r0, #0
 8015afe:	f000 83a1 	beq.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b02:	ed94 7a02 	vldr	s14, [r4, #8]
 8015b06:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8015b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b0e:	682b      	ldr	r3, [r5, #0]
 8015b10:	9314      	str	r3, [sp, #80]	@ 0x50
 8015b12:	686b      	ldr	r3, [r5, #4]
 8015b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8015b16:	4bc1      	ldr	r3, [pc, #772]	@ (8015e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015b18:	7819      	ldrb	r1, [r3, #0]
 8015b1a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015b1e:	2900      	cmp	r1, #0
 8015b20:	bf16      	itet	ne
 8015b22:	4619      	movne	r1, r3
 8015b24:	4611      	moveq	r1, r2
 8015b26:	4613      	movne	r3, r2
 8015b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b2c:	9116      	str	r1, [sp, #88]	@ 0x58
 8015b2e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8015b32:	f240 8387 	bls.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b36:	ed94 7a07 	vldr	s14, [r4, #28]
 8015b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b42:	f240 837f 	bls.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b46:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8015b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b52:	f240 8377 	bls.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b56:	6822      	ldr	r2, [r4, #0]
 8015b58:	4bb1      	ldr	r3, [pc, #708]	@ (8015e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	f2c0 8372 	blt.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b60:	49b0      	ldr	r1, [pc, #704]	@ (8015e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015b62:	6963      	ldr	r3, [r4, #20]
 8015b64:	428a      	cmp	r2, r1
 8015b66:	f300 836d 	bgt.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b6a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015b6e:	48ae      	ldr	r0, [pc, #696]	@ (8015e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015b70:	33ff      	adds	r3, #255	@ 0xff
 8015b72:	4283      	cmp	r3, r0
 8015b74:	f200 8366 	bhi.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015b7a:	4dac      	ldr	r5, [pc, #688]	@ (8015e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015b7c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8015b80:	33ff      	adds	r3, #255	@ 0xff
 8015b82:	42ab      	cmp	r3, r5
 8015b84:	f200 835e 	bhi.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b88:	6862      	ldr	r2, [r4, #4]
 8015b8a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8015b8e:	33ff      	adds	r3, #255	@ 0xff
 8015b90:	4283      	cmp	r3, r0
 8015b92:	f200 8357 	bhi.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b96:	69a1      	ldr	r1, [r4, #24]
 8015b98:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8015b9c:	33ff      	adds	r3, #255	@ 0xff
 8015b9e:	4283      	cmp	r3, r0
 8015ba0:	f200 8350 	bhi.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ba4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015ba6:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8015baa:	30ff      	adds	r0, #255	@ 0xff
 8015bac:	42a8      	cmp	r0, r5
 8015bae:	f200 8349 	bhi.w	8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bb2:	428a      	cmp	r2, r1
 8015bb4:	f280 8110 	bge.w	8015dd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	f300 8119 	bgt.w	8015df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015bbe:	4299      	cmp	r1, r3
 8015bc0:	f280 811d 	bge.w	8015dfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015bc4:	2502      	movs	r5, #2
 8015bc6:	2701      	movs	r7, #1
 8015bc8:	46a9      	mov	r9, r5
 8015bca:	46b8      	mov	r8, r7
 8015bcc:	f04f 0a00 	mov.w	sl, #0
 8015bd0:	4621      	mov	r1, r4
 8015bd2:	a849      	add	r0, sp, #292	@ 0x124
 8015bd4:	f002 fffe 	bl	8018bd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015bd8:	4622      	mov	r2, r4
 8015bda:	4653      	mov	r3, sl
 8015bdc:	a949      	add	r1, sp, #292	@ 0x124
 8015bde:	f8cd 9000 	str.w	r9, [sp]
 8015be2:	a819      	add	r0, sp, #100	@ 0x64
 8015be4:	f003 f928 	bl	8018e38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015be8:	4622      	mov	r2, r4
 8015bea:	4653      	mov	r3, sl
 8015bec:	a949      	add	r1, sp, #292	@ 0x124
 8015bee:	f8cd 8000 	str.w	r8, [sp]
 8015bf2:	a829      	add	r0, sp, #164	@ 0xa4
 8015bf4:	f003 f920 	bl	8018e38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015bf8:	4643      	mov	r3, r8
 8015bfa:	4622      	mov	r2, r4
 8015bfc:	a949      	add	r1, sp, #292	@ 0x124
 8015bfe:	f8cd 9000 	str.w	r9, [sp]
 8015c02:	a839      	add	r0, sp, #228	@ 0xe4
 8015c04:	f003 f918 	bl	8018e38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015c08:	42af      	cmp	r7, r5
 8015c0a:	bfb5      	itete	lt
 8015c0c:	2300      	movlt	r3, #0
 8015c0e:	2301      	movge	r3, #1
 8015c10:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015c12:	930e      	strge	r3, [sp, #56]	@ 0x38
 8015c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c16:	af12      	add	r7, sp, #72	@ 0x48
 8015c18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c1c:	bfb9      	ittee	lt
 8015c1e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8015c20:	ac19      	addlt	r4, sp, #100	@ 0x64
 8015c22:	ad19      	addge	r5, sp, #100	@ 0x64
 8015c24:	ac29      	addge	r4, sp, #164	@ 0xa4
 8015c26:	e887 0003 	stmia.w	r7, {r0, r1}
 8015c2a:	b928      	cbnz	r0, 8015c38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015c2c:	4b80      	ldr	r3, [pc, #512]	@ (8015e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015c2e:	6818      	ldr	r0, [r3, #0]
 8015c30:	6803      	ldr	r3, [r0, #0]
 8015c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c34:	4798      	blx	r3
 8015c36:	6038      	str	r0, [r7, #0]
 8015c38:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015c3a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015c3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c42:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8015c44:	930c      	str	r3, [sp, #48]	@ 0x30
 8015c46:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015c48:	6963      	ldr	r3, [r4, #20]
 8015c4a:	440b      	add	r3, r1
 8015c4c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015c50:	4408      	add	r0, r1
 8015c52:	b200      	sxth	r0, r0
 8015c54:	4283      	cmp	r3, r0
 8015c56:	900d      	str	r0, [sp, #52]	@ 0x34
 8015c58:	f280 80dd 	bge.w	8015e16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015c5c:	428b      	cmp	r3, r1
 8015c5e:	da08      	bge.n	8015c72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015c60:	2a00      	cmp	r2, #0
 8015c62:	dd06      	ble.n	8015c72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015c64:	1acb      	subs	r3, r1, r3
 8015c66:	429a      	cmp	r2, r3
 8015c68:	f2c0 80e4 	blt.w	8015e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	f300 80e2 	bgt.w	8015e36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015c72:	6967      	ldr	r7, [r4, #20]
 8015c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c76:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015c7a:	443b      	add	r3, r7
 8015c7c:	461f      	mov	r7, r3
 8015c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c80:	1bdf      	subs	r7, r3, r7
 8015c82:	4297      	cmp	r7, r2
 8015c84:	bfa8      	it	ge
 8015c86:	4617      	movge	r7, r2
 8015c88:	2f00      	cmp	r7, #0
 8015c8a:	f340 8166 	ble.w	8015f5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015c8e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015c90:	6829      	ldr	r1, [r5, #0]
 8015c92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c96:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015c9a:	4411      	add	r1, r2
 8015c9c:	4299      	cmp	r1, r3
 8015c9e:	6820      	ldr	r0, [r4, #0]
 8015ca0:	dd1a      	ble.n	8015cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015ca2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015ca6:	4402      	add	r2, r0
 8015ca8:	440b      	add	r3, r1
 8015caa:	b21b      	sxth	r3, r3
 8015cac:	429a      	cmp	r2, r3
 8015cae:	dc13      	bgt.n	8015cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015cb0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cb4:	a912      	add	r1, sp, #72	@ 0x48
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	9206      	str	r2, [sp, #24]
 8015cba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015cbc:	9500      	str	r5, [sp, #0]
 8015cbe:	9205      	str	r2, [sp, #20]
 8015cc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015cc4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015cc8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015cca:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015cce:	aa49      	add	r2, sp, #292	@ 0x124
 8015cd0:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015cd4:	4623      	mov	r3, r4
 8015cd6:	47c8      	blx	r9
 8015cd8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015cdc:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015ce0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015ce4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8015ce8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015cec:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015cf0:	ed94 6a08 	vldr	s12, [r4, #32]
 8015cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015cf8:	edd4 6a07 	vldr	s13, [r4, #28]
 8015cfc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d00:	441a      	add	r2, r3
 8015d02:	6963      	ldr	r3, [r4, #20]
 8015d04:	68a1      	ldr	r1, [r4, #8]
 8015d06:	3301      	adds	r3, #1
 8015d08:	6163      	str	r3, [r4, #20]
 8015d0a:	69a3      	ldr	r3, [r4, #24]
 8015d0c:	6022      	str	r2, [r4, #0]
 8015d0e:	3b01      	subs	r3, #1
 8015d10:	61a3      	str	r3, [r4, #24]
 8015d12:	6923      	ldr	r3, [r4, #16]
 8015d14:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015d18:	440b      	add	r3, r1
 8015d1a:	68e1      	ldr	r1, [r4, #12]
 8015d1c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015d20:	428b      	cmp	r3, r1
 8015d22:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d26:	6123      	str	r3, [r4, #16]
 8015d28:	db15      	blt.n	8015d56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015d2a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015d2e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015d32:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d36:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8015d3a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015d3e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015d42:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d4a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015d4e:	3201      	adds	r2, #1
 8015d50:	1a5b      	subs	r3, r3, r1
 8015d52:	6022      	str	r2, [r4, #0]
 8015d54:	6123      	str	r3, [r4, #16]
 8015d56:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015d5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d5e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015d62:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8015d66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d6a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015d6e:	ed95 6a08 	vldr	s12, [r5, #32]
 8015d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d76:	edd5 6a07 	vldr	s13, [r5, #28]
 8015d7a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d7e:	441a      	add	r2, r3
 8015d80:	696b      	ldr	r3, [r5, #20]
 8015d82:	68a9      	ldr	r1, [r5, #8]
 8015d84:	3301      	adds	r3, #1
 8015d86:	616b      	str	r3, [r5, #20]
 8015d88:	69ab      	ldr	r3, [r5, #24]
 8015d8a:	602a      	str	r2, [r5, #0]
 8015d8c:	3b01      	subs	r3, #1
 8015d8e:	61ab      	str	r3, [r5, #24]
 8015d90:	692b      	ldr	r3, [r5, #16]
 8015d92:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015d96:	440b      	add	r3, r1
 8015d98:	68e9      	ldr	r1, [r5, #12]
 8015d9a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015d9e:	428b      	cmp	r3, r1
 8015da0:	edc5 6a07 	vstr	s13, [r5, #28]
 8015da4:	612b      	str	r3, [r5, #16]
 8015da6:	db15      	blt.n	8015dd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015da8:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015dac:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015db0:	edc5 6a07 	vstr	s13, [r5, #28]
 8015db4:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015db8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015dbc:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015dc0:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015dc8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015dcc:	3201      	adds	r2, #1
 8015dce:	1a5b      	subs	r3, r3, r1
 8015dd0:	602a      	str	r2, [r5, #0]
 8015dd2:	612b      	str	r3, [r5, #16]
 8015dd4:	3f01      	subs	r7, #1
 8015dd6:	e757      	b.n	8015c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015dd8:	4299      	cmp	r1, r3
 8015dda:	dc13      	bgt.n	8015e04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	da14      	bge.n	8015e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015de0:	2502      	movs	r5, #2
 8015de2:	2703      	movs	r7, #3
 8015de4:	46a9      	mov	r9, r5
 8015de6:	f04f 0800 	mov.w	r8, #0
 8015dea:	f04f 0a01 	mov.w	sl, #1
 8015dee:	e6ef      	b.n	8015bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015df0:	2501      	movs	r5, #1
 8015df2:	2700      	movs	r7, #0
 8015df4:	46a9      	mov	r9, r5
 8015df6:	46b8      	mov	r8, r7
 8015df8:	f04f 0a02 	mov.w	sl, #2
 8015dfc:	e6e8      	b.n	8015bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015dfe:	2501      	movs	r5, #1
 8015e00:	2702      	movs	r7, #2
 8015e02:	e6e1      	b.n	8015bc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015e04:	2500      	movs	r5, #0
 8015e06:	2701      	movs	r7, #1
 8015e08:	e7f4      	b.n	8015df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015e0a:	2702      	movs	r7, #2
 8015e0c:	2503      	movs	r5, #3
 8015e0e:	f04f 0900 	mov.w	r9, #0
 8015e12:	46b8      	mov	r8, r7
 8015e14:	e7e9      	b.n	8015dea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015e16:	4613      	mov	r3, r2
 8015e18:	e728      	b.n	8015c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015e1a:	bf00      	nop
 8015e1c:	2015a070 	.word	0x2015a070
 8015e20:	fffd8f01 	.word	0xfffd8f01
 8015e24:	00027100 	.word	0x00027100
 8015e28:	0004e1ff 	.word	0x0004e1ff
 8015e2c:	0004e1fe 	.word	0x0004e1fe
 8015e30:	2015a078 	.word	0x2015a078
 8015e34:	4613      	mov	r3, r2
 8015e36:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8015e3a:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8015e3e:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8015e42:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8015e46:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8015e4a:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8015e4e:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8015e52:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8015e56:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8015e5a:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8015e5e:	469e      	mov	lr, r3
 8015e60:	469c      	mov	ip, r3
 8015e62:	f04f 0900 	mov.w	r9, #0
 8015e66:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015e68:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015e6a:	9111      	str	r1, [sp, #68]	@ 0x44
 8015e6c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8015e70:	f1bc 0f00 	cmp.w	ip, #0
 8015e74:	d147      	bne.n	8015f06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015e76:	eb03 0c07 	add.w	ip, r3, r7
 8015e7a:	1ad7      	subs	r7, r2, r3
 8015e7c:	f1b9 0f00 	cmp.w	r9, #0
 8015e80:	d009      	beq.n	8015e96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015e82:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8015e86:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8015e8a:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8015e8e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8015e92:	9029      	str	r0, [sp, #164]	@ 0xa4
 8015e94:	912d      	str	r1, [sp, #180]	@ 0xb4
 8015e96:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015e9a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015e9e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015ea2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015ea6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015eaa:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015eae:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8015eb2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015eb6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015eba:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015ebe:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8015ec2:	f04f 0800 	mov.w	r8, #0
 8015ec6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015ec8:	9111      	str	r1, [sp, #68]	@ 0x44
 8015eca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015ece:	f1be 0f00 	cmp.w	lr, #0
 8015ed2:	d031      	beq.n	8015f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015ed4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015ed6:	4450      	add	r0, sl
 8015ed8:	4431      	add	r1, r6
 8015eda:	4549      	cmp	r1, r9
 8015edc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015ee0:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015ee4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015ee8:	db08      	blt.n	8015efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015eea:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015eee:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015ef2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015ef6:	3001      	adds	r0, #1
 8015ef8:	eba1 0109 	sub.w	r1, r1, r9
 8015efc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015f00:	f04f 0801 	mov.w	r8, #1
 8015f04:	e7e3      	b.n	8015ece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015f06:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015f08:	4450      	add	r0, sl
 8015f0a:	4431      	add	r1, r6
 8015f0c:	4541      	cmp	r1, r8
 8015f0e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015f12:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015f16:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015f1a:	db08      	blt.n	8015f2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015f1c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015f20:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015f24:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015f28:	3001      	adds	r0, #1
 8015f2a:	eba1 0108 	sub.w	r1, r1, r8
 8015f2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015f32:	f04f 0901 	mov.w	r9, #1
 8015f36:	e79b      	b.n	8015e70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015f38:	449c      	add	ip, r3
 8015f3a:	1aff      	subs	r7, r7, r3
 8015f3c:	f1b8 0f00 	cmp.w	r8, #0
 8015f40:	d009      	beq.n	8015f56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015f42:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015f46:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015f4a:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015f4e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015f52:	9019      	str	r0, [sp, #100]	@ 0x64
 8015f54:	911d      	str	r1, [sp, #116]	@ 0x74
 8015f56:	1ad2      	subs	r2, r2, r3
 8015f58:	e68b      	b.n	8015c72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f5c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f000 80d1 	beq.w	8016106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015f64:	ad19      	add	r5, sp, #100	@ 0x64
 8015f66:	ac39      	add	r4, sp, #228	@ 0xe4
 8015f68:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015f6a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015f6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015f72:	930c      	str	r3, [sp, #48]	@ 0x30
 8015f74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f76:	6963      	ldr	r3, [r4, #20]
 8015f78:	440b      	add	r3, r1
 8015f7a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015f7e:	4408      	add	r0, r1
 8015f80:	b200      	sxth	r0, r0
 8015f82:	4283      	cmp	r3, r0
 8015f84:	900d      	str	r0, [sp, #52]	@ 0x34
 8015f86:	f280 80c1 	bge.w	801610c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015f8a:	428b      	cmp	r3, r1
 8015f8c:	da08      	bge.n	8015fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015f8e:	2a00      	cmp	r2, #0
 8015f90:	dd06      	ble.n	8015fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015f92:	1acb      	subs	r3, r1, r3
 8015f94:	429a      	cmp	r2, r3
 8015f96:	f2c0 80bb 	blt.w	8016110 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	f300 80b9 	bgt.w	8016112 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015fa0:	6967      	ldr	r7, [r4, #20]
 8015fa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fa4:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8015fa8:	443b      	add	r3, r7
 8015faa:	461f      	mov	r7, r3
 8015fac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015fae:	1bdf      	subs	r7, r3, r7
 8015fb0:	4297      	cmp	r7, r2
 8015fb2:	bfa8      	it	ge
 8015fb4:	4617      	movge	r7, r2
 8015fb6:	2f00      	cmp	r7, #0
 8015fb8:	f340 813c 	ble.w	8016234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015fbc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015fbe:	6829      	ldr	r1, [r5, #0]
 8015fc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015fc4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015fc8:	4411      	add	r1, r2
 8015fca:	4299      	cmp	r1, r3
 8015fcc:	6820      	ldr	r0, [r4, #0]
 8015fce:	dd1a      	ble.n	8016006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015fd0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015fd4:	4402      	add	r2, r0
 8015fd6:	440b      	add	r3, r1
 8015fd8:	b21b      	sxth	r3, r3
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	dc13      	bgt.n	8016006 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015fde:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fe2:	a912      	add	r1, sp, #72	@ 0x48
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	9206      	str	r2, [sp, #24]
 8015fe8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015fea:	9500      	str	r5, [sp, #0]
 8015fec:	9205      	str	r2, [sp, #20]
 8015fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015ff0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ff2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015ff6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015ff8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015ffc:	aa49      	add	r2, sp, #292	@ 0x124
 8015ffe:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8016002:	4623      	mov	r3, r4
 8016004:	47c8      	blx	r9
 8016006:	e9d4 2300 	ldrd	r2, r3, [r4]
 801600a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801600e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016012:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8016016:	ee37 7a27 	vadd.f32	s14, s14, s15
 801601a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801601e:	ed94 6a08 	vldr	s12, [r4, #32]
 8016022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016026:	edd4 6a07 	vldr	s13, [r4, #28]
 801602a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801602e:	441a      	add	r2, r3
 8016030:	6963      	ldr	r3, [r4, #20]
 8016032:	68a1      	ldr	r1, [r4, #8]
 8016034:	3301      	adds	r3, #1
 8016036:	6163      	str	r3, [r4, #20]
 8016038:	69a3      	ldr	r3, [r4, #24]
 801603a:	6022      	str	r2, [r4, #0]
 801603c:	3b01      	subs	r3, #1
 801603e:	61a3      	str	r3, [r4, #24]
 8016040:	6923      	ldr	r3, [r4, #16]
 8016042:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016046:	440b      	add	r3, r1
 8016048:	68e1      	ldr	r1, [r4, #12]
 801604a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801604e:	428b      	cmp	r3, r1
 8016050:	edc4 6a07 	vstr	s13, [r4, #28]
 8016054:	6123      	str	r3, [r4, #16]
 8016056:	db15      	blt.n	8016084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016058:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801605c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016060:	edc4 6a07 	vstr	s13, [r4, #28]
 8016064:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8016068:	ee36 7a87 	vadd.f32	s14, s13, s14
 801606c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016070:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8016074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016078:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801607c:	3201      	adds	r2, #1
 801607e:	1a5b      	subs	r3, r3, r1
 8016080:	6022      	str	r2, [r4, #0]
 8016082:	6123      	str	r3, [r4, #16]
 8016084:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8016088:	e9d5 2300 	ldrd	r2, r3, [r5]
 801608c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8016090:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8016094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016098:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801609c:	ed95 6a08 	vldr	s12, [r5, #32]
 80160a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160a4:	edd5 6a07 	vldr	s13, [r5, #28]
 80160a8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80160ac:	441a      	add	r2, r3
 80160ae:	696b      	ldr	r3, [r5, #20]
 80160b0:	68a9      	ldr	r1, [r5, #8]
 80160b2:	3301      	adds	r3, #1
 80160b4:	616b      	str	r3, [r5, #20]
 80160b6:	69ab      	ldr	r3, [r5, #24]
 80160b8:	602a      	str	r2, [r5, #0]
 80160ba:	3b01      	subs	r3, #1
 80160bc:	61ab      	str	r3, [r5, #24]
 80160be:	692b      	ldr	r3, [r5, #16]
 80160c0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80160c4:	440b      	add	r3, r1
 80160c6:	68e9      	ldr	r1, [r5, #12]
 80160c8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80160cc:	428b      	cmp	r3, r1
 80160ce:	edc5 6a07 	vstr	s13, [r5, #28]
 80160d2:	612b      	str	r3, [r5, #16]
 80160d4:	db15      	blt.n	8016102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80160d6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80160da:	ee76 6a26 	vadd.f32	s13, s12, s13
 80160de:	edc5 6a07 	vstr	s13, [r5, #28]
 80160e2:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80160e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80160ea:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80160ee:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80160f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160f6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80160fa:	3201      	adds	r2, #1
 80160fc:	1a5b      	subs	r3, r3, r1
 80160fe:	602a      	str	r2, [r5, #0]
 8016100:	612b      	str	r3, [r5, #16]
 8016102:	3f01      	subs	r7, #1
 8016104:	e757      	b.n	8015fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016106:	ad39      	add	r5, sp, #228	@ 0xe4
 8016108:	ac19      	add	r4, sp, #100	@ 0x64
 801610a:	e72d      	b.n	8015f68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801610c:	4613      	mov	r3, r2
 801610e:	e744      	b.n	8015f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016110:	4613      	mov	r3, r2
 8016112:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8016116:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801611a:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801611e:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8016122:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8016126:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801612a:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801612e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8016132:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8016136:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801613a:	469e      	mov	lr, r3
 801613c:	461f      	mov	r7, r3
 801613e:	f04f 0900 	mov.w	r9, #0
 8016142:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8016144:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8016148:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801614a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801614e:	960e      	str	r6, [sp, #56]	@ 0x38
 8016150:	2f00      	cmp	r7, #0
 8016152:	d146      	bne.n	80161e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016154:	449c      	add	ip, r3
 8016156:	1ad7      	subs	r7, r2, r3
 8016158:	f1b9 0f00 	cmp.w	r9, #0
 801615c:	d009      	beq.n	8016172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801615e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8016162:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8016166:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801616a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801616e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8016170:	913d      	str	r1, [sp, #244]	@ 0xf4
 8016172:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8016176:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801617a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801617e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8016182:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8016186:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801618a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801618e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8016192:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8016196:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801619a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801619e:	f04f 0800 	mov.w	r8, #0
 80161a2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80161a4:	910e      	str	r1, [sp, #56]	@ 0x38
 80161a6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80161aa:	f1be 0f00 	cmp.w	lr, #0
 80161ae:	d030      	beq.n	8016212 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80161b0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80161b2:	4450      	add	r0, sl
 80161b4:	4431      	add	r1, r6
 80161b6:	4549      	cmp	r1, r9
 80161b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80161bc:	ee37 7a04 	vadd.f32	s14, s14, s8
 80161c0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80161c4:	db08      	blt.n	80161d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80161c6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80161ca:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80161ce:	ee37 7a06 	vadd.f32	s14, s14, s12
 80161d2:	3001      	adds	r0, #1
 80161d4:	eba1 0109 	sub.w	r1, r1, r9
 80161d8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80161dc:	f04f 0801 	mov.w	r8, #1
 80161e0:	e7e3      	b.n	80161aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80161e2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80161e4:	4450      	add	r0, sl
 80161e6:	4431      	add	r1, r6
 80161e8:	4541      	cmp	r1, r8
 80161ea:	ee37 7a24 	vadd.f32	s14, s14, s9
 80161ee:	ee77 7a84 	vadd.f32	s15, s15, s8
 80161f2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80161f6:	db08      	blt.n	801620a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80161f8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80161fc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016200:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016204:	3001      	adds	r0, #1
 8016206:	eba1 0108 	sub.w	r1, r1, r8
 801620a:	3f01      	subs	r7, #1
 801620c:	f04f 0901 	mov.w	r9, #1
 8016210:	e79e      	b.n	8016150 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016212:	449c      	add	ip, r3
 8016214:	1aff      	subs	r7, r7, r3
 8016216:	f1b8 0f00 	cmp.w	r8, #0
 801621a:	d009      	beq.n	8016230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801621c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8016220:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8016224:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8016228:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801622c:	9019      	str	r0, [sp, #100]	@ 0x64
 801622e:	911d      	str	r1, [sp, #116]	@ 0x74
 8016230:	1ad2      	subs	r2, r2, r3
 8016232:	e6b5      	b.n	8015fa0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	b923      	cbnz	r3, 8016244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801623a:	4b04      	ldr	r3, [pc, #16]	@ (801624c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801623c:	6818      	ldr	r0, [r3, #0]
 801623e:	6803      	ldr	r3, [r0, #0]
 8016240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016242:	4798      	blx	r3
 8016244:	b05b      	add	sp, #364	@ 0x16c
 8016246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801624a:	bf00      	nop
 801624c:	2015a078 	.word	0x2015a078

08016250 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016250:	2b03      	cmp	r3, #3
 8016252:	d818      	bhi.n	8016286 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016254:	e8df f003 	tbb	[pc, r3]
 8016258:	130d0602 	.word	0x130d0602
 801625c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016260:	1850      	adds	r0, r2, r1
 8016262:	4770      	bx	lr
 8016264:	8803      	ldrh	r3, [r0, #0]
 8016266:	8880      	ldrh	r0, [r0, #4]
 8016268:	4418      	add	r0, r3
 801626a:	b200      	sxth	r0, r0
 801626c:	1a80      	subs	r0, r0, r2
 801626e:	3801      	subs	r0, #1
 8016270:	4770      	bx	lr
 8016272:	8803      	ldrh	r3, [r0, #0]
 8016274:	8880      	ldrh	r0, [r0, #4]
 8016276:	4418      	add	r0, r3
 8016278:	b200      	sxth	r0, r0
 801627a:	1a40      	subs	r0, r0, r1
 801627c:	e7f7      	b.n	801626e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801627e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016282:	4410      	add	r0, r2
 8016284:	4770      	bx	lr
 8016286:	2000      	movs	r0, #0
 8016288:	4770      	bx	lr

0801628a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801628a:	2b03      	cmp	r3, #3
 801628c:	d817      	bhi.n	80162be <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801628e:	e8df f003 	tbb	[pc, r3]
 8016292:	0602      	.short	0x0602
 8016294:	1009      	.short	0x1009
 8016296:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801629a:	1850      	adds	r0, r2, r1
 801629c:	4770      	bx	lr
 801629e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80162a2:	e7fa      	b.n	801629a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80162a4:	8843      	ldrh	r3, [r0, #2]
 80162a6:	88c0      	ldrh	r0, [r0, #6]
 80162a8:	4418      	add	r0, r3
 80162aa:	b200      	sxth	r0, r0
 80162ac:	1a80      	subs	r0, r0, r2
 80162ae:	3801      	subs	r0, #1
 80162b0:	4770      	bx	lr
 80162b2:	8843      	ldrh	r3, [r0, #2]
 80162b4:	88c0      	ldrh	r0, [r0, #6]
 80162b6:	4418      	add	r0, r3
 80162b8:	b200      	sxth	r0, r0
 80162ba:	1a40      	subs	r0, r0, r1
 80162bc:	e7f7      	b.n	80162ae <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80162be:	2000      	movs	r0, #0
 80162c0:	4770      	bx	lr
	...

080162c4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80162c4:	2200      	movs	r2, #0
 80162c6:	4b01      	ldr	r3, [pc, #4]	@ (80162cc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80162c8:	601a      	str	r2, [r3, #0]
 80162ca:	4770      	bx	lr
 80162cc:	2015a080 	.word	0x2015a080

080162d0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80162d0:	4603      	mov	r3, r0
 80162d2:	b1c8      	cbz	r0, 8016308 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80162d4:	0c02      	lsrs	r2, r0, #16
 80162d6:	0412      	lsls	r2, r2, #16
 80162d8:	b9a2      	cbnz	r2, 8016304 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80162da:	0403      	lsls	r3, r0, #16
 80162dc:	2010      	movs	r0, #16
 80162de:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80162e2:	bf04      	itt	eq
 80162e4:	021b      	lsleq	r3, r3, #8
 80162e6:	3008      	addeq	r0, #8
 80162e8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80162ec:	bf04      	itt	eq
 80162ee:	011b      	lsleq	r3, r3, #4
 80162f0:	3004      	addeq	r0, #4
 80162f2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80162f6:	bf04      	itt	eq
 80162f8:	009b      	lsleq	r3, r3, #2
 80162fa:	3002      	addeq	r0, #2
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	db04      	blt.n	801630a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016300:	3001      	adds	r0, #1
 8016302:	4770      	bx	lr
 8016304:	2000      	movs	r0, #0
 8016306:	e7ea      	b.n	80162de <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016308:	2020      	movs	r0, #32
 801630a:	4770      	bx	lr

0801630c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016310:	b087      	sub	sp, #28
 8016312:	460d      	mov	r5, r1
 8016314:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8016318:	4616      	mov	r6, r2
 801631a:	4698      	mov	r8, r3
 801631c:	4601      	mov	r1, r0
 801631e:	b120      	cbz	r0, 801632a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016320:	b11a      	cbz	r2, 801632a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016322:	2d1f      	cmp	r5, #31
 8016324:	d801      	bhi.n	801632a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8016326:	2b1f      	cmp	r3, #31
 8016328:	d904      	bls.n	8016334 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801632a:	2000      	movs	r0, #0
 801632c:	6038      	str	r0, [r7, #0]
 801632e:	b007      	add	sp, #28
 8016330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016334:	b97d      	cbnz	r5, 8016356 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8016336:	b143      	cbz	r3, 801634a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8016338:	4602      	mov	r2, r0
 801633a:	e9cd 4700 	strd	r4, r7, [sp]
 801633e:	462b      	mov	r3, r5
 8016340:	4641      	mov	r1, r8
 8016342:	4630      	mov	r0, r6
 8016344:	f7ff ffe2 	bl	801630c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016348:	e7f1      	b.n	801632e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801634a:	f04f 33ff 	mov.w	r3, #4294967295
 801634e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016352:	603b      	str	r3, [r7, #0]
 8016354:	e7eb      	b.n	801632e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8016356:	fa32 fa05 	lsrs.w	sl, r2, r5
 801635a:	d106      	bne.n	801636a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801635c:	4346      	muls	r6, r0
 801635e:	fbb6 f0f4 	udiv	r0, r6, r4
 8016362:	fb04 6610 	mls	r6, r4, r0, r6
 8016366:	603e      	str	r6, [r7, #0]
 8016368:	e7e1      	b.n	801632e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801636a:	fa00 fb05 	lsl.w	fp, r0, r5
 801636e:	fbbb f9f4 	udiv	r9, fp, r4
 8016372:	2201      	movs	r2, #1
 8016374:	fb0a f309 	mul.w	r3, sl, r9
 8016378:	40aa      	lsls	r2, r5
 801637a:	3a01      	subs	r2, #1
 801637c:	4016      	ands	r6, r2
 801637e:	4630      	mov	r0, r6
 8016380:	9303      	str	r3, [sp, #12]
 8016382:	f7ff ffa5 	bl	80162d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016386:	462b      	mov	r3, r5
 8016388:	460a      	mov	r2, r1
 801638a:	e9cd 4700 	strd	r4, r7, [sp]
 801638e:	4601      	mov	r1, r0
 8016390:	4630      	mov	r0, r6
 8016392:	f7ff ffbb 	bl	801630c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016396:	fb04 b919 	mls	r9, r4, r9, fp
 801639a:	4606      	mov	r6, r0
 801639c:	4648      	mov	r0, r9
 801639e:	eb05 0108 	add.w	r1, r5, r8
 80163a2:	f7ff ff95 	bl	80162d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80163a6:	ab05      	add	r3, sp, #20
 80163a8:	e9cd 4300 	strd	r4, r3, [sp]
 80163ac:	464a      	mov	r2, r9
 80163ae:	4603      	mov	r3, r0
 80163b0:	4650      	mov	r0, sl
 80163b2:	f7ff ffab 	bl	801630c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80163b6:	6839      	ldr	r1, [r7, #0]
 80163b8:	9a05      	ldr	r2, [sp, #20]
 80163ba:	9b03      	ldr	r3, [sp, #12]
 80163bc:	4411      	add	r1, r2
 80163be:	fbb1 f2f4 	udiv	r2, r1, r4
 80163c2:	fb04 1412 	mls	r4, r4, r2, r1
 80163c6:	18d3      	adds	r3, r2, r3
 80163c8:	441e      	add	r6, r3
 80163ca:	4430      	add	r0, r6
 80163cc:	603c      	str	r4, [r7, #0]
 80163ce:	e7ae      	b.n	801632e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080163d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80163d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163d4:	b085      	sub	sp, #20
 80163d6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80163d8:	f1b0 0900 	subs.w	r9, r0, #0
 80163dc:	461d      	mov	r5, r3
 80163de:	bfbf      	itttt	lt
 80163e0:	6823      	ldrlt	r3, [r4, #0]
 80163e2:	f1c9 0900 	rsblt	r9, r9, #0
 80163e6:	425b      	neglt	r3, r3
 80163e8:	6023      	strlt	r3, [r4, #0]
 80163ea:	bfb4      	ite	lt
 80163ec:	f04f 36ff 	movlt.w	r6, #4294967295
 80163f0:	2601      	movge	r6, #1
 80163f2:	2a00      	cmp	r2, #0
 80163f4:	4617      	mov	r7, r2
 80163f6:	da04      	bge.n	8016402 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80163f8:	6823      	ldr	r3, [r4, #0]
 80163fa:	4257      	negs	r7, r2
 80163fc:	425b      	negs	r3, r3
 80163fe:	4276      	negs	r6, r6
 8016400:	6023      	str	r3, [r4, #0]
 8016402:	2d00      	cmp	r5, #0
 8016404:	4638      	mov	r0, r7
 8016406:	bfba      	itte	lt
 8016408:	426d      	neglt	r5, r5
 801640a:	f04f 38ff 	movlt.w	r8, #4294967295
 801640e:	f04f 0801 	movge.w	r8, #1
 8016412:	f7ff ff5d 	bl	80162d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016416:	ab03      	add	r3, sp, #12
 8016418:	e9cd 5300 	strd	r5, r3, [sp]
 801641c:	463a      	mov	r2, r7
 801641e:	4603      	mov	r3, r0
 8016420:	4648      	mov	r0, r9
 8016422:	f7ff ff73 	bl	801630c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016426:	6823      	ldr	r3, [r4, #0]
 8016428:	9a03      	ldr	r2, [sp, #12]
 801642a:	4546      	cmp	r6, r8
 801642c:	441a      	add	r2, r3
 801642e:	fb92 f3f5 	sdiv	r3, r2, r5
 8016432:	4418      	add	r0, r3
 8016434:	fb05 2313 	mls	r3, r5, r3, r2
 8016438:	bf18      	it	ne
 801643a:	4240      	negne	r0, r0
 801643c:	1c72      	adds	r2, r6, #1
 801643e:	6023      	str	r3, [r4, #0]
 8016440:	d105      	bne.n	801644e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016442:	2b00      	cmp	r3, #0
 8016444:	f1c3 0200 	rsb	r2, r3, #0
 8016448:	db0b      	blt.n	8016462 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801644a:	6022      	str	r2, [r4, #0]
 801644c:	e006      	b.n	801645c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801644e:	2e01      	cmp	r6, #1
 8016450:	d104      	bne.n	801645c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016452:	2b00      	cmp	r3, #0
 8016454:	da02      	bge.n	801645c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016456:	442b      	add	r3, r5
 8016458:	3801      	subs	r0, #1
 801645a:	6023      	str	r3, [r4, #0]
 801645c:	b005      	add	sp, #20
 801645e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016462:	3801      	subs	r0, #1
 8016464:	1b52      	subs	r2, r2, r5
 8016466:	e7f0      	b.n	801644a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08016468 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016468:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801646c:	4c1c      	ldr	r4, [pc, #112]	@ (80164e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801646e:	4605      	mov	r5, r0
 8016470:	69a3      	ldr	r3, [r4, #24]
 8016472:	6807      	ldr	r7, [r0, #0]
 8016474:	b92b      	cbnz	r3, 8016482 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016476:	6840      	ldr	r0, [r0, #4]
 8016478:	e9c5 7000 	strd	r7, r0, [r5]
 801647c:	b004      	add	sp, #16
 801647e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016482:	f04f 0802 	mov.w	r8, #2
 8016486:	fb93 f1f8 	sdiv	r1, r3, r8
 801648a:	68a2      	ldr	r2, [r4, #8]
 801648c:	ae04      	add	r6, sp, #16
 801648e:	440a      	add	r2, r1
 8016490:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016494:	69e1      	ldr	r1, [r4, #28]
 8016496:	463a      	mov	r2, r7
 8016498:	9600      	str	r6, [sp, #0]
 801649a:	6820      	ldr	r0, [r4, #0]
 801649c:	f7ff ff98 	bl	80163d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80164a0:	69a3      	ldr	r3, [r4, #24]
 80164a2:	4607      	mov	r7, r0
 80164a4:	686a      	ldr	r2, [r5, #4]
 80164a6:	6a21      	ldr	r1, [r4, #32]
 80164a8:	9600      	str	r6, [sp, #0]
 80164aa:	6860      	ldr	r0, [r4, #4]
 80164ac:	f7ff ff90 	bl	80163d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80164b0:	69a3      	ldr	r3, [r4, #24]
 80164b2:	6962      	ldr	r2, [r4, #20]
 80164b4:	fb93 f8f8 	sdiv	r8, r3, r8
 80164b8:	4442      	add	r2, r8
 80164ba:	9203      	str	r2, [sp, #12]
 80164bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80164be:	682a      	ldr	r2, [r5, #0]
 80164c0:	4407      	add	r7, r0
 80164c2:	9600      	str	r6, [sp, #0]
 80164c4:	68e0      	ldr	r0, [r4, #12]
 80164c6:	f7ff ff83 	bl	80163d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80164ca:	9600      	str	r6, [sp, #0]
 80164cc:	4680      	mov	r8, r0
 80164ce:	69a3      	ldr	r3, [r4, #24]
 80164d0:	686a      	ldr	r2, [r5, #4]
 80164d2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80164d4:	6920      	ldr	r0, [r4, #16]
 80164d6:	f7ff ff7b 	bl	80163d0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80164da:	4440      	add	r0, r8
 80164dc:	e7cc      	b.n	8016478 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80164de:	bf00      	nop
 80164e0:	2015a084 	.word	0x2015a084

080164e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80164e4:	4b07      	ldr	r3, [pc, #28]	@ (8016504 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80164e6:	781b      	ldrb	r3, [r3, #0]
 80164e8:	2b01      	cmp	r3, #1
 80164ea:	d109      	bne.n	8016500 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80164ec:	f9b1 3000 	ldrsh.w	r3, [r1]
 80164f0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80164f4:	8003      	strh	r3, [r0, #0]
 80164f6:	4b04      	ldr	r3, [pc, #16]	@ (8016508 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80164f8:	881b      	ldrh	r3, [r3, #0]
 80164fa:	3b01      	subs	r3, #1
 80164fc:	1a9b      	subs	r3, r3, r2
 80164fe:	800b      	strh	r3, [r1, #0]
 8016500:	4770      	bx	lr
 8016502:	bf00      	nop
 8016504:	2015a070 	.word	0x2015a070
 8016508:	2015a06c 	.word	0x2015a06c

0801650c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801650c:	b510      	push	{r4, lr}
 801650e:	4b07      	ldr	r3, [pc, #28]	@ (801652c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	2b01      	cmp	r3, #1
 8016514:	d108      	bne.n	8016528 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016516:	4b06      	ldr	r3, [pc, #24]	@ (8016530 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016518:	880c      	ldrh	r4, [r1, #0]
 801651a:	881b      	ldrh	r3, [r3, #0]
 801651c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016520:	3b01      	subs	r3, #1
 8016522:	1b1b      	subs	r3, r3, r4
 8016524:	8003      	strh	r3, [r0, #0]
 8016526:	800a      	strh	r2, [r1, #0]
 8016528:	bd10      	pop	{r4, pc}
 801652a:	bf00      	nop
 801652c:	2015a070 	.word	0x2015a070
 8016530:	2015a06c 	.word	0x2015a06c

08016534 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016534:	b510      	push	{r4, lr}
 8016536:	4b0a      	ldr	r3, [pc, #40]	@ (8016560 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2b01      	cmp	r3, #1
 801653c:	d10e      	bne.n	801655c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801653e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016542:	8843      	ldrh	r3, [r0, #2]
 8016544:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016548:	18ca      	adds	r2, r1, r3
 801654a:	4b06      	ldr	r3, [pc, #24]	@ (8016564 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801654c:	8044      	strh	r4, [r0, #2]
 801654e:	881b      	ldrh	r3, [r3, #0]
 8016550:	1a9b      	subs	r3, r3, r2
 8016552:	8003      	strh	r3, [r0, #0]
 8016554:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016558:	8081      	strh	r1, [r0, #4]
 801655a:	80c3      	strh	r3, [r0, #6]
 801655c:	bd10      	pop	{r4, pc}
 801655e:	bf00      	nop
 8016560:	2015a070 	.word	0x2015a070
 8016564:	2015a06c 	.word	0x2015a06c

08016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016568:	4b08      	ldr	r3, [pc, #32]	@ (801658c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	2b01      	cmp	r3, #1
 801656e:	d10c      	bne.n	801658a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016570:	8803      	ldrh	r3, [r0, #0]
 8016572:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016576:	8842      	ldrh	r2, [r0, #2]
 8016578:	8002      	strh	r2, [r0, #0]
 801657a:	185a      	adds	r2, r3, r1
 801657c:	4b04      	ldr	r3, [pc, #16]	@ (8016590 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801657e:	881b      	ldrh	r3, [r3, #0]
 8016580:	1a9b      	subs	r3, r3, r2
 8016582:	8043      	strh	r3, [r0, #2]
 8016584:	88c3      	ldrh	r3, [r0, #6]
 8016586:	80c1      	strh	r1, [r0, #6]
 8016588:	8083      	strh	r3, [r0, #4]
 801658a:	4770      	bx	lr
 801658c:	2015a070 	.word	0x2015a070
 8016590:	2015a06c 	.word	0x2015a06c

08016594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016594:	b510      	push	{r4, lr}
 8016596:	4b07      	ldr	r3, [pc, #28]	@ (80165b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	2b01      	cmp	r3, #1
 801659c:	d108      	bne.n	80165b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801659e:	f9b1 3000 	ldrsh.w	r3, [r1]
 80165a2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80165a6:	8003      	strh	r3, [r0, #0]
 80165a8:	8893      	ldrh	r3, [r2, #4]
 80165aa:	3b01      	subs	r3, #1
 80165ac:	1b1b      	subs	r3, r3, r4
 80165ae:	800b      	strh	r3, [r1, #0]
 80165b0:	bd10      	pop	{r4, pc}
 80165b2:	bf00      	nop
 80165b4:	2015a070 	.word	0x2015a070

080165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80165b8:	b510      	push	{r4, lr}
 80165ba:	4b0a      	ldr	r3, [pc, #40]	@ (80165e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80165bc:	460a      	mov	r2, r1
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	2b01      	cmp	r3, #1
 80165c2:	d10d      	bne.n	80165e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80165c4:	8881      	ldrh	r1, [r0, #4]
 80165c6:	8803      	ldrh	r3, [r0, #0]
 80165c8:	440b      	add	r3, r1
 80165ca:	4601      	mov	r1, r0
 80165cc:	3b01      	subs	r3, #1
 80165ce:	f821 3b02 	strh.w	r3, [r1], #2
 80165d2:	f7ff ffdf 	bl	8016594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80165d6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80165da:	88c2      	ldrh	r2, [r0, #6]
 80165dc:	80c3      	strh	r3, [r0, #6]
 80165de:	8082      	strh	r2, [r0, #4]
 80165e0:	bd10      	pop	{r4, pc}
 80165e2:	bf00      	nop
 80165e4:	2015a070 	.word	0x2015a070

080165e8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80165e8:	2100      	movs	r1, #0
 80165ea:	4b06      	ldr	r3, [pc, #24]	@ (8016604 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80165ec:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80165f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80165f4:	4b04      	ldr	r3, [pc, #16]	@ (8016608 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80165f6:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80165fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165fe:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8016602:	4770      	bx	lr
 8016604:	2015a06c 	.word	0x2015a06c
 8016608:	2015a06e 	.word	0x2015a06e

0801660c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801660c:	4b03      	ldr	r3, [pc, #12]	@ (801661c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801660e:	6818      	ldr	r0, [r3, #0]
 8016610:	b110      	cbz	r0, 8016618 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016612:	6803      	ldr	r3, [r0, #0]
 8016614:	699b      	ldr	r3, [r3, #24]
 8016616:	4718      	bx	r3
 8016618:	4770      	bx	lr
 801661a:	bf00      	nop
 801661c:	2015a0b4 	.word	0x2015a0b4

08016620 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016620:	4770      	bx	lr
	...

08016624 <_ZN8touchgfx11Application4drawEv>:
 8016624:	b507      	push	{r0, r1, r2, lr}
 8016626:	2100      	movs	r1, #0
 8016628:	4b08      	ldr	r3, [pc, #32]	@ (801664c <_ZN8touchgfx11Application4drawEv+0x28>)
 801662a:	9100      	str	r1, [sp, #0]
 801662c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016630:	4b07      	ldr	r3, [pc, #28]	@ (8016650 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016632:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016636:	f9b3 3000 	ldrsh.w	r3, [r3]
 801663a:	4669      	mov	r1, sp
 801663c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016640:	6803      	ldr	r3, [r0, #0]
 8016642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016644:	4798      	blx	r3
 8016646:	b003      	add	sp, #12
 8016648:	f85d fb04 	ldr.w	pc, [sp], #4
 801664c:	2015a06c 	.word	0x2015a06c
 8016650:	2015a06e 	.word	0x2015a06e

08016654 <_ZN8touchgfx11Application10invalidateEv>:
 8016654:	2100      	movs	r1, #0
 8016656:	4b09      	ldr	r3, [pc, #36]	@ (801667c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016658:	b082      	sub	sp, #8
 801665a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801665e:	4b08      	ldr	r3, [pc, #32]	@ (8016680 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016660:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016668:	9100      	str	r1, [sp, #0]
 801666a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801666e:	6803      	ldr	r3, [r0, #0]
 8016670:	aa02      	add	r2, sp, #8
 8016672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016674:	e912 0006 	ldmdb	r2, {r1, r2}
 8016678:	b002      	add	sp, #8
 801667a:	4718      	bx	r3
 801667c:	2015a06c 	.word	0x2015a06c
 8016680:	2015a06e 	.word	0x2015a06e

08016684 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016684:	4b03      	ldr	r3, [pc, #12]	@ (8016694 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016686:	6818      	ldr	r0, [r3, #0]
 8016688:	b110      	cbz	r0, 8016690 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801668a:	6803      	ldr	r3, [r0, #0]
 801668c:	69db      	ldr	r3, [r3, #28]
 801668e:	4718      	bx	r3
 8016690:	4770      	bx	lr
 8016692:	bf00      	nop
 8016694:	2015a0b4 	.word	0x2015a0b4

08016698 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016698:	4b03      	ldr	r3, [pc, #12]	@ (80166a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801669a:	6818      	ldr	r0, [r3, #0]
 801669c:	b110      	cbz	r0, 80166a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801669e:	6803      	ldr	r3, [r0, #0]
 80166a0:	6a1b      	ldr	r3, [r3, #32]
 80166a2:	4718      	bx	r3
 80166a4:	4770      	bx	lr
 80166a6:	bf00      	nop
 80166a8:	2015a0b4 	.word	0x2015a0b4

080166ac <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80166ac:	2300      	movs	r3, #0
 80166ae:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80166b2:	4770      	bx	lr

080166b4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80166b4:	4b03      	ldr	r3, [pc, #12]	@ (80166c4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80166b6:	6818      	ldr	r0, [r3, #0]
 80166b8:	b110      	cbz	r0, 80166c0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80166ba:	6803      	ldr	r3, [r0, #0]
 80166bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166be:	4718      	bx	r3
 80166c0:	4770      	bx	lr
 80166c2:	bf00      	nop
 80166c4:	2015a0b4 	.word	0x2015a0b4

080166c8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80166c8:	b510      	push	{r4, lr}
 80166ca:	f9b1 4000 	ldrsh.w	r4, [r1]
 80166ce:	888a      	ldrh	r2, [r1, #4]
 80166d0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80166d4:	4422      	add	r2, r4
 80166d6:	b212      	sxth	r2, r2
 80166d8:	4293      	cmp	r3, r2
 80166da:	da15      	bge.n	8016708 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80166dc:	8882      	ldrh	r2, [r0, #4]
 80166de:	4413      	add	r3, r2
 80166e0:	b21b      	sxth	r3, r3
 80166e2:	429c      	cmp	r4, r3
 80166e4:	da10      	bge.n	8016708 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80166e6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80166ea:	88c9      	ldrh	r1, [r1, #6]
 80166ec:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80166f0:	4419      	add	r1, r3
 80166f2:	b209      	sxth	r1, r1
 80166f4:	428a      	cmp	r2, r1
 80166f6:	da07      	bge.n	8016708 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80166f8:	88c0      	ldrh	r0, [r0, #6]
 80166fa:	4410      	add	r0, r2
 80166fc:	b200      	sxth	r0, r0
 80166fe:	4283      	cmp	r3, r0
 8016700:	bfac      	ite	ge
 8016702:	2000      	movge	r0, #0
 8016704:	2001      	movlt	r0, #1
 8016706:	bd10      	pop	{r4, pc}
 8016708:	2000      	movs	r0, #0
 801670a:	e7fc      	b.n	8016706 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801670c <_ZN8touchgfx4Rect10restrictToEss>:
 801670c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016710:	b510      	push	{r4, lr}
 8016712:	2b00      	cmp	r3, #0
 8016714:	da04      	bge.n	8016720 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016716:	8884      	ldrh	r4, [r0, #4]
 8016718:	4423      	add	r3, r4
 801671a:	8083      	strh	r3, [r0, #4]
 801671c:	2300      	movs	r3, #0
 801671e:	8003      	strh	r3, [r0, #0]
 8016720:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016724:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016728:	1b09      	subs	r1, r1, r4
 801672a:	428b      	cmp	r3, r1
 801672c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016730:	bfc8      	it	gt
 8016732:	8081      	strhgt	r1, [r0, #4]
 8016734:	2b00      	cmp	r3, #0
 8016736:	da04      	bge.n	8016742 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016738:	88c1      	ldrh	r1, [r0, #6]
 801673a:	440b      	add	r3, r1
 801673c:	80c3      	strh	r3, [r0, #6]
 801673e:	2300      	movs	r3, #0
 8016740:	8043      	strh	r3, [r0, #2]
 8016742:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016746:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801674a:	1a52      	subs	r2, r2, r1
 801674c:	4293      	cmp	r3, r2
 801674e:	bfc8      	it	gt
 8016750:	80c2      	strhgt	r2, [r0, #6]
 8016752:	bd10      	pop	{r4, pc}

08016754 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016754:	b510      	push	{r4, lr}
 8016756:	460c      	mov	r4, r1
 8016758:	4b0f      	ldr	r3, [pc, #60]	@ (8016798 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801675a:	4620      	mov	r0, r4
 801675c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016760:	4b0e      	ldr	r3, [pc, #56]	@ (801679c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016762:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016766:	f7ff ffd1 	bl	801670c <_ZN8touchgfx4Rect10restrictToEss>
 801676a:	4b0d      	ldr	r3, [pc, #52]	@ (80167a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801676c:	6818      	ldr	r0, [r3, #0]
 801676e:	b190      	cbz	r0, 8016796 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016770:	6803      	ldr	r3, [r0, #0]
 8016772:	4621      	mov	r1, r4
 8016774:	689b      	ldr	r3, [r3, #8]
 8016776:	4798      	blx	r3
 8016778:	4b0a      	ldr	r3, [pc, #40]	@ (80167a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801677a:	6818      	ldr	r0, [r3, #0]
 801677c:	b118      	cbz	r0, 8016786 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801677e:	6803      	ldr	r3, [r0, #0]
 8016780:	4621      	mov	r1, r4
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	4798      	blx	r3
 8016786:	4b08      	ldr	r3, [pc, #32]	@ (80167a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016788:	4621      	mov	r1, r4
 801678a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801678e:	6818      	ldr	r0, [r3, #0]
 8016790:	6803      	ldr	r3, [r0, #0]
 8016792:	69db      	ldr	r3, [r3, #28]
 8016794:	4718      	bx	r3
 8016796:	bd10      	pop	{r4, pc}
 8016798:	2015a06e 	.word	0x2015a06e
 801679c:	2015a06c 	.word	0x2015a06c
 80167a0:	2015a0b4 	.word	0x2015a0b4
 80167a4:	2015a0b0 	.word	0x2015a0b0
 80167a8:	2015a078 	.word	0x2015a078

080167ac <_ZNK8touchgfx4Rect8includesERKS0_>:
 80167ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ae:	4606      	mov	r6, r0
 80167b0:	4608      	mov	r0, r1
 80167b2:	460f      	mov	r7, r1
 80167b4:	f7fe f837 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 80167b8:	b9e8      	cbnz	r0, 80167f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80167ba:	f9b7 5000 	ldrsh.w	r5, [r7]
 80167be:	f9b6 4000 	ldrsh.w	r4, [r6]
 80167c2:	42a5      	cmp	r5, r4
 80167c4:	db17      	blt.n	80167f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80167c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80167ca:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	db11      	blt.n	80167f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80167d2:	88b9      	ldrh	r1, [r7, #4]
 80167d4:	440d      	add	r5, r1
 80167d6:	88b1      	ldrh	r1, [r6, #4]
 80167d8:	b22d      	sxth	r5, r5
 80167da:	440c      	add	r4, r1
 80167dc:	b224      	sxth	r4, r4
 80167de:	42a5      	cmp	r5, r4
 80167e0:	dc09      	bgt.n	80167f6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80167e2:	88f8      	ldrh	r0, [r7, #6]
 80167e4:	4410      	add	r0, r2
 80167e6:	88f2      	ldrh	r2, [r6, #6]
 80167e8:	b200      	sxth	r0, r0
 80167ea:	4413      	add	r3, r2
 80167ec:	b21b      	sxth	r3, r3
 80167ee:	4298      	cmp	r0, r3
 80167f0:	bfcc      	ite	gt
 80167f2:	2000      	movgt	r0, #0
 80167f4:	2001      	movle	r0, #1
 80167f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080167f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80167f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167fa:	4604      	mov	r4, r0
 80167fc:	4608      	mov	r0, r1
 80167fe:	460d      	mov	r5, r1
 8016800:	f7fe f811 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016804:	b978      	cbnz	r0, 8016826 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016806:	4620      	mov	r0, r4
 8016808:	f7fe f80d 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 801680c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016810:	b150      	cbz	r0, 8016828 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016812:	8026      	strh	r6, [r4, #0]
 8016814:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016818:	8063      	strh	r3, [r4, #2]
 801681a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801681e:	80a3      	strh	r3, [r4, #4]
 8016820:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016824:	80e3      	strh	r3, [r4, #6]
 8016826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016828:	f9b4 1000 	ldrsh.w	r1, [r4]
 801682c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016830:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016834:	42b1      	cmp	r1, r6
 8016836:	460f      	mov	r7, r1
 8016838:	bfa8      	it	ge
 801683a:	4637      	movge	r7, r6
 801683c:	4293      	cmp	r3, r2
 801683e:	4618      	mov	r0, r3
 8016840:	bfa8      	it	ge
 8016842:	4610      	movge	r0, r2
 8016844:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016848:	88ed      	ldrh	r5, [r5, #6]
 801684a:	4466      	add	r6, ip
 801684c:	442a      	add	r2, r5
 801684e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016852:	88e5      	ldrh	r5, [r4, #6]
 8016854:	4461      	add	r1, ip
 8016856:	442b      	add	r3, r5
 8016858:	b236      	sxth	r6, r6
 801685a:	b209      	sxth	r1, r1
 801685c:	b212      	sxth	r2, r2
 801685e:	b21b      	sxth	r3, r3
 8016860:	428e      	cmp	r6, r1
 8016862:	bfac      	ite	ge
 8016864:	ebc7 0106 	rsbge	r1, r7, r6
 8016868:	ebc7 0101 	rsblt	r1, r7, r1
 801686c:	429a      	cmp	r2, r3
 801686e:	bfac      	ite	ge
 8016870:	ebc0 0202 	rsbge	r2, r0, r2
 8016874:	ebc0 0203 	rsblt	r2, r0, r3
 8016878:	8027      	strh	r7, [r4, #0]
 801687a:	8060      	strh	r0, [r4, #2]
 801687c:	80a1      	strh	r1, [r4, #4]
 801687e:	80e2      	strh	r2, [r4, #6]
 8016880:	e7d1      	b.n	8016826 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016884 <_ZN8touchgfx11Application11getInstanceEv>:
 8016884:	4b01      	ldr	r3, [pc, #4]	@ (801688c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016886:	6818      	ldr	r0, [r3, #0]
 8016888:	4770      	bx	lr
 801688a:	bf00      	nop
 801688c:	2015a0c4 	.word	0x2015a0c4

08016890 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016890:	2300      	movs	r3, #0
 8016892:	b510      	push	{r4, lr}
 8016894:	4604      	mov	r4, r0
 8016896:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801689a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801689e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80168a2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80168a6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d90e      	bls.n	80168cc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80168ae:	18e2      	adds	r2, r4, r3
 80168b0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80168b4:	b122      	cbz	r2, 80168c0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80168b6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80168ba:	6803      	ldr	r3, [r0, #0]
 80168bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80168be:	4798      	blx	r3
 80168c0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80168c4:	3301      	adds	r3, #1
 80168c6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80168ca:	e7ea      	b.n	80168a2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80168cc:	bd10      	pop	{r4, pc}

080168ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80168ce:	2300      	movs	r3, #0
 80168d0:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80168d4:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80168d8:	30a4      	adds	r0, #164	@ 0xa4
 80168da:	f802 3b01 	strb.w	r3, [r2], #1
 80168de:	4282      	cmp	r2, r0
 80168e0:	d1fb      	bne.n	80168da <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80168e2:	4770      	bx	lr

080168e4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80168e4:	b570      	push	{r4, r5, r6, lr}
 80168e6:	4c0b      	ldr	r4, [pc, #44]	@ (8016914 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80168e8:	4605      	mov	r5, r0
 80168ea:	6820      	ldr	r0, [r4, #0]
 80168ec:	460e      	mov	r6, r1
 80168ee:	b110      	cbz	r0, 80168f6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80168f0:	6803      	ldr	r3, [r0, #0]
 80168f2:	695b      	ldr	r3, [r3, #20]
 80168f4:	4798      	blx	r3
 80168f6:	1d28      	adds	r0, r5, #4
 80168f8:	f7ff ffe9 	bl	80168ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80168fc:	6026      	str	r6, [r4, #0]
 80168fe:	6833      	ldr	r3, [r6, #0]
 8016900:	4630      	mov	r0, r6
 8016902:	68db      	ldr	r3, [r3, #12]
 8016904:	4798      	blx	r3
 8016906:	682b      	ldr	r3, [r5, #0]
 8016908:	4628      	mov	r0, r5
 801690a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801690e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016910:	4718      	bx	r3
 8016912:	bf00      	nop
 8016914:	2015a0b4 	.word	0x2015a0b4

08016918 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016918:	2300      	movs	r3, #0
 801691a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801691c:	461a      	mov	r2, r3
 801691e:	461c      	mov	r4, r3
 8016920:	461d      	mov	r5, r3
 8016922:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8016926:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801692a:	459c      	cmp	ip, r3
 801692c:	dd1a      	ble.n	8016964 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801692e:	18c6      	adds	r6, r0, r3
 8016930:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8016934:	b16e      	cbz	r6, 8016952 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8016936:	429a      	cmp	r2, r3
 8016938:	d008      	beq.n	801694c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801693a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801693e:	fa1f fe82 	uxth.w	lr, r2
 8016942:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8016946:	1887      	adds	r7, r0, r2
 8016948:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801694c:	3201      	adds	r2, #1
 801694e:	3301      	adds	r3, #1
 8016950:	e7eb      	b.n	801692a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8016952:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8016956:	4299      	cmp	r1, r3
 8016958:	bfa8      	it	ge
 801695a:	3501      	addge	r5, #1
 801695c:	429e      	cmp	r6, r3
 801695e:	bfc8      	it	gt
 8016960:	3401      	addgt	r4, #1
 8016962:	e7f4      	b.n	801694e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8016964:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8016968:	1b49      	subs	r1, r1, r5
 801696a:	1b1b      	subs	r3, r3, r4
 801696c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8016970:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016974:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016978:	4293      	cmp	r3, r2
 801697a:	dd03      	ble.n	8016984 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801697c:	3b01      	subs	r3, #1
 801697e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8016982:	e7f7      	b.n	8016974 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016984:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016988 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016988:	b570      	push	{r4, r5, r6, lr}
 801698a:	4d16      	ldr	r5, [pc, #88]	@ (80169e4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801698c:	4604      	mov	r4, r0
 801698e:	6828      	ldr	r0, [r5, #0]
 8016990:	b140      	cbz	r0, 80169a4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016992:	7a03      	ldrb	r3, [r0, #8]
 8016994:	b933      	cbnz	r3, 80169a4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016996:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801699a:	6803      	ldr	r3, [r0, #0]
 801699c:	689b      	ldr	r3, [r3, #8]
 801699e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169a2:	4718      	bx	r3
 80169a4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80169a8:	4e0f      	ldr	r6, [pc, #60]	@ (80169e8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80169aa:	b973      	cbnz	r3, 80169ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80169ac:	b168      	cbz	r0, 80169ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80169ae:	7a03      	ldrb	r3, [r0, #8]
 80169b0:	b15b      	cbz	r3, 80169ca <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80169b2:	6830      	ldr	r0, [r6, #0]
 80169b4:	b110      	cbz	r0, 80169bc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80169b6:	6803      	ldr	r3, [r0, #0]
 80169b8:	691b      	ldr	r3, [r3, #16]
 80169ba:	4798      	blx	r3
 80169bc:	6828      	ldr	r0, [r5, #0]
 80169be:	6803      	ldr	r3, [r0, #0]
 80169c0:	68db      	ldr	r3, [r3, #12]
 80169c2:	4798      	blx	r3
 80169c4:	2301      	movs	r3, #1
 80169c6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80169ca:	3404      	adds	r4, #4
 80169cc:	4620      	mov	r0, r4
 80169ce:	f7ff ff5f 	bl	8016890 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80169d2:	4620      	mov	r0, r4
 80169d4:	f7ff ffa0 	bl	8016918 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80169d8:	6830      	ldr	r0, [r6, #0]
 80169da:	b110      	cbz	r0, 80169e2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80169dc:	6803      	ldr	r3, [r0, #0]
 80169de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169e0:	e7dd      	b.n	801699e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80169e2:	bd70      	pop	{r4, r5, r6, pc}
 80169e4:	2015a0b8 	.word	0x2015a0b8
 80169e8:	2015a0b4 	.word	0x2015a0b4

080169ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80169ec:	4603      	mov	r3, r0
 80169ee:	2200      	movs	r2, #0
 80169f0:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80169f4:	801a      	strh	r2, [r3, #0]
 80169f6:	805a      	strh	r2, [r3, #2]
 80169f8:	809a      	strh	r2, [r3, #4]
 80169fa:	80da      	strh	r2, [r3, #6]
 80169fc:	3308      	adds	r3, #8
 80169fe:	428b      	cmp	r3, r1
 8016a00:	d1f8      	bne.n	80169f4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016a02:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016a06:	4770      	bx	lr

08016a08 <_ZN8touchgfx11ApplicationC1Ev>:
 8016a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a0a:	4606      	mov	r6, r0
 8016a0c:	4604      	mov	r4, r0
 8016a0e:	2500      	movs	r5, #0
 8016a10:	4b1b      	ldr	r3, [pc, #108]	@ (8016a80 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016a12:	22a8      	movs	r2, #168	@ 0xa8
 8016a14:	f846 3b04 	str.w	r3, [r6], #4
 8016a18:	2100      	movs	r1, #0
 8016a1a:	4630      	mov	r0, r6
 8016a1c:	f015 fad3 	bl	802bfc6 <memset>
 8016a20:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8016a24:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8016a28:	f7ff ffe0 	bl	80169ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016a2c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8016a30:	f7ff ffdc 	bl	80169ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016a34:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8016a38:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8016a3c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8016a40:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8016a44:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8016a48:	490e      	ldr	r1, [pc, #56]	@ (8016a84 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016a4a:	480f      	ldr	r0, [pc, #60]	@ (8016a88 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016a4c:	f002 fcb0 	bl	80193b0 <CRC_Lock>
 8016a50:	4f0e      	ldr	r7, [pc, #56]	@ (8016a8c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8016a52:	4b0f      	ldr	r3, [pc, #60]	@ (8016a90 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8016a54:	b158      	cbz	r0, 8016a6e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8016a56:	801d      	strh	r5, [r3, #0]
 8016a58:	2300      	movs	r3, #0
 8016a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8016a94 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8016a5c:	4630      	mov	r0, r6
 8016a5e:	6013      	str	r3, [r2, #0]
 8016a60:	4a0d      	ldr	r2, [pc, #52]	@ (8016a98 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8016a62:	603b      	str	r3, [r7, #0]
 8016a64:	6013      	str	r3, [r2, #0]
 8016a66:	f7ff ff32 	bl	80168ce <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8016a72:	2002      	movs	r0, #2
 8016a74:	801a      	strh	r2, [r3, #0]
 8016a76:	6038      	str	r0, [r7, #0]
 8016a78:	f001 fa52 	bl	8017f20 <_ZN8touchgfx6Screen4drawEv>
 8016a7c:	e7ec      	b.n	8016a58 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8016a7e:	bf00      	nop
 8016a80:	0802e44c 	.word	0x0802e44c
 8016a84:	b5e8b5cd 	.word	0xb5e8b5cd
 8016a88:	f407a5c2 	.word	0xf407a5c2
 8016a8c:	2015a0b4 	.word	0x2015a0b4
 8016a90:	20000020 	.word	0x20000020
 8016a94:	2015a0c4 	.word	0x2015a0c4
 8016a98:	2015a0b8 	.word	0x2015a0b8

08016a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016a9c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8016aa0:	b510      	push	{r4, lr}
 8016aa2:	3b01      	subs	r3, #1
 8016aa4:	b29b      	uxth	r3, r3
 8016aa6:	428b      	cmp	r3, r1
 8016aa8:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8016aac:	d908      	bls.n	8016ac0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016aae:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016ab2:	681a      	ldr	r2, [r3, #0]
 8016ab4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016ab8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016abc:	685a      	ldr	r2, [r3, #4]
 8016abe:	6062      	str	r2, [r4, #4]
 8016ac0:	bd10      	pop	{r4, pc}
	...

08016ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ac8:	4b8f      	ldr	r3, [pc, #572]	@ (8016d08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016aca:	b08f      	sub	sp, #60	@ 0x3c
 8016acc:	ac0a      	add	r4, sp, #40	@ 0x28
 8016ace:	e884 0006 	stmia.w	r4, {r1, r2}
 8016ad2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8016d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016ad8:	4683      	mov	fp, r0
 8016ada:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016ade:	4620      	mov	r0, r4
 8016ae0:	f7ff fe14 	bl	801670c <_ZN8touchgfx4Rect10restrictToEss>
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	f7fd fe9e 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016aea:	2800      	cmp	r0, #0
 8016aec:	d16a      	bne.n	8016bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016aee:	9403      	str	r4, [sp, #12]
 8016af0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016af4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016af8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016afc:	35a4      	adds	r5, #164	@ 0xa4
 8016afe:	9301      	str	r3, [sp, #4]
 8016b00:	b15c      	cbz	r4, 8016b1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016b02:	4629      	mov	r1, r5
 8016b04:	9803      	ldr	r0, [sp, #12]
 8016b06:	f7ff fe51 	bl	80167ac <_ZNK8touchgfx4Rect8includesERKS0_>
 8016b0a:	3c01      	subs	r4, #1
 8016b0c:	b118      	cbz	r0, 8016b16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8016b0e:	b2a1      	uxth	r1, r4
 8016b10:	9801      	ldr	r0, [sp, #4]
 8016b12:	f7ff ffc3 	bl	8016a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016b16:	3d08      	subs	r5, #8
 8016b18:	e7f2      	b.n	8016b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8016b1a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8016b1e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016b22:	9302      	str	r3, [sp, #8]
 8016b24:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016b28:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8016b2c:	f8cd a010 	str.w	sl, [sp, #16]
 8016b30:	9306      	str	r3, [sp, #24]
 8016b32:	445c      	add	r4, fp
 8016b34:	2500      	movs	r5, #0
 8016b36:	4626      	mov	r6, r4
 8016b38:	462f      	mov	r7, r5
 8016b3a:	f8cd a014 	str.w	sl, [sp, #20]
 8016b3e:	9b05      	ldr	r3, [sp, #20]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d073      	beq.n	8016c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016b44:	9903      	ldr	r1, [sp, #12]
 8016b46:	4630      	mov	r0, r6
 8016b48:	f7ff fdbe 	bl	80166c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016b4c:	b350      	cbz	r0, 8016ba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016b4e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8016b52:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016b56:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8016b5a:	45e6      	cmp	lr, ip
 8016b5c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8016b60:	db33      	blt.n	8016bca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016b62:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8016b66:	88b3      	ldrh	r3, [r6, #4]
 8016b68:	4472      	add	r2, lr
 8016b6a:	4463      	add	r3, ip
 8016b6c:	b212      	sxth	r2, r2
 8016b6e:	b21b      	sxth	r3, r3
 8016b70:	429a      	cmp	r2, r3
 8016b72:	dc2a      	bgt.n	8016bca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016b74:	88f3      	ldrh	r3, [r6, #6]
 8016b76:	fa1f f289 	uxth.w	r2, r9
 8016b7a:	4413      	add	r3, r2
 8016b7c:	b29b      	uxth	r3, r3
 8016b7e:	45c8      	cmp	r8, r9
 8016b80:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8016b84:	fa1f fc88 	uxth.w	ip, r8
 8016b88:	fa0f fe83 	sxth.w	lr, r3
 8016b8c:	db0f      	blt.n	8016bae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016b8e:	eba3 030c 	sub.w	r3, r3, ip
 8016b92:	1ac9      	subs	r1, r1, r3
 8016b94:	b209      	sxth	r1, r1
 8016b96:	2900      	cmp	r1, #0
 8016b98:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016b9c:	dd12      	ble.n	8016bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016b9e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	9b05      	ldr	r3, [sp, #20]
 8016ba6:	3e08      	subs	r6, #8
 8016ba8:	3b01      	subs	r3, #1
 8016baa:	9305      	str	r3, [sp, #20]
 8016bac:	e7c7      	b.n	8016b3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016bae:	4461      	add	r1, ip
 8016bb0:	b209      	sxth	r1, r1
 8016bb2:	4571      	cmp	r1, lr
 8016bb4:	dc38      	bgt.n	8016c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016bb6:	eba2 020c 	sub.w	r2, r2, ip
 8016bba:	b212      	sxth	r2, r2
 8016bbc:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8016bc0:	2a00      	cmp	r2, #0
 8016bc2:	dcee      	bgt.n	8016ba2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016bc4:	b00f      	add	sp, #60	@ 0x3c
 8016bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bca:	45c8      	cmp	r8, r9
 8016bcc:	db2c      	blt.n	8016c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016bce:	88f3      	ldrh	r3, [r6, #6]
 8016bd0:	4499      	add	r9, r3
 8016bd2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8016bd6:	fa0f f989 	sxth.w	r9, r9
 8016bda:	4498      	add	r8, r3
 8016bdc:	fa0f f888 	sxth.w	r8, r8
 8016be0:	45c1      	cmp	r9, r8
 8016be2:	db21      	blt.n	8016c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016be4:	88b3      	ldrh	r3, [r6, #4]
 8016be6:	fa1f f28c 	uxth.w	r2, ip
 8016bea:	4413      	add	r3, r2
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	45e6      	cmp	lr, ip
 8016bf0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8016bf4:	fa1f f88e 	uxth.w	r8, lr
 8016bf8:	fa0f f983 	sxth.w	r9, r3
 8016bfc:	db0a      	blt.n	8016c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8016bfe:	eba3 0308 	sub.w	r3, r3, r8
 8016c02:	1ac9      	subs	r1, r1, r3
 8016c04:	b209      	sxth	r1, r1
 8016c06:	2900      	cmp	r1, #0
 8016c08:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8016c0c:	ddda      	ble.n	8016bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016c0e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016c12:	e7c6      	b.n	8016ba2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016c14:	4441      	add	r1, r8
 8016c16:	b209      	sxth	r1, r1
 8016c18:	4549      	cmp	r1, r9
 8016c1a:	dc05      	bgt.n	8016c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016c1c:	eba2 0208 	sub.w	r2, r2, r8
 8016c20:	b212      	sxth	r2, r2
 8016c22:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8016c26:	e7cb      	b.n	8016bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016c28:	4607      	mov	r7, r0
 8016c2a:	e7bb      	b.n	8016ba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016c2c:	2d00      	cmp	r5, #0
 8016c2e:	d181      	bne.n	8016b34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016c30:	2f00      	cmp	r7, #0
 8016c32:	f000 81de 	beq.w	8016ff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8016c36:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8016c3a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8016c3e:	b2b3      	uxth	r3, r6
 8016c40:	9305      	str	r3, [sp, #20]
 8016c42:	9a05      	ldr	r2, [sp, #20]
 8016c44:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8016c48:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8016c4c:	4413      	add	r3, r2
 8016c4e:	b2ba      	uxth	r2, r7
 8016c50:	4492      	add	sl, r2
 8016c52:	b29b      	uxth	r3, r3
 8016c54:	fa1f fa8a 	uxth.w	sl, sl
 8016c58:	fa0f f883 	sxth.w	r8, r3
 8016c5c:	fa0f f98a 	sxth.w	r9, sl
 8016c60:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016c64:	9b04      	ldr	r3, [sp, #16]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d052      	beq.n	8016d10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016c6a:	9903      	ldr	r1, [sp, #12]
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	f7ff fd2b 	bl	80166c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016c72:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016c76:	b1c0      	cbz	r0, 8016caa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016c78:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016c7c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016c80:	4576      	cmp	r6, lr
 8016c82:	dc22      	bgt.n	8016cca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016c84:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016c88:	44f4      	add	ip, lr
 8016c8a:	fa0f fc8c 	sxth.w	ip, ip
 8016c8e:	45e0      	cmp	r8, ip
 8016c90:	db1b      	blt.n	8016cca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016c92:	428f      	cmp	r7, r1
 8016c94:	fa1f fc81 	uxth.w	ip, r1
 8016c98:	88e1      	ldrh	r1, [r4, #6]
 8016c9a:	dc0d      	bgt.n	8016cb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8016c9c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016ca0:	eba1 010c 	sub.w	r1, r1, ip
 8016ca4:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016ca8:	80e1      	strh	r1, [r4, #6]
 8016caa:	4628      	mov	r0, r5
 8016cac:	9904      	ldr	r1, [sp, #16]
 8016cae:	3c08      	subs	r4, #8
 8016cb0:	3901      	subs	r1, #1
 8016cb2:	9104      	str	r1, [sp, #16]
 8016cb4:	4605      	mov	r5, r0
 8016cb6:	e7d3      	b.n	8016c60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8016cb8:	4461      	add	r1, ip
 8016cba:	b209      	sxth	r1, r1
 8016cbc:	4549      	cmp	r1, r9
 8016cbe:	dcf5      	bgt.n	8016cac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016cc0:	eba2 0c0c 	sub.w	ip, r2, ip
 8016cc4:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016cc8:	e7ef      	b.n	8016caa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016cca:	428f      	cmp	r7, r1
 8016ccc:	dcee      	bgt.n	8016cac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016cce:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8016cd2:	4461      	add	r1, ip
 8016cd4:	b209      	sxth	r1, r1
 8016cd6:	4589      	cmp	r9, r1
 8016cd8:	dbe8      	blt.n	8016cac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016cda:	4576      	cmp	r6, lr
 8016cdc:	fa1f fc8e 	uxth.w	ip, lr
 8016ce0:	88a1      	ldrh	r1, [r4, #4]
 8016ce2:	dc07      	bgt.n	8016cf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8016ce4:	eba3 0c0c 	sub.w	ip, r3, ip
 8016ce8:	eba1 010c 	sub.w	r1, r1, ip
 8016cec:	f8a4 8000 	strh.w	r8, [r4]
 8016cf0:	80a1      	strh	r1, [r4, #4]
 8016cf2:	e7da      	b.n	8016caa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016cf4:	4461      	add	r1, ip
 8016cf6:	b209      	sxth	r1, r1
 8016cf8:	4588      	cmp	r8, r1
 8016cfa:	dbd7      	blt.n	8016cac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8016cfc:	9905      	ldr	r1, [sp, #20]
 8016cfe:	eba1 0c0c 	sub.w	ip, r1, ip
 8016d02:	f8a4 c004 	strh.w	ip, [r4, #4]
 8016d06:	e7d0      	b.n	8016caa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016d08:	2015a06e 	.word	0x2015a06e
 8016d0c:	2015a06c 	.word	0x2015a06c
 8016d10:	2d00      	cmp	r5, #0
 8016d12:	f000 816e 	beq.w	8016ff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8016d16:	9b06      	ldr	r3, [sp, #24]
 8016d18:	445b      	add	r3, fp
 8016d1a:	461c      	mov	r4, r3
 8016d1c:	9b02      	ldr	r3, [sp, #8]
 8016d1e:	3301      	adds	r3, #1
 8016d20:	f000 8167 	beq.w	8016ff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8016d24:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8016d28:	4629      	mov	r1, r5
 8016d2a:	9803      	ldr	r0, [sp, #12]
 8016d2c:	f7ff fd3e 	bl	80167ac <_ZNK8touchgfx4Rect8includesERKS0_>
 8016d30:	b120      	cbz	r0, 8016d3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8016d32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016d36:	9801      	ldr	r0, [sp, #4]
 8016d38:	f7ff feb0 	bl	8016a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016d3c:	9903      	ldr	r1, [sp, #12]
 8016d3e:	4628      	mov	r0, r5
 8016d40:	f7ff fcc2 	bl	80166c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016d44:	2800      	cmp	r0, #0
 8016d46:	f000 809c 	beq.w	8016e82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016d4a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8016d4e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016d52:	fa1f f189 	uxth.w	r1, r9
 8016d56:	eb01 0c03 	add.w	ip, r1, r3
 8016d5a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8016d5e:	fa1f fa8c 	uxth.w	sl, ip
 8016d62:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8016d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d68:	b283      	uxth	r3, r0
 8016d6a:	eb03 050c 	add.w	r5, r3, ip
 8016d6e:	b2ad      	uxth	r5, r5
 8016d70:	9505      	str	r5, [sp, #20]
 8016d72:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016d76:	4548      	cmp	r0, r9
 8016d78:	9504      	str	r5, [sp, #16]
 8016d7a:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8016d7e:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8016d82:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8016d86:	f340 8099 	ble.w	8016ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8016d8a:	1a5b      	subs	r3, r3, r1
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	4596      	cmp	lr, r2
 8016d90:	fa0f f08a 	sxth.w	r0, sl
 8016d94:	b21e      	sxth	r6, r3
 8016d96:	dd2e      	ble.n	8016df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8016d98:	9f02      	ldr	r7, [sp, #8]
 8016d9a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8016d9e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8016da2:	9f04      	ldr	r7, [sp, #16]
 8016da4:	fa1f fe8e 	uxth.w	lr, lr
 8016da8:	1a3f      	subs	r7, r7, r0
 8016daa:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8016dae:	b292      	uxth	r2, r2
 8016db0:	ebae 0102 	sub.w	r1, lr, r2
 8016db4:	44a6      	add	lr, r4
 8016db6:	4402      	add	r2, r0
 8016db8:	b289      	uxth	r1, r1
 8016dba:	fa0f fe8e 	sxth.w	lr, lr
 8016dbe:	b212      	sxth	r2, r2
 8016dc0:	b20d      	sxth	r5, r1
 8016dc2:	ebae 0202 	sub.w	r2, lr, r2
 8016dc6:	436f      	muls	r7, r5
 8016dc8:	4372      	muls	r2, r6
 8016dca:	4297      	cmp	r7, r2
 8016dcc:	db09      	blt.n	8016de2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016dce:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8016dd2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8016dd6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8016dda:	449c      	add	ip, r3
 8016ddc:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016de0:	e686      	b.n	8016af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016de2:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8016de6:	4421      	add	r1, r4
 8016de8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8016dec:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016df0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016df4:	e67c      	b.n	8016af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016df6:	9f04      	ldr	r7, [sp, #16]
 8016df8:	42b8      	cmp	r0, r7
 8016dfa:	da27      	bge.n	8016e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8016dfc:	9902      	ldr	r1, [sp, #8]
 8016dfe:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8016e02:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8016e06:	eb05 010e 	add.w	r1, r5, lr
 8016e0a:	fa1f f881 	uxth.w	r8, r1
 8016e0e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8016e12:	fa0f f988 	sxth.w	r9, r8
 8016e16:	4411      	add	r1, r2
 8016e18:	eba1 0108 	sub.w	r1, r1, r8
 8016e1c:	b289      	uxth	r1, r1
 8016e1e:	fa0f f881 	sxth.w	r8, r1
 8016e22:	eba2 020e 	sub.w	r2, r2, lr
 8016e26:	1a3f      	subs	r7, r7, r0
 8016e28:	4372      	muls	r2, r6
 8016e2a:	fb08 f707 	mul.w	r7, r8, r7
 8016e2e:	42ba      	cmp	r2, r7
 8016e30:	dc06      	bgt.n	8016e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8016e32:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8016e36:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8016e3a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8016e3e:	e7ca      	b.n	8016dd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8016e40:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8016e44:	4429      	add	r1, r5
 8016e46:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016e4a:	e651      	b.n	8016af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016e4c:	9805      	ldr	r0, [sp, #20]
 8016e4e:	2d06      	cmp	r5, #6
 8016e50:	ebaa 0000 	sub.w	r0, sl, r0
 8016e54:	b280      	uxth	r0, r0
 8016e56:	fa0f fe80 	sxth.w	lr, r0
 8016e5a:	d817      	bhi.n	8016e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8016e5c:	9b04      	ldr	r3, [sp, #16]
 8016e5e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8016e62:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8016e66:	1c6b      	adds	r3, r5, #1
 8016e68:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8016e6c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016e70:	9b01      	ldr	r3, [sp, #4]
 8016e72:	9801      	ldr	r0, [sp, #4]
 8016e74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016e78:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016e7c:	805a      	strh	r2, [r3, #2]
 8016e7e:	809e      	strh	r6, [r3, #4]
 8016e80:	80d9      	strh	r1, [r3, #6]
 8016e82:	9b02      	ldr	r3, [sp, #8]
 8016e84:	3c08      	subs	r4, #8
 8016e86:	3b01      	subs	r3, #1
 8016e88:	9302      	str	r3, [sp, #8]
 8016e8a:	e747      	b.n	8016d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016e8c:	9a02      	ldr	r2, [sp, #8]
 8016e8e:	45b6      	cmp	lr, r6
 8016e90:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016e94:	db0d      	blt.n	8016eb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016e96:	449c      	add	ip, r3
 8016e98:	fa1f fc8c 	uxth.w	ip, ip
 8016e9c:	445a      	add	r2, fp
 8016e9e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016ea2:	448c      	add	ip, r1
 8016ea4:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016ea8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8016eac:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8016eb0:	e61e      	b.n	8016af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016eb2:	445a      	add	r2, fp
 8016eb4:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8016eb8:	4484      	add	ip, r0
 8016eba:	e78f      	b.n	8016ddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016ebc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8016ec0:	fa1f f18e 	uxth.w	r1, lr
 8016ec4:	eb01 0806 	add.w	r8, r1, r6
 8016ec8:	b293      	uxth	r3, r2
 8016eca:	fa1f f888 	uxth.w	r8, r8
 8016ece:	9306      	str	r3, [sp, #24]
 8016ed0:	fa0f f388 	sxth.w	r3, r8
 8016ed4:	9307      	str	r3, [sp, #28]
 8016ed6:	9f06      	ldr	r7, [sp, #24]
 8016ed8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8016edc:	4596      	cmp	lr, r2
 8016ede:	443b      	add	r3, r7
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	9308      	str	r3, [sp, #32]
 8016ee4:	da24      	bge.n	8016f30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8016ee6:	9905      	ldr	r1, [sp, #20]
 8016ee8:	eba3 0308 	sub.w	r3, r3, r8
 8016eec:	ebaa 0401 	sub.w	r4, sl, r1
 8016ef0:	b2a4      	uxth	r4, r4
 8016ef2:	b29b      	uxth	r3, r3
 8016ef4:	b225      	sxth	r5, r4
 8016ef6:	b219      	sxth	r1, r3
 8016ef8:	eba2 020e 	sub.w	r2, r2, lr
 8016efc:	eba9 0000 	sub.w	r0, r9, r0
 8016f00:	436a      	muls	r2, r5
 8016f02:	4348      	muls	r0, r1
 8016f04:	4282      	cmp	r2, r0
 8016f06:	9a02      	ldr	r2, [sp, #8]
 8016f08:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016f0c:	445a      	add	r2, fp
 8016f0e:	dc06      	bgt.n	8016f1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016f10:	9b07      	ldr	r3, [sp, #28]
 8016f12:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8016f16:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8016f1a:	44a4      	add	ip, r4
 8016f1c:	e75e      	b.n	8016ddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016f1e:	9904      	ldr	r1, [sp, #16]
 8016f20:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8016f24:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8016f28:	4433      	add	r3, r6
 8016f2a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8016f2e:	e5df      	b.n	8016af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016f30:	9f06      	ldr	r7, [sp, #24]
 8016f32:	9b04      	ldr	r3, [sp, #16]
 8016f34:	1bc9      	subs	r1, r1, r7
 8016f36:	fa0f f78a 	sxth.w	r7, sl
 8016f3a:	b289      	uxth	r1, r1
 8016f3c:	429f      	cmp	r7, r3
 8016f3e:	fa0f fe81 	sxth.w	lr, r1
 8016f42:	dd24      	ble.n	8016f8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 8016f44:	9a05      	ldr	r2, [sp, #20]
 8016f46:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016f4a:	ebaa 0202 	sub.w	r2, sl, r2
 8016f4e:	9d07      	ldr	r5, [sp, #28]
 8016f50:	b292      	uxth	r2, r2
 8016f52:	eba5 0a03 	sub.w	sl, r5, r3
 8016f56:	b214      	sxth	r4, r2
 8016f58:	eba9 0000 	sub.w	r0, r9, r0
 8016f5c:	fb0e f000 	mul.w	r0, lr, r0
 8016f60:	fb04 fa0a 	mul.w	sl, r4, sl
 8016f64:	9b02      	ldr	r3, [sp, #8]
 8016f66:	4550      	cmp	r0, sl
 8016f68:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8016f6c:	445b      	add	r3, fp
 8016f6e:	db03      	blt.n	8016f78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8016f70:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8016f74:	4494      	add	ip, r2
 8016f76:	e731      	b.n	8016ddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016f78:	9a04      	ldr	r2, [sp, #16]
 8016f7a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8016f7e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8016f82:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8016f86:	4431      	add	r1, r6
 8016f88:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016f8c:	e75b      	b.n	8016e46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016f8e:	9b08      	ldr	r3, [sp, #32]
 8016f90:	2d06      	cmp	r5, #6
 8016f92:	eba3 0308 	sub.w	r3, r3, r8
 8016f96:	b29b      	uxth	r3, r3
 8016f98:	b218      	sxth	r0, r3
 8016f9a:	d813      	bhi.n	8016fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8016f9c:	9b07      	ldr	r3, [sp, #28]
 8016f9e:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8016fa2:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8016fa6:	1c6b      	adds	r3, r5, #1
 8016fa8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016fac:	9b01      	ldr	r3, [sp, #4]
 8016fae:	9901      	ldr	r1, [sp, #4]
 8016fb0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016fb4:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016fb8:	805a      	strh	r2, [r3, #2]
 8016fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016fbc:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016fc0:	809a      	strh	r2, [r3, #4]
 8016fc2:	e75e      	b.n	8016e82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016fc4:	9c02      	ldr	r4, [sp, #8]
 8016fc6:	4570      	cmp	r0, lr
 8016fc8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016fcc:	db0d      	blt.n	8016fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 8016fce:	4431      	add	r1, r6
 8016fd0:	9b06      	ldr	r3, [sp, #24]
 8016fd2:	b289      	uxth	r1, r1
 8016fd4:	445c      	add	r4, fp
 8016fd6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016fda:	4419      	add	r1, r3
 8016fdc:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8016fe0:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8016fe4:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8016fe8:	e582      	b.n	8016af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016fea:	445c      	add	r4, fp
 8016fec:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8016ff0:	e79a      	b.n	8016f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016ff2:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8016ff6:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016ffa:	1e65      	subs	r5, r4, #1
 8016ffc:	b2ad      	uxth	r5, r5
 8016ffe:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8017002:	42b5      	cmp	r5, r6
 8017004:	d044      	beq.n	8017090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5cc>
 8017006:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801700a:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801700e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8017012:	4282      	cmp	r2, r0
 8017014:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8017018:	d11f      	bne.n	801705a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 801701a:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801701e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8017022:	459c      	cmp	ip, r3
 8017024:	d119      	bne.n	801705a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 8017026:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801702a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801702e:	19d8      	adds	r0, r3, r7
 8017030:	b200      	sxth	r0, r0
 8017032:	4288      	cmp	r0, r1
 8017034:	d109      	bne.n	801704a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8017036:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801703a:	4413      	add	r3, r2
 801703c:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8017040:	4629      	mov	r1, r5
 8017042:	9801      	ldr	r0, [sp, #4]
 8017044:	f7ff fd2a 	bl	8016a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017048:	e003      	b.n	8017052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801704a:	4411      	add	r1, r2
 801704c:	b209      	sxth	r1, r1
 801704e:	42b9      	cmp	r1, r7
 8017050:	d0f3      	beq.n	801703a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x576>
 8017052:	3d01      	subs	r5, #1
 8017054:	b2ad      	uxth	r5, r5
 8017056:	3c08      	subs	r4, #8
 8017058:	e7d3      	b.n	8017002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 801705a:	42b9      	cmp	r1, r7
 801705c:	d1f9      	bne.n	8017052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801705e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8017062:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017066:	4299      	cmp	r1, r3
 8017068:	d1f3      	bne.n	8017052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801706a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801706e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8017072:	181f      	adds	r7, r3, r0
 8017074:	b23f      	sxth	r7, r7
 8017076:	42ba      	cmp	r2, r7
 8017078:	d105      	bne.n	8017086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c2>
 801707a:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801707e:	440b      	add	r3, r1
 8017080:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017084:	e7dc      	b.n	8017040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 8017086:	440a      	add	r2, r1
 8017088:	b212      	sxth	r2, r2
 801708a:	4290      	cmp	r0, r2
 801708c:	d1e1      	bne.n	8017052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801708e:	e7f6      	b.n	801707e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ba>
 8017090:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8017094:	2e07      	cmp	r6, #7
 8017096:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801709a:	d812      	bhi.n	80170c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801709c:	1c75      	adds	r5, r6, #1
 801709e:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80170a2:	9d01      	ldr	r5, [sp, #4]
 80170a4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80170a8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80170ac:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80170b0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80170b4:	442c      	add	r4, r5
 80170b6:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80170ba:	8061      	strh	r1, [r4, #2]
 80170bc:	80a2      	strh	r2, [r4, #4]
 80170be:	80e3      	strh	r3, [r4, #6]
 80170c0:	e580      	b.n	8016bc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80170c2:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80170c6:	f04f 37ff 	mov.w	r7, #4294967295
 80170ca:	2500      	movs	r5, #0
 80170cc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80170d0:	3e01      	subs	r6, #1
 80170d2:	445c      	add	r4, fp
 80170d4:	9305      	str	r3, [sp, #20]
 80170d6:	1e72      	subs	r2, r6, #1
 80170d8:	4691      	mov	r9, r2
 80170da:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80170de:	9302      	str	r3, [sp, #8]
 80170e0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80170e4:	9304      	str	r3, [sp, #16]
 80170e6:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80170ea:	f1b9 3fff 	cmp.w	r9, #4294967295
 80170ee:	bf16      	itet	ne
 80170f0:	9905      	ldrne	r1, [sp, #20]
 80170f2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80170f6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80170fa:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80170fe:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017102:	6818      	ldr	r0, [r3, #0]
 8017104:	fb18 f801 	smulbb	r8, r8, r1
 8017108:	6859      	ldr	r1, [r3, #4]
 801710a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801710e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017112:	4671      	mov	r1, lr
 8017114:	a80c      	add	r0, sp, #48	@ 0x30
 8017116:	9207      	str	r2, [sp, #28]
 8017118:	9306      	str	r3, [sp, #24]
 801711a:	f7ff fb6d 	bl	80167f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801711e:	f04f 0c08 	mov.w	ip, #8
 8017122:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8017126:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801712a:	9b04      	ldr	r3, [sp, #16]
 801712c:	9a02      	ldr	r2, [sp, #8]
 801712e:	fb10 f001 	smulbb	r0, r0, r1
 8017132:	fb02 8803 	mla	r8, r2, r3, r8
 8017136:	eba0 0108 	sub.w	r1, r0, r8
 801713a:	fb90 f0fc 	sdiv	r0, r0, ip
 801713e:	4288      	cmp	r0, r1
 8017140:	dc20      	bgt.n	8017184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 8017142:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017146:	4551      	cmp	r1, sl
 8017148:	da03      	bge.n	8017152 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 801714a:	b1d9      	cbz	r1, 8017184 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801714c:	468a      	mov	sl, r1
 801714e:	464f      	mov	r7, r9
 8017150:	4635      	mov	r5, r6
 8017152:	f109 39ff 	add.w	r9, r9, #4294967295
 8017156:	f119 0f02 	cmn.w	r9, #2
 801715a:	d1c6      	bne.n	80170ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801715c:	4616      	mov	r6, r2
 801715e:	3201      	adds	r2, #1
 8017160:	f1a4 0408 	sub.w	r4, r4, #8
 8017164:	d1b7      	bne.n	80170d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 8017166:	9b01      	ldr	r3, [sp, #4]
 8017168:	b2ac      	uxth	r4, r5
 801716a:	00ed      	lsls	r5, r5, #3
 801716c:	1958      	adds	r0, r3, r5
 801716e:	1c7b      	adds	r3, r7, #1
 8017170:	d10b      	bne.n	801718a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 8017172:	4601      	mov	r1, r0
 8017174:	9803      	ldr	r0, [sp, #12]
 8017176:	f7ff fb3f 	bl	80167f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801717a:	4621      	mov	r1, r4
 801717c:	9801      	ldr	r0, [sp, #4]
 801717e:	f7ff fc8d 	bl	8016a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017182:	e4b5      	b.n	8016af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017184:	464f      	mov	r7, r9
 8017186:	4635      	mov	r5, r6
 8017188:	e7ed      	b.n	8017166 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 801718a:	9b01      	ldr	r3, [sp, #4]
 801718c:	00ff      	lsls	r7, r7, #3
 801718e:	19d9      	adds	r1, r3, r7
 8017190:	f7ff fb32 	bl	80167f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017194:	9b03      	ldr	r3, [sp, #12]
 8017196:	445f      	add	r7, fp
 8017198:	cb03      	ldmia	r3!, {r0, r1}
 801719a:	445d      	add	r5, fp
 801719c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 80171a0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80171a4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80171a8:	9b03      	ldr	r3, [sp, #12]
 80171aa:	6869      	ldr	r1, [r5, #4]
 80171ac:	c303      	stmia	r3!, {r0, r1}
 80171ae:	e7e4      	b.n	801717a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

080171b0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80171b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171b4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 80171b8:	b09b      	sub	sp, #108	@ 0x6c
 80171ba:	4604      	mov	r4, r0
 80171bc:	4630      	mov	r0, r6
 80171be:	f7fd fb32 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 80171c2:	4605      	mov	r5, r0
 80171c4:	b948      	cbnz	r0, 80171da <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80171c6:	e896 0006 	ldmia.w	r6, {r1, r2}
 80171ca:	6823      	ldr	r3, [r4, #0]
 80171cc:	4620      	mov	r0, r4
 80171ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80171d0:	4798      	blx	r3
 80171d2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80171d6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80171da:	4bc6      	ldr	r3, [pc, #792]	@ (80174f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d03f      	beq.n	8017262 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80171e2:	4dc5      	ldr	r5, [pc, #788]	@ (80174f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 80171e4:	4628      	mov	r0, r5
 80171e6:	f7fd fb1e 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 80171ea:	4606      	mov	r6, r0
 80171ec:	2800      	cmp	r0, #0
 80171ee:	d138      	bne.n	8017262 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80171f0:	4628      	mov	r0, r5
 80171f2:	f7ff f99f 	bl	8016534 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80171f6:	6823      	ldr	r3, [r4, #0]
 80171f8:	6829      	ldr	r1, [r5, #0]
 80171fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80171fc:	686a      	ldr	r2, [r5, #4]
 80171fe:	4620      	mov	r0, r4
 8017200:	4798      	blx	r3
 8017202:	802e      	strh	r6, [r5, #0]
 8017204:	806e      	strh	r6, [r5, #2]
 8017206:	80ae      	strh	r6, [r5, #4]
 8017208:	80ee      	strh	r6, [r5, #6]
 801720a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801720e:	4dbb      	ldr	r5, [pc, #748]	@ (80174fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8017210:	4640      	mov	r0, r8
 8017212:	f7ff fbeb 	bl	80169ec <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017216:	882e      	ldrh	r6, [r5, #0]
 8017218:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801721c:	4633      	mov	r3, r6
 801721e:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8017222:	42bb      	cmp	r3, r7
 8017224:	d224      	bcs.n	8017270 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017226:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801722a:	2907      	cmp	r1, #7
 801722c:	d816      	bhi.n	801725c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801722e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017232:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8017236:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801723a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801723e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8017242:	1c4a      	adds	r2, r1, #1
 8017244:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8017248:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801724c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8017250:	f8a2 a002 	strh.w	sl, [r2, #2]
 8017254:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017258:	f8a2 c006 	strh.w	ip, [r2, #6]
 801725c:	3301      	adds	r3, #1
 801725e:	b29b      	uxth	r3, r3
 8017260:	e7df      	b.n	8017222 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8017262:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017266:	2b00      	cmp	r3, #0
 8017268:	d1cf      	bne.n	801720a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801726a:	b01b      	add	sp, #108	@ 0x6c
 801726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017270:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8017274:	42b3      	cmp	r3, r6
 8017276:	d90c      	bls.n	8017292 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8017278:	6822      	ldr	r2, [r4, #0]
 801727a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801727e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8017280:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8017284:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8017288:	4620      	mov	r0, r4
 801728a:	3601      	adds	r6, #1
 801728c:	47b8      	blx	r7
 801728e:	b2b6      	uxth	r6, r6
 8017290:	e7ee      	b.n	8017270 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017292:	4a9b      	ldr	r2, [pc, #620]	@ (8017500 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8017294:	6813      	ldr	r3, [r2, #0]
 8017296:	4691      	mov	r9, r2
 8017298:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801729c:	2b01      	cmp	r3, #1
 801729e:	f040 80e2 	bne.w	8017466 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80172a2:	2600      	movs	r6, #0
 80172a4:	8829      	ldrh	r1, [r5, #0]
 80172a6:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80172aa:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80172ae:	33ae      	adds	r3, #174	@ 0xae
 80172b0:	428f      	cmp	r7, r1
 80172b2:	f103 0308 	add.w	r3, r3, #8
 80172b6:	dd0a      	ble.n	80172ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80172b8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80172bc:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80172c0:	3101      	adds	r1, #1
 80172c2:	4402      	add	r2, r0
 80172c4:	b212      	sxth	r2, r2
 80172c6:	4296      	cmp	r6, r2
 80172c8:	bfb8      	it	lt
 80172ca:	4616      	movlt	r6, r2
 80172cc:	e7f0      	b.n	80172b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80172ce:	4b8d      	ldr	r3, [pc, #564]	@ (8017504 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80172d0:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8017500 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 80172d4:	881b      	ldrh	r3, [r3, #0]
 80172d6:	2b0f      	cmp	r3, #15
 80172d8:	bf88      	it	hi
 80172da:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80172de:	f04f 0300 	mov.w	r3, #0
 80172e2:	bf98      	it	ls
 80172e4:	f04f 0b01 	movls.w	fp, #1
 80172e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80172ec:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80172f0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80172f4:	4b82      	ldr	r3, [pc, #520]	@ (8017500 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80172f6:	4438      	add	r0, r7
 80172f8:	b207      	sxth	r7, r0
 80172fa:	6818      	ldr	r0, [r3, #0]
 80172fc:	42b7      	cmp	r7, r6
 80172fe:	6803      	ldr	r3, [r0, #0]
 8017300:	f280 8083 	bge.w	801740a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017304:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017308:	4798      	blx	r3
 801730a:	eb07 030b 	add.w	r3, r7, fp
 801730e:	4298      	cmp	r0, r3
 8017310:	da07      	bge.n	8017322 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 8017312:	42b0      	cmp	r0, r6
 8017314:	da05      	bge.n	8017322 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 8017316:	4287      	cmp	r7, r0
 8017318:	dd6c      	ble.n	80173f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801731a:	2f00      	cmp	r7, #0
 801731c:	dd6a      	ble.n	80173f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801731e:	4630      	mov	r0, r6
 8017320:	e004      	b.n	801732c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8017322:	4287      	cmp	r7, r0
 8017324:	dcfb      	bgt.n	801731e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8017326:	42b0      	cmp	r0, r6
 8017328:	bfa8      	it	ge
 801732a:	4630      	movge	r0, r6
 801732c:	2200      	movs	r2, #0
 801732e:	4b76      	ldr	r3, [pc, #472]	@ (8017508 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017330:	1bc0      	subs	r0, r0, r7
 8017332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017336:	f8ad 7016 	strh.w	r7, [sp, #22]
 801733a:	882f      	ldrh	r7, [r5, #0]
 801733c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017340:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017344:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017348:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801734c:	42bb      	cmp	r3, r7
 801734e:	d9cd      	bls.n	80172ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8017350:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8017354:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017358:	ab07      	add	r3, sp, #28
 801735a:	6851      	ldr	r1, [r2, #4]
 801735c:	c303      	stmia	r3!, {r0, r1}
 801735e:	a905      	add	r1, sp, #20
 8017360:	a807      	add	r0, sp, #28
 8017362:	f7ff f9b1 	bl	80166c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017366:	2800      	cmp	r0, #0
 8017368:	d04c      	beq.n	8017404 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801736a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801736e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8017372:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8017376:	4686      	mov	lr, r0
 8017378:	4290      	cmp	r0, r2
 801737a:	4450      	add	r0, sl
 801737c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8017380:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8017384:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017388:	bfb8      	it	lt
 801738a:	4696      	movlt	lr, r2
 801738c:	4452      	add	r2, sl
 801738e:	4299      	cmp	r1, r3
 8017390:	b280      	uxth	r0, r0
 8017392:	b292      	uxth	r2, r2
 8017394:	468c      	mov	ip, r1
 8017396:	9302      	str	r3, [sp, #8]
 8017398:	bfb8      	it	lt
 801739a:	469c      	movlt	ip, r3
 801739c:	fa0f fa82 	sxth.w	sl, r2
 80173a0:	b203      	sxth	r3, r0
 80173a2:	4553      	cmp	r3, sl
 80173a4:	bfb8      	it	lt
 80173a6:	4602      	movlt	r2, r0
 80173a8:	eba2 020e 	sub.w	r2, r2, lr
 80173ac:	f8ad 2020 	strh.w	r2, [sp, #32]
 80173b0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80173b4:	9b02      	ldr	r3, [sp, #8]
 80173b6:	4411      	add	r1, r2
 80173b8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80173bc:	b289      	uxth	r1, r1
 80173be:	4413      	add	r3, r2
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	b208      	sxth	r0, r1
 80173c4:	b21a      	sxth	r2, r3
 80173c6:	4290      	cmp	r0, r2
 80173c8:	bfb8      	it	lt
 80173ca:	460b      	movlt	r3, r1
 80173cc:	eba3 030c 	sub.w	r3, r3, ip
 80173d0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80173d4:	f8ad e01c 	strh.w	lr, [sp, #28]
 80173d8:	f8ad c01e 	strh.w	ip, [sp, #30]
 80173dc:	a807      	add	r0, sp, #28
 80173de:	f7fd fa22 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 80173e2:	b920      	cbnz	r0, 80173ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80173e4:	6823      	ldr	r3, [r4, #0]
 80173e6:	a907      	add	r1, sp, #28
 80173e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80173ea:	4620      	mov	r0, r4
 80173ec:	4798      	blx	r3
 80173ee:	3701      	adds	r7, #1
 80173f0:	b2bf      	uxth	r7, r7
 80173f2:	e7a9      	b.n	8017348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80173f4:	f8d9 0000 	ldr.w	r0, [r9]
 80173f8:	2101      	movs	r1, #1
 80173fa:	6803      	ldr	r3, [r0, #0]
 80173fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8017400:	4798      	blx	r3
 8017402:	e773      	b.n	80172ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8017404:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017408:	e7e8      	b.n	80173dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801740c:	4798      	blx	r3
 801740e:	4b3f      	ldr	r3, [pc, #252]	@ (801750c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8017410:	781b      	ldrb	r3, [r3, #0]
 8017412:	2b00      	cmp	r3, #0
 8017414:	f43f af29 	beq.w	801726a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8017418:	2300      	movs	r3, #0
 801741a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801741e:	882b      	ldrh	r3, [r5, #0]
 8017420:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8017424:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8017428:	42ab      	cmp	r3, r5
 801742a:	f4bf af1e 	bcs.w	801726a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801742e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8017432:	2907      	cmp	r1, #7
 8017434:	d814      	bhi.n	8017460 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8017436:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801743a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801743e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8017442:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8017446:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801744a:	1c4a      	adds	r2, r1, #1
 801744c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8017450:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8017454:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8017458:	f8a2 c002 	strh.w	ip, [r2, #2]
 801745c:	8097      	strh	r7, [r2, #4]
 801745e:	80d6      	strh	r6, [r2, #6]
 8017460:	3301      	adds	r3, #1
 8017462:	b29b      	uxth	r3, r3
 8017464:	e7e0      	b.n	8017428 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 8017466:	2b02      	cmp	r3, #2
 8017468:	f040 8133 	bne.w	80176d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801746c:	4b28      	ldr	r3, [pc, #160]	@ (8017510 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801746e:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8017472:	781b      	ldrb	r3, [r3, #0]
 8017474:	2b01      	cmp	r3, #1
 8017476:	f000 8098 	beq.w	80175aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801747a:	882a      	ldrh	r2, [r5, #0]
 801747c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8017480:	3201      	adds	r2, #1
 8017482:	b292      	uxth	r2, r2
 8017484:	2900      	cmp	r1, #0
 8017486:	d0c2      	beq.n	801740e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8017488:	4694      	mov	ip, r2
 801748a:	f04f 0900 	mov.w	r9, #0
 801748e:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8017492:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8017496:	441e      	add	r6, r3
 8017498:	b236      	sxth	r6, r6
 801749a:	fa1f f38c 	uxth.w	r3, ip
 801749e:	4299      	cmp	r1, r3
 80174a0:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80174a4:	f240 80bf 	bls.w	8017626 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 80174a8:	4427      	add	r7, r4
 80174aa:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80174ae:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80174b2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80174b6:	4283      	cmp	r3, r0
 80174b8:	f340 80a1 	ble.w	80175fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 80174bc:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80174c0:	46e1      	mov	r9, ip
 80174c2:	4406      	add	r6, r0
 80174c4:	b236      	sxth	r6, r6
 80174c6:	429e      	cmp	r6, r3
 80174c8:	bfa8      	it	ge
 80174ca:	461e      	movge	r6, r3
 80174cc:	f10c 0c01 	add.w	ip, ip, #1
 80174d0:	e7e3      	b.n	801749a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 80174d2:	d10a      	bne.n	80174ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 80174d4:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80174d8:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80174dc:	4562      	cmp	r2, ip
 80174de:	bfb8      	it	lt
 80174e0:	4662      	movlt	r2, ip
 80174e2:	4288      	cmp	r0, r1
 80174e4:	bfb8      	it	lt
 80174e6:	461f      	movlt	r7, r3
 80174e8:	e087      	b.n	80175fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 80174ea:	428a      	cmp	r2, r1
 80174ec:	bfb8      	it	lt
 80174ee:	460a      	movlt	r2, r1
 80174f0:	e083      	b.n	80175fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 80174f2:	bf00      	nop
 80174f4:	2015a0b0 	.word	0x2015a0b0
 80174f8:	2015a0bc 	.word	0x2015a0bc
 80174fc:	20000020 	.word	0x20000020
 8017500:	2015a078 	.word	0x2015a078
 8017504:	2015a06e 	.word	0x2015a06e
 8017508:	2015a06c 	.word	0x2015a06c
 801750c:	2015a076 	.word	0x2015a076
 8017510:	2015a070 	.word	0x2015a070
 8017514:	19a1      	adds	r1, r4, r6
 8017516:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801751a:	ab07      	add	r3, sp, #28
 801751c:	6849      	ldr	r1, [r1, #4]
 801751e:	c303      	stmia	r3!, {r0, r1}
 8017520:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017524:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017528:	2b13      	cmp	r3, #19
 801752a:	bfd8      	it	le
 801752c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017530:	440b      	add	r3, r1
 8017532:	1a9b      	subs	r3, r3, r2
 8017534:	a807      	add	r0, sp, #28
 8017536:	f8ad 3020 	strh.w	r3, [sp, #32]
 801753a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801753e:	f7ff f813 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017542:	a807      	add	r0, sp, #28
 8017544:	f7fd f96f 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017548:	bb78      	cbnz	r0, 80175aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801754a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801754e:	f8d9 0000 	ldr.w	r0, [r9]
 8017552:	f1bc 0f14 	cmp.w	ip, #20
 8017556:	bfa8      	it	ge
 8017558:	f04f 0c14 	movge.w	ip, #20
 801755c:	f8d0 e000 	ldr.w	lr, [r0]
 8017560:	fa1f fc8c 	uxth.w	ip, ip
 8017564:	f8cd c000 	str.w	ip, [sp]
 8017568:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801756c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017570:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017574:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017578:	47d8      	blx	fp
 801757a:	4683      	mov	fp, r0
 801757c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8017580:	a807      	add	r0, sp, #28
 8017582:	f7fe ffd7 	bl	8016534 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017586:	6823      	ldr	r3, [r4, #0]
 8017588:	4620      	mov	r0, r4
 801758a:	4426      	add	r6, r4
 801758c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801758e:	a907      	add	r1, sp, #28
 8017590:	4798      	blx	r3
 8017592:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017596:	eba0 000b 	sub.w	r0, r0, fp
 801759a:	b200      	sxth	r0, r0
 801759c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 80175a0:	b918      	cbnz	r0, 80175aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 80175a2:	b2b9      	uxth	r1, r7
 80175a4:	4650      	mov	r0, sl
 80175a6:	f7ff fa79 	bl	8016a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80175aa:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80175ae:	f1bb 0f00 	cmp.w	fp, #0
 80175b2:	f43f af2c 	beq.w	801740e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80175b6:	2700      	movs	r7, #0
 80175b8:	882b      	ldrh	r3, [r5, #0]
 80175ba:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80175be:	3301      	adds	r3, #1
 80175c0:	b29b      	uxth	r3, r3
 80175c2:	b299      	uxth	r1, r3
 80175c4:	458b      	cmp	fp, r1
 80175c6:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 80175ca:	d9a3      	bls.n	8017514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 80175cc:	4426      	add	r6, r4
 80175ce:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 80175d2:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80175d6:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80175da:	4408      	add	r0, r1
 80175dc:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80175e0:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80175e4:	b200      	sxth	r0, r0
 80175e6:	4461      	add	r1, ip
 80175e8:	b209      	sxth	r1, r1
 80175ea:	4288      	cmp	r0, r1
 80175ec:	f6bf af71 	bge.w	80174d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 80175f0:	4584      	cmp	ip, r0
 80175f2:	4662      	mov	r2, ip
 80175f4:	461f      	mov	r7, r3
 80175f6:	bfb8      	it	lt
 80175f8:	4602      	movlt	r2, r0
 80175fa:	3301      	adds	r3, #1
 80175fc:	e7e1      	b.n	80175c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 80175fe:	d10e      	bne.n	801761e <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 8017600:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8017604:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8017608:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801760c:	4473      	add	r3, lr
 801760e:	b21b      	sxth	r3, r3
 8017610:	429e      	cmp	r6, r3
 8017612:	bfa8      	it	ge
 8017614:	461e      	movge	r6, r3
 8017616:	4287      	cmp	r7, r0
 8017618:	bfb8      	it	lt
 801761a:	46e1      	movlt	r9, ip
 801761c:	e756      	b.n	80174cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801761e:	4286      	cmp	r6, r0
 8017620:	bfa8      	it	ge
 8017622:	4606      	movge	r6, r0
 8017624:	e752      	b.n	80174cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8017626:	eb0a 0007 	add.w	r0, sl, r7
 801762a:	4427      	add	r7, r4
 801762c:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8017630:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017634:	f1bb 0f13 	cmp.w	fp, #19
 8017638:	bfde      	ittt	le
 801763a:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801763e:	445e      	addle	r6, fp
 8017640:	b236      	sxthle	r6, r6
 8017642:	f7fd f8f0 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017646:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801764a:	2800      	cmp	r0, #0
 801764c:	f47f af1a 	bne.w	8017484 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 8017650:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8017654:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8017658:	1ab6      	subs	r6, r6, r2
 801765a:	2e14      	cmp	r6, #20
 801765c:	bfa8      	it	ge
 801765e:	2614      	movge	r6, #20
 8017660:	4828      	ldr	r0, [pc, #160]	@ (8017704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 8017662:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8017666:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801766a:	6800      	ldr	r0, [r0, #0]
 801766c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017670:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017674:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017678:	f8d0 c000 	ldr.w	ip, [r0]
 801767c:	b2b6      	uxth	r6, r6
 801767e:	fa1f fb8b 	uxth.w	fp, fp
 8017682:	455e      	cmp	r6, fp
 8017684:	bf94      	ite	ls
 8017686:	9600      	strls	r6, [sp, #0]
 8017688:	f8cd b000 	strhi.w	fp, [sp]
 801768c:	b292      	uxth	r2, r2
 801768e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8017692:	b29b      	uxth	r3, r3
 8017694:	b289      	uxth	r1, r1
 8017696:	47b0      	blx	r6
 8017698:	6823      	ldr	r3, [r4, #0]
 801769a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801769e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80176a0:	a907      	add	r1, sp, #28
 80176a2:	4620      	mov	r0, r4
 80176a4:	4798      	blx	r3
 80176a6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80176aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80176ae:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80176b2:	1a5b      	subs	r3, r3, r1
 80176b4:	440a      	add	r2, r1
 80176b6:	b21b      	sxth	r3, r3
 80176b8:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80176bc:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	f47f aeda 	bne.w	801747a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80176c6:	fa1f f189 	uxth.w	r1, r9
 80176ca:	4650      	mov	r0, sl
 80176cc:	f7ff f9e6 	bl	8016a9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80176d0:	e6d3      	b.n	801747a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80176d2:	882e      	ldrh	r6, [r5, #0]
 80176d4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80176d8:	42b3      	cmp	r3, r6
 80176da:	f67f ae98 	bls.w	801740e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80176de:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80176e2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80176e6:	ab07      	add	r3, sp, #28
 80176e8:	6851      	ldr	r1, [r2, #4]
 80176ea:	c303      	stmia	r3!, {r0, r1}
 80176ec:	a807      	add	r0, sp, #28
 80176ee:	f7fd f89a 	bl	8014826 <_ZNK8touchgfx4Rect7isEmptyEv>
 80176f2:	b920      	cbnz	r0, 80176fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 80176f4:	6823      	ldr	r3, [r4, #0]
 80176f6:	a907      	add	r1, sp, #28
 80176f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80176fa:	4620      	mov	r0, r4
 80176fc:	4798      	blx	r3
 80176fe:	3601      	adds	r6, #1
 8017700:	b2b6      	uxth	r6, r6
 8017702:	e7e7      	b.n	80176d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 8017704:	2015a078 	.word	0x2015a078

08017708 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017708:	2200      	movs	r2, #0
 801770a:	4b03      	ldr	r3, [pc, #12]	@ (8017718 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801770c:	801a      	strh	r2, [r3, #0]
 801770e:	805a      	strh	r2, [r3, #2]
 8017710:	809a      	strh	r2, [r3, #4]
 8017712:	80da      	strh	r2, [r3, #6]
 8017714:	4770      	bx	lr
 8017716:	bf00      	nop
 8017718:	2015a0bc 	.word	0x2015a0bc

0801771c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017720:	4606      	mov	r6, r0
 8017722:	b09d      	sub	sp, #116	@ 0x74
 8017724:	a803      	add	r0, sp, #12
 8017726:	4614      	mov	r4, r2
 8017728:	468a      	mov	sl, r1
 801772a:	461d      	mov	r5, r3
 801772c:	f000 fd72 	bl	8018214 <_ZN8touchgfx12TextProviderC1Ev>
 8017730:	6833      	ldr	r3, [r6, #0]
 8017732:	4630      	mov	r0, r6
 8017734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017736:	4798      	blx	r3
 8017738:	6833      	ldr	r3, [r6, #0]
 801773a:	4607      	mov	r7, r0
 801773c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801773e:	4630      	mov	r0, r6
 8017740:	4798      	blx	r3
 8017742:	462a      	mov	r2, r5
 8017744:	2500      	movs	r5, #0
 8017746:	9000      	str	r0, [sp, #0]
 8017748:	4621      	mov	r1, r4
 801774a:	463b      	mov	r3, r7
 801774c:	a803      	add	r0, sp, #12
 801774e:	f000 fdb4 	bl	80182ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017752:	462c      	mov	r4, r5
 8017754:	46a9      	mov	r9, r5
 8017756:	46a8      	mov	r8, r5
 8017758:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801775c:	2300      	movs	r3, #0
 801775e:	9302      	str	r3, [sp, #8]
 8017760:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017764:	429c      	cmp	r4, r3
 8017766:	d002      	beq.n	801776e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017768:	455c      	cmp	r4, fp
 801776a:	bf18      	it	ne
 801776c:	4625      	movne	r5, r4
 801776e:	ab02      	add	r3, sp, #8
 8017770:	4632      	mov	r2, r6
 8017772:	4651      	mov	r1, sl
 8017774:	a803      	add	r0, sp, #12
 8017776:	f001 f88f 	bl	8018898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801777a:	4604      	mov	r4, r0
 801777c:	b108      	cbz	r0, 8017782 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801777e:	280a      	cmp	r0, #10
 8017780:	d10a      	bne.n	8017798 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017782:	45c1      	cmp	r9, r8
 8017784:	bf38      	it	cc
 8017786:	46c1      	movcc	r9, r8
 8017788:	f04f 0800 	mov.w	r8, #0
 801778c:	2c00      	cmp	r4, #0
 801778e:	d1e5      	bne.n	801775c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017790:	4648      	mov	r0, r9
 8017792:	b01d      	add	sp, #116	@ 0x74
 8017794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017798:	9a02      	ldr	r2, [sp, #8]
 801779a:	2a00      	cmp	r2, #0
 801779c:	d0de      	beq.n	801775c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801779e:	7b57      	ldrb	r7, [r2, #13]
 80177a0:	6833      	ldr	r3, [r6, #0]
 80177a2:	007f      	lsls	r7, r7, #1
 80177a4:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80177a8:	7a97      	ldrb	r7, [r2, #10]
 80177aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177ac:	4307      	orrs	r7, r0
 80177ae:	4629      	mov	r1, r5
 80177b0:	4630      	mov	r0, r6
 80177b2:	8894      	ldrh	r4, [r2, #4]
 80177b4:	4798      	blx	r3
 80177b6:	4438      	add	r0, r7
 80177b8:	4480      	add	r8, r0
 80177ba:	fa1f f888 	uxth.w	r8, r8
 80177be:	e7e5      	b.n	801778c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080177c0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80177c0:	b508      	push	{r3, lr}
 80177c2:	6803      	ldr	r3, [r0, #0]
 80177c4:	68db      	ldr	r3, [r3, #12]
 80177c6:	4798      	blx	r3
 80177c8:	b128      	cbz	r0, 80177d6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80177ca:	7b43      	ldrb	r3, [r0, #13]
 80177cc:	7a80      	ldrb	r0, [r0, #10]
 80177ce:	005b      	lsls	r3, r3, #1
 80177d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80177d4:	4318      	orrs	r0, r3
 80177d6:	bd08      	pop	{r3, pc}

080177d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80177d8:	b40e      	push	{r1, r2, r3}
 80177da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177dc:	4605      	mov	r5, r0
 80177de:	b09e      	sub	sp, #120	@ 0x78
 80177e0:	ab23      	add	r3, sp, #140	@ 0x8c
 80177e2:	f853 4b04 	ldr.w	r4, [r3], #4
 80177e6:	a805      	add	r0, sp, #20
 80177e8:	9303      	str	r3, [sp, #12]
 80177ea:	f000 fd13 	bl	8018214 <_ZN8touchgfx12TextProviderC1Ev>
 80177ee:	682b      	ldr	r3, [r5, #0]
 80177f0:	4628      	mov	r0, r5
 80177f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80177f4:	4798      	blx	r3
 80177f6:	682b      	ldr	r3, [r5, #0]
 80177f8:	4606      	mov	r6, r0
 80177fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80177fc:	4628      	mov	r0, r5
 80177fe:	4798      	blx	r3
 8017800:	4621      	mov	r1, r4
 8017802:	2400      	movs	r4, #0
 8017804:	4633      	mov	r3, r6
 8017806:	9000      	str	r0, [sp, #0]
 8017808:	9a03      	ldr	r2, [sp, #12]
 801780a:	ae1e      	add	r6, sp, #120	@ 0x78
 801780c:	a805      	add	r0, sp, #20
 801780e:	f000 fd54 	bl	80182ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017812:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017816:	4633      	mov	r3, r6
 8017818:	462a      	mov	r2, r5
 801781a:	4621      	mov	r1, r4
 801781c:	a805      	add	r0, sp, #20
 801781e:	f001 f83b 	bl	8018898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017822:	b1f0      	cbz	r0, 8017862 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8017824:	280a      	cmp	r0, #10
 8017826:	d018      	beq.n	801785a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8017828:	9f04      	ldr	r7, [sp, #16]
 801782a:	b1b7      	cbz	r7, 801785a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801782c:	7b78      	ldrb	r0, [r7, #13]
 801782e:	7a3b      	ldrb	r3, [r7, #8]
 8017830:	00c1      	lsls	r1, r0, #3
 8017832:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017836:	4319      	orrs	r1, r3
 8017838:	0643      	lsls	r3, r0, #25
 801783a:	bf44      	itt	mi
 801783c:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8017840:	b219      	sxthmi	r1, r3
 8017842:	0100      	lsls	r0, r0, #4
 8017844:	79fb      	ldrb	r3, [r7, #7]
 8017846:	88ea      	ldrh	r2, [r5, #6]
 8017848:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801784c:	4303      	orrs	r3, r0
 801784e:	4413      	add	r3, r2
 8017850:	1a5b      	subs	r3, r3, r1
 8017852:	b21b      	sxth	r3, r3
 8017854:	429c      	cmp	r4, r3
 8017856:	bfb8      	it	lt
 8017858:	461c      	movlt	r4, r3
 801785a:	4633      	mov	r3, r6
 801785c:	462a      	mov	r2, r5
 801785e:	2100      	movs	r1, #0
 8017860:	e7dc      	b.n	801781c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017862:	b2a0      	uxth	r0, r4
 8017864:	b01e      	add	sp, #120	@ 0x78
 8017866:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801786a:	b003      	add	sp, #12
 801786c:	4770      	bx	lr

0801786e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801786e:	7a43      	ldrb	r3, [r0, #9]
 8017870:	8880      	ldrh	r0, [r0, #4]
 8017872:	4418      	add	r0, r3
 8017874:	b280      	uxth	r0, r0
 8017876:	4770      	bx	lr

08017878 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017878:	6803      	ldr	r3, [r0, #0]
 801787a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801787c:	4718      	bx	r3

0801787e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801787e:	b40e      	push	{r1, r2, r3}
 8017880:	b570      	push	{r4, r5, r6, lr}
 8017882:	4604      	mov	r4, r0
 8017884:	b09d      	sub	sp, #116	@ 0x74
 8017886:	ab21      	add	r3, sp, #132	@ 0x84
 8017888:	f853 5b04 	ldr.w	r5, [r3], #4
 801788c:	a803      	add	r0, sp, #12
 801788e:	9302      	str	r3, [sp, #8]
 8017890:	f000 fcc0 	bl	8018214 <_ZN8touchgfx12TextProviderC1Ev>
 8017894:	6823      	ldr	r3, [r4, #0]
 8017896:	4620      	mov	r0, r4
 8017898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801789a:	4798      	blx	r3
 801789c:	6823      	ldr	r3, [r4, #0]
 801789e:	4606      	mov	r6, r0
 80178a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80178a2:	4620      	mov	r0, r4
 80178a4:	4798      	blx	r3
 80178a6:	4633      	mov	r3, r6
 80178a8:	9000      	str	r0, [sp, #0]
 80178aa:	9a02      	ldr	r2, [sp, #8]
 80178ac:	4629      	mov	r1, r5
 80178ae:	a803      	add	r0, sp, #12
 80178b0:	f000 fd03 	bl	80182ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80178b4:	a803      	add	r0, sp, #12
 80178b6:	f001 f871 	bl	801899c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80178ba:	2401      	movs	r4, #1
 80178bc:	b2a3      	uxth	r3, r4
 80178be:	b140      	cbz	r0, 80178d2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 80178c0:	280a      	cmp	r0, #10
 80178c2:	bf08      	it	eq
 80178c4:	3301      	addeq	r3, #1
 80178c6:	a803      	add	r0, sp, #12
 80178c8:	bf08      	it	eq
 80178ca:	b21c      	sxtheq	r4, r3
 80178cc:	f001 f866 	bl	801899c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80178d0:	e7f4      	b.n	80178bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80178d2:	4618      	mov	r0, r3
 80178d4:	b01d      	add	sp, #116	@ 0x74
 80178d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178da:	b003      	add	sp, #12
 80178dc:	4770      	bx	lr

080178de <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80178de:	b40e      	push	{r1, r2, r3}
 80178e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178e2:	4604      	mov	r4, r0
 80178e4:	b09e      	sub	sp, #120	@ 0x78
 80178e6:	ab23      	add	r3, sp, #140	@ 0x8c
 80178e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80178ec:	a805      	add	r0, sp, #20
 80178ee:	9303      	str	r3, [sp, #12]
 80178f0:	f000 fc90 	bl	8018214 <_ZN8touchgfx12TextProviderC1Ev>
 80178f4:	6823      	ldr	r3, [r4, #0]
 80178f6:	4620      	mov	r0, r4
 80178f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80178fa:	4798      	blx	r3
 80178fc:	6823      	ldr	r3, [r4, #0]
 80178fe:	4606      	mov	r6, r0
 8017900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017902:	4620      	mov	r0, r4
 8017904:	4798      	blx	r3
 8017906:	4633      	mov	r3, r6
 8017908:	4629      	mov	r1, r5
 801790a:	9000      	str	r0, [sp, #0]
 801790c:	9a03      	ldr	r2, [sp, #12]
 801790e:	a805      	add	r0, sp, #20
 8017910:	f000 fcd3 	bl	80182ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017914:	2100      	movs	r1, #0
 8017916:	ad1e      	add	r5, sp, #120	@ 0x78
 8017918:	f845 1d68 	str.w	r1, [r5, #-104]!
 801791c:	462b      	mov	r3, r5
 801791e:	4622      	mov	r2, r4
 8017920:	a805      	add	r0, sp, #20
 8017922:	f000 ffb9 	bl	8018898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017926:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801792a:	b1d8      	cbz	r0, 8017964 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801792c:	280a      	cmp	r0, #10
 801792e:	d012      	beq.n	8017956 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017930:	9804      	ldr	r0, [sp, #16]
 8017932:	b180      	cbz	r0, 8017956 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017934:	7b47      	ldrb	r7, [r0, #13]
 8017936:	88e2      	ldrh	r2, [r4, #6]
 8017938:	00fb      	lsls	r3, r7, #3
 801793a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801793e:	7a03      	ldrb	r3, [r0, #8]
 8017940:	430b      	orrs	r3, r1
 8017942:	0679      	lsls	r1, r7, #25
 8017944:	bf44      	itt	mi
 8017946:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801794a:	b21b      	sxthmi	r3, r3
 801794c:	1ad3      	subs	r3, r2, r3
 801794e:	b21b      	sxth	r3, r3
 8017950:	429e      	cmp	r6, r3
 8017952:	bfa8      	it	ge
 8017954:	461e      	movge	r6, r3
 8017956:	462b      	mov	r3, r5
 8017958:	4622      	mov	r2, r4
 801795a:	2100      	movs	r1, #0
 801795c:	a805      	add	r0, sp, #20
 801795e:	f000 ff9b 	bl	8018898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017962:	e7e2      	b.n	801792a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8017964:	4630      	mov	r0, r6
 8017966:	b01e      	add	sp, #120	@ 0x78
 8017968:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801796c:	b003      	add	sp, #12
 801796e:	4770      	bx	lr

08017970 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017970:	b513      	push	{r0, r1, r4, lr}
 8017972:	2400      	movs	r4, #0
 8017974:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017978:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801797c:	6803      	ldr	r3, [r0, #0]
 801797e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017982:	9400      	str	r4, [sp, #0]
 8017984:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017988:	691b      	ldr	r3, [r3, #16]
 801798a:	4669      	mov	r1, sp
 801798c:	4798      	blx	r3
 801798e:	b002      	add	sp, #8
 8017990:	bd10      	pop	{r4, pc}

08017992 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017992:	b538      	push	{r3, r4, r5, lr}
 8017994:	460c      	mov	r4, r1
 8017996:	4605      	mov	r5, r0
 8017998:	680b      	ldr	r3, [r1, #0]
 801799a:	68db      	ldr	r3, [r3, #12]
 801799c:	4798      	blx	r3
 801799e:	6823      	ldr	r3, [r4, #0]
 80179a0:	4620      	mov	r0, r4
 80179a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179a4:	4629      	mov	r1, r5
 80179a6:	4798      	blx	r3
 80179a8:	4628      	mov	r0, r5
 80179aa:	bd38      	pop	{r3, r4, r5, pc}

080179ac <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80179ac:	b410      	push	{r4}
 80179ae:	880a      	ldrh	r2, [r1, #0]
 80179b0:	8884      	ldrh	r4, [r0, #4]
 80179b2:	4422      	add	r2, r4
 80179b4:	800a      	strh	r2, [r1, #0]
 80179b6:	88c4      	ldrh	r4, [r0, #6]
 80179b8:	884a      	ldrh	r2, [r1, #2]
 80179ba:	4422      	add	r2, r4
 80179bc:	804a      	strh	r2, [r1, #2]
 80179be:	6940      	ldr	r0, [r0, #20]
 80179c0:	b120      	cbz	r0, 80179cc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80179c2:	6803      	ldr	r3, [r0, #0]
 80179c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80179ca:	4718      	bx	r3
 80179cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179d0:	4770      	bx	lr

080179d2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80179d2:	b570      	push	{r4, r5, r6, lr}
 80179d4:	460c      	mov	r4, r1
 80179d6:	8882      	ldrh	r2, [r0, #4]
 80179d8:	880b      	ldrh	r3, [r1, #0]
 80179da:	4605      	mov	r5, r0
 80179dc:	4413      	add	r3, r2
 80179de:	800b      	strh	r3, [r1, #0]
 80179e0:	88c2      	ldrh	r2, [r0, #6]
 80179e2:	884b      	ldrh	r3, [r1, #2]
 80179e4:	4413      	add	r3, r2
 80179e6:	804b      	strh	r3, [r1, #2]
 80179e8:	1d01      	adds	r1, r0, #4
 80179ea:	4620      	mov	r0, r4
 80179ec:	f7fc fed8 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 80179f0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	dd0b      	ble.n	8017a10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80179f8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	dd07      	ble.n	8017a10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017a00:	6968      	ldr	r0, [r5, #20]
 8017a02:	b128      	cbz	r0, 8017a10 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017a04:	6803      	ldr	r3, [r0, #0]
 8017a06:	4621      	mov	r1, r4
 8017a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a0e:	4718      	bx	r3
 8017a10:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017a14:	b570      	push	{r4, r5, r6, lr}
 8017a16:	460c      	mov	r4, r1
 8017a18:	8882      	ldrh	r2, [r0, #4]
 8017a1a:	880b      	ldrh	r3, [r1, #0]
 8017a1c:	4605      	mov	r5, r0
 8017a1e:	4413      	add	r3, r2
 8017a20:	800b      	strh	r3, [r1, #0]
 8017a22:	88c2      	ldrh	r2, [r0, #6]
 8017a24:	884b      	ldrh	r3, [r1, #2]
 8017a26:	4413      	add	r3, r2
 8017a28:	804b      	strh	r3, [r1, #2]
 8017a2a:	1d01      	adds	r1, r0, #4
 8017a2c:	4620      	mov	r0, r4
 8017a2e:	f7fc feb7 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 8017a32:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	dd19      	ble.n	8017a6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017a3a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	dd15      	ble.n	8017a6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017a42:	6968      	ldr	r0, [r5, #20]
 8017a44:	b128      	cbz	r0, 8017a52 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017a46:	6803      	ldr	r3, [r0, #0]
 8017a48:	4621      	mov	r1, r4
 8017a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a4e:	691b      	ldr	r3, [r3, #16]
 8017a50:	4718      	bx	r3
 8017a52:	4b07      	ldr	r3, [pc, #28]	@ (8017a70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	3304      	adds	r3, #4
 8017a58:	429d      	cmp	r5, r3
 8017a5a:	d108      	bne.n	8017a6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017a5c:	f7fe ff12 	bl	8016884 <_ZN8touchgfx11Application11getInstanceEv>
 8017a60:	6803      	ldr	r3, [r0, #0]
 8017a62:	6821      	ldr	r1, [r4, #0]
 8017a64:	6862      	ldr	r2, [r4, #4]
 8017a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a6c:	4718      	bx	r3
 8017a6e:	bd70      	pop	{r4, r5, r6, pc}
 8017a70:	2015a0b4 	.word	0x2015a0b4

08017a74 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017a74:	b570      	push	{r4, r5, r6, lr}
 8017a76:	4604      	mov	r4, r0
 8017a78:	4616      	mov	r6, r2
 8017a7a:	460d      	mov	r5, r1
 8017a7c:	b901      	cbnz	r1, 8017a80 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017a7e:	b192      	cbz	r2, 8017aa6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017a80:	6823      	ldr	r3, [r4, #0]
 8017a82:	4620      	mov	r0, r4
 8017a84:	699b      	ldr	r3, [r3, #24]
 8017a86:	4798      	blx	r3
 8017a88:	88e2      	ldrh	r2, [r4, #6]
 8017a8a:	88a1      	ldrh	r1, [r4, #4]
 8017a8c:	4432      	add	r2, r6
 8017a8e:	4429      	add	r1, r5
 8017a90:	4620      	mov	r0, r4
 8017a92:	b212      	sxth	r2, r2
 8017a94:	b209      	sxth	r1, r1
 8017a96:	f7f9 fdaa 	bl	80115ee <_ZN8touchgfx8Drawable5setXYEss>
 8017a9a:	6823      	ldr	r3, [r4, #0]
 8017a9c:	4620      	mov	r0, r4
 8017a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017aa2:	699b      	ldr	r3, [r3, #24]
 8017aa4:	4718      	bx	r3
 8017aa6:	bd70      	pop	{r4, r5, r6, pc}

08017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017aa8:	b510      	push	{r4, lr}
 8017aaa:	2300      	movs	r3, #0
 8017aac:	4604      	mov	r4, r0
 8017aae:	4608      	mov	r0, r1
 8017ab0:	8023      	strh	r3, [r4, #0]
 8017ab2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017ab6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017aba:	8063      	strh	r3, [r4, #2]
 8017abc:	6803      	ldr	r3, [r0, #0]
 8017abe:	80a1      	strh	r1, [r4, #4]
 8017ac0:	80e2      	strh	r2, [r4, #6]
 8017ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ac4:	4621      	mov	r1, r4
 8017ac6:	4798      	blx	r3
 8017ac8:	4620      	mov	r0, r4
 8017aca:	bd10      	pop	{r4, pc}

08017acc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017acc:	b530      	push	{r4, r5, lr}
 8017ace:	8083      	strh	r3, [r0, #4]
 8017ad0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017ad4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017ad8:	80c3      	strh	r3, [r0, #6]
 8017ada:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8017ade:	6141      	str	r1, [r0, #20]
 8017ae0:	7203      	strb	r3, [r0, #8]
 8017ae2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017ae6:	8302      	strh	r2, [r0, #24]
 8017ae8:	7243      	strb	r3, [r0, #9]
 8017aea:	7a83      	ldrb	r3, [r0, #10]
 8017aec:	f365 0306 	bfi	r3, r5, #0, #7
 8017af0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8017af4:	f365 13c7 	bfi	r3, r5, #7, #1
 8017af8:	7283      	strb	r3, [r0, #10]
 8017afa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8017afe:	72c3      	strb	r3, [r0, #11]
 8017b00:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017b04:	7303      	strb	r3, [r0, #12]
 8017b06:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017b0a:	81c3      	strh	r3, [r0, #14]
 8017b0c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8017b10:	8203      	strh	r3, [r0, #16]
 8017b12:	4b01      	ldr	r3, [pc, #4]	@ (8017b18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8017b14:	6003      	str	r3, [r0, #0]
 8017b16:	bd30      	pop	{r4, r5, pc}
 8017b18:	0802e508 	.word	0x0802e508

08017b1c <_ZNK8touchgfx9ConstFont4findEt>:
 8017b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b1e:	6944      	ldr	r4, [r0, #20]
 8017b20:	b3bc      	cbz	r4, 8017b92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017b22:	88a3      	ldrh	r3, [r4, #4]
 8017b24:	8b02      	ldrh	r2, [r0, #24]
 8017b26:	1acb      	subs	r3, r1, r3
 8017b28:	f102 32ff 	add.w	r2, r2, #4294967295
 8017b2c:	d431      	bmi.n	8017b92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017b2e:	4293      	cmp	r3, r2
 8017b30:	dd0c      	ble.n	8017b4c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8017b32:	230e      	movs	r3, #14
 8017b34:	fb03 4302 	mla	r3, r3, r2, r4
 8017b38:	889b      	ldrh	r3, [r3, #4]
 8017b3a:	1a5b      	subs	r3, r3, r1
 8017b3c:	1ad3      	subs	r3, r2, r3
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	db27      	blt.n	8017b92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	bfbc      	itt	lt
 8017b46:	2302      	movlt	r3, #2
 8017b48:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017b4c:	2500      	movs	r5, #0
 8017b4e:	260e      	movs	r6, #14
 8017b50:	4295      	cmp	r5, r2
 8017b52:	dc1e      	bgt.n	8017b92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017b54:	fb06 4003 	mla	r0, r6, r3, r4
 8017b58:	8887      	ldrh	r7, [r0, #4]
 8017b5a:	42b9      	cmp	r1, r7
 8017b5c:	d01a      	beq.n	8017b94 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017b5e:	d20d      	bcs.n	8017b7c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017b60:	1e5a      	subs	r2, r3, #1
 8017b62:	4295      	cmp	r5, r2
 8017b64:	dc15      	bgt.n	8017b92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017b66:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8017b6a:	1a5b      	subs	r3, r3, r1
 8017b6c:	1ad3      	subs	r3, r2, r3
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	db0f      	blt.n	8017b92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017b72:	429d      	cmp	r5, r3
 8017b74:	ddec      	ble.n	8017b50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017b76:	1953      	adds	r3, r2, r5
 8017b78:	105b      	asrs	r3, r3, #1
 8017b7a:	e7e9      	b.n	8017b50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017b7c:	1c5d      	adds	r5, r3, #1
 8017b7e:	42aa      	cmp	r2, r5
 8017b80:	db07      	blt.n	8017b92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017b82:	8a43      	ldrh	r3, [r0, #18]
 8017b84:	1acb      	subs	r3, r1, r3
 8017b86:	442b      	add	r3, r5
 8017b88:	429d      	cmp	r5, r3
 8017b8a:	dc02      	bgt.n	8017b92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	dadf      	bge.n	8017b50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017b90:	e7f1      	b.n	8017b76 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8017b92:	2000      	movs	r0, #0
 8017b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017b96 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b98:	4604      	mov	r4, r0
 8017b9a:	4617      	mov	r7, r2
 8017b9c:	461e      	mov	r6, r3
 8017b9e:	b911      	cbnz	r1, 8017ba6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017ba0:	2500      	movs	r5, #0
 8017ba2:	4628      	mov	r0, r5
 8017ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ba6:	290a      	cmp	r1, #10
 8017ba8:	d0fa      	beq.n	8017ba0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017baa:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8017bae:	4291      	cmp	r1, r2
 8017bb0:	d0f6      	beq.n	8017ba0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017bb2:	f242 020b 	movw	r2, #8203	@ 0x200b
 8017bb6:	4291      	cmp	r1, r2
 8017bb8:	d0f2      	beq.n	8017ba0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017bba:	f7ff ffaf 	bl	8017b1c <_ZNK8touchgfx9ConstFont4findEt>
 8017bbe:	4605      	mov	r5, r0
 8017bc0:	b950      	cbnz	r0, 8017bd8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8017bc2:	6823      	ldr	r3, [r4, #0]
 8017bc4:	4620      	mov	r0, r4
 8017bc6:	691b      	ldr	r3, [r3, #16]
 8017bc8:	4798      	blx	r3
 8017bca:	4601      	mov	r1, r0
 8017bcc:	4620      	mov	r0, r4
 8017bce:	f7ff ffa5 	bl	8017b1c <_ZNK8touchgfx9ConstFont4findEt>
 8017bd2:	4605      	mov	r5, r0
 8017bd4:	2800      	cmp	r0, #0
 8017bd6:	d0e3      	beq.n	8017ba0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017bd8:	6823      	ldr	r3, [r4, #0]
 8017bda:	4629      	mov	r1, r5
 8017bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017bde:	4620      	mov	r0, r4
 8017be0:	4798      	blx	r3
 8017be2:	6038      	str	r0, [r7, #0]
 8017be4:	6823      	ldr	r3, [r4, #0]
 8017be6:	4620      	mov	r0, r4
 8017be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bea:	4798      	blx	r3
 8017bec:	7030      	strb	r0, [r6, #0]
 8017bee:	e7d8      	b.n	8017ba2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08017bf0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8017bf0:	2000      	movs	r0, #0
 8017bf2:	4770      	bx	lr

08017bf4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8017bf4:	2001      	movs	r0, #1
 8017bf6:	4770      	bx	lr

08017bf8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8017bf8:	2002      	movs	r0, #2
 8017bfa:	4770      	bx	lr

08017bfc <_ZN8touchgfx12GestureEventD1Ev>:
 8017bfc:	4770      	bx	lr

08017bfe <_ZN8touchgfx9DragEventD1Ev>:
 8017bfe:	4770      	bx	lr

08017c00 <_ZN8touchgfx10ClickEventD1Ev>:
 8017c00:	4770      	bx	lr

08017c02 <_ZN8touchgfx10ClickEventD0Ev>:
 8017c02:	b510      	push	{r4, lr}
 8017c04:	4604      	mov	r4, r0
 8017c06:	210c      	movs	r1, #12
 8017c08:	f013 ffa9 	bl	802bb5e <_ZdlPvj>
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	bd10      	pop	{r4, pc}

08017c10 <_ZN8touchgfx9DragEventD0Ev>:
 8017c10:	b510      	push	{r4, lr}
 8017c12:	4604      	mov	r4, r0
 8017c14:	2110      	movs	r1, #16
 8017c16:	f013 ffa2 	bl	802bb5e <_ZdlPvj>
 8017c1a:	4620      	mov	r0, r4
 8017c1c:	bd10      	pop	{r4, pc}

08017c1e <_ZN8touchgfx12GestureEventD0Ev>:
 8017c1e:	b510      	push	{r4, lr}
 8017c20:	4604      	mov	r4, r0
 8017c22:	210c      	movs	r1, #12
 8017c24:	f013 ff9b 	bl	802bb5e <_ZdlPvj>
 8017c28:	4620      	mov	r0, r4
 8017c2a:	bd10      	pop	{r4, pc}

08017c2c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017c2c:	b530      	push	{r4, r5, lr}
 8017c2e:	460d      	mov	r5, r1
 8017c30:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8017c32:	b087      	sub	sp, #28
 8017c34:	4604      	mov	r4, r0
 8017c36:	b301      	cbz	r1, 8017c7a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017c38:	a801      	add	r0, sp, #4
 8017c3a:	f7ff ff35 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c3e:	892a      	ldrh	r2, [r5, #8]
 8017c40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017c44:	7928      	ldrb	r0, [r5, #4]
 8017c46:	1ad2      	subs	r2, r2, r3
 8017c48:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017c4a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017c4e:	441a      	add	r2, r3
 8017c50:	896b      	ldrh	r3, [r5, #10]
 8017c52:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017c56:	f88d 0010 	strb.w	r0, [sp, #16]
 8017c5a:	1b5b      	subs	r3, r3, r5
 8017c5c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8017c5e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017c60:	442b      	add	r3, r5
 8017c62:	4d07      	ldr	r5, [pc, #28]	@ (8017c80 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017c64:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017c68:	9503      	str	r5, [sp, #12]
 8017c6a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017c6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017c72:	6803      	ldr	r3, [r0, #0]
 8017c74:	a903      	add	r1, sp, #12
 8017c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017c78:	4798      	blx	r3
 8017c7a:	b007      	add	sp, #28
 8017c7c:	bd30      	pop	{r4, r5, pc}
 8017c7e:	bf00      	nop
 8017c80:	0802e598 	.word	0x0802e598

08017c84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c88:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017c8a:	b08a      	sub	sp, #40	@ 0x28
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	460d      	mov	r5, r1
 8017c90:	b113      	cbz	r3, 8017c98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8017c92:	790b      	ldrb	r3, [r1, #4]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d044      	beq.n	8017d22 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017c98:	f104 0804 	add.w	r8, r4, #4
 8017c9c:	4641      	mov	r1, r8
 8017c9e:	a803      	add	r0, sp, #12
 8017ca0:	f7ff ff02 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017ca4:	792b      	ldrb	r3, [r5, #4]
 8017ca6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017caa:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8017cae:	b983      	cbnz	r3, 8017cd2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8017cb0:	892a      	ldrh	r2, [r5, #8]
 8017cb2:	88e9      	ldrh	r1, [r5, #6]
 8017cb4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8017cb8:	1b92      	subs	r2, r2, r6
 8017cba:	1bc9      	subs	r1, r1, r7
 8017cbc:	9301      	str	r3, [sp, #4]
 8017cbe:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8017cc2:	9300      	str	r3, [sp, #0]
 8017cc4:	b212      	sxth	r2, r2
 8017cc6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8017cca:	b209      	sxth	r1, r1
 8017ccc:	4640      	mov	r0, r8
 8017cce:	f7fc fc87 	bl	80145e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8017cd2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017cd4:	b329      	cbz	r1, 8017d22 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017cd6:	a805      	add	r0, sp, #20
 8017cd8:	f7ff fee6 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017cdc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017ce0:	792b      	ldrb	r3, [r5, #4]
 8017ce2:	1abf      	subs	r7, r7, r2
 8017ce4:	88ea      	ldrh	r2, [r5, #6]
 8017ce6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017ce8:	4417      	add	r7, r2
 8017cea:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8017cec:	f88d 3020 	strb.w	r3, [sp, #32]
 8017cf0:	4417      	add	r7, r2
 8017cf2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017cf6:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8017cfa:	1ab6      	subs	r6, r6, r2
 8017cfc:	892a      	ldrh	r2, [r5, #8]
 8017cfe:	a907      	add	r1, sp, #28
 8017d00:	4416      	add	r6, r2
 8017d02:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017d04:	4416      	add	r6, r2
 8017d06:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8017d0a:	2600      	movs	r6, #0
 8017d0c:	4a06      	ldr	r2, [pc, #24]	@ (8017d28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8017d0e:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8017d12:	9207      	str	r2, [sp, #28]
 8017d14:	6803      	ldr	r3, [r0, #0]
 8017d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d18:	4798      	blx	r3
 8017d1a:	792b      	ldrb	r3, [r5, #4]
 8017d1c:	b10b      	cbz	r3, 8017d22 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017d1e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8017d22:	b00a      	add	sp, #40	@ 0x28
 8017d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d28:	0802e570 	.word	0x0802e570

08017d2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d30:	460c      	mov	r4, r1
 8017d32:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8017d34:	b088      	sub	sp, #32
 8017d36:	4605      	mov	r5, r0
 8017d38:	2900      	cmp	r1, #0
 8017d3a:	d06d      	beq.n	8017e18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017d3c:	4668      	mov	r0, sp
 8017d3e:	f7ff feb3 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d42:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8017d44:	88e3      	ldrh	r3, [r4, #6]
 8017d46:	f9bd 8000 	ldrsh.w	r8, [sp]
 8017d4a:	440b      	add	r3, r1
 8017d4c:	b21b      	sxth	r3, r3
 8017d4e:	4543      	cmp	r3, r8
 8017d50:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8017d54:	db31      	blt.n	8017dba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d56:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8017d5a:	44c4      	add	ip, r8
 8017d5c:	fa0f fc8c 	sxth.w	ip, ip
 8017d60:	4563      	cmp	r3, ip
 8017d62:	da2a      	bge.n	8017dba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d64:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8017d66:	8926      	ldrh	r6, [r4, #8]
 8017d68:	4416      	add	r6, r2
 8017d6a:	b236      	sxth	r6, r6
 8017d6c:	42be      	cmp	r6, r7
 8017d6e:	db24      	blt.n	8017dba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017d74:	4438      	add	r0, r7
 8017d76:	b200      	sxth	r0, r0
 8017d78:	4286      	cmp	r6, r0
 8017d7a:	da1e      	bge.n	8017dba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d7c:	8963      	ldrh	r3, [r4, #10]
 8017d7e:	4419      	add	r1, r3
 8017d80:	b209      	sxth	r1, r1
 8017d82:	4541      	cmp	r1, r8
 8017d84:	db08      	blt.n	8017d98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017d86:	4561      	cmp	r1, ip
 8017d88:	da06      	bge.n	8017d98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017d8a:	89a3      	ldrh	r3, [r4, #12]
 8017d8c:	441a      	add	r2, r3
 8017d8e:	b212      	sxth	r2, r2
 8017d90:	42ba      	cmp	r2, r7
 8017d92:	db01      	blt.n	8017d98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017d94:	4282      	cmp	r2, r0
 8017d96:	db10      	blt.n	8017dba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d98:	4b21      	ldr	r3, [pc, #132]	@ (8017e20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8017d9a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017d9c:	9304      	str	r3, [sp, #16]
 8017d9e:	2302      	movs	r3, #2
 8017da0:	f88d 3014 	strb.w	r3, [sp, #20]
 8017da4:	2300      	movs	r3, #0
 8017da6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017daa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017dae:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017db2:	6803      	ldr	r3, [r0, #0]
 8017db4:	a904      	add	r1, sp, #16
 8017db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017db8:	4798      	blx	r3
 8017dba:	1d29      	adds	r1, r5, #4
 8017dbc:	a802      	add	r0, sp, #8
 8017dbe:	f7ff fe73 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017dc2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017dc6:	88e0      	ldrh	r0, [r4, #6]
 8017dc8:	eba3 0808 	sub.w	r8, r3, r8
 8017dcc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017dd0:	7921      	ldrb	r1, [r4, #4]
 8017dd2:	1bdf      	subs	r7, r3, r7
 8017dd4:	b2bb      	uxth	r3, r7
 8017dd6:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8017dda:	fa1f f888 	uxth.w	r8, r8
 8017dde:	8922      	ldrh	r2, [r4, #8]
 8017de0:	8967      	ldrh	r7, [r4, #10]
 8017de2:	89a4      	ldrh	r4, [r4, #12]
 8017de4:	4440      	add	r0, r8
 8017de6:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8017de8:	4460      	add	r0, ip
 8017dea:	441a      	add	r2, r3
 8017dec:	44b8      	add	r8, r7
 8017dee:	4423      	add	r3, r4
 8017df0:	4c0c      	ldr	r4, [pc, #48]	@ (8017e24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017df2:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017df6:	4433      	add	r3, r6
 8017df8:	4432      	add	r2, r6
 8017dfa:	44e0      	add	r8, ip
 8017dfc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017dfe:	f88d 1014 	strb.w	r1, [sp, #20]
 8017e02:	9404      	str	r4, [sp, #16]
 8017e04:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017e08:	f8ad 801a 	strh.w	r8, [sp, #26]
 8017e0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017e10:	6803      	ldr	r3, [r0, #0]
 8017e12:	a904      	add	r1, sp, #16
 8017e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e16:	4798      	blx	r3
 8017e18:	b008      	add	sp, #32
 8017e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e1e:	bf00      	nop
 8017e20:	0802e570 	.word	0x0802e570
 8017e24:	0802e584 	.word	0x0802e584

08017e28 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017e30:	3201      	adds	r2, #1
 8017e32:	d112      	bne.n	8017e5a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017e34:	2500      	movs	r5, #0
 8017e36:	9500      	str	r5, [sp, #0]
 8017e38:	466d      	mov	r5, sp
 8017e3a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017e3e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e42:	6803      	ldr	r3, [r0, #0]
 8017e44:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017e48:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017e4c:	4629      	mov	r1, r5
 8017e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e50:	4798      	blx	r3
 8017e52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017e56:	e884 0003 	stmia.w	r4, {r0, r1}
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	b003      	add	sp, #12
 8017e5e:	bd30      	pop	{r4, r5, pc}

08017e60 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017e60:	b513      	push	{r0, r1, r4, lr}
 8017e62:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8017e66:	4604      	mov	r4, r0
 8017e68:	3301      	adds	r3, #1
 8017e6a:	d109      	bne.n	8017e80 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017e6c:	4601      	mov	r1, r0
 8017e6e:	4668      	mov	r0, sp
 8017e70:	f7ff fe1a 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e74:	f8bd 3000 	ldrh.w	r3, [sp]
 8017e78:	8423      	strh	r3, [r4, #32]
 8017e7a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017e7e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8017e80:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017e84:	b002      	add	sp, #8
 8017e86:	bd10      	pop	{r4, pc}

08017e88 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017e88:	b513      	push	{r0, r1, r4, lr}
 8017e8a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8017e8e:	4604      	mov	r4, r0
 8017e90:	3301      	adds	r3, #1
 8017e92:	d109      	bne.n	8017ea8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017e94:	4601      	mov	r1, r0
 8017e96:	4668      	mov	r0, sp
 8017e98:	f7ff fe06 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017ea0:	8423      	strh	r3, [r4, #32]
 8017ea2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017ea6:	8463      	strh	r3, [r4, #34]	@ 0x22
 8017ea8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8017eac:	b002      	add	sp, #8
 8017eae:	bd10      	pop	{r4, pc}

08017eb0 <_ZN8touchgfx6ScreenC1Ev>:
 8017eb0:	b570      	push	{r4, r5, r6, lr}
 8017eb2:	4605      	mov	r5, r0
 8017eb4:	4b16      	ldr	r3, [pc, #88]	@ (8017f10 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8017eb6:	2101      	movs	r1, #1
 8017eb8:	f845 3b04 	str.w	r3, [r5], #4
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	4604      	mov	r4, r0
 8017ec0:	8103      	strh	r3, [r0, #8]
 8017ec2:	8143      	strh	r3, [r0, #10]
 8017ec4:	8183      	strh	r3, [r0, #12]
 8017ec6:	81c3      	strh	r3, [r0, #14]
 8017ec8:	8203      	strh	r3, [r0, #16]
 8017eca:	8243      	strh	r3, [r0, #18]
 8017ecc:	8283      	strh	r3, [r0, #20]
 8017ece:	82c3      	strh	r3, [r0, #22]
 8017ed0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017ed4:	6203      	str	r3, [r0, #32]
 8017ed6:	8483      	strh	r3, [r0, #36]	@ 0x24
 8017ed8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017eda:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8017ede:	4a0d      	ldr	r2, [pc, #52]	@ (8017f14 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017ee0:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8017ee4:	6343      	str	r3, [r0, #52]	@ 0x34
 8017ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8017f18 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8017ee8:	6042      	str	r2, [r0, #4]
 8017eea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017eee:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8017ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8017f1c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017ef2:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8017ef6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017efa:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017efe:	4628      	mov	r0, r5
 8017f00:	4798      	blx	r3
 8017f02:	6863      	ldr	r3, [r4, #4]
 8017f04:	4628      	mov	r0, r5
 8017f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f08:	4631      	mov	r1, r6
 8017f0a:	4798      	blx	r3
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	bd70      	pop	{r4, r5, r6, pc}
 8017f10:	0802e5ac 	.word	0x0802e5ac
 8017f14:	0802e1a4 	.word	0x0802e1a4
 8017f18:	2015a06e 	.word	0x2015a06e
 8017f1c:	2015a06c 	.word	0x2015a06c

08017f20 <_ZN8touchgfx6Screen4drawEv>:
 8017f20:	b507      	push	{r0, r1, r2, lr}
 8017f22:	2100      	movs	r1, #0
 8017f24:	4b08      	ldr	r3, [pc, #32]	@ (8017f48 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017f26:	9100      	str	r1, [sp, #0]
 8017f28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f2c:	4b07      	ldr	r3, [pc, #28]	@ (8017f4c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017f2e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f36:	4669      	mov	r1, sp
 8017f38:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f3c:	6803      	ldr	r3, [r0, #0]
 8017f3e:	689b      	ldr	r3, [r3, #8]
 8017f40:	4798      	blx	r3
 8017f42:	b003      	add	sp, #12
 8017f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f48:	2015a06c 	.word	0x2015a06c
 8017f4c:	2015a06e 	.word	0x2015a06e

08017f50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f54:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017f58:	b089      	sub	sp, #36	@ 0x24
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	4680      	mov	r8, r0
 8017f5e:	460c      	mov	r4, r1
 8017f60:	4615      	mov	r5, r2
 8017f62:	dd0e      	ble.n	8017f82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017f64:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	dd0a      	ble.n	8017f82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017f6c:	4628      	mov	r0, r5
 8017f6e:	f7ff ff5b 	bl	8017e28 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017f72:	4621      	mov	r1, r4
 8017f74:	f7fe fba8 	bl	80166c8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017f78:	69eb      	ldr	r3, [r5, #28]
 8017f7a:	b928      	cbnz	r0, 8017f88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017f7c:	461d      	mov	r5, r3
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d1f4      	bne.n	8017f6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017f82:	b009      	add	sp, #36	@ 0x24
 8017f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f88:	ae04      	add	r6, sp, #16
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	f000 80b5 	beq.w	80180fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017f90:	682b      	ldr	r3, [r5, #0]
 8017f92:	4629      	mov	r1, r5
 8017f94:	68db      	ldr	r3, [r3, #12]
 8017f96:	a802      	add	r0, sp, #8
 8017f98:	4798      	blx	r3
 8017f9a:	4628      	mov	r0, r5
 8017f9c:	f7ff ff60 	bl	8017e60 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017fa0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017fa4:	4407      	add	r7, r0
 8017fa6:	4628      	mov	r0, r5
 8017fa8:	f7ff ff6e 	bl	8017e88 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017fac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017fb0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017fb4:	4418      	add	r0, r3
 8017fb6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017fba:	4621      	mov	r1, r4
 8017fbc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017fc0:	b23f      	sxth	r7, r7
 8017fc2:	4630      	mov	r0, r6
 8017fc4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017fc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017fcc:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017fd0:	f7fc fbe6 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	f7ff ff27 	bl	8017e28 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017fda:	4602      	mov	r2, r0
 8017fdc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017fe0:	ab06      	add	r3, sp, #24
 8017fe2:	e883 0003 	stmia.w	r3, {r0, r1}
 8017fe6:	4611      	mov	r1, r2
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7fc fbd9 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 8017fee:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017ff2:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017ff6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017ffa:	4299      	cmp	r1, r3
 8017ffc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018000:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018004:	d10b      	bne.n	801801e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018006:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801800a:	4552      	cmp	r2, sl
 801800c:	d107      	bne.n	801801e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801800e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018012:	455a      	cmp	r2, fp
 8018014:	d103      	bne.n	801801e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018016:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801801a:	454a      	cmp	r2, r9
 801801c:	d06d      	beq.n	80180fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801801e:	f1bb 0f00 	cmp.w	fp, #0
 8018022:	dd65      	ble.n	80180f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018024:	f1b9 0f00 	cmp.w	r9, #0
 8018028:	dd62      	ble.n	80180f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801802a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801802e:	fa1f f08a 	uxth.w	r0, sl
 8018032:	4552      	cmp	r2, sl
 8018034:	9000      	str	r0, [sp, #0]
 8018036:	da12      	bge.n	801805e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018038:	9301      	str	r3, [sp, #4]
 801803a:	9b00      	ldr	r3, [sp, #0]
 801803c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018040:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018044:	1a9a      	subs	r2, r3, r2
 8018046:	f8ad 1010 	strh.w	r1, [sp, #16]
 801804a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801804e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018052:	69ea      	ldr	r2, [r5, #28]
 8018054:	4631      	mov	r1, r6
 8018056:	4640      	mov	r0, r8
 8018058:	f7ff ff7a 	bl	8017f50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801805c:	9b01      	ldr	r3, [sp, #4]
 801805e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018062:	b29f      	uxth	r7, r3
 8018064:	429a      	cmp	r2, r3
 8018066:	da0d      	bge.n	8018084 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018068:	f8ad 2010 	strh.w	r2, [sp, #16]
 801806c:	1aba      	subs	r2, r7, r2
 801806e:	f8ad a012 	strh.w	sl, [sp, #18]
 8018072:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018076:	f8ad 9016 	strh.w	r9, [sp, #22]
 801807a:	69ea      	ldr	r2, [r5, #28]
 801807c:	4631      	mov	r1, r6
 801807e:	4640      	mov	r0, r8
 8018080:	f7ff ff66 	bl	8017f50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018084:	8822      	ldrh	r2, [r4, #0]
 8018086:	88a3      	ldrh	r3, [r4, #4]
 8018088:	445f      	add	r7, fp
 801808a:	4413      	add	r3, r2
 801808c:	b29b      	uxth	r3, r3
 801808e:	b2bf      	uxth	r7, r7
 8018090:	b23a      	sxth	r2, r7
 8018092:	b219      	sxth	r1, r3
 8018094:	4291      	cmp	r1, r2
 8018096:	dd0d      	ble.n	80180b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018098:	1bdb      	subs	r3, r3, r7
 801809a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801809e:	f8ad a012 	strh.w	sl, [sp, #18]
 80180a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80180a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80180aa:	69ea      	ldr	r2, [r5, #28]
 80180ac:	4631      	mov	r1, r6
 80180ae:	4640      	mov	r0, r8
 80180b0:	f7ff ff4e 	bl	8017f50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80180b4:	88e2      	ldrh	r2, [r4, #6]
 80180b6:	8863      	ldrh	r3, [r4, #2]
 80180b8:	4413      	add	r3, r2
 80180ba:	9a00      	ldr	r2, [sp, #0]
 80180bc:	b29b      	uxth	r3, r3
 80180be:	444a      	add	r2, r9
 80180c0:	fa1f f982 	uxth.w	r9, r2
 80180c4:	fa0f f289 	sxth.w	r2, r9
 80180c8:	b219      	sxth	r1, r3
 80180ca:	428a      	cmp	r2, r1
 80180cc:	da15      	bge.n	80180fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80180ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80180d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80180d6:	eba3 0309 	sub.w	r3, r3, r9
 80180da:	f8ad 1014 	strh.w	r1, [sp, #20]
 80180de:	f8ad 0010 	strh.w	r0, [sp, #16]
 80180e2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80180e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80180ea:	69ea      	ldr	r2, [r5, #28]
 80180ec:	4631      	mov	r1, r6
 80180ee:	e001      	b.n	80180f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80180f0:	4621      	mov	r1, r4
 80180f2:	69ea      	ldr	r2, [r5, #28]
 80180f4:	4640      	mov	r0, r8
 80180f6:	f7ff ff2b 	bl	8017f50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80180fa:	4628      	mov	r0, r5
 80180fc:	f7ff fe94 	bl	8017e28 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018100:	4633      	mov	r3, r6
 8018102:	4602      	mov	r2, r0
 8018104:	6861      	ldr	r1, [r4, #4]
 8018106:	6820      	ldr	r0, [r4, #0]
 8018108:	c303      	stmia	r3!, {r0, r1}
 801810a:	4611      	mov	r1, r2
 801810c:	4630      	mov	r0, r6
 801810e:	f7fc fb47 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 8018112:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018116:	2b00      	cmp	r3, #0
 8018118:	f77f af33 	ble.w	8017f82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801811c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018120:	2b00      	cmp	r3, #0
 8018122:	f77f af2e 	ble.w	8017f82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018126:	4628      	mov	r0, r5
 8018128:	f7ff fe9a 	bl	8017e60 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801812c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018130:	1a18      	subs	r0, r3, r0
 8018132:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018136:	4628      	mov	r0, r5
 8018138:	f7ff fea6 	bl	8017e88 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801813c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018140:	4631      	mov	r1, r6
 8018142:	1a18      	subs	r0, r3, r0
 8018144:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018148:	682b      	ldr	r3, [r5, #0]
 801814a:	4628      	mov	r0, r5
 801814c:	689b      	ldr	r3, [r3, #8]
 801814e:	4798      	blx	r3
 8018150:	e717      	b.n	8017f82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018152 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018152:	b570      	push	{r4, r5, r6, lr}
 8018154:	2300      	movs	r3, #0
 8018156:	460c      	mov	r4, r1
 8018158:	b086      	sub	sp, #24
 801815a:	1d06      	adds	r6, r0, #4
 801815c:	4631      	mov	r1, r6
 801815e:	4605      	mov	r5, r0
 8018160:	a802      	add	r0, sp, #8
 8018162:	9301      	str	r3, [sp, #4]
 8018164:	f7ff fca0 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018168:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801816c:	8822      	ldrh	r2, [r4, #0]
 801816e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018172:	1ad2      	subs	r2, r2, r3
 8018174:	8863      	ldrh	r3, [r4, #2]
 8018176:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801817a:	1a5b      	subs	r3, r3, r1
 801817c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018180:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018184:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018188:	f8ad 1016 	strh.w	r1, [sp, #22]
 801818c:	aa01      	add	r2, sp, #4
 801818e:	a904      	add	r1, sp, #16
 8018190:	4630      	mov	r0, r6
 8018192:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018196:	f7fc fbdb 	bl	8014950 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801819a:	9a01      	ldr	r2, [sp, #4]
 801819c:	b11a      	cbz	r2, 80181a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801819e:	4621      	mov	r1, r4
 80181a0:	4628      	mov	r0, r5
 80181a2:	f7ff fed5 	bl	8017f50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80181a6:	b006      	add	sp, #24
 80181a8:	bd70      	pop	{r4, r5, r6, pc}

080181aa <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80181aa:	b530      	push	{r4, r5, lr}
 80181ac:	4602      	mov	r2, r0
 80181ae:	b085      	sub	sp, #20
 80181b0:	460d      	mov	r5, r1
 80181b2:	466b      	mov	r3, sp
 80181b4:	4604      	mov	r4, r0
 80181b6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80181ba:	6851      	ldr	r1, [r2, #4]
 80181bc:	c303      	stmia	r3!, {r0, r1}
 80181be:	4629      	mov	r1, r5
 80181c0:	4668      	mov	r0, sp
 80181c2:	f7fc faed 	bl	80147a0 <_ZN8touchgfx4RectaNERKS0_>
 80181c6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80181ca:	b12b      	cbz	r3, 80181d8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80181cc:	4669      	mov	r1, sp
 80181ce:	4620      	mov	r0, r4
 80181d0:	f7ff ffbf 	bl	8018152 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80181d4:	b005      	add	sp, #20
 80181d6:	bd30      	pop	{r4, r5, pc}
 80181d8:	3404      	adds	r4, #4
 80181da:	4621      	mov	r1, r4
 80181dc:	a802      	add	r0, sp, #8
 80181de:	f7ff fc63 	bl	8017aa8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181e2:	f8bd 3000 	ldrh.w	r3, [sp]
 80181e6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80181ea:	4669      	mov	r1, sp
 80181ec:	1a9b      	subs	r3, r3, r2
 80181ee:	f8ad 3000 	strh.w	r3, [sp]
 80181f2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80181f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80181fa:	4620      	mov	r0, r4
 80181fc:	1a9b      	subs	r3, r3, r2
 80181fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018202:	f7fc fb6c 	bl	80148de <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018206:	e7e5      	b.n	80181d4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018208 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018208:	460b      	mov	r3, r1
 801820a:	680a      	ldr	r2, [r1, #0]
 801820c:	1d01      	adds	r1, r0, #4
 801820e:	6992      	ldr	r2, [r2, #24]
 8018210:	4618      	mov	r0, r3
 8018212:	4710      	bx	r2

08018214 <_ZN8touchgfx12TextProviderC1Ev>:
 8018214:	b538      	push	{r3, r4, r5, lr}
 8018216:	2500      	movs	r5, #0
 8018218:	2302      	movs	r3, #2
 801821a:	4604      	mov	r4, r0
 801821c:	e9c0 5500 	strd	r5, r5, [r0]
 8018220:	7403      	strb	r3, [r0, #16]
 8018222:	6145      	str	r5, [r0, #20]
 8018224:	7605      	strb	r5, [r0, #24]
 8018226:	83c5      	strh	r5, [r0, #30]
 8018228:	8405      	strh	r5, [r0, #32]
 801822a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801822c:	8705      	strh	r5, [r0, #56]	@ 0x38
 801822e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8018230:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8018234:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8018238:	220e      	movs	r2, #14
 801823a:	4629      	mov	r1, r5
 801823c:	304c      	adds	r0, #76	@ 0x4c
 801823e:	f013 fec2 	bl	802bfc6 <memset>
 8018242:	2301      	movs	r3, #1
 8018244:	4620      	mov	r0, r4
 8018246:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801824a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801824e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8018252:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8018256:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801825a:	f7f9 fe3f 	bl	8011edc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801825e:	4620      	mov	r0, r4
 8018260:	bd38      	pop	{r3, r4, r5, pc}

08018262 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018262:	b530      	push	{r4, r5, lr}
 8018264:	2500      	movs	r5, #0
 8018266:	2401      	movs	r4, #1
 8018268:	6843      	ldr	r3, [r0, #4]
 801826a:	b913      	cbnz	r3, 8018272 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801826c:	6803      	ldr	r3, [r0, #0]
 801826e:	b313      	cbz	r3, 80182b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018270:	6043      	str	r3, [r0, #4]
 8018272:	7e03      	ldrb	r3, [r0, #24]
 8018274:	b143      	cbz	r3, 8018288 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018276:	6943      	ldr	r3, [r0, #20]
 8018278:	b12b      	cbz	r3, 8018286 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801827a:	881a      	ldrh	r2, [r3, #0]
 801827c:	b11a      	cbz	r2, 8018286 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801827e:	1c9a      	adds	r2, r3, #2
 8018280:	6142      	str	r2, [r0, #20]
 8018282:	8818      	ldrh	r0, [r3, #0]
 8018284:	bd30      	pop	{r4, r5, pc}
 8018286:	7605      	strb	r5, [r0, #24]
 8018288:	6843      	ldr	r3, [r0, #4]
 801828a:	8819      	ldrh	r1, [r3, #0]
 801828c:	b199      	cbz	r1, 80182b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801828e:	1c9a      	adds	r2, r3, #2
 8018290:	2902      	cmp	r1, #2
 8018292:	6042      	str	r2, [r0, #4]
 8018294:	d1f5      	bne.n	8018282 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018296:	7c03      	ldrb	r3, [r0, #16]
 8018298:	2b01      	cmp	r3, #1
 801829a:	d8e5      	bhi.n	8018268 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801829c:	1c5a      	adds	r2, r3, #1
 801829e:	7402      	strb	r2, [r0, #16]
 80182a0:	3302      	adds	r3, #2
 80182a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80182a6:	6143      	str	r3, [r0, #20]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d0dd      	beq.n	8018268 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80182ac:	881b      	ldrh	r3, [r3, #0]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d0da      	beq.n	8018268 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80182b2:	7604      	strb	r4, [r0, #24]
 80182b4:	e7d8      	b.n	8018268 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80182b6:	2000      	movs	r0, #0
 80182b8:	e7e4      	b.n	8018284 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080182ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80182ba:	6001      	str	r1, [r0, #0]
 80182bc:	2100      	movs	r1, #0
 80182be:	b430      	push	{r4, r5}
 80182c0:	6041      	str	r1, [r0, #4]
 80182c2:	6815      	ldr	r5, [r2, #0]
 80182c4:	6085      	str	r5, [r0, #8]
 80182c6:	6852      	ldr	r2, [r2, #4]
 80182c8:	6443      	str	r3, [r0, #68]	@ 0x44
 80182ca:	9b02      	ldr	r3, [sp, #8]
 80182cc:	60c2      	str	r2, [r0, #12]
 80182ce:	7401      	strb	r1, [r0, #16]
 80182d0:	6141      	str	r1, [r0, #20]
 80182d2:	7601      	strb	r1, [r0, #24]
 80182d4:	8701      	strh	r1, [r0, #56]	@ 0x38
 80182d6:	8401      	strh	r1, [r0, #32]
 80182d8:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80182dc:	6483      	str	r3, [r0, #72]	@ 0x48
 80182de:	bc30      	pop	{r4, r5}
 80182e0:	f7f9 bdfc 	b.w	8011edc <_ZN8touchgfx12TextProvider18initializeInternalEv>

080182e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80182e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182e6:	4605      	mov	r5, r0
 80182e8:	4608      	mov	r0, r1
 80182ea:	b1e9      	cbz	r1, 8018328 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80182ec:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80182f0:	460b      	mov	r3, r1
 80182f2:	4622      	mov	r2, r4
 80182f4:	f101 0708 	add.w	r7, r1, #8
 80182f8:	4626      	mov	r6, r4
 80182fa:	6818      	ldr	r0, [r3, #0]
 80182fc:	6859      	ldr	r1, [r3, #4]
 80182fe:	3308      	adds	r3, #8
 8018300:	c603      	stmia	r6!, {r0, r1}
 8018302:	42bb      	cmp	r3, r7
 8018304:	4634      	mov	r4, r6
 8018306:	d1f7      	bne.n	80182f8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018308:	6818      	ldr	r0, [r3, #0]
 801830a:	6030      	str	r0, [r6, #0]
 801830c:	4610      	mov	r0, r2
 801830e:	889b      	ldrh	r3, [r3, #4]
 8018310:	80b3      	strh	r3, [r6, #4]
 8018312:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018316:	015b      	lsls	r3, r3, #5
 8018318:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801831c:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8018320:	430b      	orrs	r3, r1
 8018322:	425b      	negs	r3, r3
 8018324:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801832a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801832a:	b538      	push	{r3, r4, r5, lr}
 801832c:	460c      	mov	r4, r1
 801832e:	6811      	ldr	r1, [r2, #0]
 8018330:	4610      	mov	r0, r2
 8018332:	68cd      	ldr	r5, [r1, #12]
 8018334:	4619      	mov	r1, r3
 8018336:	47a8      	blx	r5
 8018338:	2800      	cmp	r0, #0
 801833a:	bf08      	it	eq
 801833c:	4620      	moveq	r0, r4
 801833e:	bd38      	pop	{r3, r4, r5, pc}

08018340 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018342:	4604      	mov	r4, r0
 8018344:	4615      	mov	r5, r2
 8018346:	4608      	mov	r0, r1
 8018348:	b93a      	cbnz	r2, 801835a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801834a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801834e:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8018352:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8018356:	4628      	mov	r0, r5
 8018358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801835a:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 801835e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8018362:	8893      	ldrh	r3, [r2, #4]
 8018364:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8018368:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801836c:	79ee      	ldrb	r6, [r5, #7]
 801836e:	4316      	orrs	r6, r2
 8018370:	19da      	adds	r2, r3, r7
 8018372:	b291      	uxth	r1, r2
 8018374:	291d      	cmp	r1, #29
 8018376:	b2b7      	uxth	r7, r6
 8018378:	d879      	bhi.n	801846e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801837a:	2201      	movs	r2, #1
 801837c:	408a      	lsls	r2, r1
 801837e:	4974      	ldr	r1, [pc, #464]	@ (8018550 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 8018380:	10f6      	asrs	r6, r6, #3
 8018382:	420a      	tst	r2, r1
 8018384:	d12d      	bne.n	80183e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 8018386:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801838a:	d070      	beq.n	801846e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 801838c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8018390:	462b      	mov	r3, r5
 8018392:	f105 0e08 	add.w	lr, r5, #8
 8018396:	4615      	mov	r5, r2
 8018398:	4694      	mov	ip, r2
 801839a:	6818      	ldr	r0, [r3, #0]
 801839c:	6859      	ldr	r1, [r3, #4]
 801839e:	3308      	adds	r3, #8
 80183a0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80183a4:	4573      	cmp	r3, lr
 80183a6:	4662      	mov	r2, ip
 80183a8:	d1f6      	bne.n	8018398 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80183aa:	6818      	ldr	r0, [r3, #0]
 80183ac:	f8cc 0000 	str.w	r0, [ip]
 80183b0:	889b      	ldrh	r3, [r3, #4]
 80183b2:	f8ac 3004 	strh.w	r3, [ip, #4]
 80183b6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80183ba:	b2b3      	uxth	r3, r6
 80183bc:	1aca      	subs	r2, r1, r3
 80183be:	b292      	uxth	r2, r2
 80183c0:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 80183c4:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 80183c8:	10d2      	asrs	r2, r2, #3
 80183ca:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80183ce:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80183d2:	4302      	orrs	r2, r0
 80183d4:	1bcf      	subs	r7, r1, r7
 80183d6:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 80183da:	1afb      	subs	r3, r7, r3
 80183dc:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 80183e0:	e7b9      	b.n	8018356 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80183e2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80183e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80183e8:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80183ea:	f640 6333 	movw	r3, #3635	@ 0xe33
 80183ee:	4299      	cmp	r1, r3
 80183f0:	d110      	bne.n	8018414 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 80183f2:	6803      	ldr	r3, [r0, #0]
 80183f4:	68db      	ldr	r3, [r3, #12]
 80183f6:	4798      	blx	r3
 80183f8:	7b41      	ldrb	r1, [r0, #13]
 80183fa:	00cb      	lsls	r3, r1, #3
 80183fc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018400:	7a03      	ldrb	r3, [r0, #8]
 8018402:	0648      	lsls	r0, r1, #25
 8018404:	ea43 0302 	orr.w	r3, r3, r2
 8018408:	bf44      	itt	mi
 801840a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801840e:	b21b      	sxthmi	r3, r3
 8018410:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018414:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8018418:	462a      	mov	r2, r5
 801841a:	443b      	add	r3, r7
 801841c:	4433      	add	r3, r6
 801841e:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8018422:	f105 0c08 	add.w	ip, r5, #8
 8018426:	4635      	mov	r5, r6
 8018428:	b29b      	uxth	r3, r3
 801842a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801842e:	4637      	mov	r7, r6
 8018430:	6810      	ldr	r0, [r2, #0]
 8018432:	6851      	ldr	r1, [r2, #4]
 8018434:	3208      	adds	r2, #8
 8018436:	c703      	stmia	r7!, {r0, r1}
 8018438:	4562      	cmp	r2, ip
 801843a:	463e      	mov	r6, r7
 801843c:	d1f7      	bne.n	801842e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 801843e:	6810      	ldr	r0, [r2, #0]
 8018440:	6038      	str	r0, [r7, #0]
 8018442:	8892      	ldrh	r2, [r2, #4]
 8018444:	80ba      	strh	r2, [r7, #4]
 8018446:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801844a:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801844e:	10db      	asrs	r3, r3, #3
 8018450:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018454:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018458:	4313      	orrs	r3, r2
 801845a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801845e:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8018462:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8018466:	1a9b      	subs	r3, r3, r2
 8018468:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801846c:	e773      	b.n	8018356 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801846e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8018472:	f023 0204 	bic.w	r2, r3, #4
 8018476:	428a      	cmp	r2, r1
 8018478:	d003      	beq.n	8018482 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801847a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801847e:	4293      	cmp	r3, r2
 8018480:	d120      	bne.n	80184c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 8018482:	3b01      	subs	r3, #1
 8018484:	4602      	mov	r2, r0
 8018486:	b29b      	uxth	r3, r3
 8018488:	4629      	mov	r1, r5
 801848a:	4620      	mov	r0, r4
 801848c:	f7ff ff4d 	bl	801832a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018490:	7b41      	ldrb	r1, [r0, #13]
 8018492:	00cb      	lsls	r3, r1, #3
 8018494:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018498:	7a03      	ldrb	r3, [r0, #8]
 801849a:	0649      	lsls	r1, r1, #25
 801849c:	ea43 0302 	orr.w	r3, r3, r2
 80184a0:	bf44      	itt	mi
 80184a2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80184a6:	b21b      	sxthmi	r3, r3
 80184a8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80184ac:	7b6b      	ldrb	r3, [r5, #13]
 80184ae:	7aaa      	ldrb	r2, [r5, #10]
 80184b0:	005b      	lsls	r3, r3, #1
 80184b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80184b6:	4313      	orrs	r3, r2
 80184b8:	115a      	asrs	r2, r3, #5
 80184ba:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80184be:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80184c2:	e036      	b.n	8018532 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80184c4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80184c8:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80184cc:	7a2a      	ldrb	r2, [r5, #8]
 80184ce:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 80184d2:	ea42 0201 	orr.w	r2, r2, r1
 80184d6:	f640 6109 	movw	r1, #3593	@ 0xe09
 80184da:	bf1c      	itt	ne
 80184dc:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 80184e0:	b212      	sxthne	r2, r2
 80184e2:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 80184e6:	f023 0210 	bic.w	r2, r3, #16
 80184ea:	428a      	cmp	r2, r1
 80184ec:	d003      	beq.n	80184f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80184ee:	f640 6213 	movw	r2, #3603	@ 0xe13
 80184f2:	4293      	cmp	r3, r2
 80184f4:	d12a      	bne.n	801854c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 80184f6:	7b6e      	ldrb	r6, [r5, #13]
 80184f8:	4629      	mov	r1, r5
 80184fa:	0076      	lsls	r6, r6, #1
 80184fc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8018500:	7aae      	ldrb	r6, [r5, #10]
 8018502:	4316      	orrs	r6, r2
 8018504:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018508:	4293      	cmp	r3, r2
 801850a:	bf18      	it	ne
 801850c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018510:	4602      	mov	r2, r0
 8018512:	bf14      	ite	ne
 8018514:	b29b      	uxthne	r3, r3
 8018516:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801851a:	4620      	mov	r0, r4
 801851c:	f7ff ff05 	bl	801832a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018520:	7b43      	ldrb	r3, [r0, #13]
 8018522:	7a82      	ldrb	r2, [r0, #10]
 8018524:	005b      	lsls	r3, r3, #1
 8018526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801852a:	4313      	orrs	r3, r2
 801852c:	1af6      	subs	r6, r6, r3
 801852e:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8018532:	7b69      	ldrb	r1, [r5, #13]
 8018534:	00cb      	lsls	r3, r1, #3
 8018536:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801853a:	7a2b      	ldrb	r3, [r5, #8]
 801853c:	4313      	orrs	r3, r2
 801853e:	064a      	lsls	r2, r1, #25
 8018540:	bf44      	itt	mi
 8018542:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018546:	b21b      	sxthmi	r3, r3
 8018548:	1bdb      	subs	r3, r3, r7
 801854a:	e747      	b.n	80183dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801854c:	2300      	movs	r3, #0
 801854e:	e7b6      	b.n	80184be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8018550:	3fc00079 	.word	0x3fc00079

08018554 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018558:	4604      	mov	r4, r0
 801855a:	b942      	cbnz	r2, 801856e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801855c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018560:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8018564:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8018568:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801856c:	e047      	b.n	80185fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801856e:	7b51      	ldrb	r1, [r2, #13]
 8018570:	8893      	ldrh	r3, [r2, #4]
 8018572:	010d      	lsls	r5, r1, #4
 8018574:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8018578:	79d5      	ldrb	r5, [r2, #7]
 801857a:	4305      	orrs	r5, r0
 801857c:	2d04      	cmp	r5, #4
 801857e:	bfcc      	ite	gt
 8018580:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018584:	f04f 0e01 	movle.w	lr, #1
 8018588:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801858c:	f200 80ab 	bhi.w	80186e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018590:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8018594:	4283      	cmp	r3, r0
 8018596:	d216      	bcs.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018598:	f240 605b 	movw	r0, #1627	@ 0x65b
 801859c:	4283      	cmp	r3, r0
 801859e:	d859      	bhi.n	8018654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80185a0:	f240 6057 	movw	r0, #1623	@ 0x657
 80185a4:	4283      	cmp	r3, r0
 80185a6:	d20e      	bcs.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80185a8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80185ac:	d24a      	bcs.n	8018644 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80185ae:	f240 604e 	movw	r0, #1614	@ 0x64e
 80185b2:	4283      	cmp	r3, r0
 80185b4:	d207      	bcs.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80185b6:	f240 601a 	movw	r0, #1562	@ 0x61a
 80185ba:	4283      	cmp	r3, r0
 80185bc:	d02a      	beq.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80185be:	d821      	bhi.n	8018604 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80185c0:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80185c4:	d35b      	bcc.n	801867e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80185c6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80185ca:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80185ce:	f040 80d0 	bne.w	8018772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80185d2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80185d6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80185da:	f040 80ca 	bne.w	8018772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80185de:	00cb      	lsls	r3, r1, #3
 80185e0:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80185e4:	7a13      	ldrb	r3, [r2, #8]
 80185e6:	0649      	lsls	r1, r1, #25
 80185e8:	ea43 0300 	orr.w	r3, r3, r0
 80185ec:	bf44      	itt	mi
 80185ee:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80185f2:	b21b      	sxthmi	r3, r3
 80185f4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80185f8:	1b5d      	subs	r5, r3, r5
 80185fa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80185fe:	4610      	mov	r0, r2
 8018600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018604:	f240 604b 	movw	r0, #1611	@ 0x64b
 8018608:	4283      	cmp	r3, r0
 801860a:	d338      	bcc.n	801867e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801860c:	f240 604c 	movw	r0, #1612	@ 0x64c
 8018610:	4283      	cmp	r3, r0
 8018612:	d9d8      	bls.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018614:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8018618:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801861c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018620:	f040 80f2 	bne.w	8018808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8018624:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018628:	f040 80ee 	bne.w	8018808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801862c:	00cb      	lsls	r3, r1, #3
 801862e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018632:	7a13      	ldrb	r3, [r2, #8]
 8018634:	064e      	lsls	r6, r1, #25
 8018636:	ea43 0300 	orr.w	r3, r3, r0
 801863a:	bf44      	itt	mi
 801863c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018640:	b21b      	sxthmi	r3, r3
 8018642:	e7d9      	b.n	80185f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018644:	f240 6054 	movw	r0, #1620	@ 0x654
 8018648:	4283      	cmp	r3, r0
 801864a:	d8e3      	bhi.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801864c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8018650:	d9e0      	bls.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018652:	e7b8      	b.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018654:	f240 6074 	movw	r0, #1652	@ 0x674
 8018658:	4283      	cmp	r3, r0
 801865a:	d0b4      	beq.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801865c:	d82d      	bhi.n	80186ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801865e:	f240 605e 	movw	r0, #1630	@ 0x65e
 8018662:	4283      	cmp	r3, r0
 8018664:	d804      	bhi.n	8018670 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018666:	f240 605d 	movw	r0, #1629	@ 0x65d
 801866a:	4283      	cmp	r3, r0
 801866c:	d3d2      	bcc.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801866e:	e7aa      	b.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018670:	f240 605f 	movw	r0, #1631	@ 0x65f
 8018674:	4283      	cmp	r3, r0
 8018676:	d0cd      	beq.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018678:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801867c:	d0a3      	beq.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801867e:	00cb      	lsls	r3, r1, #3
 8018680:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018684:	7a13      	ldrb	r3, [r2, #8]
 8018686:	0649      	lsls	r1, r1, #25
 8018688:	ea43 0300 	orr.w	r3, r3, r0
 801868c:	bf44      	itt	mi
 801868e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018692:	b21b      	sxthmi	r3, r3
 8018694:	1b5d      	subs	r5, r3, r5
 8018696:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801869a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801869e:	7b53      	ldrb	r3, [r2, #13]
 80186a0:	015b      	lsls	r3, r3, #5
 80186a2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80186a6:	7993      	ldrb	r3, [r2, #6]
 80186a8:	430b      	orrs	r3, r1
 80186aa:	2105      	movs	r1, #5
 80186ac:	005b      	lsls	r3, r3, #1
 80186ae:	fb93 f3f1 	sdiv	r3, r3, r1
 80186b2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80186b6:	440b      	add	r3, r1
 80186b8:	e756      	b.n	8018568 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80186ba:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80186be:	4283      	cmp	r3, r0
 80186c0:	d809      	bhi.n	80186d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80186c2:	f240 60df 	movw	r0, #1759	@ 0x6df
 80186c6:	4283      	cmp	r3, r0
 80186c8:	f4bf af7d 	bcs.w	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80186cc:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80186d0:	2b05      	cmp	r3, #5
 80186d2:	d8d4      	bhi.n	801867e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80186d4:	e777      	b.n	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80186d6:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80186da:	4283      	cmp	r3, r0
 80186dc:	d09a      	beq.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80186de:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80186e2:	4283      	cmp	r3, r0
 80186e4:	e7ca      	b.n	801867c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80186e6:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80186ea:	d22b      	bcs.n	8018744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80186ec:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 80186f0:	4283      	cmp	r3, r0
 80186f2:	d28f      	bcs.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80186f4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80186f8:	4283      	cmp	r3, r0
 80186fa:	d816      	bhi.n	801872a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80186fc:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8018700:	4283      	cmp	r3, r0
 8018702:	f4bf af60 	bcs.w	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018706:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801870a:	4283      	cmp	r3, r0
 801870c:	d80a      	bhi.n	8018724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801870e:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8018712:	4283      	cmp	r3, r0
 8018714:	f4bf af57 	bcs.w	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018718:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801871c:	4283      	cmp	r3, r0
 801871e:	f43f af79 	beq.w	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018722:	e7ac      	b.n	801867e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018724:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8018728:	e7f8      	b.n	801871c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801872a:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801872e:	4283      	cmp	r3, r0
 8018730:	d802      	bhi.n	8018738 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8018732:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018736:	e798      	b.n	801866a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018738:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801873c:	4283      	cmp	r3, r0
 801873e:	f47f af42 	bne.w	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018742:	e767      	b.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018744:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8018748:	4283      	cmp	r3, r0
 801874a:	f43f af63 	beq.w	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801874e:	d802      	bhi.n	8018756 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018750:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8018754:	e7f2      	b.n	801873c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018756:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801875a:	4283      	cmp	r3, r0
 801875c:	d805      	bhi.n	801876a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801875e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8018762:	4283      	cmp	r3, r0
 8018764:	f4ff af2f 	bcc.w	80185c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018768:	e754      	b.n	8018614 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801876a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801876e:	4283      	cmp	r3, r0
 8018770:	e7af      	b.n	80186d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018772:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8018776:	4617      	mov	r7, r2
 8018778:	4666      	mov	r6, ip
 801877a:	f102 0808 	add.w	r8, r2, #8
 801877e:	46e6      	mov	lr, ip
 8018780:	6838      	ldr	r0, [r7, #0]
 8018782:	6879      	ldr	r1, [r7, #4]
 8018784:	3708      	adds	r7, #8
 8018786:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801878a:	4547      	cmp	r7, r8
 801878c:	46f4      	mov	ip, lr
 801878e:	d1f6      	bne.n	801877e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018790:	6838      	ldr	r0, [r7, #0]
 8018792:	f8ce 0000 	str.w	r0, [lr]
 8018796:	88b9      	ldrh	r1, [r7, #4]
 8018798:	f8ae 1004 	strh.w	r1, [lr, #4]
 801879c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80187a0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80187a4:	d009      	beq.n	80187ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80187a6:	7b51      	ldrb	r1, [r2, #13]
 80187a8:	7992      	ldrb	r2, [r2, #6]
 80187aa:	0149      	lsls	r1, r1, #5
 80187ac:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80187b0:	4311      	orrs	r1, r2
 80187b2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80187b6:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80187ba:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80187be:	b2ad      	uxth	r5, r5
 80187c0:	d00d      	beq.n	80187de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80187c2:	442b      	add	r3, r5
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80187ca:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80187ce:	10db      	asrs	r3, r3, #3
 80187d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80187d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80187d8:	4313      	orrs	r3, r2
 80187da:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80187de:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80187e2:	00cb      	lsls	r3, r1, #3
 80187e4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80187e8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80187ec:	064f      	lsls	r7, r1, #25
 80187ee:	ea43 0302 	orr.w	r3, r3, r2
 80187f2:	bf44      	itt	mi
 80187f4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80187f8:	b21b      	sxthmi	r3, r3
 80187fa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80187fe:	1b5b      	subs	r3, r3, r5
 8018800:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8018804:	4632      	mov	r2, r6
 8018806:	e6fa      	b.n	80185fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018808:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801880c:	4617      	mov	r7, r2
 801880e:	4666      	mov	r6, ip
 8018810:	f102 0908 	add.w	r9, r2, #8
 8018814:	46e0      	mov	r8, ip
 8018816:	6838      	ldr	r0, [r7, #0]
 8018818:	6879      	ldr	r1, [r7, #4]
 801881a:	3708      	adds	r7, #8
 801881c:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018820:	454f      	cmp	r7, r9
 8018822:	46c4      	mov	ip, r8
 8018824:	d1f6      	bne.n	8018814 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8018826:	6838      	ldr	r0, [r7, #0]
 8018828:	f8c8 0000 	str.w	r0, [r8]
 801882c:	88b9      	ldrh	r1, [r7, #4]
 801882e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018832:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8018836:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801883a:	d009      	beq.n	8018850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801883c:	7b51      	ldrb	r1, [r2, #13]
 801883e:	7992      	ldrb	r2, [r2, #6]
 8018840:	0149      	lsls	r1, r1, #5
 8018842:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018846:	4311      	orrs	r1, r2
 8018848:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801884c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018850:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018854:	d00e      	beq.n	8018874 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8018856:	eba3 030e 	sub.w	r3, r3, lr
 801885a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801885e:	b29b      	uxth	r3, r3
 8018860:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8018864:	10db      	asrs	r3, r3, #3
 8018866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801886a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801886e:	4313      	orrs	r3, r2
 8018870:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8018874:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8018878:	00cb      	lsls	r3, r1, #3
 801887a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801887e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8018882:	0648      	lsls	r0, r1, #25
 8018884:	ea43 0302 	orr.w	r3, r3, r2
 8018888:	bf44      	itt	mi
 801888a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801888e:	b21b      	sxthmi	r3, r3
 8018890:	1b5d      	subs	r5, r3, r5
 8018892:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018896:	e7b5      	b.n	8018804 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08018898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801889c:	461e      	mov	r6, r3
 801889e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80188a0:	4604      	mov	r4, r0
 80188a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80188a6:	4617      	mov	r7, r2
 80188a8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80188ac:	f7f9 fa70 	bl	8011d90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80188b0:	4605      	mov	r5, r0
 80188b2:	b918      	cbnz	r0, 80188bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80188b4:	6030      	str	r0, [r6, #0]
 80188b6:	4628      	mov	r0, r5
 80188b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	4601      	mov	r1, r0
 80188c0:	68db      	ldr	r3, [r3, #12]
 80188c2:	4638      	mov	r0, r7
 80188c4:	4798      	blx	r3
 80188c6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80188ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80188ce:	4602      	mov	r2, r0
 80188d0:	6030      	str	r0, [r6, #0]
 80188d2:	d213      	bcs.n	80188fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80188d4:	4643      	mov	r3, r8
 80188d6:	4639      	mov	r1, r7
 80188d8:	4620      	mov	r0, r4
 80188da:	f7ff fe3b 	bl	8018554 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80188de:	6030      	str	r0, [r6, #0]
 80188e0:	6833      	ldr	r3, [r6, #0]
 80188e2:	b143      	cbz	r3, 80188f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80188e4:	7b5a      	ldrb	r2, [r3, #13]
 80188e6:	7a9b      	ldrb	r3, [r3, #10]
 80188e8:	0052      	lsls	r2, r2, #1
 80188ea:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80188ee:	4313      	orrs	r3, r2
 80188f0:	bf0c      	ite	eq
 80188f2:	2301      	moveq	r3, #1
 80188f4:	2300      	movne	r3, #0
 80188f6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80188fa:	e7dc      	b.n	80188b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80188fc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8018900:	b29b      	uxth	r3, r3
 8018902:	2b7f      	cmp	r3, #127	@ 0x7f
 8018904:	d804      	bhi.n	8018910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018906:	4639      	mov	r1, r7
 8018908:	4620      	mov	r0, r4
 801890a:	f7ff fd19 	bl	8018340 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801890e:	e7e6      	b.n	80188de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018910:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8018914:	2b00      	cmp	r3, #0
 8018916:	d0e3      	beq.n	80188e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018918:	f640 1302 	movw	r3, #2306	@ 0x902
 801891c:	429d      	cmp	r5, r3
 801891e:	d1df      	bne.n	80188e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018920:	4601      	mov	r1, r0
 8018922:	4620      	mov	r0, r4
 8018924:	f7ff fcde 	bl	80182e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018928:	e7d9      	b.n	80188de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801892a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801892a:	b510      	push	{r4, lr}
 801892c:	4604      	mov	r4, r0
 801892e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8018932:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018934:	b1f1      	cbz	r1, 8018974 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8018936:	2b0a      	cmp	r3, #10
 8018938:	d02f      	beq.n	801899a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801893a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801893c:	3901      	subs	r1, #1
 801893e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8018942:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8018944:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8018948:	1c51      	adds	r1, r2, #1
 801894a:	b289      	uxth	r1, r1
 801894c:	2901      	cmp	r1, #1
 801894e:	bf84      	itt	hi
 8018950:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8018954:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8018956:	f103 0201 	add.w	r2, r3, #1
 801895a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801895c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801895e:	bf98      	it	ls
 8018960:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8018962:	4413      	add	r3, r2
 8018964:	b29b      	uxth	r3, r3
 8018966:	2b09      	cmp	r3, #9
 8018968:	bf88      	it	hi
 801896a:	3b0a      	subhi	r3, #10
 801896c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018970:	8458      	strh	r0, [r3, #34]	@ 0x22
 8018972:	e7dc      	b.n	801892e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018974:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018976:	2b0a      	cmp	r3, #10
 8018978:	d00f      	beq.n	801899a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801897a:	4620      	mov	r0, r4
 801897c:	f7ff fc71 	bl	8018262 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018980:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8018982:	1c5a      	adds	r2, r3, #1
 8018984:	8722      	strh	r2, [r4, #56]	@ 0x38
 8018986:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018988:	4413      	add	r3, r2
 801898a:	b29b      	uxth	r3, r3
 801898c:	2b09      	cmp	r3, #9
 801898e:	bf88      	it	hi
 8018990:	3b0a      	subhi	r3, #10
 8018992:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018996:	8458      	strh	r0, [r3, #34]	@ 0x22
 8018998:	e7ec      	b.n	8018974 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801899a:	bd10      	pop	{r4, pc}

0801899c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801899c:	b538      	push	{r3, r4, r5, lr}
 801899e:	4604      	mov	r4, r0
 80189a0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80189a2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80189a6:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80189a8:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80189aa:	3a01      	subs	r2, #1
 80189ac:	8702      	strh	r2, [r0, #56]	@ 0x38
 80189ae:	1c5a      	adds	r2, r3, #1
 80189b0:	b292      	uxth	r2, r2
 80189b2:	2a09      	cmp	r2, #9
 80189b4:	bf86      	itte	hi
 80189b6:	3b09      	subhi	r3, #9
 80189b8:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80189ba:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80189bc:	f7ff ffb5 	bl	801892a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80189c0:	8c23      	ldrh	r3, [r4, #32]
 80189c2:	2b01      	cmp	r3, #1
 80189c4:	bf9c      	itt	ls
 80189c6:	3301      	addls	r3, #1
 80189c8:	8423      	strhls	r3, [r4, #32]
 80189ca:	8be3      	ldrh	r3, [r4, #30]
 80189cc:	b90b      	cbnz	r3, 80189d2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80189ce:	2302      	movs	r3, #2
 80189d0:	83e3      	strh	r3, [r4, #30]
 80189d2:	8be3      	ldrh	r3, [r4, #30]
 80189d4:	4628      	mov	r0, r5
 80189d6:	3b01      	subs	r3, #1
 80189d8:	b29b      	uxth	r3, r3
 80189da:	83e3      	strh	r3, [r4, #30]
 80189dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80189e0:	8365      	strh	r5, [r4, #26]
 80189e2:	bd38      	pop	{r3, r4, r5, pc}

080189e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80189e4:	428a      	cmp	r2, r1
 80189e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189ea:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80189ec:	d931      	bls.n	8018a52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 80189ee:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80189f0:	1a54      	subs	r4, r2, r1
 80189f2:	19ee      	adds	r6, r5, r7
 80189f4:	3e01      	subs	r6, #1
 80189f6:	fa1f fe84 	uxth.w	lr, r4
 80189fa:	b2b4      	uxth	r4, r6
 80189fc:	eba4 090e 	sub.w	r9, r4, lr
 8018a00:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8018a04:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8018a08:	fa1f f989 	uxth.w	r9, r9
 8018a0c:	2c09      	cmp	r4, #9
 8018a0e:	4626      	mov	r6, r4
 8018a10:	bf88      	it	hi
 8018a12:	f1a4 060a 	subhi.w	r6, r4, #10
 8018a16:	f1bc 0f00 	cmp.w	ip, #0
 8018a1a:	bf08      	it	eq
 8018a1c:	f04f 0c02 	moveq.w	ip, #2
 8018a20:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018a24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018a28:	3c01      	subs	r4, #1
 8018a2a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8018a2e:	fa1f fc8c 	uxth.w	ip, ip
 8018a32:	b2a4      	uxth	r4, r4
 8018a34:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018a38:	454c      	cmp	r4, r9
 8018a3a:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8018a3e:	d1e5      	bne.n	8018a0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8018a40:	eba5 050e 	sub.w	r5, r5, lr
 8018a44:	eb0e 0408 	add.w	r4, lr, r8
 8018a48:	8705      	strh	r5, [r0, #56]	@ 0x38
 8018a4a:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8018a4e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8018a52:	250a      	movs	r5, #10
 8018a54:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8018a56:	1a64      	subs	r4, r4, r1
 8018a58:	4439      	add	r1, r7
 8018a5a:	b289      	uxth	r1, r1
 8018a5c:	2909      	cmp	r1, #9
 8018a5e:	bf88      	it	hi
 8018a60:	390a      	subhi	r1, #10
 8018a62:	8704      	strh	r4, [r0, #56]	@ 0x38
 8018a64:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8018a66:	b18a      	cbz	r2, 8018a8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8018a68:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8018a6a:	3a01      	subs	r2, #1
 8018a6c:	3101      	adds	r1, #1
 8018a6e:	b292      	uxth	r2, r2
 8018a70:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018a74:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018a76:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8018a78:	b901      	cbnz	r1, 8018a7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8018a7a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018a7c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8018a7e:	3901      	subs	r1, #1
 8018a80:	b289      	uxth	r1, r1
 8018a82:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8018a84:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018a88:	844c      	strh	r4, [r1, #34]	@ 0x22
 8018a8a:	e7ec      	b.n	8018a66 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8018a8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a90:	f7ff bf4b 	b.w	801892a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018a94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018a94:	b570      	push	{r4, r5, r6, lr}
 8018a96:	2500      	movs	r5, #0
 8018a98:	4295      	cmp	r5, r2
 8018a9a:	d011      	beq.n	8018ac0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018a9c:	8bc4      	ldrh	r4, [r0, #30]
 8018a9e:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018aa2:	4414      	add	r4, r2
 8018aa4:	3c01      	subs	r4, #1
 8018aa6:	1b64      	subs	r4, r4, r5
 8018aa8:	b2a4      	uxth	r4, r4
 8018aaa:	2c01      	cmp	r4, #1
 8018aac:	bf88      	it	hi
 8018aae:	3c02      	subhi	r4, #2
 8018ab0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018ab4:	8b64      	ldrh	r4, [r4, #26]
 8018ab6:	42b4      	cmp	r4, r6
 8018ab8:	d117      	bne.n	8018aea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018aba:	3501      	adds	r5, #1
 8018abc:	b2ad      	uxth	r5, r5
 8018abe:	e7eb      	b.n	8018a98 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018ac0:	2400      	movs	r4, #0
 8018ac2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018ac6:	4413      	add	r3, r2
 8018ac8:	b2a2      	uxth	r2, r4
 8018aca:	429a      	cmp	r2, r3
 8018acc:	da0f      	bge.n	8018aee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018ace:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8018ad0:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018ad4:	4432      	add	r2, r6
 8018ad6:	b292      	uxth	r2, r2
 8018ad8:	2a09      	cmp	r2, #9
 8018ada:	bf88      	it	hi
 8018adc:	3a0a      	subhi	r2, #10
 8018ade:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018ae2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8018ae4:	3401      	adds	r4, #1
 8018ae6:	42aa      	cmp	r2, r5
 8018ae8:	d0ee      	beq.n	8018ac8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018aea:	2000      	movs	r0, #0
 8018aec:	bd70      	pop	{r4, r5, r6, pc}
 8018aee:	2001      	movs	r0, #1
 8018af0:	e7fc      	b.n	8018aec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018af2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018af2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af6:	4605      	mov	r5, r0
 8018af8:	4616      	mov	r6, r2
 8018afa:	1c8c      	adds	r4, r1, #2
 8018afc:	8809      	ldrh	r1, [r1, #0]
 8018afe:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018b02:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018b06:	42b3      	cmp	r3, r6
 8018b08:	d124      	bne.n	8018b54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018b0a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018b0e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018b12:	f001 070f 	and.w	r7, r1, #15
 8018b16:	f8cd 8000 	str.w	r8, [sp]
 8018b1a:	464b      	mov	r3, r9
 8018b1c:	4652      	mov	r2, sl
 8018b1e:	4621      	mov	r1, r4
 8018b20:	4628      	mov	r0, r5
 8018b22:	f7ff ffb7 	bl	8018a94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018b26:	4683      	mov	fp, r0
 8018b28:	b168      	cbz	r0, 8018b46 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018b2a:	eb0a 0109 	add.w	r1, sl, r9
 8018b2e:	4441      	add	r1, r8
 8018b30:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018b34:	463a      	mov	r2, r7
 8018b36:	4649      	mov	r1, r9
 8018b38:	4628      	mov	r0, r5
 8018b3a:	f7ff ff53 	bl	80189e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018b3e:	4658      	mov	r0, fp
 8018b40:	b003      	add	sp, #12
 8018b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b46:	eb07 010a 	add.w	r1, r7, sl
 8018b4a:	4449      	add	r1, r9
 8018b4c:	4441      	add	r1, r8
 8018b4e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018b52:	e7d2      	b.n	8018afa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018b54:	f04f 0b00 	mov.w	fp, #0
 8018b58:	e7f1      	b.n	8018b3e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018b5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018b5a:	b570      	push	{r4, r5, r6, lr}
 8018b5c:	8810      	ldrh	r0, [r2, #0]
 8018b5e:	4298      	cmp	r0, r3
 8018b60:	d817      	bhi.n	8018b92 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018b62:	1e48      	subs	r0, r1, #1
 8018b64:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018b68:	4298      	cmp	r0, r3
 8018b6a:	d312      	bcc.n	8018b92 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018b6c:	2400      	movs	r4, #0
 8018b6e:	428c      	cmp	r4, r1
 8018b70:	d20f      	bcs.n	8018b92 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018b72:	1860      	adds	r0, r4, r1
 8018b74:	1040      	asrs	r0, r0, #1
 8018b76:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018b7a:	0085      	lsls	r5, r0, #2
 8018b7c:	42b3      	cmp	r3, r6
 8018b7e:	d902      	bls.n	8018b86 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8018b80:	3001      	adds	r0, #1
 8018b82:	b284      	uxth	r4, r0
 8018b84:	e7f3      	b.n	8018b6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018b86:	d201      	bcs.n	8018b8c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018b88:	b281      	uxth	r1, r0
 8018b8a:	e7f0      	b.n	8018b6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018b8c:	442a      	add	r2, r5
 8018b8e:	8850      	ldrh	r0, [r2, #2]
 8018b90:	bd70      	pop	{r4, r5, r6, pc}
 8018b92:	2000      	movs	r0, #0
 8018b94:	e7fc      	b.n	8018b90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018b96 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b9a:	4604      	mov	r4, r0
 8018b9c:	260b      	movs	r6, #11
 8018b9e:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8018ba0:	886f      	ldrh	r7, [r5, #2]
 8018ba2:	087f      	lsrs	r7, r7, #1
 8018ba4:	3e01      	subs	r6, #1
 8018ba6:	d013      	beq.n	8018bd0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018ba8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018baa:	462a      	mov	r2, r5
 8018bac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018bb0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8018bb4:	4639      	mov	r1, r7
 8018bb6:	4643      	mov	r3, r8
 8018bb8:	4620      	mov	r0, r4
 8018bba:	f7ff ffce 	bl	8018b5a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018bbe:	b138      	cbz	r0, 8018bd0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018bc0:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018bc4:	4642      	mov	r2, r8
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	f7ff ff93 	bl	8018af2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	d1e9      	bne.n	8018ba4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8018bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018bd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8018bd4:	b570      	push	{r4, r5, r6, lr}
 8018bd6:	694a      	ldr	r2, [r1, #20]
 8018bd8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8018bda:	684b      	ldr	r3, [r1, #4]
 8018bdc:	1b54      	subs	r4, r2, r5
 8018bde:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8018be0:	f000 8107 	beq.w	8018df2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 8018be4:	1b9b      	subs	r3, r3, r6
 8018be6:	d003      	beq.n	8018bf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018be8:	2210      	movs	r2, #16
 8018bea:	4363      	muls	r3, r4
 8018bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8018bf0:	680c      	ldr	r4, [r1, #0]
 8018bf2:	698a      	ldr	r2, [r1, #24]
 8018bf4:	1b65      	subs	r5, r4, r5
 8018bf6:	f000 80fe 	beq.w	8018df6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 8018bfa:	1b92      	subs	r2, r2, r6
 8018bfc:	d003      	beq.n	8018c06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018bfe:	2410      	movs	r4, #16
 8018c00:	436a      	muls	r2, r5
 8018c02:	fb92 f2f4 	sdiv	r2, r2, r4
 8018c06:	1a9b      	subs	r3, r3, r2
 8018c08:	ee07 3a90 	vmov	s15, r3
 8018c0c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8018e34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8018c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018c18:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018c1c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8018c20:	460a      	mov	r2, r1
 8018c22:	eeb1 6a43 	vneg.f32	s12, s6
 8018c26:	4603      	mov	r3, r0
 8018c28:	f100 040c 	add.w	r4, r0, #12
 8018c2c:	edd2 7a02 	vldr	s15, [r2, #8]
 8018c30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018c34:	ece3 6a01 	vstmia	r3!, {s13}
 8018c38:	edd2 7a03 	vldr	s15, [r2, #12]
 8018c3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018c40:	edc3 7a02 	vstr	s15, [r3, #8]
 8018c44:	edd2 7a04 	vldr	s15, [r2, #16]
 8018c48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018c4c:	429c      	cmp	r4, r3
 8018c4e:	edc3 7a05 	vstr	s15, [r3, #20]
 8018c52:	f102 0214 	add.w	r2, r2, #20
 8018c56:	d1e9      	bne.n	8018c2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018c58:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018c5a:	698b      	ldr	r3, [r1, #24]
 8018c5c:	edd0 4a02 	vldr	s9, [r0, #8]
 8018c60:	1a9b      	subs	r3, r3, r2
 8018c62:	ee07 3a90 	vmov	s15, r3
 8018c66:	684b      	ldr	r3, [r1, #4]
 8018c68:	edd0 3a00 	vldr	s7, [r0]
 8018c6c:	1a9b      	subs	r3, r3, r2
 8018c6e:	edd0 6a01 	vldr	s13, [r0, #4]
 8018c72:	ee07 3a10 	vmov	s14, r3
 8018c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c7a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8018c7e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018c82:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018c86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018c8a:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018c8e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018c92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018c96:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018c9a:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8018c9e:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018ca0:	694a      	ldr	r2, [r1, #20]
 8018ca2:	ed90 5a05 	vldr	s10, [r0, #20]
 8018ca6:	1b13      	subs	r3, r2, r4
 8018ca8:	ee07 3a10 	vmov	s14, r3
 8018cac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018cb0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018cb4:	680b      	ldr	r3, [r1, #0]
 8018cb6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018cba:	1b1b      	subs	r3, r3, r4
 8018cbc:	ee07 3a10 	vmov	s14, r3
 8018cc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018cc4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018cc8:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018ccc:	ee64 4a86 	vmul.f32	s9, s9, s12
 8018cd0:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8018cd4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018cd6:	698b      	ldr	r3, [r1, #24]
 8018cd8:	ed90 2a03 	vldr	s4, [r0, #12]
 8018cdc:	1a9b      	subs	r3, r3, r2
 8018cde:	ee06 3a90 	vmov	s13, r3
 8018ce2:	684b      	ldr	r3, [r1, #4]
 8018ce4:	edd0 5a04 	vldr	s11, [r0, #16]
 8018ce8:	1a9b      	subs	r3, r3, r2
 8018cea:	ee07 3a10 	vmov	s14, r3
 8018cee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018cf2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018cf6:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018cfa:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018cfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d02:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018d06:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d0a:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018d0e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018d12:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8018d16:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018d18:	694a      	ldr	r2, [r1, #20]
 8018d1a:	ed90 1a07 	vldr	s2, [r0, #28]
 8018d1e:	1b13      	subs	r3, r2, r4
 8018d20:	ee07 3a10 	vmov	s14, r3
 8018d24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d28:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d2c:	680b      	ldr	r3, [r1, #0]
 8018d2e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018d32:	1b1b      	subs	r3, r3, r4
 8018d34:	ee07 3a10 	vmov	s14, r3
 8018d38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d3c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d40:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018d44:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018d48:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8018d4c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018d4e:	698b      	ldr	r3, [r1, #24]
 8018d50:	edd0 5a08 	vldr	s11, [r0, #32]
 8018d54:	1a9b      	subs	r3, r3, r2
 8018d56:	ee07 3a10 	vmov	s14, r3
 8018d5a:	684b      	ldr	r3, [r1, #4]
 8018d5c:	edd0 2a06 	vldr	s5, [r0, #24]
 8018d60:	1a9b      	subs	r3, r3, r2
 8018d62:	ee01 3a90 	vmov	s3, r3
 8018d66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d6a:	ee31 1a65 	vsub.f32	s2, s2, s11
 8018d6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d72:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018d76:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018d7a:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018d7e:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018d82:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018d86:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018d8a:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8018d8e:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018d90:	694a      	ldr	r2, [r1, #20]
 8018d92:	1b13      	subs	r3, r2, r4
 8018d94:	ee03 3a10 	vmov	s6, r3
 8018d98:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018d9c:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018da0:	680b      	ldr	r3, [r1, #0]
 8018da2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018da6:	1b1b      	subs	r3, r3, r4
 8018da8:	ee03 3a10 	vmov	s6, r3
 8018dac:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018db0:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018db4:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018db8:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018dbc:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018dc0:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018dc4:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8018dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dcc:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8018dd0:	dd13      	ble.n	8018dfa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018dd6:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018dda:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018dde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de6:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8018de8:	dd15      	ble.n	8018e16 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018dee:	6403      	str	r3, [r0, #64]	@ 0x40
 8018df0:	bd70      	pop	{r4, r5, r6, pc}
 8018df2:	4623      	mov	r3, r4
 8018df4:	e6fc      	b.n	8018bf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018df6:	462a      	mov	r2, r5
 8018df8:	e705      	b.n	8018c06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018dfa:	d502      	bpl.n	8018e02 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8018dfc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8018e00:	e7e9      	b.n	8018dd6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8018e02:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018e06:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018e0a:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e12:	dade      	bge.n	8018dd2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8018e14:	e7f2      	b.n	8018dfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8018e16:	d502      	bpl.n	8018e1e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8018e18:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8018e1c:	e7e7      	b.n	8018dee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8018e1e:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018e22:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018e26:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8018e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e2e:	dadc      	bge.n	8018dea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8018e30:	e7f2      	b.n	8018e18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8018e32:	bf00      	nop
 8018e34:	3d800000 	.word	0x3d800000

08018e38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e3c:	2714      	movs	r7, #20
 8018e3e:	435f      	muls	r7, r3
 8018e40:	eb02 0c07 	add.w	ip, r2, r7
 8018e44:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018e48:	f115 0e0f 	adds.w	lr, r5, #15
 8018e4c:	f100 80a2 	bmi.w	8018f94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018e50:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018e54:	2614      	movs	r6, #20
 8018e56:	9c08      	ldr	r4, [sp, #32]
 8018e58:	f8c0 e014 	str.w	lr, [r0, #20]
 8018e5c:	4366      	muls	r6, r4
 8018e5e:	eb02 0806 	add.w	r8, r2, r6
 8018e62:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018e66:	f115 040f 	adds.w	r4, r5, #15
 8018e6a:	f100 809f 	bmi.w	8018fac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8018e6e:	1124      	asrs	r4, r4, #4
 8018e70:	eba4 040e 	sub.w	r4, r4, lr
 8018e74:	6184      	str	r4, [r0, #24]
 8018e76:	2c00      	cmp	r4, #0
 8018e78:	f000 808a 	beq.w	8018f90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8018e7c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018e80:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018e84:	5995      	ldr	r5, [r2, r6]
 8018e86:	eba4 0809 	sub.w	r8, r4, r9
 8018e8a:	59d4      	ldr	r4, [r2, r7]
 8018e8c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018e90:	eba5 0a04 	sub.w	sl, r5, r4
 8018e94:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018e98:	fb0e fe05 	mul.w	lr, lr, r5
 8018e9c:	fb0a ee19 	mls	lr, sl, r9, lr
 8018ea0:	fb08 e404 	mla	r4, r8, r4, lr
 8018ea4:	3c01      	subs	r4, #1
 8018ea6:	19a4      	adds	r4, r4, r6
 8018ea8:	f100 808c 	bmi.w	8018fc4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018eac:	fb94 fef6 	sdiv	lr, r4, r6
 8018eb0:	fb06 441e 	mls	r4, r6, lr, r4
 8018eb4:	f8c0 e000 	str.w	lr, [r0]
 8018eb8:	6104      	str	r4, [r0, #16]
 8018eba:	2d00      	cmp	r5, #0
 8018ebc:	f2c0 8095 	blt.w	8018fea <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018ec0:	fb95 f4f6 	sdiv	r4, r5, r6
 8018ec4:	fb06 5514 	mls	r5, r6, r4, r5
 8018ec8:	6044      	str	r4, [r0, #4]
 8018eca:	6085      	str	r5, [r0, #8]
 8018ecc:	60c6      	str	r6, [r0, #12]
 8018ece:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018ed2:	6945      	ldr	r5, [r0, #20]
 8018ed4:	59d2      	ldr	r2, [r2, r7]
 8018ed6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8018eda:	ee07 4a10 	vmov	s14, r4
 8018ede:	6804      	ldr	r4, [r0, #0]
 8018ee0:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801900c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018ee4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018ee8:	ee07 2a90 	vmov	s15, r2
 8018eec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ef4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018ef8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8018efc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018f00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018f04:	edd3 6a00 	vldr	s13, [r3]
 8018f08:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018f0c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8018f10:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018f14:	edc0 6a07 	vstr	s13, [r0, #28]
 8018f18:	edd0 6a01 	vldr	s13, [r0, #4]
 8018f1c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8018f20:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8018f24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018f28:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018f2c:	ed80 6a08 	vstr	s12, [r0, #32]
 8018f30:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8018f32:	6242      	str	r2, [r0, #36]	@ 0x24
 8018f34:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8018f38:	ed93 6a03 	vldr	s12, [r3, #12]
 8018f3c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018f40:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8018f44:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018f48:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8018f4c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8018f50:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8018f54:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018f58:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8018f5c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018f5e:	6302      	str	r2, [r0, #48]	@ 0x30
 8018f60:	ed93 6a06 	vldr	s12, [r3, #24]
 8018f64:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8018f68:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018f6c:	eeb0 7a46 	vmov.f32	s14, s12
 8018f70:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8018f74:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018f78:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8018f7c:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8018f80:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8018f84:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018f88:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8018f8c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8018f8e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8018f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f94:	2410      	movs	r4, #16
 8018f96:	f1c5 0501 	rsb	r5, r5, #1
 8018f9a:	f015 050f 	ands.w	r5, r5, #15
 8018f9e:	fb9e fef4 	sdiv	lr, lr, r4
 8018fa2:	bf18      	it	ne
 8018fa4:	2501      	movne	r5, #1
 8018fa6:	ebae 0e05 	sub.w	lr, lr, r5
 8018faa:	e753      	b.n	8018e54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8018fac:	f04f 0910 	mov.w	r9, #16
 8018fb0:	f1c5 0501 	rsb	r5, r5, #1
 8018fb4:	f015 050f 	ands.w	r5, r5, #15
 8018fb8:	fb94 f4f9 	sdiv	r4, r4, r9
 8018fbc:	bf18      	it	ne
 8018fbe:	2501      	movne	r5, #1
 8018fc0:	1b64      	subs	r4, r4, r5
 8018fc2:	e755      	b.n	8018e70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018fc4:	4264      	negs	r4, r4
 8018fc6:	fb94 fef6 	sdiv	lr, r4, r6
 8018fca:	fb06 441e 	mls	r4, r6, lr, r4
 8018fce:	f1ce 0800 	rsb	r8, lr, #0
 8018fd2:	f8c0 8000 	str.w	r8, [r0]
 8018fd6:	6104      	str	r4, [r0, #16]
 8018fd8:	2c00      	cmp	r4, #0
 8018fda:	f43f af6e 	beq.w	8018eba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8018fde:	ea6f 0e0e 	mvn.w	lr, lr
 8018fe2:	1b34      	subs	r4, r6, r4
 8018fe4:	f8c0 e000 	str.w	lr, [r0]
 8018fe8:	e766      	b.n	8018eb8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8018fea:	426d      	negs	r5, r5
 8018fec:	fb95 f4f6 	sdiv	r4, r5, r6
 8018ff0:	fb06 5514 	mls	r5, r6, r4, r5
 8018ff4:	f1c4 0e00 	rsb	lr, r4, #0
 8018ff8:	f8c0 e004 	str.w	lr, [r0, #4]
 8018ffc:	6085      	str	r5, [r0, #8]
 8018ffe:	2d00      	cmp	r5, #0
 8019000:	f43f af64 	beq.w	8018ecc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019004:	43e4      	mvns	r4, r4
 8019006:	1b75      	subs	r5, r6, r5
 8019008:	6044      	str	r4, [r0, #4]
 801900a:	e75e      	b.n	8018eca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801900c:	3d800000 	.word	0x3d800000

08019010 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019010:	4b01      	ldr	r3, [pc, #4]	@ (8019018 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019012:	6018      	str	r0, [r3, #0]
 8019014:	4770      	bx	lr
 8019016:	bf00      	nop
 8019018:	2015a0d8 	.word	0x2015a0d8

0801901c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801901c:	4b06      	ldr	r3, [pc, #24]	@ (8019038 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801901e:	881a      	ldrh	r2, [r3, #0]
 8019020:	4282      	cmp	r2, r0
 8019022:	d807      	bhi.n	8019034 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019024:	4b05      	ldr	r3, [pc, #20]	@ (801903c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019026:	881b      	ldrh	r3, [r3, #0]
 8019028:	4413      	add	r3, r2
 801902a:	4298      	cmp	r0, r3
 801902c:	bfac      	ite	ge
 801902e:	2000      	movge	r0, #0
 8019030:	2001      	movlt	r0, #1
 8019032:	4770      	bx	lr
 8019034:	2000      	movs	r0, #0
 8019036:	4770      	bx	lr
 8019038:	2015a0f8 	.word	0x2015a0f8
 801903c:	2015a0fc 	.word	0x2015a0fc

08019040 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019040:	b508      	push	{r3, lr}
 8019042:	4601      	mov	r1, r0
 8019044:	f7ff ffea 	bl	801901c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019048:	b118      	cbz	r0, 8019052 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801904a:	4b02      	ldr	r3, [pc, #8]	@ (8019054 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8019052:	bd08      	pop	{r3, pc}
 8019054:	2015a0dc 	.word	0x2015a0dc

08019058 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801905a:	4c24      	ldr	r4, [pc, #144]	@ (80190ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801905c:	6823      	ldr	r3, [r4, #0]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d042      	beq.n	80190e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019062:	4a23      	ldr	r2, [pc, #140]	@ (80190f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019064:	4d23      	ldr	r5, [pc, #140]	@ (80190f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019066:	8811      	ldrh	r1, [r2, #0]
 8019068:	f8b5 c000 	ldrh.w	ip, [r5]
 801906c:	4822      	ldr	r0, [pc, #136]	@ (80190f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801906e:	4461      	add	r1, ip
 8019070:	1c4a      	adds	r2, r1, #1
 8019072:	f022 0201 	bic.w	r2, r2, #1
 8019076:	008f      	lsls	r7, r1, #2
 8019078:	0412      	lsls	r2, r2, #16
 801907a:	19de      	adds	r6, r3, r7
 801907c:	0c12      	lsrs	r2, r2, #16
 801907e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019082:	6006      	str	r6, [r0, #0]
 8019084:	4e1d      	ldr	r6, [pc, #116]	@ (80190fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8019086:	19da      	adds	r2, r3, r7
 8019088:	6032      	str	r2, [r6, #0]
 801908a:	220e      	movs	r2, #14
 801908c:	fb02 f20c 	mul.w	r2, r2, ip
 8019090:	3203      	adds	r2, #3
 8019092:	f022 0203 	bic.w	r2, r2, #3
 8019096:	443a      	add	r2, r7
 8019098:	4f19      	ldr	r7, [pc, #100]	@ (8019100 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801909a:	4413      	add	r3, r2
 801909c:	603b      	str	r3, [r7, #0]
 801909e:	2300      	movs	r3, #0
 80190a0:	4f18      	ldr	r7, [pc, #96]	@ (8019104 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80190a2:	469c      	mov	ip, r3
 80190a4:	803b      	strh	r3, [r7, #0]
 80190a6:	4f18      	ldr	r7, [pc, #96]	@ (8019108 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80190a8:	683f      	ldr	r7, [r7, #0]
 80190aa:	1aba      	subs	r2, r7, r2
 80190ac:	4f17      	ldr	r7, [pc, #92]	@ (801910c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80190ae:	603a      	str	r2, [r7, #0]
 80190b0:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80190b4:	4a16      	ldr	r2, [pc, #88]	@ (8019110 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80190b6:	8013      	strh	r3, [r2, #0]
 80190b8:	428b      	cmp	r3, r1
 80190ba:	d10d      	bne.n	80190d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80190bc:	2300      	movs	r3, #0
 80190be:	240e      	movs	r4, #14
 80190c0:	882d      	ldrh	r5, [r5, #0]
 80190c2:	6830      	ldr	r0, [r6, #0]
 80190c4:	429d      	cmp	r5, r3
 80190c6:	d90f      	bls.n	80190e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80190c8:	fb04 0203 	mla	r2, r4, r3, r0
 80190cc:	7b11      	ldrb	r1, [r2, #12]
 80190ce:	3301      	adds	r3, #1
 80190d0:	f36f 1145 	bfc	r1, #5, #1
 80190d4:	7311      	strb	r1, [r2, #12]
 80190d6:	e7f5      	b.n	80190c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80190d8:	6822      	ldr	r2, [r4, #0]
 80190da:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80190de:	6802      	ldr	r2, [r0, #0]
 80190e0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80190e4:	3301      	adds	r3, #1
 80190e6:	e7e7      	b.n	80190b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80190e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190ea:	bf00      	nop
 80190ec:	2015a0dc 	.word	0x2015a0dc
 80190f0:	2015a0f8 	.word	0x2015a0f8
 80190f4:	2015a0fc 	.word	0x2015a0fc
 80190f8:	2015a0f0 	.word	0x2015a0f0
 80190fc:	2015a0e0 	.word	0x2015a0e0
 8019100:	2015a0e8 	.word	0x2015a0e8
 8019104:	2015a0fa 	.word	0x2015a0fa
 8019108:	2015a0e4 	.word	0x2015a0e4
 801910c:	2015a0f4 	.word	0x2015a0f4
 8019110:	2015a0ec 	.word	0x2015a0ec

08019114 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019114:	4b06      	ldr	r3, [pc, #24]	@ (8019130 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	b943      	cbnz	r3, 801912c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801911a:	b139      	cbz	r1, 801912c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801911c:	4b05      	ldr	r3, [pc, #20]	@ (8019134 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801911e:	801a      	strh	r2, [r3, #0]
 8019120:	4b05      	ldr	r3, [pc, #20]	@ (8019138 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019122:	6019      	str	r1, [r3, #0]
 8019124:	4b05      	ldr	r3, [pc, #20]	@ (801913c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019126:	6018      	str	r0, [r3, #0]
 8019128:	f7ff bf96 	b.w	8019058 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801912c:	4770      	bx	lr
 801912e:	bf00      	nop
 8019130:	2015a0e8 	.word	0x2015a0e8
 8019134:	2015a0fc 	.word	0x2015a0fc
 8019138:	2015a0e4 	.word	0x2015a0e4
 801913c:	2015a0dc 	.word	0x2015a0dc

08019140 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019140:	b470      	push	{r4, r5, r6}
 8019142:	4c07      	ldr	r4, [pc, #28]	@ (8019160 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019144:	4605      	mov	r5, r0
 8019146:	6826      	ldr	r6, [r4, #0]
 8019148:	4610      	mov	r0, r2
 801914a:	9a03      	ldr	r2, [sp, #12]
 801914c:	b936      	cbnz	r6, 801915c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801914e:	6025      	str	r5, [r4, #0]
 8019150:	4c04      	ldr	r4, [pc, #16]	@ (8019164 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019152:	8021      	strh	r1, [r4, #0]
 8019154:	bc70      	pop	{r4, r5, r6}
 8019156:	4619      	mov	r1, r3
 8019158:	f7ff bfdc 	b.w	8019114 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801915c:	bc70      	pop	{r4, r5, r6}
 801915e:	4770      	bx	lr
 8019160:	2015a100 	.word	0x2015a100
 8019164:	2015a0f8 	.word	0x2015a0f8

08019168 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019168:	4a12      	ldr	r2, [pc, #72]	@ (80191b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801916a:	8803      	ldrh	r3, [r0, #0]
 801916c:	8812      	ldrh	r2, [r2, #0]
 801916e:	4293      	cmp	r3, r2
 8019170:	d207      	bcs.n	8019182 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019172:	2114      	movs	r1, #20
 8019174:	4a10      	ldr	r2, [pc, #64]	@ (80191b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019176:	6812      	ldr	r2, [r2, #0]
 8019178:	fb01 2303 	mla	r3, r1, r3, r2
 801917c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019180:	4770      	bx	lr
 8019182:	490e      	ldr	r1, [pc, #56]	@ (80191bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019184:	8809      	ldrh	r1, [r1, #0]
 8019186:	4411      	add	r1, r2
 8019188:	428b      	cmp	r3, r1
 801918a:	da04      	bge.n	8019196 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801918c:	1a9b      	subs	r3, r3, r2
 801918e:	4a0c      	ldr	r2, [pc, #48]	@ (80191c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019190:	210e      	movs	r1, #14
 8019192:	6812      	ldr	r2, [r2, #0]
 8019194:	e7f0      	b.n	8019178 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019196:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801919a:	4293      	cmp	r3, r2
 801919c:	d108      	bne.n	80191b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801919e:	4b09      	ldr	r3, [pc, #36]	@ (80191c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80191a0:	781b      	ldrb	r3, [r3, #0]
 80191a2:	b91b      	cbnz	r3, 80191ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80191a4:	4b08      	ldr	r3, [pc, #32]	@ (80191c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80191a6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80191aa:	4770      	bx	lr
 80191ac:	4b07      	ldr	r3, [pc, #28]	@ (80191cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80191ae:	e7fa      	b.n	80191a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80191b0:	2000      	movs	r0, #0
 80191b2:	4770      	bx	lr
 80191b4:	2015a0f8 	.word	0x2015a0f8
 80191b8:	2015a100 	.word	0x2015a100
 80191bc:	2015a0fc 	.word	0x2015a0fc
 80191c0:	2015a0e0 	.word	0x2015a0e0
 80191c4:	2015a070 	.word	0x2015a070
 80191c8:	2015a072 	.word	0x2015a072
 80191cc:	2015a074 	.word	0x2015a074

080191d0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80191d0:	4a12      	ldr	r2, [pc, #72]	@ (801921c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80191d2:	8803      	ldrh	r3, [r0, #0]
 80191d4:	8812      	ldrh	r2, [r2, #0]
 80191d6:	4293      	cmp	r3, r2
 80191d8:	d207      	bcs.n	80191ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80191da:	2114      	movs	r1, #20
 80191dc:	4a10      	ldr	r2, [pc, #64]	@ (8019220 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80191de:	6812      	ldr	r2, [r2, #0]
 80191e0:	fb01 2303 	mla	r3, r1, r3, r2
 80191e4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80191e8:	4770      	bx	lr
 80191ea:	490e      	ldr	r1, [pc, #56]	@ (8019224 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80191ec:	8809      	ldrh	r1, [r1, #0]
 80191ee:	4411      	add	r1, r2
 80191f0:	428b      	cmp	r3, r1
 80191f2:	da04      	bge.n	80191fe <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80191f4:	1a9b      	subs	r3, r3, r2
 80191f6:	4a0c      	ldr	r2, [pc, #48]	@ (8019228 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80191f8:	210e      	movs	r1, #14
 80191fa:	6812      	ldr	r2, [r2, #0]
 80191fc:	e7f0      	b.n	80191e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80191fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019202:	4293      	cmp	r3, r2
 8019204:	d108      	bne.n	8019218 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8019206:	4b09      	ldr	r3, [pc, #36]	@ (801922c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019208:	781b      	ldrb	r3, [r3, #0]
 801920a:	b91b      	cbnz	r3, 8019214 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801920c:	4b08      	ldr	r3, [pc, #32]	@ (8019230 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801920e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019212:	4770      	bx	lr
 8019214:	4b07      	ldr	r3, [pc, #28]	@ (8019234 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019216:	e7fa      	b.n	801920e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019218:	2000      	movs	r0, #0
 801921a:	4770      	bx	lr
 801921c:	2015a0f8 	.word	0x2015a0f8
 8019220:	2015a100 	.word	0x2015a100
 8019224:	2015a0fc 	.word	0x2015a0fc
 8019228:	2015a0e0 	.word	0x2015a0e0
 801922c:	2015a070 	.word	0x2015a070
 8019230:	2015a074 	.word	0x2015a074
 8019234:	2015a072 	.word	0x2015a072

08019238 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019238:	4a12      	ldr	r2, [pc, #72]	@ (8019284 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801923a:	8803      	ldrh	r3, [r0, #0]
 801923c:	8811      	ldrh	r1, [r2, #0]
 801923e:	428b      	cmp	r3, r1
 8019240:	d20b      	bcs.n	801925a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8019242:	4a11      	ldr	r2, [pc, #68]	@ (8019288 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019244:	6812      	ldr	r2, [r2, #0]
 8019246:	b112      	cbz	r2, 801924e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019248:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801924c:	b9c0      	cbnz	r0, 8019280 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801924e:	4a0f      	ldr	r2, [pc, #60]	@ (801928c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019250:	6811      	ldr	r1, [r2, #0]
 8019252:	2214      	movs	r2, #20
 8019254:	4353      	muls	r3, r2
 8019256:	58c8      	ldr	r0, [r1, r3]
 8019258:	4770      	bx	lr
 801925a:	4a0d      	ldr	r2, [pc, #52]	@ (8019290 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801925c:	8812      	ldrh	r2, [r2, #0]
 801925e:	440a      	add	r2, r1
 8019260:	4293      	cmp	r3, r2
 8019262:	da04      	bge.n	801926e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8019264:	4a08      	ldr	r2, [pc, #32]	@ (8019288 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019266:	6812      	ldr	r2, [r2, #0]
 8019268:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801926c:	4770      	bx	lr
 801926e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019272:	4293      	cmp	r3, r2
 8019274:	d103      	bne.n	801927e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019276:	4b07      	ldr	r3, [pc, #28]	@ (8019294 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801927c:	4770      	bx	lr
 801927e:	2000      	movs	r0, #0
 8019280:	4770      	bx	lr
 8019282:	bf00      	nop
 8019284:	2015a0f8 	.word	0x2015a0f8
 8019288:	2015a0dc 	.word	0x2015a0dc
 801928c:	2015a100 	.word	0x2015a100
 8019290:	2015a0fc 	.word	0x2015a0fc
 8019294:	2015a078 	.word	0x2015a078

08019298 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019298:	4b24      	ldr	r3, [pc, #144]	@ (801932c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801929a:	8802      	ldrh	r2, [r0, #0]
 801929c:	8818      	ldrh	r0, [r3, #0]
 801929e:	4282      	cmp	r2, r0
 80192a0:	d221      	bcs.n	80192e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80192a2:	4b23      	ldr	r3, [pc, #140]	@ (8019330 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80192a4:	6819      	ldr	r1, [r3, #0]
 80192a6:	2314      	movs	r3, #20
 80192a8:	fb03 1302 	mla	r3, r3, r2, r1
 80192ac:	6858      	ldr	r0, [r3, #4]
 80192ae:	2800      	cmp	r0, #0
 80192b0:	d03a      	beq.n	8019328 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80192b2:	4920      	ldr	r1, [pc, #128]	@ (8019334 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80192b4:	6809      	ldr	r1, [r1, #0]
 80192b6:	2900      	cmp	r1, #0
 80192b8:	d036      	beq.n	8019328 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80192ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80192be:	2900      	cmp	r1, #0
 80192c0:	d032      	beq.n	8019328 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80192c2:	891a      	ldrh	r2, [r3, #8]
 80192c4:	8958      	ldrh	r0, [r3, #10]
 80192c6:	4350      	muls	r0, r2
 80192c8:	7c5a      	ldrb	r2, [r3, #17]
 80192ca:	7cdb      	ldrb	r3, [r3, #19]
 80192cc:	0952      	lsrs	r2, r2, #5
 80192ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80192d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80192d6:	2b0b      	cmp	r3, #11
 80192d8:	bf18      	it	ne
 80192da:	0040      	lslne	r0, r0, #1
 80192dc:	3003      	adds	r0, #3
 80192de:	f020 0003 	bic.w	r0, r0, #3
 80192e2:	4408      	add	r0, r1
 80192e4:	4770      	bx	lr
 80192e6:	4b14      	ldr	r3, [pc, #80]	@ (8019338 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80192e8:	881b      	ldrh	r3, [r3, #0]
 80192ea:	4403      	add	r3, r0
 80192ec:	429a      	cmp	r2, r3
 80192ee:	da1a      	bge.n	8019326 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80192f0:	210e      	movs	r1, #14
 80192f2:	4b12      	ldr	r3, [pc, #72]	@ (801933c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80192f4:	1a10      	subs	r0, r2, r0
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	fb01 3000 	mla	r0, r1, r0, r3
 80192fc:	7b03      	ldrb	r3, [r0, #12]
 80192fe:	f003 031f 	and.w	r3, r3, #31
 8019302:	2b0b      	cmp	r3, #11
 8019304:	d10b      	bne.n	801931e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019306:	8903      	ldrh	r3, [r0, #8]
 8019308:	8940      	ldrh	r0, [r0, #10]
 801930a:	4358      	muls	r0, r3
 801930c:	4b09      	ldr	r3, [pc, #36]	@ (8019334 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801930e:	3003      	adds	r0, #3
 8019310:	6819      	ldr	r1, [r3, #0]
 8019312:	f020 0303 	bic.w	r3, r0, #3
 8019316:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801931a:	4418      	add	r0, r3
 801931c:	4770      	bx	lr
 801931e:	2b0d      	cmp	r3, #13
 8019320:	d101      	bne.n	8019326 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019322:	300d      	adds	r0, #13
 8019324:	4770      	bx	lr
 8019326:	2000      	movs	r0, #0
 8019328:	4770      	bx	lr
 801932a:	bf00      	nop
 801932c:	2015a0f8 	.word	0x2015a0f8
 8019330:	2015a100 	.word	0x2015a100
 8019334:	2015a0dc 	.word	0x2015a0dc
 8019338:	2015a0fc 	.word	0x2015a0fc
 801933c:	2015a0e0 	.word	0x2015a0e0

08019340 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019340:	b510      	push	{r4, lr}
 8019342:	4a17      	ldr	r2, [pc, #92]	@ (80193a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019344:	8803      	ldrh	r3, [r0, #0]
 8019346:	8812      	ldrh	r2, [r2, #0]
 8019348:	4293      	cmp	r3, r2
 801934a:	d20c      	bcs.n	8019366 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801934c:	2114      	movs	r1, #20
 801934e:	4a15      	ldr	r2, [pc, #84]	@ (80193a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019350:	6812      	ldr	r2, [r2, #0]
 8019352:	fb01 2303 	mla	r3, r1, r3, r2
 8019356:	7c58      	ldrb	r0, [r3, #17]
 8019358:	0942      	lsrs	r2, r0, #5
 801935a:	7cd8      	ldrb	r0, [r3, #19]
 801935c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019360:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019364:	bd10      	pop	{r4, pc}
 8019366:	4910      	ldr	r1, [pc, #64]	@ (80193a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019368:	8809      	ldrh	r1, [r1, #0]
 801936a:	4411      	add	r1, r2
 801936c:	428b      	cmp	r3, r1
 801936e:	da09      	bge.n	8019384 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019370:	210e      	movs	r1, #14
 8019372:	1a9b      	subs	r3, r3, r2
 8019374:	4a0d      	ldr	r2, [pc, #52]	@ (80193ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019376:	6812      	ldr	r2, [r2, #0]
 8019378:	fb01 2303 	mla	r3, r1, r3, r2
 801937c:	7b18      	ldrb	r0, [r3, #12]
 801937e:	f000 001f 	and.w	r0, r0, #31
 8019382:	e7ef      	b.n	8019364 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019384:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019388:	4293      	cmp	r3, r2
 801938a:	d106      	bne.n	801939a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801938c:	f7fb fcf0 	bl	8014d70 <_ZN8touchgfx3HAL3lcdEv>
 8019390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019394:	6803      	ldr	r3, [r0, #0]
 8019396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019398:	4718      	bx	r3
 801939a:	2000      	movs	r0, #0
 801939c:	e7e2      	b.n	8019364 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801939e:	bf00      	nop
 80193a0:	2015a0f8 	.word	0x2015a0f8
 80193a4:	2015a100 	.word	0x2015a100
 80193a8:	2015a0fc 	.word	0x2015a0fc
 80193ac:	2015a0e0 	.word	0x2015a0e0

080193b0 <CRC_Lock>:
 80193b0:	b530      	push	{r4, r5, lr}
 80193b2:	4a2d      	ldr	r2, [pc, #180]	@ (8019468 <CRC_Lock+0xb8>)
 80193b4:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80193b8:	6813      	ldr	r3, [r2, #0]
 80193ba:	f023 0301 	bic.w	r3, r3, #1
 80193be:	6013      	str	r3, [r2, #0]
 80193c0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80193c4:	4b29      	ldr	r3, [pc, #164]	@ (801946c <CRC_Lock+0xbc>)
 80193c6:	681c      	ldr	r4, [r3, #0]
 80193c8:	4014      	ands	r4, r2
 80193ca:	42ac      	cmp	r4, r5
 80193cc:	d005      	beq.n	80193da <CRC_Lock+0x2a>
 80193ce:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80193d2:	681c      	ldr	r4, [r3, #0]
 80193d4:	4014      	ands	r4, r2
 80193d6:	42ac      	cmp	r4, r5
 80193d8:	d125      	bne.n	8019426 <CRC_Lock+0x76>
 80193da:	4b25      	ldr	r3, [pc, #148]	@ (8019470 <CRC_Lock+0xc0>)
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d139      	bne.n	8019456 <CRC_Lock+0xa6>
 80193e2:	4b24      	ldr	r3, [pc, #144]	@ (8019474 <CRC_Lock+0xc4>)
 80193e4:	681a      	ldr	r2, [r3, #0]
 80193e6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80193ea:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80193ee:	d00d      	beq.n	801940c <CRC_Lock+0x5c>
 80193f0:	f240 4483 	movw	r4, #1155	@ 0x483
 80193f4:	681a      	ldr	r2, [r3, #0]
 80193f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80193fa:	42a2      	cmp	r2, r4
 80193fc:	d006      	beq.n	801940c <CRC_Lock+0x5c>
 80193fe:	f240 4285 	movw	r2, #1157	@ 0x485
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019408:	4293      	cmp	r3, r2
 801940a:	d124      	bne.n	8019456 <CRC_Lock+0xa6>
 801940c:	2201      	movs	r2, #1
 801940e:	4b1a      	ldr	r3, [pc, #104]	@ (8019478 <CRC_Lock+0xc8>)
 8019410:	601a      	str	r2, [r3, #0]
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	2a00      	cmp	r2, #0
 8019416:	d1fc      	bne.n	8019412 <CRC_Lock+0x62>
 8019418:	4b18      	ldr	r3, [pc, #96]	@ (801947c <CRC_Lock+0xcc>)
 801941a:	6018      	str	r0, [r3, #0]
 801941c:	6818      	ldr	r0, [r3, #0]
 801941e:	1a43      	subs	r3, r0, r1
 8019420:	4258      	negs	r0, r3
 8019422:	4158      	adcs	r0, r3
 8019424:	e00e      	b.n	8019444 <CRC_Lock+0x94>
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	4013      	ands	r3, r2
 801942a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 801942e:	4293      	cmp	r3, r2
 8019430:	d111      	bne.n	8019456 <CRC_Lock+0xa6>
 8019432:	f240 4286 	movw	r2, #1158	@ 0x486
 8019436:	4b12      	ldr	r3, [pc, #72]	@ (8019480 <CRC_Lock+0xd0>)
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801943e:	4293      	cmp	r3, r2
 8019440:	d001      	beq.n	8019446 <CRC_Lock+0x96>
 8019442:	2000      	movs	r0, #0
 8019444:	bd30      	pop	{r4, r5, pc}
 8019446:	2201      	movs	r2, #1
 8019448:	4b0e      	ldr	r3, [pc, #56]	@ (8019484 <CRC_Lock+0xd4>)
 801944a:	601a      	str	r2, [r3, #0]
 801944c:	681a      	ldr	r2, [r3, #0]
 801944e:	2a00      	cmp	r2, #0
 8019450:	d1fc      	bne.n	801944c <CRC_Lock+0x9c>
 8019452:	4b0d      	ldr	r3, [pc, #52]	@ (8019488 <CRC_Lock+0xd8>)
 8019454:	e7e1      	b.n	801941a <CRC_Lock+0x6a>
 8019456:	2201      	movs	r2, #1
 8019458:	4b0c      	ldr	r3, [pc, #48]	@ (801948c <CRC_Lock+0xdc>)
 801945a:	601a      	str	r2, [r3, #0]
 801945c:	681a      	ldr	r2, [r3, #0]
 801945e:	2a00      	cmp	r2, #0
 8019460:	d1fc      	bne.n	801945c <CRC_Lock+0xac>
 8019462:	4b0b      	ldr	r3, [pc, #44]	@ (8019490 <CRC_Lock+0xe0>)
 8019464:	e7d9      	b.n	801941a <CRC_Lock+0x6a>
 8019466:	bf00      	nop
 8019468:	e0002000 	.word	0xe0002000
 801946c:	e000ed00 	.word	0xe000ed00
 8019470:	e0042000 	.word	0xe0042000
 8019474:	5c001000 	.word	0x5c001000
 8019478:	58024c08 	.word	0x58024c08
 801947c:	58024c00 	.word	0x58024c00
 8019480:	46008ff0 	.word	0x46008ff0
 8019484:	46024c08 	.word	0x46024c08
 8019488:	46024c00 	.word	0x46024c00
 801948c:	40023008 	.word	0x40023008
 8019490:	40023000 	.word	0x40023000

08019494 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8019494:	6101      	str	r1, [r0, #16]
 8019496:	4770      	bx	lr

08019498 <_ZN8touchgfx8Gestures4tickEv>:
 8019498:	7b83      	ldrb	r3, [r0, #14]
 801949a:	b14b      	cbz	r3, 80194b0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801949c:	8903      	ldrh	r3, [r0, #8]
 801949e:	3301      	adds	r3, #1
 80194a0:	b29b      	uxth	r3, r3
 80194a2:	2b07      	cmp	r3, #7
 80194a4:	8103      	strh	r3, [r0, #8]
 80194a6:	bf81      	itttt	hi
 80194a8:	2300      	movhi	r3, #0
 80194aa:	8143      	strhhi	r3, [r0, #10]
 80194ac:	8183      	strhhi	r3, [r0, #12]
 80194ae:	7383      	strbhi	r3, [r0, #14]
 80194b0:	4770      	bx	lr
	...

080194b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80194b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80194b8:	4698      	mov	r8, r3
 80194ba:	4604      	mov	r4, r0
 80194bc:	8883      	ldrh	r3, [r0, #4]
 80194be:	460e      	mov	r6, r1
 80194c0:	88c1      	ldrh	r1, [r0, #6]
 80194c2:	2000      	movs	r0, #0
 80194c4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80194c8:	eba8 0303 	sub.w	r3, r8, r3
 80194cc:	b21b      	sxth	r3, r3
 80194ce:	4617      	mov	r7, r2
 80194d0:	4a17      	ldr	r2, [pc, #92]	@ (8019530 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	bfb8      	it	lt
 80194d6:	425b      	neglt	r3, r3
 80194d8:	9200      	str	r2, [sp, #0]
 80194da:	8aa2      	ldrh	r2, [r4, #20]
 80194dc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80194e0:	b21b      	sxth	r3, r3
 80194e2:	4293      	cmp	r3, r2
 80194e4:	f88d 0004 	strb.w	r0, [sp, #4]
 80194e8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80194ec:	f8ad 800a 	strh.w	r8, [sp, #10]
 80194f0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80194f4:	dc07      	bgt.n	8019506 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80194f6:	1a69      	subs	r1, r5, r1
 80194f8:	b209      	sxth	r1, r1
 80194fa:	2900      	cmp	r1, #0
 80194fc:	bfb8      	it	lt
 80194fe:	4249      	neglt	r1, r1
 8019500:	b209      	sxth	r1, r1
 8019502:	428a      	cmp	r2, r1
 8019504:	da10      	bge.n	8019528 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8019506:	6920      	ldr	r0, [r4, #16]
 8019508:	4669      	mov	r1, sp
 801950a:	6803      	ldr	r3, [r0, #0]
 801950c:	eba8 0606 	sub.w	r6, r8, r6
 8019510:	685b      	ldr	r3, [r3, #4]
 8019512:	4798      	blx	r3
 8019514:	2300      	movs	r3, #0
 8019516:	2001      	movs	r0, #1
 8019518:	1bef      	subs	r7, r5, r7
 801951a:	8123      	strh	r3, [r4, #8]
 801951c:	8166      	strh	r6, [r4, #10]
 801951e:	81a7      	strh	r7, [r4, #12]
 8019520:	f8a4 8004 	strh.w	r8, [r4, #4]
 8019524:	80e5      	strh	r5, [r4, #6]
 8019526:	73a0      	strb	r0, [r4, #14]
 8019528:	b004      	add	sp, #16
 801952a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801952e:	bf00      	nop
 8019530:	0802e584 	.word	0x0802e584

08019534 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8019534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019536:	461e      	mov	r6, r3
 8019538:	1e4b      	subs	r3, r1, #1
 801953a:	2b01      	cmp	r3, #1
 801953c:	b085      	sub	sp, #20
 801953e:	4604      	mov	r4, r0
 8019540:	460d      	mov	r5, r1
 8019542:	4617      	mov	r7, r2
 8019544:	d84b      	bhi.n	80195de <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8019546:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801954a:	1cd3      	adds	r3, r2, #3
 801954c:	b29b      	uxth	r3, r3
 801954e:	2b06      	cmp	r3, #6
 8019550:	d916      	bls.n	8019580 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8019552:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80195f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8019556:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801955a:	f8cd c004 	str.w	ip, [sp, #4]
 801955e:	f04f 0c00 	mov.w	ip, #0
 8019562:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019566:	6900      	ldr	r0, [r0, #16]
 8019568:	f8ad 100c 	strh.w	r1, [sp, #12]
 801956c:	f88d c008 	strb.w	ip, [sp, #8]
 8019570:	f8ad 200a 	strh.w	r2, [sp, #10]
 8019574:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019578:	6803      	ldr	r3, [r0, #0]
 801957a:	a901      	add	r1, sp, #4
 801957c:	689b      	ldr	r3, [r3, #8]
 801957e:	4798      	blx	r3
 8019580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019584:	1cd3      	adds	r3, r2, #3
 8019586:	b29b      	uxth	r3, r3
 8019588:	2b06      	cmp	r3, #6
 801958a:	d916      	bls.n	80195ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801958c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80195f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8019590:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019594:	f8cd c004 	str.w	ip, [sp, #4]
 8019598:	f04f 0c01 	mov.w	ip, #1
 801959c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80195a0:	6920      	ldr	r0, [r4, #16]
 80195a2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80195a6:	f88d c008 	strb.w	ip, [sp, #8]
 80195aa:	f8ad 200a 	strh.w	r2, [sp, #10]
 80195ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80195b2:	6803      	ldr	r3, [r0, #0]
 80195b4:	a901      	add	r1, sp, #4
 80195b6:	689b      	ldr	r3, [r3, #8]
 80195b8:	4798      	blx	r3
 80195ba:	4b0d      	ldr	r3, [pc, #52]	@ (80195f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80195bc:	6920      	ldr	r0, [r4, #16]
 80195be:	9301      	str	r3, [sp, #4]
 80195c0:	2300      	movs	r3, #0
 80195c2:	f88d 5008 	strb.w	r5, [sp, #8]
 80195c6:	f8ad 700a 	strh.w	r7, [sp, #10]
 80195ca:	f8ad 600c 	strh.w	r6, [sp, #12]
 80195ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80195d2:	6803      	ldr	r3, [r0, #0]
 80195d4:	a901      	add	r1, sp, #4
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	4798      	blx	r3
 80195da:	b005      	add	sp, #20
 80195dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195de:	2900      	cmp	r1, #0
 80195e0:	d1eb      	bne.n	80195ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80195e2:	80a2      	strh	r2, [r4, #4]
 80195e4:	80c6      	strh	r6, [r0, #6]
 80195e6:	60a1      	str	r1, [r4, #8]
 80195e8:	81a1      	strh	r1, [r4, #12]
 80195ea:	73a1      	strb	r1, [r4, #14]
 80195ec:	e7e5      	b.n	80195ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80195ee:	bf00      	nop
 80195f0:	0802e570 	.word	0x0802e570
 80195f4:	0802e598 	.word	0x0802e598

080195f8 <nema_rb_init>:
 80195f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195fc:	6805      	ldr	r5, [r0, #0]
 80195fe:	4f23      	ldr	r7, [pc, #140]	@ (801968c <nema_rb_init+0x94>)
 8019600:	2d00      	cmp	r5, #0
 8019602:	603d      	str	r5, [r7, #0]
 8019604:	dd3c      	ble.n	8019680 <nema_rb_init+0x88>
 8019606:	f8df c090 	ldr.w	ip, [pc, #144]	@ 8019698 <nema_rb_init+0xa0>
 801960a:	10ab      	asrs	r3, r5, #2
 801960c:	3b04      	subs	r3, #4
 801960e:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 801969c <nema_rb_init+0xa4>
 8019612:	6886      	ldr	r6, [r0, #8]
 8019614:	4c1e      	ldr	r4, [pc, #120]	@ (8019690 <nema_rb_init+0x98>)
 8019616:	f8cc 3000 	str.w	r3, [ip]
 801961a:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80196a0 <nema_rb_init+0xa8>
 801961e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8019622:	f8ce 0000 	str.w	r0, [lr]
 8019626:	6026      	str	r6, [r4, #0]
 8019628:	f8c8 c000 	str.w	ip, [r8]
 801962c:	b329      	cbz	r1, 801967a <nema_rb_init+0x82>
 801962e:	2400      	movs	r4, #0
 8019630:	f8df e070 	ldr.w	lr, [pc, #112]	@ 80196a4 <nema_rb_init+0xac>
 8019634:	4917      	ldr	r1, [pc, #92]	@ (8019694 <nema_rb_init+0x9c>)
 8019636:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801963a:	f846 e023 	str.w	lr, [r6, r3, lsl #2]
 801963e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019642:	e9c3 1502 	strd	r1, r5, [r3, #8]
 8019646:	f8c3 c004 	str.w	ip, [r3, #4]
 801964a:	f7fa fed2 	bl	80143f2 <nema_buffer_flush>
 801964e:	4621      	mov	r1, r4
 8019650:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 8019654:	f7fa fe38 	bl	80142c8 <nema_reg_write>
 8019658:	f8d8 1000 	ldr.w	r1, [r8]
 801965c:	20ec      	movs	r0, #236	@ 0xec
 801965e:	f041 0106 	orr.w	r1, r1, #6
 8019662:	f7fa fe31 	bl	80142c8 <nema_reg_write>
 8019666:	f8d8 1000 	ldr.w	r1, [r8]
 801966a:	20f0      	movs	r0, #240	@ 0xf0
 801966c:	f7fa fe2c 	bl	80142c8 <nema_reg_write>
 8019670:	6839      	ldr	r1, [r7, #0]
 8019672:	20f4      	movs	r0, #244	@ 0xf4
 8019674:	f7fa fe28 	bl	80142c8 <nema_reg_write>
 8019678:	4621      	mov	r1, r4
 801967a:	4608      	mov	r0, r1
 801967c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019680:	2004      	movs	r0, #4
 8019682:	f000 fa25 	bl	8019ad0 <nema_set_error>
 8019686:	f04f 31ff 	mov.w	r1, #4294967295
 801968a:	e7f6      	b.n	801967a <nema_rb_init+0x82>
 801968c:	2015a114 	.word	0x2015a114
 8019690:	2015a10c 	.word	0x2015a10c
 8019694:	ff0000f4 	.word	0xff0000f4
 8019698:	2015a110 	.word	0x2015a110
 801969c:	2015a104 	.word	0x2015a104
 80196a0:	2015a108 	.word	0x2015a108
 80196a4:	ff0000f0 	.word	0xff0000f0

080196a8 <nema_rb_submit_cmdlist2>:
 80196a8:	2900      	cmp	r1, #0
 80196aa:	d074      	beq.n	8019796 <nema_rb_submit_cmdlist2+0xee>
 80196ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196b0:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 80197ac <nema_rb_submit_cmdlist2+0x104>
 80196b4:	4b39      	ldr	r3, [pc, #228]	@ (801979c <nema_rb_submit_cmdlist2+0xf4>)
 80196b6:	f8d8 2000 	ldr.w	r2, [r8]
 80196ba:	681d      	ldr	r5, [r3, #0]
 80196bc:	6913      	ldr	r3, [r2, #16]
 80196be:	468c      	mov	ip, r1
 80196c0:	4c37      	ldr	r4, [pc, #220]	@ (80197a0 <nema_rb_submit_cmdlist2+0xf8>)
 80196c2:	1d19      	adds	r1, r3, #4
 80196c4:	42a9      	cmp	r1, r5
 80196c6:	6824      	ldr	r4, [r4, #0]
 80196c8:	db0a      	blt.n	80196e0 <nema_rb_submit_cmdlist2+0x38>
 80196ca:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80196ce:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80196d2:	6913      	ldr	r3, [r2, #16]
 80196d4:	3301      	adds	r3, #1
 80196d6:	429d      	cmp	r5, r3
 80196d8:	6113      	str	r3, [r2, #16]
 80196da:	dc59      	bgt.n	8019790 <nema_rb_submit_cmdlist2+0xe8>
 80196dc:	2300      	movs	r3, #0
 80196de:	6113      	str	r3, [r2, #16]
 80196e0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80196e4:	f04f 0e00 	mov.w	lr, #0
 80196e8:	e009      	b.n	80196fe <nema_rb_submit_cmdlist2+0x56>
 80196ea:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80196ee:	6913      	ldr	r3, [r2, #16]
 80196f0:	3301      	adds	r3, #1
 80196f2:	429d      	cmp	r5, r3
 80196f4:	6113      	str	r3, [r2, #16]
 80196f6:	bfdc      	itt	le
 80196f8:	2300      	movle	r3, #0
 80196fa:	f8c2 e010 	strle.w	lr, [r2, #16]
 80196fe:	f013 0703 	ands.w	r7, r3, #3
 8019702:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019706:	d1f0      	bne.n	80196ea <nema_rb_submit_cmdlist2+0x42>
 8019708:	23f0      	movs	r3, #240	@ 0xf0
 801970a:	6033      	str	r3, [r6, #0]
 801970c:	6913      	ldr	r3, [r2, #16]
 801970e:	3301      	adds	r3, #1
 8019710:	429d      	cmp	r5, r3
 8019712:	bfd3      	iteet	le
 8019714:	4623      	movle	r3, r4
 8019716:	6113      	strgt	r3, [r2, #16]
 8019718:	eb04 0383 	addgt.w	r3, r4, r3, lsl #2
 801971c:	6117      	strle	r7, [r2, #16]
 801971e:	6018      	str	r0, [r3, #0]
 8019720:	6913      	ldr	r3, [r2, #16]
 8019722:	3301      	adds	r3, #1
 8019724:	429d      	cmp	r5, r3
 8019726:	dd2f      	ble.n	8019788 <nema_rb_submit_cmdlist2+0xe0>
 8019728:	6113      	str	r3, [r2, #16]
 801972a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801972e:	491d      	ldr	r1, [pc, #116]	@ (80197a4 <nema_rb_submit_cmdlist2+0xfc>)
 8019730:	4610      	mov	r0, r2
 8019732:	6019      	str	r1, [r3, #0]
 8019734:	6913      	ldr	r3, [r2, #16]
 8019736:	3301      	adds	r3, #1
 8019738:	429d      	cmp	r5, r3
 801973a:	bfd3      	iteet	le
 801973c:	2300      	movle	r3, #0
 801973e:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 8019742:	6113      	strgt	r3, [r2, #16]
 8019744:	6113      	strle	r3, [r2, #16]
 8019746:	f8c4 c000 	str.w	ip, [r4]
 801974a:	6913      	ldr	r3, [r2, #16]
 801974c:	3301      	adds	r3, #1
 801974e:	429d      	cmp	r5, r3
 8019750:	bfd8      	it	le
 8019752:	2300      	movle	r3, #0
 8019754:	6113      	str	r3, [r2, #16]
 8019756:	f7fa fe4c 	bl	80143f2 <nema_buffer_flush>
 801975a:	4a13      	ldr	r2, [pc, #76]	@ (80197a8 <nema_rb_submit_cmdlist2+0x100>)
 801975c:	f8d8 3000 	ldr.w	r3, [r8]
 8019760:	6811      	ldr	r1, [r2, #0]
 8019762:	691b      	ldr	r3, [r3, #16]
 8019764:	20ec      	movs	r0, #236	@ 0xec
 8019766:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801976a:	f041 0104 	orr.w	r1, r1, #4
 801976e:	f7fa fdab 	bl	80142c8 <nema_reg_write>
 8019772:	f8d8 3000 	ldr.w	r3, [r8]
 8019776:	6958      	ldr	r0, [r3, #20]
 8019778:	3001      	adds	r0, #1
 801977a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 801977e:	bfa8      	it	ge
 8019780:	2000      	movge	r0, #0
 8019782:	6158      	str	r0, [r3, #20]
 8019784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019788:	2100      	movs	r1, #0
 801978a:	4623      	mov	r3, r4
 801978c:	6111      	str	r1, [r2, #16]
 801978e:	e7ce      	b.n	801972e <nema_rb_submit_cmdlist2+0x86>
 8019790:	2b00      	cmp	r3, #0
 8019792:	d19c      	bne.n	80196ce <nema_rb_submit_cmdlist2+0x26>
 8019794:	e7a4      	b.n	80196e0 <nema_rb_submit_cmdlist2+0x38>
 8019796:	f04f 30ff 	mov.w	r0, #4294967295
 801979a:	4770      	bx	lr
 801979c:	2015a110 	.word	0x2015a110
 80197a0:	2015a10c 	.word	0x2015a10c
 80197a4:	000200f4 	.word	0x000200f4
 80197a8:	2015a108 	.word	0x2015a108
 80197ac:	2015a104 	.word	0x2015a104

080197b0 <nema_rb_submit_cmdlist>:
 80197b0:	68c0      	ldr	r0, [r0, #12]
 80197b2:	f7ff bf79 	b.w	80196a8 <nema_rb_submit_cmdlist2>
 80197b6:	bf00      	nop

080197b8 <nema_rb_inline_cmd>:
 80197b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ba:	4e21      	ldr	r6, [pc, #132]	@ (8019840 <nema_rb_inline_cmd+0x88>)
 80197bc:	4b21      	ldr	r3, [pc, #132]	@ (8019844 <nema_rb_inline_cmd+0x8c>)
 80197be:	6832      	ldr	r2, [r6, #0]
 80197c0:	681d      	ldr	r5, [r3, #0]
 80197c2:	6913      	ldr	r3, [r2, #16]
 80197c4:	4c20      	ldr	r4, [pc, #128]	@ (8019848 <nema_rb_inline_cmd+0x90>)
 80197c6:	1c5f      	adds	r7, r3, #1
 80197c8:	42af      	cmp	r7, r5
 80197ca:	6824      	ldr	r4, [r4, #0]
 80197cc:	db24      	blt.n	8019818 <nema_rb_inline_cmd+0x60>
 80197ce:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 80197d2:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 80197d6:	6913      	ldr	r3, [r2, #16]
 80197d8:	3301      	adds	r3, #1
 80197da:	429d      	cmp	r5, r3
 80197dc:	6113      	str	r3, [r2, #16]
 80197de:	dc17      	bgt.n	8019810 <nema_rb_inline_cmd+0x58>
 80197e0:	2700      	movs	r7, #0
 80197e2:	4623      	mov	r3, r4
 80197e4:	6117      	str	r7, [r2, #16]
 80197e6:	6018      	str	r0, [r3, #0]
 80197e8:	6913      	ldr	r3, [r2, #16]
 80197ea:	3301      	adds	r3, #1
 80197ec:	429d      	cmp	r5, r3
 80197ee:	bfd3      	iteet	le
 80197f0:	2300      	movle	r3, #0
 80197f2:	eb04 0483 	addgt.w	r4, r4, r3, lsl #2
 80197f6:	6113      	strgt	r3, [r2, #16]
 80197f8:	6113      	strle	r3, [r2, #16]
 80197fa:	6021      	str	r1, [r4, #0]
 80197fc:	6913      	ldr	r3, [r2, #16]
 80197fe:	3301      	adds	r3, #1
 8019800:	429d      	cmp	r5, r3
 8019802:	bfd8      	it	le
 8019804:	2300      	movle	r3, #0
 8019806:	f010 4f7f 	tst.w	r0, #4278190080	@ 0xff000000
 801980a:	6113      	str	r3, [r2, #16]
 801980c:	d107      	bne.n	801981e <nema_rb_inline_cmd+0x66>
 801980e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019810:	2b00      	cmp	r3, #0
 8019812:	d1de      	bne.n	80197d2 <nema_rb_inline_cmd+0x1a>
 8019814:	4623      	mov	r3, r4
 8019816:	e7e6      	b.n	80197e6 <nema_rb_inline_cmd+0x2e>
 8019818:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801981c:	e7e3      	b.n	80197e6 <nema_rb_inline_cmd+0x2e>
 801981e:	4610      	mov	r0, r2
 8019820:	f7fa fde7 	bl	80143f2 <nema_buffer_flush>
 8019824:	6833      	ldr	r3, [r6, #0]
 8019826:	4a09      	ldr	r2, [pc, #36]	@ (801984c <nema_rb_inline_cmd+0x94>)
 8019828:	691b      	ldr	r3, [r3, #16]
 801982a:	6811      	ldr	r1, [r2, #0]
 801982c:	20ec      	movs	r0, #236	@ 0xec
 801982e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8019832:	f041 0104 	orr.w	r1, r1, #4
 8019836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801983a:	f7fa bd45 	b.w	80142c8 <nema_reg_write>
 801983e:	bf00      	nop
 8019840:	2015a104 	.word	0x2015a104
 8019844:	2015a110 	.word	0x2015a110
 8019848:	2015a10c 	.word	0x2015a10c
 801984c:	2015a108 	.word	0x2015a108

08019850 <nema_rb_force_flush>:
 8019850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019852:	4e36      	ldr	r6, [pc, #216]	@ (801992c <nema_rb_force_flush+0xdc>)
 8019854:	4b36      	ldr	r3, [pc, #216]	@ (8019930 <nema_rb_force_flush+0xe0>)
 8019856:	6830      	ldr	r0, [r6, #0]
 8019858:	6819      	ldr	r1, [r3, #0]
 801985a:	6903      	ldr	r3, [r0, #16]
 801985c:	4a35      	ldr	r2, [pc, #212]	@ (8019934 <nema_rb_force_flush+0xe4>)
 801985e:	1d1c      	adds	r4, r3, #4
 8019860:	428c      	cmp	r4, r1
 8019862:	6812      	ldr	r2, [r2, #0]
 8019864:	db0a      	blt.n	801987c <nema_rb_force_flush+0x2c>
 8019866:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801986a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 801986e:	6903      	ldr	r3, [r0, #16]
 8019870:	3301      	adds	r3, #1
 8019872:	4299      	cmp	r1, r3
 8019874:	6103      	str	r3, [r0, #16]
 8019876:	dc51      	bgt.n	801991c <nema_rb_force_flush+0xcc>
 8019878:	2300      	movs	r3, #0
 801987a:	6103      	str	r3, [r0, #16]
 801987c:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 8019880:	2700      	movs	r7, #0
 8019882:	e008      	b.n	8019896 <nema_rb_force_flush+0x46>
 8019884:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8019888:	6903      	ldr	r3, [r0, #16]
 801988a:	3301      	adds	r3, #1
 801988c:	4299      	cmp	r1, r3
 801988e:	6103      	str	r3, [r0, #16]
 8019890:	bfdc      	itt	le
 8019892:	2300      	movle	r3, #0
 8019894:	6107      	strle	r7, [r0, #16]
 8019896:	f013 0c03 	ands.w	ip, r3, #3
 801989a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 801989e:	d1f1      	bne.n	8019884 <nema_rb_force_flush+0x34>
 80198a0:	4d25      	ldr	r5, [pc, #148]	@ (8019938 <nema_rb_force_flush+0xe8>)
 80198a2:	4f26      	ldr	r7, [pc, #152]	@ (801993c <nema_rb_force_flush+0xec>)
 80198a4:	6025      	str	r5, [r4, #0]
 80198a6:	6904      	ldr	r4, [r0, #16]
 80198a8:	683d      	ldr	r5, [r7, #0]
 80198aa:	3401      	adds	r4, #1
 80198ac:	42a1      	cmp	r1, r4
 80198ae:	bfd8      	it	le
 80198b0:	4614      	movle	r4, r2
 80198b2:	f103 0304 	add.w	r3, r3, #4
 80198b6:	bfc8      	it	gt
 80198b8:	6104      	strgt	r4, [r0, #16]
 80198ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80198be:	bfcc      	ite	gt
 80198c0:	eb02 0484 	addgt.w	r4, r2, r4, lsl #2
 80198c4:	f8c0 c010 	strle.w	ip, [r0, #16]
 80198c8:	6023      	str	r3, [r4, #0]
 80198ca:	6903      	ldr	r3, [r0, #16]
 80198cc:	3301      	adds	r3, #1
 80198ce:	4299      	cmp	r1, r3
 80198d0:	dd27      	ble.n	8019922 <nema_rb_force_flush+0xd2>
 80198d2:	6103      	str	r3, [r0, #16]
 80198d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80198d8:	4c19      	ldr	r4, [pc, #100]	@ (8019940 <nema_rb_force_flush+0xf0>)
 80198da:	601c      	str	r4, [r3, #0]
 80198dc:	6903      	ldr	r3, [r0, #16]
 80198de:	3301      	adds	r3, #1
 80198e0:	4299      	cmp	r1, r3
 80198e2:	bfd5      	itete	le
 80198e4:	2300      	movle	r3, #0
 80198e6:	6103      	strgt	r3, [r0, #16]
 80198e8:	6103      	strle	r3, [r0, #16]
 80198ea:	eb02 0283 	addgt.w	r2, r2, r3, lsl #2
 80198ee:	4b15      	ldr	r3, [pc, #84]	@ (8019944 <nema_rb_force_flush+0xf4>)
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	6013      	str	r3, [r2, #0]
 80198f4:	6903      	ldr	r3, [r0, #16]
 80198f6:	3301      	adds	r3, #1
 80198f8:	4299      	cmp	r1, r3
 80198fa:	bfd8      	it	le
 80198fc:	2300      	movle	r3, #0
 80198fe:	6103      	str	r3, [r0, #16]
 8019900:	f7fa fd77 	bl	80143f2 <nema_buffer_flush>
 8019904:	6833      	ldr	r3, [r6, #0]
 8019906:	6839      	ldr	r1, [r7, #0]
 8019908:	691b      	ldr	r3, [r3, #16]
 801990a:	20ec      	movs	r0, #236	@ 0xec
 801990c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8019910:	f041 0104 	orr.w	r1, r1, #4
 8019914:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019918:	f7fa bcd6 	b.w	80142c8 <nema_reg_write>
 801991c:	2b00      	cmp	r3, #0
 801991e:	d1a4      	bne.n	801986a <nema_rb_force_flush+0x1a>
 8019920:	e7ac      	b.n	801987c <nema_rb_force_flush+0x2c>
 8019922:	2400      	movs	r4, #0
 8019924:	4613      	mov	r3, r2
 8019926:	6104      	str	r4, [r0, #16]
 8019928:	e7d6      	b.n	80198d8 <nema_rb_force_flush+0x88>
 801992a:	bf00      	nop
 801992c:	2015a104 	.word	0x2015a104
 8019930:	2015a110 	.word	0x2015a110
 8019934:	2015a10c 	.word	0x2015a10c
 8019938:	ff0000f0 	.word	0xff0000f0
 801993c:	2015a108 	.word	0x2015a108
 8019940:	ff0000f4 	.word	0xff0000f4
 8019944:	2015a114 	.word	0x2015a114

08019948 <nema_rb_submit_cl_id>:
 8019948:	b510      	push	{r4, lr}
 801994a:	1e04      	subs	r4, r0, #0
 801994c:	dd40      	ble.n	80199d0 <nema_rb_submit_cl_id+0x88>
 801994e:	2000      	movs	r0, #0
 8019950:	f7fa fd59 	bl	8014406 <nema_mutex_lock>
 8019954:	4621      	mov	r1, r4
 8019956:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 801995a:	f7ff ff2d 	bl	80197b8 <nema_rb_inline_cmd>
 801995e:	4a1d      	ldr	r2, [pc, #116]	@ (80199d4 <nema_rb_submit_cl_id+0x8c>)
 8019960:	4b1d      	ldr	r3, [pc, #116]	@ (80199d8 <nema_rb_submit_cl_id+0x90>)
 8019962:	6812      	ldr	r2, [r2, #0]
 8019964:	6818      	ldr	r0, [r3, #0]
 8019966:	6913      	ldr	r3, [r2, #16]
 8019968:	1c59      	adds	r1, r3, #1
 801996a:	4281      	cmp	r1, r0
 801996c:	db0e      	blt.n	801998c <nema_rb_submit_cl_id+0x44>
 801996e:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8019972:	491a      	ldr	r1, [pc, #104]	@ (80199dc <nema_rb_submit_cl_id+0x94>)
 8019974:	6809      	ldr	r1, [r1, #0]
 8019976:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 801997a:	6913      	ldr	r3, [r2, #16]
 801997c:	3301      	adds	r3, #1
 801997e:	4298      	cmp	r0, r3
 8019980:	6113      	str	r3, [r2, #16]
 8019982:	dc21      	bgt.n	80199c8 <nema_rb_submit_cl_id+0x80>
 8019984:	2400      	movs	r4, #0
 8019986:	460b      	mov	r3, r1
 8019988:	6114      	str	r4, [r2, #16]
 801998a:	e003      	b.n	8019994 <nema_rb_submit_cl_id+0x4c>
 801998c:	4913      	ldr	r1, [pc, #76]	@ (80199dc <nema_rb_submit_cl_id+0x94>)
 801998e:	6809      	ldr	r1, [r1, #0]
 8019990:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019994:	24f8      	movs	r4, #248	@ 0xf8
 8019996:	601c      	str	r4, [r3, #0]
 8019998:	6913      	ldr	r3, [r2, #16]
 801999a:	3301      	adds	r3, #1
 801999c:	4298      	cmp	r0, r3
 801999e:	bfd5      	itete	le
 80199a0:	2300      	movle	r3, #0
 80199a2:	6113      	strgt	r3, [r2, #16]
 80199a4:	6113      	strle	r3, [r2, #16]
 80199a6:	eb01 0183 	addgt.w	r1, r1, r3, lsl #2
 80199aa:	2301      	movs	r3, #1
 80199ac:	600b      	str	r3, [r1, #0]
 80199ae:	6913      	ldr	r3, [r2, #16]
 80199b0:	3301      	adds	r3, #1
 80199b2:	4298      	cmp	r0, r3
 80199b4:	bfd8      	it	le
 80199b6:	2300      	movle	r3, #0
 80199b8:	6113      	str	r3, [r2, #16]
 80199ba:	f7ff ff49 	bl	8019850 <nema_rb_force_flush>
 80199be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199c2:	2000      	movs	r0, #0
 80199c4:	f7fa bd2c 	b.w	8014420 <nema_mutex_unlock>
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d1d4      	bne.n	8019976 <nema_rb_submit_cl_id+0x2e>
 80199cc:	460b      	mov	r3, r1
 80199ce:	e7e1      	b.n	8019994 <nema_rb_submit_cl_id+0x4c>
 80199d0:	bd10      	pop	{r4, pc}
 80199d2:	bf00      	nop
 80199d4:	2015a104 	.word	0x2015a104
 80199d8:	2015a110 	.word	0x2015a110
 80199dc:	2015a10c 	.word	0x2015a10c

080199e0 <init_nema_regs>:
 80199e0:	b538      	push	{r3, r4, r5, lr}
 80199e2:	2100      	movs	r1, #0
 80199e4:	20e8      	movs	r0, #232	@ 0xe8
 80199e6:	f7fa fc6f 	bl	80142c8 <nema_reg_write>
 80199ea:	2100      	movs	r1, #0
 80199ec:	20fc      	movs	r0, #252	@ 0xfc
 80199ee:	f7fa fc6b 	bl	80142c8 <nema_reg_write>
 80199f2:	2101      	movs	r1, #1
 80199f4:	f44f 7062 	mov.w	r0, #904	@ 0x388
 80199f8:	f7fa fc66 	bl	80142c8 <nema_reg_write>
 80199fc:	2000      	movs	r0, #0
 80199fe:	f001 f95b 	bl	801acb8 <nema_set_interrupt_ctrl>
 8019a02:	f001 fe2b 	bl	801b65c <nema_blender_init>
 8019a06:	2100      	movs	r1, #0
 8019a08:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019a0c:	f001 fd32 	bl	801b474 <nema_cl_add_cmd>
 8019a10:	f04f 31ff 	mov.w	r1, #4294967295
 8019a14:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8019a18:	f001 fd2c 	bl	801b474 <nema_cl_add_cmd>
 8019a1c:	f000 ff04 	bl	801a828 <nema_readHwConfig>
 8019a20:	f410 2080 	ands.w	r0, r0, #262144	@ 0x40000
 8019a24:	d015      	beq.n	8019a52 <init_nema_regs+0x72>
 8019a26:	2007      	movs	r0, #7
 8019a28:	f001 f892 	bl	801ab50 <nema_set_depth_ctrl>
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	4c10      	ldr	r4, [pc, #64]	@ (8019a70 <init_nema_regs+0x90>)
 8019a30:	7820      	ldrb	r0, [r4, #0]
 8019a32:	7063      	strb	r3, [r4, #1]
 8019a34:	f000 ff0a 	bl	801a84c <nema_enable_tiling>
 8019a38:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8019a3c:	2500      	movs	r5, #0
 8019a3e:	6962      	ldr	r2, [r4, #20]
 8019a40:	430b      	orrs	r3, r1
 8019a42:	4313      	orrs	r3, r2
 8019a44:	e9c4 5303 	strd	r5, r3, [r4, #12]
 8019a48:	f000 fefc 	bl	801a844 <nema_readHwConfigH>
 8019a4c:	0583      	lsls	r3, r0, #22
 8019a4e:	d403      	bmi.n	8019a58 <init_nema_regs+0x78>
 8019a50:	bd38      	pop	{r3, r4, r5, pc}
 8019a52:	4c07      	ldr	r4, [pc, #28]	@ (8019a70 <init_nema_regs+0x90>)
 8019a54:	70a0      	strb	r0, [r4, #2]
 8019a56:	e7ef      	b.n	8019a38 <init_nema_regs+0x58>
 8019a58:	4629      	mov	r1, r5
 8019a5a:	f44f 705d 	mov.w	r0, #884	@ 0x374
 8019a5e:	f7fa fc33 	bl	80142c8 <nema_reg_write>
 8019a62:	4629      	mov	r1, r5
 8019a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a68:	f44f 705a 	mov.w	r0, #872	@ 0x368
 8019a6c:	f7fa bc2c 	b.w	80142c8 <nema_reg_write>
 8019a70:	20000024 	.word	0x20000024

08019a74 <nema_init>:
 8019a74:	b510      	push	{r4, lr}
 8019a76:	f7fa fbb1 	bl	80141dc <nema_sys_init>
 8019a7a:	1e04      	subs	r4, r0, #0
 8019a7c:	db11      	blt.n	8019aa2 <nema_init+0x2e>
 8019a7e:	f44f 70f6 	mov.w	r0, #492	@ 0x1ec
 8019a82:	f7fa fc11 	bl	80142a8 <nema_reg_read>
 8019a86:	4b10      	ldr	r3, [pc, #64]	@ (8019ac8 <nema_init+0x54>)
 8019a88:	4298      	cmp	r0, r3
 8019a8a:	d114      	bne.n	8019ab6 <nema_init+0x42>
 8019a8c:	f001 fc04 	bl	801b298 <nema_cl_unbind>
 8019a90:	22d0      	movs	r2, #208	@ 0xd0
 8019a92:	2100      	movs	r1, #0
 8019a94:	480d      	ldr	r0, [pc, #52]	@ (8019acc <nema_init+0x58>)
 8019a96:	f012 fa96 	bl	802bfc6 <memset>
 8019a9a:	b14c      	cbz	r4, 8019ab0 <nema_init+0x3c>
 8019a9c:	2400      	movs	r4, #0
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	bd10      	pop	{r4, pc}
 8019aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8019acc <nema_init+0x58>)
 8019aa4:	4620      	mov	r0, r4
 8019aa6:	6993      	ldr	r3, [r2, #24]
 8019aa8:	f043 0301 	orr.w	r3, r3, #1
 8019aac:	6193      	str	r3, [r2, #24]
 8019aae:	bd10      	pop	{r4, pc}
 8019ab0:	f7ff ff96 	bl	80199e0 <init_nema_regs>
 8019ab4:	e7f3      	b.n	8019a9e <nema_init+0x2a>
 8019ab6:	4a05      	ldr	r2, [pc, #20]	@ (8019acc <nema_init+0x58>)
 8019ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8019abc:	6993      	ldr	r3, [r2, #24]
 8019abe:	f043 0302 	orr.w	r3, r3, #2
 8019ac2:	6193      	str	r3, [r2, #24]
 8019ac4:	e7eb      	b.n	8019a9e <nema_init+0x2a>
 8019ac6:	bf00      	nop
 8019ac8:	86362000 	.word	0x86362000
 8019acc:	20000024 	.word	0x20000024

08019ad0 <nema_set_error>:
 8019ad0:	4a02      	ldr	r2, [pc, #8]	@ (8019adc <nema_set_error+0xc>)
 8019ad2:	6993      	ldr	r3, [r2, #24]
 8019ad4:	4318      	orrs	r0, r3
 8019ad6:	6190      	str	r0, [r2, #24]
 8019ad8:	4770      	bx	lr
 8019ada:	bf00      	nop
 8019adc:	20000024 	.word	0x20000024

08019ae0 <nema_set_tex_color>:
 8019ae0:	4601      	mov	r1, r0
 8019ae2:	201c      	movs	r0, #28
 8019ae4:	f001 bcc6 	b.w	801b474 <nema_cl_add_cmd>

08019ae8 <nema_set_const_reg>:
 8019ae8:	3080      	adds	r0, #128	@ 0x80
 8019aea:	0080      	lsls	r0, r0, #2
 8019aec:	f5b0 7f03 	cmp.w	r0, #524	@ 0x20c
 8019af0:	d900      	bls.n	8019af4 <nema_set_const_reg+0xc>
 8019af2:	4770      	bx	lr
 8019af4:	f001 bcbe 	b.w	801b474 <nema_cl_add_cmd>

08019af8 <nema_set_clip>:
 8019af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019afa:	460c      	mov	r4, r1
 8019afc:	4607      	mov	r7, r0
 8019afe:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 8019b02:	4d0c      	ldr	r5, [pc, #48]	@ (8019b34 <nema_set_clip+0x3c>)
 8019b04:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8019b08:	b289      	uxth	r1, r1
 8019b0a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8019b0e:	19d6      	adds	r6, r2, r7
 8019b10:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8019b14:	e9c5 7407 	strd	r7, r4, [r5, #28]
 8019b18:	e9c5 2309 	strd	r2, r3, [r5, #36]	@ 0x24
 8019b1c:	441c      	add	r4, r3
 8019b1e:	f001 fca9 	bl	801b474 <nema_cl_add_cmd>
 8019b22:	b2b1      	uxth	r1, r6
 8019b24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019b28:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8019b2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019b30:	f001 bca0 	b.w	801b474 <nema_cl_add_cmd>
 8019b34:	20000024 	.word	0x20000024

08019b38 <nema_enable_gradient>:
 8019b38:	2800      	cmp	r0, #0
 8019b3a:	bf14      	ite	ne
 8019b3c:	f04f 6100 	movne.w	r1, #134217728	@ 0x8000000
 8019b40:	2100      	moveq	r1, #0
 8019b42:	b410      	push	{r4}
 8019b44:	4a05      	ldr	r2, [pc, #20]	@ (8019b5c <nema_enable_gradient+0x24>)
 8019b46:	6950      	ldr	r0, [r2, #20]
 8019b48:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
 8019b4c:	4323      	orrs	r3, r4
 8019b4e:	4303      	orrs	r3, r0
 8019b50:	430b      	orrs	r3, r1
 8019b52:	e9c2 1303 	strd	r1, r3, [r2, #12]
 8019b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b5a:	4770      	bx	lr
 8019b5c:	20000024 	.word	0x20000024

08019b60 <nema_rgba>:
 8019b60:	061b      	lsls	r3, r3, #24
 8019b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019b66:	4318      	orrs	r0, r3
 8019b68:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8019b6c:	4770      	bx	lr
 8019b6e:	bf00      	nop

08019b70 <nema_bind_src_tex>:
 8019b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b74:	9c06      	ldr	r4, [sp, #24]
 8019b76:	460e      	mov	r6, r1
 8019b78:	1c61      	adds	r1, r4, #1
 8019b7a:	4605      	mov	r5, r0
 8019b7c:	4617      	mov	r7, r2
 8019b7e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8019b82:	d022      	beq.n	8019bca <nema_bind_src_tex+0x5a>
 8019b84:	2201      	movs	r2, #1
 8019b86:	0400      	lsls	r0, r0, #16
 8019b88:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8019c74 <nema_bind_src_tex+0x104>
 8019b8c:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 8019b90:	b2a4      	uxth	r4, r4
 8019b92:	4323      	orrs	r3, r4
 8019b94:	2003      	movs	r0, #3
 8019b96:	f8c8 3050 	str.w	r3, [r8, #80]	@ 0x50
 8019b9a:	e9c8 5611 	strd	r5, r6, [r8, #68]	@ 0x44
 8019b9e:	f8c8 704c 	str.w	r7, [r8, #76]	@ 0x4c
 8019ba2:	f8c8 2054 	str.w	r2, [r8, #84]	@ 0x54
 8019ba6:	f001 fc09 	bl	801b3bc <nema_cl_get_space>
 8019baa:	b160      	cbz	r0, 8019bc6 <nema_bind_src_tex+0x56>
 8019bac:	2110      	movs	r1, #16
 8019bae:	2214      	movs	r2, #20
 8019bb0:	2318      	movs	r3, #24
 8019bb2:	e9c0 1500 	strd	r1, r5, [r0]
 8019bb6:	6082      	str	r2, [r0, #8]
 8019bb8:	f8d8 2050 	ldr.w	r2, [r8, #80]	@ 0x50
 8019bbc:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8019bc0:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8019bc4:	6146      	str	r6, [r0, #20]
 8019bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bca:	06c2      	lsls	r2, r0, #27
 8019bcc:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8019bd0:	d428      	bmi.n	8019c24 <nema_bind_src_tex+0xb4>
 8019bd2:	4634      	mov	r4, r6
 8019bd4:	f1a1 020b 	sub.w	r2, r1, #11
 8019bd8:	2a42      	cmp	r2, #66	@ 0x42
 8019bda:	d83f      	bhi.n	8019c5c <nema_bind_src_tex+0xec>
 8019bdc:	e8df f002 	tbb	[pc, r2]
 8019be0:	3e3e3636 	.word	0x3e3e3636
 8019be4:	3c3e3e3e 	.word	0x3c3e3e3e
 8019be8:	283e3e3e 	.word	0x283e3e3e
 8019bec:	3e3e3e28 	.word	0x3e3e3e28
 8019bf0:	3e3e3e3e 	.word	0x3e3e3e3e
 8019bf4:	3e3e3e3e 	.word	0x3e3e3e3e
 8019bf8:	3e3e3e3e 	.word	0x3e3e3e3e
 8019bfc:	36302b36 	.word	0x36302b36
 8019c00:	3e3e302b 	.word	0x3e3e302b
 8019c04:	3e2b2b3e 	.word	0x3e2b2b3e
 8019c08:	3e30303e 	.word	0x3e30303e
 8019c0c:	3e3e3e3e 	.word	0x3e3e3e3e
 8019c10:	3e3e3e3e 	.word	0x3e3e3e3e
 8019c14:	3e3e3e3e 	.word	0x3e3e3e3e
 8019c18:	3e3e3e3e 	.word	0x3e3e3e3e
 8019c1c:	3e3e3e3e 	.word	0x3e3e3e3e
 8019c20:	283e      	.short	0x283e
 8019c22:	28          	.byte	0x28
 8019c23:	00          	.byte	0x00
 8019c24:	1cf4      	adds	r4, r6, #3
 8019c26:	bf48      	it	mi
 8019c28:	1db4      	addmi	r4, r6, #6
 8019c2a:	f024 0403 	bic.w	r4, r4, #3
 8019c2e:	e7d1      	b.n	8019bd4 <nema_bind_src_tex+0x64>
 8019c30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019c34:	e7a6      	b.n	8019b84 <nema_bind_src_tex+0x14>
 8019c36:	0062      	lsls	r2, r4, #1
 8019c38:	1dd4      	adds	r4, r2, #7
 8019c3a:	d404      	bmi.n	8019c46 <nema_bind_src_tex+0xd6>
 8019c3c:	10e4      	asrs	r4, r4, #3
 8019c3e:	e7a1      	b.n	8019b84 <nema_bind_src_tex+0x14>
 8019c40:	00a2      	lsls	r2, r4, #2
 8019c42:	1dd4      	adds	r4, r2, #7
 8019c44:	d5fa      	bpl.n	8019c3c <nema_bind_src_tex+0xcc>
 8019c46:	f102 040e 	add.w	r4, r2, #14
 8019c4a:	e7f7      	b.n	8019c3c <nema_bind_src_tex+0xcc>
 8019c4c:	1de2      	adds	r2, r4, #7
 8019c4e:	bf48      	it	mi
 8019c50:	f104 020e 	addmi.w	r2, r4, #14
 8019c54:	10d4      	asrs	r4, r2, #3
 8019c56:	e795      	b.n	8019b84 <nema_bind_src_tex+0x14>
 8019c58:	0064      	lsls	r4, r4, #1
 8019c5a:	e793      	b.n	8019b84 <nema_bind_src_tex+0x14>
 8019c5c:	3904      	subs	r1, #4
 8019c5e:	2949      	cmp	r1, #73	@ 0x49
 8019c60:	bf8e      	itee	hi
 8019c62:	2204      	movhi	r2, #4
 8019c64:	4a02      	ldrls	r2, [pc, #8]	@ (8019c70 <nema_bind_src_tex+0x100>)
 8019c66:	5652      	ldrsbls	r2, [r2, r1]
 8019c68:	fb02 f404 	mul.w	r4, r2, r4
 8019c6c:	e78a      	b.n	8019b84 <nema_bind_src_tex+0x14>
 8019c6e:	bf00      	nop
 8019c70:	0802e5d8 	.word	0x0802e5d8
 8019c74:	20000024 	.word	0x20000024

08019c78 <nema_bind_dst_tex>:
 8019c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c7c:	9d08      	ldr	r5, [sp, #32]
 8019c7e:	4699      	mov	r9, r3
 8019c80:	4617      	mov	r7, r2
 8019c82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019c86:	1c6b      	adds	r3, r5, #1
 8019c88:	4680      	mov	r8, r0
 8019c8a:	460e      	mov	r6, r1
 8019c8c:	d031      	beq.n	8019cf2 <nema_bind_dst_tex+0x7a>
 8019c8e:	2a12      	cmp	r2, #18
 8019c90:	d00e      	beq.n	8019cb0 <nema_bind_dst_tex+0x38>
 8019c92:	f1a2 0316 	sub.w	r3, r2, #22
 8019c96:	2b01      	cmp	r3, #1
 8019c98:	d90a      	bls.n	8019cb0 <nema_bind_dst_tex+0x38>
 8019c9a:	3a4c      	subs	r2, #76	@ 0x4c
 8019c9c:	2a01      	cmp	r2, #1
 8019c9e:	f240 80b7 	bls.w	8019e10 <nema_bind_dst_tex+0x198>
 8019ca2:	4c6e      	ldr	r4, [pc, #440]	@ (8019e5c <nema_bind_dst_tex+0x1e4>)
 8019ca4:	7860      	ldrb	r0, [r4, #1]
 8019ca6:	f000 fdd1 	bl	801a84c <nema_enable_tiling>
 8019caa:	e007      	b.n	8019cbc <nema_bind_dst_tex+0x44>
 8019cac:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8019cb0:	2301      	movs	r3, #1
 8019cb2:	4c6a      	ldr	r4, [pc, #424]	@ (8019e5c <nema_bind_dst_tex+0x1e4>)
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	7023      	strb	r3, [r4, #0]
 8019cb8:	f000 fdc8 	bl	801a84c <nema_enable_tiling>
 8019cbc:	2201      	movs	r2, #1
 8019cbe:	b2ad      	uxth	r5, r5
 8019cc0:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8019cc4:	2003      	movs	r0, #3
 8019cc6:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8019cc8:	e9c4 860c 	strd	r8, r6, [r4, #48]	@ 0x30
 8019ccc:	63a7      	str	r7, [r4, #56]	@ 0x38
 8019cce:	6422      	str	r2, [r4, #64]	@ 0x40
 8019cd0:	f001 fb74 	bl	801b3bc <nema_cl_get_space>
 8019cd4:	b158      	cbz	r0, 8019cee <nema_bind_dst_tex+0x76>
 8019cd6:	2100      	movs	r1, #0
 8019cd8:	2204      	movs	r2, #4
 8019cda:	2308      	movs	r3, #8
 8019cdc:	e9c0 1800 	strd	r1, r8, [r0]
 8019ce0:	6082      	str	r2, [r0, #8]
 8019ce2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8019ce4:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8019ce8:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8019cec:	6146      	str	r6, [r0, #20]
 8019cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cf2:	f1a2 030b 	sub.w	r3, r2, #11
 8019cf6:	2b42      	cmp	r3, #66	@ 0x42
 8019cf8:	f200 80a6 	bhi.w	8019e48 <nema_bind_dst_tex+0x1d0>
 8019cfc:	a101      	add	r1, pc, #4	@ (adr r1, 8019d04 <nema_bind_dst_tex+0x8c>)
 8019cfe:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019d02:	bf00      	nop
 8019d04:	08019e3b 	.word	0x08019e3b
 8019d08:	08019e3b 	.word	0x08019e3b
 8019d0c:	08019e49 	.word	0x08019e49
 8019d10:	08019e49 	.word	0x08019e49
 8019d14:	08019e49 	.word	0x08019e49
 8019d18:	08019e49 	.word	0x08019e49
 8019d1c:	08019e49 	.word	0x08019e49
 8019d20:	08019e45 	.word	0x08019e45
 8019d24:	08019e49 	.word	0x08019e49
 8019d28:	08019e49 	.word	0x08019e49
 8019d2c:	08019e49 	.word	0x08019e49
 8019d30:	08019cad 	.word	0x08019cad
 8019d34:	08019cad 	.word	0x08019cad
 8019d38:	08019e49 	.word	0x08019e49
 8019d3c:	08019e49 	.word	0x08019e49
 8019d40:	08019e49 	.word	0x08019e49
 8019d44:	08019e49 	.word	0x08019e49
 8019d48:	08019e49 	.word	0x08019e49
 8019d4c:	08019e49 	.word	0x08019e49
 8019d50:	08019e49 	.word	0x08019e49
 8019d54:	08019e49 	.word	0x08019e49
 8019d58:	08019e49 	.word	0x08019e49
 8019d5c:	08019e49 	.word	0x08019e49
 8019d60:	08019e49 	.word	0x08019e49
 8019d64:	08019e49 	.word	0x08019e49
 8019d68:	08019e49 	.word	0x08019e49
 8019d6c:	08019e49 	.word	0x08019e49
 8019d70:	08019e49 	.word	0x08019e49
 8019d74:	08019e3b 	.word	0x08019e3b
 8019d78:	08019e25 	.word	0x08019e25
 8019d7c:	08019e2f 	.word	0x08019e2f
 8019d80:	08019e3b 	.word	0x08019e3b
 8019d84:	08019e25 	.word	0x08019e25
 8019d88:	08019e2f 	.word	0x08019e2f
 8019d8c:	08019e49 	.word	0x08019e49
 8019d90:	08019e49 	.word	0x08019e49
 8019d94:	08019e49 	.word	0x08019e49
 8019d98:	08019e25 	.word	0x08019e25
 8019d9c:	08019e25 	.word	0x08019e25
 8019da0:	08019e49 	.word	0x08019e49
 8019da4:	08019e49 	.word	0x08019e49
 8019da8:	08019e2f 	.word	0x08019e2f
 8019dac:	08019e2f 	.word	0x08019e2f
 8019db0:	08019e49 	.word	0x08019e49
 8019db4:	08019e49 	.word	0x08019e49
 8019db8:	08019e49 	.word	0x08019e49
 8019dbc:	08019e49 	.word	0x08019e49
 8019dc0:	08019e49 	.word	0x08019e49
 8019dc4:	08019e49 	.word	0x08019e49
 8019dc8:	08019e49 	.word	0x08019e49
 8019dcc:	08019e49 	.word	0x08019e49
 8019dd0:	08019e49 	.word	0x08019e49
 8019dd4:	08019e49 	.word	0x08019e49
 8019dd8:	08019e49 	.word	0x08019e49
 8019ddc:	08019e49 	.word	0x08019e49
 8019de0:	08019e49 	.word	0x08019e49
 8019de4:	08019e49 	.word	0x08019e49
 8019de8:	08019e49 	.word	0x08019e49
 8019dec:	08019e49 	.word	0x08019e49
 8019df0:	08019e49 	.word	0x08019e49
 8019df4:	08019e49 	.word	0x08019e49
 8019df8:	08019e49 	.word	0x08019e49
 8019dfc:	08019e49 	.word	0x08019e49
 8019e00:	08019e49 	.word	0x08019e49
 8019e04:	08019e49 	.word	0x08019e49
 8019e08:	08019e1f 	.word	0x08019e1f
 8019e0c:	08019e1f 	.word	0x08019e1f
 8019e10:	2301      	movs	r3, #1
 8019e12:	4c12      	ldr	r4, [pc, #72]	@ (8019e5c <nema_bind_dst_tex+0x1e4>)
 8019e14:	4618      	mov	r0, r3
 8019e16:	7023      	strb	r3, [r4, #0]
 8019e18:	f000 fd2c 	bl	801a874 <nema_enable_tiling_2x2>
 8019e1c:	e74e      	b.n	8019cbc <nema_bind_dst_tex+0x44>
 8019e1e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8019e22:	e734      	b.n	8019c8e <nema_bind_dst_tex+0x16>
 8019e24:	0073      	lsls	r3, r6, #1
 8019e26:	1ddd      	adds	r5, r3, #7
 8019e28:	d404      	bmi.n	8019e34 <nema_bind_dst_tex+0x1bc>
 8019e2a:	10ed      	asrs	r5, r5, #3
 8019e2c:	e72f      	b.n	8019c8e <nema_bind_dst_tex+0x16>
 8019e2e:	00b3      	lsls	r3, r6, #2
 8019e30:	1ddd      	adds	r5, r3, #7
 8019e32:	d5fa      	bpl.n	8019e2a <nema_bind_dst_tex+0x1b2>
 8019e34:	f103 050e 	add.w	r5, r3, #14
 8019e38:	e7f7      	b.n	8019e2a <nema_bind_dst_tex+0x1b2>
 8019e3a:	1df5      	adds	r5, r6, #7
 8019e3c:	d5f5      	bpl.n	8019e2a <nema_bind_dst_tex+0x1b2>
 8019e3e:	f106 050e 	add.w	r5, r6, #14
 8019e42:	e7f2      	b.n	8019e2a <nema_bind_dst_tex+0x1b2>
 8019e44:	0075      	lsls	r5, r6, #1
 8019e46:	e733      	b.n	8019cb0 <nema_bind_dst_tex+0x38>
 8019e48:	1f13      	subs	r3, r2, #4
 8019e4a:	2b49      	cmp	r3, #73	@ 0x49
 8019e4c:	bf8e      	itee	hi
 8019e4e:	2504      	movhi	r5, #4
 8019e50:	4903      	ldrls	r1, [pc, #12]	@ (8019e60 <nema_bind_dst_tex+0x1e8>)
 8019e52:	56cd      	ldrsbls	r5, [r1, r3]
 8019e54:	fb05 f506 	mul.w	r5, r5, r6
 8019e58:	e719      	b.n	8019c8e <nema_bind_dst_tex+0x16>
 8019e5a:	bf00      	nop
 8019e5c:	20000024 	.word	0x20000024
 8019e60:	0802e5d8 	.word	0x0802e5d8

08019e64 <nema_fill_rect>:
 8019e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e68:	4604      	mov	r4, r0
 8019e6a:	460d      	mov	r5, r1
 8019e6c:	4616      	mov	r6, r2
 8019e6e:	461f      	mov	r7, r3
 8019e70:	9806      	ldr	r0, [sp, #24]
 8019e72:	f000 fe73 	bl	801ab5c <nema_set_raster_color>
 8019e76:	463b      	mov	r3, r7
 8019e78:	4632      	mov	r2, r6
 8019e7a:	4629      	mov	r1, r5
 8019e7c:	4620      	mov	r0, r4
 8019e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e82:	f000 bead 	b.w	801abe0 <nema_raster_rect>
 8019e86:	bf00      	nop

08019e88 <nema_blit>:
 8019e88:	ee07 0a90 	vmov	s15, r0
 8019e8c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019e90:	ee07 1a90 	vmov	s15, r1
 8019e94:	b500      	push	{lr}
 8019e96:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019e9a:	b083      	sub	sp, #12
 8019e9c:	e9cd 0100 	strd	r0, r1, [sp]
 8019ea0:	f000 fdf6 	bl	801aa90 <nema_set_matrix_translate>
 8019ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019ea8:	4a03      	ldr	r2, [pc, #12]	@ (8019eb8 <nema_blit+0x30>)
 8019eaa:	e9d2 2312 	ldrd	r2, r3, [r2, #72]	@ 0x48
 8019eae:	b003      	add	sp, #12
 8019eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019eb4:	f000 be94 	b.w	801abe0 <nema_raster_rect>
 8019eb8:	20000024 	.word	0x20000024

08019ebc <nema_blit_rotate>:
 8019ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ebe:	2600      	movs	r6, #0
 8019ec0:	f04f 577e 	mov.w	r7, #1065353216	@ 0x3f800000
 8019ec4:	4b68      	ldr	r3, [pc, #416]	@ (801a068 <nema_blit_rotate+0x1ac>)
 8019ec6:	b08b      	sub	sp, #44	@ 0x2c
 8019ec8:	3a01      	subs	r2, #1
 8019eca:	9607      	str	r6, [sp, #28]
 8019ecc:	9608      	str	r6, [sp, #32]
 8019ece:	9709      	str	r7, [sp, #36]	@ 0x24
 8019ed0:	4604      	mov	r4, r0
 8019ed2:	e9d3 6712 	ldrd	r6, r7, [r3, #72]	@ 0x48
 8019ed6:	460d      	mov	r5, r1
 8019ed8:	2a0e      	cmp	r2, #14
 8019eda:	f200 80b0 	bhi.w	801a03e <nema_blit_rotate+0x182>
 8019ede:	e8df f002 	tbb	[pc, r2]
 8019ee2:	4730      	.short	0x4730
 8019ee4:	9a836f58 	.word	0x9a836f58
 8019ee8:	6f089a08 	.word	0x6f089a08
 8019eec:	ae584783 	.word	0xae584783
 8019ef0:	30          	.byte	0x30
 8019ef1:	00          	.byte	0x00
 8019ef2:	1970      	adds	r0, r6, r5
 8019ef4:	ee07 0a10 	vmov	s14, r0
 8019ef8:	1938      	adds	r0, r7, r4
 8019efa:	4631      	mov	r1, r6
 8019efc:	ee07 0a90 	vmov	s15, r0
 8019f00:	2200      	movs	r2, #0
 8019f02:	463e      	mov	r6, r7
 8019f04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f0c:	460f      	mov	r7, r1
 8019f0e:	4b57      	ldr	r3, [pc, #348]	@ (801a06c <nema_blit_rotate+0x1b0>)
 8019f10:	9201      	str	r2, [sp, #4]
 8019f12:	9205      	str	r2, [sp, #20]
 8019f14:	9302      	str	r3, [sp, #8]
 8019f16:	9304      	str	r3, [sp, #16]
 8019f18:	eddf 6a55 	vldr	s13, [pc, #340]	@ 801a070 <nema_blit_rotate+0x1b4>
 8019f1c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f24:	a801      	add	r0, sp, #4
 8019f26:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019f2a:	edcd 7a06 	vstr	s15, [sp, #24]
 8019f2e:	f000 fcf5 	bl	801a91c <nema_set_matrix>
 8019f32:	463b      	mov	r3, r7
 8019f34:	4632      	mov	r2, r6
 8019f36:	4629      	mov	r1, r5
 8019f38:	4620      	mov	r0, r4
 8019f3a:	f000 fe51 	bl	801abe0 <nema_raster_rect>
 8019f3e:	b00b      	add	sp, #44	@ 0x2c
 8019f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f42:	ee07 4a90 	vmov	s15, r4
 8019f46:	4630      	mov	r0, r6
 8019f48:	442e      	add	r6, r5
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	ee07 6a10 	vmov	s14, r6
 8019f50:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8019f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f58:	4944      	ldr	r1, [pc, #272]	@ (801a06c <nema_blit_rotate+0x1b0>)
 8019f5a:	463e      	mov	r6, r7
 8019f5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f60:	9301      	str	r3, [sp, #4]
 8019f62:	4607      	mov	r7, r0
 8019f64:	9305      	str	r3, [sp, #20]
 8019f66:	9102      	str	r1, [sp, #8]
 8019f68:	9204      	str	r2, [sp, #16]
 8019f6a:	eef1 7a67 	vneg.f32	s15, s15
 8019f6e:	e7d3      	b.n	8019f18 <nema_blit_rotate+0x5c>
 8019f70:	4b3e      	ldr	r3, [pc, #248]	@ (801a06c <nema_blit_rotate+0x1b0>)
 8019f72:	2200      	movs	r2, #0
 8019f74:	9301      	str	r3, [sp, #4]
 8019f76:	9305      	str	r3, [sp, #20]
 8019f78:	1833      	adds	r3, r6, r0
 8019f7a:	ee07 3a90 	vmov	s15, r3
 8019f7e:	1878      	adds	r0, r7, r1
 8019f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019f84:	ee07 0a90 	vmov	s15, r0
 8019f88:	9202      	str	r2, [sp, #8]
 8019f8a:	9204      	str	r2, [sp, #16]
 8019f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f90:	e7c2      	b.n	8019f18 <nema_blit_rotate+0x5c>
 8019f92:	ee07 5a10 	vmov	s14, r5
 8019f96:	4630      	mov	r0, r6
 8019f98:	193e      	adds	r6, r7, r4
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	ee07 6a90 	vmov	s15, r6
 8019fa0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8019fa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019fa8:	4a30      	ldr	r2, [pc, #192]	@ (801a06c <nema_blit_rotate+0x1b0>)
 8019faa:	463e      	mov	r6, r7
 8019fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fb0:	4607      	mov	r7, r0
 8019fb2:	9301      	str	r3, [sp, #4]
 8019fb4:	9305      	str	r3, [sp, #20]
 8019fb6:	9102      	str	r1, [sp, #8]
 8019fb8:	eeb1 7a47 	vneg.f32	s14, s14
 8019fbc:	9204      	str	r2, [sp, #16]
 8019fbe:	e7ab      	b.n	8019f18 <nema_blit_rotate+0x5c>
 8019fc0:	ee07 4a90 	vmov	s15, r4
 8019fc4:	1978      	adds	r0, r7, r5
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019fcc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8019fd0:	ee07 0a90 	vmov	s15, r0
 8019fd4:	4a25      	ldr	r2, [pc, #148]	@ (801a06c <nema_blit_rotate+0x1b0>)
 8019fd6:	9101      	str	r1, [sp, #4]
 8019fd8:	9302      	str	r3, [sp, #8]
 8019fda:	9304      	str	r3, [sp, #16]
 8019fdc:	eeb1 7a47 	vneg.f32	s14, s14
 8019fe0:	9205      	str	r2, [sp, #20]
 8019fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fe6:	e797      	b.n	8019f18 <nema_blit_rotate+0x5c>
 8019fe8:	ee07 5a90 	vmov	s15, r5
 8019fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019ff0:	ee07 0a90 	vmov	s15, r0
 8019ff4:	4631      	mov	r1, r6
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8019ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a000:	463e      	mov	r6, r7
 801a002:	eeb1 7a47 	vneg.f32	s14, s14
 801a006:	460f      	mov	r7, r1
 801a008:	eef1 7a67 	vneg.f32	s15, s15
 801a00c:	9201      	str	r2, [sp, #4]
 801a00e:	9205      	str	r2, [sp, #20]
 801a010:	9302      	str	r3, [sp, #8]
 801a012:	9304      	str	r3, [sp, #16]
 801a014:	e780      	b.n	8019f18 <nema_blit_rotate+0x5c>
 801a016:	ee07 5a90 	vmov	s15, r5
 801a01a:	1830      	adds	r0, r6, r0
 801a01c:	2300      	movs	r3, #0
 801a01e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801a022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a026:	ee07 0a10 	vmov	s14, r0
 801a02a:	4910      	ldr	r1, [pc, #64]	@ (801a06c <nema_blit_rotate+0x1b0>)
 801a02c:	9302      	str	r3, [sp, #8]
 801a02e:	9101      	str	r1, [sp, #4]
 801a030:	9304      	str	r3, [sp, #16]
 801a032:	9205      	str	r2, [sp, #20]
 801a034:	eef1 7a67 	vneg.f32	s15, s15
 801a038:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a03c:	e76c      	b.n	8019f18 <nema_blit_rotate+0x5c>
 801a03e:	ee07 0a90 	vmov	s15, r0
 801a042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a046:	ee07 1a90 	vmov	s15, r1
 801a04a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801a04e:	2300      	movs	r3, #0
 801a050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a054:	9201      	str	r2, [sp, #4]
 801a056:	9205      	str	r2, [sp, #20]
 801a058:	9302      	str	r3, [sp, #8]
 801a05a:	9304      	str	r3, [sp, #16]
 801a05c:	eeb1 7a47 	vneg.f32	s14, s14
 801a060:	eef1 7a67 	vneg.f32	s15, s15
 801a064:	e758      	b.n	8019f18 <nema_blit_rotate+0x5c>
 801a066:	bf00      	nop
 801a068:	20000024 	.word	0x20000024
 801a06c:	bf800000 	.word	0xbf800000
 801a070:	00000000 	.word	0x00000000

0801a074 <nema_blit_tri_fit>:
 801a074:	2803      	cmp	r0, #3
 801a076:	d801      	bhi.n	801a07c <nema_blit_tri_fit+0x8>
 801a078:	2903      	cmp	r1, #3
 801a07a:	d900      	bls.n	801a07e <nema_blit_tri_fit+0xa>
 801a07c:	4770      	bx	lr
 801a07e:	2a03      	cmp	r2, #3
 801a080:	d8fc      	bhi.n	801a07c <nema_blit_tri_fit+0x8>
 801a082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a086:	460c      	mov	r4, r1
 801a088:	493b      	ldr	r1, [pc, #236]	@ (801a178 <nema_blit_tri_fit+0x104>)
 801a08a:	4603      	mov	r3, r0
 801a08c:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 801a090:	ee07 0a90 	vmov	s15, r0
 801a094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a098:	ee07 1a90 	vmov	s15, r1
 801a09c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0a0:	b08a      	sub	sp, #40	@ 0x28
 801a0a2:	f04f 0c00 	mov.w	ip, #0
 801a0a6:	edcd 7a08 	vstr	s15, [sp, #32]
 801a0aa:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 801a0ae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801a0b2:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a0b6:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a0ba:	ee12 8a10 	vmov	r8, s4
 801a0be:	ee11 9a90 	vmov	r9, s3
 801a0c2:	ee11 aa10 	vmov	sl, s2
 801a0c6:	ee10 6a10 	vmov	r6, s0
 801a0ca:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 801a0ce:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 801a0d2:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
 801a0d6:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 801a0da:	f8cd c008 	str.w	ip, [sp, #8]
 801a0de:	f8cd c014 	str.w	ip, [sp, #20]
 801a0e2:	f8cd c018 	str.w	ip, [sp, #24]
 801a0e6:	f8cd c01c 	str.w	ip, [sp, #28]
 801a0ea:	ed52 6a08 	vldr	s13, [r2, #-32]	@ 0xffffffe0
 801a0ee:	ed14 4a08 	vldr	s8, [r4, #-32]	@ 0xffffffe0
 801a0f2:	ed53 1a08 	vldr	s3, [r3, #-32]	@ 0xffffffe0
 801a0f6:	ed12 7a04 	vldr	s14, [r2, #-16]
 801a0fa:	ed54 4a04 	vldr	s9, [r4, #-16]
 801a0fe:	ed13 2a04 	vldr	s4, [r3, #-16]
 801a102:	eef0 5a62 	vmov.f32	s11, s5
 801a106:	ee05 8a10 	vmov	s10, r8
 801a10a:	ee03 9a10 	vmov	s6, r9
 801a10e:	eef0 3a46 	vmov.f32	s7, s12
 801a112:	eeb0 1a46 	vmov.f32	s2, s12
 801a116:	ee12 7a90 	vmov	r7, s5
 801a11a:	ee02 aa90 	vmov	s5, sl
 801a11e:	ee10 5a90 	vmov	r5, s1
 801a122:	f000 f889 	bl	801a238 <nema_interpolate_tx_ty>
 801a126:	ee00 6a10 	vmov	s0, r6
 801a12a:	f000 f90f 	bl	801a34c <nema_f2fx>
 801a12e:	ee00 5a10 	vmov	s0, r5
 801a132:	4604      	mov	r4, r0
 801a134:	f000 f90a 	bl	801a34c <nema_f2fx>
 801a138:	ee00 aa10 	vmov	s0, sl
 801a13c:	4605      	mov	r5, r0
 801a13e:	f000 f905 	bl	801a34c <nema_f2fx>
 801a142:	ee00 9a10 	vmov	s0, r9
 801a146:	4606      	mov	r6, r0
 801a148:	f000 f900 	bl	801a34c <nema_f2fx>
 801a14c:	ee00 8a10 	vmov	s0, r8
 801a150:	4681      	mov	r9, r0
 801a152:	f000 f8fb 	bl	801a34c <nema_f2fx>
 801a156:	ee00 7a10 	vmov	s0, r7
 801a15a:	4680      	mov	r8, r0
 801a15c:	f000 f8f6 	bl	801a34c <nema_f2fx>
 801a160:	464b      	mov	r3, r9
 801a162:	e9cd 8000 	strd	r8, r0, [sp]
 801a166:	4632      	mov	r2, r6
 801a168:	4629      	mov	r1, r5
 801a16a:	4620      	mov	r0, r4
 801a16c:	f000 fcfc 	bl	801ab68 <nema_raster_triangle_fx>
 801a170:	b00a      	add	sp, #40	@ 0x28
 801a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a176:	bf00      	nop
 801a178:	20000024 	.word	0x20000024

0801a17c <nema_blit_quad_fit>:
 801a17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a180:	ed2d 8b08 	vpush	{d8-d11}
 801a184:	4b2b      	ldr	r3, [pc, #172]	@ (801a234 <nema_blit_quad_fit+0xb8>)
 801a186:	b08e      	sub	sp, #56	@ 0x38
 801a188:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 801a18c:	aa05      	add	r2, sp, #20
 801a18e:	eef0 ba40 	vmov.f32	s23, s0
 801a192:	eeb0 ba60 	vmov.f32	s22, s1
 801a196:	eef0 aa41 	vmov.f32	s21, s2
 801a19a:	eeb0 aa61 	vmov.f32	s20, s3
 801a19e:	eef0 9a42 	vmov.f32	s19, s4
 801a1a2:	eeb0 9a62 	vmov.f32	s18, s5
 801a1a6:	eef0 8a43 	vmov.f32	s17, s6
 801a1aa:	eeb0 8a63 	vmov.f32	s16, s7
 801a1ae:	f000 f9d3 	bl	801a558 <nema_mat3x3_quad_to_rect>
 801a1b2:	b120      	cbz	r0, 801a1be <nema_blit_quad_fit+0x42>
 801a1b4:	b00e      	add	sp, #56	@ 0x38
 801a1b6:	ecbd 8b08 	vpop	{d8-d11}
 801a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1be:	a805      	add	r0, sp, #20
 801a1c0:	f000 fbac 	bl	801a91c <nema_set_matrix>
 801a1c4:	eeb0 0a6b 	vmov.f32	s0, s23
 801a1c8:	f000 f8c0 	bl	801a34c <nema_f2fx>
 801a1cc:	eeb0 0a4b 	vmov.f32	s0, s22
 801a1d0:	4604      	mov	r4, r0
 801a1d2:	f000 f8bb 	bl	801a34c <nema_f2fx>
 801a1d6:	eeb0 0a6a 	vmov.f32	s0, s21
 801a1da:	4605      	mov	r5, r0
 801a1dc:	f000 f8b6 	bl	801a34c <nema_f2fx>
 801a1e0:	eeb0 0a4a 	vmov.f32	s0, s20
 801a1e4:	4606      	mov	r6, r0
 801a1e6:	f000 f8b1 	bl	801a34c <nema_f2fx>
 801a1ea:	eeb0 0a69 	vmov.f32	s0, s19
 801a1ee:	4607      	mov	r7, r0
 801a1f0:	f000 f8ac 	bl	801a34c <nema_f2fx>
 801a1f4:	eeb0 0a49 	vmov.f32	s0, s18
 801a1f8:	4682      	mov	sl, r0
 801a1fa:	f000 f8a7 	bl	801a34c <nema_f2fx>
 801a1fe:	eeb0 0a68 	vmov.f32	s0, s17
 801a202:	4680      	mov	r8, r0
 801a204:	f000 f8a2 	bl	801a34c <nema_f2fx>
 801a208:	eeb0 0a48 	vmov.f32	s0, s16
 801a20c:	4681      	mov	r9, r0
 801a20e:	f000 f89d 	bl	801a34c <nema_f2fx>
 801a212:	f8cd a000 	str.w	sl, [sp]
 801a216:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801a21a:	f8cd 8004 	str.w	r8, [sp, #4]
 801a21e:	463b      	mov	r3, r7
 801a220:	4632      	mov	r2, r6
 801a222:	4629      	mov	r1, r5
 801a224:	4620      	mov	r0, r4
 801a226:	f000 fd05 	bl	801ac34 <nema_raster_quad_fx>
 801a22a:	b00e      	add	sp, #56	@ 0x38
 801a22c:	ecbd 8b08 	vpop	{d8-d11}
 801a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a234:	20000024 	.word	0x20000024

0801a238 <nema_interpolate_tx_ty>:
 801a238:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 801a23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a240:	d407      	bmi.n	801a252 <nema_interpolate_tx_ty+0x1a>
 801a242:	eddf 7a40 	vldr	s15, [pc, #256]	@ 801a344 <nema_interpolate_tx_ty+0x10c>
 801a246:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801a24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a24e:	d807      	bhi.n	801a260 <nema_interpolate_tx_ty+0x28>
 801a250:	4770      	bx	lr
 801a252:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 801a348 <nema_interpolate_tx_ty+0x110>
 801a256:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801a25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a25e:	daf7      	bge.n	801a250 <nema_interpolate_tx_ty+0x18>
 801a260:	eef5 3ac0 	vcmpe.f32	s7, #0.0
 801a264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a268:	d45b      	bmi.n	801a322 <nema_interpolate_tx_ty+0xea>
 801a26a:	eddf 7a36 	vldr	s15, [pc, #216]	@ 801a344 <nema_interpolate_tx_ty+0x10c>
 801a26e:	eef4 3ae7 	vcmpe.f32	s7, s15
 801a272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a276:	d9eb      	bls.n	801a250 <nema_interpolate_tx_ty+0x18>
 801a278:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801a27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a280:	d457      	bmi.n	801a332 <nema_interpolate_tx_ty+0xfa>
 801a282:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801a344 <nema_interpolate_tx_ty+0x10c>
 801a286:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801a28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a28e:	d9df      	bls.n	801a250 <nema_interpolate_tx_ty+0x18>
 801a290:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a294:	b570      	push	{r4, r5, r6, lr}
 801a296:	ee15 3a90 	vmov	r3, s11
 801a29a:	ee13 2a10 	vmov	r2, s6
 801a29e:	eec7 5a86 	vdiv.f32	s11, s15, s12
 801a2a2:	ee87 3a81 	vdiv.f32	s6, s15, s2
 801a2a6:	ee15 4a10 	vmov	r4, s10
 801a2aa:	ee87 5aa3 	vdiv.f32	s10, s15, s7
 801a2ae:	ee63 1a21 	vmul.f32	s3, s6, s3
 801a2b2:	ee23 2a02 	vmul.f32	s4, s6, s4
 801a2b6:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a2ba:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a2be:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801a2c2:	ee25 7a87 	vmul.f32	s14, s11, s14
 801a2c6:	b092      	sub	sp, #72	@ 0x48
 801a2c8:	a809      	add	r0, sp, #36	@ 0x24
 801a2ca:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 801a2ce:	edcd 2a0a 	vstr	s5, [sp, #40]	@ 0x28
 801a2d2:	edcd 0a0c 	vstr	s1, [sp, #48]	@ 0x30
 801a2d6:	920d      	str	r2, [sp, #52]	@ 0x34
 801a2d8:	930e      	str	r3, [sp, #56]	@ 0x38
 801a2da:	edcd 1a00 	vstr	s3, [sp]
 801a2de:	ed8d 2a03 	vstr	s4, [sp, #12]
 801a2e2:	ed8d 4a01 	vstr	s8, [sp, #4]
 801a2e6:	edcd 4a04 	vstr	s9, [sp, #16]
 801a2ea:	edcd 6a02 	vstr	s13, [sp, #8]
 801a2ee:	ed8d 7a05 	vstr	s14, [sp, #20]
 801a2f2:	ed8d 3a06 	vstr	s6, [sp, #24]
 801a2f6:	ed8d 5a07 	vstr	s10, [sp, #28]
 801a2fa:	edcd 5a08 	vstr	s11, [sp, #32]
 801a2fe:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
 801a302:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 801a306:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 801a30a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a30c:	f000 f8c4 	bl	801a498 <nema_mat3x3_adj>
 801a310:	a909      	add	r1, sp, #36	@ 0x24
 801a312:	4668      	mov	r0, sp
 801a314:	f000 f82a 	bl	801a36c <nema_mat3x3_mul>
 801a318:	4668      	mov	r0, sp
 801a31a:	f000 faff 	bl	801a91c <nema_set_matrix>
 801a31e:	b012      	add	sp, #72	@ 0x48
 801a320:	bd70      	pop	{r4, r5, r6, pc}
 801a322:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801a348 <nema_interpolate_tx_ty+0x110>
 801a326:	eef4 3ae7 	vcmpe.f32	s7, s15
 801a32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a32e:	da8f      	bge.n	801a250 <nema_interpolate_tx_ty+0x18>
 801a330:	e7a2      	b.n	801a278 <nema_interpolate_tx_ty+0x40>
 801a332:	eddf 7a05 	vldr	s15, [pc, #20]	@ 801a348 <nema_interpolate_tx_ty+0x110>
 801a336:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801a33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a33e:	da87      	bge.n	801a250 <nema_interpolate_tx_ty+0x18>
 801a340:	e7a6      	b.n	801a290 <nema_interpolate_tx_ty+0x58>
 801a342:	bf00      	nop
 801a344:	3727c5ac 	.word	0x3727c5ac
 801a348:	b727c5ac 	.word	0xb727c5ac

0801a34c <nema_f2fx>:
 801a34c:	eddf 7a06 	vldr	s15, [pc, #24]	@ 801a368 <nema_f2fx+0x1c>
 801a350:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a354:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a358:	ee30 0a07 	vadd.f32	s0, s0, s14
 801a35c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a360:	ee17 0a90 	vmov	r0, s15
 801a364:	4770      	bx	lr
 801a366:	bf00      	nop
 801a368:	47800000 	.word	0x47800000

0801a36c <nema_mat3x3_mul>:
 801a36c:	edd1 4a01 	vldr	s9, [r1, #4]
 801a370:	ed91 0a04 	vldr	s0, [r1, #16]
 801a374:	edd1 0a05 	vldr	s1, [r1, #20]
 801a378:	ed2d 8b0c 	vpush	{d8-d13}
 801a37c:	ed91 6a00 	vldr	s12, [r1]
 801a380:	ed91 4a03 	vldr	s8, [r1, #12]
 801a384:	ed91 aa02 	vldr	s20, [r1, #8]
 801a388:	edd0 3a03 	vldr	s7, [r0, #12]
 801a38c:	ed90 8a04 	vldr	s16, [r0, #16]
 801a390:	ed90 9a00 	vldr	s18, [r0]
 801a394:	edd0 8a01 	vldr	s17, [r0, #4]
 801a398:	edd0 9a06 	vldr	s19, [r0, #24]
 801a39c:	ed90 1a07 	vldr	s2, [r0, #28]
 801a3a0:	edd1 aa06 	vldr	s21, [r1, #24]
 801a3a4:	edd1 6a07 	vldr	s13, [r1, #28]
 801a3a8:	ed91 7a08 	vldr	s14, [r1, #32]
 801a3ac:	ed90 5a02 	vldr	s10, [r0, #8]
 801a3b0:	edd0 5a05 	vldr	s11, [r0, #20]
 801a3b4:	ee69 da06 	vmul.f32	s27, s18, s12
 801a3b8:	ee29 da24 	vmul.f32	s26, s18, s9
 801a3bc:	ee66 ca23 	vmul.f32	s25, s12, s7
 801a3c0:	ee24 caa3 	vmul.f32	s24, s9, s7
 801a3c4:	ee68 1a84 	vmul.f32	s3, s17, s8
 801a3c8:	ee29 9a0a 	vmul.f32	s18, s18, s20
 801a3cc:	ee28 2a80 	vmul.f32	s4, s17, s0
 801a3d0:	ee26 6a29 	vmul.f32	s12, s12, s19
 801a3d4:	ee64 2a08 	vmul.f32	s5, s8, s16
 801a3d8:	ee6a ba23 	vmul.f32	s23, s20, s7
 801a3dc:	ee24 baa9 	vmul.f32	s22, s9, s19
 801a3e0:	ee20 3a08 	vmul.f32	s6, s0, s16
 801a3e4:	ee60 3a88 	vmul.f32	s7, s1, s16
 801a3e8:	ee60 4a01 	vmul.f32	s9, s0, s2
 801a3ec:	ee68 8aa0 	vmul.f32	s17, s17, s1
 801a3f0:	ee24 4a01 	vmul.f32	s8, s8, s2
 801a3f4:	ee6a 7a29 	vmul.f32	s15, s20, s19
 801a3f8:	ee20 1a81 	vmul.f32	s2, s1, s2
 801a3fc:	edd0 0a08 	vldr	s1, [r0, #32]
 801a400:	ee25 0a2a 	vmul.f32	s0, s10, s21
 801a404:	ee79 8a28 	vadd.f32	s17, s18, s17
 801a408:	ee2a 8aa5 	vmul.f32	s16, s21, s11
 801a40c:	ee25 9a26 	vmul.f32	s18, s10, s13
 801a410:	ee7d 1aa1 	vadd.f32	s3, s27, s3
 801a414:	ee3d 2a02 	vadd.f32	s4, s26, s4
 801a418:	ee7c 2aa2 	vadd.f32	s5, s25, s5
 801a41c:	ee3c 3a03 	vadd.f32	s6, s24, s6
 801a420:	ee7b 3aa3 	vadd.f32	s7, s23, s7
 801a424:	ee36 4a04 	vadd.f32	s8, s12, s8
 801a428:	ee7b 4a24 	vadd.f32	s9, s22, s9
 801a42c:	ee77 7a81 	vadd.f32	s15, s15, s2
 801a430:	ee25 5a07 	vmul.f32	s10, s10, s14
 801a434:	ee26 1aa5 	vmul.f32	s2, s13, s11
 801a438:	ee2a 6aa0 	vmul.f32	s12, s21, s1
 801a43c:	ee67 5a25 	vmul.f32	s11, s14, s11
 801a440:	ee66 6aa0 	vmul.f32	s13, s13, s1
 801a444:	ee27 7a20 	vmul.f32	s14, s14, s1
 801a448:	ee32 2a09 	vadd.f32	s4, s4, s18
 801a44c:	ee38 5a85 	vadd.f32	s10, s17, s10
 801a450:	ee72 2a88 	vadd.f32	s5, s5, s16
 801a454:	ee71 1a80 	vadd.f32	s3, s3, s0
 801a458:	ee33 3a01 	vadd.f32	s6, s6, s2
 801a45c:	ee73 5aa5 	vadd.f32	s11, s7, s11
 801a460:	ee34 6a06 	vadd.f32	s12, s8, s12
 801a464:	ee74 6aa6 	vadd.f32	s13, s9, s13
 801a468:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a46c:	edc0 1a00 	vstr	s3, [r0]
 801a470:	ed80 2a01 	vstr	s4, [r0, #4]
 801a474:	ed80 5a02 	vstr	s10, [r0, #8]
 801a478:	edc0 2a03 	vstr	s5, [r0, #12]
 801a47c:	ed80 3a04 	vstr	s6, [r0, #16]
 801a480:	edc0 5a05 	vstr	s11, [r0, #20]
 801a484:	ed80 6a06 	vstr	s12, [r0, #24]
 801a488:	edc0 6a07 	vstr	s13, [r0, #28]
 801a48c:	edc0 7a08 	vstr	s15, [r0, #32]
 801a490:	ecbd 8b0c 	vpop	{d8-d13}
 801a494:	4770      	bx	lr
 801a496:	bf00      	nop

0801a498 <nema_mat3x3_adj>:
 801a498:	edd0 3a03 	vldr	s7, [r0, #12]
 801a49c:	edd0 4a04 	vldr	s9, [r0, #16]
 801a4a0:	ed90 6a08 	vldr	s12, [r0, #32]
 801a4a4:	ed90 5a07 	vldr	s10, [r0, #28]
 801a4a8:	ed90 4a05 	vldr	s8, [r0, #20]
 801a4ac:	edd0 7a00 	vldr	s15, [r0]
 801a4b0:	edd0 6a02 	vldr	s13, [r0, #8]
 801a4b4:	edd0 5a01 	vldr	s11, [r0, #4]
 801a4b8:	ed90 7a06 	vldr	s14, [r0, #24]
 801a4bc:	ed2d 8b04 	vpush	{d8-d9}
 801a4c0:	ee24 1a86 	vmul.f32	s2, s9, s12
 801a4c4:	ee25 9a04 	vmul.f32	s18, s10, s8
 801a4c8:	ee66 8a25 	vmul.f32	s17, s12, s11
 801a4cc:	ee24 8aa6 	vmul.f32	s16, s9, s13
 801a4d0:	ee65 1a26 	vmul.f32	s3, s10, s13
 801a4d4:	ee24 2a25 	vmul.f32	s4, s8, s11
 801a4d8:	ee64 2a07 	vmul.f32	s5, s8, s14
 801a4dc:	ee66 0a87 	vmul.f32	s1, s13, s14
 801a4e0:	ee25 3a23 	vmul.f32	s6, s10, s7
 801a4e4:	ee24 4a27 	vmul.f32	s8, s8, s15
 801a4e8:	ee26 0a23 	vmul.f32	s0, s12, s7
 801a4ec:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801a4f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 801a4f4:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a4f8:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801a4fc:	ee64 4a87 	vmul.f32	s9, s9, s14
 801a500:	ee25 7a87 	vmul.f32	s14, s11, s14
 801a504:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801a508:	ee31 1a49 	vsub.f32	s2, s2, s18
 801a50c:	ee71 1ae8 	vsub.f32	s3, s3, s17
 801a510:	ee32 2a48 	vsub.f32	s4, s4, s16
 801a514:	ecbd 8b04 	vpop	{d8-d9}
 801a518:	ee72 3ac0 	vsub.f32	s7, s5, s0
 801a51c:	ee36 6a60 	vsub.f32	s12, s12, s1
 801a520:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801a524:	ee73 4a64 	vsub.f32	s9, s6, s9
 801a528:	ee37 7a45 	vsub.f32	s14, s14, s10
 801a52c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801a530:	ed80 1a00 	vstr	s2, [r0]
 801a534:	edc0 1a01 	vstr	s3, [r0, #4]
 801a538:	ed80 2a02 	vstr	s4, [r0, #8]
 801a53c:	edc0 3a03 	vstr	s7, [r0, #12]
 801a540:	ed80 6a04 	vstr	s12, [r0, #16]
 801a544:	edc0 6a05 	vstr	s13, [r0, #20]
 801a548:	edc0 4a06 	vstr	s9, [r0, #24]
 801a54c:	ed80 7a07 	vstr	s14, [r0, #28]
 801a550:	edc0 7a08 	vstr	s15, [r0, #32]
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop

0801a558 <nema_mat3x3_quad_to_rect>:
 801a558:	ee70 6a41 	vsub.f32	s13, s0, s2
 801a55c:	ee76 6a82 	vadd.f32	s13, s13, s4
 801a560:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801a564:	ee30 6ae1 	vsub.f32	s12, s1, s3
 801a568:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a56c:	ee36 6a22 	vadd.f32	s12, s12, s5
 801a570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a574:	ed2d 8b06 	vpush	{d8-d10}
 801a578:	ee36 6a63 	vsub.f32	s12, s12, s7
 801a57c:	ee09 0a10 	vmov	s18, r0
 801a580:	ee08 1a90 	vmov	s17, r1
 801a584:	f100 812e 	bmi.w	801a7e4 <nema_mat3x3_quad_to_rect+0x28c>
 801a588:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801a81c <nema_mat3x3_quad_to_rect+0x2c4>
 801a58c:	eef4 6ae7 	vcmpe.f32	s13, s15
 801a590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a594:	d80d      	bhi.n	801a5b2 <nema_mat3x3_quad_to_rect+0x5a>
 801a596:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801a59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a59e:	f100 80f7 	bmi.w	801a790 <nema_mat3x3_quad_to_rect+0x238>
 801a5a2:	eddf 7a9e 	vldr	s15, [pc, #632]	@ 801a81c <nema_mat3x3_quad_to_rect+0x2c4>
 801a5a6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801a5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5ae:	f240 80f7 	bls.w	801a7a0 <nema_mat3x3_quad_to_rect+0x248>
 801a5b2:	ee31 7a42 	vsub.f32	s14, s2, s4
 801a5b6:	ee73 7ae2 	vsub.f32	s15, s7, s5
 801a5ba:	ee33 2a42 	vsub.f32	s4, s6, s4
 801a5be:	ee71 2ae2 	vsub.f32	s5, s3, s5
 801a5c2:	ee67 5a27 	vmul.f32	s11, s14, s15
 801a5c6:	ee22 5a22 	vmul.f32	s10, s4, s5
 801a5ca:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a5ce:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a5d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a5d6:	ee26 7a07 	vmul.f32	s14, s12, s14
 801a5da:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801a5de:	ee26 6a02 	vmul.f32	s12, s12, s4
 801a5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a5ea:	ee77 6a66 	vsub.f32	s13, s14, s13
 801a5ee:	f100 80c5 	bmi.w	801a77c <nema_mat3x3_quad_to_rect+0x224>
 801a5f2:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 801a81c <nema_mat3x3_quad_to_rect+0x2c4>
 801a5f6:	eef4 5ac7 	vcmpe.f32	s11, s14
 801a5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5fe:	bf94      	ite	ls
 801a600:	2301      	movls	r3, #1
 801a602:	2300      	movhi	r3, #0
 801a604:	2b00      	cmp	r3, #0
 801a606:	f040 8106 	bne.w	801a816 <nema_mat3x3_quad_to_rect+0x2be>
 801a60a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a60e:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801a612:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a616:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a61a:	ee21 5a27 	vmul.f32	s10, s2, s15
 801a61e:	ee61 5aa7 	vmul.f32	s11, s3, s15
 801a622:	ee63 2aa6 	vmul.f32	s5, s7, s13
 801a626:	ee31 1a40 	vsub.f32	s2, s2, s0
 801a62a:	ee23 6a26 	vmul.f32	s12, s6, s13
 801a62e:	ee33 2a40 	vsub.f32	s4, s6, s0
 801a632:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801a636:	ee73 3ae0 	vsub.f32	s7, s7, s1
 801a63a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a63e:	ee32 2a06 	vadd.f32	s4, s4, s12
 801a642:	ee71 1aa5 	vadd.f32	s3, s3, s11
 801a646:	ee73 2aa2 	vadd.f32	s5, s7, s5
 801a64a:	ed82 0a02 	vstr	s0, [r2, #8]
 801a64e:	edc2 0a05 	vstr	s1, [r2, #20]
 801a652:	edc2 7a06 	vstr	s15, [r2, #24]
 801a656:	edc2 6a07 	vstr	s13, [r2, #28]
 801a65a:	ed82 7a08 	vstr	s14, [r2, #32]
 801a65e:	ed82 1a00 	vstr	s2, [r2]
 801a662:	ed82 2a01 	vstr	s4, [r2, #4]
 801a666:	edc2 1a03 	vstr	s3, [r2, #12]
 801a66a:	edc2 2a04 	vstr	s5, [r2, #16]
 801a66e:	ee20 4aa6 	vmul.f32	s8, s1, s13
 801a672:	ee60 5aa7 	vmul.f32	s11, s1, s15
 801a676:	ee32 3ac4 	vsub.f32	s6, s5, s8
 801a67a:	ee31 7ae5 	vsub.f32	s14, s3, s11
 801a67e:	ee21 8aa6 	vmul.f32	s16, s3, s13
 801a682:	ee22 6aa7 	vmul.f32	s12, s5, s15
 801a686:	ee27 7a02 	vmul.f32	s14, s14, s4
 801a68a:	ee23 4a01 	vmul.f32	s8, s6, s2
 801a68e:	ee38 8a46 	vsub.f32	s16, s16, s12
 801a692:	ee34 4a47 	vsub.f32	s8, s8, s14
 801a696:	ee20 7a08 	vmul.f32	s14, s0, s16
 801a69a:	ee34 4a07 	vadd.f32	s8, s8, s14
 801a69e:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 801a6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6a6:	f100 80ac 	bmi.w	801a802 <nema_mat3x3_quad_to_rect+0x2aa>
 801a6aa:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 801a81c <nema_mat3x3_quad_to_rect+0x2c4>
 801a6ae:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801a6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6b6:	bf94      	ite	ls
 801a6b8:	2001      	movls	r0, #1
 801a6ba:	2000      	movhi	r0, #0
 801a6bc:	2800      	cmp	r0, #0
 801a6be:	f040 80aa 	bne.w	801a816 <nema_mat3x3_quad_to_rect+0x2be>
 801a6c2:	ee20 5a82 	vmul.f32	s10, s1, s4
 801a6c6:	ee60 4a26 	vmul.f32	s9, s0, s13
 801a6ca:	ee20 6a27 	vmul.f32	s12, s0, s15
 801a6ce:	ee60 9a22 	vmul.f32	s19, s0, s5
 801a6d2:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 801a6d6:	ee60 0a81 	vmul.f32	s1, s1, s2
 801a6da:	ee20 7a21 	vmul.f32	s14, s0, s3
 801a6de:	eeca 3a04 	vdiv.f32	s7, s20, s8
 801a6e2:	ee74 4ac2 	vsub.f32	s9, s9, s4
 801a6e6:	ee61 6a26 	vmul.f32	s13, s2, s13
 801a6ea:	ee67 7a82 	vmul.f32	s15, s15, s4
 801a6ee:	ee35 5a69 	vsub.f32	s10, s10, s19
 801a6f2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801a6f6:	ee31 6a46 	vsub.f32	s12, s2, s12
 801a6fa:	ee62 2a81 	vmul.f32	s5, s5, s2
 801a6fe:	ee37 7a60 	vsub.f32	s14, s14, s1
 801a702:	ee21 2a82 	vmul.f32	s4, s3, s4
 801a706:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801a70a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801a70e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a712:	ee23 4a23 	vmul.f32	s8, s6, s7
 801a716:	ee65 6a23 	vmul.f32	s13, s10, s7
 801a71a:	ee65 5aa3 	vmul.f32	s11, s11, s7
 801a71e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801a722:	ee26 6a23 	vmul.f32	s12, s12, s7
 801a726:	ee27 7a23 	vmul.f32	s14, s14, s7
 801a72a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801a72e:	ee24 4a09 	vmul.f32	s8, s8, s18
 801a732:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801a736:	ee28 8a23 	vmul.f32	s16, s16, s7
 801a73a:	ee24 5a89 	vmul.f32	s10, s9, s18
 801a73e:	ee26 6a28 	vmul.f32	s12, s12, s17
 801a742:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801a746:	ee66 6a89 	vmul.f32	s13, s13, s18
 801a74a:	ee27 7a28 	vmul.f32	s14, s14, s17
 801a74e:	ee62 2aa3 	vmul.f32	s5, s5, s7
 801a752:	ed82 4a00 	vstr	s8, [r2]
 801a756:	edc2 5a03 	vstr	s11, [r2, #12]
 801a75a:	ed82 8a06 	vstr	s16, [r2, #24]
 801a75e:	ed82 5a01 	vstr	s10, [r2, #4]
 801a762:	ed82 6a04 	vstr	s12, [r2, #16]
 801a766:	edc2 7a07 	vstr	s15, [r2, #28]
 801a76a:	edc2 6a02 	vstr	s13, [r2, #8]
 801a76e:	ed82 7a05 	vstr	s14, [r2, #20]
 801a772:	edc2 2a08 	vstr	s5, [r2, #32]
 801a776:	ecbd 8b06 	vpop	{d8-d10}
 801a77a:	4770      	bx	lr
 801a77c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 801a820 <nema_mat3x3_quad_to_rect+0x2c8>
 801a780:	eef4 5ac7 	vcmpe.f32	s11, s14
 801a784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a788:	bfac      	ite	ge
 801a78a:	2301      	movge	r3, #1
 801a78c:	2300      	movlt	r3, #0
 801a78e:	e739      	b.n	801a604 <nema_mat3x3_quad_to_rect+0xac>
 801a790:	eddf 7a23 	vldr	s15, [pc, #140]	@ 801a820 <nema_mat3x3_quad_to_rect+0x2c8>
 801a794:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801a798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a79c:	f6ff af09 	blt.w	801a5b2 <nema_mat3x3_quad_to_rect+0x5a>
 801a7a0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801a824 <nema_mat3x3_quad_to_rect+0x2cc>
 801a7a4:	ee32 2a41 	vsub.f32	s4, s4, s2
 801a7a8:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801a7ac:	ee31 1a40 	vsub.f32	s2, s2, s0
 801a7b0:	ee71 1ae0 	vsub.f32	s3, s3, s1
 801a7b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801a7b8:	eef0 7a47 	vmov.f32	s15, s14
 801a7bc:	ed82 2a01 	vstr	s4, [r2, #4]
 801a7c0:	ed82 1a00 	vstr	s2, [r2]
 801a7c4:	edc2 2a04 	vstr	s5, [r2, #16]
 801a7c8:	edc2 1a03 	vstr	s3, [r2, #12]
 801a7cc:	ed82 0a02 	vstr	s0, [r2, #8]
 801a7d0:	edc2 0a05 	vstr	s1, [r2, #20]
 801a7d4:	ed82 7a06 	vstr	s14, [r2, #24]
 801a7d8:	ed82 7a07 	vstr	s14, [r2, #28]
 801a7dc:	eef0 6a47 	vmov.f32	s13, s14
 801a7e0:	6213      	str	r3, [r2, #32]
 801a7e2:	e744      	b.n	801a66e <nema_mat3x3_quad_to_rect+0x116>
 801a7e4:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801a820 <nema_mat3x3_quad_to_rect+0x2c8>
 801a7e8:	eef4 6ae7 	vcmpe.f32	s13, s15
 801a7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7f0:	f6ff aedf 	blt.w	801a5b2 <nema_mat3x3_quad_to_rect+0x5a>
 801a7f4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801a7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7fc:	f57f aed1 	bpl.w	801a5a2 <nema_mat3x3_quad_to_rect+0x4a>
 801a800:	e7c6      	b.n	801a790 <nema_mat3x3_quad_to_rect+0x238>
 801a802:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 801a820 <nema_mat3x3_quad_to_rect+0x2c8>
 801a806:	eeb4 4ac7 	vcmpe.f32	s8, s14
 801a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a80e:	bfac      	ite	ge
 801a810:	2001      	movge	r0, #1
 801a812:	2000      	movlt	r0, #0
 801a814:	e752      	b.n	801a6bc <nema_mat3x3_quad_to_rect+0x164>
 801a816:	f04f 30ff 	mov.w	r0, #4294967295
 801a81a:	e7ac      	b.n	801a776 <nema_mat3x3_quad_to_rect+0x21e>
 801a81c:	3727c5ac 	.word	0x3727c5ac
 801a820:	b727c5ac 	.word	0xb727c5ac
 801a824:	00000000 	.word	0x00000000

0801a828 <nema_readHwConfig>:
 801a828:	b510      	push	{r4, lr}
 801a82a:	4c05      	ldr	r4, [pc, #20]	@ (801a840 <nema_readHwConfig+0x18>)
 801a82c:	6820      	ldr	r0, [r4, #0]
 801a82e:	b100      	cbz	r0, 801a832 <nema_readHwConfig+0xa>
 801a830:	bd10      	pop	{r4, pc}
 801a832:	f44f 70f8 	mov.w	r0, #496	@ 0x1f0
 801a836:	f7f9 fd37 	bl	80142a8 <nema_reg_read>
 801a83a:	6020      	str	r0, [r4, #0]
 801a83c:	bd10      	pop	{r4, pc}
 801a83e:	bf00      	nop
 801a840:	2015a118 	.word	0x2015a118

0801a844 <nema_readHwConfigH>:
 801a844:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801a848:	f7f9 bd2e 	b.w	80142a8 <nema_reg_read>

0801a84c <nema_enable_tiling>:
 801a84c:	2800      	cmp	r0, #0
 801a84e:	bf14      	ite	ne
 801a850:	f04f 4080 	movne.w	r0, #1073741824	@ 0x40000000
 801a854:	2000      	moveq	r0, #0
 801a856:	b410      	push	{r4}
 801a858:	4a05      	ldr	r2, [pc, #20]	@ (801a870 <nema_enable_tiling+0x24>)
 801a85a:	6951      	ldr	r1, [r2, #20]
 801a85c:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 801a860:	4323      	orrs	r3, r4
 801a862:	430b      	orrs	r3, r1
 801a864:	4303      	orrs	r3, r0
 801a866:	6050      	str	r0, [r2, #4]
 801a868:	6113      	str	r3, [r2, #16]
 801a86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a86e:	4770      	bx	lr
 801a870:	20000024 	.word	0x20000024

0801a874 <nema_enable_tiling_2x2>:
 801a874:	2800      	cmp	r0, #0
 801a876:	bf14      	ite	ne
 801a878:	f04f 4040 	movne.w	r0, #3221225472	@ 0xc0000000
 801a87c:	2000      	moveq	r0, #0
 801a87e:	b410      	push	{r4}
 801a880:	4a05      	ldr	r2, [pc, #20]	@ (801a898 <nema_enable_tiling_2x2+0x24>)
 801a882:	6951      	ldr	r1, [r2, #20]
 801a884:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
 801a888:	4323      	orrs	r3, r4
 801a88a:	430b      	orrs	r3, r1
 801a88c:	4303      	orrs	r3, r0
 801a88e:	6050      	str	r0, [r2, #4]
 801a890:	6113      	str	r3, [r2, #16]
 801a892:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a896:	4770      	bx	lr
 801a898:	20000024 	.word	0x20000024

0801a89c <nema_enable_aa>:
 801a89c:	2800      	cmp	r0, #0
 801a89e:	b410      	push	{r4}
 801a8a0:	bf19      	ittee	ne
 801a8a2:	f04f 6080 	movne.w	r0, #67108864	@ 0x4000000
 801a8a6:	f04f 64c0 	movne.w	r4, #100663296	@ 0x6000000
 801a8aa:	f04f 7400 	moveq.w	r4, #33554432	@ 0x2000000
 801a8ae:	2000      	moveq	r0, #0
 801a8b0:	2900      	cmp	r1, #0
 801a8b2:	bf08      	it	eq
 801a8b4:	4604      	moveq	r4, r0
 801a8b6:	b10a      	cbz	r2, 801a8bc <nema_enable_aa+0x20>
 801a8b8:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 801a8bc:	b10b      	cbz	r3, 801a8c2 <nema_enable_aa+0x26>
 801a8be:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 801a8c2:	4a06      	ldr	r2, [pc, #24]	@ (801a8dc <nema_enable_aa+0x40>)
 801a8c4:	6853      	ldr	r3, [r2, #4]
 801a8c6:	e9d2 1002 	ldrd	r1, r0, [r2, #8]
 801a8ca:	4303      	orrs	r3, r0
 801a8cc:	430b      	orrs	r3, r1
 801a8ce:	4323      	orrs	r3, r4
 801a8d0:	6950      	ldr	r0, [r2, #20]
 801a8d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801a8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8da:	4770      	bx	lr
 801a8dc:	20000024 	.word	0x20000024

0801a8e0 <nema_enable_aa_flags>:
 801a8e0:	b410      	push	{r4}
 801a8e2:	4a07      	ldr	r2, [pc, #28]	@ (801a900 <nema_enable_aa_flags+0x20>)
 801a8e4:	f000 61f0 	and.w	r1, r0, #125829120	@ 0x7800000
 801a8e8:	6853      	ldr	r3, [r2, #4]
 801a8ea:	e9d2 0402 	ldrd	r0, r4, [r2, #8]
 801a8ee:	4323      	orrs	r3, r4
 801a8f0:	4303      	orrs	r3, r0
 801a8f2:	430b      	orrs	r3, r1
 801a8f4:	6950      	ldr	r0, [r2, #20]
 801a8f6:	e9c2 3104 	strd	r3, r1, [r2, #16]
 801a8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8fe:	4770      	bx	lr
 801a900:	20000024 	.word	0x20000024

0801a904 <nema_matmul_bypass>:
 801a904:	b920      	cbnz	r0, 801a910 <nema_matmul_bypass+0xc>
 801a906:	4601      	mov	r1, r0
 801a908:	f44f 708c 	mov.w	r0, #280	@ 0x118
 801a90c:	f000 bdb2 	b.w	801b474 <nema_cl_add_cmd>
 801a910:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 801a914:	f44f 708c 	mov.w	r0, #280	@ 0x118
 801a918:	f000 bdac 	b.w	801b474 <nema_cl_add_cmd>

0801a91c <nema_set_matrix>:
 801a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a920:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801aa88 <nema_set_matrix+0x16c>
 801a924:	edd0 7a06 	vldr	s15, [r0, #24]
 801a928:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a930:	4604      	mov	r4, r0
 801a932:	d506      	bpl.n	801a942 <nema_set_matrix+0x26>
 801a934:	eddf 6a55 	vldr	s13, [pc, #340]	@ 801aa8c <nema_set_matrix+0x170>
 801a938:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a940:	dc47      	bgt.n	801a9d2 <nema_set_matrix+0xb6>
 801a942:	2009      	movs	r0, #9
 801a944:	f000 fd3a 	bl	801b3bc <nema_cl_get_space>
 801a948:	2800      	cmp	r0, #0
 801a94a:	d040      	beq.n	801a9ce <nema_set_matrix+0xb2>
 801a94c:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 801a950:	6003      	str	r3, [r0, #0]
 801a952:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 801a956:	6962      	ldr	r2, [r4, #20]
 801a958:	6083      	str	r3, [r0, #8]
 801a95a:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 801a95e:	6042      	str	r2, [r0, #4]
 801a960:	68a2      	ldr	r2, [r4, #8]
 801a962:	6103      	str	r3, [r0, #16]
 801a964:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 801a968:	60c2      	str	r2, [r0, #12]
 801a96a:	69a2      	ldr	r2, [r4, #24]
 801a96c:	6183      	str	r3, [r0, #24]
 801a96e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801a972:	6142      	str	r2, [r0, #20]
 801a974:	69e2      	ldr	r2, [r4, #28]
 801a976:	6203      	str	r3, [r0, #32]
 801a978:	61c2      	str	r2, [r0, #28]
 801a97a:	6a23      	ldr	r3, [r4, #32]
 801a97c:	2544      	movs	r5, #68	@ 0x44
 801a97e:	6243      	str	r3, [r0, #36]	@ 0x24
 801a980:	2640      	movs	r6, #64	@ 0x40
 801a982:	233c      	movs	r3, #60	@ 0x3c
 801a984:	2738      	movs	r7, #56	@ 0x38
 801a986:	2234      	movs	r2, #52	@ 0x34
 801a988:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801a98c:	212c      	movs	r1, #44	@ 0x2c
 801a98e:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 801a992:	f44f 78b0 	mov.w	r8, #352	@ 0x160
 801a996:	f840 800e 	str.w	r8, [r0, lr]
 801a99a:	f44f 7eb2 	mov.w	lr, #356	@ 0x164
 801a99e:	f8d4 8000 	ldr.w	r8, [r4]
 801a9a2:	4401      	add	r1, r0
 801a9a4:	f8c1 8000 	str.w	r8, [r1]
 801a9a8:	f840 e00c 	str.w	lr, [r0, ip]
 801a9ac:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 801a9b0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801a9b4:	4402      	add	r2, r0
 801a9b6:	f8c2 c000 	str.w	ip, [r2]
 801a9ba:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a9be:	51c1      	str	r1, [r0, r7]
 801a9c0:	68e1      	ldr	r1, [r4, #12]
 801a9c2:	4403      	add	r3, r0
 801a9c4:	6019      	str	r1, [r3, #0]
 801a9c6:	5182      	str	r2, [r0, r6]
 801a9c8:	6923      	ldr	r3, [r4, #16]
 801a9ca:	4428      	add	r0, r5
 801a9cc:	6003      	str	r3, [r0, #0]
 801a9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9d2:	ed90 6a07 	vldr	s12, [r0, #28]
 801a9d6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801a9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9de:	d5b0      	bpl.n	801a942 <nema_set_matrix+0x26>
 801a9e0:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e8:	ddab      	ble.n	801a942 <nema_set_matrix+0x26>
 801a9ea:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801a9ee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801a9f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9fa:	d43f      	bmi.n	801aa7c <nema_set_matrix+0x160>
 801a9fc:	edd4 7a08 	vldr	s15, [r4, #32]
 801aa00:	ed94 5a00 	vldr	s10, [r4]
 801aa04:	edd4 5a01 	vldr	s11, [r4, #4]
 801aa08:	ed94 6a02 	vldr	s12, [r4, #8]
 801aa0c:	edd4 6a03 	vldr	s13, [r4, #12]
 801aa10:	ed94 7a04 	vldr	s14, [r4, #16]
 801aa14:	ed94 4a05 	vldr	s8, [r4, #20]
 801aa18:	eec5 4a27 	vdiv.f32	s9, s10, s15
 801aa1c:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801aa20:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801aa24:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801aa28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801aa2c:	ee84 7a27 	vdiv.f32	s14, s8, s15
 801aa30:	edc4 4a00 	vstr	s9, [r4]
 801aa34:	ed84 5a01 	vstr	s10, [r4, #4]
 801aa38:	edc4 5a02 	vstr	s11, [r4, #8]
 801aa3c:	ed84 6a03 	vstr	s12, [r4, #12]
 801aa40:	edc4 6a04 	vstr	s13, [r4, #16]
 801aa44:	ed84 7a05 	vstr	s14, [r4, #20]
 801aa48:	2006      	movs	r0, #6
 801aa4a:	f000 fcb7 	bl	801b3bc <nema_cl_get_space>
 801aa4e:	2800      	cmp	r0, #0
 801aa50:	d0bd      	beq.n	801a9ce <nema_set_matrix+0xb2>
 801aa52:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 801aa56:	6003      	str	r3, [r0, #0]
 801aa58:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 801aa5c:	6962      	ldr	r2, [r4, #20]
 801aa5e:	6083      	str	r3, [r0, #8]
 801aa60:	6042      	str	r2, [r0, #4]
 801aa62:	68a3      	ldr	r3, [r4, #8]
 801aa64:	252c      	movs	r5, #44	@ 0x2c
 801aa66:	60c3      	str	r3, [r0, #12]
 801aa68:	2628      	movs	r6, #40	@ 0x28
 801aa6a:	2324      	movs	r3, #36	@ 0x24
 801aa6c:	2720      	movs	r7, #32
 801aa6e:	221c      	movs	r2, #28
 801aa70:	f04f 0c18 	mov.w	ip, #24
 801aa74:	2114      	movs	r1, #20
 801aa76:	f04f 0e10 	mov.w	lr, #16
 801aa7a:	e78a      	b.n	801a992 <nema_set_matrix+0x76>
 801aa7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 801aa80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa84:	dce0      	bgt.n	801aa48 <nema_set_matrix+0x12c>
 801aa86:	e7b9      	b.n	801a9fc <nema_set_matrix+0xe0>
 801aa88:	33d6bf95 	.word	0x33d6bf95
 801aa8c:	b3d6bf95 	.word	0xb3d6bf95

0801aa90 <nema_set_matrix_translate>:
 801aa90:	b508      	push	{r3, lr}
 801aa92:	2002      	movs	r0, #2
 801aa94:	ed2d 8b02 	vpush	{d8}
 801aa98:	eeb0 8a40 	vmov.f32	s16, s0
 801aa9c:	eef0 8a60 	vmov.f32	s17, s1
 801aaa0:	f000 fc8c 	bl	801b3bc <nema_cl_get_space>
 801aaa4:	b1c8      	cbz	r0, 801aada <nema_set_matrix_translate+0x4a>
 801aaa6:	eddf 7a13 	vldr	s15, [pc, #76]	@ 801aaf4 <nema_set_matrix_translate+0x64>
 801aaaa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801aaae:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801aab2:	eef1 6a68 	vneg.f32	s13, s17
 801aab6:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 801aaba:	eeb1 7a48 	vneg.f32	s14, s16
 801aabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aac2:	6002      	str	r2, [r0, #0]
 801aac4:	edc0 6a01 	vstr	s13, [r0, #4]
 801aac8:	6083      	str	r3, [r0, #8]
 801aaca:	ed80 7a03 	vstr	s14, [r0, #12]
 801aace:	dc07      	bgt.n	801aae0 <nema_set_matrix_translate+0x50>
 801aad0:	eef4 8ae7 	vcmpe.f32	s17, s15
 801aad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aad8:	dc02      	bgt.n	801aae0 <nema_set_matrix_translate+0x50>
 801aada:	ecbd 8b02 	vpop	{d8}
 801aade:	bd08      	pop	{r3, pc}
 801aae0:	ecbd 8b02 	vpop	{d8}
 801aae4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 801aae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801aaec:	f44f 708c 	mov.w	r0, #280	@ 0x118
 801aaf0:	f000 bcc0 	b.w	801b474 <nema_cl_add_cmd>
 801aaf4:	45000000 	.word	0x45000000

0801aaf8 <nema_load_frag_shader>:
 801aaf8:	b570      	push	{r4, r5, r6, lr}
 801aafa:	460e      	mov	r6, r1
 801aafc:	4604      	mov	r4, r0
 801aafe:	4611      	mov	r1, r2
 801ab00:	20c4      	movs	r0, #196	@ 0xc4
 801ab02:	f000 fcb7 	bl	801b474 <nema_cl_add_cmd>
 801ab06:	b186      	cbz	r6, 801ab2a <nema_load_frag_shader+0x32>
 801ab08:	2500      	movs	r5, #0
 801ab0a:	3408      	adds	r4, #8
 801ab0c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801ab10:	20c8      	movs	r0, #200	@ 0xc8
 801ab12:	f000 fcaf 	bl	801b474 <nema_cl_add_cmd>
 801ab16:	3501      	adds	r5, #1
 801ab18:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801ab1c:	20cc      	movs	r0, #204	@ 0xcc
 801ab1e:	f000 fca9 	bl	801b474 <nema_cl_add_cmd>
 801ab22:	42ae      	cmp	r6, r5
 801ab24:	f104 0408 	add.w	r4, r4, #8
 801ab28:	d1f0      	bne.n	801ab0c <nema_load_frag_shader+0x14>
 801ab2a:	bd70      	pop	{r4, r5, r6, pc}

0801ab2c <nema_set_frag_ptr>:
 801ab2c:	4601      	mov	r1, r0
 801ab2e:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 801ab32:	f000 bc9f 	b.w	801b474 <nema_cl_add_cmd>
 801ab36:	bf00      	nop

0801ab38 <nema_set_rop_blend_mode>:
 801ab38:	4601      	mov	r1, r0
 801ab3a:	f44f 70e8 	mov.w	r0, #464	@ 0x1d0
 801ab3e:	f000 bc99 	b.w	801b474 <nema_cl_add_cmd>
 801ab42:	bf00      	nop

0801ab44 <nema_set_rop_const_color>:
 801ab44:	4601      	mov	r1, r0
 801ab46:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 801ab4a:	f000 bc93 	b.w	801b474 <nema_cl_add_cmd>
 801ab4e:	bf00      	nop

0801ab50 <nema_set_depth_ctrl>:
 801ab50:	4601      	mov	r1, r0
 801ab52:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 801ab56:	f000 bc8d 	b.w	801b474 <nema_cl_add_cmd>
 801ab5a:	bf00      	nop

0801ab5c <nema_set_raster_color>:
 801ab5c:	4601      	mov	r1, r0
 801ab5e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801ab62:	f000 bc87 	b.w	801b474 <nema_cl_add_cmd>
 801ab66:	bf00      	nop

0801ab68 <nema_raster_triangle_fx>:
 801ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab6c:	4607      	mov	r7, r0
 801ab6e:	2007      	movs	r0, #7
 801ab70:	460e      	mov	r6, r1
 801ab72:	4615      	mov	r5, r2
 801ab74:	461c      	mov	r4, r3
 801ab76:	f000 fc21 	bl	801b3bc <nema_cl_get_space>
 801ab7a:	b350      	cbz	r0, 801abd2 <nema_raster_triangle_fx+0x6a>
 801ab7c:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801ab80:	f44f 7292 	mov.w	r2, #292	@ 0x124
 801ab84:	f44f 7890 	mov.w	r8, #288	@ 0x120
 801ab88:	f44f 7e9a 	mov.w	lr, #308	@ 0x134
 801ab8c:	f44f 7ca0 	mov.w	ip, #320	@ 0x140
 801ab90:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 801ab94:	6103      	str	r3, [r0, #16]
 801ab96:	4b10      	ldr	r3, [pc, #64]	@ (801abd8 <nema_raster_triangle_fx+0x70>)
 801ab98:	6047      	str	r7, [r0, #4]
 801ab9a:	60c6      	str	r6, [r0, #12]
 801ab9c:	f8c0 8000 	str.w	r8, [r0]
 801aba0:	6082      	str	r2, [r0, #8]
 801aba2:	691a      	ldr	r2, [r3, #16]
 801aba4:	4b0d      	ldr	r3, [pc, #52]	@ (801abdc <nema_raster_triangle_fx+0x74>)
 801aba6:	61c4      	str	r4, [r0, #28]
 801aba8:	9c06      	ldr	r4, [sp, #24]
 801abaa:	6303      	str	r3, [r0, #48]	@ 0x30
 801abac:	01d3      	lsls	r3, r2, #7
 801abae:	6244      	str	r4, [r0, #36]	@ 0x24
 801abb0:	bf48      	it	mi
 801abb2:	f442 0200 	orrmi.w	r2, r2, #8388608	@ 0x800000
 801abb6:	9c07      	ldr	r4, [sp, #28]
 801abb8:	bf58      	it	pl
 801abba:	f422 0200 	bicpl.w	r2, r2, #8388608	@ 0x800000
 801abbe:	f042 0204 	orr.w	r2, r2, #4
 801abc2:	6145      	str	r5, [r0, #20]
 801abc4:	62c4      	str	r4, [r0, #44]	@ 0x2c
 801abc6:	f8c0 e018 	str.w	lr, [r0, #24]
 801abca:	f8c0 c020 	str.w	ip, [r0, #32]
 801abce:	6281      	str	r1, [r0, #40]	@ 0x28
 801abd0:	6342      	str	r2, [r0, #52]	@ 0x34
 801abd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abd6:	bf00      	nop
 801abd8:	20000024 	.word	0x20000024
 801abdc:	ff000100 	.word	0xff000100

0801abe0 <nema_raster_rect>:
 801abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abe2:	1e17      	subs	r7, r2, #0
 801abe4:	dd20      	ble.n	801ac28 <nema_raster_rect+0x48>
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	dd1e      	ble.n	801ac28 <nema_raster_rect+0x48>
 801abea:	4604      	mov	r4, r0
 801abec:	2003      	movs	r0, #3
 801abee:	461d      	mov	r5, r3
 801abf0:	460e      	mov	r6, r1
 801abf2:	f000 fbe3 	bl	801b3bc <nema_cl_get_space>
 801abf6:	b1b8      	cbz	r0, 801ac28 <nema_raster_rect+0x48>
 801abf8:	f44f 7c82 	mov.w	ip, #260	@ 0x104
 801abfc:	f44f 7184 	mov.w	r1, #264	@ 0x108
 801ac00:	193a      	adds	r2, r7, r4
 801ac02:	b292      	uxth	r2, r2
 801ac04:	19ab      	adds	r3, r5, r6
 801ac06:	b2a4      	uxth	r4, r4
 801ac08:	4d08      	ldr	r5, [pc, #32]	@ (801ac2c <nema_raster_rect+0x4c>)
 801ac0a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801ac0e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 801ac12:	4a07      	ldr	r2, [pc, #28]	@ (801ac30 <nema_raster_rect+0x50>)
 801ac14:	6044      	str	r4, [r0, #4]
 801ac16:	60c3      	str	r3, [r0, #12]
 801ac18:	f8c0 c000 	str.w	ip, [r0]
 801ac1c:	6081      	str	r1, [r0, #8]
 801ac1e:	6105      	str	r5, [r0, #16]
 801ac20:	6913      	ldr	r3, [r2, #16]
 801ac22:	f043 0302 	orr.w	r3, r3, #2
 801ac26:	6143      	str	r3, [r0, #20]
 801ac28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac2a:	bf00      	nop
 801ac2c:	ff000100 	.word	0xff000100
 801ac30:	20000024 	.word	0x20000024

0801ac34 <nema_raster_quad_fx>:
 801ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac38:	4607      	mov	r7, r0
 801ac3a:	2009      	movs	r0, #9
 801ac3c:	460e      	mov	r6, r1
 801ac3e:	4615      	mov	r5, r2
 801ac40:	461c      	mov	r4, r3
 801ac42:	f000 fbbb 	bl	801b3bc <nema_cl_get_space>
 801ac46:	2800      	cmp	r0, #0
 801ac48:	d02f      	beq.n	801acaa <nema_raster_quad_fx+0x76>
 801ac4a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 801ac4e:	f44f 7292 	mov.w	r2, #292	@ 0x124
 801ac52:	f44f 7a90 	mov.w	sl, #288	@ 0x120
 801ac56:	f44f 799a 	mov.w	r9, #308	@ 0x134
 801ac5a:	f44f 78a0 	mov.w	r8, #320	@ 0x140
 801ac5e:	f44f 7ea2 	mov.w	lr, #324	@ 0x144
 801ac62:	f44f 7ca8 	mov.w	ip, #336	@ 0x150
 801ac66:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 801ac6a:	6103      	str	r3, [r0, #16]
 801ac6c:	4b10      	ldr	r3, [pc, #64]	@ (801acb0 <nema_raster_quad_fx+0x7c>)
 801ac6e:	6047      	str	r7, [r0, #4]
 801ac70:	60c6      	str	r6, [r0, #12]
 801ac72:	f8c0 a000 	str.w	sl, [r0]
 801ac76:	6082      	str	r2, [r0, #8]
 801ac78:	691a      	ldr	r2, [r3, #16]
 801ac7a:	9b08      	ldr	r3, [sp, #32]
 801ac7c:	f042 0205 	orr.w	r2, r2, #5
 801ac80:	6243      	str	r3, [r0, #36]	@ 0x24
 801ac82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac84:	6145      	str	r5, [r0, #20]
 801ac86:	62c3      	str	r3, [r0, #44]	@ 0x2c
 801ac88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ac8a:	61c4      	str	r4, [r0, #28]
 801ac8c:	6343      	str	r3, [r0, #52]	@ 0x34
 801ac8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac90:	6442      	str	r2, [r0, #68]	@ 0x44
 801ac92:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801ac94:	4b07      	ldr	r3, [pc, #28]	@ (801acb4 <nema_raster_quad_fx+0x80>)
 801ac96:	f8c0 9018 	str.w	r9, [r0, #24]
 801ac9a:	f8c0 8020 	str.w	r8, [r0, #32]
 801ac9e:	f8c0 e028 	str.w	lr, [r0, #40]	@ 0x28
 801aca2:	f8c0 c030 	str.w	ip, [r0, #48]	@ 0x30
 801aca6:	6381      	str	r1, [r0, #56]	@ 0x38
 801aca8:	6403      	str	r3, [r0, #64]	@ 0x40
 801acaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acae:	bf00      	nop
 801acb0:	20000024 	.word	0x20000024
 801acb4:	ff000100 	.word	0xff000100

0801acb8 <nema_set_interrupt_ctrl>:
 801acb8:	4601      	mov	r1, r0
 801acba:	20f8      	movs	r0, #248	@ 0xf8
 801acbc:	f000 bbda 	b.w	801b474 <nema_cl_add_cmd>

0801acc0 <tsi_malloc_init_pool_aligned>:
 801acc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acc4:	2807      	cmp	r0, #7
 801acc6:	e9dd e706 	ldrd	lr, r7, [sp, #24]
 801acca:	d845      	bhi.n	801ad58 <tsi_malloc_init_pool_aligned+0x98>
 801accc:	2f0f      	cmp	r7, #15
 801acce:	dd36      	ble.n	801ad3e <tsi_malloc_init_pool_aligned+0x7e>
 801acd0:	07bc      	lsls	r4, r7, #30
 801acd2:	463e      	mov	r6, r7
 801acd4:	d043      	beq.n	801ad5e <tsi_malloc_init_pool_aligned+0x9e>
 801acd6:	f027 0703 	bic.w	r7, r7, #3
 801acda:	3704      	adds	r7, #4
 801acdc:	f107 0c0b 	add.w	ip, r7, #11
 801ace0:	fb9c fcf7 	sdiv	ip, ip, r7
 801ace4:	463e      	mov	r6, r7
 801ace6:	fb07 fc0c 	mul.w	ip, r7, ip
 801acea:	fbb1 f4f6 	udiv	r4, r1, r6
 801acee:	fb06 1514 	mls	r5, r6, r4, r1
 801acf2:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 801ad74 <tsi_malloc_init_pool_aligned+0xb4>
 801acf6:	f8c8 c000 	str.w	ip, [r8]
 801acfa:	b32d      	cbz	r5, 801ad48 <tsi_malloc_init_pool_aligned+0x88>
 801acfc:	fb04 6406 	mla	r4, r4, r6, r6
 801ad00:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 801ad04:	4819      	ldr	r0, [pc, #100]	@ (801ad6c <tsi_malloc_init_pool_aligned+0xac>)
 801ad06:	00ed      	lsls	r5, r5, #3
 801ad08:	1946      	adds	r6, r0, r5
 801ad0a:	5142      	str	r2, [r0, r5]
 801ad0c:	18ca      	adds	r2, r1, r3
 801ad0e:	60f4      	str	r4, [r6, #12]
 801ad10:	6071      	str	r1, [r6, #4]
 801ad12:	e9c6 3704 	strd	r3, r7, [r6, #16]
 801ad16:	60b2      	str	r2, [r6, #8]
 801ad18:	f1be 0f00 	cmp.w	lr, #0
 801ad1c:	d016      	beq.n	801ad4c <tsi_malloc_init_pool_aligned+0x8c>
 801ad1e:	b1c4      	cbz	r4, 801ad52 <tsi_malloc_init_pool_aligned+0x92>
 801ad20:	2200      	movs	r2, #0
 801ad22:	4610      	mov	r0, r2
 801ad24:	4d12      	ldr	r5, [pc, #72]	@ (801ad70 <tsi_malloc_init_pool_aligned+0xb0>)
 801ad26:	eba3 034c 	sub.w	r3, r3, ip, lsl #1
 801ad2a:	eb0c 0104 	add.w	r1, ip, r4
 801ad2e:	e884 1024 	stmia.w	r4, {r2, r5, ip}
 801ad32:	f84c 3004 	str.w	r3, [ip, r4]
 801ad36:	e9c1 5201 	strd	r5, r2, [r1, #4]
 801ad3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad3e:	f04f 0c10 	mov.w	ip, #16
 801ad42:	4666      	mov	r6, ip
 801ad44:	4667      	mov	r7, ip
 801ad46:	e7d0      	b.n	801acea <tsi_malloc_init_pool_aligned+0x2a>
 801ad48:	460c      	mov	r4, r1
 801ad4a:	e7d9      	b.n	801ad00 <tsi_malloc_init_pool_aligned+0x40>
 801ad4c:	4670      	mov	r0, lr
 801ad4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad52:	4620      	mov	r0, r4
 801ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad58:	f04f 30ff 	mov.w	r0, #4294967295
 801ad5c:	e7ed      	b.n	801ad3a <tsi_malloc_init_pool_aligned+0x7a>
 801ad5e:	f107 0c0b 	add.w	ip, r7, #11
 801ad62:	fb9c fcf7 	sdiv	ip, ip, r7
 801ad66:	fb07 fc0c 	mul.w	ip, r7, ip
 801ad6a:	e7be      	b.n	801acea <tsi_malloc_init_pool_aligned+0x2a>
 801ad6c:	2015a11c 	.word	0x2015a11c
 801ad70:	000f1fa1 	.word	0x000f1fa1
 801ad74:	200000f4 	.word	0x200000f4

0801ad78 <tsi_malloc_pool>:
 801ad78:	2807      	cmp	r0, #7
 801ad7a:	d850      	bhi.n	801ae1e <tsi_malloc_pool+0xa6>
 801ad7c:	b4f0      	push	{r4, r5, r6, r7}
 801ad7e:	4b29      	ldr	r3, [pc, #164]	@ (801ae24 <tsi_malloc_pool+0xac>)
 801ad80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ad84:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801ad88:	68c4      	ldr	r4, [r0, #12]
 801ad8a:	2c00      	cmp	r4, #0
 801ad8c:	d03e      	beq.n	801ae0c <tsi_malloc_pool+0x94>
 801ad8e:	6947      	ldr	r7, [r0, #20]
 801ad90:	4b25      	ldr	r3, [pc, #148]	@ (801ae28 <tsi_malloc_pool+0xb0>)
 801ad92:	f107 000b 	add.w	r0, r7, #11
 801ad96:	fb90 f0f7 	sdiv	r0, r0, r7
 801ad9a:	fb07 f000 	mul.w	r0, r7, r0
 801ad9e:	1e7d      	subs	r5, r7, #1
 801ada0:	4281      	cmp	r1, r0
 801ada2:	bfac      	ite	ge
 801ada4:	186d      	addge	r5, r5, r1
 801ada6:	182d      	addlt	r5, r5, r0
 801ada8:	fb95 f5f7 	sdiv	r5, r5, r7
 801adac:	fb07 f505 	mul.w	r5, r7, r5
 801adb0:	6821      	ldr	r1, [r4, #0]
 801adb2:	6018      	str	r0, [r3, #0]
 801adb4:	428d      	cmp	r5, r1
 801adb6:	dd2f      	ble.n	801ae18 <tsi_malloc_pool+0xa0>
 801adb8:	68a3      	ldr	r3, [r4, #8]
 801adba:	b33b      	cbz	r3, 801ae0c <tsi_malloc_pool+0x94>
 801adbc:	4626      	mov	r6, r4
 801adbe:	e002      	b.n	801adc6 <tsi_malloc_pool+0x4e>
 801adc0:	6893      	ldr	r3, [r2, #8]
 801adc2:	4616      	mov	r6, r2
 801adc4:	b313      	cbz	r3, 801ae0c <tsi_malloc_pool+0x94>
 801adc6:	58e1      	ldr	r1, [r4, r3]
 801adc8:	18e2      	adds	r2, r4, r3
 801adca:	42a9      	cmp	r1, r5
 801adcc:	dbf8      	blt.n	801adc0 <tsi_malloc_pool+0x48>
 801adce:	1943      	adds	r3, r0, r5
 801add0:	428b      	cmp	r3, r1
 801add2:	da1e      	bge.n	801ae12 <tsi_malloc_pool+0x9a>
 801add4:	1ac9      	subs	r1, r1, r3
 801add6:	f8df c058 	ldr.w	ip, [pc, #88]	@ 801ae30 <tsi_malloc_pool+0xb8>
 801adda:	5099      	str	r1, [r3, r2]
 801addc:	4413      	add	r3, r2
 801adde:	f8c3 c004 	str.w	ip, [r3, #4]
 801ade2:	6891      	ldr	r1, [r2, #8]
 801ade4:	2f00      	cmp	r7, #0
 801ade6:	6099      	str	r1, [r3, #8]
 801ade8:	dd08      	ble.n	801adfc <tsi_malloc_pool+0x84>
 801adea:	fbb3 f1f7 	udiv	r1, r3, r7
 801adee:	fb07 3c11 	mls	ip, r7, r1, r3
 801adf2:	f1bc 0f00 	cmp.w	ip, #0
 801adf6:	d001      	beq.n	801adfc <tsi_malloc_pool+0x84>
 801adf8:	fb01 7307 	mla	r3, r1, r7, r7
 801adfc:	1b1b      	subs	r3, r3, r4
 801adfe:	60b3      	str	r3, [r6, #8]
 801ae00:	6015      	str	r5, [r2, #0]
 801ae02:	4b0a      	ldr	r3, [pc, #40]	@ (801ae2c <tsi_malloc_pool+0xb4>)
 801ae04:	4410      	add	r0, r2
 801ae06:	6053      	str	r3, [r2, #4]
 801ae08:	bcf0      	pop	{r4, r5, r6, r7}
 801ae0a:	4770      	bx	lr
 801ae0c:	2000      	movs	r0, #0
 801ae0e:	bcf0      	pop	{r4, r5, r6, r7}
 801ae10:	4770      	bx	lr
 801ae12:	6893      	ldr	r3, [r2, #8]
 801ae14:	60b3      	str	r3, [r6, #8]
 801ae16:	e7f4      	b.n	801ae02 <tsi_malloc_pool+0x8a>
 801ae18:	4626      	mov	r6, r4
 801ae1a:	4622      	mov	r2, r4
 801ae1c:	e7d7      	b.n	801adce <tsi_malloc_pool+0x56>
 801ae1e:	2000      	movs	r0, #0
 801ae20:	4770      	bx	lr
 801ae22:	bf00      	nop
 801ae24:	2015a11c 	.word	0x2015a11c
 801ae28:	200000f4 	.word	0x200000f4
 801ae2c:	000f1fa2 	.word	0x000f1fa2
 801ae30:	000f1fa1 	.word	0x000f1fa1

0801ae34 <tsi_free>:
 801ae34:	2800      	cmp	r0, #0
 801ae36:	d044      	beq.n	801aec2 <tsi_free+0x8e>
 801ae38:	4b6f      	ldr	r3, [pc, #444]	@ (801aff8 <tsi_free+0x1c4>)
 801ae3a:	68da      	ldr	r2, [r3, #12]
 801ae3c:	b12a      	cbz	r2, 801ae4a <tsi_free+0x16>
 801ae3e:	6859      	ldr	r1, [r3, #4]
 801ae40:	4288      	cmp	r0, r1
 801ae42:	d302      	bcc.n	801ae4a <tsi_free+0x16>
 801ae44:	6899      	ldr	r1, [r3, #8]
 801ae46:	4288      	cmp	r0, r1
 801ae48:	d342      	bcc.n	801aed0 <tsi_free+0x9c>
 801ae4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801ae4c:	b12a      	cbz	r2, 801ae5a <tsi_free+0x26>
 801ae4e:	69d9      	ldr	r1, [r3, #28]
 801ae50:	4288      	cmp	r0, r1
 801ae52:	d302      	bcc.n	801ae5a <tsi_free+0x26>
 801ae54:	6a19      	ldr	r1, [r3, #32]
 801ae56:	4288      	cmp	r0, r1
 801ae58:	d352      	bcc.n	801af00 <tsi_free+0xcc>
 801ae5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ae5c:	b12a      	cbz	r2, 801ae6a <tsi_free+0x36>
 801ae5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801ae60:	4288      	cmp	r0, r1
 801ae62:	d302      	bcc.n	801ae6a <tsi_free+0x36>
 801ae64:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801ae66:	4288      	cmp	r0, r1
 801ae68:	d34c      	bcc.n	801af04 <tsi_free+0xd0>
 801ae6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ae6c:	b12a      	cbz	r2, 801ae7a <tsi_free+0x46>
 801ae6e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801ae70:	4281      	cmp	r1, r0
 801ae72:	d802      	bhi.n	801ae7a <tsi_free+0x46>
 801ae74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801ae76:	4281      	cmp	r1, r0
 801ae78:	d846      	bhi.n	801af08 <tsi_free+0xd4>
 801ae7a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801ae7c:	b12a      	cbz	r2, 801ae8a <tsi_free+0x56>
 801ae7e:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 801ae80:	4288      	cmp	r0, r1
 801ae82:	d302      	bcc.n	801ae8a <tsi_free+0x56>
 801ae84:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 801ae86:	4281      	cmp	r1, r0
 801ae88:	d840      	bhi.n	801af0c <tsi_free+0xd8>
 801ae8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801ae8e:	b132      	cbz	r2, 801ae9e <tsi_free+0x6a>
 801ae90:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 801ae92:	4281      	cmp	r1, r0
 801ae94:	d803      	bhi.n	801ae9e <tsi_free+0x6a>
 801ae96:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 801ae9a:	4288      	cmp	r0, r1
 801ae9c:	d338      	bcc.n	801af10 <tsi_free+0xdc>
 801ae9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 801aea2:	b13a      	cbz	r2, 801aeb4 <tsi_free+0x80>
 801aea4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801aea8:	4288      	cmp	r0, r1
 801aeaa:	d303      	bcc.n	801aeb4 <tsi_free+0x80>
 801aeac:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 801aeb0:	4288      	cmp	r0, r1
 801aeb2:	d32f      	bcc.n	801af14 <tsi_free+0xe0>
 801aeb4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 801aeb8:	b11a      	cbz	r2, 801aec2 <tsi_free+0x8e>
 801aeba:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
 801aebe:	4281      	cmp	r1, r0
 801aec0:	d900      	bls.n	801aec4 <tsi_free+0x90>
 801aec2:	4770      	bx	lr
 801aec4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 801aec8:	4281      	cmp	r1, r0
 801aeca:	d9fa      	bls.n	801aec2 <tsi_free+0x8e>
 801aecc:	2107      	movs	r1, #7
 801aece:	e000      	b.n	801aed2 <tsi_free+0x9e>
 801aed0:	2100      	movs	r1, #0
 801aed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aed6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aeda:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801aede:	695e      	ldr	r6, [r3, #20]
 801aee0:	4b46      	ldr	r3, [pc, #280]	@ (801affc <tsi_free+0x1c8>)
 801aee2:	f106 010b 	add.w	r1, r6, #11
 801aee6:	fb91 f1f6 	sdiv	r1, r1, r6
 801aeea:	fb06 f101 	mul.w	r1, r6, r1
 801aeee:	1a45      	subs	r5, r0, r1
 801aef0:	686c      	ldr	r4, [r5, #4]
 801aef2:	4f43      	ldr	r7, [pc, #268]	@ (801b000 <tsi_free+0x1cc>)
 801aef4:	429c      	cmp	r4, r3
 801aef6:	6039      	str	r1, [r7, #0]
 801aef8:	46a8      	mov	r8, r5
 801aefa:	d00d      	beq.n	801af18 <tsi_free+0xe4>
 801aefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af00:	2101      	movs	r1, #1
 801af02:	e7e6      	b.n	801aed2 <tsi_free+0x9e>
 801af04:	2102      	movs	r1, #2
 801af06:	e7e4      	b.n	801aed2 <tsi_free+0x9e>
 801af08:	2103      	movs	r1, #3
 801af0a:	e7e2      	b.n	801aed2 <tsi_free+0x9e>
 801af0c:	2104      	movs	r1, #4
 801af0e:	e7e0      	b.n	801aed2 <tsi_free+0x9e>
 801af10:	2105      	movs	r1, #5
 801af12:	e7de      	b.n	801aed2 <tsi_free+0x9e>
 801af14:	2106      	movs	r1, #6
 801af16:	e7dc      	b.n	801aed2 <tsi_free+0x9e>
 801af18:	4b3a      	ldr	r3, [pc, #232]	@ (801b004 <tsi_free+0x1d0>)
 801af1a:	606b      	str	r3, [r5, #4]
 801af1c:	6894      	ldr	r4, [r2, #8]
 801af1e:	18a3      	adds	r3, r4, r2
 801af20:	429d      	cmp	r5, r3
 801af22:	d95e      	bls.n	801afe2 <tsi_free+0x1ae>
 801af24:	b90c      	cbnz	r4, 801af2a <tsi_free+0xf6>
 801af26:	e05c      	b.n	801afe2 <tsi_free+0x1ae>
 801af28:	b12c      	cbz	r4, 801af36 <tsi_free+0x102>
 801af2a:	689c      	ldr	r4, [r3, #8]
 801af2c:	469c      	mov	ip, r3
 801af2e:	469e      	mov	lr, r3
 801af30:	1913      	adds	r3, r2, r4
 801af32:	429d      	cmp	r5, r3
 801af34:	d8f8      	bhi.n	801af28 <tsi_free+0xf4>
 801af36:	682f      	ldr	r7, [r5, #0]
 801af38:	4594      	cmp	ip, r2
 801af3a:	4438      	add	r0, r7
 801af3c:	d04d      	beq.n	801afda <tsi_free+0x1a6>
 801af3e:	f8dc 7000 	ldr.w	r7, [ip]
 801af42:	eb01 040c 	add.w	r4, r1, ip
 801af46:	443c      	add	r4, r7
 801af48:	1b64      	subs	r4, r4, r5
 801af4a:	fab4 f484 	clz	r4, r4
 801af4e:	0964      	lsrs	r4, r4, #5
 801af50:	2e00      	cmp	r6, #0
 801af52:	dd32      	ble.n	801afba <tsi_free+0x186>
 801af54:	fbb5 f7f6 	udiv	r7, r5, r6
 801af58:	fb06 5c17 	mls	ip, r6, r7, r5
 801af5c:	f1bc 0f00 	cmp.w	ip, #0
 801af60:	d001      	beq.n	801af66 <tsi_free+0x132>
 801af62:	fb07 6506 	mla	r5, r7, r6, r6
 801af66:	fbb3 f7f6 	udiv	r7, r3, r6
 801af6a:	fb06 3c17 	mls	ip, r6, r7, r3
 801af6e:	1aad      	subs	r5, r5, r2
 801af70:	f8ce 5008 	str.w	r5, [lr, #8]
 801af74:	f1bc 0f00 	cmp.w	ip, #0
 801af78:	d01d      	beq.n	801afb6 <tsi_free+0x182>
 801af7a:	fb07 6606 	mla	r6, r7, r6, r6
 801af7e:	1ab2      	subs	r2, r6, r2
 801af80:	f8c8 2008 	str.w	r2, [r8, #8]
 801af84:	b154      	cbz	r4, 801af9c <tsi_free+0x168>
 801af86:	f8d8 5000 	ldr.w	r5, [r8]
 801af8a:	46f0      	mov	r8, lr
 801af8c:	f8de 4000 	ldr.w	r4, [lr]
 801af90:	440d      	add	r5, r1
 801af92:	442c      	add	r4, r5
 801af94:	f8ce 4000 	str.w	r4, [lr]
 801af98:	f8ce 2008 	str.w	r2, [lr, #8]
 801af9c:	4283      	cmp	r3, r0
 801af9e:	d1ad      	bne.n	801aefc <tsi_free+0xc8>
 801afa0:	6818      	ldr	r0, [r3, #0]
 801afa2:	f8d8 2000 	ldr.w	r2, [r8]
 801afa6:	4401      	add	r1, r0
 801afa8:	440a      	add	r2, r1
 801afaa:	f8c8 2000 	str.w	r2, [r8]
 801afae:	689b      	ldr	r3, [r3, #8]
 801afb0:	f8c8 3008 	str.w	r3, [r8, #8]
 801afb4:	e7a2      	b.n	801aefc <tsi_free+0xc8>
 801afb6:	461e      	mov	r6, r3
 801afb8:	e7e1      	b.n	801af7e <tsi_free+0x14a>
 801afba:	1aae      	subs	r6, r5, r2
 801afbc:	1a9a      	subs	r2, r3, r2
 801afbe:	f8ce 6008 	str.w	r6, [lr, #8]
 801afc2:	60aa      	str	r2, [r5, #8]
 801afc4:	2c00      	cmp	r4, #0
 801afc6:	d0e9      	beq.n	801af9c <tsi_free+0x168>
 801afc8:	682d      	ldr	r5, [r5, #0]
 801afca:	f8de 4000 	ldr.w	r4, [lr]
 801afce:	440d      	add	r5, r1
 801afd0:	442c      	add	r4, r5
 801afd2:	f8ce 4000 	str.w	r4, [lr]
 801afd6:	46f0      	mov	r8, lr
 801afd8:	e7de      	b.n	801af98 <tsi_free+0x164>
 801afda:	2e00      	cmp	r6, #0
 801afdc:	dd06      	ble.n	801afec <tsi_free+0x1b8>
 801afde:	2400      	movs	r4, #0
 801afe0:	e7b8      	b.n	801af54 <tsi_free+0x120>
 801afe2:	682c      	ldr	r4, [r5, #0]
 801afe4:	4696      	mov	lr, r2
 801afe6:	4420      	add	r0, r4
 801afe8:	2400      	movs	r4, #0
 801afea:	e7b1      	b.n	801af50 <tsi_free+0x11c>
 801afec:	eba5 020c 	sub.w	r2, r5, ip
 801aff0:	f8cc 2008 	str.w	r2, [ip, #8]
 801aff4:	60ac      	str	r4, [r5, #8]
 801aff6:	e7d1      	b.n	801af9c <tsi_free+0x168>
 801aff8:	2015a11c 	.word	0x2015a11c
 801affc:	000f1fa2 	.word	0x000f1fa2
 801b000:	200000f4 	.word	0x200000f4
 801b004:	000f1fa1 	.word	0x000f1fa1

0801b008 <nema_cl_create_sized>:
 801b008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b00a:	b093      	sub	sp, #76	@ 0x4c
 801b00c:	466d      	mov	r5, sp
 801b00e:	4606      	mov	r6, r0
 801b010:	460a      	mov	r2, r1
 801b012:	4628      	mov	r0, r5
 801b014:	2100      	movs	r1, #0
 801b016:	f7f9 f9d1 	bl	80143bc <nema_buffer_create_pool>
 801b01a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801b01e:	2500      	movs	r5, #0
 801b020:	ac04      	add	r4, sp, #16
 801b022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801b026:	4620      	mov	r0, r4
 801b028:	f7f9 f9d7 	bl	80143da <nema_buffer_map>
 801b02c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801b030:	ac08      	add	r4, sp, #32
 801b032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801b036:	2110      	movs	r1, #16
 801b038:	f04f 32ff 	mov.w	r2, #4294967295
 801b03c:	9b04      	ldr	r3, [sp, #16]
 801b03e:	950d      	str	r5, [sp, #52]	@ 0x34
 801b040:	e9cd 5510 	strd	r5, r5, [sp, #64]	@ 0x40
 801b044:	42ab      	cmp	r3, r5
 801b046:	4635      	mov	r5, r6
 801b048:	bfb8      	it	lt
 801b04a:	3307      	addlt	r3, #7
 801b04c:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 801b050:	10db      	asrs	r3, r3, #3
 801b052:	005b      	lsls	r3, r3, #1
 801b054:	930c      	str	r3, [sp, #48]	@ 0x30
 801b056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b05a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b05c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b05e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b062:	2700      	movs	r7, #0
 801b064:	e885 0003 	stmia.w	r5, {r0, r1}
 801b068:	4630      	mov	r0, r6
 801b06a:	61b7      	str	r7, [r6, #24]
 801b06c:	b013      	add	sp, #76	@ 0x4c
 801b06e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b070 <nema_extend_bound_cl>:
 801b070:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b072:	4d6e      	ldr	r5, [pc, #440]	@ (801b22c <nema_extend_bound_cl+0x1bc>)
 801b074:	b09f      	sub	sp, #124	@ 0x7c
 801b076:	682b      	ldr	r3, [r5, #0]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	f000 80c1 	beq.w	801b200 <nema_extend_bound_cl+0x190>
 801b07e:	4606      	mov	r6, r0
 801b080:	6998      	ldr	r0, [r3, #24]
 801b082:	0784      	lsls	r4, r0, #30
 801b084:	f140 80b6 	bpl.w	801b1f4 <nema_extend_bound_cl+0x184>
 801b088:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801b08c:	0680      	lsls	r0, r0, #26
 801b08e:	d44e      	bmi.n	801b12e <nema_extend_bound_cl+0xbe>
 801b090:	1a89      	subs	r1, r1, r2
 801b092:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801b096:	1049      	asrs	r1, r1, #1
 801b098:	2902      	cmp	r1, #2
 801b09a:	dd13      	ble.n	801b0c4 <nema_extend_bound_cl+0x54>
 801b09c:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 801b0a0:	2700      	movs	r7, #0
 801b0a2:	1e94      	subs	r4, r2, #2
 801b0a4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801b0a8:	1c91      	adds	r1, r2, #2
 801b0aa:	0092      	lsls	r2, r2, #2
 801b0ac:	6898      	ldr	r0, [r3, #8]
 801b0ae:	f840 c002 	str.w	ip, [r0, r2]
 801b0b2:	6898      	ldr	r0, [r3, #8]
 801b0b4:	4410      	add	r0, r2
 801b0b6:	6047      	str	r7, [r0, #4]
 801b0b8:	6159      	str	r1, [r3, #20]
 801b0ba:	3102      	adds	r1, #2
 801b0bc:	428c      	cmp	r4, r1
 801b0be:	f102 0208 	add.w	r2, r2, #8
 801b0c2:	d1f3      	bne.n	801b0ac <nema_extend_bound_cl+0x3c>
 801b0c4:	6a1c      	ldr	r4, [r3, #32]
 801b0c6:	2c00      	cmp	r4, #0
 801b0c8:	d050      	beq.n	801b16c <nema_extend_bound_cl+0xfc>
 801b0ca:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 801b0ce:	26f0      	movs	r6, #240	@ 0xf0
 801b0d0:	27f4      	movs	r7, #244	@ 0xf4
 801b0d2:	6898      	ldr	r0, [r3, #8]
 801b0d4:	f041 0104 	orr.w	r1, r1, #4
 801b0d8:	6199      	str	r1, [r3, #24]
 801b0da:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
 801b0de:	6899      	ldr	r1, [r3, #8]
 801b0e0:	68e6      	ldr	r6, [r4, #12]
 801b0e2:	0090      	lsls	r0, r2, #2
 801b0e4:	4401      	add	r1, r0
 801b0e6:	604e      	str	r6, [r1, #4]
 801b0e8:	6899      	ldr	r1, [r3, #8]
 801b0ea:	1c96      	adds	r6, r2, #2
 801b0ec:	4401      	add	r1, r0
 801b0ee:	615e      	str	r6, [r3, #20]
 801b0f0:	608f      	str	r7, [r1, #8]
 801b0f2:	6899      	ldr	r1, [r3, #8]
 801b0f4:	6926      	ldr	r6, [r4, #16]
 801b0f6:	4401      	add	r1, r0
 801b0f8:	1d17      	adds	r7, r2, #4
 801b0fa:	60ce      	str	r6, [r1, #12]
 801b0fc:	621c      	str	r4, [r3, #32]
 801b0fe:	615f      	str	r7, [r3, #20]
 801b100:	68e1      	ldr	r1, [r4, #12]
 801b102:	f011 0107 	ands.w	r1, r1, #7
 801b106:	d120      	bne.n	801b14a <nema_extend_bound_cl+0xda>
 801b108:	691e      	ldr	r6, [r3, #16]
 801b10a:	3205      	adds	r2, #5
 801b10c:	42b2      	cmp	r2, r6
 801b10e:	db23      	blt.n	801b158 <nema_extend_bound_cl+0xe8>
 801b110:	699a      	ldr	r2, [r3, #24]
 801b112:	f022 0220 	bic.w	r2, r2, #32
 801b116:	619a      	str	r2, [r3, #24]
 801b118:	69a3      	ldr	r3, [r4, #24]
 801b11a:	075a      	lsls	r2, r3, #29
 801b11c:	d503      	bpl.n	801b126 <nema_extend_bound_cl+0xb6>
 801b11e:	6a24      	ldr	r4, [r4, #32]
 801b120:	69a3      	ldr	r3, [r4, #24]
 801b122:	075b      	lsls	r3, r3, #29
 801b124:	d4fb      	bmi.n	801b11e <nema_extend_bound_cl+0xae>
 801b126:	2000      	movs	r0, #0
 801b128:	602c      	str	r4, [r5, #0]
 801b12a:	b01f      	add	sp, #124	@ 0x7c
 801b12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b12e:	2900      	cmp	r1, #0
 801b130:	bfb8      	it	lt
 801b132:	3103      	addlt	r1, #3
 801b134:	1089      	asrs	r1, r1, #2
 801b136:	0049      	lsls	r1, r1, #1
 801b138:	4291      	cmp	r1, r2
 801b13a:	bfcc      	ite	gt
 801b13c:	4610      	movgt	r0, r2
 801b13e:	1a50      	suble	r0, r2, r1
 801b140:	1a09      	subs	r1, r1, r0
 801b142:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801b146:	1049      	asrs	r1, r1, #1
 801b148:	e7a6      	b.n	801b098 <nema_extend_bound_cl+0x28>
 801b14a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801b14e:	f7fe fcbf 	bl	8019ad0 <nema_set_error>
 801b152:	2000      	movs	r0, #0
 801b154:	b01f      	add	sp, #124	@ 0x7c
 801b156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b158:	f44f 26a0 	mov.w	r6, #327680	@ 0x50000
 801b15c:	689a      	ldr	r2, [r3, #8]
 801b15e:	4410      	add	r0, r2
 801b160:	e9c0 6104 	strd	r6, r1, [r0, #16]
 801b164:	699a      	ldr	r2, [r3, #24]
 801b166:	f022 0208 	bic.w	r2, r2, #8
 801b16a:	e7d2      	b.n	801b112 <nema_extend_bound_cl+0xa2>
 801b16c:	2028      	movs	r0, #40	@ 0x28
 801b16e:	f7f9 f8e6 	bl	801433e <nema_host_malloc>
 801b172:	4604      	mov	r4, r0
 801b174:	2800      	cmp	r0, #0
 801b176:	d052      	beq.n	801b21e <nema_extend_bound_cl+0x1ae>
 801b178:	1cb1      	adds	r1, r6, #2
 801b17a:	00c9      	lsls	r1, r1, #3
 801b17c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b180:	dd1a      	ble.n	801b1b8 <nema_extend_bound_cl+0x148>
 801b182:	466e      	mov	r6, sp
 801b184:	4627      	mov	r7, r4
 801b186:	4668      	mov	r0, sp
 801b188:	f7ff ff3e 	bl	801b008 <nema_cl_create_sized>
 801b18c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b18e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b190:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b192:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b194:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b198:	e887 0003 	stmia.w	r7, {r0, r1}
 801b19c:	68a3      	ldr	r3, [r4, #8]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d034      	beq.n	801b20c <nema_extend_bound_cl+0x19c>
 801b1a2:	682b      	ldr	r3, [r5, #0]
 801b1a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b1a6:	2a00      	cmp	r2, #0
 801b1a8:	bf08      	it	eq
 801b1aa:	461a      	moveq	r2, r3
 801b1ac:	6262      	str	r2, [r4, #36]	@ 0x24
 801b1ae:	699a      	ldr	r2, [r3, #24]
 801b1b0:	f022 020c 	bic.w	r2, r2, #12
 801b1b4:	61a2      	str	r2, [r4, #24]
 801b1b6:	e788      	b.n	801b0ca <nema_extend_bound_cl+0x5a>
 801b1b8:	a80a      	add	r0, sp, #40	@ 0x28
 801b1ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801b1be:	f7ff ff23 	bl	801b008 <nema_cl_create_sized>
 801b1c2:	2302      	movs	r3, #2
 801b1c4:	46a4      	mov	ip, r4
 801b1c6:	9310      	str	r3, [sp, #64]	@ 0x40
 801b1c8:	ae0a      	add	r6, sp, #40	@ 0x28
 801b1ca:	af14      	add	r7, sp, #80	@ 0x50
 801b1cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b1ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b1d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b1d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b1d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b1d8:	ae14      	add	r6, sp, #80	@ 0x50
 801b1da:	e887 0003 	stmia.w	r7, {r0, r1}
 801b1de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b1e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b1e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801b1e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b1ea:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b1ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b1f2:	e7d3      	b.n	801b19c <nema_extend_bound_cl+0x12c>
 801b1f4:	2008      	movs	r0, #8
 801b1f6:	f7fe fc6b 	bl	8019ad0 <nema_set_error>
 801b1fa:	f04f 30ff 	mov.w	r0, #4294967295
 801b1fe:	e7a9      	b.n	801b154 <nema_extend_bound_cl+0xe4>
 801b200:	2080      	movs	r0, #128	@ 0x80
 801b202:	f7fe fc65 	bl	8019ad0 <nema_set_error>
 801b206:	f04f 30ff 	mov.w	r0, #4294967295
 801b20a:	e7a3      	b.n	801b154 <nema_extend_bound_cl+0xe4>
 801b20c:	2010      	movs	r0, #16
 801b20e:	f7fe fc5f 	bl	8019ad0 <nema_set_error>
 801b212:	4620      	mov	r0, r4
 801b214:	f7f9 f888 	bl	8014328 <nema_host_free>
 801b218:	f04f 30ff 	mov.w	r0, #4294967295
 801b21c:	e79a      	b.n	801b154 <nema_extend_bound_cl+0xe4>
 801b21e:	2010      	movs	r0, #16
 801b220:	f7fe fc56 	bl	8019ad0 <nema_set_error>
 801b224:	f04f 30ff 	mov.w	r0, #4294967295
 801b228:	e794      	b.n	801b154 <nema_extend_bound_cl+0xe4>
 801b22a:	bf00      	nop
 801b22c:	2015a1dc 	.word	0x2015a1dc

0801b230 <nema_cl_bind_circular>:
 801b230:	b358      	cbz	r0, 801b28a <nema_cl_bind_circular+0x5a>
 801b232:	68c3      	ldr	r3, [r0, #12]
 801b234:	f013 0207 	ands.w	r2, r3, #7
 801b238:	d117      	bne.n	801b26a <nema_cl_bind_circular+0x3a>
 801b23a:	b4f0      	push	{r4, r5, r6, r7}
 801b23c:	4c15      	ldr	r4, [pc, #84]	@ (801b294 <nema_cl_bind_circular+0x64>)
 801b23e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801b240:	6821      	ldr	r1, [r4, #0]
 801b242:	2b00      	cmp	r3, #0
 801b244:	bf08      	it	eq
 801b246:	4603      	moveq	r3, r0
 801b248:	b141      	cbz	r1, 801b25c <nema_cl_bind_circular+0x2c>
 801b24a:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
 801b24e:	1c46      	adds	r6, r0, #1
 801b250:	42ae      	cmp	r6, r5
 801b252:	db0e      	blt.n	801b272 <nema_cl_bind_circular+0x42>
 801b254:	698a      	ldr	r2, [r1, #24]
 801b256:	f022 0220 	bic.w	r2, r2, #32
 801b25a:	618a      	str	r2, [r1, #24]
 801b25c:	699a      	ldr	r2, [r3, #24]
 801b25e:	6023      	str	r3, [r4, #0]
 801b260:	f042 0220 	orr.w	r2, r2, #32
 801b264:	619a      	str	r2, [r3, #24]
 801b266:	bcf0      	pop	{r4, r5, r6, r7}
 801b268:	4770      	bx	lr
 801b26a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801b26e:	f7fe bc2f 	b.w	8019ad0 <nema_set_error>
 801b272:	f44f 27a0 	mov.w	r7, #327680	@ 0x50000
 801b276:	688d      	ldr	r5, [r1, #8]
 801b278:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801b27c:	f845 7020 	str.w	r7, [r5, r0, lsl #2]
 801b280:	6072      	str	r2, [r6, #4]
 801b282:	698a      	ldr	r2, [r1, #24]
 801b284:	f022 0208 	bic.w	r2, r2, #8
 801b288:	e7e5      	b.n	801b256 <nema_cl_bind_circular+0x26>
 801b28a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801b28e:	f7fe bc1f 	b.w	8019ad0 <nema_set_error>
 801b292:	bf00      	nop
 801b294:	2015a1dc 	.word	0x2015a1dc

0801b298 <nema_cl_unbind>:
 801b298:	4910      	ldr	r1, [pc, #64]	@ (801b2dc <nema_cl_unbind+0x44>)
 801b29a:	680b      	ldr	r3, [r1, #0]
 801b29c:	b1d3      	cbz	r3, 801b2d4 <nema_cl_unbind+0x3c>
 801b29e:	b430      	push	{r4, r5}
 801b2a0:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 801b2a4:	1c54      	adds	r4, r2, #1
 801b2a6:	4284      	cmp	r4, r0
 801b2a8:	db07      	blt.n	801b2ba <nema_cl_unbind+0x22>
 801b2aa:	699a      	ldr	r2, [r3, #24]
 801b2ac:	f022 0220 	bic.w	r2, r2, #32
 801b2b0:	619a      	str	r2, [r3, #24]
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	600b      	str	r3, [r1, #0]
 801b2b6:	bc30      	pop	{r4, r5}
 801b2b8:	4770      	bx	lr
 801b2ba:	f44f 25a0 	mov.w	r5, #327680	@ 0x50000
 801b2be:	2400      	movs	r4, #0
 801b2c0:	6898      	ldr	r0, [r3, #8]
 801b2c2:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
 801b2c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b2ca:	6054      	str	r4, [r2, #4]
 801b2cc:	699a      	ldr	r2, [r3, #24]
 801b2ce:	f022 0208 	bic.w	r2, r2, #8
 801b2d2:	e7eb      	b.n	801b2ac <nema_cl_unbind+0x14>
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	600b      	str	r3, [r1, #0]
 801b2d8:	4770      	bx	lr
 801b2da:	bf00      	nop
 801b2dc:	2015a1dc 	.word	0x2015a1dc

0801b2e0 <nema_cl_submit_no_irq>:
 801b2e0:	2800      	cmp	r0, #0
 801b2e2:	d052      	beq.n	801b38a <nema_cl_submit_no_irq+0xaa>
 801b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2e6:	6944      	ldr	r4, [r0, #20]
 801b2e8:	b1f4      	cbz	r4, 801b328 <nema_cl_submit_no_irq+0x48>
 801b2ea:	6983      	ldr	r3, [r0, #24]
 801b2ec:	4605      	mov	r5, r0
 801b2ee:	069a      	lsls	r2, r3, #26
 801b2f0:	d51b      	bpl.n	801b32a <nema_cl_submit_no_irq+0x4a>
 801b2f2:	6902      	ldr	r2, [r0, #16]
 801b2f4:	2a00      	cmp	r2, #0
 801b2f6:	bfb8      	it	lt
 801b2f8:	3203      	addlt	r2, #3
 801b2fa:	1092      	asrs	r2, r2, #2
 801b2fc:	0056      	lsls	r6, r2, #1
 801b2fe:	42b4      	cmp	r4, r6
 801b300:	da3d      	bge.n	801b37e <nema_cl_submit_no_irq+0x9e>
 801b302:	68c7      	ldr	r7, [r0, #12]
 801b304:	071b      	lsls	r3, r3, #28
 801b306:	d549      	bpl.n	801b39c <nema_cl_submit_no_irq+0xbc>
 801b308:	69e8      	ldr	r0, [r5, #28]
 801b30a:	2800      	cmp	r0, #0
 801b30c:	da41      	bge.n	801b392 <nema_cl_submit_no_irq+0xb2>
 801b30e:	f04f 33ff 	mov.w	r3, #4294967295
 801b312:	61eb      	str	r3, [r5, #28]
 801b314:	4621      	mov	r1, r4
 801b316:	4638      	mov	r0, r7
 801b318:	f7fe f9c6 	bl	80196a8 <nema_rb_submit_cmdlist2>
 801b31c:	696b      	ldr	r3, [r5, #20]
 801b31e:	61e8      	str	r0, [r5, #28]
 801b320:	42b3      	cmp	r3, r6
 801b322:	bfa8      	it	ge
 801b324:	2600      	movge	r6, #0
 801b326:	616e      	str	r6, [r5, #20]
 801b328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b32a:	4604      	mov	r4, r0
 801b32c:	f06f 4640 	mvn.w	r6, #3221225472	@ 0xc0000000
 801b330:	e012      	b.n	801b358 <nema_cl_submit_no_irq+0x78>
 801b332:	6923      	ldr	r3, [r4, #16]
 801b334:	6949      	ldr	r1, [r1, #20]
 801b336:	4433      	add	r3, r6
 801b338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801b33c:	69a3      	ldr	r3, [r4, #24]
 801b33e:	4620      	mov	r0, r4
 801b340:	f023 0308 	bic.w	r3, r3, #8
 801b344:	61a3      	str	r3, [r4, #24]
 801b346:	f7f9 f854 	bl	80143f2 <nema_buffer_flush>
 801b34a:	69a3      	ldr	r3, [r4, #24]
 801b34c:	f043 0308 	orr.w	r3, r3, #8
 801b350:	61a3      	str	r3, [r4, #24]
 801b352:	6a24      	ldr	r4, [r4, #32]
 801b354:	b134      	cbz	r4, 801b364 <nema_cl_submit_no_irq+0x84>
 801b356:	69a3      	ldr	r3, [r4, #24]
 801b358:	0758      	lsls	r0, r3, #29
 801b35a:	68a2      	ldr	r2, [r4, #8]
 801b35c:	6a21      	ldr	r1, [r4, #32]
 801b35e:	d4e8      	bmi.n	801b332 <nema_cl_submit_no_irq+0x52>
 801b360:	071b      	lsls	r3, r3, #28
 801b362:	d523      	bpl.n	801b3ac <nema_cl_submit_no_irq+0xcc>
 801b364:	2000      	movs	r0, #0
 801b366:	f7f9 f84e 	bl	8014406 <nema_mutex_lock>
 801b36a:	6969      	ldr	r1, [r5, #20]
 801b36c:	4628      	mov	r0, r5
 801b36e:	f7fe fa1f 	bl	80197b0 <nema_rb_submit_cmdlist>
 801b372:	61e8      	str	r0, [r5, #28]
 801b374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b378:	2000      	movs	r0, #0
 801b37a:	f7f9 b851 	b.w	8014420 <nema_mutex_unlock>
 801b37e:	d0d3      	beq.n	801b328 <nema_cl_submit_no_irq+0x48>
 801b380:	68c7      	ldr	r7, [r0, #12]
 801b382:	1ba4      	subs	r4, r4, r6
 801b384:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
 801b388:	e7bc      	b.n	801b304 <nema_cl_submit_no_irq+0x24>
 801b38a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801b38e:	f7fe bb9f 	b.w	8019ad0 <nema_set_error>
 801b392:	f7f8 ffb5 	bl	8014300 <nema_wait_irq_cl>
 801b396:	2800      	cmp	r0, #0
 801b398:	dab9      	bge.n	801b30e <nema_cl_submit_no_irq+0x2e>
 801b39a:	e7bb      	b.n	801b314 <nema_cl_submit_no_irq+0x34>
 801b39c:	4628      	mov	r0, r5
 801b39e:	f7f9 f828 	bl	80143f2 <nema_buffer_flush>
 801b3a2:	69ab      	ldr	r3, [r5, #24]
 801b3a4:	f043 0308 	orr.w	r3, r3, #8
 801b3a8:	61ab      	str	r3, [r5, #24]
 801b3aa:	e7ad      	b.n	801b308 <nema_cl_submit_no_irq+0x28>
 801b3ac:	4620      	mov	r0, r4
 801b3ae:	f7f9 f820 	bl	80143f2 <nema_buffer_flush>
 801b3b2:	69a3      	ldr	r3, [r4, #24]
 801b3b4:	f043 0308 	orr.w	r3, r3, #8
 801b3b8:	61a3      	str	r3, [r4, #24]
 801b3ba:	e7d3      	b.n	801b364 <nema_cl_submit_no_irq+0x84>

0801b3bc <nema_cl_get_space>:
 801b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3be:	4e2c      	ldr	r6, [pc, #176]	@ (801b470 <nema_cl_get_space+0xb4>)
 801b3c0:	6834      	ldr	r4, [r6, #0]
 801b3c2:	2c00      	cmp	r4, #0
 801b3c4:	d04d      	beq.n	801b462 <nema_cl_get_space+0xa6>
 801b3c6:	69a7      	ldr	r7, [r4, #24]
 801b3c8:	4605      	mov	r5, r0
 801b3ca:	f027 0108 	bic.w	r1, r7, #8
 801b3ce:	f017 0720 	ands.w	r7, r7, #32
 801b3d2:	61a1      	str	r1, [r4, #24]
 801b3d4:	6923      	ldr	r3, [r4, #16]
 801b3d6:	6961      	ldr	r1, [r4, #20]
 801b3d8:	d016      	beq.n	801b408 <nema_cl_get_space+0x4c>
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	bfb8      	it	lt
 801b3de:	3303      	addlt	r3, #3
 801b3e0:	109b      	asrs	r3, r3, #2
 801b3e2:	005b      	lsls	r3, r3, #1
 801b3e4:	4299      	cmp	r1, r3
 801b3e6:	bfb4      	ite	lt
 801b3e8:	460a      	movlt	r2, r1
 801b3ea:	1aca      	subge	r2, r1, r3
 801b3ec:	1a9a      	subs	r2, r3, r2
 801b3ee:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801b3f2:	3001      	adds	r0, #1
 801b3f4:	ebb0 0f62 	cmp.w	r0, r2, asr #1
 801b3f8:	da1a      	bge.n	801b430 <nema_cl_get_space+0x74>
 801b3fa:	68a0      	ldr	r0, [r4, #8]
 801b3fc:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801b400:	6165      	str	r5, [r4, #20]
 801b402:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801b406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b408:	1a5b      	subs	r3, r3, r1
 801b40a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801b40e:	105b      	asrs	r3, r3, #1
 801b410:	3b01      	subs	r3, #1
 801b412:	4283      	cmp	r3, r0
 801b414:	dcf1      	bgt.n	801b3fa <nema_cl_get_space+0x3e>
 801b416:	f7ff fe2b 	bl	801b070 <nema_extend_bound_cl>
 801b41a:	2800      	cmp	r0, #0
 801b41c:	db26      	blt.n	801b46c <nema_cl_get_space+0xb0>
 801b41e:	6834      	ldr	r4, [r6, #0]
 801b420:	6961      	ldr	r1, [r4, #20]
 801b422:	68a0      	ldr	r0, [r4, #8]
 801b424:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801b428:	6165      	str	r5, [r4, #20]
 801b42a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801b42e:	e7ea      	b.n	801b406 <nema_cl_get_space+0x4a>
 801b430:	2900      	cmp	r1, #0
 801b432:	d0e2      	beq.n	801b3fa <nema_cl_get_space+0x3e>
 801b434:	4299      	cmp	r1, r3
 801b436:	d0e0      	beq.n	801b3fa <nema_cl_get_space+0x3e>
 801b438:	4620      	mov	r0, r4
 801b43a:	f7ff ff51 	bl	801b2e0 <nema_cl_submit_no_irq>
 801b43e:	69e0      	ldr	r0, [r4, #28]
 801b440:	f7fe fa82 	bl	8019948 <nema_rb_submit_cl_id>
 801b444:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801b448:	69e0      	ldr	r0, [r4, #28]
 801b44a:	4298      	cmp	r0, r3
 801b44c:	d1e7      	bne.n	801b41e <nema_cl_get_space+0x62>
 801b44e:	f7f8 ff57 	bl	8014300 <nema_wait_irq_cl>
 801b452:	2800      	cmp	r0, #0
 801b454:	dbe3      	blt.n	801b41e <nema_cl_get_space+0x62>
 801b456:	f04f 33ff 	mov.w	r3, #4294967295
 801b45a:	61e3      	str	r3, [r4, #28]
 801b45c:	6834      	ldr	r4, [r6, #0]
 801b45e:	6961      	ldr	r1, [r4, #20]
 801b460:	e7cb      	b.n	801b3fa <nema_cl_get_space+0x3e>
 801b462:	2080      	movs	r0, #128	@ 0x80
 801b464:	f7fe fb34 	bl	8019ad0 <nema_set_error>
 801b468:	4620      	mov	r0, r4
 801b46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b46c:	4638      	mov	r0, r7
 801b46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b470:	2015a1dc 	.word	0x2015a1dc

0801b474 <nema_cl_add_cmd>:
 801b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b478:	4e2e      	ldr	r6, [pc, #184]	@ (801b534 <nema_cl_add_cmd+0xc0>)
 801b47a:	4680      	mov	r8, r0
 801b47c:	6834      	ldr	r4, [r6, #0]
 801b47e:	460f      	mov	r7, r1
 801b480:	b35c      	cbz	r4, 801b4da <nema_cl_add_cmd+0x66>
 801b482:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
 801b486:	f025 0308 	bic.w	r3, r5, #8
 801b48a:	f015 0020 	ands.w	r0, r5, #32
 801b48e:	61a3      	str	r3, [r4, #24]
 801b490:	6923      	ldr	r3, [r4, #16]
 801b492:	d016      	beq.n	801b4c2 <nema_cl_add_cmd+0x4e>
 801b494:	2b00      	cmp	r3, #0
 801b496:	bfb8      	it	lt
 801b498:	3303      	addlt	r3, #3
 801b49a:	109b      	asrs	r3, r3, #2
 801b49c:	005b      	lsls	r3, r3, #1
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	bfb4      	ite	lt
 801b4a2:	4611      	movlt	r1, r2
 801b4a4:	1ad1      	subge	r1, r2, r3
 801b4a6:	1a59      	subs	r1, r3, r1
 801b4a8:	2903      	cmp	r1, #3
 801b4aa:	dd2a      	ble.n	801b502 <nema_cl_add_cmd+0x8e>
 801b4ac:	1c51      	adds	r1, r2, #1
 801b4ae:	68a0      	ldr	r0, [r4, #8]
 801b4b0:	1c93      	adds	r3, r2, #2
 801b4b2:	f840 8022 	str.w	r8, [r0, r2, lsl #2]
 801b4b6:	68a2      	ldr	r2, [r4, #8]
 801b4b8:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
 801b4bc:	6163      	str	r3, [r4, #20]
 801b4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4c2:	07a9      	lsls	r1, r5, #30
 801b4c4:	d515      	bpl.n	801b4f2 <nema_cl_add_cmd+0x7e>
 801b4c6:	1d11      	adds	r1, r2, #4
 801b4c8:	4299      	cmp	r1, r3
 801b4ca:	dbef      	blt.n	801b4ac <nema_cl_add_cmd+0x38>
 801b4cc:	f7ff fdd0 	bl	801b070 <nema_extend_bound_cl>
 801b4d0:	2800      	cmp	r0, #0
 801b4d2:	dbf4      	blt.n	801b4be <nema_cl_add_cmd+0x4a>
 801b4d4:	6834      	ldr	r4, [r6, #0]
 801b4d6:	6962      	ldr	r2, [r4, #20]
 801b4d8:	e7e8      	b.n	801b4ac <nema_cl_add_cmd+0x38>
 801b4da:	4620      	mov	r0, r4
 801b4dc:	f7f8 ff93 	bl	8014406 <nema_mutex_lock>
 801b4e0:	4640      	mov	r0, r8
 801b4e2:	4639      	mov	r1, r7
 801b4e4:	f7fe f968 	bl	80197b8 <nema_rb_inline_cmd>
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4ee:	f7f8 bf97 	b.w	8014420 <nema_mutex_unlock>
 801b4f2:	1c51      	adds	r1, r2, #1
 801b4f4:	4299      	cmp	r1, r3
 801b4f6:	dbda      	blt.n	801b4ae <nema_cl_add_cmd+0x3a>
 801b4f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4fc:	2008      	movs	r0, #8
 801b4fe:	f7fe bae7 	b.w	8019ad0 <nema_set_error>
 801b502:	b1a2      	cbz	r2, 801b52e <nema_cl_add_cmd+0xba>
 801b504:	429a      	cmp	r2, r3
 801b506:	d0d1      	beq.n	801b4ac <nema_cl_add_cmd+0x38>
 801b508:	4620      	mov	r0, r4
 801b50a:	f7ff fee9 	bl	801b2e0 <nema_cl_submit_no_irq>
 801b50e:	69e0      	ldr	r0, [r4, #28]
 801b510:	f7fe fa1a 	bl	8019948 <nema_rb_submit_cl_id>
 801b514:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801b518:	69e0      	ldr	r0, [r4, #28]
 801b51a:	4298      	cmp	r0, r3
 801b51c:	d1da      	bne.n	801b4d4 <nema_cl_add_cmd+0x60>
 801b51e:	f7f8 feef 	bl	8014300 <nema_wait_irq_cl>
 801b522:	2800      	cmp	r0, #0
 801b524:	bfa4      	itt	ge
 801b526:	f04f 33ff 	movge.w	r3, #4294967295
 801b52a:	61e3      	strge	r3, [r4, #28]
 801b52c:	e7d2      	b.n	801b4d4 <nema_cl_add_cmd+0x60>
 801b52e:	2101      	movs	r1, #1
 801b530:	e7bd      	b.n	801b4ae <nema_cl_add_cmd+0x3a>
 801b532:	bf00      	nop
 801b534:	2015a1dc 	.word	0x2015a1dc

0801b538 <nema_cl_submit>:
 801b538:	2800      	cmp	r0, #0
 801b53a:	d066      	beq.n	801b60a <nema_cl_submit+0xd2>
 801b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b53e:	6944      	ldr	r4, [r0, #20]
 801b540:	2c00      	cmp	r4, #0
 801b542:	d061      	beq.n	801b608 <nema_cl_submit+0xd0>
 801b544:	6983      	ldr	r3, [r0, #24]
 801b546:	4605      	mov	r5, r0
 801b548:	069a      	lsls	r2, r3, #26
 801b54a:	d51f      	bpl.n	801b58c <nema_cl_submit+0x54>
 801b54c:	6902      	ldr	r2, [r0, #16]
 801b54e:	2a00      	cmp	r2, #0
 801b550:	bfb8      	it	lt
 801b552:	3203      	addlt	r2, #3
 801b554:	1092      	asrs	r2, r2, #2
 801b556:	0056      	lsls	r6, r2, #1
 801b558:	42b4      	cmp	r4, r6
 801b55a:	d055      	beq.n	801b608 <nema_cl_submit+0xd0>
 801b55c:	68c7      	ldr	r7, [r0, #12]
 801b55e:	bfa4      	itt	ge
 801b560:	1ba4      	subge	r4, r4, r6
 801b562:	eb07 07c2 	addge.w	r7, r7, r2, lsl #3
 801b566:	071b      	lsls	r3, r3, #28
 801b568:	d553      	bpl.n	801b612 <nema_cl_submit+0xda>
 801b56a:	69e8      	ldr	r0, [r5, #28]
 801b56c:	2800      	cmp	r0, #0
 801b56e:	da57      	bge.n	801b620 <nema_cl_submit+0xe8>
 801b570:	f04f 33ff 	mov.w	r3, #4294967295
 801b574:	61eb      	str	r3, [r5, #28]
 801b576:	4621      	mov	r1, r4
 801b578:	4638      	mov	r0, r7
 801b57a:	f7fe f895 	bl	80196a8 <nema_rb_submit_cmdlist2>
 801b57e:	696b      	ldr	r3, [r5, #20]
 801b580:	61e8      	str	r0, [r5, #28]
 801b582:	429e      	cmp	r6, r3
 801b584:	bfd8      	it	le
 801b586:	2600      	movle	r6, #0
 801b588:	616e      	str	r6, [r5, #20]
 801b58a:	e02f      	b.n	801b5ec <nema_cl_submit+0xb4>
 801b58c:	4604      	mov	r4, r0
 801b58e:	f06f 4640 	mvn.w	r6, #3221225472	@ 0xc0000000
 801b592:	e012      	b.n	801b5ba <nema_cl_submit+0x82>
 801b594:	6923      	ldr	r3, [r4, #16]
 801b596:	6949      	ldr	r1, [r1, #20]
 801b598:	4433      	add	r3, r6
 801b59a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801b59e:	69a3      	ldr	r3, [r4, #24]
 801b5a0:	4620      	mov	r0, r4
 801b5a2:	f023 0308 	bic.w	r3, r3, #8
 801b5a6:	61a3      	str	r3, [r4, #24]
 801b5a8:	f7f8 ff23 	bl	80143f2 <nema_buffer_flush>
 801b5ac:	69a3      	ldr	r3, [r4, #24]
 801b5ae:	f043 0308 	orr.w	r3, r3, #8
 801b5b2:	61a3      	str	r3, [r4, #24]
 801b5b4:	6a24      	ldr	r4, [r4, #32]
 801b5b6:	b16c      	cbz	r4, 801b5d4 <nema_cl_submit+0x9c>
 801b5b8:	69a3      	ldr	r3, [r4, #24]
 801b5ba:	0758      	lsls	r0, r3, #29
 801b5bc:	68a2      	ldr	r2, [r4, #8]
 801b5be:	6a21      	ldr	r1, [r4, #32]
 801b5c0:	d4e8      	bmi.n	801b594 <nema_cl_submit+0x5c>
 801b5c2:	071b      	lsls	r3, r3, #28
 801b5c4:	d406      	bmi.n	801b5d4 <nema_cl_submit+0x9c>
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	f7f8 ff13 	bl	80143f2 <nema_buffer_flush>
 801b5cc:	69a3      	ldr	r3, [r4, #24]
 801b5ce:	f043 0308 	orr.w	r3, r3, #8
 801b5d2:	61a3      	str	r3, [r4, #24]
 801b5d4:	2000      	movs	r0, #0
 801b5d6:	f7f8 ff16 	bl	8014406 <nema_mutex_lock>
 801b5da:	6969      	ldr	r1, [r5, #20]
 801b5dc:	4628      	mov	r0, r5
 801b5de:	f7fe f8e7 	bl	80197b0 <nema_rb_submit_cmdlist>
 801b5e2:	61e8      	str	r0, [r5, #28]
 801b5e4:	2000      	movs	r0, #0
 801b5e6:	f7f8 ff1b 	bl	8014420 <nema_mutex_unlock>
 801b5ea:	69e8      	ldr	r0, [r5, #28]
 801b5ec:	f7fe f9ac 	bl	8019948 <nema_rb_submit_cl_id>
 801b5f0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801b5f4:	69e8      	ldr	r0, [r5, #28]
 801b5f6:	4298      	cmp	r0, r3
 801b5f8:	d106      	bne.n	801b608 <nema_cl_submit+0xd0>
 801b5fa:	f7f8 fe81 	bl	8014300 <nema_wait_irq_cl>
 801b5fe:	2800      	cmp	r0, #0
 801b600:	db02      	blt.n	801b608 <nema_cl_submit+0xd0>
 801b602:	f04f 33ff 	mov.w	r3, #4294967295
 801b606:	61eb      	str	r3, [r5, #28]
 801b608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b60a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801b60e:	f7fe ba5f 	b.w	8019ad0 <nema_set_error>
 801b612:	f7f8 feee 	bl	80143f2 <nema_buffer_flush>
 801b616:	69ab      	ldr	r3, [r5, #24]
 801b618:	f043 0308 	orr.w	r3, r3, #8
 801b61c:	61ab      	str	r3, [r5, #24]
 801b61e:	e7a4      	b.n	801b56a <nema_cl_submit+0x32>
 801b620:	f7f8 fe6e 	bl	8014300 <nema_wait_irq_cl>
 801b624:	2800      	cmp	r0, #0
 801b626:	daa3      	bge.n	801b570 <nema_cl_submit+0x38>
 801b628:	e7a5      	b.n	801b576 <nema_cl_submit+0x3e>
 801b62a:	bf00      	nop

0801b62c <nema_cl_wait>:
 801b62c:	b510      	push	{r4, lr}
 801b62e:	b170      	cbz	r0, 801b64e <nema_cl_wait+0x22>
 801b630:	4604      	mov	r4, r0
 801b632:	69c0      	ldr	r0, [r0, #28]
 801b634:	2800      	cmp	r0, #0
 801b636:	da04      	bge.n	801b642 <nema_cl_wait+0x16>
 801b638:	f04f 33ff 	mov.w	r3, #4294967295
 801b63c:	61e3      	str	r3, [r4, #28]
 801b63e:	2000      	movs	r0, #0
 801b640:	bd10      	pop	{r4, pc}
 801b642:	f7f8 fe5d 	bl	8014300 <nema_wait_irq_cl>
 801b646:	2800      	cmp	r0, #0
 801b648:	daf6      	bge.n	801b638 <nema_cl_wait+0xc>
 801b64a:	2000      	movs	r0, #0
 801b64c:	bd10      	pop	{r4, pc}
 801b64e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 801b652:	f7fe fa3d 	bl	8019ad0 <nema_set_error>
 801b656:	f04f 30ff 	mov.w	r0, #4294967295
 801b65a:	bd10      	pop	{r4, pc}

0801b65c <nema_blender_init>:
 801b65c:	b530      	push	{r4, r5, lr}
 801b65e:	b085      	sub	sp, #20
 801b660:	466d      	mov	r5, sp
 801b662:	2418      	movs	r4, #24
 801b664:	4b11      	ldr	r3, [pc, #68]	@ (801b6ac <nema_blender_init+0x50>)
 801b666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b668:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801b66c:	2101      	movs	r1, #1
 801b66e:	4622      	mov	r2, r4
 801b670:	4628      	mov	r0, r5
 801b672:	440c      	add	r4, r1
 801b674:	f7ff fa40 	bl	801aaf8 <nema_load_frag_shader>
 801b678:	2c1f      	cmp	r4, #31
 801b67a:	d1f7      	bne.n	801b66c <nema_blender_init+0x10>
 801b67c:	4622      	mov	r2, r4
 801b67e:	2101      	movs	r1, #1
 801b680:	a802      	add	r0, sp, #8
 801b682:	f7ff fa39 	bl	801aaf8 <nema_load_frag_shader>
 801b686:	f7ff f8cf 	bl	801a828 <nema_readHwConfig>
 801b68a:	f000 5080 	and.w	r0, r0, #268435456	@ 0x10000000
 801b68e:	2800      	cmp	r0, #0
 801b690:	bf14      	ite	ne
 801b692:	2201      	movne	r2, #1
 801b694:	2200      	moveq	r2, #0
 801b696:	4b06      	ldr	r3, [pc, #24]	@ (801b6b0 <nema_blender_init+0x54>)
 801b698:	701a      	strb	r2, [r3, #0]
 801b69a:	d005      	beq.n	801b6a8 <nema_blender_init+0x4c>
 801b69c:	2200      	movs	r2, #0
 801b69e:	4b05      	ldr	r3, [pc, #20]	@ (801b6b4 <nema_blender_init+0x58>)
 801b6a0:	2001      	movs	r0, #1
 801b6a2:	601a      	str	r2, [r3, #0]
 801b6a4:	f7ff fa48 	bl	801ab38 <nema_set_rop_blend_mode>
 801b6a8:	b005      	add	sp, #20
 801b6aa:	bd30      	pop	{r4, r5, pc}
 801b6ac:	0802d914 	.word	0x0802d914
 801b6b0:	2015a1e1 	.word	0x2015a1e1
 801b6b4:	200000f8 	.word	0x200000f8

0801b6b8 <nema_set_blend>:
 801b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6bc:	4ca5      	ldr	r4, [pc, #660]	@ (801b954 <nema_set_blend+0x29c>)
 801b6be:	4683      	mov	fp, r0
 801b6c0:	7820      	ldrb	r0, [r4, #0]
 801b6c2:	b0a7      	sub	sp, #156	@ 0x9c
 801b6c4:	9102      	str	r1, [sp, #8]
 801b6c6:	9200      	str	r2, [sp, #0]
 801b6c8:	2800      	cmp	r0, #0
 801b6ca:	f040 8233 	bne.w	801bb34 <nema_set_blend+0x47c>
 801b6ce:	469a      	mov	sl, r3
 801b6d0:	465c      	mov	r4, fp
 801b6d2:	ea4f 535b 	mov.w	r3, fp, lsr #21
 801b6d6:	055b      	lsls	r3, r3, #21
 801b6d8:	930e      	str	r3, [sp, #56]	@ 0x38
 801b6da:	f40b 0300 	and.w	r3, fp, #8388608	@ 0x800000
 801b6de:	930c      	str	r3, [sp, #48]	@ 0x30
 801b6e0:	f40b 0380 	and.w	r3, fp, #4194304	@ 0x400000
 801b6e4:	f00b 010f 	and.w	r1, fp, #15
 801b6e8:	930d      	str	r3, [sp, #52]	@ 0x34
 801b6ea:	f40b 1300 	and.w	r3, fp, #2097152	@ 0x200000
 801b6ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b6f0:	9101      	str	r1, [sp, #4]
 801b6f2:	b2d2      	uxtb	r2, r2
 801b6f4:	fa5f f38a 	uxtb.w	r3, sl
 801b6f8:	f3cb 2903 	ubfx	r9, fp, #8, #4
 801b6fc:	f00b 7100 	and.w	r1, fp, #33554432	@ 0x2000000
 801b700:	f3cb 6840 	ubfx	r8, fp, #25, #1
 801b704:	9d02      	ldr	r5, [sp, #8]
 801b706:	b2e8      	uxtb	r0, r5
 801b708:	2804      	cmp	r0, #4
 801b70a:	4628      	mov	r0, r5
 801b70c:	bf28      	it	cs
 801b70e:	2000      	movcs	r0, #0
 801b710:	2a04      	cmp	r2, #4
 801b712:	9a00      	ldr	r2, [sp, #0]
 801b714:	bf28      	it	cs
 801b716:	f04f 32ff 	movcs.w	r2, #4294967295
 801b71a:	2b04      	cmp	r3, #4
 801b71c:	9002      	str	r0, [sp, #8]
 801b71e:	9200      	str	r2, [sp, #0]
 801b720:	bf28      	it	cs
 801b722:	4682      	movcs	sl, r0
 801b724:	4602      	mov	r2, r0
 801b726:	bf34      	ite	cc
 801b728:	4650      	movcc	r0, sl
 801b72a:	2002      	movcs	r0, #2
 801b72c:	4b8a      	ldr	r3, [pc, #552]	@ (801b958 <nema_set_blend+0x2a0>)
 801b72e:	9010      	str	r0, [sp, #64]	@ 0x40
 801b730:	781b      	ldrb	r3, [r3, #0]
 801b732:	b14b      	cbz	r3, 801b748 <nema_set_blend+0x90>
 801b734:	f01b 7380 	ands.w	r3, fp, #16777216	@ 0x1000000
 801b738:	9303      	str	r3, [sp, #12]
 801b73a:	d102      	bne.n	801b742 <nema_set_blend+0x8a>
 801b73c:	4552      	cmp	r2, sl
 801b73e:	f000 830c 	beq.w	801bd5a <nema_set_blend+0x6a2>
 801b742:	2001      	movs	r0, #1
 801b744:	f7ff f9f8 	bl	801ab38 <nema_set_rop_blend_mode>
 801b748:	2c00      	cmp	r4, #0
 801b74a:	bfac      	ite	ge
 801b74c:	4642      	movge	r2, r8
 801b74e:	2201      	movlt	r2, #1
 801b750:	4b82      	ldr	r3, [pc, #520]	@ (801b95c <nema_set_blend+0x2a4>)
 801b752:	f1bb 0f01 	cmp.w	fp, #1
 801b756:	789b      	ldrb	r3, [r3, #2]
 801b758:	9207      	str	r2, [sp, #28]
 801b75a:	9305      	str	r3, [sp, #20]
 801b75c:	f000 80e0 	beq.w	801b920 <nema_set_blend+0x268>
 801b760:	f00b 4380 	and.w	r3, fp, #1073741824	@ 0x40000000
 801b764:	9315      	str	r3, [sp, #84]	@ 0x54
 801b766:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801b76a:	9306      	str	r3, [sp, #24]
 801b76c:	f00b 5300 	and.w	r3, fp, #536870912	@ 0x20000000
 801b770:	9309      	str	r3, [sp, #36]	@ 0x24
 801b772:	9b01      	ldr	r3, [sp, #4]
 801b774:	f00b 5280 	and.w	r2, fp, #268435456	@ 0x10000000
 801b778:	2b05      	cmp	r3, #5
 801b77a:	f240 80df 	bls.w	801b93c <nema_set_blend+0x284>
 801b77e:	2301      	movs	r3, #1
 801b780:	930a      	str	r3, [sp, #40]	@ 0x28
 801b782:	9304      	str	r3, [sp, #16]
 801b784:	2303      	movs	r3, #3
 801b786:	4976      	ldr	r1, [pc, #472]	@ (801b960 <nema_set_blend+0x2a8>)
 801b788:	9303      	str	r3, [sp, #12]
 801b78a:	9108      	str	r1, [sp, #32]
 801b78c:	4d75      	ldr	r5, [pc, #468]	@ (801b964 <nema_set_blend+0x2ac>)
 801b78e:	2a00      	cmp	r2, #0
 801b790:	4b75      	ldr	r3, [pc, #468]	@ (801b968 <nema_set_blend+0x2b0>)
 801b792:	bf18      	it	ne
 801b794:	462b      	movne	r3, r5
 801b796:	f105 4500 	add.w	r5, r5, #2147483648	@ 0x80000000
 801b79a:	f105 0502 	add.w	r5, r5, #2
 801b79e:	9312      	str	r3, [sp, #72]	@ 0x48
 801b7a0:	4b72      	ldr	r3, [pc, #456]	@ (801b96c <nema_set_blend+0x2b4>)
 801b7a2:	bf08      	it	eq
 801b7a4:	462b      	moveq	r3, r5
 801b7a6:	f8df e20c 	ldr.w	lr, [pc, #524]	@ 801b9b4 <nema_set_blend+0x2fc>
 801b7aa:	f8df c20c 	ldr.w	ip, [pc, #524]	@ 801b9b8 <nema_set_blend+0x300>
 801b7ae:	9311      	str	r3, [sp, #68]	@ 0x44
 801b7b0:	bf14      	ite	ne
 801b7b2:	4673      	movne	r3, lr
 801b7b4:	4663      	moveq	r3, ip
 801b7b6:	4f6e      	ldr	r7, [pc, #440]	@ (801b970 <nema_set_blend+0x2b8>)
 801b7b8:	9314      	str	r3, [sp, #80]	@ 0x50
 801b7ba:	4b6e      	ldr	r3, [pc, #440]	@ (801b974 <nema_set_blend+0x2bc>)
 801b7bc:	bf18      	it	ne
 801b7be:	463b      	movne	r3, r7
 801b7c0:	f5a5 25c8 	sub.w	r5, r5, #409600	@ 0x64000
 801b7c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b7c6:	4b6c      	ldr	r3, [pc, #432]	@ (801b978 <nema_set_blend+0x2c0>)
 801b7c8:	f1a5 0542 	sub.w	r5, r5, #66	@ 0x42
 801b7cc:	496b      	ldr	r1, [pc, #428]	@ (801b97c <nema_set_blend+0x2c4>)
 801b7ce:	bf18      	it	ne
 801b7d0:	4619      	movne	r1, r3
 801b7d2:	f1a3 033e 	sub.w	r3, r3, #62	@ 0x3e
 801b7d6:	bf18      	it	ne
 801b7d8:	462b      	movne	r3, r5
 801b7da:	4e69      	ldr	r6, [pc, #420]	@ (801b980 <nema_set_blend+0x2c8>)
 801b7dc:	4f69      	ldr	r7, [pc, #420]	@ (801b984 <nema_set_blend+0x2cc>)
 801b7de:	461d      	mov	r5, r3
 801b7e0:	4b69      	ldr	r3, [pc, #420]	@ (801b988 <nema_set_blend+0x2d0>)
 801b7e2:	486a      	ldr	r0, [pc, #424]	@ (801b98c <nema_set_blend+0x2d4>)
 801b7e4:	bf18      	it	ne
 801b7e6:	4630      	movne	r0, r6
 801b7e8:	f106 4600 	add.w	r6, r6, #2147483648	@ 0x80000000
 801b7ec:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 801b9bc <nema_set_blend+0x304>
 801b7f0:	f506 3650 	add.w	r6, r6, #212992	@ 0x34000
 801b7f4:	bf04      	itt	eq
 801b7f6:	46bc      	moveq	ip, r7
 801b7f8:	461e      	moveq	r6, r3
 801b7fa:	f107 4700 	add.w	r7, r7, #2147483648	@ 0x80000000
 801b7fe:	f1a3 0340 	sub.w	r3, r3, #64	@ 0x40
 801b802:	f1a7 0742 	sub.w	r7, r7, #66	@ 0x42
 801b806:	bf08      	it	eq
 801b808:	461f      	moveq	r7, r3
 801b80a:	4c61      	ldr	r4, [pc, #388]	@ (801b990 <nema_set_blend+0x2d8>)
 801b80c:	f8df e1b0 	ldr.w	lr, [pc, #432]	@ 801b9c0 <nema_set_blend+0x308>
 801b810:	4a60      	ldr	r2, [pc, #384]	@ (801b994 <nema_set_blend+0x2dc>)
 801b812:	bf18      	it	ne
 801b814:	4622      	movne	r2, r4
 801b816:	f504 3450 	add.w	r4, r4, #212992	@ 0x34000
 801b81a:	bf08      	it	eq
 801b81c:	4674      	moveq	r4, lr
 801b81e:	f8dd e018 	ldr.w	lr, [sp, #24]
 801b822:	f1b8 0f00 	cmp.w	r8, #0
 801b826:	f040 8109 	bne.w	801ba3c <nema_set_blend+0x384>
 801b82a:	9b07      	ldr	r3, [sp, #28]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	bf0c      	ite	eq
 801b830:	2300      	moveq	r3, #0
 801b832:	f44f 1300 	movne.w	r3, #2097152	@ 0x200000
 801b836:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	f040 8105 	bne.w	801ba4a <nema_set_blend+0x392>
 801b840:	f01b 6f80 	tst.w	fp, #67108864	@ 0x4000000
 801b844:	f000 81b4 	beq.w	801bbb0 <nema_set_blend+0x4f8>
 801b848:	4684      	mov	ip, r0
 801b84a:	460e      	mov	r6, r1
 801b84c:	4614      	mov	r4, r2
 801b84e:	462f      	mov	r7, r5
 801b850:	f04f 0804 	mov.w	r8, #4
 801b854:	2200      	movs	r2, #0
 801b856:	4850      	ldr	r0, [pc, #320]	@ (801b998 <nema_set_blend+0x2e0>)
 801b858:	f00b 53c0 	and.w	r3, fp, #402653184	@ 0x18000000
 801b85c:	4293      	cmp	r3, r2
 801b85e:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
 801b862:	bf18      	it	ne
 801b864:	463e      	movne	r6, r7
 801b866:	9309      	str	r3, [sp, #36]	@ 0x24
 801b868:	9b05      	ldr	r3, [sp, #20]
 801b86a:	bf16      	itet	ne
 801b86c:	46a4      	movne	ip, r4
 801b86e:	270e      	moveq	r7, #14
 801b870:	270c      	movne	r7, #12
 801b872:	9216      	str	r2, [sp, #88]	@ 0x58
 801b874:	2b00      	cmp	r3, #0
 801b876:	f000 80eb 	beq.w	801ba50 <nema_set_blend+0x398>
 801b87a:	4b48      	ldr	r3, [pc, #288]	@ (801b99c <nema_set_blend+0x2e4>)
 801b87c:	4948      	ldr	r1, [pc, #288]	@ (801b9a0 <nema_set_blend+0x2e8>)
 801b87e:	9800      	ldr	r0, [sp, #0]
 801b880:	e9cd 1316 	strd	r1, r3, [sp, #88]	@ 0x58
 801b884:	1c43      	adds	r3, r0, #1
 801b886:	f000 8257 	beq.w	801bd38 <nema_set_blend+0x680>
 801b88a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801b88e:	4b45      	ldr	r3, [pc, #276]	@ (801b9a4 <nema_set_blend+0x2ec>)
 801b890:	9204      	str	r2, [sp, #16]
 801b892:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801b896:	e9cd 3118 	strd	r3, r1, [sp, #96]	@ 0x60
 801b89a:	2203      	movs	r2, #3
 801b89c:	2102      	movs	r1, #2
 801b89e:	4c42      	ldr	r4, [pc, #264]	@ (801b9a8 <nema_set_blend+0x2f0>)
 801b8a0:	f1b9 0f01 	cmp.w	r9, #1
 801b8a4:	f240 8110 	bls.w	801bac8 <nema_set_blend+0x410>
 801b8a8:	9b01      	ldr	r3, [sp, #4]
 801b8aa:	2b05      	cmp	r3, #5
 801b8ac:	d803      	bhi.n	801b8b6 <nema_set_blend+0x1fe>
 801b8ae:	f01b 5f70 	tst.w	fp, #1006632960	@ 0x3c000000
 801b8b2:	f000 8087 	beq.w	801b9c4 <nema_set_blend+0x30c>
 801b8b6:	9b03      	ldr	r3, [sp, #12]
 801b8b8:	b933      	cbnz	r3, 801b8c8 <nema_set_blend+0x210>
 801b8ba:	f1b9 0f00 	cmp.w	r9, #0
 801b8be:	d103      	bne.n	801b8c8 <nema_set_blend+0x210>
 801b8c0:	9b07      	ldr	r3, [sp, #28]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	f000 81ca 	beq.w	801bc5c <nema_set_blend+0x5a4>
 801b8c8:	f1b8 0f1d 	cmp.w	r8, #29
 801b8cc:	f000 8150 	beq.w	801bb70 <nema_set_blend+0x4b8>
 801b8d0:	4b36      	ldr	r3, [pc, #216]	@ (801b9ac <nema_set_blend+0x2f4>)
 801b8d2:	a826      	add	r0, sp, #152	@ 0x98
 801b8d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801b8d8:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801b8dc:	9803      	ldr	r0, [sp, #12]
 801b8de:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801b8e2:	4303      	orrs	r3, r0
 801b8e4:	e941 3c10 	strd	r3, ip, [r1, #-64]	@ 0x40
 801b8e8:	1c55      	adds	r5, r2, #1
 801b8ea:	f1b9 0f00 	cmp.w	r9, #0
 801b8ee:	f040 8150 	bne.w	801bb92 <nema_set_blend+0x4da>
 801b8f2:	46ce      	mov	lr, r9
 801b8f4:	4b2d      	ldr	r3, [pc, #180]	@ (801b9ac <nema_set_blend+0x2f4>)
 801b8f6:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801b8fa:	f8cd 9018 	str.w	r9, [sp, #24]
 801b8fe:	9308      	str	r3, [sp, #32]
 801b900:	9b07      	ldr	r3, [sp, #28]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d163      	bne.n	801b9ce <nema_set_blend+0x316>
 801b906:	4b2a      	ldr	r3, [pc, #168]	@ (801b9b0 <nema_set_blend+0x2f8>)
 801b908:	f8dd a008 	ldr.w	sl, [sp, #8]
 801b90c:	9308      	str	r3, [sp, #32]
 801b90e:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801b912:	9f01      	ldr	r7, [sp, #4]
 801b914:	e061      	b.n	801b9da <nema_set_blend+0x322>
 801b916:	f04f 0900 	mov.w	r9, #0
 801b91a:	46c8      	mov	r8, r9
 801b91c:	f8cd 901c 	str.w	r9, [sp, #28]
 801b920:	2b00      	cmp	r3, #0
 801b922:	f000 8153 	beq.w	801bbcc <nema_set_blend+0x514>
 801b926:	9b01      	ldr	r3, [sp, #4]
 801b928:	2b05      	cmp	r3, #5
 801b92a:	f200 8169 	bhi.w	801bc00 <nema_set_blend+0x548>
 801b92e:	2300      	movs	r3, #0
 801b930:	f04f 0b01 	mov.w	fp, #1
 801b934:	461a      	mov	r2, r3
 801b936:	9306      	str	r3, [sp, #24]
 801b938:	9309      	str	r3, [sp, #36]	@ 0x24
 801b93a:	9315      	str	r3, [sp, #84]	@ 0x54
 801b93c:	9b07      	ldr	r3, [sp, #28]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	f000 8200 	beq.w	801bd44 <nema_set_blend+0x68c>
 801b944:	930a      	str	r3, [sp, #40]	@ 0x28
 801b946:	4b06      	ldr	r3, [pc, #24]	@ (801b960 <nema_set_blend+0x2a8>)
 801b948:	2001      	movs	r0, #1
 801b94a:	9308      	str	r3, [sp, #32]
 801b94c:	2303      	movs	r3, #3
 801b94e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801b952:	e71b      	b.n	801b78c <nema_set_blend+0xd4>
 801b954:	2015a1e0 	.word	0x2015a1e0
 801b958:	2015a1e1 	.word	0x2015a1e1
 801b95c:	20000024 	.word	0x20000024
 801b960:	080c0003 	.word	0x080c0003
 801b964:	000761c5 	.word	0x000761c5
 801b968:	000761c7 	.word	0x000761c7
 801b96c:	800761c5 	.word	0x800761c5
 801b970:	80076185 	.word	0x80076185
 801b974:	80076187 	.word	0x80076187
 801b978:	800121c5 	.word	0x800121c5
 801b97c:	800121c7 	.word	0x800121c7
 801b980:	000121c5 	.word	0x000121c5
 801b984:	000461c7 	.word	0x000461c7
 801b988:	800461c7 	.word	0x800461c7
 801b98c:	000121c7 	.word	0x000121c7
 801b990:	00012185 	.word	0x00012185
 801b994:	00012187 	.word	0x00012187
 801b998:	0802e624 	.word	0x0802e624
 801b99c:	02009408 	.word	0x02009408
 801b9a0:	00f40182 	.word	0x00f40182
 801b9a4:	000c100b 	.word	0x000c100b
 801b9a8:	1000fc00 	.word	0x1000fc00
 801b9ac:	080c0000 	.word	0x080c0000
 801b9b0:	080c0002 	.word	0x080c0002
 801b9b4:	00076185 	.word	0x00076185
 801b9b8:	00076187 	.word	0x00076187
 801b9bc:	000461c5 	.word	0x000461c5
 801b9c0:	00046187 	.word	0x00046187
 801b9c4:	4615      	mov	r5, r2
 801b9c6:	460a      	mov	r2, r1
 801b9c8:	f1b9 0f00 	cmp.w	r9, #0
 801b9cc:	d098      	beq.n	801b900 <nema_set_blend+0x248>
 801b9ce:	9b06      	ldr	r3, [sp, #24]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	f000 8202 	beq.w	801bdda <nema_set_blend+0x722>
 801b9d6:	2600      	movs	r6, #0
 801b9d8:	9f01      	ldr	r7, [sp, #4]
 801b9da:	48c1      	ldr	r0, [pc, #772]	@ (801bce0 <nema_set_blend+0x628>)
 801b9dc:	49c1      	ldr	r1, [pc, #772]	@ (801bce4 <nema_set_blend+0x62c>)
 801b9de:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 801b9e2:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801b9e6:	015b      	lsls	r3, r3, #5
 801b9e8:	ea43 3387 	orr.w	r3, r3, r7, lsl #14
 801b9ec:	9f08      	ldr	r7, [sp, #32]
 801b9ee:	ea47 5e0e 	orr.w	lr, r7, lr, lsl #20
 801b9f2:	4fbd      	ldr	r7, [pc, #756]	@ (801bce8 <nema_set_blend+0x630>)
 801b9f4:	ea4e 1eca 	orr.w	lr, lr, sl, lsl #7
 801b9f8:	431f      	orrs	r7, r3
 801b9fa:	ab26      	add	r3, sp, #152	@ 0x98
 801b9fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801ba00:	4337      	orrs	r7, r6
 801ba02:	e942 e710 	strd	lr, r7, [r2, #-64]	@ 0x40
 801ba06:	2e00      	cmp	r6, #0
 801ba08:	f000 813f 	beq.w	801bc8a <nema_set_blend+0x5d2>
 801ba0c:	9804      	ldr	r0, [sp, #16]
 801ba0e:	f7fe ff79 	bl	801a904 <nema_matmul_bypass>
 801ba12:	4629      	mov	r1, r5
 801ba14:	2200      	movs	r2, #0
 801ba16:	a816      	add	r0, sp, #88	@ 0x58
 801ba18:	f7ff f86e 	bl	801aaf8 <nema_load_frag_shader>
 801ba1c:	4bb3      	ldr	r3, [pc, #716]	@ (801bcec <nema_set_blend+0x634>)
 801ba1e:	f1c5 0520 	rsb	r5, r5, #32
 801ba22:	6818      	ldr	r0, [r3, #0]
 801ba24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba26:	ea43 0800 	orr.w	r8, r3, r0
 801ba2a:	ea48 0005 	orr.w	r0, r8, r5
 801ba2e:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 801ba32:	f7ff f87b 	bl	801ab2c <nema_set_frag_ptr>
 801ba36:	b027      	add	sp, #156	@ 0x9c
 801ba38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801ba40:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ba42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	f43f aefb 	beq.w	801b840 <nema_set_blend+0x188>
 801ba4a:	f04f 0811 	mov.w	r8, #17
 801ba4e:	e701      	b.n	801b854 <nema_set_blend+0x19c>
 801ba50:	9b00      	ldr	r3, [sp, #0]
 801ba52:	1c5a      	adds	r2, r3, #1
 801ba54:	f000 8136 	beq.w	801bcc4 <nema_set_blend+0x60c>
 801ba58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ba5c:	9a05      	ldr	r2, [sp, #20]
 801ba5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801ba62:	9204      	str	r2, [sp, #16]
 801ba64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ba66:	2a00      	cmp	r2, #0
 801ba68:	f000 80a9 	beq.w	801bbbe <nema_set_blend+0x506>
 801ba6c:	f44f 2440 	mov.w	r4, #786432	@ 0xc0000
 801ba70:	499f      	ldr	r1, [pc, #636]	@ (801bcf0 <nema_set_blend+0x638>)
 801ba72:	4aa0      	ldr	r2, [pc, #640]	@ (801bcf4 <nema_set_blend+0x63c>)
 801ba74:	f44f 5500 	mov.w	r5, #8192	@ 0x2000
 801ba78:	9219      	str	r2, [sp, #100]	@ 0x64
 801ba7a:	2204      	movs	r2, #4
 801ba7c:	9116      	str	r1, [sp, #88]	@ 0x58
 801ba7e:	9205      	str	r2, [sp, #20]
 801ba80:	2102      	movs	r1, #2
 801ba82:	2203      	movs	r2, #3
 801ba84:	e9cd 5417 	strd	r5, r4, [sp, #92]	@ 0x5c
 801ba88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ba8a:	2c00      	cmp	r4, #0
 801ba8c:	d04f      	beq.n	801bb2e <nema_set_blend+0x476>
 801ba8e:	9c00      	ldr	r4, [sp, #0]
 801ba90:	f1b4 3fff 	cmp.w	r4, #4294967295
 801ba94:	d04b      	beq.n	801bb2e <nema_set_blend+0x476>
 801ba96:	f241 050b 	movw	r5, #4107	@ 0x100b
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 801baa0:	a826      	add	r0, sp, #152	@ 0x98
 801baa2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801baa6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801baa8:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 801baac:	ea45 11c1 	orr.w	r1, r5, r1, lsl #7
 801bab0:	f1b9 0f01 	cmp.w	r9, #1
 801bab4:	f840 1c40 	str.w	r1, [r0, #-64]
 801bab8:	f444 4420 	orr.w	r4, r4, #40960	@ 0xa000
 801babc:	4611      	mov	r1, r2
 801babe:	f840 3c3c 	str.w	r3, [r0, #-60]
 801bac2:	9a05      	ldr	r2, [sp, #20]
 801bac4:	f63f aef0 	bhi.w	801b8a8 <nema_set_blend+0x1f0>
 801bac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801baca:	2b00      	cmp	r3, #0
 801bacc:	f47f aeec 	bne.w	801b8a8 <nema_set_blend+0x1f0>
 801bad0:	9b00      	ldr	r3, [sp, #0]
 801bad2:	3301      	adds	r3, #1
 801bad4:	f47f aee8 	bne.w	801b8a8 <nema_set_blend+0x1f0>
 801bad8:	9b02      	ldr	r3, [sp, #8]
 801bada:	4553      	cmp	r3, sl
 801badc:	f47f aee4 	bne.w	801b8a8 <nema_set_blend+0x1f0>
 801bae0:	f1b9 0f00 	cmp.w	r9, #0
 801bae4:	bf15      	itete	ne
 801bae6:	f44f 6600 	movne.w	r6, #2048	@ 0x800
 801baea:	f44f 5600 	moveq.w	r6, #8192	@ 0x2000
 801baee:	f44f 1500 	movne.w	r5, #2097152	@ 0x200000
 801baf2:	f44f 0500 	moveq.w	r5, #8388608	@ 0x800000
 801baf6:	9f01      	ldr	r7, [sp, #4]
 801baf8:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 801bce0 <nema_set_blend+0x628>
 801bafc:	4879      	ldr	r0, [pc, #484]	@ (801bce4 <nema_set_blend+0x62c>)
 801bafe:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 801bb02:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
 801bb06:	015b      	lsls	r3, r3, #5
 801bb08:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801bb0c:	f043 430a 	orr.w	r3, r3, #2315255808	@ 0x8a000000
 801bb10:	f043 0306 	orr.w	r3, r3, #6
 801bb14:	4333      	orrs	r3, r6
 801bb16:	432b      	orrs	r3, r5
 801bb18:	4877      	ldr	r0, [pc, #476]	@ (801bcf8 <nema_set_blend+0x640>)
 801bb1a:	9d02      	ldr	r5, [sp, #8]
 801bb1c:	ae26      	add	r6, sp, #152	@ 0x98
 801bb1e:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
 801bb22:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801bb26:	4615      	mov	r5, r2
 801bb28:	e941 0310 	strd	r0, r3, [r1, #-64]	@ 0x40
 801bb2c:	e76e      	b.n	801ba0c <nema_set_blend+0x354>
 801bb2e:	f043 5480 	orr.w	r4, r3, #268435456	@ 0x10000000
 801bb32:	e6b5      	b.n	801b8a0 <nema_set_blend+0x1e8>
 801bb34:	f04f 3020 	mov.w	r0, #538976288	@ 0x20202020
 801bb38:	f7ff f810 	bl	801ab5c <nema_set_raster_color>
 801bb3c:	2000      	movs	r0, #0
 801bb3e:	f7fd fffb 	bl	8019b38 <nema_enable_gradient>
 801bb42:	f04f 0800 	mov.w	r8, #0
 801bb46:	f04f 0901 	mov.w	r9, #1
 801bb4a:	23ff      	movs	r3, #255	@ 0xff
 801bb4c:	f240 1401 	movw	r4, #257	@ 0x101
 801bb50:	f04f 3aff 	mov.w	sl, #4294967295
 801bb54:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801bb58:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 801bb5c:	e9cd 880c 	strd	r8, r8, [sp, #48]	@ 0x30
 801bb60:	4641      	mov	r1, r8
 801bb62:	f8cd 9004 	str.w	r9, [sp, #4]
 801bb66:	461a      	mov	r2, r3
 801bb68:	46a3      	mov	fp, r4
 801bb6a:	f8cd a000 	str.w	sl, [sp]
 801bb6e:	e5c9      	b.n	801b704 <nema_set_blend+0x4c>
 801bb70:	2f0e      	cmp	r7, #14
 801bb72:	f47f aead 	bne.w	801b8d0 <nema_set_blend+0x218>
 801bb76:	9b03      	ldr	r3, [sp, #12]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	f47f aea9 	bne.w	801b8d0 <nema_set_blend+0x218>
 801bb7e:	9b06      	ldr	r3, [sp, #24]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	f47f aea5 	bne.w	801b8d0 <nema_set_blend+0x218>
 801bb86:	4615      	mov	r5, r2
 801bb88:	460a      	mov	r2, r1
 801bb8a:	f1b9 0f00 	cmp.w	r9, #0
 801bb8e:	f43f aeb0 	beq.w	801b8f2 <nema_set_blend+0x23a>
 801bb92:	f04f 0e00 	mov.w	lr, #0
 801bb96:	4b59      	ldr	r3, [pc, #356]	@ (801bcfc <nema_set_blend+0x644>)
 801bb98:	9308      	str	r3, [sp, #32]
 801bb9a:	9b01      	ldr	r3, [sp, #4]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	f000 8123 	beq.w	801bde8 <nema_set_blend+0x730>
 801bba2:	2b01      	cmp	r3, #1
 801bba4:	f04f 0600 	mov.w	r6, #0
 801bba8:	f000 8137 	beq.w	801be1a <nema_set_blend+0x762>
 801bbac:	461f      	mov	r7, r3
 801bbae:	e714      	b.n	801b9da <nema_set_blend+0x322>
 801bbb0:	e9dd 6c11 	ldrd	r6, ip, [sp, #68]	@ 0x44
 801bbb4:	e9dd 7413 	ldrd	r7, r4, [sp, #76]	@ 0x4c
 801bbb8:	f04f 081d 	mov.w	r8, #29
 801bbbc:	e64a      	b.n	801b854 <nema_set_blend+0x19c>
 801bbbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bbc0:	2a00      	cmp	r2, #0
 801bbc2:	d046      	beq.n	801bc52 <nema_set_blend+0x59a>
 801bbc4:	f44f 2440 	mov.w	r4, #786432	@ 0xc0000
 801bbc8:	494d      	ldr	r1, [pc, #308]	@ (801bd00 <nema_set_blend+0x648>)
 801bbca:	e752      	b.n	801ba72 <nema_set_blend+0x3ba>
 801bbcc:	9b02      	ldr	r3, [sp, #8]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	f47f aea9 	bne.w	801b926 <nema_set_blend+0x26e>
 801bbd4:	9b00      	ldr	r3, [sp, #0]
 801bbd6:	3301      	adds	r3, #1
 801bbd8:	f000 8114 	beq.w	801be04 <nema_set_blend+0x74c>
 801bbdc:	9802      	ldr	r0, [sp, #8]
 801bbde:	f7fe fe91 	bl	801a904 <nema_matmul_bypass>
 801bbe2:	4b42      	ldr	r3, [pc, #264]	@ (801bcec <nema_set_blend+0x634>)
 801bbe4:	4947      	ldr	r1, [pc, #284]	@ (801bd04 <nema_set_blend+0x64c>)
 801bbe6:	9800      	ldr	r0, [sp, #0]
 801bbe8:	681a      	ldr	r2, [r3, #0]
 801bbea:	4b47      	ldr	r3, [pc, #284]	@ (801bd08 <nema_set_blend+0x650>)
 801bbec:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801bbf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bbf4:	4318      	orrs	r0, r3
 801bbf6:	f7fe ff99 	bl	801ab2c <nema_set_frag_ptr>
 801bbfa:	b027      	add	sp, #156	@ 0x9c
 801bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc00:	2301      	movs	r3, #1
 801bc02:	930a      	str	r3, [sp, #40]	@ 0x28
 801bc04:	9304      	str	r3, [sp, #16]
 801bc06:	469b      	mov	fp, r3
 801bc08:	2303      	movs	r3, #3
 801bc0a:	f04f 0e00 	mov.w	lr, #0
 801bc0e:	9303      	str	r3, [sp, #12]
 801bc10:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 801bc14:	f503 2340 	add.w	r3, r3, #786432	@ 0xc0000
 801bc18:	9308      	str	r3, [sp, #32]
 801bc1a:	4b3c      	ldr	r3, [pc, #240]	@ (801bd0c <nema_set_blend+0x654>)
 801bc1c:	f8cd e018 	str.w	lr, [sp, #24]
 801bc20:	9312      	str	r3, [sp, #72]	@ 0x48
 801bc22:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801bc26:	9311      	str	r3, [sp, #68]	@ 0x44
 801bc28:	4b39      	ldr	r3, [pc, #228]	@ (801bd10 <nema_set_blend+0x658>)
 801bc2a:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 801bc2e:	9314      	str	r3, [sp, #80]	@ 0x50
 801bc30:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801bc34:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bc36:	f5a3 23c8 	sub.w	r3, r3, #409600	@ 0x64000
 801bc3a:	f8cd e054 	str.w	lr, [sp, #84]	@ 0x54
 801bc3e:	4835      	ldr	r0, [pc, #212]	@ (801bd14 <nema_set_blend+0x65c>)
 801bc40:	4935      	ldr	r1, [pc, #212]	@ (801bd18 <nema_set_blend+0x660>)
 801bc42:	4a36      	ldr	r2, [pc, #216]	@ (801bd1c <nema_set_blend+0x664>)
 801bc44:	461d      	mov	r5, r3
 801bc46:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 801bd34 <nema_set_blend+0x67c>
 801bc4a:	4e35      	ldr	r6, [pc, #212]	@ (801bd20 <nema_set_blend+0x668>)
 801bc4c:	4c35      	ldr	r4, [pc, #212]	@ (801bd24 <nema_set_blend+0x66c>)
 801bc4e:	4f36      	ldr	r7, [pc, #216]	@ (801bd28 <nema_set_blend+0x670>)
 801bc50:	e5e7      	b.n	801b822 <nema_set_blend+0x16a>
 801bc52:	4611      	mov	r1, r2
 801bc54:	2202      	movs	r2, #2
 801bc56:	9205      	str	r2, [sp, #20]
 801bc58:	2201      	movs	r2, #1
 801bc5a:	e715      	b.n	801ba88 <nema_set_blend+0x3d0>
 801bc5c:	9b01      	ldr	r3, [sp, #4]
 801bc5e:	2b01      	cmp	r3, #1
 801bc60:	f47f ae32 	bne.w	801b8c8 <nema_set_blend+0x210>
 801bc64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	f47f ae2e 	bne.w	801b8c8 <nema_set_blend+0x210>
 801bc6c:	a826      	add	r0, sp, #152	@ 0x98
 801bc6e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801bc72:	4b21      	ldr	r3, [pc, #132]	@ (801bcf8 <nema_set_blend+0x640>)
 801bc74:	9802      	ldr	r0, [sp, #8]
 801bc76:	f841 6c3c 	str.w	r6, [r1, #-60]
 801bc7a:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801bc7e:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
 801bc82:	4615      	mov	r5, r2
 801bc84:	f841 3c40 	str.w	r3, [r1, #-64]
 801bc88:	e6c0      	b.n	801ba0c <nema_set_blend+0x354>
 801bc8a:	f44f 0680 	mov.w	r6, #4194304	@ 0x400000
 801bc8e:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 801bc92:	462a      	mov	r2, r5
 801bc94:	3501      	adds	r5, #1
 801bc96:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801bc9a:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
 801bc9e:	0140      	lsls	r0, r0, #5
 801bca0:	4b22      	ldr	r3, [pc, #136]	@ (801bd2c <nema_set_blend+0x674>)
 801bca2:	ea40 3081 	orr.w	r0, r0, r1, lsl #14
 801bca6:	4303      	orrs	r3, r0
 801bca8:	4921      	ldr	r1, [pc, #132]	@ (801bd30 <nema_set_blend+0x678>)
 801bcaa:	9802      	ldr	r0, [sp, #8]
 801bcac:	433b      	orrs	r3, r7
 801bcae:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 801bcb2:	a826      	add	r0, sp, #152	@ 0x98
 801bcb4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801bcb8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801bcba:	4333      	orrs	r3, r6
 801bcbc:	4301      	orrs	r1, r0
 801bcbe:	e942 1310 	strd	r1, r3, [r2, #-64]	@ 0x40
 801bcc2:	e6a3      	b.n	801ba0c <nema_set_blend+0x354>
 801bcc4:	9b04      	ldr	r3, [sp, #16]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	f000 8082 	beq.w	801bdd0 <nema_set_blend+0x718>
 801bccc:	9a05      	ldr	r2, [sp, #20]
 801bcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcd0:	9203      	str	r2, [sp, #12]
 801bcd2:	920a      	str	r2, [sp, #40]	@ 0x28
 801bcd4:	4a09      	ldr	r2, [pc, #36]	@ (801bcfc <nema_set_blend+0x644>)
 801bcd6:	f443 4330 	orr.w	r3, r3, #45056	@ 0xb000
 801bcda:	9208      	str	r2, [sp, #32]
 801bcdc:	e6c2      	b.n	801ba64 <nema_set_blend+0x3ac>
 801bcde:	bf00      	nop
 801bce0:	0802e634 	.word	0x0802e634
 801bce4:	0802e664 	.word	0x0802e664
 801bce8:	0a002007 	.word	0x0a002007
 801bcec:	200000f8 	.word	0x200000f8
 801bcf0:	100c118b 	.word	0x100c118b
 801bcf4:	0081a042 	.word	0x0081a042
 801bcf8:	080c0002 	.word	0x080c0002
 801bcfc:	080c0000 	.word	0x080c0000
 801bd00:	100c1183 	.word	0x100c1183
 801bd04:	0802e624 	.word	0x0802e624
 801bd08:	141f801f 	.word	0x141f801f
 801bd0c:	000761c7 	.word	0x000761c7
 801bd10:	00076187 	.word	0x00076187
 801bd14:	000121c7 	.word	0x000121c7
 801bd18:	800121c7 	.word	0x800121c7
 801bd1c:	00012187 	.word	0x00012187
 801bd20:	800461c7 	.word	0x800461c7
 801bd24:	00046187 	.word	0x00046187
 801bd28:	80046187 	.word	0x80046187
 801bd2c:	80080206 	.word	0x80080206
 801bd30:	004e0002 	.word	0x004e0002
 801bd34:	000461c7 	.word	0x000461c7
 801bd38:	2301      	movs	r3, #1
 801bd3a:	2202      	movs	r2, #2
 801bd3c:	9304      	str	r3, [sp, #16]
 801bd3e:	4619      	mov	r1, r3
 801bd40:	4c38      	ldr	r4, [pc, #224]	@ (801be24 <nema_set_blend+0x76c>)
 801bd42:	e5ad      	b.n	801b8a0 <nema_set_blend+0x1e8>
 801bd44:	f1b9 0f00 	cmp.w	r9, #0
 801bd48:	d055      	beq.n	801bdf6 <nema_set_blend+0x73e>
 801bd4a:	2301      	movs	r3, #1
 801bd4c:	2103      	movs	r1, #3
 801bd4e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bd50:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801bd54:	4b34      	ldr	r3, [pc, #208]	@ (801be28 <nema_set_blend+0x770>)
 801bd56:	9308      	str	r3, [sp, #32]
 801bd58:	e518      	b.n	801b78c <nema_set_blend+0xd4>
 801bd5a:	2c00      	cmp	r4, #0
 801bd5c:	bfbd      	ittte	lt
 801bd5e:	f02b 4b00 	biclt.w	fp, fp, #2147483648	@ 0x80000000
 801bd62:	f04f 4202 	movlt.w	r2, #2181038080	@ 0x82000000
 801bd66:	f04f 4300 	movlt.w	r3, #2147483648	@ 0x80000000
 801bd6a:	f04f 7200 	movge.w	r2, #33554432	@ 0x2000000
 801bd6e:	b111      	cbz	r1, 801bd76 <nema_set_blend+0x6be>
 801bd70:	4613      	mov	r3, r2
 801bd72:	f02b 7b00 	bic.w	fp, fp, #33554432	@ 0x2000000
 801bd76:	9a01      	ldr	r2, [sp, #4]
 801bd78:	ea42 2009 	orr.w	r0, r2, r9, lsl #8
 801bd7c:	4318      	orrs	r0, r3
 801bd7e:	f7fe fedb 	bl	801ab38 <nema_set_rop_blend_mode>
 801bd82:	ea4f 505b 	mov.w	r0, fp, lsr #21
 801bd86:	4b29      	ldr	r3, [pc, #164]	@ (801be2c <nema_set_blend+0x774>)
 801bd88:	0540      	lsls	r0, r0, #21
 801bd8a:	f040 0201 	orr.w	r2, r0, #1
 801bd8e:	789b      	ldrb	r3, [r3, #2]
 801bd90:	2a01      	cmp	r2, #1
 801bd92:	9201      	str	r2, [sp, #4]
 801bd94:	9305      	str	r3, [sp, #20]
 801bd96:	f43f adbe 	beq.w	801b916 <nema_set_blend+0x25e>
 801bd9a:	f00b 4380 	and.w	r3, fp, #1073741824	@ 0x40000000
 801bd9e:	9315      	str	r3, [sp, #84]	@ 0x54
 801bda0:	f3cb 7380 	ubfx	r3, fp, #30, #1
 801bda4:	9306      	str	r3, [sp, #24]
 801bda6:	f00b 5300 	and.w	r3, fp, #536870912	@ 0x20000000
 801bdaa:	9309      	str	r3, [sp, #36]	@ 0x24
 801bdac:	2301      	movs	r3, #1
 801bdae:	f04f 0900 	mov.w	r9, #0
 801bdb2:	f00b 5280 	and.w	r2, fp, #268435456	@ 0x10000000
 801bdb6:	f8dd b004 	ldr.w	fp, [sp, #4]
 801bdba:	9301      	str	r3, [sp, #4]
 801bdbc:	4b1c      	ldr	r3, [pc, #112]	@ (801be30 <nema_set_blend+0x778>)
 801bdbe:	46c8      	mov	r8, r9
 801bdc0:	f8cd 901c 	str.w	r9, [sp, #28]
 801bdc4:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801bdc8:	f8cd 9010 	str.w	r9, [sp, #16]
 801bdcc:	9308      	str	r3, [sp, #32]
 801bdce:	e4dd      	b.n	801b78c <nema_set_blend+0xd4>
 801bdd0:	2201      	movs	r2, #1
 801bdd2:	9b05      	ldr	r3, [sp, #20]
 801bdd4:	9204      	str	r2, [sp, #16]
 801bdd6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bdd8:	e644      	b.n	801ba64 <nema_set_blend+0x3ac>
 801bdda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	f43f aedc 	beq.w	801bb9a <nema_set_blend+0x4e2>
 801bde2:	9e06      	ldr	r6, [sp, #24]
 801bde4:	9f01      	ldr	r7, [sp, #4]
 801bde6:	e5f8      	b.n	801b9da <nema_set_blend+0x322>
 801bde8:	f44f 0600 	mov.w	r6, #8388608	@ 0x800000
 801bdec:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 801bdf0:	4910      	ldr	r1, [pc, #64]	@ (801be34 <nema_set_blend+0x77c>)
 801bdf2:	4811      	ldr	r0, [pc, #68]	@ (801be38 <nema_set_blend+0x780>)
 801bdf4:	e74f      	b.n	801bc96 <nema_set_blend+0x5de>
 801bdf6:	4b0e      	ldr	r3, [pc, #56]	@ (801be30 <nema_set_blend+0x778>)
 801bdf8:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801bdfc:	9308      	str	r3, [sp, #32]
 801bdfe:	e9cd 9903 	strd	r9, r9, [sp, #12]
 801be02:	e4c3      	b.n	801b78c <nema_set_blend+0xd4>
 801be04:	2001      	movs	r0, #1
 801be06:	f7fe fd7d 	bl	801a904 <nema_matmul_bypass>
 801be0a:	4a0c      	ldr	r2, [pc, #48]	@ (801be3c <nema_set_blend+0x784>)
 801be0c:	4b0c      	ldr	r3, [pc, #48]	@ (801be40 <nema_set_blend+0x788>)
 801be0e:	6810      	ldr	r0, [r2, #0]
 801be10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801be14:	f7fe fe8a 	bl	801ab2c <nema_set_frag_ptr>
 801be18:	e6ef      	b.n	801bbfa <nema_set_blend+0x542>
 801be1a:	4637      	mov	r7, r6
 801be1c:	4905      	ldr	r1, [pc, #20]	@ (801be34 <nema_set_blend+0x77c>)
 801be1e:	4806      	ldr	r0, [pc, #24]	@ (801be38 <nema_set_blend+0x780>)
 801be20:	e739      	b.n	801bc96 <nema_set_blend+0x5de>
 801be22:	bf00      	nop
 801be24:	1000fc00 	.word	0x1000fc00
 801be28:	080c0003 	.word	0x080c0003
 801be2c:	20000024 	.word	0x20000024
 801be30:	080c0000 	.word	0x080c0000
 801be34:	0802e664 	.word	0x0802e664
 801be38:	0802e634 	.word	0x0802e634
 801be3c:	200000f8 	.word	0x200000f8
 801be40:	141f001f 	.word	0x141f001f

0801be44 <nema_set_const_color>:
 801be44:	b510      	push	{r4, lr}
 801be46:	4604      	mov	r4, r0
 801be48:	2001      	movs	r0, #1
 801be4a:	4621      	mov	r1, r4
 801be4c:	f7fd fe4c 	bl	8019ae8 <nema_set_const_reg>
 801be50:	4b04      	ldr	r3, [pc, #16]	@ (801be64 <nema_set_const_color+0x20>)
 801be52:	781b      	ldrb	r3, [r3, #0]
 801be54:	b903      	cbnz	r3, 801be58 <nema_set_const_color+0x14>
 801be56:	bd10      	pop	{r4, pc}
 801be58:	4620      	mov	r0, r4
 801be5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be5e:	f7fe be71 	b.w	801ab44 <nema_set_rop_const_color>
 801be62:	bf00      	nop
 801be64:	2015a1e1 	.word	0x2015a1e1

0801be68 <_ZN8touchgfx8HALGPU2D17unlockFrameBufferEv>:
 801be68:	f7f8 bee6 	b.w	8014c38 <_ZN8touchgfx3HAL17unlockFrameBufferEv>

0801be6c <_ZN8touchgfx8HALGPU2D10beginFrameEv>:
 801be6c:	2200      	movs	r2, #0
 801be6e:	f880 20a5 	strb.w	r2, [r0, #165]	@ 0xa5
 801be72:	f7f8 bde5 	b.w	8014a40 <_ZN8touchgfx3HAL10beginFrameEv>
 801be76:	bf00      	nop

0801be78 <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv>:
 801be78:	b538      	push	{r3, r4, r5, lr}
 801be7a:	f890 30a5 	ldrb.w	r3, [r0, #165]	@ 0xa5
 801be7e:	4604      	mov	r4, r0
 801be80:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 801be84:	b12b      	cbz	r3, 801be92 <_ZN8touchgfx8HALGPU2D15lockFrameBufferEv+0x1a>
 801be86:	2300      	movs	r3, #0
 801be88:	4628      	mov	r0, r5
 801be8a:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 801be8e:	f7ff fb53 	bl	801b538 <nema_cl_submit>
 801be92:	4628      	mov	r0, r5
 801be94:	f7ff fbca 	bl	801b62c <nema_cl_wait>
 801be98:	4620      	mov	r0, r4
 801be9a:	f7f9 fb6f 	bl	801557c <_ZN8touchgfx3HAL15lockFrameBufferEv>
 801be9e:	2300      	movs	r3, #0
 801bea0:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801bea4:	bd38      	pop	{r3, r4, r5, pc}
 801bea6:	bf00      	nop

0801bea8 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>:
 801bea8:	b508      	push	{r3, lr}
 801beaa:	4a03      	ldr	r2, [pc, #12]	@ (801beb8 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x10>)
 801beac:	4b03      	ldr	r3, [pc, #12]	@ (801bebc <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x14>)
 801beae:	2118      	movs	r1, #24
 801beb0:	4803      	ldr	r0, [pc, #12]	@ (801bec0 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2+0x18>)
 801beb2:	f00f fe81 	bl	802bbb8 <__assert_func>
 801beb6:	bf00      	nop
 801beb8:	0802e7e8 	.word	0x0802e7e8
 801bebc:	0802e694 	.word	0x0802e694
 801bec0:	0802e6ec 	.word	0x0802e6ec

0801bec4 <_ZN8touchgfx8HALGPU2D8endFrameEv>:
 801bec4:	b538      	push	{r3, r4, r5, lr}
 801bec6:	f890 30a4 	ldrb.w	r3, [r0, #164]	@ 0xa4
 801beca:	4604      	mov	r4, r0
 801becc:	b97b      	cbnz	r3, 801beee <_ZN8touchgfx8HALGPU2D8endFrameEv+0x2a>
 801bece:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 801bed2:	f104 057c 	add.w	r5, r4, #124	@ 0x7c
 801bed6:	b113      	cbz	r3, 801bede <_ZN8touchgfx8HALGPU2D8endFrameEv+0x1a>
 801bed8:	4628      	mov	r0, r5
 801beda:	f7ff fb2d 	bl	801b538 <nema_cl_submit>
 801bede:	4628      	mov	r0, r5
 801bee0:	f7ff fba4 	bl	801b62c <nema_cl_wait>
 801bee4:	4620      	mov	r0, r4
 801bee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801beea:	f7f8 bdb5 	b.w	8014a58 <_ZN8touchgfx3HAL8endFrameEv>
 801beee:	6840      	ldr	r0, [r0, #4]
 801bef0:	4906      	ldr	r1, [pc, #24]	@ (801bf0c <_ZN8touchgfx8HALGPU2D8endFrameEv+0x48>)
 801bef2:	6803      	ldr	r3, [r0, #0]
 801bef4:	689a      	ldr	r2, [r3, #8]
 801bef6:	428a      	cmp	r2, r1
 801bef8:	d105      	bne.n	801bf06 <_ZN8touchgfx8HALGPU2D8endFrameEv+0x42>
 801befa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801befc:	4798      	blx	r3
 801befe:	2300      	movs	r3, #0
 801bf00:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801bf04:	e7e3      	b.n	801bece <_ZN8touchgfx8HALGPU2D8endFrameEv+0xa>
 801bf06:	4790      	blx	r2
 801bf08:	e7f9      	b.n	801befe <_ZN8touchgfx8HALGPU2D8endFrameEv+0x3a>
 801bf0a:	bf00      	nop
 801bf0c:	08012e35 	.word	0x08012e35

0801bf10 <_ZN8touchgfx8HALGPU2D10initializeEv>:
 801bf10:	b570      	push	{r4, r5, r6, lr}
 801bf12:	4606      	mov	r6, r0
 801bf14:	b08a      	sub	sp, #40	@ 0x28
 801bf16:	466c      	mov	r4, sp
 801bf18:	f7f8 fdab 	bl	8014a72 <_ZN8touchgfx3HAL10initializeEv>
 801bf1c:	f106 057c 	add.w	r5, r6, #124	@ 0x7c
 801bf20:	4668      	mov	r0, sp
 801bf22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801bf26:	f7ff f86f 	bl	801b008 <nema_cl_create_sized>
 801bf2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bf32:	e894 0003 	ldmia.w	r4, {r0, r1}
 801bf36:	e885 0003 	stmia.w	r5, {r0, r1}
 801bf3a:	f8d6 3088 	ldr.w	r3, [r6, #136]	@ 0x88
 801bf3e:	b10b      	cbz	r3, 801bf44 <_ZN8touchgfx8HALGPU2D10initializeEv+0x34>
 801bf40:	b00a      	add	sp, #40	@ 0x28
 801bf42:	bd70      	pop	{r4, r5, r6, pc}
 801bf44:	f7ff ffb0 	bl	801bea8 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801bf48 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
 801bf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf4a:	f04f 0c01 	mov.w	ip, #1
 801bf4e:	2500      	movs	r5, #0
 801bf50:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 801bf54:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 801bf58:	60c3      	str	r3, [r0, #12]
 801bf5a:	42b7      	cmp	r7, r6
 801bf5c:	bf2c      	ite	cs
 801bf5e:	f04f 0e00 	movcs.w	lr, #0
 801bf62:	f04f 0e01 	movcc.w	lr, #1
 801bf66:	4b23      	ldr	r3, [pc, #140]	@ (801bff4 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xac>)
 801bf68:	e9c0 1201 	strd	r1, r2, [r0, #4]
 801bf6c:	6683      	str	r3, [r0, #104]	@ 0x68
 801bf6e:	4b22      	ldr	r3, [pc, #136]	@ (801bff8 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb0>)
 801bf70:	6105      	str	r5, [r0, #16]
 801bf72:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801bf76:	61c5      	str	r5, [r0, #28]
 801bf78:	6205      	str	r5, [r0, #32]
 801bf7a:	8485      	strh	r5, [r0, #36]	@ 0x24
 801bf7c:	f8c0 5026 	str.w	r5, [r0, #38]	@ 0x26
 801bf80:	f880 502a 	strb.w	r5, [r0, #42]	@ 0x2a
 801bf84:	62c5      	str	r5, [r0, #44]	@ 0x2c
 801bf86:	8605      	strh	r5, [r0, #48]	@ 0x30
 801bf88:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
 801bf8c:	e9c0 5510 	strd	r5, r5, [r0, #64]	@ 0x40
 801bf90:	f880 5048 	strb.w	r5, [r0, #72]	@ 0x48
 801bf94:	f880 504a 	strb.w	r5, [r0, #74]	@ 0x4a
 801bf98:	f880 504b 	strb.w	r5, [r0, #75]	@ 0x4b
 801bf9c:	64c5      	str	r5, [r0, #76]	@ 0x4c
 801bf9e:	6505      	str	r5, [r0, #80]	@ 0x50
 801bfa0:	6545      	str	r5, [r0, #84]	@ 0x54
 801bfa2:	f880 5058 	strb.w	r5, [r0, #88]	@ 0x58
 801bfa6:	e9c0 5517 	strd	r5, r5, [r0, #92]	@ 0x5c
 801bfaa:	6645      	str	r5, [r0, #100]	@ 0x64
 801bfac:	66c5      	str	r5, [r0, #108]	@ 0x6c
 801bfae:	4a13      	ldr	r2, [pc, #76]	@ (801bffc <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb4>)
 801bfb0:	f880 c049 	strb.w	ip, [r0, #73]	@ 0x49
 801bfb4:	6018      	str	r0, [r3, #0]
 801bfb6:	4b12      	ldr	r3, [pc, #72]	@ (801c000 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xb8>)
 801bfb8:	8017      	strh	r7, [r2, #0]
 801bfba:	801f      	strh	r7, [r3, #0]
 801bfbc:	4a11      	ldr	r2, [pc, #68]	@ (801c004 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xbc>)
 801bfbe:	4b12      	ldr	r3, [pc, #72]	@ (801c008 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc0>)
 801bfc0:	8016      	strh	r6, [r2, #0]
 801bfc2:	801e      	strh	r6, [r3, #0]
 801bfc4:	4911      	ldr	r1, [pc, #68]	@ (801c00c <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc4>)
 801bfc6:	4a12      	ldr	r2, [pc, #72]	@ (801c010 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xc8>)
 801bfc8:	4b12      	ldr	r3, [pc, #72]	@ (801c014 <_ZN8touchgfx8HALGPU2DC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xcc>)
 801bfca:	700d      	strb	r5, [r1, #0]
 801bfcc:	6002      	str	r2, [r0, #0]
 801bfce:	6018      	str	r0, [r3, #0]
 801bfd0:	f880 5070 	strb.w	r5, [r0, #112]	@ 0x70
 801bfd4:	6745      	str	r5, [r0, #116]	@ 0x74
 801bfd6:	f880 5078 	strb.w	r5, [r0, #120]	@ 0x78
 801bfda:	f880 5079 	strb.w	r5, [r0, #121]	@ 0x79
 801bfde:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
 801bfe2:	f880 c07b 	strb.w	ip, [r0, #123]	@ 0x7b
 801bfe6:	f880 50a4 	strb.w	r5, [r0, #164]	@ 0xa4
 801bfea:	f880 50a5 	strb.w	r5, [r0, #165]	@ 0xa5
 801bfee:	f880 e034 	strb.w	lr, [r0, #52]	@ 0x34
 801bff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bff4:	01000001 	.word	0x01000001
 801bff8:	2015a078 	.word	0x2015a078
 801bffc:	2015a06c 	.word	0x2015a06c
 801c000:	2015a072 	.word	0x2015a072
 801c004:	2015a06e 	.word	0x2015a06e
 801c008:	2015a074 	.word	0x2015a074
 801c00c:	2015a070 	.word	0x2015a070
 801c010:	0802e718 	.word	0x0802e718
 801c014:	2015a1e4 	.word	0x2015a1e4

0801c018 <_ZN8touchgfx8HALGPU2D10initializeEi>:
 801c018:	b570      	push	{r4, r5, r6, lr}
 801c01a:	460c      	mov	r4, r1
 801c01c:	b08a      	sub	sp, #40	@ 0x28
 801c01e:	4606      	mov	r6, r0
 801c020:	f7f8 fd27 	bl	8014a72 <_ZN8touchgfx3HAL10initializeEv>
 801c024:	4621      	mov	r1, r4
 801c026:	466c      	mov	r4, sp
 801c028:	4668      	mov	r0, sp
 801c02a:	f106 057c 	add.w	r5, r6, #124	@ 0x7c
 801c02e:	f7fe ffeb 	bl	801b008 <nema_cl_create_sized>
 801c032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c03a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c03e:	e885 0003 	stmia.w	r5, {r0, r1}
 801c042:	f8d6 3088 	ldr.w	r3, [r6, #136]	@ 0x88
 801c046:	b10b      	cbz	r3, 801c04c <_ZN8touchgfx8HALGPU2D10initializeEi+0x34>
 801c048:	b00a      	add	sp, #40	@ 0x28
 801c04a:	bd70      	pop	{r4, r5, r6, pc}
 801c04c:	f7ff ff2c 	bl	801bea8 <_ZN8touchgfx8HALGPU2D10initializeEi.part.2>

0801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>:
 801c050:	b510      	push	{r4, lr}
 801c052:	f890 30a4 	ldrb.w	r3, [r0, #164]	@ 0xa4
 801c056:	4604      	mov	r4, r0
 801c058:	b94b      	cbnz	r3, 801c06e <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x1e>
 801c05a:	4620      	mov	r0, r4
 801c05c:	2101      	movs	r1, #1
 801c05e:	f7f9 fa7b 	bl	8015558 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801c062:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 801c066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c06a:	f7ff b8e1 	b.w	801b230 <nema_cl_bind_circular>
 801c06e:	6840      	ldr	r0, [r0, #4]
 801c070:	4906      	ldr	r1, [pc, #24]	@ (801c08c <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x3c>)
 801c072:	6803      	ldr	r3, [r0, #0]
 801c074:	689a      	ldr	r2, [r3, #8]
 801c076:	428a      	cmp	r2, r1
 801c078:	d105      	bne.n	801c086 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x36>
 801c07a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c07c:	4798      	blx	r3
 801c07e:	2300      	movs	r3, #0
 801c080:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801c084:	e7e9      	b.n	801c05a <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0xa>
 801c086:	4790      	blx	r2
 801c088:	e7f9      	b.n	801c07e <_ZN8touchgfx8HALGPU2D14bindExecBufferEv+0x2e>
 801c08a:	bf00      	nop
 801c08c:	08012e35 	.word	0x08012e35

0801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>:
 801c090:	4603      	mov	r3, r0
 801c092:	2200      	movs	r2, #0
 801c094:	307c      	adds	r0, #124	@ 0x7c
 801c096:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 801c09a:	f7ff ba4d 	b.w	801b538 <nema_cl_submit>
 801c09e:	bf00      	nop

0801c0a0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0a4:	b091      	sub	sp, #68	@ 0x44
 801c0a6:	4604      	mov	r4, r0
 801c0a8:	461d      	mov	r5, r3
 801c0aa:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 801c0ae:	e9cd 210e 	strd	r2, r1, [sp, #56]	@ 0x38
 801c0b2:	930d      	str	r3, [sp, #52]	@ 0x34
 801c0b4:	f89d 2088 	ldrb.w	r2, [sp, #136]	@ 0x88
 801c0b8:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 801c0bc:	307c      	adds	r0, #124	@ 0x7c
 801c0be:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 801c0c2:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801c0c6:	f8bd 8070 	ldrh.w	r8, [sp, #112]	@ 0x70
 801c0ca:	f8bd 9074 	ldrh.w	r9, [sp, #116]	@ 0x74
 801c0ce:	f89d a078 	ldrb.w	sl, [sp, #120]	@ 0x78
 801c0d2:	f89d b07c 	ldrb.w	fp, [sp, #124]	@ 0x7c
 801c0d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c0d8:	920c      	str	r2, [sp, #48]	@ 0x30
 801c0da:	f7ff faa7 	bl	801b62c <nema_cl_wait>
 801c0de:	f04f 0e01 	mov.w	lr, #1
 801c0e2:	2000      	movs	r0, #0
 801c0e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c0e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c0e8:	9208      	str	r2, [sp, #32]
 801c0ea:	f8d4 c000 	ldr.w	ip, [r4]
 801c0ee:	9307      	str	r3, [sp, #28]
 801c0f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c0f2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801c0f6:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	@ 0x38
 801c0fa:	e9cd b305 	strd	fp, r3, [sp, #20]
 801c0fe:	e9cd 7801 	strd	r7, r8, [sp, #4]
 801c102:	9600      	str	r6, [sp, #0]
 801c104:	f884 e0a4 	strb.w	lr, [r4, #164]	@ 0xa4
 801c108:	9009      	str	r0, [sp, #36]	@ 0x24
 801c10a:	462b      	mov	r3, r5
 801c10c:	4620      	mov	r0, r4
 801c10e:	f8dc 403c 	ldr.w	r4, [ip, #60]	@ 0x3c
 801c112:	47a0      	blx	r4
 801c114:	b011      	add	sp, #68	@ 0x44
 801c116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c11a:	bf00      	nop

0801c11c <_ZNK8touchgfx8LCDGPU2D8bitDepthEv>:
 801c11c:	7b03      	ldrb	r3, [r0, #12]
 801c11e:	2b02      	cmp	r3, #2
 801c120:	d004      	beq.n	801c12c <_ZNK8touchgfx8LCDGPU2D8bitDepthEv+0x10>
 801c122:	2b01      	cmp	r3, #1
 801c124:	bf0c      	ite	eq
 801c126:	2018      	moveq	r0, #24
 801c128:	2010      	movne	r0, #16
 801c12a:	4770      	bx	lr
 801c12c:	2020      	movs	r0, #32
 801c12e:	4770      	bx	lr

0801c130 <_ZNK8touchgfx8LCDGPU2D17framebufferFormatEv>:
 801c130:	7b00      	ldrb	r0, [r0, #12]
 801c132:	4770      	bx	lr

0801c134 <_ZN8touchgfx8LCDGPU2D4initEv>:
 801c134:	4770      	bx	lr
 801c136:	bf00      	nop

0801c138 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c13c:	b087      	sub	sp, #28
 801c13e:	f89d 5064 	ldrb.w	r5, [sp, #100]	@ 0x64
 801c142:	9102      	str	r1, [sp, #8]
 801c144:	ea6f 0c05 	mvn.w	ip, r5
 801c148:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801c14c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c14e:	9203      	str	r2, [sp, #12]
 801c150:	e9dd 4215 	ldrd	r4, r2, [sp, #84]	@ 0x54
 801c154:	6860      	ldr	r0, [r4, #4]
 801c156:	fa5f fc8c 	uxtb.w	ip, ip
 801c15a:	fb00 2e01 	mla	lr, r0, r1, r2
 801c15e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c160:	6820      	ldr	r0, [r4, #0]
 801c162:	e9d2 2400 	ldrd	r2, r4, [r2]
 801c166:	3404      	adds	r4, #4
 801c168:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 801c16c:	fa1f fb85 	uxth.w	fp, r5
 801c170:	9405      	str	r4, [sp, #20]
 801c172:	9200      	str	r2, [sp, #0]
 801c174:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801c178:	9c02      	ldr	r4, [sp, #8]
 801c17a:	2c00      	cmp	r4, #0
 801c17c:	dc03      	bgt.n	801c186 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801c17e:	9c03      	ldr	r4, [sp, #12]
 801c180:	2c00      	cmp	r4, #0
 801c182:	f340 80c2 	ble.w	801c30a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801c186:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c188:	2b00      	cmp	r3, #0
 801c18a:	e9d4 ea02 	ldrd	lr, sl, [r4, #8]
 801c18e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c192:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801c196:	fa0f f48e 	sxth.w	r4, lr
 801c19a:	fa0f f88a 	sxth.w	r8, sl
 801c19e:	f340 80b7 	ble.w	801c310 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801c1a2:	1415      	asrs	r5, r2, #16
 801c1a4:	d406      	bmi.n	801c1b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c1a6:	42a5      	cmp	r5, r4
 801c1a8:	da04      	bge.n	801c1b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c1aa:	ea5f 4921 	movs.w	r9, r1, asr #16
 801c1ae:	d401      	bmi.n	801c1b4 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c1b0:	45c1      	cmp	r9, r8
 801c1b2:	db3e      	blt.n	801c232 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801c1b4:	3b01      	subs	r3, #1
 801c1b6:	4432      	add	r2, r6
 801c1b8:	4439      	add	r1, r7
 801c1ba:	f100 0002 	add.w	r0, r0, #2
 801c1be:	d1f0      	bne.n	801c1a2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c1c0:	9b02      	ldr	r3, [sp, #8]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	f340 80a1 	ble.w	801c30a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801c1c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c1cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c1d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1dc:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801c1e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1e4:	ee76 6a62 	vsub.f32	s13, s12, s5
 801c1e8:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801c1ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1f0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c1f4:	ee16 2a90 	vmov	r2, s13
 801c1f8:	3b01      	subs	r3, #1
 801c1fa:	9302      	str	r3, [sp, #8]
 801c1fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c1fe:	9c03      	ldr	r4, [sp, #12]
 801c200:	fb92 f6f3 	sdiv	r6, r2, r3
 801c204:	ee17 2a10 	vmov	r2, s14
 801c208:	eeb0 7a43 	vmov.f32	s14, s6
 801c20c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c210:	ee17 1a10 	vmov	r1, s14
 801c214:	eeb0 7a62 	vmov.f32	s14, s5
 801c218:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c21c:	fb92 f7f3 	sdiv	r7, r2, r3
 801c220:	eeb0 3a67 	vmov.f32	s6, s15
 801c224:	ee17 2a10 	vmov	r2, s14
 801c228:	eef0 2a46 	vmov.f32	s5, s12
 801c22c:	bf08      	it	eq
 801c22e:	4623      	moveq	r3, r4
 801c230:	e7a2      	b.n	801c178 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c232:	9501      	str	r5, [sp, #4]
 801c234:	1e5d      	subs	r5, r3, #1
 801c236:	fb05 2906 	mla	r9, r5, r6, r2
 801c23a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c23e:	9504      	str	r5, [sp, #16]
 801c240:	d570      	bpl.n	801c324 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801c242:	4680      	mov	r8, r0
 801c244:	9d01      	ldr	r5, [sp, #4]
 801c246:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c24a:	4654      	mov	r4, sl
 801c24c:	4673      	mov	r3, lr
 801c24e:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801c252:	e002      	b.n	801c25a <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c254:	1415      	asrs	r5, r2, #16
 801c256:	e9d9 3402 	ldrd	r3, r4, [r9, #8]
 801c25a:	2d00      	cmp	r5, #0
 801c25c:	4432      	add	r2, r6
 801c25e:	db4b      	blt.n	801c2f8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801c260:	429d      	cmp	r5, r3
 801c262:	da49      	bge.n	801c2f8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801c264:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801c268:	d446      	bmi.n	801c2f8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801c26a:	45a6      	cmp	lr, r4
 801c26c:	da44      	bge.n	801c2f8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801c26e:	9c00      	ldr	r4, [sp, #0]
 801c270:	b21b      	sxth	r3, r3
 801c272:	fb0e 4303 	mla	r3, lr, r3, r4
 801c276:	5d5b      	ldrb	r3, [r3, r5]
 801c278:	9d05      	ldr	r5, [sp, #20]
 801c27a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c27e:	441d      	add	r5, r3
 801c280:	f895 a002 	ldrb.w	sl, [r5, #2]
 801c284:	786d      	ldrb	r5, [r5, #1]
 801c286:	f8b8 4000 	ldrh.w	r4, [r8]
 801c28a:	fb15 f50b 	smulbb	r5, r5, fp
 801c28e:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801c292:	fa5f fe8e 	uxtb.w	lr, lr
 801c296:	9501      	str	r5, [sp, #4]
 801c298:	fb1e fe0c 	smulbb	lr, lr, ip
 801c29c:	9d05      	ldr	r5, [sp, #20]
 801c29e:	fb1a fa0b 	smulbb	sl, sl, fp
 801c2a2:	5ced      	ldrb	r5, [r5, r3]
 801c2a4:	1223      	asrs	r3, r4, #8
 801c2a6:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801c2aa:	fb05 ee0b 	mla	lr, r5, fp, lr
 801c2ae:	fb03 aa0c 	mla	sl, r3, ip, sl
 801c2b2:	9d01      	ldr	r5, [sp, #4]
 801c2b4:	10e4      	asrs	r4, r4, #3
 801c2b6:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801c2ba:	fb04 540c 	mla	r4, r4, ip, r5
 801c2be:	fa1f fe8e 	uxth.w	lr, lr
 801c2c2:	fa1f fa8a 	uxth.w	sl, sl
 801c2c6:	f10e 0301 	add.w	r3, lr, #1
 801c2ca:	f10a 0501 	add.w	r5, sl, #1
 801c2ce:	9301      	str	r3, [sp, #4]
 801c2d0:	b2a4      	uxth	r4, r4
 801c2d2:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801c2d6:	9d01      	ldr	r5, [sp, #4]
 801c2d8:	1c63      	adds	r3, r4, #1
 801c2da:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801c2de:	eb05 251e 	add.w	r5, r5, lr, lsr #8
 801c2e2:	f40a 4378 	and.w	r3, sl, #63488	@ 0xf800
 801c2e6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801c2ea:	0964      	lsrs	r4, r4, #5
 801c2ec:	432b      	orrs	r3, r5
 801c2ee:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801c2f2:	4323      	orrs	r3, r4
 801c2f4:	f8a8 3000 	strh.w	r3, [r8]
 801c2f8:	f108 0802 	add.w	r8, r8, #2
 801c2fc:	4580      	cmp	r8, r0
 801c2fe:	4439      	add	r1, r7
 801c300:	d1a8      	bne.n	801c254 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c302:	9b02      	ldr	r3, [sp, #8]
 801c304:	2b00      	cmp	r3, #0
 801c306:	f73f af5f 	bgt.w	801c1c8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c30a:	b007      	add	sp, #28
 801c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c310:	f43f af56 	beq.w	801c1c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c314:	1e5d      	subs	r5, r3, #1
 801c316:	fb05 2906 	mla	r9, r5, r6, r2
 801c31a:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c31e:	9504      	str	r5, [sp, #16]
 801c320:	f53f af4e 	bmi.w	801c1c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c324:	454c      	cmp	r4, r9
 801c326:	dd5b      	ble.n	801c3e0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c328:	9d04      	ldr	r5, [sp, #16]
 801c32a:	fb05 1507 	mla	r5, r5, r7, r1
 801c32e:	142d      	asrs	r5, r5, #16
 801c330:	d456      	bmi.n	801c3e0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c332:	4545      	cmp	r5, r8
 801c334:	da54      	bge.n	801c3e0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c336:	2b00      	cmp	r3, #0
 801c338:	f77f af42 	ble.w	801c1c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c33c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c340:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c344:	9301      	str	r3, [sp, #4]
 801c346:	e002      	b.n	801c34e <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801c348:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c34a:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 801c34e:	9d00      	ldr	r5, [sp, #0]
 801c350:	140b      	asrs	r3, r1, #16
 801c352:	fb04 5303 	mla	r3, r4, r3, r5
 801c356:	1414      	asrs	r4, r2, #16
 801c358:	5d1b      	ldrb	r3, [r3, r4]
 801c35a:	8804      	ldrh	r4, [r0, #0]
 801c35c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c360:	eb08 0503 	add.w	r5, r8, r3
 801c364:	f895 a002 	ldrb.w	sl, [r5, #2]
 801c368:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c36c:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
 801c370:	fa5f fe8e 	uxtb.w	lr, lr
 801c374:	fb1e fe0c 	smulbb	lr, lr, ip
 801c378:	fb19 f90b 	smulbb	r9, r9, fp
 801c37c:	fb1a fa0b 	smulbb	sl, sl, fp
 801c380:	f818 5003 	ldrb.w	r5, [r8, r3]
 801c384:	1223      	asrs	r3, r4, #8
 801c386:	10e4      	asrs	r4, r4, #3
 801c388:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801c38c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801c390:	fb05 e50b 	mla	r5, r5, fp, lr
 801c394:	fb03 aa0c 	mla	sl, r3, ip, sl
 801c398:	fb04 940c 	mla	r4, r4, ip, r9
 801c39c:	b2ad      	uxth	r5, r5
 801c39e:	fa1f fa8a 	uxth.w	sl, sl
 801c3a2:	b2a4      	uxth	r4, r4
 801c3a4:	f10a 0301 	add.w	r3, sl, #1
 801c3a8:	f105 0e01 	add.w	lr, r5, #1
 801c3ac:	f104 0901 	add.w	r9, r4, #1
 801c3b0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801c3b4:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801c3b8:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801c3bc:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801c3c0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801c3c4:	0964      	lsrs	r4, r4, #5
 801c3c6:	ea43 030e 	orr.w	r3, r3, lr
 801c3ca:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801c3ce:	4323      	orrs	r3, r4
 801c3d0:	f820 3b02 	strh.w	r3, [r0], #2
 801c3d4:	9b01      	ldr	r3, [sp, #4]
 801c3d6:	4439      	add	r1, r7
 801c3d8:	4298      	cmp	r0, r3
 801c3da:	4432      	add	r2, r6
 801c3dc:	d1b4      	bne.n	801c348 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801c3de:	e6ef      	b.n	801c1c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	f77f aeed 	ble.w	801c1c0 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c3e6:	1414      	asrs	r4, r2, #16
 801c3e8:	4680      	mov	r8, r0
 801c3ea:	9401      	str	r4, [sp, #4]
 801c3ec:	4625      	mov	r5, r4
 801c3ee:	e72a      	b.n	801c246 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>

0801c3f0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3f4:	4689      	mov	r9, r1
 801c3f6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c3fa:	46ca      	mov	sl, r9
 801c3fc:	b087      	sub	sp, #28
 801c3fe:	9203      	str	r2, [sp, #12]
 801c400:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	@ 0x54
 801c404:	6854      	ldr	r4, [r2, #4]
 801c406:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	@ 0x5c
 801c40a:	fb04 1000 	mla	r0, r4, r0, r1
 801c40e:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801c412:	6815      	ldr	r5, [r2, #0]
 801c414:	e9dc 2400 	ldrd	r2, r4, [ip]
 801c418:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 801c41c:	f104 0b04 	add.w	fp, r4, #4
 801c420:	9205      	str	r2, [sp, #20]
 801c422:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801c426:	f1ba 0f00 	cmp.w	sl, #0
 801c42a:	dc03      	bgt.n	801c434 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801c42c:	9c03      	ldr	r4, [sp, #12]
 801c42e:	2c00      	cmp	r4, #0
 801c430:	f340 8095 	ble.w	801c55e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801c434:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	fa0f f588 	sxth.w	r5, r8
 801c43e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c442:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801c446:	fa0f f48e 	sxth.w	r4, lr
 801c44a:	9502      	str	r5, [sp, #8]
 801c44c:	f340 808a 	ble.w	801c564 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801c450:	46f1      	mov	r9, lr
 801c452:	9401      	str	r4, [sp, #4]
 801c454:	1415      	asrs	r5, r2, #16
 801c456:	d408      	bmi.n	801c46a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c458:	9c01      	ldr	r4, [sp, #4]
 801c45a:	42a5      	cmp	r5, r4
 801c45c:	da05      	bge.n	801c46a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c45e:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801c462:	d402      	bmi.n	801c46a <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c464:	9c02      	ldr	r4, [sp, #8]
 801c466:	45a6      	cmp	lr, r4
 801c468:	db3b      	blt.n	801c4e2 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 801c46a:	3b01      	subs	r3, #1
 801c46c:	4432      	add	r2, r6
 801c46e:	4439      	add	r1, r7
 801c470:	f100 0002 	add.w	r0, r0, #2
 801c474:	d1ee      	bne.n	801c454 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c476:	f1ba 0f00 	cmp.w	sl, #0
 801c47a:	dd70      	ble.n	801c55e <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801c47c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c480:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c484:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801c488:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c48c:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801c490:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c494:	ee76 6a62 	vsub.f32	s13, s12, s5
 801c498:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801c49c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4a0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c4a4:	ee16 2a90 	vmov	r2, s13
 801c4a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c4aa:	9c03      	ldr	r4, [sp, #12]
 801c4ac:	fb92 f6f3 	sdiv	r6, r2, r3
 801c4b0:	ee17 2a10 	vmov	r2, s14
 801c4b4:	eeb0 7a43 	vmov.f32	s14, s6
 801c4b8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c4bc:	ee17 1a10 	vmov	r1, s14
 801c4c0:	eeb0 7a62 	vmov.f32	s14, s5
 801c4c4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c4c8:	f1ba 0a01 	subs.w	sl, sl, #1
 801c4cc:	fb92 f7f3 	sdiv	r7, r2, r3
 801c4d0:	eeb0 3a67 	vmov.f32	s6, s15
 801c4d4:	ee17 2a10 	vmov	r2, s14
 801c4d8:	eef0 2a46 	vmov.f32	s5, s12
 801c4dc:	bf08      	it	eq
 801c4de:	4623      	moveq	r3, r4
 801c4e0:	e7a1      	b.n	801c426 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c4e2:	9c01      	ldr	r4, [sp, #4]
 801c4e4:	9501      	str	r5, [sp, #4]
 801c4e6:	1e5d      	subs	r5, r3, #1
 801c4e8:	46ce      	mov	lr, r9
 801c4ea:	fb05 2906 	mla	r9, r5, r6, r2
 801c4ee:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c4f2:	9504      	str	r5, [sp, #16]
 801c4f4:	d53e      	bpl.n	801c574 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801c4f6:	4604      	mov	r4, r0
 801c4f8:	9d01      	ldr	r5, [sp, #4]
 801c4fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c4fe:	4673      	mov	r3, lr
 801c500:	46b6      	mov	lr, r6
 801c502:	4646      	mov	r6, r8
 801c504:	e002      	b.n	801c50c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c506:	1415      	asrs	r5, r2, #16
 801c508:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801c50c:	2d00      	cmp	r5, #0
 801c50e:	4472      	add	r2, lr
 801c510:	db1e      	blt.n	801c550 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c512:	429d      	cmp	r5, r3
 801c514:	da1c      	bge.n	801c550 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c516:	ea5f 4821 	movs.w	r8, r1, asr #16
 801c51a:	d419      	bmi.n	801c550 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c51c:	45b0      	cmp	r8, r6
 801c51e:	da17      	bge.n	801c550 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c520:	9e05      	ldr	r6, [sp, #20]
 801c522:	b21b      	sxth	r3, r3
 801c524:	fb08 6303 	mla	r3, r8, r3, r6
 801c528:	5d5e      	ldrb	r6, [r3, r5]
 801c52a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c52e:	eb0b 0306 	add.w	r3, fp, r6
 801c532:	785d      	ldrb	r5, [r3, #1]
 801c534:	789b      	ldrb	r3, [r3, #2]
 801c536:	00ed      	lsls	r5, r5, #3
 801c538:	f405 68fc 	and.w	r8, r5, #2016	@ 0x7e0
 801c53c:	4d2d      	ldr	r5, [pc, #180]	@ (801c5f4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801c53e:	f81b 6006 	ldrb.w	r6, [fp, r6]
 801c542:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 801c546:	ea43 0308 	orr.w	r3, r3, r8
 801c54a:	ea43 03d6 	orr.w	r3, r3, r6, lsr #3
 801c54e:	8023      	strh	r3, [r4, #0]
 801c550:	3402      	adds	r4, #2
 801c552:	4284      	cmp	r4, r0
 801c554:	4439      	add	r1, r7
 801c556:	d1d6      	bne.n	801c506 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c558:	f1ba 0f00 	cmp.w	sl, #0
 801c55c:	dc8e      	bgt.n	801c47c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c55e:	b007      	add	sp, #28
 801c560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c564:	d087      	beq.n	801c476 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c566:	1e5d      	subs	r5, r3, #1
 801c568:	fb05 2906 	mla	r9, r5, r6, r2
 801c56c:	ea5f 4929 	movs.w	r9, r9, asr #16
 801c570:	9504      	str	r5, [sp, #16]
 801c572:	d480      	bmi.n	801c476 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c574:	454c      	cmp	r4, r9
 801c576:	dd35      	ble.n	801c5e4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c578:	9d04      	ldr	r5, [sp, #16]
 801c57a:	fb05 1507 	mla	r5, r5, r7, r1
 801c57e:	ea5f 4925 	movs.w	r9, r5, asr #16
 801c582:	d42f      	bmi.n	801c5e4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c584:	9d02      	ldr	r5, [sp, #8]
 801c586:	45a9      	cmp	r9, r5
 801c588:	da2c      	bge.n	801c5e4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	f77f af73 	ble.w	801c476 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c590:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c594:	9d05      	ldr	r5, [sp, #20]
 801c596:	4699      	mov	r9, r3
 801c598:	46a6      	mov	lr, r4
 801c59a:	e001      	b.n	801c5a0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801c59c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c5a0:	140c      	asrs	r4, r1, #16
 801c5a2:	fb0e 5404 	mla	r4, lr, r4, r5
 801c5a6:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c5aa:	f814 e00e 	ldrb.w	lr, [r4, lr]
 801c5ae:	4b11      	ldr	r3, [pc, #68]	@ (801c5f4 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>)
 801c5b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c5b4:	eb0b 040e 	add.w	r4, fp, lr
 801c5b8:	f894 8001 	ldrb.w	r8, [r4, #1]
 801c5bc:	78a4      	ldrb	r4, [r4, #2]
 801c5be:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c5c2:	f81b e00e 	ldrb.w	lr, [fp, lr]
 801c5c6:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801c5ca:	ea03 2404 	and.w	r4, r3, r4, lsl #8
 801c5ce:	ea44 0408 	orr.w	r4, r4, r8
 801c5d2:	ea44 04de 	orr.w	r4, r4, lr, lsr #3
 801c5d6:	f820 4b02 	strh.w	r4, [r0], #2
 801c5da:	4548      	cmp	r0, r9
 801c5dc:	4439      	add	r1, r7
 801c5de:	4432      	add	r2, r6
 801c5e0:	d1dc      	bne.n	801c59c <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c5e2:	e748      	b.n	801c476 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	f77f af46 	ble.w	801c476 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c5ea:	1415      	asrs	r5, r2, #16
 801c5ec:	4604      	mov	r4, r0
 801c5ee:	9501      	str	r5, [sp, #4]
 801c5f0:	e783      	b.n	801c4fa <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801c5f2:	bf00      	nop
 801c5f4:	fffff800 	.word	0xfffff800

0801c5f8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5f8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c600:	b087      	sub	sp, #28
 801c602:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801c606:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	@ 0x54
 801c60a:	e9dd 0b17 	ldrd	r0, fp, [sp, #92]	@ 0x5c
 801c60e:	6854      	ldr	r4, [r2, #4]
 801c610:	f89d 5064 	ldrb.w	r5, [sp, #100]	@ 0x64
 801c614:	fb04 1100 	mla	r1, r4, r0, r1
 801c618:	e9dd 9a13 	ldrd	r9, sl, [sp, #76]	@ 0x4c
 801c61c:	6810      	ldr	r0, [r2, #0]
 801c61e:	e9db 2400 	ldrd	r2, r4, [fp]
 801c622:	eb00 0e41 	add.w	lr, r0, r1, lsl #1
 801c626:	1d21      	adds	r1, r4, #4
 801c628:	9505      	str	r5, [sp, #20]
 801c62a:	9102      	str	r1, [sp, #8]
 801c62c:	9201      	str	r2, [sp, #4]
 801c62e:	e9dd 7211 	ldrd	r7, r2, [sp, #68]	@ 0x44
 801c632:	9903      	ldr	r1, [sp, #12]
 801c634:	2900      	cmp	r1, #0
 801c636:	dc03      	bgt.n	801c640 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c638:	9904      	ldr	r1, [sp, #16]
 801c63a:	2900      	cmp	r1, #0
 801c63c:	f340 80b6 	ble.w	801c7ac <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c640:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801c644:	2b00      	cmp	r3, #0
 801c646:	f507 4700 	add.w	r7, r7, #32768	@ 0x8000
 801c64a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c64e:	b221      	sxth	r1, r4
 801c650:	b235      	sxth	r5, r6
 801c652:	f340 80ae 	ble.w	801c7b2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801c656:	1438      	asrs	r0, r7, #16
 801c658:	d406      	bmi.n	801c668 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c65a:	4288      	cmp	r0, r1
 801c65c:	da04      	bge.n	801c668 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c65e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c662:	d401      	bmi.n	801c668 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c664:	45ac      	cmp	ip, r5
 801c666:	db3c      	blt.n	801c6e2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801c668:	3b01      	subs	r3, #1
 801c66a:	444f      	add	r7, r9
 801c66c:	4452      	add	r2, sl
 801c66e:	f10e 0e02 	add.w	lr, lr, #2
 801c672:	d1f0      	bne.n	801c656 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c674:	9b03      	ldr	r3, [sp, #12]
 801c676:	2b00      	cmp	r3, #0
 801c678:	f340 8098 	ble.w	801c7ac <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c67c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c680:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c684:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801c688:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c68c:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801c690:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c694:	ee76 6a62 	vsub.f32	s13, s12, s5
 801c698:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801c69c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c6a0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c6a4:	ee16 2a90 	vmov	r2, s13
 801c6a8:	3b01      	subs	r3, #1
 801c6aa:	9303      	str	r3, [sp, #12]
 801c6ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c6ae:	9904      	ldr	r1, [sp, #16]
 801c6b0:	fb92 f9f3 	sdiv	r9, r2, r3
 801c6b4:	ee17 2a10 	vmov	r2, s14
 801c6b8:	eeb0 7a43 	vmov.f32	s14, s6
 801c6bc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c6c0:	fb92 faf3 	sdiv	sl, r2, r3
 801c6c4:	ee17 2a10 	vmov	r2, s14
 801c6c8:	eeb0 7a62 	vmov.f32	s14, s5
 801c6cc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c6d0:	eeb0 3a67 	vmov.f32	s6, s15
 801c6d4:	ee17 7a10 	vmov	r7, s14
 801c6d8:	eef0 2a46 	vmov.f32	s5, s12
 801c6dc:	bf08      	it	eq
 801c6de:	460b      	moveq	r3, r1
 801c6e0:	e7a7      	b.n	801c632 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c6e2:	f103 38ff 	add.w	r8, r3, #4294967295
 801c6e6:	fb08 7c09 	mla	ip, r8, r9, r7
 801c6ea:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c6ee:	d56a      	bpl.n	801c7c6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 801c6f0:	4675      	mov	r5, lr
 801c6f2:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801c6f6:	e002      	b.n	801c6fe <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c6f8:	1438      	asrs	r0, r7, #16
 801c6fa:	e9db 4602 	ldrd	r4, r6, [fp, #8]
 801c6fe:	2800      	cmp	r0, #0
 801c700:	444f      	add	r7, r9
 801c702:	db4b      	blt.n	801c79c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c704:	42a0      	cmp	r0, r4
 801c706:	da49      	bge.n	801c79c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c708:	1413      	asrs	r3, r2, #16
 801c70a:	d447      	bmi.n	801c79c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c70c:	42b3      	cmp	r3, r6
 801c70e:	b224      	sxth	r4, r4
 801c710:	da44      	bge.n	801c79c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c712:	9901      	ldr	r1, [sp, #4]
 801c714:	fb03 1404 	mla	r4, r3, r4, r1
 801c718:	9902      	ldr	r1, [sp, #8]
 801c71a:	5c23      	ldrb	r3, [r4, r0]
 801c71c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801c720:	0e0b      	lsrs	r3, r1, #24
 801c722:	d03b      	beq.n	801c79c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c724:	9805      	ldr	r0, [sp, #20]
 801c726:	f3c1 4807 	ubfx	r8, r1, #16, #8
 801c72a:	fb00 f003 	mul.w	r0, r0, r3
 801c72e:	1c43      	adds	r3, r0, #1
 801c730:	eb03 2320 	add.w	r3, r3, r0, asr #8
 801c734:	121b      	asrs	r3, r3, #8
 801c736:	43d8      	mvns	r0, r3
 801c738:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801c73c:	b29b      	uxth	r3, r3
 801c73e:	b2c9      	uxtb	r1, r1
 801c740:	882e      	ldrh	r6, [r5, #0]
 801c742:	fb1c fc03 	smulbb	ip, ip, r3
 801c746:	fb18 f803 	smulbb	r8, r8, r3
 801c74a:	fb11 f303 	smulbb	r3, r1, r3
 801c74e:	10f4      	asrs	r4, r6, #3
 801c750:	1231      	asrs	r1, r6, #8
 801c752:	00f6      	lsls	r6, r6, #3
 801c754:	b2c0      	uxtb	r0, r0
 801c756:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 801c75a:	b2f6      	uxtb	r6, r6
 801c75c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801c760:	fb01 8800 	mla	r8, r1, r0, r8
 801c764:	fb04 c400 	mla	r4, r4, r0, ip
 801c768:	fb06 3100 	mla	r1, r6, r0, r3
 801c76c:	fa1f fc88 	uxth.w	ip, r8
 801c770:	b289      	uxth	r1, r1
 801c772:	b2a4      	uxth	r4, r4
 801c774:	1c4e      	adds	r6, r1, #1
 801c776:	1c60      	adds	r0, r4, #1
 801c778:	f10c 0301 	add.w	r3, ip, #1
 801c77c:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801c780:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801c784:	eb00 2114 	add.w	r1, r0, r4, lsr #8
 801c788:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801c78c:	f3c6 20c4 	ubfx	r0, r6, #11, #5
 801c790:	0949      	lsrs	r1, r1, #5
 801c792:	4303      	orrs	r3, r0
 801c794:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801c798:	430b      	orrs	r3, r1
 801c79a:	802b      	strh	r3, [r5, #0]
 801c79c:	3502      	adds	r5, #2
 801c79e:	4575      	cmp	r5, lr
 801c7a0:	4452      	add	r2, sl
 801c7a2:	d1a9      	bne.n	801c6f8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801c7a4:	9b03      	ldr	r3, [sp, #12]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	f73f af68 	bgt.w	801c67c <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c7ac:	b007      	add	sp, #28
 801c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7b2:	f43f af5f 	beq.w	801c674 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c7b6:	f103 38ff 	add.w	r8, r3, #4294967295
 801c7ba:	fb08 7c09 	mla	ip, r8, r9, r7
 801c7be:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c7c2:	f53f af57 	bmi.w	801c674 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c7c6:	4561      	cmp	r1, ip
 801c7c8:	dd5c      	ble.n	801c884 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c7ca:	fb08 280a 	mla	r8, r8, sl, r2
 801c7ce:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c7d2:	d457      	bmi.n	801c884 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c7d4:	45a8      	cmp	r8, r5
 801c7d6:	da55      	bge.n	801c884 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	f77f af4b 	ble.w	801c674 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c7de:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801c7e2:	e001      	b.n	801c7e8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c7e4:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 801c7e8:	9801      	ldr	r0, [sp, #4]
 801c7ea:	1413      	asrs	r3, r2, #16
 801c7ec:	fb01 0303 	mla	r3, r1, r3, r0
 801c7f0:	1439      	asrs	r1, r7, #16
 801c7f2:	5c5b      	ldrb	r3, [r3, r1]
 801c7f4:	9902      	ldr	r1, [sp, #8]
 801c7f6:	444f      	add	r7, r9
 801c7f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801c7fc:	4452      	add	r2, sl
 801c7fe:	0e18      	lsrs	r0, r3, #24
 801c800:	d03b      	beq.n	801c87a <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c802:	9905      	ldr	r1, [sp, #20]
 801c804:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801c808:	fb01 f100 	mul.w	r1, r1, r0
 801c80c:	1c48      	adds	r0, r1, #1
 801c80e:	eb00 2021 	add.w	r0, r0, r1, asr #8
 801c812:	1200      	asrs	r0, r0, #8
 801c814:	43c1      	mvns	r1, r0
 801c816:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801c81a:	b280      	uxth	r0, r0
 801c81c:	b2db      	uxtb	r3, r3
 801c81e:	f8be 5000 	ldrh.w	r5, [lr]
 801c822:	fb16 f600 	smulbb	r6, r6, r0
 801c826:	fb1c fc00 	smulbb	ip, ip, r0
 801c82a:	fb13 f300 	smulbb	r3, r3, r0
 801c82e:	122c      	asrs	r4, r5, #8
 801c830:	10e8      	asrs	r0, r5, #3
 801c832:	00ed      	lsls	r5, r5, #3
 801c834:	b2c9      	uxtb	r1, r1
 801c836:	b2ed      	uxtb	r5, r5
 801c838:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801c83c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801c840:	fb00 6001 	mla	r0, r0, r1, r6
 801c844:	fb05 3301 	mla	r3, r5, r1, r3
 801c848:	fb04 c401 	mla	r4, r4, r1, ip
 801c84c:	b280      	uxth	r0, r0
 801c84e:	b2a4      	uxth	r4, r4
 801c850:	b29b      	uxth	r3, r3
 801c852:	1c65      	adds	r5, r4, #1
 801c854:	1c5e      	adds	r6, r3, #1
 801c856:	1c41      	adds	r1, r0, #1
 801c858:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801c85c:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801c860:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801c864:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801c868:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c86c:	0949      	lsrs	r1, r1, #5
 801c86e:	431c      	orrs	r4, r3
 801c870:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 801c874:	430c      	orrs	r4, r1
 801c876:	f8ae 4000 	strh.w	r4, [lr]
 801c87a:	f10e 0e02 	add.w	lr, lr, #2
 801c87e:	45c6      	cmp	lr, r8
 801c880:	d1b0      	bne.n	801c7e4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801c882:	e6f7      	b.n	801c674 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c884:	2b00      	cmp	r3, #0
 801c886:	f77f aef5 	ble.w	801c674 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c88a:	4675      	mov	r5, lr
 801c88c:	1438      	asrs	r0, r7, #16
 801c88e:	e730      	b.n	801c6f2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>

0801c890 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c890:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c898:	b085      	sub	sp, #20
 801c89a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c89e:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	@ 0x4c
 801c8a2:	e9dd 0b15 	ldrd	r0, fp, [sp, #84]	@ 0x54
 801c8a6:	6854      	ldr	r4, [r2, #4]
 801c8a8:	e9dd 9a11 	ldrd	r9, sl, [sp, #68]	@ 0x44
 801c8ac:	fb04 1000 	mla	r0, r4, r0, r1
 801c8b0:	6814      	ldr	r4, [r2, #0]
 801c8b2:	e9db 2500 	ldrd	r2, r5, [fp]
 801c8b6:	eb04 0e40 	add.w	lr, r4, r0, lsl #1
 801c8ba:	1d28      	adds	r0, r5, #4
 801c8bc:	9001      	str	r0, [sp, #4]
 801c8be:	9200      	str	r2, [sp, #0]
 801c8c0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	@ 0x3c
 801c8c4:	9802      	ldr	r0, [sp, #8]
 801c8c6:	2800      	cmp	r0, #0
 801c8c8:	dc03      	bgt.n	801c8d2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c8ca:	9803      	ldr	r0, [sp, #12]
 801c8cc:	2800      	cmp	r0, #0
 801c8ce:	f340 80b8 	ble.w	801ca42 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801c8d2:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801c8dc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c8e0:	b228      	sxth	r0, r5
 801c8e2:	b237      	sxth	r7, r6
 801c8e4:	f340 80b0 	ble.w	801ca48 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801c8e8:	140c      	asrs	r4, r1, #16
 801c8ea:	d406      	bmi.n	801c8fa <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c8ec:	4284      	cmp	r4, r0
 801c8ee:	da04      	bge.n	801c8fa <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c8f0:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801c8f4:	d401      	bmi.n	801c8fa <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c8f6:	45bc      	cmp	ip, r7
 801c8f8:	db3c      	blt.n	801c974 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801c8fa:	3b01      	subs	r3, #1
 801c8fc:	4449      	add	r1, r9
 801c8fe:	4452      	add	r2, sl
 801c900:	f10e 0e02 	add.w	lr, lr, #2
 801c904:	d1f0      	bne.n	801c8e8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c906:	9b02      	ldr	r3, [sp, #8]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	f340 809a 	ble.w	801ca42 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 801c90e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c912:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c916:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801c91a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c91e:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801c922:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c926:	ee76 6a62 	vsub.f32	s13, s12, s5
 801c92a:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801c92e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c932:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c936:	ee16 2a90 	vmov	r2, s13
 801c93a:	3b01      	subs	r3, #1
 801c93c:	9302      	str	r3, [sp, #8]
 801c93e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c940:	9803      	ldr	r0, [sp, #12]
 801c942:	fb92 f9f3 	sdiv	r9, r2, r3
 801c946:	ee17 2a10 	vmov	r2, s14
 801c94a:	eeb0 7a43 	vmov.f32	s14, s6
 801c94e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c952:	fb92 faf3 	sdiv	sl, r2, r3
 801c956:	ee17 2a10 	vmov	r2, s14
 801c95a:	eeb0 7a62 	vmov.f32	s14, s5
 801c95e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801c962:	eeb0 3a67 	vmov.f32	s6, s15
 801c966:	ee17 1a10 	vmov	r1, s14
 801c96a:	eef0 2a46 	vmov.f32	s5, s12
 801c96e:	bf08      	it	eq
 801c970:	4603      	moveq	r3, r0
 801c972:	e7a7      	b.n	801c8c4 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c974:	f103 38ff 	add.w	r8, r3, #4294967295
 801c978:	fb08 1c09 	mla	ip, r8, r9, r1
 801c97c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c980:	d56c      	bpl.n	801ca5c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 801c982:	4677      	mov	r7, lr
 801c984:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 801c988:	e002      	b.n	801c990 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801c98a:	140c      	asrs	r4, r1, #16
 801c98c:	e9db 5602 	ldrd	r5, r6, [fp, #8]
 801c990:	2c00      	cmp	r4, #0
 801c992:	db4d      	blt.n	801ca30 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801c994:	42ac      	cmp	r4, r5
 801c996:	da4b      	bge.n	801ca30 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801c998:	1413      	asrs	r3, r2, #16
 801c99a:	d449      	bmi.n	801ca30 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801c99c:	42b3      	cmp	r3, r6
 801c99e:	b22d      	sxth	r5, r5
 801c9a0:	da46      	bge.n	801ca30 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801c9a2:	9800      	ldr	r0, [sp, #0]
 801c9a4:	fb03 0505 	mla	r5, r3, r5, r0
 801c9a8:	9801      	ldr	r0, [sp, #4]
 801c9aa:	5d2b      	ldrb	r3, [r5, r4]
 801c9ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801c9b0:	0e18      	lsrs	r0, r3, #24
 801c9b2:	28ff      	cmp	r0, #255	@ 0xff
 801c9b4:	f000 80c0 	beq.w	801cb38 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c9b8:	b2c4      	uxtb	r4, r0
 801c9ba:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801c9be:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801c9c2:	b2a5      	uxth	r5, r4
 801c9c4:	b2db      	uxtb	r3, r3
 801c9c6:	b398      	cbz	r0, 801ca30 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801c9c8:	43e4      	mvns	r4, r4
 801c9ca:	f8b7 8000 	ldrh.w	r8, [r7]
 801c9ce:	fb16 f605 	smulbb	r6, r6, r5
 801c9d2:	fb1c fc05 	smulbb	ip, ip, r5
 801c9d6:	fb13 f505 	smulbb	r5, r3, r5
 801c9da:	ea4f 2028 	mov.w	r0, r8, asr #8
 801c9de:	b2e3      	uxtb	r3, r4
 801c9e0:	ea4f 04e8 	mov.w	r4, r8, asr #3
 801c9e4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801c9e8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801c9ec:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801c9f0:	fa5f f888 	uxtb.w	r8, r8
 801c9f4:	fb04 6403 	mla	r4, r4, r3, r6
 801c9f8:	fb00 cc03 	mla	ip, r0, r3, ip
 801c9fc:	fb08 5303 	mla	r3, r8, r3, r5
 801ca00:	fa1f fc8c 	uxth.w	ip, ip
 801ca04:	b298      	uxth	r0, r3
 801ca06:	b2a5      	uxth	r5, r4
 801ca08:	f10c 0301 	add.w	r3, ip, #1
 801ca0c:	1c44      	adds	r4, r0, #1
 801ca0e:	1c6e      	adds	r6, r5, #1
 801ca10:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801ca14:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801ca18:	eb06 2015 	add.w	r0, r6, r5, lsr #8
 801ca1c:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801ca20:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ca24:	0940      	lsrs	r0, r0, #5
 801ca26:	4323      	orrs	r3, r4
 801ca28:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801ca2c:	4303      	orrs	r3, r0
 801ca2e:	803b      	strh	r3, [r7, #0]
 801ca30:	3702      	adds	r7, #2
 801ca32:	4577      	cmp	r7, lr
 801ca34:	4449      	add	r1, r9
 801ca36:	4452      	add	r2, sl
 801ca38:	d1a7      	bne.n	801c98a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801ca3a:	9b02      	ldr	r3, [sp, #8]
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	f73f af66 	bgt.w	801c90e <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ca42:	b005      	add	sp, #20
 801ca44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca48:	f43f af5d 	beq.w	801c906 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ca4c:	f103 38ff 	add.w	r8, r3, #4294967295
 801ca50:	fb08 1c09 	mla	ip, r8, r9, r1
 801ca54:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ca58:	f53f af55 	bmi.w	801c906 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ca5c:	4560      	cmp	r0, ip
 801ca5e:	dd65      	ble.n	801cb2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801ca60:	fb08 280a 	mla	r8, r8, sl, r2
 801ca64:	ea5f 4828 	movs.w	r8, r8, asr #16
 801ca68:	d460      	bmi.n	801cb2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801ca6a:	45b8      	cmp	r8, r7
 801ca6c:	da5e      	bge.n	801cb2c <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	f77f af49 	ble.w	801c906 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ca74:	eb0e 0843 	add.w	r8, lr, r3, lsl #1
 801ca78:	e03f      	b.n	801cafa <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ca7a:	b2f0      	uxtb	r0, r6
 801ca7c:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801ca80:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801ca84:	b284      	uxth	r4, r0
 801ca86:	b2db      	uxtb	r3, r3
 801ca88:	b376      	cbz	r6, 801cae8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801ca8a:	43c0      	mvns	r0, r0
 801ca8c:	f8be 6000 	ldrh.w	r6, [lr]
 801ca90:	fb17 f704 	smulbb	r7, r7, r4
 801ca94:	fb1c fc04 	smulbb	ip, ip, r4
 801ca98:	fb13 f304 	smulbb	r3, r3, r4
 801ca9c:	1235      	asrs	r5, r6, #8
 801ca9e:	10f4      	asrs	r4, r6, #3
 801caa0:	00f6      	lsls	r6, r6, #3
 801caa2:	b2c0      	uxtb	r0, r0
 801caa4:	b2f6      	uxtb	r6, r6
 801caa6:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801caaa:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 801caae:	fb04 7400 	mla	r4, r4, r0, r7
 801cab2:	fb06 3300 	mla	r3, r6, r0, r3
 801cab6:	fb05 c500 	mla	r5, r5, r0, ip
 801caba:	b2a4      	uxth	r4, r4
 801cabc:	b2ad      	uxth	r5, r5
 801cabe:	b29b      	uxth	r3, r3
 801cac0:	1c6e      	adds	r6, r5, #1
 801cac2:	1c5f      	adds	r7, r3, #1
 801cac4:	1c60      	adds	r0, r4, #1
 801cac6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801caca:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801cace:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801cad2:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 801cad6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801cada:	0940      	lsrs	r0, r0, #5
 801cadc:	432b      	orrs	r3, r5
 801cade:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801cae2:	4303      	orrs	r3, r0
 801cae4:	f8ae 3000 	strh.w	r3, [lr]
 801cae8:	f10e 0e02 	add.w	lr, lr, #2
 801caec:	45c6      	cmp	lr, r8
 801caee:	4449      	add	r1, r9
 801caf0:	4452      	add	r2, sl
 801caf2:	f43f af08 	beq.w	801c906 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801caf6:	f9bb 0008 	ldrsh.w	r0, [fp, #8]
 801cafa:	9c00      	ldr	r4, [sp, #0]
 801cafc:	1413      	asrs	r3, r2, #16
 801cafe:	fb00 4303 	mla	r3, r0, r3, r4
 801cb02:	1408      	asrs	r0, r1, #16
 801cb04:	5c1b      	ldrb	r3, [r3, r0]
 801cb06:	9801      	ldr	r0, [sp, #4]
 801cb08:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801cb0c:	0e1e      	lsrs	r6, r3, #24
 801cb0e:	2eff      	cmp	r6, #255	@ 0xff
 801cb10:	d1b3      	bne.n	801ca7a <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cb12:	0958      	lsrs	r0, r3, #5
 801cb14:	f400 64fc 	and.w	r4, r0, #2016	@ 0x7e0
 801cb18:	480d      	ldr	r0, [pc, #52]	@ (801cb50 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801cb1a:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801cb1e:	4320      	orrs	r0, r4
 801cb20:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801cb24:	4303      	orrs	r3, r0
 801cb26:	f8ae 3000 	strh.w	r3, [lr]
 801cb2a:	e7dd      	b.n	801cae8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	f77f aeea 	ble.w	801c906 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cb32:	4677      	mov	r7, lr
 801cb34:	140c      	asrs	r4, r1, #16
 801cb36:	e725      	b.n	801c984 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801cb38:	0958      	lsrs	r0, r3, #5
 801cb3a:	f400 64fc 	and.w	r4, r0, #2016	@ 0x7e0
 801cb3e:	4804      	ldr	r0, [pc, #16]	@ (801cb50 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801cb40:	ea00 2013 	and.w	r0, r0, r3, lsr #8
 801cb44:	4320      	orrs	r0, r4
 801cb46:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801cb4a:	4303      	orrs	r3, r0
 801cb4c:	803b      	strh	r3, [r7, #0]
 801cb4e:	e76f      	b.n	801ca30 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 801cb50:	fffff800 	.word	0xfffff800

0801cb54 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb58:	b089      	sub	sp, #36	@ 0x24
 801cb5a:	f89d 506c 	ldrb.w	r5, [sp, #108]	@ 0x6c
 801cb5e:	9104      	str	r1, [sp, #16]
 801cb60:	ea6f 0c05 	mvn.w	ip, r5
 801cb64:	e9dd 4117 	ldrd	r4, r1, [sp, #92]	@ 0x5c
 801cb68:	e9dd 6715 	ldrd	r6, r7, [sp, #84]	@ 0x54
 801cb6c:	6860      	ldr	r0, [r4, #4]
 801cb6e:	9205      	str	r2, [sp, #20]
 801cb70:	e9dd 2b19 	ldrd	r2, fp, [sp, #100]	@ 0x64
 801cb74:	fb00 1102 	mla	r1, r0, r2, r1
 801cb78:	6824      	ldr	r4, [r4, #0]
 801cb7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cb7e:	4421      	add	r1, r4
 801cb80:	f8db 4004 	ldr.w	r4, [fp, #4]
 801cb84:	f8db 2000 	ldr.w	r2, [fp]
 801cb88:	3404      	adds	r4, #4
 801cb8a:	fa5f fc8c 	uxtb.w	ip, ip
 801cb8e:	fa1f f985 	uxth.w	r9, r5
 801cb92:	9407      	str	r4, [sp, #28]
 801cb94:	9202      	str	r2, [sp, #8]
 801cb96:	e9dd 2013 	ldrd	r2, r0, [sp, #76]	@ 0x4c
 801cb9a:	9c04      	ldr	r4, [sp, #16]
 801cb9c:	2c00      	cmp	r4, #0
 801cb9e:	dc03      	bgt.n	801cba8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cba0:	9c05      	ldr	r4, [sp, #20]
 801cba2:	2c00      	cmp	r4, #0
 801cba4:	f340 80b1 	ble.w	801cd0a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801cba8:	e9db e802 	ldrd	lr, r8, [fp, #8]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	fa0f f588 	sxth.w	r5, r8
 801cbb2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801cbb6:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
 801cbba:	fa0f f48e 	sxth.w	r4, lr
 801cbbe:	9503      	str	r5, [sp, #12]
 801cbc0:	f340 80a6 	ble.w	801cd10 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801cbc4:	46f2      	mov	sl, lr
 801cbc6:	9401      	str	r4, [sp, #4]
 801cbc8:	1415      	asrs	r5, r2, #16
 801cbca:	d408      	bmi.n	801cbde <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cbcc:	9c01      	ldr	r4, [sp, #4]
 801cbce:	42a5      	cmp	r5, r4
 801cbd0:	da05      	bge.n	801cbde <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cbd2:	ea5f 4e20 	movs.w	lr, r0, asr #16
 801cbd6:	d402      	bmi.n	801cbde <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801cbd8:	9c03      	ldr	r4, [sp, #12]
 801cbda:	45a6      	cmp	lr, r4
 801cbdc:	db3e      	blt.n	801cc5c <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801cbde:	3b01      	subs	r3, #1
 801cbe0:	4432      	add	r2, r6
 801cbe2:	4438      	add	r0, r7
 801cbe4:	f101 0103 	add.w	r1, r1, #3
 801cbe8:	d1ee      	bne.n	801cbc8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cbea:	9b04      	ldr	r3, [sp, #16]
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	f340 808c 	ble.w	801cd0a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801cbf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cbf6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbfe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cc02:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc06:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801cc0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc0e:	ee76 6a62 	vsub.f32	s13, s12, s5
 801cc12:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801cc16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc1a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cc1e:	ee16 2a90 	vmov	r2, s13
 801cc22:	3b01      	subs	r3, #1
 801cc24:	9304      	str	r3, [sp, #16]
 801cc26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cc28:	9c05      	ldr	r4, [sp, #20]
 801cc2a:	fb92 f6f3 	sdiv	r6, r2, r3
 801cc2e:	ee17 2a10 	vmov	r2, s14
 801cc32:	eeb0 7a43 	vmov.f32	s14, s6
 801cc36:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cc3a:	ee17 0a10 	vmov	r0, s14
 801cc3e:	eeb0 7a62 	vmov.f32	s14, s5
 801cc42:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cc46:	fb92 f7f3 	sdiv	r7, r2, r3
 801cc4a:	eeb0 3a67 	vmov.f32	s6, s15
 801cc4e:	ee17 2a10 	vmov	r2, s14
 801cc52:	eef0 2a46 	vmov.f32	s5, s12
 801cc56:	bf08      	it	eq
 801cc58:	4623      	moveq	r3, r4
 801cc5a:	e79e      	b.n	801cb9a <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801cc5c:	9506      	str	r5, [sp, #24]
 801cc5e:	1e5d      	subs	r5, r3, #1
 801cc60:	46d6      	mov	lr, sl
 801cc62:	fb05 2a06 	mla	sl, r5, r6, r2
 801cc66:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801cc6a:	9c01      	ldr	r4, [sp, #4]
 801cc6c:	9501      	str	r5, [sp, #4]
 801cc6e:	d559      	bpl.n	801cd24 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801cc70:	460c      	mov	r4, r1
 801cc72:	9d06      	ldr	r5, [sp, #24]
 801cc74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc78:	4419      	add	r1, r3
 801cc7a:	4673      	mov	r3, lr
 801cc7c:	46b6      	mov	lr, r6
 801cc7e:	4646      	mov	r6, r8
 801cc80:	e002      	b.n	801cc88 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801cc82:	1415      	asrs	r5, r2, #16
 801cc84:	e9db 3602 	ldrd	r3, r6, [fp, #8]
 801cc88:	2d00      	cmp	r5, #0
 801cc8a:	4472      	add	r2, lr
 801cc8c:	db35      	blt.n	801ccfa <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc8e:	429d      	cmp	r5, r3
 801cc90:	da33      	bge.n	801ccfa <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc92:	ea5f 4820 	movs.w	r8, r0, asr #16
 801cc96:	d430      	bmi.n	801ccfa <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc98:	45b0      	cmp	r8, r6
 801cc9a:	b21b      	sxth	r3, r3
 801cc9c:	da2d      	bge.n	801ccfa <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801cc9e:	9e02      	ldr	r6, [sp, #8]
 801cca0:	fb08 6303 	mla	r3, r8, r3, r6
 801cca4:	7826      	ldrb	r6, [r4, #0]
 801cca6:	5d5b      	ldrb	r3, [r3, r5]
 801cca8:	fb16 f80c 	smulbb	r8, r6, ip
 801ccac:	9d07      	ldr	r5, [sp, #28]
 801ccae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ccb2:	5cee      	ldrb	r6, [r5, r3]
 801ccb4:	442b      	add	r3, r5
 801ccb6:	fb06 8609 	mla	r6, r6, r9, r8
 801ccba:	b2b6      	uxth	r6, r6
 801ccbc:	7865      	ldrb	r5, [r4, #1]
 801ccbe:	f106 0801 	add.w	r8, r6, #1
 801ccc2:	eb08 2616 	add.w	r6, r8, r6, lsr #8
 801ccc6:	1236      	asrs	r6, r6, #8
 801ccc8:	fb15 f80c 	smulbb	r8, r5, ip
 801cccc:	7026      	strb	r6, [r4, #0]
 801ccce:	785d      	ldrb	r5, [r3, #1]
 801ccd0:	78a6      	ldrb	r6, [r4, #2]
 801ccd2:	fb05 8509 	mla	r5, r5, r9, r8
 801ccd6:	b2ad      	uxth	r5, r5
 801ccd8:	f105 0801 	add.w	r8, r5, #1
 801ccdc:	eb08 2515 	add.w	r5, r8, r5, lsr #8
 801cce0:	122d      	asrs	r5, r5, #8
 801cce2:	fb16 f60c 	smulbb	r6, r6, ip
 801cce6:	7065      	strb	r5, [r4, #1]
 801cce8:	789b      	ldrb	r3, [r3, #2]
 801ccea:	fb03 6309 	mla	r3, r3, r9, r6
 801ccee:	b29b      	uxth	r3, r3
 801ccf0:	1c5d      	adds	r5, r3, #1
 801ccf2:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801ccf6:	121b      	asrs	r3, r3, #8
 801ccf8:	70a3      	strb	r3, [r4, #2]
 801ccfa:	3403      	adds	r4, #3
 801ccfc:	428c      	cmp	r4, r1
 801ccfe:	4438      	add	r0, r7
 801cd00:	d1bf      	bne.n	801cc82 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801cd02:	9b04      	ldr	r3, [sp, #16]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	f73f af74 	bgt.w	801cbf2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801cd0a:	b009      	add	sp, #36	@ 0x24
 801cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd10:	f43f af6b 	beq.w	801cbea <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cd14:	1e5d      	subs	r5, r3, #1
 801cd16:	fb05 2a06 	mla	sl, r5, r6, r2
 801cd1a:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801cd1e:	9501      	str	r5, [sp, #4]
 801cd20:	f53f af63 	bmi.w	801cbea <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cd24:	4554      	cmp	r4, sl
 801cd26:	dd54      	ble.n	801cdd2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cd28:	9d01      	ldr	r5, [sp, #4]
 801cd2a:	fb05 0507 	mla	r5, r5, r7, r0
 801cd2e:	ea5f 4a25 	movs.w	sl, r5, asr #16
 801cd32:	d44e      	bmi.n	801cdd2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cd34:	9d03      	ldr	r5, [sp, #12]
 801cd36:	45aa      	cmp	sl, r5
 801cd38:	da4b      	bge.n	801cdd2 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	f77f af55 	ble.w	801cbea <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cd40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd44:	eb01 0e03 	add.w	lr, r1, r3
 801cd48:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801cd4c:	3103      	adds	r1, #3
 801cd4e:	e002      	b.n	801cd56 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801cd50:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801cd54:	3103      	adds	r1, #3
 801cd56:	9d02      	ldr	r5, [sp, #8]
 801cd58:	1403      	asrs	r3, r0, #16
 801cd5a:	fb04 5303 	mla	r3, r4, r3, r5
 801cd5e:	1415      	asrs	r5, r2, #16
 801cd60:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 801cd64:	5d5b      	ldrb	r3, [r3, r5]
 801cd66:	fb14 f40c 	smulbb	r4, r4, ip
 801cd6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd6e:	f818 5003 	ldrb.w	r5, [r8, r3]
 801cd72:	4443      	add	r3, r8
 801cd74:	fb05 4509 	mla	r5, r5, r9, r4
 801cd78:	b2ad      	uxth	r5, r5
 801cd7a:	f105 0a01 	add.w	sl, r5, #1
 801cd7e:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 801cd82:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801cd86:	122d      	asrs	r5, r5, #8
 801cd88:	fb14 f40c 	smulbb	r4, r4, ip
 801cd8c:	f801 5c03 	strb.w	r5, [r1, #-3]
 801cd90:	785d      	ldrb	r5, [r3, #1]
 801cd92:	f811 ac01 	ldrb.w	sl, [r1, #-1]
 801cd96:	fb05 4409 	mla	r4, r5, r9, r4
 801cd9a:	b2a4      	uxth	r4, r4
 801cd9c:	1c65      	adds	r5, r4, #1
 801cd9e:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801cda2:	1224      	asrs	r4, r4, #8
 801cda4:	fb1a fa0c 	smulbb	sl, sl, ip
 801cda8:	f801 4c02 	strb.w	r4, [r1, #-2]
 801cdac:	789b      	ldrb	r3, [r3, #2]
 801cdae:	458e      	cmp	lr, r1
 801cdb0:	fb03 aa09 	mla	sl, r3, r9, sl
 801cdb4:	fa1f fa8a 	uxth.w	sl, sl
 801cdb8:	f10a 0301 	add.w	r3, sl, #1
 801cdbc:	eb03 2a1a 	add.w	sl, r3, sl, lsr #8
 801cdc0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cdc4:	4438      	add	r0, r7
 801cdc6:	4432      	add	r2, r6
 801cdc8:	f801 ac01 	strb.w	sl, [r1, #-1]
 801cdcc:	d1c0      	bne.n	801cd50 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801cdce:	4671      	mov	r1, lr
 801cdd0:	e70b      	b.n	801cbea <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	f77f af09 	ble.w	801cbea <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cdd8:	1415      	asrs	r5, r2, #16
 801cdda:	460c      	mov	r4, r1
 801cddc:	9506      	str	r5, [sp, #24]
 801cdde:	e749      	b.n	801cc74 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>

0801cde0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cde4:	4689      	mov	r9, r1
 801cde6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801cdea:	46c8      	mov	r8, r9
 801cdec:	b087      	sub	sp, #28
 801cdee:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	@ 0x54
 801cdf2:	684c      	ldr	r4, [r1, #4]
 801cdf4:	9203      	str	r2, [sp, #12]
 801cdf6:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	@ 0x5c
 801cdfa:	fb04 0202 	mla	r2, r4, r2, r0
 801cdfe:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801ce02:	680d      	ldr	r5, [r1, #0]
 801ce04:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801ce08:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801ce0c:	f8dc 2000 	ldr.w	r2, [ip]
 801ce10:	4428      	add	r0, r5
 801ce12:	f104 0b04 	add.w	fp, r4, #4
 801ce16:	9205      	str	r2, [sp, #20]
 801ce18:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801ce1c:	f1b8 0f00 	cmp.w	r8, #0
 801ce20:	dc03      	bgt.n	801ce2a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ce22:	9c03      	ldr	r4, [sp, #12]
 801ce24:	2c00      	cmp	r4, #0
 801ce26:	f340 808d 	ble.w	801cf44 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ce2a:	e9dc ea02 	ldrd	lr, sl, [ip, #8]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	fa0f f58a 	sxth.w	r5, sl
 801ce34:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ce38:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801ce3c:	fa0f f48e 	sxth.w	r4, lr
 801ce40:	9502      	str	r5, [sp, #8]
 801ce42:	f340 8082 	ble.w	801cf4a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ce46:	46f1      	mov	r9, lr
 801ce48:	9401      	str	r4, [sp, #4]
 801ce4a:	1415      	asrs	r5, r2, #16
 801ce4c:	d408      	bmi.n	801ce60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ce4e:	9c01      	ldr	r4, [sp, #4]
 801ce50:	42a5      	cmp	r5, r4
 801ce52:	da05      	bge.n	801ce60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ce54:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801ce58:	d402      	bmi.n	801ce60 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ce5a:	9c02      	ldr	r4, [sp, #8]
 801ce5c:	45a6      	cmp	lr, r4
 801ce5e:	db3b      	blt.n	801ced8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801ce60:	3b01      	subs	r3, #1
 801ce62:	4432      	add	r2, r6
 801ce64:	4439      	add	r1, r7
 801ce66:	f100 0003 	add.w	r0, r0, #3
 801ce6a:	d1ee      	bne.n	801ce4a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ce6c:	f1b8 0f00 	cmp.w	r8, #0
 801ce70:	dd68      	ble.n	801cf44 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ce72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce7a:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801ce7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce82:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801ce86:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce8a:	ee76 6a62 	vsub.f32	s13, s12, s5
 801ce8e:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801ce92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ce96:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ce9a:	ee16 2a90 	vmov	r2, s13
 801ce9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cea0:	9c03      	ldr	r4, [sp, #12]
 801cea2:	fb92 f6f3 	sdiv	r6, r2, r3
 801cea6:	ee17 2a10 	vmov	r2, s14
 801ceaa:	eeb0 7a43 	vmov.f32	s14, s6
 801ceae:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ceb2:	ee17 1a10 	vmov	r1, s14
 801ceb6:	eeb0 7a62 	vmov.f32	s14, s5
 801ceba:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cebe:	f1b8 0801 	subs.w	r8, r8, #1
 801cec2:	fb92 f7f3 	sdiv	r7, r2, r3
 801cec6:	eeb0 3a67 	vmov.f32	s6, s15
 801ceca:	ee17 2a10 	vmov	r2, s14
 801cece:	eef0 2a46 	vmov.f32	s5, s12
 801ced2:	bf08      	it	eq
 801ced4:	4623      	moveq	r3, r4
 801ced6:	e7a1      	b.n	801ce1c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ced8:	9c01      	ldr	r4, [sp, #4]
 801ceda:	9501      	str	r5, [sp, #4]
 801cedc:	1e5d      	subs	r5, r3, #1
 801cede:	46ce      	mov	lr, r9
 801cee0:	fb06 2905 	mla	r9, r6, r5, r2
 801cee4:	ea5f 4929 	movs.w	r9, r9, asr #16
 801cee8:	9504      	str	r5, [sp, #16]
 801ceea:	d536      	bpl.n	801cf5a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801ceec:	4604      	mov	r4, r0
 801ceee:	9d01      	ldr	r5, [sp, #4]
 801cef0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cef4:	4418      	add	r0, r3
 801cef6:	4673      	mov	r3, lr
 801cef8:	46b6      	mov	lr, r6
 801cefa:	4656      	mov	r6, sl
 801cefc:	e002      	b.n	801cf04 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801cefe:	1415      	asrs	r5, r2, #16
 801cf00:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801cf04:	2d00      	cmp	r5, #0
 801cf06:	4472      	add	r2, lr
 801cf08:	db15      	blt.n	801cf36 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cf0a:	429d      	cmp	r5, r3
 801cf0c:	da13      	bge.n	801cf36 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cf0e:	ea5f 4921 	movs.w	r9, r1, asr #16
 801cf12:	d410      	bmi.n	801cf36 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cf14:	45b1      	cmp	r9, r6
 801cf16:	da0e      	bge.n	801cf36 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cf18:	9e05      	ldr	r6, [sp, #20]
 801cf1a:	b21b      	sxth	r3, r3
 801cf1c:	fb09 6303 	mla	r3, r9, r3, r6
 801cf20:	5d5b      	ldrb	r3, [r3, r5]
 801cf22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf26:	f81b 5003 	ldrb.w	r5, [fp, r3]
 801cf2a:	445b      	add	r3, fp
 801cf2c:	7025      	strb	r5, [r4, #0]
 801cf2e:	785d      	ldrb	r5, [r3, #1]
 801cf30:	7065      	strb	r5, [r4, #1]
 801cf32:	789b      	ldrb	r3, [r3, #2]
 801cf34:	70a3      	strb	r3, [r4, #2]
 801cf36:	3403      	adds	r4, #3
 801cf38:	4284      	cmp	r4, r0
 801cf3a:	4439      	add	r1, r7
 801cf3c:	d1df      	bne.n	801cefe <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801cf3e:	f1b8 0f00 	cmp.w	r8, #0
 801cf42:	dc96      	bgt.n	801ce72 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cf44:	b007      	add	sp, #28
 801cf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf4a:	d08f      	beq.n	801ce6c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cf4c:	1e5d      	subs	r5, r3, #1
 801cf4e:	fb06 2905 	mla	r9, r6, r5, r2
 801cf52:	ea5f 4929 	movs.w	r9, r9, asr #16
 801cf56:	9504      	str	r5, [sp, #16]
 801cf58:	d488      	bmi.n	801ce6c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cf5a:	45a1      	cmp	r9, r4
 801cf5c:	da2d      	bge.n	801cfba <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801cf5e:	9d04      	ldr	r5, [sp, #16]
 801cf60:	fb07 1505 	mla	r5, r7, r5, r1
 801cf64:	ea5f 4925 	movs.w	r9, r5, asr #16
 801cf68:	d427      	bmi.n	801cfba <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801cf6a:	9d02      	ldr	r5, [sp, #8]
 801cf6c:	454d      	cmp	r5, r9
 801cf6e:	dd24      	ble.n	801cfba <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	f77f af7b 	ble.w	801ce6c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cf76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf7a:	18c5      	adds	r5, r0, r3
 801cf7c:	f8dd e014 	ldr.w	lr, [sp, #20]
 801cf80:	3003      	adds	r0, #3
 801cf82:	e002      	b.n	801cf8a <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cf84:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801cf88:	3003      	adds	r0, #3
 801cf8a:	140b      	asrs	r3, r1, #16
 801cf8c:	fb04 e303 	mla	r3, r4, r3, lr
 801cf90:	1414      	asrs	r4, r2, #16
 801cf92:	5d1b      	ldrb	r3, [r3, r4]
 801cf94:	4285      	cmp	r5, r0
 801cf96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf9a:	f81b 4003 	ldrb.w	r4, [fp, r3]
 801cf9e:	445b      	add	r3, fp
 801cfa0:	f800 4c03 	strb.w	r4, [r0, #-3]
 801cfa4:	785c      	ldrb	r4, [r3, #1]
 801cfa6:	4439      	add	r1, r7
 801cfa8:	f800 4c02 	strb.w	r4, [r0, #-2]
 801cfac:	789b      	ldrb	r3, [r3, #2]
 801cfae:	4432      	add	r2, r6
 801cfb0:	f800 3c01 	strb.w	r3, [r0, #-1]
 801cfb4:	d1e6      	bne.n	801cf84 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801cfb6:	4628      	mov	r0, r5
 801cfb8:	e758      	b.n	801ce6c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	f77f af56 	ble.w	801ce6c <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cfc0:	1415      	asrs	r5, r2, #16
 801cfc2:	4604      	mov	r4, r0
 801cfc4:	9501      	str	r5, [sp, #4]
 801cfc6:	e793      	b.n	801cef0 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>

0801cfc8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfcc:	b087      	sub	sp, #28
 801cfce:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801cfd2:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	@ 0x54
 801cfd6:	e9dd 2c17 	ldrd	r2, ip, [sp, #92]	@ 0x5c
 801cfda:	684c      	ldr	r4, [r1, #4]
 801cfdc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801cfe0:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801cfe4:	fb04 0202 	mla	r2, r4, r2, r0
 801cfe8:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 801cfec:	f8dc 2000 	ldr.w	r2, [ip]
 801cff0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801cff4:	9201      	str	r2, [sp, #4]
 801cff6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801cffa:	6808      	ldr	r0, [r1, #0]
 801cffc:	9204      	str	r2, [sp, #16]
 801cffe:	1d22      	adds	r2, r4, #4
 801d000:	e9dd e111 	ldrd	lr, r1, [sp, #68]	@ 0x44
 801d004:	9205      	str	r2, [sp, #20]
 801d006:	4672      	mov	r2, lr
 801d008:	4428      	add	r0, r5
 801d00a:	9c02      	ldr	r4, [sp, #8]
 801d00c:	2c00      	cmp	r4, #0
 801d00e:	dc03      	bgt.n	801d018 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d010:	9c03      	ldr	r4, [sp, #12]
 801d012:	2c00      	cmp	r4, #0
 801d014:	f340 80ba 	ble.w	801d18c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801d018:	e9dc e802 	ldrd	lr, r8, [ip, #8]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d022:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801d026:	fa0f f48e 	sxth.w	r4, lr
 801d02a:	fa0f f988 	sxth.w	r9, r8
 801d02e:	f340 80b0 	ble.w	801d192 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d032:	1415      	asrs	r5, r2, #16
 801d034:	d406      	bmi.n	801d044 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d036:	42a5      	cmp	r5, r4
 801d038:	da04      	bge.n	801d044 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d03a:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801d03e:	d401      	bmi.n	801d044 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d040:	45ca      	cmp	sl, r9
 801d042:	db3c      	blt.n	801d0be <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801d044:	3b01      	subs	r3, #1
 801d046:	4432      	add	r2, r6
 801d048:	4439      	add	r1, r7
 801d04a:	f100 0003 	add.w	r0, r0, #3
 801d04e:	d1f0      	bne.n	801d032 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d050:	9b02      	ldr	r3, [sp, #8]
 801d052:	2b00      	cmp	r3, #0
 801d054:	f340 809a 	ble.w	801d18c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801d058:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d05c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d060:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d064:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d068:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d06c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d070:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d074:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d078:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d07c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d080:	ee16 2a90 	vmov	r2, s13
 801d084:	3b01      	subs	r3, #1
 801d086:	9302      	str	r3, [sp, #8]
 801d088:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d08a:	9c03      	ldr	r4, [sp, #12]
 801d08c:	fb92 f6f3 	sdiv	r6, r2, r3
 801d090:	ee17 2a10 	vmov	r2, s14
 801d094:	eeb0 7a43 	vmov.f32	s14, s6
 801d098:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d09c:	ee17 1a10 	vmov	r1, s14
 801d0a0:	eeb0 7a62 	vmov.f32	s14, s5
 801d0a4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d0a8:	fb92 f7f3 	sdiv	r7, r2, r3
 801d0ac:	eeb0 3a67 	vmov.f32	s6, s15
 801d0b0:	ee17 2a10 	vmov	r2, s14
 801d0b4:	eef0 2a46 	vmov.f32	s5, s12
 801d0b8:	bf08      	it	eq
 801d0ba:	4623      	moveq	r3, r4
 801d0bc:	e7a5      	b.n	801d00a <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d0be:	f103 3bff 	add.w	fp, r3, #4294967295
 801d0c2:	fb0b 2a06 	mla	sl, fp, r6, r2
 801d0c6:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801d0ca:	d56c      	bpl.n	801d1a6 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801d0cc:	4604      	mov	r4, r0
 801d0ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0d2:	4418      	add	r0, r3
 801d0d4:	4673      	mov	r3, lr
 801d0d6:	46b6      	mov	lr, r6
 801d0d8:	4646      	mov	r6, r8
 801d0da:	e002      	b.n	801d0e2 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801d0dc:	1415      	asrs	r5, r2, #16
 801d0de:	e9dc 3602 	ldrd	r3, r6, [ip, #8]
 801d0e2:	2d00      	cmp	r5, #0
 801d0e4:	4472      	add	r2, lr
 801d0e6:	db49      	blt.n	801d17c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d0e8:	429d      	cmp	r5, r3
 801d0ea:	da47      	bge.n	801d17c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d0ec:	ea5f 4821 	movs.w	r8, r1, asr #16
 801d0f0:	d444      	bmi.n	801d17c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d0f2:	45b0      	cmp	r8, r6
 801d0f4:	b21b      	sxth	r3, r3
 801d0f6:	da41      	bge.n	801d17c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d0f8:	9e01      	ldr	r6, [sp, #4]
 801d0fa:	fb08 6303 	mla	r3, r8, r3, r6
 801d0fe:	5d5b      	ldrb	r3, [r3, r5]
 801d100:	9d05      	ldr	r5, [sp, #20]
 801d102:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801d106:	0e1d      	lsrs	r5, r3, #24
 801d108:	d038      	beq.n	801d17c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801d10a:	9e04      	ldr	r6, [sp, #16]
 801d10c:	fa5f f983 	uxtb.w	r9, r3
 801d110:	fb06 f605 	mul.w	r6, r6, r5
 801d114:	1c75      	adds	r5, r6, #1
 801d116:	eb05 2526 	add.w	r5, r5, r6, asr #8
 801d11a:	122d      	asrs	r5, r5, #8
 801d11c:	43ee      	mvns	r6, r5
 801d11e:	b2ad      	uxth	r5, r5
 801d120:	fb19 f905 	smulbb	r9, r9, r5
 801d124:	f3c3 2807 	ubfx	r8, r3, #8, #8
 801d128:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d12c:	f894 a000 	ldrb.w	sl, [r4]
 801d130:	fb18 f805 	smulbb	r8, r8, r5
 801d134:	fb13 f305 	smulbb	r3, r3, r5
 801d138:	b2f5      	uxtb	r5, r6
 801d13a:	fb0a 9605 	mla	r6, sl, r5, r9
 801d13e:	f894 b001 	ldrb.w	fp, [r4, #1]
 801d142:	f894 9002 	ldrb.w	r9, [r4, #2]
 801d146:	fb0b 8805 	mla	r8, fp, r5, r8
 801d14a:	fb09 3305 	mla	r3, r9, r5, r3
 801d14e:	fa1f fa86 	uxth.w	sl, r6
 801d152:	fa1f f888 	uxth.w	r8, r8
 801d156:	b29b      	uxth	r3, r3
 801d158:	f10a 0601 	add.w	r6, sl, #1
 801d15c:	f108 0501 	add.w	r5, r8, #1
 801d160:	f103 0901 	add.w	r9, r3, #1
 801d164:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 801d168:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801d16c:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 801d170:	1236      	asrs	r6, r6, #8
 801d172:	122d      	asrs	r5, r5, #8
 801d174:	121b      	asrs	r3, r3, #8
 801d176:	7026      	strb	r6, [r4, #0]
 801d178:	7065      	strb	r5, [r4, #1]
 801d17a:	70a3      	strb	r3, [r4, #2]
 801d17c:	3403      	adds	r4, #3
 801d17e:	4284      	cmp	r4, r0
 801d180:	4439      	add	r1, r7
 801d182:	d1ab      	bne.n	801d0dc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d184:	9b02      	ldr	r3, [sp, #8]
 801d186:	2b00      	cmp	r3, #0
 801d188:	f73f af66 	bgt.w	801d058 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d18c:	b007      	add	sp, #28
 801d18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d192:	f43f af5d 	beq.w	801d050 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d196:	f103 3bff 	add.w	fp, r3, #4294967295
 801d19a:	fb0b 2a06 	mla	sl, fp, r6, r2
 801d19e:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801d1a2:	f53f af55 	bmi.w	801d050 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d1a6:	4554      	cmp	r4, sl
 801d1a8:	dd64      	ble.n	801d274 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d1aa:	fb0b 1b07 	mla	fp, fp, r7, r1
 801d1ae:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801d1b2:	d45f      	bmi.n	801d274 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d1b4:	45cb      	cmp	fp, r9
 801d1b6:	da5d      	bge.n	801d274 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	f77f af49 	ble.w	801d050 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d1be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1c2:	eb00 0e03 	add.w	lr, r0, r3
 801d1c6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d1ca:	3003      	adds	r0, #3
 801d1cc:	e002      	b.n	801d1d4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d1ce:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 801d1d2:	3003      	adds	r0, #3
 801d1d4:	9d01      	ldr	r5, [sp, #4]
 801d1d6:	140b      	asrs	r3, r1, #16
 801d1d8:	fb04 5303 	mla	r3, r4, r3, r5
 801d1dc:	1414      	asrs	r4, r2, #16
 801d1de:	5d1b      	ldrb	r3, [r3, r4]
 801d1e0:	4432      	add	r2, r6
 801d1e2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801d1e6:	4439      	add	r1, r7
 801d1e8:	ea5f 6a13 	movs.w	sl, r3, lsr #24
 801d1ec:	d03e      	beq.n	801d26c <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801d1ee:	9c04      	ldr	r4, [sp, #16]
 801d1f0:	fa5f f983 	uxtb.w	r9, r3
 801d1f4:	fb04 f40a 	mul.w	r4, r4, sl
 801d1f8:	f104 0a01 	add.w	sl, r4, #1
 801d1fc:	eb0a 2a24 	add.w	sl, sl, r4, asr #8
 801d200:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d204:	ea6f 040a 	mvn.w	r4, sl
 801d208:	fa1f fa8a 	uxth.w	sl, sl
 801d20c:	fb19 f90a 	smulbb	r9, r9, sl
 801d210:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801d214:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d218:	fb15 fb0a 	smulbb	fp, r5, sl
 801d21c:	fb13 f30a 	smulbb	r3, r3, sl
 801d220:	f810 ac03 	ldrb.w	sl, [r0, #-3]
 801d224:	b2e4      	uxtb	r4, r4
 801d226:	fb0a 9904 	mla	r9, sl, r4, r9
 801d22a:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 801d22e:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 801d232:	fb05 b504 	mla	r5, r5, r4, fp
 801d236:	fb0a 3304 	mla	r3, sl, r4, r3
 801d23a:	fa1f f989 	uxth.w	r9, r9
 801d23e:	b2ad      	uxth	r5, r5
 801d240:	b29b      	uxth	r3, r3
 801d242:	f109 0b01 	add.w	fp, r9, #1
 801d246:	f105 0a01 	add.w	sl, r5, #1
 801d24a:	1c5c      	adds	r4, r3, #1
 801d24c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d250:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801d254:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d258:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d25c:	122d      	asrs	r5, r5, #8
 801d25e:	121b      	asrs	r3, r3, #8
 801d260:	f800 9c03 	strb.w	r9, [r0, #-3]
 801d264:	f800 5c02 	strb.w	r5, [r0, #-2]
 801d268:	f800 3c01 	strb.w	r3, [r0, #-1]
 801d26c:	4586      	cmp	lr, r0
 801d26e:	d1ae      	bne.n	801d1ce <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801d270:	4670      	mov	r0, lr
 801d272:	e6ed      	b.n	801d050 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d274:	2b00      	cmp	r3, #0
 801d276:	f77f aeeb 	ble.w	801d050 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801d27a:	4604      	mov	r4, r0
 801d27c:	1415      	asrs	r5, r2, #16
 801d27e:	e726      	b.n	801d0ce <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>

0801d280 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d280:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801d284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d288:	b087      	sub	sp, #28
 801d28a:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801d28e:	e9dd 1015 	ldrd	r1, r0, [sp, #84]	@ 0x54
 801d292:	e9dd 2b17 	ldrd	r2, fp, [sp, #92]	@ 0x5c
 801d296:	684c      	ldr	r4, [r1, #4]
 801d298:	680d      	ldr	r5, [r1, #0]
 801d29a:	fb04 0202 	mla	r2, r4, r2, r0
 801d29e:	e9dd 8913 	ldrd	r8, r9, [sp, #76]	@ 0x4c
 801d2a2:	f8db 4004 	ldr.w	r4, [fp, #4]
 801d2a6:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801d2aa:	3404      	adds	r4, #4
 801d2ac:	f8db 2000 	ldr.w	r2, [fp]
 801d2b0:	4428      	add	r0, r5
 801d2b2:	9402      	str	r4, [sp, #8]
 801d2b4:	9201      	str	r2, [sp, #4]
 801d2b6:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801d2ba:	9c03      	ldr	r4, [sp, #12]
 801d2bc:	2c00      	cmp	r4, #0
 801d2be:	dc03      	bgt.n	801d2c8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d2c0:	9c04      	ldr	r4, [sp, #16]
 801d2c2:	2c00      	cmp	r4, #0
 801d2c4:	f340 80b7 	ble.w	801d436 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801d2c8:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d2d2:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801d2d6:	b234      	sxth	r4, r6
 801d2d8:	fa0f fc87 	sxth.w	ip, r7
 801d2dc:	f340 80ae 	ble.w	801d43c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 801d2e0:	1415      	asrs	r5, r2, #16
 801d2e2:	d406      	bmi.n	801d2f2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d2e4:	42a5      	cmp	r5, r4
 801d2e6:	da04      	bge.n	801d2f2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d2e8:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d2ec:	d401      	bmi.n	801d2f2 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d2ee:	45e6      	cmp	lr, ip
 801d2f0:	db3c      	blt.n	801d36c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801d2f2:	3b01      	subs	r3, #1
 801d2f4:	4442      	add	r2, r8
 801d2f6:	4449      	add	r1, r9
 801d2f8:	f100 0003 	add.w	r0, r0, #3
 801d2fc:	d1f0      	bne.n	801d2e0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801d2fe:	9b03      	ldr	r3, [sp, #12]
 801d300:	2b00      	cmp	r3, #0
 801d302:	f340 8098 	ble.w	801d436 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801d306:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d30a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d30e:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d312:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d316:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d31a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d31e:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d322:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d326:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d32a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d32e:	ee16 2a90 	vmov	r2, s13
 801d332:	3b01      	subs	r3, #1
 801d334:	9303      	str	r3, [sp, #12]
 801d336:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d338:	9c04      	ldr	r4, [sp, #16]
 801d33a:	fb92 f8f3 	sdiv	r8, r2, r3
 801d33e:	ee17 2a10 	vmov	r2, s14
 801d342:	eeb0 7a43 	vmov.f32	s14, s6
 801d346:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d34a:	ee17 1a10 	vmov	r1, s14
 801d34e:	eeb0 7a62 	vmov.f32	s14, s5
 801d352:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d356:	fb92 f9f3 	sdiv	r9, r2, r3
 801d35a:	eeb0 3a67 	vmov.f32	s6, s15
 801d35e:	ee17 2a10 	vmov	r2, s14
 801d362:	eef0 2a46 	vmov.f32	s5, s12
 801d366:	bf08      	it	eq
 801d368:	4623      	moveq	r3, r4
 801d36a:	e7a6      	b.n	801d2ba <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d36c:	f103 3aff 	add.w	sl, r3, #4294967295
 801d370:	fb0a 2e08 	mla	lr, sl, r8, r2
 801d374:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d378:	d56a      	bpl.n	801d450 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 801d37a:	4604      	mov	r4, r0
 801d37c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d380:	4418      	add	r0, r3
 801d382:	e002      	b.n	801d38a <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801d384:	1415      	asrs	r5, r2, #16
 801d386:	e9db 6702 	ldrd	r6, r7, [fp, #8]
 801d38a:	2d00      	cmp	r5, #0
 801d38c:	db4a      	blt.n	801d424 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d38e:	42b5      	cmp	r5, r6
 801d390:	da48      	bge.n	801d424 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d392:	140b      	asrs	r3, r1, #16
 801d394:	d446      	bmi.n	801d424 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d396:	42bb      	cmp	r3, r7
 801d398:	b236      	sxth	r6, r6
 801d39a:	da43      	bge.n	801d424 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d39c:	9f01      	ldr	r7, [sp, #4]
 801d39e:	fb03 7606 	mla	r6, r3, r6, r7
 801d3a2:	5d73      	ldrb	r3, [r6, r5]
 801d3a4:	9d02      	ldr	r5, [sp, #8]
 801d3a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801d3aa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d3ae:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d3b2:	f000 80be 	beq.w	801d532 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 801d3b6:	b2df      	uxtb	r7, r3
 801d3b8:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801d3bc:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801d3c0:	fa5f f38c 	uxtb.w	r3, ip
 801d3c4:	b29d      	uxth	r5, r3
 801d3c6:	f1bc 0f00 	cmp.w	ip, #0
 801d3ca:	d02b      	beq.n	801d424 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d3cc:	43db      	mvns	r3, r3
 801d3ce:	b2db      	uxtb	r3, r3
 801d3d0:	9305      	str	r3, [sp, #20]
 801d3d2:	f894 e001 	ldrb.w	lr, [r4, #1]
 801d3d6:	fb17 f305 	smulbb	r3, r7, r5
 801d3da:	9f05      	ldr	r7, [sp, #20]
 801d3dc:	f894 c002 	ldrb.w	ip, [r4, #2]
 801d3e0:	fb1e fe07 	smulbb	lr, lr, r7
 801d3e4:	fb1c fc07 	smulbb	ip, ip, r7
 801d3e8:	fb06 ee05 	mla	lr, r6, r5, lr
 801d3ec:	7827      	ldrb	r7, [r4, #0]
 801d3ee:	9e05      	ldr	r6, [sp, #20]
 801d3f0:	fb0a c505 	mla	r5, sl, r5, ip
 801d3f4:	fb07 3706 	mla	r7, r7, r6, r3
 801d3f8:	b2ab      	uxth	r3, r5
 801d3fa:	b2bf      	uxth	r7, r7
 801d3fc:	fa1f f68e 	uxth.w	r6, lr
 801d400:	1c7d      	adds	r5, r7, #1
 801d402:	f106 0e01 	add.w	lr, r6, #1
 801d406:	f103 0c01 	add.w	ip, r3, #1
 801d40a:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801d40e:	eb0c 2613 	add.w	r6, ip, r3, lsr #8
 801d412:	eb05 2317 	add.w	r3, r5, r7, lsr #8
 801d416:	121b      	asrs	r3, r3, #8
 801d418:	ea4f 272e 	mov.w	r7, lr, asr #8
 801d41c:	1235      	asrs	r5, r6, #8
 801d41e:	7067      	strb	r7, [r4, #1]
 801d420:	70a5      	strb	r5, [r4, #2]
 801d422:	7023      	strb	r3, [r4, #0]
 801d424:	3403      	adds	r4, #3
 801d426:	4284      	cmp	r4, r0
 801d428:	4442      	add	r2, r8
 801d42a:	4449      	add	r1, r9
 801d42c:	d1aa      	bne.n	801d384 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d42e:	9b03      	ldr	r3, [sp, #12]
 801d430:	2b00      	cmp	r3, #0
 801d432:	f73f af68 	bgt.w	801d306 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d436:	b007      	add	sp, #28
 801d438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d43c:	f43f af5f 	beq.w	801d2fe <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d440:	f103 3aff 	add.w	sl, r3, #4294967295
 801d444:	fb0a 2e08 	mla	lr, sl, r8, r2
 801d448:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d44c:	f53f af57 	bmi.w	801d2fe <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d450:	4574      	cmp	r4, lr
 801d452:	dd68      	ble.n	801d526 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d454:	fb0a 1a09 	mla	sl, sl, r9, r1
 801d458:	ea5f 4a2a 	movs.w	sl, sl, asr #16
 801d45c:	d463      	bmi.n	801d526 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d45e:	45e2      	cmp	sl, ip
 801d460:	da61      	bge.n	801d526 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d462:	2b00      	cmp	r3, #0
 801d464:	f77f af4b 	ble.w	801d2fe <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d46c:	eb00 0e03 	add.w	lr, r0, r3
 801d470:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 801d474:	3003      	adds	r0, #3
 801d476:	e03b      	b.n	801d4f0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801d478:	b2fc      	uxtb	r4, r7
 801d47a:	fa5f fc83 	uxtb.w	ip, r3
 801d47e:	f3c3 2607 	ubfx	r6, r3, #8, #8
 801d482:	b2a5      	uxth	r5, r4
 801d484:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d488:	b357      	cbz	r7, 801d4e0 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801d48a:	43e4      	mvns	r4, r4
 801d48c:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 801d490:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801d494:	b2e4      	uxtb	r4, r4
 801d496:	fb1c fc05 	smulbb	ip, ip, r5
 801d49a:	fb18 f804 	smulbb	r8, r8, r4
 801d49e:	fb1a fa04 	smulbb	sl, sl, r4
 801d4a2:	f810 7c03 	ldrb.w	r7, [r0, #-3]
 801d4a6:	fb03 8305 	mla	r3, r3, r5, r8
 801d4aa:	fb06 a605 	mla	r6, r6, r5, sl
 801d4ae:	fb07 c404 	mla	r4, r7, r4, ip
 801d4b2:	b2b6      	uxth	r6, r6
 801d4b4:	b2a4      	uxth	r4, r4
 801d4b6:	b29b      	uxth	r3, r3
 801d4b8:	f106 0c01 	add.w	ip, r6, #1
 801d4bc:	f103 0801 	add.w	r8, r3, #1
 801d4c0:	1c65      	adds	r5, r4, #1
 801d4c2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d4c6:	eb08 2313 	add.w	r3, r8, r3, lsr #8
 801d4ca:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 801d4ce:	1236      	asrs	r6, r6, #8
 801d4d0:	121b      	asrs	r3, r3, #8
 801d4d2:	122d      	asrs	r5, r5, #8
 801d4d4:	f800 6c02 	strb.w	r6, [r0, #-2]
 801d4d8:	f800 3c01 	strb.w	r3, [r0, #-1]
 801d4dc:	f800 5c03 	strb.w	r5, [r0, #-3]
 801d4e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d4e2:	4586      	cmp	lr, r0
 801d4e4:	441a      	add	r2, r3
 801d4e6:	4449      	add	r1, r9
 801d4e8:	d01b      	beq.n	801d522 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d4ea:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 801d4ee:	3003      	adds	r0, #3
 801d4f0:	9d01      	ldr	r5, [sp, #4]
 801d4f2:	140b      	asrs	r3, r1, #16
 801d4f4:	fb04 5303 	mla	r3, r4, r3, r5
 801d4f8:	1414      	asrs	r4, r2, #16
 801d4fa:	5d1b      	ldrb	r3, [r3, r4]
 801d4fc:	9c02      	ldr	r4, [sp, #8]
 801d4fe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d502:	0e1f      	lsrs	r7, r3, #24
 801d504:	2fff      	cmp	r7, #255	@ 0xff
 801d506:	d1b7      	bne.n	801d478 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801d508:	0a1d      	lsrs	r5, r3, #8
 801d50a:	0c1c      	lsrs	r4, r3, #16
 801d50c:	f800 3c03 	strb.w	r3, [r0, #-3]
 801d510:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d512:	4586      	cmp	lr, r0
 801d514:	f800 5c02 	strb.w	r5, [r0, #-2]
 801d518:	f800 4c01 	strb.w	r4, [r0, #-1]
 801d51c:	441a      	add	r2, r3
 801d51e:	4449      	add	r1, r9
 801d520:	d1e3      	bne.n	801d4ea <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d522:	4670      	mov	r0, lr
 801d524:	e6eb      	b.n	801d2fe <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d526:	2b00      	cmp	r3, #0
 801d528:	f77f aee9 	ble.w	801d2fe <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d52c:	4604      	mov	r4, r0
 801d52e:	1415      	asrs	r5, r2, #16
 801d530:	e724      	b.n	801d37c <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801d532:	0a1e      	lsrs	r6, r3, #8
 801d534:	0c1d      	lsrs	r5, r3, #16
 801d536:	7023      	strb	r3, [r4, #0]
 801d538:	7066      	strb	r6, [r4, #1]
 801d53a:	70a5      	strb	r5, [r4, #2]
 801d53c:	e772      	b.n	801d424 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d53e:	bf00      	nop

0801d540 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d544:	b089      	sub	sp, #36	@ 0x24
 801d546:	f89d 006c 	ldrb.w	r0, [sp, #108]	@ 0x6c
 801d54a:	9101      	str	r1, [sp, #4]
 801d54c:	ea6f 0a00 	mvn.w	sl, r0
 801d550:	e9dd e815 	ldrd	lr, r8, [sp, #84]	@ 0x54
 801d554:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801d556:	9202      	str	r2, [sp, #8]
 801d558:	e9dd 5217 	ldrd	r5, r2, [sp, #92]	@ 0x5c
 801d55c:	686c      	ldr	r4, [r5, #4]
 801d55e:	682f      	ldr	r7, [r5, #0]
 801d560:	fb04 2401 	mla	r4, r4, r1, r2
 801d564:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d566:	b280      	uxth	r0, r0
 801d568:	e9d2 2100 	ldrd	r2, r1, [r2]
 801d56c:	3104      	adds	r1, #4
 801d56e:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801d572:	fa5f fa8a 	uxtb.w	sl, sl
 801d576:	9007      	str	r0, [sp, #28]
 801d578:	9105      	str	r1, [sp, #20]
 801d57a:	9200      	str	r2, [sp, #0]
 801d57c:	e9dd 2513 	ldrd	r2, r5, [sp, #76]	@ 0x4c
 801d580:	9901      	ldr	r1, [sp, #4]
 801d582:	2900      	cmp	r1, #0
 801d584:	dc03      	bgt.n	801d58e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d586:	9902      	ldr	r1, [sp, #8]
 801d588:	2900      	cmp	r1, #0
 801d58a:	f340 80b6 	ble.w	801d6fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d58e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d590:	2b00      	cmp	r3, #0
 801d592:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801d596:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d59a:	f505 4500 	add.w	r5, r5, #32768	@ 0x8000
 801d59e:	b221      	sxth	r1, r4
 801d5a0:	fa0f fc86 	sxth.w	ip, r6
 801d5a4:	f340 80ac 	ble.w	801d700 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801d5a8:	1410      	asrs	r0, r2, #16
 801d5aa:	d406      	bmi.n	801d5ba <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5ac:	4288      	cmp	r0, r1
 801d5ae:	da04      	bge.n	801d5ba <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5b0:	ea5f 4925 	movs.w	r9, r5, asr #16
 801d5b4:	d401      	bmi.n	801d5ba <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d5b6:	45e1      	cmp	r9, ip
 801d5b8:	db3e      	blt.n	801d638 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801d5ba:	3b01      	subs	r3, #1
 801d5bc:	4472      	add	r2, lr
 801d5be:	4445      	add	r5, r8
 801d5c0:	f107 0704 	add.w	r7, r7, #4
 801d5c4:	d1f0      	bne.n	801d5a8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d5c6:	9b01      	ldr	r3, [sp, #4]
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	f340 8096 	ble.w	801d6fa <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d5ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d5d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d5e2:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d5e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d5ea:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d5ee:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d5f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d5f6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d5fa:	ee16 2a90 	vmov	r2, s13
 801d5fe:	3b01      	subs	r3, #1
 801d600:	9301      	str	r3, [sp, #4]
 801d602:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d604:	9902      	ldr	r1, [sp, #8]
 801d606:	fb92 fef3 	sdiv	lr, r2, r3
 801d60a:	ee17 2a10 	vmov	r2, s14
 801d60e:	eeb0 7a43 	vmov.f32	s14, s6
 801d612:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d616:	ee17 5a10 	vmov	r5, s14
 801d61a:	eeb0 7a62 	vmov.f32	s14, s5
 801d61e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d622:	fb92 f8f3 	sdiv	r8, r2, r3
 801d626:	eeb0 3a67 	vmov.f32	s6, s15
 801d62a:	ee17 2a10 	vmov	r2, s14
 801d62e:	eef0 2a46 	vmov.f32	s5, s12
 801d632:	bf08      	it	eq
 801d634:	460b      	moveq	r3, r1
 801d636:	e7a3      	b.n	801d580 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d638:	f103 39ff 	add.w	r9, r3, #4294967295
 801d63c:	fb09 2b0e 	mla	fp, r9, lr, r2
 801d640:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801d644:	d566      	bpl.n	801d714 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d646:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d64a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d64c:	e002      	b.n	801d654 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d64e:	1410      	asrs	r0, r2, #16
 801d650:	e9d1 4602 	ldrd	r4, r6, [r1, #8]
 801d654:	2800      	cmp	r0, #0
 801d656:	f109 39ff 	add.w	r9, r9, #4294967295
 801d65a:	4472      	add	r2, lr
 801d65c:	db3f      	blt.n	801d6de <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801d65e:	42a0      	cmp	r0, r4
 801d660:	da3d      	bge.n	801d6de <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801d662:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d666:	d43a      	bmi.n	801d6de <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801d668:	45b4      	cmp	ip, r6
 801d66a:	da38      	bge.n	801d6de <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801d66c:	9e00      	ldr	r6, [sp, #0]
 801d66e:	b224      	sxth	r4, r4
 801d670:	fb0c 6404 	mla	r4, ip, r4, r6
 801d674:	f814 b000 	ldrb.w	fp, [r4, r0]
 801d678:	7838      	ldrb	r0, [r7, #0]
 801d67a:	9c05      	ldr	r4, [sp, #20]
 801d67c:	fb10 f30a 	smulbb	r3, r0, sl
 801d680:	9306      	str	r3, [sp, #24]
 801d682:	9b07      	ldr	r3, [sp, #28]
 801d684:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801d688:	4618      	mov	r0, r3
 801d68a:	eb04 060b 	add.w	r6, r4, fp
 801d68e:	78b4      	ldrb	r4, [r6, #2]
 801d690:	7876      	ldrb	r6, [r6, #1]
 801d692:	fb14 fc03 	smulbb	ip, r4, r3
 801d696:	9c05      	ldr	r4, [sp, #20]
 801d698:	fb16 f603 	smulbb	r6, r6, r3
 801d69c:	f814 400b 	ldrb.w	r4, [r4, fp]
 801d6a0:	9b06      	ldr	r3, [sp, #24]
 801d6a2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d6a6:	fb04 3000 	mla	r0, r4, r0, r3
 801d6aa:	78bc      	ldrb	r4, [r7, #2]
 801d6ac:	fb0b 660a 	mla	r6, fp, sl, r6
 801d6b0:	fb04 c40a 	mla	r4, r4, sl, ip
 801d6b4:	b2b6      	uxth	r6, r6
 801d6b6:	b280      	uxth	r0, r0
 801d6b8:	b2a4      	uxth	r4, r4
 801d6ba:	f106 0c01 	add.w	ip, r6, #1
 801d6be:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d6c2:	f104 0b01 	add.w	fp, r4, #1
 801d6c6:	f100 0c01 	add.w	ip, r0, #1
 801d6ca:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d6ce:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801d6d2:	1236      	asrs	r6, r6, #8
 801d6d4:	1224      	asrs	r4, r4, #8
 801d6d6:	1200      	asrs	r0, r0, #8
 801d6d8:	707e      	strb	r6, [r7, #1]
 801d6da:	70bc      	strb	r4, [r7, #2]
 801d6dc:	7038      	strb	r0, [r7, #0]
 801d6de:	f1b9 3fff 	cmp.w	r9, #4294967295
 801d6e2:	f107 0704 	add.w	r7, r7, #4
 801d6e6:	4445      	add	r5, r8
 801d6e8:	d1b1      	bne.n	801d64e <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801d6ea:	e9dd b303 	ldrd	fp, r3, [sp, #12]
 801d6ee:	eb0b 0783 	add.w	r7, fp, r3, lsl #2
 801d6f2:	9b01      	ldr	r3, [sp, #4]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	f73f af6a 	bgt.w	801d5ce <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6fa:	b009      	add	sp, #36	@ 0x24
 801d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d700:	f43f af61 	beq.w	801d5c6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d704:	f103 39ff 	add.w	r9, r3, #4294967295
 801d708:	fb09 2b0e 	mla	fp, r9, lr, r2
 801d70c:	ea5f 4b2b 	movs.w	fp, fp, asr #16
 801d710:	f53f af59 	bmi.w	801d5c6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d714:	4559      	cmp	r1, fp
 801d716:	dd57      	ble.n	801d7c8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d718:	fb09 5008 	mla	r0, r9, r8, r5
 801d71c:	1400      	asrs	r0, r0, #16
 801d71e:	d453      	bmi.n	801d7c8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d720:	4560      	cmp	r0, ip
 801d722:	da51      	bge.n	801d7c8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801d724:	2b00      	cmp	r3, #0
 801d726:	f77f af4e 	ble.w	801d5c6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d72a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d72e:	f107 0c04 	add.w	ip, r7, #4
 801d732:	f8dd b014 	ldr.w	fp, [sp, #20]
 801d736:	460b      	mov	r3, r1
 801d738:	9f07      	ldr	r7, [sp, #28]
 801d73a:	e002      	b.n	801d742 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801d73c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801d73e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801d742:	9800      	ldr	r0, [sp, #0]
 801d744:	1429      	asrs	r1, r5, #16
 801d746:	fb03 0301 	mla	r3, r3, r1, r0
 801d74a:	1411      	asrs	r1, r2, #16
 801d74c:	5c5e      	ldrb	r6, [r3, r1]
 801d74e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801d752:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d756:	eb0b 0006 	add.w	r0, fp, r6
 801d75a:	7881      	ldrb	r1, [r0, #2]
 801d75c:	7840      	ldrb	r0, [r0, #1]
 801d75e:	fb13 f30a 	smulbb	r3, r3, sl
 801d762:	fb10 f007 	smulbb	r0, r0, r7
 801d766:	fb11 f407 	smulbb	r4, r1, r7
 801d76a:	f81b 1006 	ldrb.w	r1, [fp, r6]
 801d76e:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
 801d772:	fb01 3307 	mla	r3, r1, r7, r3
 801d776:	f81c 1c02 	ldrb.w	r1, [ip, #-2]
 801d77a:	fb06 000a 	mla	r0, r6, sl, r0
 801d77e:	fb01 410a 	mla	r1, r1, sl, r4
 801d782:	b280      	uxth	r0, r0
 801d784:	b29b      	uxth	r3, r3
 801d786:	b289      	uxth	r1, r1
 801d788:	1c44      	adds	r4, r0, #1
 801d78a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801d78e:	1c4e      	adds	r6, r1, #1
 801d790:	1c5c      	adds	r4, r3, #1
 801d792:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801d796:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d79a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d79e:	1200      	asrs	r0, r0, #8
 801d7a0:	1209      	asrs	r1, r1, #8
 801d7a2:	121b      	asrs	r3, r3, #8
 801d7a4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801d7a8:	f80c 0c03 	strb.w	r0, [ip, #-3]
 801d7ac:	f80c 1c02 	strb.w	r1, [ip, #-2]
 801d7b0:	f80c 3c04 	strb.w	r3, [ip, #-4]
 801d7b4:	4445      	add	r5, r8
 801d7b6:	4472      	add	r2, lr
 801d7b8:	f10c 0c04 	add.w	ip, ip, #4
 801d7bc:	d1be      	bne.n	801d73c <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801d7be:	e9dd 7303 	ldrd	r7, r3, [sp, #12]
 801d7c2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801d7c6:	e6fe      	b.n	801d5c6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	f77f aefc 	ble.w	801d5c6 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d7ce:	1410      	asrs	r0, r2, #16
 801d7d0:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d7d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d7d6:	e73d      	b.n	801d654 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>

0801d7d8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7dc:	468a      	mov	sl, r1
 801d7de:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801d7e2:	46d1      	mov	r9, sl
 801d7e4:	b087      	sub	sp, #28
 801d7e6:	e9dd 1415 	ldrd	r1, r4, [sp, #84]	@ 0x54
 801d7ea:	684d      	ldr	r5, [r1, #4]
 801d7ec:	9203      	str	r2, [sp, #12]
 801d7ee:	e9dd 2e17 	ldrd	r2, lr, [sp, #92]	@ 0x5c
 801d7f2:	fb05 4402 	mla	r4, r5, r2, r4
 801d7f6:	e9de 2000 	ldrd	r2, r0, [lr]
 801d7fa:	e9dd 6713 	ldrd	r6, r7, [sp, #76]	@ 0x4c
 801d7fe:	680d      	ldr	r5, [r1, #0]
 801d800:	f100 0b04 	add.w	fp, r0, #4
 801d804:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801d808:	9205      	str	r2, [sp, #20]
 801d80a:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	@ 0x44
 801d80e:	f1b9 0f00 	cmp.w	r9, #0
 801d812:	dc03      	bgt.n	801d81c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d814:	9803      	ldr	r0, [sp, #12]
 801d816:	2800      	cmp	r0, #0
 801d818:	f340 8091 	ble.w	801d93e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d81c:	e9de 8a02 	ldrd	r8, sl, [lr, #8]
 801d820:	2b00      	cmp	r3, #0
 801d822:	fa0f f088 	sxth.w	r0, r8
 801d826:	fa0f f48a 	sxth.w	r4, sl
 801d82a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801d82e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801d832:	9001      	str	r0, [sp, #4]
 801d834:	9402      	str	r4, [sp, #8]
 801d836:	f340 8085 	ble.w	801d944 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d83a:	1414      	asrs	r4, r2, #16
 801d83c:	d408      	bmi.n	801d850 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d83e:	9801      	ldr	r0, [sp, #4]
 801d840:	4284      	cmp	r4, r0
 801d842:	da05      	bge.n	801d850 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d844:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801d848:	d402      	bmi.n	801d850 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d84a:	9802      	ldr	r0, [sp, #8]
 801d84c:	4584      	cmp	ip, r0
 801d84e:	db3b      	blt.n	801d8c8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801d850:	3b01      	subs	r3, #1
 801d852:	4432      	add	r2, r6
 801d854:	4439      	add	r1, r7
 801d856:	f105 0504 	add.w	r5, r5, #4
 801d85a:	d1ee      	bne.n	801d83a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d85c:	f1b9 0f00 	cmp.w	r9, #0
 801d860:	dd6d      	ble.n	801d93e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d862:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d866:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d86a:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801d86e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d872:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801d876:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d87a:	ee76 6a62 	vsub.f32	s13, s12, s5
 801d87e:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801d882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d886:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d88a:	ee16 2a90 	vmov	r2, s13
 801d88e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d890:	9803      	ldr	r0, [sp, #12]
 801d892:	fb92 f6f3 	sdiv	r6, r2, r3
 801d896:	ee17 2a10 	vmov	r2, s14
 801d89a:	eeb0 7a43 	vmov.f32	s14, s6
 801d89e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d8a2:	ee17 1a10 	vmov	r1, s14
 801d8a6:	eeb0 7a62 	vmov.f32	s14, s5
 801d8aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d8ae:	f1b9 0901 	subs.w	r9, r9, #1
 801d8b2:	fb92 f7f3 	sdiv	r7, r2, r3
 801d8b6:	eeb0 3a67 	vmov.f32	s6, s15
 801d8ba:	ee17 2a10 	vmov	r2, s14
 801d8be:	eef0 2a46 	vmov.f32	s5, s12
 801d8c2:	bf08      	it	eq
 801d8c4:	4603      	moveq	r3, r0
 801d8c6:	e7a2      	b.n	801d80e <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d8c8:	f103 3cff 	add.w	ip, r3, #4294967295
 801d8cc:	9404      	str	r4, [sp, #16]
 801d8ce:	fb06 240c 	mla	r4, r6, ip, r2
 801d8d2:	1424      	asrs	r4, r4, #16
 801d8d4:	d578      	bpl.n	801d9c8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801d8d6:	9613      	str	r6, [sp, #76]	@ 0x4c
 801d8d8:	2000      	movs	r0, #0
 801d8da:	4646      	mov	r6, r8
 801d8dc:	46d4      	mov	ip, sl
 801d8de:	9c04      	ldr	r4, [sp, #16]
 801d8e0:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801d8e4:	e002      	b.n	801d8ec <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d8e6:	1414      	asrs	r4, r2, #16
 801d8e8:	e9de 6c02 	ldrd	r6, ip, [lr, #8]
 801d8ec:	2c00      	cmp	r4, #0
 801d8ee:	4442      	add	r2, r8
 801d8f0:	db1c      	blt.n	801d92c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d8f2:	42b4      	cmp	r4, r6
 801d8f4:	da1a      	bge.n	801d92c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d8f6:	ea5f 4a21 	movs.w	sl, r1, asr #16
 801d8fa:	d417      	bmi.n	801d92c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d8fc:	45e2      	cmp	sl, ip
 801d8fe:	da15      	bge.n	801d92c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d900:	fa0f fc86 	sxth.w	ip, r6
 801d904:	9e05      	ldr	r6, [sp, #20]
 801d906:	fb0a 6c0c 	mla	ip, sl, ip, r6
 801d90a:	f81c 4004 	ldrb.w	r4, [ip, r4]
 801d90e:	eb05 0680 	add.w	r6, r5, r0, lsl #2
 801d912:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d916:	f81b c004 	ldrb.w	ip, [fp, r4]
 801d91a:	445c      	add	r4, fp
 801d91c:	f805 c020 	strb.w	ip, [r5, r0, lsl #2]
 801d920:	f894 c001 	ldrb.w	ip, [r4, #1]
 801d924:	f886 c001 	strb.w	ip, [r6, #1]
 801d928:	78a4      	ldrb	r4, [r4, #2]
 801d92a:	70b4      	strb	r4, [r6, #2]
 801d92c:	3001      	adds	r0, #1
 801d92e:	4283      	cmp	r3, r0
 801d930:	4439      	add	r1, r7
 801d932:	d1d8      	bne.n	801d8e6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801d934:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801d938:	f1b9 0f00 	cmp.w	r9, #0
 801d93c:	dc91      	bgt.n	801d862 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d93e:	b007      	add	sp, #28
 801d940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d944:	d08a      	beq.n	801d85c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d946:	f103 3cff 	add.w	ip, r3, #4294967295
 801d94a:	fb0c 2406 	mla	r4, ip, r6, r2
 801d94e:	1424      	asrs	r4, r4, #16
 801d950:	d484      	bmi.n	801d85c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d952:	42a0      	cmp	r0, r4
 801d954:	dd32      	ble.n	801d9bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801d956:	fb07 140c 	mla	r4, r7, ip, r1
 801d95a:	1420      	asrs	r0, r4, #16
 801d95c:	d42e      	bmi.n	801d9bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801d95e:	9c02      	ldr	r4, [sp, #8]
 801d960:	4284      	cmp	r4, r0
 801d962:	dd2b      	ble.n	801d9bc <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801d964:	2b00      	cmp	r3, #0
 801d966:	f77f af79 	ble.w	801d85c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d96a:	1d2c      	adds	r4, r5, #4
 801d96c:	f8dd a014 	ldr.w	sl, [sp, #20]
 801d970:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d974:	e001      	b.n	801d97a <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801d976:	f9be 8008 	ldrsh.w	r8, [lr, #8]
 801d97a:	1408      	asrs	r0, r1, #16
 801d97c:	fb08 a000 	mla	r0, r8, r0, sl
 801d980:	ea4f 4822 	mov.w	r8, r2, asr #16
 801d984:	f810 0008 	ldrb.w	r0, [r0, r8]
 801d988:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d98c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d990:	f81b 8000 	ldrb.w	r8, [fp, r0]
 801d994:	4458      	add	r0, fp
 801d996:	f804 8c04 	strb.w	r8, [r4, #-4]
 801d99a:	f890 8001 	ldrb.w	r8, [r0, #1]
 801d99e:	f1bc 3fff 	cmp.w	ip, #4294967295
 801d9a2:	f804 8c03 	strb.w	r8, [r4, #-3]
 801d9a6:	7880      	ldrb	r0, [r0, #2]
 801d9a8:	4439      	add	r1, r7
 801d9aa:	f804 0c02 	strb.w	r0, [r4, #-2]
 801d9ae:	4432      	add	r2, r6
 801d9b0:	f104 0404 	add.w	r4, r4, #4
 801d9b4:	d1df      	bne.n	801d976 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801d9b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801d9ba:	e7bd      	b.n	801d938 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	f77f af4d 	ble.w	801d85c <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d9c2:	1410      	asrs	r0, r2, #16
 801d9c4:	9004      	str	r0, [sp, #16]
 801d9c6:	e786      	b.n	801d8d6 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>
 801d9c8:	9801      	ldr	r0, [sp, #4]
 801d9ca:	e7c2      	b.n	801d952 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>

0801d9cc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d9cc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9d4:	b08b      	sub	sp, #44	@ 0x2c
 801d9d6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801d9da:	e9dd 2119 	ldrd	r2, r1, [sp, #100]	@ 0x64
 801d9de:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801d9e0:	6854      	ldr	r4, [r2, #4]
 801d9e2:	6816      	ldr	r6, [r2, #0]
 801d9e4:	fb04 1000 	mla	r0, r4, r0, r1
 801d9e8:	e9dd 4b17 	ldrd	r4, fp, [sp, #92]	@ 0x5c
 801d9ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801d9ee:	f89d 7074 	ldrb.w	r7, [sp, #116]	@ 0x74
 801d9f2:	e9d2 2500 	ldrd	r2, r5, [r2]
 801d9f6:	3504      	adds	r5, #4
 801d9f8:	9703      	str	r7, [sp, #12]
 801d9fa:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801d9fe:	9507      	str	r5, [sp, #28]
 801da00:	9206      	str	r2, [sp, #24]
 801da02:	e9dd 2115 	ldrd	r2, r1, [sp, #84]	@ 0x54
 801da06:	9d01      	ldr	r5, [sp, #4]
 801da08:	2d00      	cmp	r5, #0
 801da0a:	dc03      	bgt.n	801da14 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801da0c:	9d02      	ldr	r5, [sp, #8]
 801da0e:	2d00      	cmp	r5, #0
 801da10:	f340 80d5 	ble.w	801dbbe <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801da14:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801da16:	2b00      	cmp	r3, #0
 801da18:	e9d5 7c02 	ldrd	r7, ip, [r5, #8]
 801da1c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801da20:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 801da24:	b23d      	sxth	r5, r7
 801da26:	fa0f fe8c 	sxth.w	lr, ip
 801da2a:	f340 80cb 	ble.w	801dbc4 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801da2e:	1416      	asrs	r6, r2, #16
 801da30:	d406      	bmi.n	801da40 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801da32:	42ae      	cmp	r6, r5
 801da34:	da04      	bge.n	801da40 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801da36:	ea5f 4821 	movs.w	r8, r1, asr #16
 801da3a:	d401      	bmi.n	801da40 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801da3c:	45f0      	cmp	r8, lr
 801da3e:	db3c      	blt.n	801daba <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801da40:	3b01      	subs	r3, #1
 801da42:	4422      	add	r2, r4
 801da44:	4459      	add	r1, fp
 801da46:	f100 0004 	add.w	r0, r0, #4
 801da4a:	d1f0      	bne.n	801da2e <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801da4c:	9b01      	ldr	r3, [sp, #4]
 801da4e:	2b00      	cmp	r3, #0
 801da50:	f340 80b5 	ble.w	801dbbe <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 801da54:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da5c:	eec5 7a80 	vdiv.f32	s15, s11, s0
 801da60:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da64:	ee20 6aa7 	vmul.f32	s12, s1, s15
 801da68:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da6c:	ee76 6a62 	vsub.f32	s13, s12, s5
 801da70:	ee37 7ac3 	vsub.f32	s14, s15, s6
 801da74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da78:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801da7c:	ee16 2a90 	vmov	r2, s13
 801da80:	3b01      	subs	r3, #1
 801da82:	9301      	str	r3, [sp, #4]
 801da84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801da86:	9d02      	ldr	r5, [sp, #8]
 801da88:	fb92 f4f3 	sdiv	r4, r2, r3
 801da8c:	ee17 2a10 	vmov	r2, s14
 801da90:	eeb0 7a43 	vmov.f32	s14, s6
 801da94:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801da98:	ee17 1a10 	vmov	r1, s14
 801da9c:	eeb0 7a62 	vmov.f32	s14, s5
 801daa0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801daa4:	fb92 fbf3 	sdiv	fp, r2, r3
 801daa8:	eeb0 3a67 	vmov.f32	s6, s15
 801daac:	ee17 2a10 	vmov	r2, s14
 801dab0:	eef0 2a46 	vmov.f32	s5, s12
 801dab4:	bf08      	it	eq
 801dab6:	462b      	moveq	r3, r5
 801dab8:	e7a5      	b.n	801da06 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801daba:	f103 38ff 	add.w	r8, r3, #4294967295
 801dabe:	fb08 2904 	mla	r9, r8, r4, r2
 801dac2:	ea5f 4929 	movs.w	r9, r9, asr #16
 801dac6:	f140 8087 	bpl.w	801dbd8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801daca:	f1c3 0900 	rsb	r9, r3, #0
 801dace:	4698      	mov	r8, r3
 801dad0:	2500      	movs	r5, #0
 801dad2:	9004      	str	r0, [sp, #16]
 801dad4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dad6:	e002      	b.n	801dade <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801dad8:	1416      	asrs	r6, r2, #16
 801dada:	e9d3 7c02 	ldrd	r7, ip, [r3, #8]
 801dade:	2e00      	cmp	r6, #0
 801dae0:	4422      	add	r2, r4
 801dae2:	db61      	blt.n	801dba8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801dae4:	42be      	cmp	r6, r7
 801dae6:	da5f      	bge.n	801dba8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801dae8:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801daec:	d45c      	bmi.n	801dba8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801daee:	45e6      	cmp	lr, ip
 801daf0:	b23f      	sxth	r7, r7
 801daf2:	da59      	bge.n	801dba8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801daf4:	9806      	ldr	r0, [sp, #24]
 801daf6:	fb0e 0707 	mla	r7, lr, r7, r0
 801dafa:	9807      	ldr	r0, [sp, #28]
 801dafc:	5dbe      	ldrb	r6, [r7, r6]
 801dafe:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 801db02:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 801db06:	9804      	ldr	r0, [sp, #16]
 801db08:	9705      	str	r7, [sp, #20]
 801db0a:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801db0e:	0e37      	lsrs	r7, r6, #24
 801db10:	9008      	str	r0, [sp, #32]
 801db12:	d049      	beq.n	801dba8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801db14:	9803      	ldr	r0, [sp, #12]
 801db16:	fa5f fa86 	uxtb.w	sl, r6
 801db1a:	fb00 f707 	mul.w	r7, r0, r7
 801db1e:	9805      	ldr	r0, [sp, #20]
 801db20:	f107 0c01 	add.w	ip, r7, #1
 801db24:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
 801db28:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801db2c:	4686      	mov	lr, r0
 801db2e:	ea6f 070c 	mvn.w	r7, ip
 801db32:	fa1f fc8c 	uxth.w	ip, ip
 801db36:	fb1a fa0c 	smulbb	sl, sl, ip
 801db3a:	9804      	ldr	r0, [sp, #16]
 801db3c:	b2ff      	uxtb	r7, r7
 801db3e:	f810 e02e 	ldrb.w	lr, [r0, lr, lsl #2]
 801db42:	9805      	ldr	r0, [sp, #20]
 801db44:	fb0e ae07 	mla	lr, lr, r7, sl
 801db48:	fa1f fe8e 	uxth.w	lr, lr
 801db4c:	f10e 0a01 	add.w	sl, lr, #1
 801db50:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801db54:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 801db58:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801db5c:	fb16 f60c 	smulbb	r6, r6, ip
 801db60:	9609      	str	r6, [sp, #36]	@ 0x24
 801db62:	4606      	mov	r6, r0
 801db64:	9804      	ldr	r0, [sp, #16]
 801db66:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801db6a:	f800 e026 	strb.w	lr, [r0, r6, lsl #2]
 801db6e:	fb1a fa0c 	smulbb	sl, sl, ip
 801db72:	9808      	ldr	r0, [sp, #32]
 801db74:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801db76:	f890 e002 	ldrb.w	lr, [r0, #2]
 801db7a:	f890 c001 	ldrb.w	ip, [r0, #1]
 801db7e:	fb0e 6607 	mla	r6, lr, r7, r6
 801db82:	fb0c ac07 	mla	ip, ip, r7, sl
 801db86:	b2b6      	uxth	r6, r6
 801db88:	fa1f fe8c 	uxth.w	lr, ip
 801db8c:	1c77      	adds	r7, r6, #1
 801db8e:	f10e 0c01 	add.w	ip, lr, #1
 801db92:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801db96:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801db9a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801db9e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801dba2:	7047      	strb	r7, [r0, #1]
 801dba4:	f880 c002 	strb.w	ip, [r0, #2]
 801dba8:	3d01      	subs	r5, #1
 801dbaa:	45a9      	cmp	r9, r5
 801dbac:	4459      	add	r1, fp
 801dbae:	d193      	bne.n	801dad8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801dbb0:	9b01      	ldr	r3, [sp, #4]
 801dbb2:	9804      	ldr	r0, [sp, #16]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801dbba:	f73f af4b 	bgt.w	801da54 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801dbbe:	b00b      	add	sp, #44	@ 0x2c
 801dbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbc4:	f43f af42 	beq.w	801da4c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dbc8:	f103 38ff 	add.w	r8, r3, #4294967295
 801dbcc:	fb08 2904 	mla	r9, r8, r4, r2
 801dbd0:	ea5f 4929 	movs.w	r9, r9, asr #16
 801dbd4:	f53f af3a 	bmi.w	801da4c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dbd8:	454d      	cmp	r5, r9
 801dbda:	dd68      	ble.n	801dcae <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801dbdc:	fb08 160b 	mla	r6, r8, fp, r1
 801dbe0:	1436      	asrs	r6, r6, #16
 801dbe2:	d464      	bmi.n	801dcae <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801dbe4:	4576      	cmp	r6, lr
 801dbe6:	da62      	bge.n	801dcae <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	f77f af2f 	ble.w	801da4c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dbee:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801dbf2:	f100 0e04 	add.w	lr, r0, #4
 801dbf6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801dbfa:	e002      	b.n	801dc02 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801dbfc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dbfe:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801dc02:	140b      	asrs	r3, r1, #16
 801dc04:	fb05 6303 	mla	r3, r5, r3, r6
 801dc08:	1410      	asrs	r0, r2, #16
 801dc0a:	5c1b      	ldrb	r3, [r3, r0]
 801dc0c:	f108 38ff 	add.w	r8, r8, #4294967295
 801dc10:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801dc14:	4422      	add	r2, r4
 801dc16:	0e18      	lsrs	r0, r3, #24
 801dc18:	4459      	add	r1, fp
 801dc1a:	d03e      	beq.n	801dc9a <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 801dc1c:	9d03      	ldr	r5, [sp, #12]
 801dc1e:	fa5f fc83 	uxtb.w	ip, r3
 801dc22:	fb05 f000 	mul.w	r0, r5, r0
 801dc26:	f100 0901 	add.w	r9, r0, #1
 801dc2a:	eb09 2920 	add.w	r9, r9, r0, asr #8
 801dc2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc32:	ea6f 0009 	mvn.w	r0, r9
 801dc36:	fa1f f989 	uxth.w	r9, r9
 801dc3a:	fb1c fc09 	smulbb	ip, ip, r9
 801dc3e:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801dc42:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801dc46:	fb15 fa09 	smulbb	sl, r5, r9
 801dc4a:	fb13 f309 	smulbb	r3, r3, r9
 801dc4e:	f81e 9c04 	ldrb.w	r9, [lr, #-4]
 801dc52:	b2c0      	uxtb	r0, r0
 801dc54:	fb09 cc00 	mla	ip, r9, r0, ip
 801dc58:	f81e 5c03 	ldrb.w	r5, [lr, #-3]
 801dc5c:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801dc60:	fb05 a500 	mla	r5, r5, r0, sl
 801dc64:	fb09 3300 	mla	r3, r9, r0, r3
 801dc68:	fa1f fc8c 	uxth.w	ip, ip
 801dc6c:	b2ad      	uxth	r5, r5
 801dc6e:	b29b      	uxth	r3, r3
 801dc70:	f10c 0a01 	add.w	sl, ip, #1
 801dc74:	f105 0901 	add.w	r9, r5, #1
 801dc78:	1c58      	adds	r0, r3, #1
 801dc7a:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801dc7e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801dc82:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801dc86:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dc8a:	122d      	asrs	r5, r5, #8
 801dc8c:	121b      	asrs	r3, r3, #8
 801dc8e:	f80e cc04 	strb.w	ip, [lr, #-4]
 801dc92:	f80e 5c03 	strb.w	r5, [lr, #-3]
 801dc96:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801dc9a:	f1b8 3fff 	cmp.w	r8, #4294967295
 801dc9e:	f10e 0e04 	add.w	lr, lr, #4
 801dca2:	d1ab      	bne.n	801dbfc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801dca4:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801dca8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801dcac:	e6ce      	b.n	801da4c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	f77f aecc 	ble.w	801da4c <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801dcb4:	1416      	asrs	r6, r2, #16
 801dcb6:	e708      	b.n	801daca <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfe>

0801dcb8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dcb8:	4770      	bx	lr
 801dcba:	bf00      	nop

0801dcbc <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dcbc:	4770      	bx	lr
 801dcbe:	bf00      	nop

0801dcc0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dcc0:	4770      	bx	lr
 801dcc2:	bf00      	nop

0801dcc4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801dcc4:	4770      	bx	lr
 801dcc6:	bf00      	nop

0801dcc8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dcc8:	4770      	bx	lr
 801dcca:	bf00      	nop

0801dccc <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801dccc:	4770      	bx	lr
 801dcce:	bf00      	nop

0801dcd0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dcd0:	4770      	bx	lr
 801dcd2:	bf00      	nop

0801dcd4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dcd4:	4770      	bx	lr
 801dcd6:	bf00      	nop

0801dcd8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dcd8:	4770      	bx	lr
 801dcda:	bf00      	nop

0801dcdc <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dcdc:	4770      	bx	lr
 801dcde:	bf00      	nop

0801dce0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dce0:	4770      	bx	lr
 801dce2:	bf00      	nop

0801dce4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801dce4:	4770      	bx	lr
 801dce6:	bf00      	nop

0801dce8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dce8:	4770      	bx	lr
 801dcea:	bf00      	nop

0801dcec <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801dcec:	4770      	bx	lr
 801dcee:	bf00      	nop

0801dcf0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801dcf0:	4770      	bx	lr
 801dcf2:	bf00      	nop

0801dcf4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801dcf4:	4770      	bx	lr
 801dcf6:	bf00      	nop

0801dcf8 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801dcf8:	4770      	bx	lr
 801dcfa:	bf00      	nop

0801dcfc <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801dcfc:	4770      	bx	lr
 801dcfe:	bf00      	nop

0801dd00 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801dd00:	4770      	bx	lr
 801dd02:	bf00      	nop

0801dd04 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801dd04:	4770      	bx	lr
 801dd06:	bf00      	nop

0801dd08 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801dd08:	4770      	bx	lr
 801dd0a:	bf00      	nop

0801dd0c <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801dd0c:	4770      	bx	lr
 801dd0e:	bf00      	nop

0801dd10 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv>:
 801dd10:	b508      	push	{r3, lr}
 801dd12:	4b0d      	ldr	r3, [pc, #52]	@ (801dd48 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x38>)
 801dd14:	881b      	ldrh	r3, [r3, #0]
 801dd16:	b17b      	cbz	r3, 801dd38 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x28>
 801dd18:	7b02      	ldrb	r2, [r0, #12]
 801dd1a:	2a02      	cmp	r2, #2
 801dd1c:	d007      	beq.n	801dd2e <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x1e>
 801dd1e:	2a01      	cmp	r2, #1
 801dd20:	bf0c      	ite	eq
 801dd22:	2003      	moveq	r0, #3
 801dd24:	2002      	movne	r0, #2
 801dd26:	fb13 f000 	smulbb	r0, r3, r0
 801dd2a:	b280      	uxth	r0, r0
 801dd2c:	bd08      	pop	{r3, pc}
 801dd2e:	2004      	movs	r0, #4
 801dd30:	fb13 f000 	smulbb	r0, r3, r0
 801dd34:	b280      	uxth	r0, r0
 801dd36:	bd08      	pop	{r3, pc}
 801dd38:	4b04      	ldr	r3, [pc, #16]	@ (801dd4c <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x3c>)
 801dd3a:	4a05      	ldr	r2, [pc, #20]	@ (801dd50 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x40>)
 801dd3c:	f240 110f 	movw	r1, #271	@ 0x10f
 801dd40:	4804      	ldr	r0, [pc, #16]	@ (801dd54 <_ZNK8touchgfx8LCDGPU2D17framebufferStrideEv+0x44>)
 801dd42:	f00d ff39 	bl	802bbb8 <__assert_func>
 801dd46:	bf00      	nop
 801dd48:	2015a072 	.word	0x2015a072
 801dd4c:	0802f094 	.word	0x0802f094
 801dd50:	08030858 	.word	0x08030858
 801dd54:	0802f0d8 	.word	0x0802f0d8

0801dd58 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv>:
 801dd58:	b530      	push	{r4, r5, lr}
 801dd5a:	4b26      	ldr	r3, [pc, #152]	@ (801ddf4 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x9c>)
 801dd5c:	b083      	sub	sp, #12
 801dd5e:	681c      	ldr	r4, [r3, #0]
 801dd60:	2c00      	cmp	r4, #0
 801dd62:	d040      	beq.n	801dde6 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x8e>
 801dd64:	4b24      	ldr	r3, [pc, #144]	@ (801ddf8 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa0>)
 801dd66:	4605      	mov	r5, r0
 801dd68:	781b      	ldrb	r3, [r3, #0]
 801dd6a:	b9f3      	cbnz	r3, 801ddaa <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x52>
 801dd6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801dd6e:	7b2a      	ldrb	r2, [r5, #12]
 801dd70:	2a01      	cmp	r2, #1
 801dd72:	d025      	beq.n	801ddc0 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x68>
 801dd74:	d30d      	bcc.n	801dd92 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x3a>
 801dd76:	2a02      	cmp	r2, #2
 801dd78:	d12f      	bne.n	801ddda <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x82>
 801dd7a:	4920      	ldr	r1, [pc, #128]	@ (801ddfc <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801dd7c:	4a20      	ldr	r2, [pc, #128]	@ (801de00 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801dd7e:	8809      	ldrh	r1, [r1, #0]
 801dd80:	8812      	ldrh	r2, [r2, #0]
 801dd82:	008c      	lsls	r4, r1, #2
 801dd84:	4618      	mov	r0, r3
 801dd86:	9400      	str	r4, [sp, #0]
 801dd88:	2310      	movs	r3, #16
 801dd8a:	f7fb ff75 	bl	8019c78 <nema_bind_dst_tex>
 801dd8e:	b003      	add	sp, #12
 801dd90:	bd30      	pop	{r4, r5, pc}
 801dd92:	491a      	ldr	r1, [pc, #104]	@ (801ddfc <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801dd94:	4a1a      	ldr	r2, [pc, #104]	@ (801de00 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801dd96:	8809      	ldrh	r1, [r1, #0]
 801dd98:	8812      	ldrh	r2, [r2, #0]
 801dd9a:	004c      	lsls	r4, r1, #1
 801dd9c:	4618      	mov	r0, r3
 801dd9e:	9400      	str	r4, [sp, #0]
 801dda0:	2304      	movs	r3, #4
 801dda2:	f7fb ff69 	bl	8019c78 <nema_bind_dst_tex>
 801dda6:	b003      	add	sp, #12
 801dda8:	bd30      	pop	{r4, r5, pc}
 801ddaa:	6823      	ldr	r3, [r4, #0]
 801ddac:	4620      	mov	r0, r4
 801ddae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ddb0:	4798      	blx	r3
 801ddb2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801ddb4:	4283      	cmp	r3, r0
 801ddb6:	d1da      	bne.n	801dd6e <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x16>
 801ddb8:	7b2a      	ldrb	r2, [r5, #12]
 801ddba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ddbc:	2a01      	cmp	r2, #1
 801ddbe:	d1d9      	bne.n	801dd74 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0x1c>
 801ddc0:	490e      	ldr	r1, [pc, #56]	@ (801ddfc <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa4>)
 801ddc2:	4a0f      	ldr	r2, [pc, #60]	@ (801de00 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xa8>)
 801ddc4:	8809      	ldrh	r1, [r1, #0]
 801ddc6:	8812      	ldrh	r2, [r2, #0]
 801ddc8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801ddcc:	4618      	mov	r0, r3
 801ddce:	9400      	str	r4, [sp, #0]
 801ddd0:	2339      	movs	r3, #57	@ 0x39
 801ddd2:	f7fb ff51 	bl	8019c78 <nema_bind_dst_tex>
 801ddd6:	b003      	add	sp, #12
 801ddd8:	bd30      	pop	{r4, r5, pc}
 801ddda:	4b0a      	ldr	r3, [pc, #40]	@ (801de04 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xac>)
 801dddc:	4a0a      	ldr	r2, [pc, #40]	@ (801de08 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb0>)
 801ddde:	2141      	movs	r1, #65	@ 0x41
 801dde0:	480a      	ldr	r0, [pc, #40]	@ (801de0c <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb4>)
 801dde2:	f00d fee9 	bl	802bbb8 <__assert_func>
 801dde6:	4b0a      	ldr	r3, [pc, #40]	@ (801de10 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xb8>)
 801dde8:	4a0a      	ldr	r2, [pc, #40]	@ (801de14 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xbc>)
 801ddea:	217c      	movs	r1, #124	@ 0x7c
 801ddec:	480a      	ldr	r0, [pc, #40]	@ (801de18 <_ZN8touchgfx8LCDGPU2D22bindFrameBufferTextureEv+0xc0>)
 801ddee:	f00d fee3 	bl	802bbb8 <__assert_func>
 801ddf2:	bf00      	nop
 801ddf4:	2015a1e4 	.word	0x2015a1e4
 801ddf8:	2015a076 	.word	0x2015a076
 801ddfc:	2015a072 	.word	0x2015a072
 801de00:	2015a074 	.word	0x2015a074
 801de04:	0802eb14 	.word	0x0802eb14
 801de08:	0802f68c 	.word	0x0802f68c
 801de0c:	0802eb5c 	.word	0x0802eb5c
 801de10:	0802eab8 	.word	0x0802eab8
 801de14:	0802f324 	.word	0x0802f324
 801de18:	0802eae0 	.word	0x0802eae0

0801de1c <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh>:
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d05b      	beq.n	801ded8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xbc>
 801de20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de24:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 801de28:	b085      	sub	sp, #20
 801de2a:	2c00      	cmp	r4, #0
 801de2c:	dd51      	ble.n	801ded2 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801de2e:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 801de32:	2c00      	cmp	r4, #0
 801de34:	dd4d      	ble.n	801ded2 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xb6>
 801de36:	4616      	mov	r6, r2
 801de38:	4605      	mov	r5, r0
 801de3a:	6808      	ldr	r0, [r1, #0]
 801de3c:	6849      	ldr	r1, [r1, #4]
 801de3e:	461c      	mov	r4, r3
 801de40:	4f29      	ldr	r7, [pc, #164]	@ (801dee8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xcc>)
 801de42:	ab02      	add	r3, sp, #8
 801de44:	c303      	stmia	r3!, {r0, r1}
 801de46:	a802      	add	r0, sp, #8
 801de48:	f7f8 fb8e 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de4c:	6838      	ldr	r0, [r7, #0]
 801de4e:	f3c6 4807 	ubfx	r8, r6, #16, #8
 801de52:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801de56:	b2f6      	uxtb	r6, r6
 801de58:	2800      	cmp	r0, #0
 801de5a:	d03e      	beq.n	801deda <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xbe>
 801de5c:	f7fe f8f8 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801de60:	682b      	ldr	r3, [r5, #0]
 801de62:	4628      	mov	r0, r5
 801de64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801de66:	4798      	blx	r3
 801de68:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801de6c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801de70:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801de74:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801de78:	f7fb fe3e 	bl	8019af8 <nema_set_clip>
 801de7c:	f04f 33ff 	mov.w	r3, #4294967295
 801de80:	2cff      	cmp	r4, #255	@ 0xff
 801de82:	bf0c      	ite	eq
 801de84:	2001      	moveq	r0, #1
 801de86:	4819      	ldrne	r0, [pc, #100]	@ (801deec <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd0>)
 801de88:	461a      	mov	r2, r3
 801de8a:	2100      	movs	r1, #0
 801de8c:	f7fd fc14 	bl	801b6b8 <nema_set_blend>
 801de90:	2200      	movs	r2, #0
 801de92:	4623      	mov	r3, r4
 801de94:	4611      	mov	r1, r2
 801de96:	4610      	mov	r0, r2
 801de98:	f7fb fe62 	bl	8019b60 <nema_rgba>
 801de9c:	f7fd ffd2 	bl	801be44 <nema_set_const_color>
 801dea0:	4632      	mov	r2, r6
 801dea2:	4649      	mov	r1, r9
 801dea4:	4640      	mov	r0, r8
 801dea6:	23ff      	movs	r3, #255	@ 0xff
 801dea8:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801deac:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801deb0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801deb4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801deb8:	f7fb fe52 	bl	8019b60 <nema_rgba>
 801debc:	4643      	mov	r3, r8
 801debe:	9000      	str	r0, [sp, #0]
 801dec0:	4632      	mov	r2, r6
 801dec2:	4620      	mov	r0, r4
 801dec4:	4629      	mov	r1, r5
 801dec6:	f7fb ffcd 	bl	8019e64 <nema_fill_rect>
 801deca:	6838      	ldr	r0, [r7, #0]
 801decc:	b128      	cbz	r0, 801deda <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xbe>
 801dece:	f7fe f8df 	bl	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801ded2:	b005      	add	sp, #20
 801ded4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ded8:	4770      	bx	lr
 801deda:	4b05      	ldr	r3, [pc, #20]	@ (801def0 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd4>)
 801dedc:	4a05      	ldr	r2, [pc, #20]	@ (801def4 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xd8>)
 801dede:	217c      	movs	r1, #124	@ 0x7c
 801dee0:	4805      	ldr	r0, [pc, #20]	@ (801def8 <_ZN8touchgfx8LCDGPU2D8fillRectERKNS_4RectENS_9colortypeEh+0xdc>)
 801dee2:	f00d fe69 	bl	802bbb8 <__assert_func>
 801dee6:	bf00      	nop
 801dee8:	2015a1e4 	.word	0x2015a1e4
 801deec:	08000504 	.word	0x08000504
 801def0:	0802eab8 	.word	0x0802eab8
 801def4:	0802f324 	.word	0x0802f324
 801def8:	0802eae0 	.word	0x0802eae0

0801defc <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df00:	b085      	sub	sp, #20
 801df02:	f89d 403c 	ldrb.w	r4, [sp, #60]	@ 0x3c
 801df06:	2c00      	cmp	r4, #0
 801df08:	d063      	beq.n	801dfd2 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801df0a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801df0e:	2d00      	cmp	r5, #0
 801df10:	dd5f      	ble.n	801dfd2 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801df12:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801df16:	2d00      	cmp	r5, #0
 801df18:	dd5b      	ble.n	801dfd2 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd6>
 801df1a:	460f      	mov	r7, r1
 801df1c:	4606      	mov	r6, r0
 801df1e:	6859      	ldr	r1, [r3, #4]
 801df20:	6818      	ldr	r0, [r3, #0]
 801df22:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 801e048 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14c>
 801df26:	ab02      	add	r3, sp, #8
 801df28:	c303      	stmia	r3!, {r0, r1}
 801df2a:	a802      	add	r0, sp, #8
 801df2c:	4690      	mov	r8, r2
 801df2e:	f7f8 fb1b 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801df32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df34:	f8d9 0000 	ldr.w	r0, [r9]
 801df38:	f3c3 4a07 	ubfx	sl, r3, #16, #8
 801df3c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801df40:	b2dd      	uxtb	r5, r3
 801df42:	2800      	cmp	r0, #0
 801df44:	d060      	beq.n	801e008 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801df46:	f7fe f883 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801df4a:	7b33      	ldrb	r3, [r6, #12]
 801df4c:	2b01      	cmp	r3, #1
 801df4e:	d043      	beq.n	801dfd8 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xdc>
 801df50:	d34e      	bcc.n	801dff0 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801df52:	2b02      	cmp	r3, #2
 801df54:	d15e      	bne.n	801e014 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801df56:	4b33      	ldr	r3, [pc, #204]	@ (801e024 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801df58:	4a33      	ldr	r2, [pc, #204]	@ (801e028 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801df5a:	8819      	ldrh	r1, [r3, #0]
 801df5c:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801df60:	8812      	ldrh	r2, [r2, #0]
 801df62:	4638      	mov	r0, r7
 801df64:	9300      	str	r3, [sp, #0]
 801df66:	2310      	movs	r3, #16
 801df68:	f7fb fe86 	bl	8019c78 <nema_bind_dst_tex>
 801df6c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801df70:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801df74:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 801df78:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 801df7c:	f7fb fdbc 	bl	8019af8 <nema_set_clip>
 801df80:	f04f 33ff 	mov.w	r3, #4294967295
 801df84:	2100      	movs	r1, #0
 801df86:	461a      	mov	r2, r3
 801df88:	4828      	ldr	r0, [pc, #160]	@ (801e02c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x130>)
 801df8a:	f7fd fb95 	bl	801b6b8 <nema_set_blend>
 801df8e:	2200      	movs	r2, #0
 801df90:	4623      	mov	r3, r4
 801df92:	4611      	mov	r1, r2
 801df94:	4610      	mov	r0, r2
 801df96:	f7fb fde3 	bl	8019b60 <nema_rgba>
 801df9a:	f7fd ff53 	bl	801be44 <nema_set_const_color>
 801df9e:	462a      	mov	r2, r5
 801dfa0:	4659      	mov	r1, fp
 801dfa2:	23ff      	movs	r3, #255	@ 0xff
 801dfa4:	4650      	mov	r0, sl
 801dfa6:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 801dfaa:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 801dfae:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801dfb2:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801dfb6:	f7fb fdd3 	bl	8019b60 <nema_rgba>
 801dfba:	463b      	mov	r3, r7
 801dfbc:	9000      	str	r0, [sp, #0]
 801dfbe:	4632      	mov	r2, r6
 801dfc0:	4620      	mov	r0, r4
 801dfc2:	4629      	mov	r1, r5
 801dfc4:	f7fb ff4e 	bl	8019e64 <nema_fill_rect>
 801dfc8:	f8d9 0000 	ldr.w	r0, [r9]
 801dfcc:	b1e0      	cbz	r0, 801e008 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10c>
 801dfce:	f7fe f85f 	bl	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801dfd2:	b005      	add	sp, #20
 801dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfd8:	4b12      	ldr	r3, [pc, #72]	@ (801e024 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801dfda:	4a13      	ldr	r2, [pc, #76]	@ (801e028 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801dfdc:	8819      	ldrh	r1, [r3, #0]
 801dfde:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801dfe2:	8812      	ldrh	r2, [r2, #0]
 801dfe4:	4638      	mov	r0, r7
 801dfe6:	9300      	str	r3, [sp, #0]
 801dfe8:	2339      	movs	r3, #57	@ 0x39
 801dfea:	f7fb fe45 	bl	8019c78 <nema_bind_dst_tex>
 801dfee:	e7bd      	b.n	801df6c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801dff0:	4b0c      	ldr	r3, [pc, #48]	@ (801e024 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>)
 801dff2:	4a0d      	ldr	r2, [pc, #52]	@ (801e028 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>)
 801dff4:	8819      	ldrh	r1, [r3, #0]
 801dff6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dffa:	8812      	ldrh	r2, [r2, #0]
 801dffc:	4638      	mov	r0, r7
 801dffe:	9300      	str	r3, [sp, #0]
 801e000:	2304      	movs	r3, #4
 801e002:	f7fb fe39 	bl	8019c78 <nema_bind_dst_tex>
 801e006:	e7b1      	b.n	801df6c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801e008:	4b09      	ldr	r3, [pc, #36]	@ (801e030 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x134>)
 801e00a:	4a0a      	ldr	r2, [pc, #40]	@ (801e034 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x138>)
 801e00c:	217c      	movs	r1, #124	@ 0x7c
 801e00e:	480a      	ldr	r0, [pc, #40]	@ (801e038 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>)
 801e010:	f00d fdd2 	bl	802bbb8 <__assert_func>
 801e014:	4b09      	ldr	r3, [pc, #36]	@ (801e03c <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x140>)
 801e016:	4a0a      	ldr	r2, [pc, #40]	@ (801e040 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>)
 801e018:	f240 11a5 	movw	r1, #421	@ 0x1a5
 801e01c:	4809      	ldr	r0, [pc, #36]	@ (801e044 <_ZN8touchgfx8LCDGPU2D10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>)
 801e01e:	f00d fdcb 	bl	802bbb8 <__assert_func>
 801e022:	bf00      	nop
 801e024:	2015a072 	.word	0x2015a072
 801e028:	2015a074 	.word	0x2015a074
 801e02c:	08000504 	.word	0x08000504
 801e030:	0802eab8 	.word	0x0802eab8
 801e034:	0802f324 	.word	0x0802f324
 801e038:	0802eae0 	.word	0x0802eae0
 801e03c:	0802eb14 	.word	0x0802eb14
 801e040:	0802f3e0 	.word	0x0802f3e0
 801e044:	0802eb5c 	.word	0x0802eb5c
 801e048:	2015a1e4 	.word	0x2015a1e4

0801e04c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801e04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e050:	b091      	sub	sp, #68	@ 0x44
 801e052:	f89d 108c 	ldrb.w	r1, [sp, #140]	@ 0x8c
 801e056:	ac0a      	add	r4, sp, #40	@ 0x28
 801e058:	e884 000c 	stmia.w	r4, {r2, r3}
 801e05c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801e060:	1e4f      	subs	r7, r1, #1
 801e062:	fa5f fc87 	uxtb.w	ip, r7
 801e066:	4682      	mov	sl, r0
 801e068:	9303      	str	r3, [sp, #12]
 801e06a:	f89d 0090 	ldrb.w	r0, [sp, #144]	@ 0x90
 801e06e:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 801e072:	f1bc 0f01 	cmp.w	ip, #1
 801e076:	9304      	str	r3, [sp, #16]
 801e078:	f9bd 8068 	ldrsh.w	r8, [sp, #104]	@ 0x68
 801e07c:	f9bd b06c 	ldrsh.w	fp, [sp, #108]	@ 0x6c
 801e080:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801e082:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 801e086:	9005      	str	r0, [sp, #20]
 801e088:	f89d 6094 	ldrb.w	r6, [sp, #148]	@ 0x94
 801e08c:	d905      	bls.n	801e09a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801e08e:	2904      	cmp	r1, #4
 801e090:	f000 80d0 	beq.w	801e234 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e8>
 801e094:	2908      	cmp	r1, #8
 801e096:	f040 816f 	bne.w	801e378 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x32c>
 801e09a:	7b53      	ldrb	r3, [r2, #13]
 801e09c:	7990      	ldrb	r0, [r2, #6]
 801e09e:	0159      	lsls	r1, r3, #5
 801e0a0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801e0a4:	ea50 0901 	orrs.w	r9, r0, r1
 801e0a8:	f000 80c1 	beq.w	801e22e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801e0ac:	011b      	lsls	r3, r3, #4
 801e0ae:	79d0      	ldrb	r0, [r2, #7]
 801e0b0:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801e0b4:	ea50 0301 	orrs.w	r3, r0, r1
 801e0b8:	9306      	str	r3, [sp, #24]
 801e0ba:	f000 80b8 	beq.w	801e22e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801e0be:	f992 3009 	ldrsb.w	r3, [r2, #9]
 801e0c2:	9a03      	ldr	r2, [sp, #12]
 801e0c4:	b29b      	uxth	r3, r3
 801e0c6:	2a00      	cmp	r2, #0
 801e0c8:	f040 80be 	bne.w	801e248 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fc>
 801e0cc:	4498      	add	r8, r3
 801e0ce:	fa0f f888 	sxth.w	r8, r8
 801e0d2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e0d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e0d8:	4543      	cmp	r3, r8
 801e0da:	dd06      	ble.n	801e0ea <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x9e>
 801e0dc:	9a03      	ldr	r2, [sp, #12]
 801e0de:	441a      	add	r2, r3
 801e0e0:	eba2 0508 	sub.w	r5, r2, r8
 801e0e4:	4698      	mov	r8, r3
 801e0e6:	b2ab      	uxth	r3, r5
 801e0e8:	9303      	str	r3, [sp, #12]
 801e0ea:	f8df c30c 	ldr.w	ip, [pc, #780]	@ 801e3f8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801e0ee:	465a      	mov	r2, fp
 801e0f0:	f89c 5000 	ldrb.w	r5, [ip]
 801e0f4:	4641      	mov	r1, r8
 801e0f6:	4633      	mov	r3, r6
 801e0f8:	4620      	mov	r0, r4
 801e0fa:	9507      	str	r5, [sp, #28]
 801e0fc:	f7f8 f8a8 	bl	8016250 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801e100:	465a      	mov	r2, fp
 801e102:	4641      	mov	r1, r8
 801e104:	4633      	mov	r3, r6
 801e106:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 801e10a:	4620      	mov	r0, r4
 801e10c:	f7f8 f8bd 	bl	801628a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801e110:	a910      	add	r1, sp, #64	@ 0x40
 801e112:	f821 0d0a 	strh.w	r0, [r1, #-10]!
 801e116:	a80d      	add	r0, sp, #52	@ 0x34
 801e118:	f7f8 f9e4 	bl	80164e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801e11c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e11e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801e122:	9308      	str	r3, [sp, #32]
 801e124:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e126:	f3c3 2b07 	ubfx	fp, r3, #8, #8
 801e12a:	fa5f f883 	uxtb.w	r8, r3
 801e12e:	2f07      	cmp	r7, #7
 801e130:	f200 811f 	bhi.w	801e372 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x326>
 801e134:	e8df f017 	tbh	[pc, r7, lsl #1]
 801e138:	009b00a1 	.word	0x009b00a1
 801e13c:	0095011d 	.word	0x0095011d
 801e140:	011d011d 	.word	0x011d011d
 801e144:	0008011d 	.word	0x0008011d
 801e148:	2708      	movs	r7, #8
 801e14a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801e14e:	4ca1      	ldr	r4, [pc, #644]	@ (801e3d4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801e150:	6820      	ldr	r0, [r4, #0]
 801e152:	2800      	cmp	r0, #0
 801e154:	f000 8137 	beq.w	801e3c6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801e158:	f7fd ff7a 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801e15c:	f8da 3000 	ldr.w	r3, [sl]
 801e160:	4650      	mov	r0, sl
 801e162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e164:	4798      	blx	r3
 801e166:	2e02      	cmp	r6, #2
 801e168:	f000 80e6 	beq.w	801e338 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ec>
 801e16c:	2e03      	cmp	r6, #3
 801e16e:	f000 80c7 	beq.w	801e300 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2b4>
 801e172:	2e01      	cmp	r6, #1
 801e174:	f000 80a8 	beq.w	801e2c8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 801e178:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e17a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801e17e:	8819      	ldrh	r1, [r3, #0]
 801e180:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801e184:	440a      	add	r2, r1
 801e186:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e188:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801e18c:	8848      	ldrh	r0, [r1, #2]
 801e18e:	6849      	ldr	r1, [r1, #4]
 801e190:	4403      	add	r3, r0
 801e192:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e196:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e198:	a80e      	add	r0, sp, #56	@ 0x38
 801e19a:	f7f8 f9e5 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e19e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801e1a2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801e1a6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801e1aa:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801e1ae:	f7fb fca3 	bl	8019af8 <nema_set_clip>
 801e1b2:	2200      	movs	r2, #0
 801e1b4:	9d05      	ldr	r5, [sp, #20]
 801e1b6:	4611      	mov	r1, r2
 801e1b8:	462b      	mov	r3, r5
 801e1ba:	4610      	mov	r0, r2
 801e1bc:	f7fb fcd0 	bl	8019b60 <nema_rgba>
 801e1c0:	f7fd fe40 	bl	801be44 <nema_set_const_color>
 801e1c4:	462b      	mov	r3, r5
 801e1c6:	4642      	mov	r2, r8
 801e1c8:	4659      	mov	r1, fp
 801e1ca:	9808      	ldr	r0, [sp, #32]
 801e1cc:	f7fb fcc8 	bl	8019b60 <nema_rgba>
 801e1d0:	f7fb fc86 	bl	8019ae0 <nema_set_tex_color>
 801e1d4:	f04f 33ff 	mov.w	r3, #4294967295
 801e1d8:	2201      	movs	r2, #1
 801e1da:	2100      	movs	r1, #0
 801e1dc:	487e      	ldr	r0, [pc, #504]	@ (801e3d8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801e1de:	f7fd fa6b 	bl	801b6b8 <nema_set_blend>
 801e1e2:	2200      	movs	r2, #0
 801e1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1e6:	9201      	str	r2, [sp, #4]
 801e1e8:	9300      	str	r3, [sp, #0]
 801e1ea:	4649      	mov	r1, r9
 801e1ec:	463b      	mov	r3, r7
 801e1ee:	9820      	ldr	r0, [sp, #128]	@ 0x80
 801e1f0:	9a06      	ldr	r2, [sp, #24]
 801e1f2:	f7fb fcbd 	bl	8019b70 <nema_bind_src_tex>
 801e1f6:	9b07      	ldr	r3, [sp, #28]
 801e1f8:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801e1fc:	2b01      	cmp	r3, #1
 801e1fe:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801e202:	d040      	beq.n	801e286 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x23a>
 801e204:	2e02      	cmp	r6, #2
 801e206:	d051      	beq.n	801e2ac <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801e208:	2e03      	cmp	r6, #3
 801e20a:	f000 80c7 	beq.w	801e39c <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801e20e:	2e01      	cmp	r6, #1
 801e210:	9b04      	ldr	r3, [sp, #16]
 801e212:	f000 80b8 	beq.w	801e386 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801e216:	1ac9      	subs	r1, r1, r3
 801e218:	9b03      	ldr	r3, [sp, #12]
 801e21a:	1ac0      	subs	r0, r0, r3
 801e21c:	f7fb fe34 	bl	8019e88 <nema_blit>
 801e220:	6823      	ldr	r3, [r4, #0]
 801e222:	2b00      	cmp	r3, #0
 801e224:	f000 80cf 	beq.w	801e3c6 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801e228:	2201      	movs	r2, #1
 801e22a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 801e22e:	b011      	add	sp, #68	@ 0x44
 801e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e234:	2b00      	cmp	r3, #0
 801e236:	f47f af30 	bne.w	801e09a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x4e>
 801e23a:	4b68      	ldr	r3, [pc, #416]	@ (801e3dc <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e23c:	4a68      	ldr	r2, [pc, #416]	@ (801e3e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801e23e:	f240 11bb 	movw	r1, #443	@ 0x1bb
 801e242:	4868      	ldr	r0, [pc, #416]	@ (801e3e4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801e244:	f00d fcb8 	bl	802bbb8 <__assert_func>
 801e248:	1ad5      	subs	r5, r2, r3
 801e24a:	b2ab      	uxth	r3, r5
 801e24c:	041a      	lsls	r2, r3, #16
 801e24e:	9303      	str	r3, [sp, #12]
 801e250:	f57f af3f 	bpl.w	801e0d2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801e254:	eba8 0803 	sub.w	r8, r8, r3
 801e258:	2300      	movs	r3, #0
 801e25a:	fa0f f888 	sxth.w	r8, r8
 801e25e:	9303      	str	r3, [sp, #12]
 801e260:	e737      	b.n	801e0d2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801e262:	f109 0301 	add.w	r3, r9, #1
 801e266:	105b      	asrs	r3, r3, #1
 801e268:	9309      	str	r3, [sp, #36]	@ 0x24
 801e26a:	2729      	movs	r7, #41	@ 0x29
 801e26c:	e76f      	b.n	801e14e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e26e:	f109 0303 	add.w	r3, r9, #3
 801e272:	109b      	asrs	r3, r3, #2
 801e274:	9309      	str	r3, [sp, #36]	@ 0x24
 801e276:	2728      	movs	r7, #40	@ 0x28
 801e278:	e769      	b.n	801e14e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e27a:	f109 0307 	add.w	r3, r9, #7
 801e27e:	10db      	asrs	r3, r3, #3
 801e280:	9309      	str	r3, [sp, #36]	@ 0x24
 801e282:	2727      	movs	r7, #39	@ 0x27
 801e284:	e763      	b.n	801e14e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e286:	2e02      	cmp	r6, #2
 801e288:	f000 8093 	beq.w	801e3b2 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x366>
 801e28c:	2e03      	cmp	r6, #3
 801e28e:	d00d      	beq.n	801e2ac <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x260>
 801e290:	2e01      	cmp	r6, #1
 801e292:	f000 8091 	beq.w	801e3b8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801e296:	461a      	mov	r2, r3
 801e298:	9b03      	ldr	r3, [sp, #12]
 801e29a:	4419      	add	r1, r3
 801e29c:	9b04      	ldr	r3, [sp, #16]
 801e29e:	eba1 0109 	sub.w	r1, r1, r9
 801e2a2:	3101      	adds	r1, #1
 801e2a4:	1ac0      	subs	r0, r0, r3
 801e2a6:	f7fb fe09 	bl	8019ebc <nema_blit_rotate>
 801e2aa:	e7b9      	b.n	801e220 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801e2ac:	9b04      	ldr	r3, [sp, #16]
 801e2ae:	2202      	movs	r2, #2
 801e2b0:	4419      	add	r1, r3
 801e2b2:	9b03      	ldr	r3, [sp, #12]
 801e2b4:	4418      	add	r0, r3
 801e2b6:	9b06      	ldr	r3, [sp, #24]
 801e2b8:	eba0 0009 	sub.w	r0, r0, r9
 801e2bc:	1ac9      	subs	r1, r1, r3
 801e2be:	3101      	adds	r1, #1
 801e2c0:	3001      	adds	r0, #1
 801e2c2:	f7fb fdfb 	bl	8019ebc <nema_blit_rotate>
 801e2c6:	e7ab      	b.n	801e220 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801e2c8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e2cc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801e2d0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e2d2:	440b      	add	r3, r1
 801e2d4:	8852      	ldrh	r2, [r2, #2]
 801e2d6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801e2d8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e2da:	1a9b      	subs	r3, r3, r2
 801e2dc:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 801e2e0:	f8b0 c000 	ldrh.w	ip, [r0]
 801e2e4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801e2e8:	8880      	ldrh	r0, [r0, #4]
 801e2ea:	1a5b      	subs	r3, r3, r1
 801e2ec:	4462      	add	r2, ip
 801e2ee:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801e2f2:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c
 801e2f6:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 801e2fa:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 801e2fe:	e74b      	b.n	801e198 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801e300:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801e304:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801e308:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e30a:	440b      	add	r3, r1
 801e30c:	8812      	ldrh	r2, [r2, #0]
 801e30e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801e310:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e312:	1a9b      	subs	r3, r3, r2
 801e314:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 801e318:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 801e31c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801e320:	88c0      	ldrh	r0, [r0, #6]
 801e322:	1a5b      	subs	r3, r3, r1
 801e324:	4462      	add	r2, ip
 801e326:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e32a:	f8ad 103e 	strh.w	r1, [sp, #62]	@ 0x3e
 801e32e:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801e332:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 801e336:	e72f      	b.n	801e198 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801e338:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e33c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801e340:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801e344:	440a      	add	r2, r1
 801e346:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e348:	8808      	ldrh	r0, [r1, #0]
 801e34a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801e34e:	1a12      	subs	r2, r2, r0
 801e350:	440b      	add	r3, r1
 801e352:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e354:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801e356:	8849      	ldrh	r1, [r1, #2]
 801e358:	8880      	ldrh	r0, [r0, #4]
 801e35a:	1a5b      	subs	r3, r3, r1
 801e35c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e35e:	1a12      	subs	r2, r2, r0
 801e360:	88c8      	ldrh	r0, [r1, #6]
 801e362:	6849      	ldr	r1, [r1, #4]
 801e364:	1a1b      	subs	r3, r3, r0
 801e366:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801e36a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e36e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e370:	e712      	b.n	801e198 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14c>
 801e372:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801e376:	e6ea      	b.n	801e14e <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e378:	4b1b      	ldr	r3, [pc, #108]	@ (801e3e8 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801e37a:	4a19      	ldr	r2, [pc, #100]	@ (801e3e0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801e37c:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
 801e380:	4818      	ldr	r0, [pc, #96]	@ (801e3e4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>)
 801e382:	f00d fc19 	bl	802bbb8 <__assert_func>
 801e386:	4403      	add	r3, r0
 801e388:	4618      	mov	r0, r3
 801e38a:	9b06      	ldr	r3, [sp, #24]
 801e38c:	2203      	movs	r2, #3
 801e38e:	1ac0      	subs	r0, r0, r3
 801e390:	9b03      	ldr	r3, [sp, #12]
 801e392:	3001      	adds	r0, #1
 801e394:	1ac9      	subs	r1, r1, r3
 801e396:	f7fb fd91 	bl	8019ebc <nema_blit_rotate>
 801e39a:	e741      	b.n	801e220 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801e39c:	9b03      	ldr	r3, [sp, #12]
 801e39e:	2201      	movs	r2, #1
 801e3a0:	4419      	add	r1, r3
 801e3a2:	9b04      	ldr	r3, [sp, #16]
 801e3a4:	eba1 0109 	sub.w	r1, r1, r9
 801e3a8:	3101      	adds	r1, #1
 801e3aa:	1ac0      	subs	r0, r0, r3
 801e3ac:	f7fb fd86 	bl	8019ebc <nema_blit_rotate>
 801e3b0:	e736      	b.n	801e220 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801e3b2:	9b04      	ldr	r3, [sp, #16]
 801e3b4:	4418      	add	r0, r3
 801e3b6:	e7e8      	b.n	801e38a <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33e>
 801e3b8:	9b04      	ldr	r3, [sp, #16]
 801e3ba:	1ac9      	subs	r1, r1, r3
 801e3bc:	9b03      	ldr	r3, [sp, #12]
 801e3be:	1ac0      	subs	r0, r0, r3
 801e3c0:	f7fb fd62 	bl	8019e88 <nema_blit>
 801e3c4:	e72c      	b.n	801e220 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d4>
 801e3c6:	4b09      	ldr	r3, [pc, #36]	@ (801e3ec <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801e3c8:	4a09      	ldr	r2, [pc, #36]	@ (801e3f0 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801e3ca:	217c      	movs	r1, #124	@ 0x7c
 801e3cc:	4809      	ldr	r0, [pc, #36]	@ (801e3f4 <_ZN8touchgfx8LCDGPU2D9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801e3ce:	f00d fbf3 	bl	802bbb8 <__assert_func>
 801e3d2:	bf00      	nop
 801e3d4:	2015a1e4 	.word	0x2015a1e4
 801e3d8:	08000504 	.word	0x08000504
 801e3dc:	0802f02c 	.word	0x0802f02c
 801e3e0:	08030760 	.word	0x08030760
 801e3e4:	0802eb5c 	.word	0x0802eb5c
 801e3e8:	0802ef9c 	.word	0x0802ef9c
 801e3ec:	0802eab8 	.word	0x0802eab8
 801e3f0:	0802f324 	.word	0x0802f324
 801e3f4:	0802eae0 	.word	0x0802eae0
 801e3f8:	2015a070 	.word	0x2015a070

0801e3fc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e400:	ed2d 8b08 	vpush	{d8-d11}
 801e404:	b08b      	sub	sp, #44	@ 0x2c
 801e406:	f89d 707c 	ldrb.w	r7, [sp, #124]	@ 0x7c
 801e40a:	e9dd 951c 	ldrd	r9, r5, [sp, #112]	@ 0x70
 801e40e:	f8bd 8078 	ldrh.w	r8, [sp, #120]	@ 0x78
 801e412:	f8bd e080 	ldrh.w	lr, [sp, #128]	@ 0x80
 801e416:	2f00      	cmp	r7, #0
 801e418:	d067      	beq.n	801e4ea <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xee>
 801e41a:	f9b5 a004 	ldrsh.w	sl, [r5, #4]
 801e41e:	f1ba 0f00 	cmp.w	sl, #0
 801e422:	dd62      	ble.n	801e4ea <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xee>
 801e424:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801e428:	f1ba 0f00 	cmp.w	sl, #0
 801e42c:	dd5d      	ble.n	801e4ea <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xee>
 801e42e:	f3c8 0a87 	ubfx	sl, r8, #2, #8
 801e432:	f1ba 0f0b 	cmp.w	sl, #11
 801e436:	d05d      	beq.n	801e4f4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xf8>
 801e438:	461c      	mov	r4, r3
 801e43a:	4bcd      	ldr	r3, [pc, #820]	@ (801e770 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x374>)
 801e43c:	4616      	mov	r6, r2
 801e43e:	781b      	ldrb	r3, [r3, #0]
 801e440:	6862      	ldr	r2, [r4, #4]
 801e442:	2b01      	cmp	r3, #1
 801e444:	9205      	str	r2, [sp, #20]
 801e446:	4684      	mov	ip, r0
 801e448:	e9d4 b202 	ldrd	fp, r2, [r4, #8]
 801e44c:	9202      	str	r2, [sp, #8]
 801e44e:	d102      	bne.n	801e456 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5a>
 801e450:	f8cd b008 	str.w	fp, [sp, #8]
 801e454:	4693      	mov	fp, r2
 801e456:	f1ba 0f0d 	cmp.w	sl, #13
 801e45a:	d03d      	beq.n	801e4d8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xdc>
 801e45c:	4623      	mov	r3, r4
 801e45e:	4cc5      	ldr	r4, [pc, #788]	@ (801e774 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x378>)
 801e460:	6820      	ldr	r0, [r4, #0]
 801e462:	2800      	cmp	r0, #0
 801e464:	f000 8243 	beq.w	801e8ee <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4f2>
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	f8cd c010 	str.w	ip, [sp, #16]
 801e46e:	9303      	str	r3, [sp, #12]
 801e470:	f7fd fdee 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801e474:	9a04      	ldr	r2, [sp, #16]
 801e476:	6813      	ldr	r3, [r2, #0]
 801e478:	4610      	mov	r0, r2
 801e47a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e47c:	4798      	blx	r3
 801e47e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801e482:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801e486:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801e48a:	f9b5 0000 	ldrsh.w	r0, [r5]
 801e48e:	f7fb fb33 	bl	8019af8 <nema_set_clip>
 801e492:	2200      	movs	r2, #0
 801e494:	463b      	mov	r3, r7
 801e496:	4611      	mov	r1, r2
 801e498:	4610      	mov	r0, r2
 801e49a:	f7fb fb61 	bl	8019b60 <nema_rgba>
 801e49e:	f7fd fcd1 	bl	801be44 <nema_set_const_color>
 801e4a2:	f04f 33ff 	mov.w	r3, #4294967295
 801e4a6:	2201      	movs	r2, #1
 801e4a8:	2100      	movs	r1, #0
 801e4aa:	48b3      	ldr	r0, [pc, #716]	@ (801e778 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37c>)
 801e4ac:	f7fd f904 	bl	801b6b8 <nema_set_blend>
 801e4b0:	f1ba 0f0d 	cmp.w	sl, #13
 801e4b4:	f200 8221 	bhi.w	801e8fa <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4fe>
 801e4b8:	e8df f01a 	tbh	[pc, sl, lsl #1]
 801e4bc:	01720027 	.word	0x01720027
 801e4c0:	021f0170 	.word	0x021f0170
 801e4c4:	021f021f 	.word	0x021f021f
 801e4c8:	021f021f 	.word	0x021f021f
 801e4cc:	021f021f 	.word	0x021f021f
 801e4d0:	021f021f 	.word	0x021f021f
 801e4d4:	01570162 	.word	0x01570162
 801e4d8:	9b05      	ldr	r3, [sp, #20]
 801e4da:	b133      	cbz	r3, 801e4ea <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xee>
 801e4dc:	781b      	ldrb	r3, [r3, #0]
 801e4de:	f1a3 0216 	sub.w	r2, r3, #22
 801e4e2:	2a01      	cmp	r2, #1
 801e4e4:	d9ba      	bls.n	801e45c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x60>
 801e4e6:	2b12      	cmp	r3, #18
 801e4e8:	d0b8      	beq.n	801e45c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x60>
 801e4ea:	b00b      	add	sp, #44	@ 0x2c
 801e4ec:	ecbd 8b08 	vpop	{d8-d11}
 801e4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4f4:	e9cd 7e1f 	strd	r7, lr, [sp, #124]	@ 0x7c
 801e4f8:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
 801e4fc:	b00b      	add	sp, #44	@ 0x2c
 801e4fe:	ecbd 8b08 	vpop	{d8-d11}
 801e502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e506:	f7f7 b99d 	b.w	8015844 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 801e50a:	2304      	movs	r3, #4
 801e50c:	f04f 31ff 	mov.w	r1, #4294967295
 801e510:	f008 0201 	and.w	r2, r8, #1
 801e514:	9201      	str	r2, [sp, #4]
 801e516:	9803      	ldr	r0, [sp, #12]
 801e518:	9a02      	ldr	r2, [sp, #8]
 801e51a:	9100      	str	r1, [sp, #0]
 801e51c:	4659      	mov	r1, fp
 801e51e:	f7fb fb27 	bl	8019b70 <nema_bind_src_tex>
 801e522:	2001      	movs	r0, #1
 801e524:	f7fc f992 	bl	801a84c <nema_enable_tiling>
 801e528:	2301      	movs	r3, #1
 801e52a:	461a      	mov	r2, r3
 801e52c:	4619      	mov	r1, r3
 801e52e:	4618      	mov	r0, r3
 801e530:	f7fc f9b4 	bl	801a89c <nema_enable_aa>
 801e534:	edd6 7a03 	vldr	s15, [r6, #12]
 801e538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e53c:	ed96 7a04 	vldr	s14, [r6, #16]
 801e540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e544:	4607      	mov	r7, r0
 801e546:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e54a:	f240 81aa 	bls.w	801e8a2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a6>
 801e54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e552:	bf94      	ite	ls
 801e554:	2301      	movls	r3, #1
 801e556:	2302      	movhi	r3, #2
 801e558:	edd6 7a08 	vldr	s15, [r6, #32]
 801e55c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e560:	2200      	movs	r2, #0
 801e562:	ed96 7a09 	vldr	s14, [r6, #36]	@ 0x24
 801e566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e56a:	a90a      	add	r1, sp, #40	@ 0x28
 801e56c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e570:	f843 2c10 	str.w	r2, [r3, #-16]
 801e574:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e578:	f240 818d 	bls.w	801e896 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x49a>
 801e57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e580:	bf94      	ite	ls
 801e582:	2301      	movls	r3, #1
 801e584:	2302      	movhi	r3, #2
 801e586:	edd6 7a0d 	vldr	s15, [r6, #52]	@ 0x34
 801e58a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e58e:	2201      	movs	r2, #1
 801e590:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 801e594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e598:	a90a      	add	r1, sp, #40	@ 0x28
 801e59a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e59e:	f843 2c10 	str.w	r2, [r3, #-16]
 801e5a2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e5a6:	f240 8188 	bls.w	801e8ba <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4be>
 801e5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5ae:	bf94      	ite	ls
 801e5b0:	2301      	movls	r3, #1
 801e5b2:	2302      	movhi	r3, #2
 801e5b4:	edd6 7a12 	vldr	s15, [r6, #72]	@ 0x48
 801e5b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e5bc:	2202      	movs	r2, #2
 801e5be:	ed96 7a13 	vldr	s14, [r6, #76]	@ 0x4c
 801e5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5c6:	a90a      	add	r1, sp, #40	@ 0x28
 801e5c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e5cc:	f843 2c10 	str.w	r2, [r3, #-16]
 801e5d0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801e5d4:	f240 816b 	bls.w	801e8ae <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4b2>
 801e5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5dc:	bf94      	ite	ls
 801e5de:	2301      	movls	r3, #1
 801e5e0:	2302      	movhi	r3, #2
 801e5e2:	2203      	movs	r2, #3
 801e5e4:	a90a      	add	r1, sp, #40	@ 0x28
 801e5e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e5ea:	f843 2c10 	str.w	r2, [r3, #-16]
 801e5ee:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801e5f2:	9907      	ldr	r1, [sp, #28]
 801e5f4:	f340 80d6 	ble.w	801e7a4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801e5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5fa:	9808      	ldr	r0, [sp, #32]
 801e5fc:	9a06      	ldr	r2, [sp, #24]
 801e5fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e602:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801e606:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e60a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801e60e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e612:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 801e616:	eb06 080e 	add.w	r8, r6, lr
 801e61a:	0089      	lsls	r1, r1, #2
 801e61c:	0080      	lsls	r0, r0, #2
 801e61e:	1872      	adds	r2, r6, r1
 801e620:	eb06 0a00 	add.w	sl, r6, r0
 801e624:	eb06 030c 	add.w	r3, r6, ip
 801e628:	5871      	ldr	r1, [r6, r1]
 801e62a:	5830      	ldr	r0, [r6, r0]
 801e62c:	f856 c00c 	ldr.w	ip, [r6, ip]
 801e630:	edd8 4a01 	vldr	s9, [r8, #4]
 801e634:	f856 800e 	ldr.w	r8, [r6, lr]
 801e638:	9e02      	ldr	r6, [sp, #8]
 801e63a:	6852      	ldr	r2, [r2, #4]
 801e63c:	2eff      	cmp	r6, #255	@ 0xff
 801e63e:	ed9a 5a01 	vldr	s10, [sl, #4]
 801e642:	685b      	ldr	r3, [r3, #4]
 801e644:	f340 80d2 	ble.w	801e7ec <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3f0>
 801e648:	429a      	cmp	r2, r3
 801e64a:	f000 815d 	beq.w	801e908 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x50c>
 801e64e:	f9b9 6000 	ldrsh.w	r6, [r9]
 801e652:	ee07 ca90 	vmov	s15, ip
 801e656:	ee08 6a90 	vmov	s17, r6
 801e65a:	f9b9 6002 	ldrsh.w	r6, [r9, #2]
 801e65e:	ee04 3a10 	vmov	s8, r3
 801e662:	ee08 6a10 	vmov	s16, r6
 801e666:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801e66a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801e66e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801e672:	eef8 3ac4 	vcvt.f32.s32	s7, s8
 801e676:	ee07 1a90 	vmov	s15, r1
 801e67a:	ee07 0a10 	vmov	s14, r0
 801e67e:	ee06 8a10 	vmov	s12, r8
 801e682:	ee04 2a10 	vmov	s8, r2
 801e686:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e77c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801e68a:	eef0 ba68 	vmov.f32	s23, s17
 801e68e:	eeb0 ba68 	vmov.f32	s22, s17
 801e692:	eef0 aa68 	vmov.f32	s21, s17
 801e696:	eeb0 aa48 	vmov.f32	s20, s16
 801e69a:	eef0 9a48 	vmov.f32	s19, s16
 801e69e:	eeb0 9a48 	vmov.f32	s18, s16
 801e6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e6a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e6aa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801e6ae:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801e6b2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801e6b6:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801e6ba:	f9b5 b006 	ldrsh.w	fp, [r5, #6]
 801e6be:	eee5 baa6 	vfma.f32	s23, s11, s13
 801e6c2:	f1bb 0f00 	cmp.w	fp, #0
 801e6c6:	eea7 baa6 	vfma.f32	s22, s15, s13
 801e6ca:	eee7 aa26 	vfma.f32	s21, s14, s13
 801e6ce:	eee6 8a26 	vfma.f32	s17, s12, s13
 801e6d2:	eea3 aaa6 	vfma.f32	s20, s7, s13
 801e6d6:	eee4 9a26 	vfma.f32	s19, s8, s13
 801e6da:	eea5 9a26 	vfma.f32	s18, s10, s13
 801e6de:	eea4 8aa6 	vfma.f32	s16, s9, s13
 801e6e2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 801e6e6:	dd38      	ble.n	801e75a <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35e>
 801e6e8:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 801e6ec:	f1bb 0f80 	cmp.w	fp, #128	@ 0x80
 801e6f0:	46da      	mov	sl, fp
 801e6f2:	bfa8      	it	ge
 801e6f4:	f04f 0a80 	movge.w	sl, #128	@ 0x80
 801e6f8:	2e00      	cmp	r6, #0
 801e6fa:	f9b5 8000 	ldrsh.w	r8, [r5]
 801e6fe:	dd25      	ble.n	801e74c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x350>
 801e700:	2e80      	cmp	r6, #128	@ 0x80
 801e702:	4632      	mov	r2, r6
 801e704:	4640      	mov	r0, r8
 801e706:	4653      	mov	r3, sl
 801e708:	bfa8      	it	ge
 801e70a:	2280      	movge	r2, #128	@ 0x80
 801e70c:	4649      	mov	r1, r9
 801e70e:	f7fb f9f3 	bl	8019af8 <nema_set_clip>
 801e712:	eef0 3a48 	vmov.f32	s7, s16
 801e716:	eeb0 3a68 	vmov.f32	s6, s17
 801e71a:	eef0 2a49 	vmov.f32	s5, s18
 801e71e:	eeb0 2a6a 	vmov.f32	s4, s21
 801e722:	eef0 1a69 	vmov.f32	s3, s19
 801e726:	eeb0 1a4b 	vmov.f32	s2, s22
 801e72a:	eef0 0a4a 	vmov.f32	s1, s20
 801e72e:	eeb0 0a6b 	vmov.f32	s0, s23
 801e732:	f7fb fd23 	bl	801a17c <nema_blit_quad_fit>
 801e736:	6820      	ldr	r0, [r4, #0]
 801e738:	2800      	cmp	r0, #0
 801e73a:	f000 80d8 	beq.w	801e8ee <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4f2>
 801e73e:	3e80      	subs	r6, #128	@ 0x80
 801e740:	f7fd fca6 	bl	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801e744:	2e00      	cmp	r6, #0
 801e746:	f108 0880 	add.w	r8, r8, #128	@ 0x80
 801e74a:	dcd9      	bgt.n	801e700 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x304>
 801e74c:	f1ab 0b80 	sub.w	fp, fp, #128	@ 0x80
 801e750:	f1bb 0f00 	cmp.w	fp, #0
 801e754:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 801e758:	dcc6      	bgt.n	801e6e8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ec>
 801e75a:	4638      	mov	r0, r7
 801e75c:	b00b      	add	sp, #44	@ 0x2c
 801e75e:	ecbd 8b08 	vpop	{d8-d11}
 801e762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e766:	f7fc b8bb 	b.w	801a8e0 <nema_enable_aa_flags>
 801e76a:	9b05      	ldr	r3, [sp, #20]
 801e76c:	781b      	ldrb	r3, [r3, #0]
 801e76e:	e6cd      	b.n	801e50c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x110>
 801e770:	2015a070 	.word	0x2015a070
 801e774:	2015a1e4 	.word	0x2015a1e4
 801e778:	08000504 	.word	0x08000504
 801e77c:	3d800000 	.word	0x3d800000
 801e780:	4a65      	ldr	r2, [pc, #404]	@ (801e918 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x51c>)
 801e782:	23ff      	movs	r3, #255	@ 0xff
 801e784:	6810      	ldr	r0, [r2, #0]
 801e786:	b2c2      	uxtb	r2, r0
 801e788:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e78c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801e790:	f7fb f9e6 	bl	8019b60 <nema_rgba>
 801e794:	f7fb f9a4 	bl	8019ae0 <nema_set_tex_color>
 801e798:	2329      	movs	r3, #41	@ 0x29
 801e79a:	e6b7      	b.n	801e50c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x110>
 801e79c:	2310      	movs	r3, #16
 801e79e:	e6b5      	b.n	801e50c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x110>
 801e7a0:	2339      	movs	r3, #57	@ 0x39
 801e7a2:	e6b3      	b.n	801e50c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x110>
 801e7a4:	9b08      	ldr	r3, [sp, #32]
 801e7a6:	9806      	ldr	r0, [sp, #24]
 801e7a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e7aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801e7ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801e7b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801e7b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e7ba:	009b      	lsls	r3, r3, #2
 801e7bc:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 801e7c0:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 801e7c4:	0089      	lsls	r1, r1, #2
 801e7c6:	18f0      	adds	r0, r6, r3
 801e7c8:	1872      	adds	r2, r6, r1
 801e7ca:	eb06 0a0c 	add.w	sl, r6, ip
 801e7ce:	eb06 080e 	add.w	r8, r6, lr
 801e7d2:	ed90 5a01 	vldr	s10, [r0, #4]
 801e7d6:	edd8 4a01 	vldr	s9, [r8, #4]
 801e7da:	58f0      	ldr	r0, [r6, r3]
 801e7dc:	6852      	ldr	r2, [r2, #4]
 801e7de:	5871      	ldr	r1, [r6, r1]
 801e7e0:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e7e4:	f856 c00c 	ldr.w	ip, [r6, ip]
 801e7e8:	f856 800e 	ldr.w	r8, [r6, lr]
 801e7ec:	429a      	cmp	r2, r3
 801e7ee:	d06a      	beq.n	801e8c6 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ca>
 801e7f0:	ee07 8a90 	vmov	s15, r8
 801e7f4:	f9b9 5000 	ldrsh.w	r5, [r9]
 801e7f8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801e7fc:	ee00 5a10 	vmov	s0, r5
 801e800:	ee07 0a90 	vmov	s15, r0
 801e804:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 801e808:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801e80c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e810:	ee00 5a90 	vmov	s1, r5
 801e814:	ee07 1a90 	vmov	s15, r1
 801e818:	eddf 6a40 	vldr	s13, [pc, #256]	@ 801e91c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x520>
 801e81c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801e820:	ee04 2a10 	vmov	s8, r2
 801e824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e828:	eeb0 1a40 	vmov.f32	s2, s0
 801e82c:	eef8 1ac4 	vcvt.f32.s32	s3, s8
 801e830:	ee05 ca90 	vmov	s11, ip
 801e834:	ee04 3a10 	vmov	s8, r3
 801e838:	eea7 1aa6 	vfma.f32	s2, s15, s13
 801e83c:	eef0 7a60 	vmov.f32	s15, s1
 801e840:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801e844:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801e848:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801e84c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801e850:	eeb0 3a40 	vmov.f32	s6, s0
 801e854:	eeb0 2a40 	vmov.f32	s4, s0
 801e858:	eef0 3a60 	vmov.f32	s7, s1
 801e85c:	eef0 2a60 	vmov.f32	s5, s1
 801e860:	eee1 7aa6 	vfma.f32	s15, s3, s13
 801e864:	eea6 3a26 	vfma.f32	s6, s12, s13
 801e868:	eea7 2a26 	vfma.f32	s4, s14, s13
 801e86c:	eea5 0aa6 	vfma.f32	s0, s11, s13
 801e870:	eee4 3aa6 	vfma.f32	s7, s9, s13
 801e874:	eee5 2a26 	vfma.f32	s5, s10, s13
 801e878:	eef0 1a67 	vmov.f32	s3, s15
 801e87c:	eee4 0a26 	vfma.f32	s1, s8, s13
 801e880:	f7fb fc7c 	bl	801a17c <nema_blit_quad_fit>
 801e884:	6820      	ldr	r0, [r4, #0]
 801e886:	b390      	cbz	r0, 801e8ee <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4f2>
 801e888:	b00b      	add	sp, #44	@ 0x2c
 801e88a:	ecbd 8b08 	vpop	{d8-d11}
 801e88e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e892:	f7fd bbfd 	b.w	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801e896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e89a:	bf94      	ite	ls
 801e89c:	4613      	movls	r3, r2
 801e89e:	2303      	movhi	r3, #3
 801e8a0:	e671      	b.n	801e586 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x18a>
 801e8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8a6:	bf94      	ite	ls
 801e8a8:	2300      	movls	r3, #0
 801e8aa:	2303      	movhi	r3, #3
 801e8ac:	e654      	b.n	801e558 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x15c>
 801e8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8b2:	bf94      	ite	ls
 801e8b4:	2300      	movls	r3, #0
 801e8b6:	2303      	movhi	r3, #3
 801e8b8:	e693      	b.n	801e5e2 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e6>
 801e8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8be:	bf94      	ite	ls
 801e8c0:	2300      	movls	r3, #0
 801e8c2:	2303      	movhi	r3, #3
 801e8c4:	e676      	b.n	801e5b4 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1b8>
 801e8c6:	4281      	cmp	r1, r0
 801e8c8:	d192      	bne.n	801e7f0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3f4>
 801e8ca:	2200      	movs	r2, #0
 801e8cc:	ee15 6a10 	vmov	r6, s10
 801e8d0:	ee14 ea90 	vmov	lr, s9
 801e8d4:	4576      	cmp	r6, lr
 801e8d6:	d002      	beq.n	801e8de <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4e2>
 801e8d8:	b1da      	cbz	r2, 801e912 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x516>
 801e8da:	461a      	mov	r2, r3
 801e8dc:	e6b7      	b.n	801e64e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x252>
 801e8de:	45c4      	cmp	ip, r8
 801e8e0:	d1fa      	bne.n	801e8d8 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4dc>
 801e8e2:	460d      	mov	r5, r1
 801e8e4:	46e0      	mov	r8, ip
 801e8e6:	4601      	mov	r1, r0
 801e8e8:	461a      	mov	r2, r3
 801e8ea:	4628      	mov	r0, r5
 801e8ec:	e780      	b.n	801e7f0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3f4>
 801e8ee:	4b0c      	ldr	r3, [pc, #48]	@ (801e920 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x524>)
 801e8f0:	4a0c      	ldr	r2, [pc, #48]	@ (801e924 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x528>)
 801e8f2:	217c      	movs	r1, #124	@ 0x7c
 801e8f4:	480c      	ldr	r0, [pc, #48]	@ (801e928 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x52c>)
 801e8f6:	f00d f95f 	bl	802bbb8 <__assert_func>
 801e8fa:	4b0c      	ldr	r3, [pc, #48]	@ (801e92c <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x530>)
 801e8fc:	4a0c      	ldr	r2, [pc, #48]	@ (801e930 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x534>)
 801e8fe:	f44f 7157 	mov.w	r1, #860	@ 0x35c
 801e902:	480c      	ldr	r0, [pc, #48]	@ (801e934 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x538>)
 801e904:	f00d f958 	bl	802bbb8 <__assert_func>
 801e908:	4281      	cmp	r1, r0
 801e90a:	f47f aea0 	bne.w	801e64e <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x252>
 801e90e:	2201      	movs	r2, #1
 801e910:	e7dc      	b.n	801e8cc <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d0>
 801e912:	461a      	mov	r2, r3
 801e914:	e76c      	b.n	801e7f0 <_ZN8touchgfx8LCDGPU2D18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3f4>
 801e916:	bf00      	nop
 801e918:	2015a080 	.word	0x2015a080
 801e91c:	3d800000 	.word	0x3d800000
 801e920:	0802eab8 	.word	0x0802eab8
 801e924:	0802f324 	.word	0x0802f324
 801e928:	0802eae0 	.word	0x0802eae0
 801e92c:	0802e9b0 	.word	0x0802e9b0
 801e930:	0802f4dc 	.word	0x0802f4dc
 801e934:	0802eb5c 	.word	0x0802eb5c

0801e938 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e93c:	4680      	mov	r8, r0
 801e93e:	460f      	mov	r7, r1
 801e940:	4614      	mov	r4, r2
 801e942:	461e      	mov	r6, r3
 801e944:	4db2      	ldr	r5, [pc, #712]	@ (801ec10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2d8>)
 801e946:	e8d5 3f8f 	ldab	r3, [r5]
 801e94a:	07da      	lsls	r2, r3, #31
 801e94c:	f140 823a 	bpl.w	801edc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48c>
 801e950:	4db0      	ldr	r5, [pc, #704]	@ (801ec14 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2dc>)
 801e952:	e8d5 3f8f 	ldab	r3, [r5]
 801e956:	07db      	lsls	r3, r3, #31
 801e958:	f140 8225 	bpl.w	801eda6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46e>
 801e95c:	4dae      	ldr	r5, [pc, #696]	@ (801ec18 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e0>)
 801e95e:	e8d5 3f8f 	ldab	r3, [r5]
 801e962:	07d8      	lsls	r0, r3, #31
 801e964:	f140 8210 	bpl.w	801ed88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x450>
 801e968:	4dac      	ldr	r5, [pc, #688]	@ (801ec1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e4>)
 801e96a:	e8d5 3f8f 	ldab	r3, [r5]
 801e96e:	07d9      	lsls	r1, r3, #31
 801e970:	f140 81fb 	bpl.w	801ed6a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x432>
 801e974:	4daa      	ldr	r5, [pc, #680]	@ (801ec20 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2e8>)
 801e976:	e8d5 3f8f 	ldab	r3, [r5]
 801e97a:	07da      	lsls	r2, r3, #31
 801e97c:	f140 81e6 	bpl.w	801ed4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x414>
 801e980:	4da8      	ldr	r5, [pc, #672]	@ (801ec24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2ec>)
 801e982:	e8d5 3f8f 	ldab	r3, [r5]
 801e986:	07db      	lsls	r3, r3, #31
 801e988:	f140 81d1 	bpl.w	801ed2e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3f6>
 801e98c:	4da6      	ldr	r5, [pc, #664]	@ (801ec28 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f0>)
 801e98e:	e8d5 3f8f 	ldab	r3, [r5]
 801e992:	07d8      	lsls	r0, r3, #31
 801e994:	f140 81bc 	bpl.w	801ed10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3d8>
 801e998:	4da4      	ldr	r5, [pc, #656]	@ (801ec2c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f4>)
 801e99a:	e8d5 3f8f 	ldab	r3, [r5]
 801e99e:	07d9      	lsls	r1, r3, #31
 801e9a0:	f140 81a7 	bpl.w	801ecf2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3ba>
 801e9a4:	4da2      	ldr	r5, [pc, #648]	@ (801ec30 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2f8>)
 801e9a6:	e8d5 3f8f 	ldab	r3, [r5]
 801e9aa:	07da      	lsls	r2, r3, #31
 801e9ac:	f140 8192 	bpl.w	801ecd4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x39c>
 801e9b0:	4da0      	ldr	r5, [pc, #640]	@ (801ec34 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2fc>)
 801e9b2:	e8d5 3f8f 	ldab	r3, [r5]
 801e9b6:	07db      	lsls	r3, r3, #31
 801e9b8:	f140 811a 	bpl.w	801ebf0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2b8>
 801e9bc:	4d9e      	ldr	r5, [pc, #632]	@ (801ec38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x300>)
 801e9be:	e8d5 3f8f 	ldab	r3, [r5]
 801e9c2:	07d8      	lsls	r0, r3, #31
 801e9c4:	f140 8105 	bpl.w	801ebd2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x29a>
 801e9c8:	4d9c      	ldr	r5, [pc, #624]	@ (801ec3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x304>)
 801e9ca:	e8d5 3f8f 	ldab	r3, [r5]
 801e9ce:	07d9      	lsls	r1, r3, #31
 801e9d0:	f140 80f0 	bpl.w	801ebb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x27c>
 801e9d4:	4d9a      	ldr	r5, [pc, #616]	@ (801ec40 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x308>)
 801e9d6:	e8d5 3f8f 	ldab	r3, [r5]
 801e9da:	07da      	lsls	r2, r3, #31
 801e9dc:	f140 80db 	bpl.w	801eb96 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x25e>
 801e9e0:	4d98      	ldr	r5, [pc, #608]	@ (801ec44 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30c>)
 801e9e2:	e8d5 3f8f 	ldab	r3, [r5]
 801e9e6:	07db      	lsls	r3, r3, #31
 801e9e8:	f140 80c6 	bpl.w	801eb78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x240>
 801e9ec:	4d96      	ldr	r5, [pc, #600]	@ (801ec48 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x310>)
 801e9ee:	e8d5 3f8f 	ldab	r3, [r5]
 801e9f2:	07d8      	lsls	r0, r3, #31
 801e9f4:	f140 80b1 	bpl.w	801eb5a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x222>
 801e9f8:	4d94      	ldr	r5, [pc, #592]	@ (801ec4c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x314>)
 801e9fa:	e8d5 3f8f 	ldab	r3, [r5]
 801e9fe:	07d9      	lsls	r1, r3, #31
 801ea00:	f140 809c 	bpl.w	801eb3c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x204>
 801ea04:	4d92      	ldr	r5, [pc, #584]	@ (801ec50 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x318>)
 801ea06:	e8d5 3f8f 	ldab	r3, [r5]
 801ea0a:	07da      	lsls	r2, r3, #31
 801ea0c:	f140 8087 	bpl.w	801eb1e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e6>
 801ea10:	4d90      	ldr	r5, [pc, #576]	@ (801ec54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x31c>)
 801ea12:	e8d5 3f8f 	ldab	r3, [r5]
 801ea16:	07db      	lsls	r3, r3, #31
 801ea18:	d573      	bpl.n	801eb02 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ca>
 801ea1a:	4d8f      	ldr	r5, [pc, #572]	@ (801ec58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x320>)
 801ea1c:	e8d5 3f8f 	ldab	r3, [r5]
 801ea20:	07d8      	lsls	r0, r3, #31
 801ea22:	d560      	bpl.n	801eae6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ae>
 801ea24:	4d8d      	ldr	r5, [pc, #564]	@ (801ec5c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x324>)
 801ea26:	e8d5 3f8f 	ldab	r3, [r5]
 801ea2a:	07d9      	lsls	r1, r3, #31
 801ea2c:	d54d      	bpl.n	801eaca <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x192>
 801ea2e:	4d8c      	ldr	r5, [pc, #560]	@ (801ec60 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x328>)
 801ea30:	e8d5 3f8f 	ldab	r3, [r5]
 801ea34:	07da      	lsls	r2, r3, #31
 801ea36:	d53a      	bpl.n	801eaae <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801ea38:	4d8a      	ldr	r5, [pc, #552]	@ (801ec64 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x32c>)
 801ea3a:	e8d5 3f8f 	ldab	r3, [r5]
 801ea3e:	07db      	lsls	r3, r3, #31
 801ea40:	d517      	bpl.n	801ea72 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ea42:	f898 300c 	ldrb.w	r3, [r8, #12]
 801ea46:	2b01      	cmp	r3, #1
 801ea48:	d024      	beq.n	801ea94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15c>
 801ea4a:	f0c0 81ca 	bcc.w	801ede2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4aa>
 801ea4e:	2b02      	cmp	r3, #2
 801ea50:	d002      	beq.n	801ea58 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801ea52:	2000      	movs	r0, #0
 801ea54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea58:	2eff      	cmp	r6, #255	@ 0xff
 801ea5a:	f1a4 042c 	sub.w	r4, r4, #44	@ 0x2c
 801ea5e:	f000 81cb 	beq.w	801edf8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c0>
 801ea62:	2c03      	cmp	r4, #3
 801ea64:	d8f5      	bhi.n	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ea66:	e8df f014 	tbh	[pc, r4, lsl #1]
 801ea6a:	01ff      	.short	0x01ff
 801ea6c:	01e701ee 	.word	0x01e701ee
 801ea70:	01e0      	.short	0x01e0
 801ea72:	4628      	mov	r0, r5
 801ea74:	f00d f875 	bl	802bb62 <__cxa_guard_acquire>
 801ea78:	2800      	cmp	r0, #0
 801ea7a:	d0e2      	beq.n	801ea42 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10a>
 801ea7c:	4628      	mov	r0, r5
 801ea7e:	f00d f87c 	bl	802bb7a <__cxa_guard_release>
 801ea82:	4a79      	ldr	r2, [pc, #484]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801ea84:	4979      	ldr	r1, [pc, #484]	@ (801ec6c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x334>)
 801ea86:	487a      	ldr	r0, [pc, #488]	@ (801ec70 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x338>)
 801ea88:	f00d f864 	bl	802bb54 <__aeabi_atexit>
 801ea8c:	f898 300c 	ldrb.w	r3, [r8, #12]
 801ea90:	2b01      	cmp	r3, #1
 801ea92:	d1da      	bne.n	801ea4a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x112>
 801ea94:	2eff      	cmp	r6, #255	@ 0xff
 801ea96:	f1a4 042c 	sub.w	r4, r4, #44	@ 0x2c
 801ea9a:	f000 81b6 	beq.w	801ee0a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4d2>
 801ea9e:	2c03      	cmp	r4, #3
 801eaa0:	d8d7      	bhi.n	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801eaa2:	e8df f014 	tbh	[pc, r4, lsl #1]
 801eaa6:	0233      	.short	0x0233
 801eaa8:	021b0222 	.word	0x021b0222
 801eaac:	0214      	.short	0x0214
 801eaae:	4628      	mov	r0, r5
 801eab0:	f00d f857 	bl	802bb62 <__cxa_guard_acquire>
 801eab4:	2800      	cmp	r0, #0
 801eab6:	d0bf      	beq.n	801ea38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801eab8:	4628      	mov	r0, r5
 801eaba:	f00d f85e 	bl	802bb7a <__cxa_guard_release>
 801eabe:	4a6a      	ldr	r2, [pc, #424]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801eac0:	496c      	ldr	r1, [pc, #432]	@ (801ec74 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x33c>)
 801eac2:	486d      	ldr	r0, [pc, #436]	@ (801ec78 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x340>)
 801eac4:	f00d f846 	bl	802bb54 <__aeabi_atexit>
 801eac8:	e7b6      	b.n	801ea38 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801eaca:	4628      	mov	r0, r5
 801eacc:	f00d f849 	bl	802bb62 <__cxa_guard_acquire>
 801ead0:	2800      	cmp	r0, #0
 801ead2:	d0ac      	beq.n	801ea2e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801ead4:	4628      	mov	r0, r5
 801ead6:	f00d f850 	bl	802bb7a <__cxa_guard_release>
 801eada:	4a63      	ldr	r2, [pc, #396]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801eadc:	4967      	ldr	r1, [pc, #412]	@ (801ec7c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x344>)
 801eade:	4868      	ldr	r0, [pc, #416]	@ (801ec80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x348>)
 801eae0:	f00d f838 	bl	802bb54 <__aeabi_atexit>
 801eae4:	e7a3      	b.n	801ea2e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf6>
 801eae6:	4628      	mov	r0, r5
 801eae8:	f00d f83b 	bl	802bb62 <__cxa_guard_acquire>
 801eaec:	2800      	cmp	r0, #0
 801eaee:	d099      	beq.n	801ea24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801eaf0:	4628      	mov	r0, r5
 801eaf2:	f00d f842 	bl	802bb7a <__cxa_guard_release>
 801eaf6:	4a5c      	ldr	r2, [pc, #368]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801eaf8:	4962      	ldr	r1, [pc, #392]	@ (801ec84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x34c>)
 801eafa:	4863      	ldr	r0, [pc, #396]	@ (801ec88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x350>)
 801eafc:	f00d f82a 	bl	802bb54 <__aeabi_atexit>
 801eb00:	e790      	b.n	801ea24 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801eb02:	4628      	mov	r0, r5
 801eb04:	f00d f82d 	bl	802bb62 <__cxa_guard_acquire>
 801eb08:	2800      	cmp	r0, #0
 801eb0a:	d086      	beq.n	801ea1a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801eb0c:	4628      	mov	r0, r5
 801eb0e:	f00d f834 	bl	802bb7a <__cxa_guard_release>
 801eb12:	4a55      	ldr	r2, [pc, #340]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801eb14:	495d      	ldr	r1, [pc, #372]	@ (801ec8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x354>)
 801eb16:	485e      	ldr	r0, [pc, #376]	@ (801ec90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x358>)
 801eb18:	f00d f81c 	bl	802bb54 <__aeabi_atexit>
 801eb1c:	e77d      	b.n	801ea1a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801eb1e:	4628      	mov	r0, r5
 801eb20:	f00d f81f 	bl	802bb62 <__cxa_guard_acquire>
 801eb24:	2800      	cmp	r0, #0
 801eb26:	f43f af73 	beq.w	801ea10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801eb2a:	4628      	mov	r0, r5
 801eb2c:	f00d f825 	bl	802bb7a <__cxa_guard_release>
 801eb30:	4a4d      	ldr	r2, [pc, #308]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801eb32:	4958      	ldr	r1, [pc, #352]	@ (801ec94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x35c>)
 801eb34:	4858      	ldr	r0, [pc, #352]	@ (801ec98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x360>)
 801eb36:	f00d f80d 	bl	802bb54 <__aeabi_atexit>
 801eb3a:	e769      	b.n	801ea10 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801eb3c:	4628      	mov	r0, r5
 801eb3e:	f00d f810 	bl	802bb62 <__cxa_guard_acquire>
 801eb42:	2800      	cmp	r0, #0
 801eb44:	f43f af5e 	beq.w	801ea04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801eb48:	4628      	mov	r0, r5
 801eb4a:	f00d f816 	bl	802bb7a <__cxa_guard_release>
 801eb4e:	4a46      	ldr	r2, [pc, #280]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801eb50:	4952      	ldr	r1, [pc, #328]	@ (801ec9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x364>)
 801eb52:	4853      	ldr	r0, [pc, #332]	@ (801eca0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x368>)
 801eb54:	f00c fffe 	bl	802bb54 <__aeabi_atexit>
 801eb58:	e754      	b.n	801ea04 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801eb5a:	4628      	mov	r0, r5
 801eb5c:	f00d f801 	bl	802bb62 <__cxa_guard_acquire>
 801eb60:	2800      	cmp	r0, #0
 801eb62:	f43f af49 	beq.w	801e9f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801eb66:	4628      	mov	r0, r5
 801eb68:	f00d f807 	bl	802bb7a <__cxa_guard_release>
 801eb6c:	4a3e      	ldr	r2, [pc, #248]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801eb6e:	494d      	ldr	r1, [pc, #308]	@ (801eca4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x36c>)
 801eb70:	484d      	ldr	r0, [pc, #308]	@ (801eca8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x370>)
 801eb72:	f00c ffef 	bl	802bb54 <__aeabi_atexit>
 801eb76:	e73f      	b.n	801e9f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801eb78:	4628      	mov	r0, r5
 801eb7a:	f00c fff2 	bl	802bb62 <__cxa_guard_acquire>
 801eb7e:	2800      	cmp	r0, #0
 801eb80:	f43f af34 	beq.w	801e9ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801eb84:	4628      	mov	r0, r5
 801eb86:	f00c fff8 	bl	802bb7a <__cxa_guard_release>
 801eb8a:	4a37      	ldr	r2, [pc, #220]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801eb8c:	4947      	ldr	r1, [pc, #284]	@ (801ecac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x374>)
 801eb8e:	4848      	ldr	r0, [pc, #288]	@ (801ecb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x378>)
 801eb90:	f00c ffe0 	bl	802bb54 <__aeabi_atexit>
 801eb94:	e72a      	b.n	801e9ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb4>
 801eb96:	4628      	mov	r0, r5
 801eb98:	f00c ffe3 	bl	802bb62 <__cxa_guard_acquire>
 801eb9c:	2800      	cmp	r0, #0
 801eb9e:	f43f af1f 	beq.w	801e9e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801eba2:	4628      	mov	r0, r5
 801eba4:	f00c ffe9 	bl	802bb7a <__cxa_guard_release>
 801eba8:	4a2f      	ldr	r2, [pc, #188]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801ebaa:	4942      	ldr	r1, [pc, #264]	@ (801ecb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x37c>)
 801ebac:	4842      	ldr	r0, [pc, #264]	@ (801ecb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x380>)
 801ebae:	f00c ffd1 	bl	802bb54 <__aeabi_atexit>
 801ebb2:	e715      	b.n	801e9e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801ebb4:	4628      	mov	r0, r5
 801ebb6:	f00c ffd4 	bl	802bb62 <__cxa_guard_acquire>
 801ebba:	2800      	cmp	r0, #0
 801ebbc:	f43f af0a 	beq.w	801e9d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801ebc0:	4628      	mov	r0, r5
 801ebc2:	f00c ffda 	bl	802bb7a <__cxa_guard_release>
 801ebc6:	4a28      	ldr	r2, [pc, #160]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801ebc8:	493c      	ldr	r1, [pc, #240]	@ (801ecbc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x384>)
 801ebca:	483d      	ldr	r0, [pc, #244]	@ (801ecc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x388>)
 801ebcc:	f00c ffc2 	bl	802bb54 <__aeabi_atexit>
 801ebd0:	e700      	b.n	801e9d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9c>
 801ebd2:	4628      	mov	r0, r5
 801ebd4:	f00c ffc5 	bl	802bb62 <__cxa_guard_acquire>
 801ebd8:	2800      	cmp	r0, #0
 801ebda:	f43f aef5 	beq.w	801e9c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801ebde:	4628      	mov	r0, r5
 801ebe0:	f00c ffcb 	bl	802bb7a <__cxa_guard_release>
 801ebe4:	4a20      	ldr	r2, [pc, #128]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801ebe6:	4937      	ldr	r1, [pc, #220]	@ (801ecc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x38c>)
 801ebe8:	4837      	ldr	r0, [pc, #220]	@ (801ecc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x390>)
 801ebea:	f00c ffb3 	bl	802bb54 <__aeabi_atexit>
 801ebee:	e6eb      	b.n	801e9c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x90>
 801ebf0:	4628      	mov	r0, r5
 801ebf2:	f00c ffb6 	bl	802bb62 <__cxa_guard_acquire>
 801ebf6:	2800      	cmp	r0, #0
 801ebf8:	f43f aee0 	beq.w	801e9bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801ebfc:	4628      	mov	r0, r5
 801ebfe:	f00c ffbc 	bl	802bb7a <__cxa_guard_release>
 801ec02:	4a19      	ldr	r2, [pc, #100]	@ (801ec68 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x330>)
 801ec04:	4931      	ldr	r1, [pc, #196]	@ (801eccc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x394>)
 801ec06:	4832      	ldr	r0, [pc, #200]	@ (801ecd0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x398>)
 801ec08:	f00c ffa4 	bl	802bb54 <__aeabi_atexit>
 801ec0c:	e6d6      	b.n	801e9bc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801ec0e:	bf00      	nop
 801ec10:	2015a20c 	.word	0x2015a20c
 801ec14:	2015a220 	.word	0x2015a220
 801ec18:	2015a1e8 	.word	0x2015a1e8
 801ec1c:	2015a1f4 	.word	0x2015a1f4
 801ec20:	2015a22c 	.word	0x2015a22c
 801ec24:	2015a238 	.word	0x2015a238
 801ec28:	2015a200 	.word	0x2015a200
 801ec2c:	2015a218 	.word	0x2015a218
 801ec30:	2015a210 	.word	0x2015a210
 801ec34:	2015a224 	.word	0x2015a224
 801ec38:	2015a1ec 	.word	0x2015a1ec
 801ec3c:	2015a1f8 	.word	0x2015a1f8
 801ec40:	2015a230 	.word	0x2015a230
 801ec44:	2015a23c 	.word	0x2015a23c
 801ec48:	2015a204 	.word	0x2015a204
 801ec4c:	2015a21c 	.word	0x2015a21c
 801ec50:	2015a214 	.word	0x2015a214
 801ec54:	2015a228 	.word	0x2015a228
 801ec58:	2015a1f0 	.word	0x2015a1f0
 801ec5c:	2015a1fc 	.word	0x2015a1fc
 801ec60:	2015a234 	.word	0x2015a234
 801ec64:	2015a208 	.word	0x2015a208
 801ec68:	20000000 	.word	0x20000000
 801ec6c:	0801dcbd 	.word	0x0801dcbd
 801ec70:	2000011c 	.word	0x2000011c
 801ec74:	0801dcb9 	.word	0x0801dcb9
 801ec78:	20000148 	.word	0x20000148
 801ec7c:	0801dcc9 	.word	0x0801dcc9
 801ec80:	20000110 	.word	0x20000110
 801ec84:	0801dccd 	.word	0x0801dccd
 801ec88:	20000104 	.word	0x20000104
 801ec8c:	0801dcc1 	.word	0x0801dcc1
 801ec90:	2000013c 	.word	0x2000013c
 801ec94:	0801dcc5 	.word	0x0801dcc5
 801ec98:	20000128 	.word	0x20000128
 801ec9c:	0801dcd9 	.word	0x0801dcd9
 801eca0:	20000130 	.word	0x20000130
 801eca4:	0801dcdd 	.word	0x0801dcdd
 801eca8:	20000118 	.word	0x20000118
 801ecac:	0801dcd1 	.word	0x0801dcd1
 801ecb0:	20000150 	.word	0x20000150
 801ecb4:	0801dcd5 	.word	0x0801dcd5
 801ecb8:	20000144 	.word	0x20000144
 801ecbc:	0801dce9 	.word	0x0801dce9
 801ecc0:	2000010c 	.word	0x2000010c
 801ecc4:	0801dced 	.word	0x0801dced
 801ecc8:	20000100 	.word	0x20000100
 801eccc:	0801dce1 	.word	0x0801dce1
 801ecd0:	20000138 	.word	0x20000138
 801ecd4:	4628      	mov	r0, r5
 801ecd6:	f00c ff44 	bl	802bb62 <__cxa_guard_acquire>
 801ecda:	2800      	cmp	r0, #0
 801ecdc:	f43f ae68 	beq.w	801e9b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801ece0:	4628      	mov	r0, r5
 801ece2:	f00c ff4a 	bl	802bb7a <__cxa_guard_release>
 801ece6:	4aa6      	ldr	r2, [pc, #664]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801ece8:	49a6      	ldr	r1, [pc, #664]	@ (801ef84 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64c>)
 801ecea:	48a7      	ldr	r0, [pc, #668]	@ (801ef88 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x650>)
 801ecec:	f00c ff32 	bl	802bb54 <__aeabi_atexit>
 801ecf0:	e65e      	b.n	801e9b0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78>
 801ecf2:	4628      	mov	r0, r5
 801ecf4:	f00c ff35 	bl	802bb62 <__cxa_guard_acquire>
 801ecf8:	2800      	cmp	r0, #0
 801ecfa:	f43f ae53 	beq.w	801e9a4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801ecfe:	4628      	mov	r0, r5
 801ed00:	f00c ff3b 	bl	802bb7a <__cxa_guard_release>
 801ed04:	4a9e      	ldr	r2, [pc, #632]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801ed06:	49a1      	ldr	r1, [pc, #644]	@ (801ef8c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x654>)
 801ed08:	48a1      	ldr	r0, [pc, #644]	@ (801ef90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801ed0a:	f00c ff23 	bl	802bb54 <__aeabi_atexit>
 801ed0e:	e649      	b.n	801e9a4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801ed10:	4628      	mov	r0, r5
 801ed12:	f00c ff26 	bl	802bb62 <__cxa_guard_acquire>
 801ed16:	2800      	cmp	r0, #0
 801ed18:	f43f ae3e 	beq.w	801e998 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801ed1c:	4628      	mov	r0, r5
 801ed1e:	f00c ff2c 	bl	802bb7a <__cxa_guard_release>
 801ed22:	4a97      	ldr	r2, [pc, #604]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801ed24:	499b      	ldr	r1, [pc, #620]	@ (801ef94 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x65c>)
 801ed26:	489c      	ldr	r0, [pc, #624]	@ (801ef98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801ed28:	f00c ff14 	bl	802bb54 <__aeabi_atexit>
 801ed2c:	e634      	b.n	801e998 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801ed2e:	4628      	mov	r0, r5
 801ed30:	f00c ff17 	bl	802bb62 <__cxa_guard_acquire>
 801ed34:	2800      	cmp	r0, #0
 801ed36:	f43f ae29 	beq.w	801e98c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801ed3a:	4628      	mov	r0, r5
 801ed3c:	f00c ff1d 	bl	802bb7a <__cxa_guard_release>
 801ed40:	4a8f      	ldr	r2, [pc, #572]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801ed42:	4996      	ldr	r1, [pc, #600]	@ (801ef9c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x664>)
 801ed44:	4896      	ldr	r0, [pc, #600]	@ (801efa0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801ed46:	f00c ff05 	bl	802bb54 <__aeabi_atexit>
 801ed4a:	e61f      	b.n	801e98c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801ed4c:	4628      	mov	r0, r5
 801ed4e:	f00c ff08 	bl	802bb62 <__cxa_guard_acquire>
 801ed52:	2800      	cmp	r0, #0
 801ed54:	f43f ae14 	beq.w	801e980 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801ed58:	4628      	mov	r0, r5
 801ed5a:	f00c ff0e 	bl	802bb7a <__cxa_guard_release>
 801ed5e:	4a88      	ldr	r2, [pc, #544]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801ed60:	4990      	ldr	r1, [pc, #576]	@ (801efa4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66c>)
 801ed62:	4891      	ldr	r0, [pc, #580]	@ (801efa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801ed64:	f00c fef6 	bl	802bb54 <__aeabi_atexit>
 801ed68:	e60a      	b.n	801e980 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x48>
 801ed6a:	4628      	mov	r0, r5
 801ed6c:	f00c fef9 	bl	802bb62 <__cxa_guard_acquire>
 801ed70:	2800      	cmp	r0, #0
 801ed72:	f43f adff 	beq.w	801e974 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801ed76:	4628      	mov	r0, r5
 801ed78:	f00c feff 	bl	802bb7a <__cxa_guard_release>
 801ed7c:	4a80      	ldr	r2, [pc, #512]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801ed7e:	498b      	ldr	r1, [pc, #556]	@ (801efac <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x674>)
 801ed80:	488b      	ldr	r0, [pc, #556]	@ (801efb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801ed82:	f00c fee7 	bl	802bb54 <__aeabi_atexit>
 801ed86:	e5f5      	b.n	801e974 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3c>
 801ed88:	4628      	mov	r0, r5
 801ed8a:	f00c feea 	bl	802bb62 <__cxa_guard_acquire>
 801ed8e:	2800      	cmp	r0, #0
 801ed90:	f43f adea 	beq.w	801e968 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801ed94:	4628      	mov	r0, r5
 801ed96:	f00c fef0 	bl	802bb7a <__cxa_guard_release>
 801ed9a:	4a79      	ldr	r2, [pc, #484]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801ed9c:	4985      	ldr	r1, [pc, #532]	@ (801efb4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x67c>)
 801ed9e:	4886      	ldr	r0, [pc, #536]	@ (801efb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801eda0:	f00c fed8 	bl	802bb54 <__aeabi_atexit>
 801eda4:	e5e0      	b.n	801e968 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x30>
 801eda6:	4628      	mov	r0, r5
 801eda8:	f00c fedb 	bl	802bb62 <__cxa_guard_acquire>
 801edac:	2800      	cmp	r0, #0
 801edae:	f43f add5 	beq.w	801e95c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801edb2:	4628      	mov	r0, r5
 801edb4:	f00c fee1 	bl	802bb7a <__cxa_guard_release>
 801edb8:	4a71      	ldr	r2, [pc, #452]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801edba:	4980      	ldr	r1, [pc, #512]	@ (801efbc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x684>)
 801edbc:	4880      	ldr	r0, [pc, #512]	@ (801efc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801edbe:	f00c fec9 	bl	802bb54 <__aeabi_atexit>
 801edc2:	e5cb      	b.n	801e95c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801edc4:	4628      	mov	r0, r5
 801edc6:	f00c fecc 	bl	802bb62 <__cxa_guard_acquire>
 801edca:	2800      	cmp	r0, #0
 801edcc:	f43f adc0 	beq.w	801e950 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801edd0:	4628      	mov	r0, r5
 801edd2:	f00c fed2 	bl	802bb7a <__cxa_guard_release>
 801edd6:	4a6a      	ldr	r2, [pc, #424]	@ (801ef80 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x648>)
 801edd8:	497a      	ldr	r1, [pc, #488]	@ (801efc4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x68c>)
 801edda:	487b      	ldr	r0, [pc, #492]	@ (801efc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801eddc:	f00c feba 	bl	802bb54 <__aeabi_atexit>
 801ede0:	e5b6      	b.n	801e950 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801ede2:	2eff      	cmp	r6, #255	@ 0xff
 801ede4:	f1a4 042c 	sub.w	r4, r4, #44	@ 0x2c
 801ede8:	d018      	beq.n	801ee1c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e4>
 801edea:	2c03      	cmp	r4, #3
 801edec:	f63f ae31 	bhi.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801edf0:	e8df f004 	tbb	[pc, r4]
 801edf4:	4b525963 	.word	0x4b525963
 801edf8:	2c03      	cmp	r4, #3
 801edfa:	f63f ae2a 	bhi.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801edfe:	e8df f014 	tbh	[pc, r4, lsl #1]
 801ee02:	012d      	.short	0x012d
 801ee04:	001b011e 	.word	0x001b011e
 801ee08:	0014      	.short	0x0014
 801ee0a:	2c03      	cmp	r4, #3
 801ee0c:	f63f ae21 	bhi.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ee10:	e8df f014 	tbh	[pc, r4, lsl #1]
 801ee14:	00f000ff 	.word	0x00f000ff
 801ee18:	00af010e 	.word	0x00af010e
 801ee1c:	2c03      	cmp	r4, #3
 801ee1e:	f63f ae18 	bhi.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ee22:	e8df f004 	tbb	[pc, r4]
 801ee26:	929c      	.short	0x929c
 801ee28:	848b      	.short	0x848b
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	4867      	ldr	r0, [pc, #412]	@ (801efcc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x694>)
 801ee2e:	781b      	ldrb	r3, [r3, #0]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	bf18      	it	ne
 801ee34:	2000      	movne	r0, #0
 801ee36:	e60d      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	4865      	ldr	r0, [pc, #404]	@ (801efd0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x698>)
 801ee3c:	781b      	ldrb	r3, [r3, #0]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	bf18      	it	ne
 801ee42:	2000      	movne	r0, #0
 801ee44:	e606      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	781b      	ldrb	r3, [r3, #0]
 801ee4a:	2b01      	cmp	r3, #1
 801ee4c:	f000 811b 	beq.w	801f086 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74e>
 801ee50:	f0c0 8113 	bcc.w	801f07a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801ee54:	2b02      	cmp	r3, #2
 801ee56:	f47f adfc 	bne.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ee5a:	4b5e      	ldr	r3, [pc, #376]	@ (801efd4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801ee5c:	4a5e      	ldr	r2, [pc, #376]	@ (801efd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801ee5e:	f241 3133 	movw	r1, #4915	@ 0x1333
 801ee62:	485e      	ldr	r0, [pc, #376]	@ (801efdc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801ee64:	f00c fea8 	bl	802bbb8 <__assert_func>
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	781b      	ldrb	r3, [r3, #0]
 801ee6c:	2b01      	cmp	r3, #1
 801ee6e:	f000 8108 	beq.w	801f082 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x74a>
 801ee72:	f0c0 8104 	bcc.w	801f07e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801ee76:	2b02      	cmp	r3, #2
 801ee78:	f47f adeb 	bne.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ee7c:	4b55      	ldr	r3, [pc, #340]	@ (801efd4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x69c>)
 801ee7e:	4a56      	ldr	r2, [pc, #344]	@ (801efd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801ee80:	f241 313f 	movw	r1, #4927	@ 0x133f
 801ee84:	4855      	ldr	r0, [pc, #340]	@ (801efdc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801ee86:	f00c fe97 	bl	802bbb8 <__assert_func>
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	4846      	ldr	r0, [pc, #280]	@ (801efa8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x670>)
 801ee8e:	781b      	ldrb	r3, [r3, #0]
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	bf18      	it	ne
 801ee94:	2000      	movne	r0, #0
 801ee96:	e5dd      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	483f      	ldr	r0, [pc, #252]	@ (801ef98 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x660>)
 801ee9c:	781b      	ldrb	r3, [r3, #0]
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	bf18      	it	ne
 801eea2:	2000      	movne	r0, #0
 801eea4:	e5d6      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	781b      	ldrb	r3, [r3, #0]
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	f000 80ed 	beq.w	801f08a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x752>
 801eeb0:	2b01      	cmp	r3, #1
 801eeb2:	4845      	ldr	r0, [pc, #276]	@ (801efc8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x690>)
 801eeb4:	bf18      	it	ne
 801eeb6:	2000      	movne	r0, #0
 801eeb8:	e5cc      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	781b      	ldrb	r3, [r3, #0]
 801eebe:	2b00      	cmp	r3, #0
 801eec0:	f000 80e5 	beq.w	801f08e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x756>
 801eec4:	2b01      	cmp	r3, #1
 801eec6:	483c      	ldr	r0, [pc, #240]	@ (801efb8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x680>)
 801eec8:	bf18      	it	ne
 801eeca:	2000      	movne	r0, #0
 801eecc:	e5c2      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	4843      	ldr	r0, [pc, #268]	@ (801efe0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a8>)
 801eed2:	781b      	ldrb	r3, [r3, #0]
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	bf18      	it	ne
 801eed8:	2000      	movne	r0, #0
 801eeda:	e5bb      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	4841      	ldr	r0, [pc, #260]	@ (801efe4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6ac>)
 801eee0:	781b      	ldrb	r3, [r3, #0]
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	bf18      	it	ne
 801eee6:	2000      	movne	r0, #0
 801eee8:	e5b4      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	781b      	ldrb	r3, [r3, #0]
 801eeee:	2b01      	cmp	r3, #1
 801eef0:	f000 80d5 	beq.w	801f09e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x766>
 801eef4:	f0c0 80d1 	bcc.w	801f09a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x762>
 801eef8:	2b02      	cmp	r3, #2
 801eefa:	f47f adaa 	bne.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801eefe:	4b3a      	ldr	r3, [pc, #232]	@ (801efe8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b0>)
 801ef00:	4a35      	ldr	r2, [pc, #212]	@ (801efd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801ef02:	f241 21d8 	movw	r1, #4824	@ 0x12d8
 801ef06:	4835      	ldr	r0, [pc, #212]	@ (801efdc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801ef08:	f00c fe56 	bl	802bbb8 <__assert_func>
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	781b      	ldrb	r3, [r3, #0]
 801ef10:	2b01      	cmp	r3, #1
 801ef12:	f000 80c0 	beq.w	801f096 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75e>
 801ef16:	f0c0 80bc 	bcc.w	801f092 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x75a>
 801ef1a:	2b02      	cmp	r3, #2
 801ef1c:	f47f ad99 	bne.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801ef20:	4b32      	ldr	r3, [pc, #200]	@ (801efec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b4>)
 801ef22:	4a2d      	ldr	r2, [pc, #180]	@ (801efd8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a0>)
 801ef24:	f241 21e4 	movw	r1, #4836	@ 0x12e4
 801ef28:	482c      	ldr	r0, [pc, #176]	@ (801efdc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a4>)
 801ef2a:	f00c fe45 	bl	802bbb8 <__assert_func>
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	481b      	ldr	r0, [pc, #108]	@ (801efa0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x668>)
 801ef32:	781b      	ldrb	r3, [r3, #0]
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	bf18      	it	ne
 801ef38:	2000      	movne	r0, #0
 801ef3a:	e58b      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	4814      	ldr	r0, [pc, #80]	@ (801ef90 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x658>)
 801ef40:	781b      	ldrb	r3, [r3, #0]
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	bf18      	it	ne
 801ef46:	2000      	movne	r0, #0
 801ef48:	e584      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	781b      	ldrb	r3, [r3, #0]
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	f000 80af 	beq.w	801f0b2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77a>
 801ef54:	2b01      	cmp	r3, #1
 801ef56:	481a      	ldr	r0, [pc, #104]	@ (801efc0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x688>)
 801ef58:	bf18      	it	ne
 801ef5a:	2000      	movne	r0, #0
 801ef5c:	e57a      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	781b      	ldrb	r3, [r3, #0]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	f000 80a7 	beq.w	801f0b6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x77e>
 801ef68:	2b01      	cmp	r3, #1
 801ef6a:	4811      	ldr	r0, [pc, #68]	@ (801efb0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x678>)
 801ef6c:	bf18      	it	ne
 801ef6e:	2000      	movne	r0, #0
 801ef70:	e570      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	481e      	ldr	r0, [pc, #120]	@ (801eff0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6b8>)
 801ef76:	781b      	ldrb	r3, [r3, #0]
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	bf18      	it	ne
 801ef7c:	2000      	movne	r0, #0
 801ef7e:	e569      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801ef80:	20000000 	.word	0x20000000
 801ef84:	0801dce5 	.word	0x0801dce5
 801ef88:	20000124 	.word	0x20000124
 801ef8c:	0801dcf9 	.word	0x0801dcf9
 801ef90:	2000012c 	.word	0x2000012c
 801ef94:	0801dcfd 	.word	0x0801dcfd
 801ef98:	20000114 	.word	0x20000114
 801ef9c:	0801dcf1 	.word	0x0801dcf1
 801efa0:	2000014c 	.word	0x2000014c
 801efa4:	0801dcf5 	.word	0x0801dcf5
 801efa8:	20000140 	.word	0x20000140
 801efac:	0801dd09 	.word	0x0801dd09
 801efb0:	20000108 	.word	0x20000108
 801efb4:	0801dd0d 	.word	0x0801dd0d
 801efb8:	200000fc 	.word	0x200000fc
 801efbc:	0801dd01 	.word	0x0801dd01
 801efc0:	20000134 	.word	0x20000134
 801efc4:	0801dd05 	.word	0x0801dd05
 801efc8:	20000120 	.word	0x20000120
 801efcc:	20000148 	.word	0x20000148
 801efd0:	2000011c 	.word	0x2000011c
 801efd4:	0802ed14 	.word	0x0802ed14
 801efd8:	080301a0 	.word	0x080301a0
 801efdc:	0802eb5c 	.word	0x0802eb5c
 801efe0:	20000144 	.word	0x20000144
 801efe4:	20000118 	.word	0x20000118
 801efe8:	0802ec80 	.word	0x0802ec80
 801efec:	0802ecc8 	.word	0x0802ecc8
 801eff0:	20000150 	.word	0x20000150
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	781b      	ldrb	r3, [r3, #0]
 801eff8:	2b01      	cmp	r3, #1
 801effa:	d060      	beq.n	801f0be <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x786>
 801effc:	d35d      	bcc.n	801f0ba <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x782>
 801effe:	2b02      	cmp	r3, #2
 801f000:	f47f ad27 	bne.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f004:	4b2f      	ldr	r3, [pc, #188]	@ (801f0c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801f006:	4a30      	ldr	r2, [pc, #192]	@ (801f0c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801f008:	f241 3103 	movw	r1, #4867	@ 0x1303
 801f00c:	482f      	ldr	r0, [pc, #188]	@ (801f0cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801f00e:	f00c fdd3 	bl	802bbb8 <__assert_func>
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	781b      	ldrb	r3, [r3, #0]
 801f016:	2b01      	cmp	r3, #1
 801f018:	d049      	beq.n	801f0ae <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x776>
 801f01a:	d346      	bcc.n	801f0aa <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x772>
 801f01c:	2b02      	cmp	r3, #2
 801f01e:	f47f ad18 	bne.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f022:	4b28      	ldr	r3, [pc, #160]	@ (801f0c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801f024:	4a28      	ldr	r2, [pc, #160]	@ (801f0c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801f026:	f241 310f 	movw	r1, #4879	@ 0x130f
 801f02a:	4828      	ldr	r0, [pc, #160]	@ (801f0cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801f02c:	f00c fdc4 	bl	802bbb8 <__assert_func>
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	4827      	ldr	r0, [pc, #156]	@ (801f0d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801f034:	781b      	ldrb	r3, [r3, #0]
 801f036:	2b00      	cmp	r3, #0
 801f038:	bf18      	it	ne
 801f03a:	2000      	movne	r0, #0
 801f03c:	e50a      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	781b      	ldrb	r3, [r3, #0]
 801f042:	2b01      	cmp	r3, #1
 801f044:	d02d      	beq.n	801f0a2 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76a>
 801f046:	d318      	bcc.n	801f07a <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x742>
 801f048:	2b02      	cmp	r3, #2
 801f04a:	f47f ad02 	bne.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f04e:	4b1d      	ldr	r3, [pc, #116]	@ (801f0c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801f050:	4a1d      	ldr	r2, [pc, #116]	@ (801f0c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801f052:	f44f 519b 	mov.w	r1, #4960	@ 0x1360
 801f056:	481d      	ldr	r0, [pc, #116]	@ (801f0cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801f058:	f00c fdae 	bl	802bbb8 <__assert_func>
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	781b      	ldrb	r3, [r3, #0]
 801f060:	2b01      	cmp	r3, #1
 801f062:	d020      	beq.n	801f0a6 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76e>
 801f064:	d30b      	bcc.n	801f07e <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x746>
 801f066:	2b02      	cmp	r3, #2
 801f068:	f47f acf3 	bne.w	801ea52 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11a>
 801f06c:	4b15      	ldr	r3, [pc, #84]	@ (801f0c4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x78c>)
 801f06e:	4a16      	ldr	r2, [pc, #88]	@ (801f0c8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x790>)
 801f070:	f241 316c 	movw	r1, #4972	@ 0x136c
 801f074:	4815      	ldr	r0, [pc, #84]	@ (801f0cc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x794>)
 801f076:	f00c fd9f 	bl	802bbb8 <__assert_func>
 801f07a:	4816      	ldr	r0, [pc, #88]	@ (801f0d4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x79c>)
 801f07c:	e4ea      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f07e:	4816      	ldr	r0, [pc, #88]	@ (801f0d8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a0>)
 801f080:	e4e8      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f082:	4816      	ldr	r0, [pc, #88]	@ (801f0dc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a4>)
 801f084:	e4e6      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f086:	4816      	ldr	r0, [pc, #88]	@ (801f0e0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a8>)
 801f088:	e4e4      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f08a:	4816      	ldr	r0, [pc, #88]	@ (801f0e4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7ac>)
 801f08c:	e4e2      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f08e:	4816      	ldr	r0, [pc, #88]	@ (801f0e8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b0>)
 801f090:	e4e0      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f092:	4816      	ldr	r0, [pc, #88]	@ (801f0ec <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b4>)
 801f094:	e4de      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f096:	4816      	ldr	r0, [pc, #88]	@ (801f0f0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7b8>)
 801f098:	e4dc      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f09a:	4816      	ldr	r0, [pc, #88]	@ (801f0f4 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7bc>)
 801f09c:	e4da      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f09e:	4816      	ldr	r0, [pc, #88]	@ (801f0f8 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c0>)
 801f0a0:	e4d8      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0a2:	4816      	ldr	r0, [pc, #88]	@ (801f0fc <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c4>)
 801f0a4:	e4d6      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0a6:	4816      	ldr	r0, [pc, #88]	@ (801f100 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c8>)
 801f0a8:	e4d4      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0aa:	4809      	ldr	r0, [pc, #36]	@ (801f0d0 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x798>)
 801f0ac:	e4d2      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0ae:	4815      	ldr	r0, [pc, #84]	@ (801f104 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7cc>)
 801f0b0:	e4d0      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0b2:	4815      	ldr	r0, [pc, #84]	@ (801f108 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d0>)
 801f0b4:	e4ce      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0b6:	4815      	ldr	r0, [pc, #84]	@ (801f10c <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d4>)
 801f0b8:	e4cc      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0ba:	4815      	ldr	r0, [pc, #84]	@ (801f110 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7d8>)
 801f0bc:	e4ca      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0be:	4815      	ldr	r0, [pc, #84]	@ (801f114 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7dc>)
 801f0c0:	e4c8      	b.n	801ea54 <_ZN8touchgfx8LCDGPU2D28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11c>
 801f0c2:	bf00      	nop
 801f0c4:	0802ecc8 	.word	0x0802ecc8
 801f0c8:	080301a0 	.word	0x080301a0
 801f0cc:	0802eb5c 	.word	0x0802eb5c
 801f0d0:	20000130 	.word	0x20000130
 801f0d4:	20000148 	.word	0x20000148
 801f0d8:	2000011c 	.word	0x2000011c
 801f0dc:	20000104 	.word	0x20000104
 801f0e0:	20000128 	.word	0x20000128
 801f0e4:	20000140 	.word	0x20000140
 801f0e8:	20000114 	.word	0x20000114
 801f0ec:	20000118 	.word	0x20000118
 801f0f0:	20000100 	.word	0x20000100
 801f0f4:	20000144 	.word	0x20000144
 801f0f8:	20000124 	.word	0x20000124
 801f0fc:	2000013c 	.word	0x2000013c
 801f100:	20000110 	.word	0x20000110
 801f104:	2000010c 	.word	0x2000010c
 801f108:	2000014c 	.word	0x2000014c
 801f10c:	2000012c 	.word	0x2000012c
 801f110:	20000150 	.word	0x20000150
 801f114:	20000138 	.word	0x20000138

0801f118 <_ZN8touchgfx8LCDGPU2D62TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f118:	b510      	push	{r4, lr}
 801f11a:	4604      	mov	r4, r0
 801f11c:	2104      	movs	r1, #4
 801f11e:	f00c fd1e 	bl	802bb5e <_ZdlPvj>
 801f122:	4620      	mov	r0, r4
 801f124:	bd10      	pop	{r4, pc}
 801f126:	bf00      	nop

0801f128 <_ZN8touchgfx8LCDGPU2D60TextureMapper_16BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f128:	b510      	push	{r4, lr}
 801f12a:	4604      	mov	r4, r0
 801f12c:	2104      	movs	r1, #4
 801f12e:	f00c fd16 	bl	802bb5e <_ZdlPvj>
 801f132:	4620      	mov	r0, r4
 801f134:	bd10      	pop	{r4, pc}
 801f136:	bf00      	nop

0801f138 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f138:	b510      	push	{r4, lr}
 801f13a:	4604      	mov	r4, r0
 801f13c:	2104      	movs	r1, #4
 801f13e:	f00c fd0e 	bl	802bb5e <_ZdlPvj>
 801f142:	4620      	mov	r0, r4
 801f144:	bd10      	pop	{r4, pc}
 801f146:	bf00      	nop

0801f148 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f148:	b510      	push	{r4, lr}
 801f14a:	4604      	mov	r4, r0
 801f14c:	2104      	movs	r1, #4
 801f14e:	f00c fd06 	bl	802bb5e <_ZdlPvj>
 801f152:	4620      	mov	r0, r4
 801f154:	bd10      	pop	{r4, pc}
 801f156:	bf00      	nop

0801f158 <_ZN8touchgfx8LCDGPU2D57TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f158:	b510      	push	{r4, lr}
 801f15a:	4604      	mov	r4, r0
 801f15c:	2104      	movs	r1, #4
 801f15e:	f00c fcfe 	bl	802bb5e <_ZdlPvj>
 801f162:	4620      	mov	r0, r4
 801f164:	bd10      	pop	{r4, pc}
 801f166:	bf00      	nop

0801f168 <_ZN8touchgfx8LCDGPU2D55TextureMapper_16BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f168:	b510      	push	{r4, lr}
 801f16a:	4604      	mov	r4, r0
 801f16c:	2104      	movs	r1, #4
 801f16e:	f00c fcf6 	bl	802bb5e <_ZdlPvj>
 801f172:	4620      	mov	r0, r4
 801f174:	bd10      	pop	{r4, pc}
 801f176:	bf00      	nop

0801f178 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f178:	b510      	push	{r4, lr}
 801f17a:	4604      	mov	r4, r0
 801f17c:	2104      	movs	r1, #4
 801f17e:	f00c fcee 	bl	802bb5e <_ZdlPvj>
 801f182:	4620      	mov	r0, r4
 801f184:	bd10      	pop	{r4, pc}
 801f186:	bf00      	nop

0801f188 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f188:	b510      	push	{r4, lr}
 801f18a:	4604      	mov	r4, r0
 801f18c:	2104      	movs	r1, #4
 801f18e:	f00c fce6 	bl	802bb5e <_ZdlPvj>
 801f192:	4620      	mov	r0, r4
 801f194:	bd10      	pop	{r4, pc}
 801f196:	bf00      	nop

0801f198 <_ZN8touchgfx8LCDGPU2D62TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f198:	b510      	push	{r4, lr}
 801f19a:	4604      	mov	r4, r0
 801f19c:	2104      	movs	r1, #4
 801f19e:	f00c fcde 	bl	802bb5e <_ZdlPvj>
 801f1a2:	4620      	mov	r0, r4
 801f1a4:	bd10      	pop	{r4, pc}
 801f1a6:	bf00      	nop

0801f1a8 <_ZN8touchgfx8LCDGPU2D60TextureMapper_24BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f1a8:	b510      	push	{r4, lr}
 801f1aa:	4604      	mov	r4, r0
 801f1ac:	2104      	movs	r1, #4
 801f1ae:	f00c fcd6 	bl	802bb5e <_ZdlPvj>
 801f1b2:	4620      	mov	r0, r4
 801f1b4:	bd10      	pop	{r4, pc}
 801f1b6:	bf00      	nop

0801f1b8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f1b8:	b510      	push	{r4, lr}
 801f1ba:	4604      	mov	r4, r0
 801f1bc:	2104      	movs	r1, #4
 801f1be:	f00c fcce 	bl	802bb5e <_ZdlPvj>
 801f1c2:	4620      	mov	r0, r4
 801f1c4:	bd10      	pop	{r4, pc}
 801f1c6:	bf00      	nop

0801f1c8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f1c8:	b510      	push	{r4, lr}
 801f1ca:	4604      	mov	r4, r0
 801f1cc:	2104      	movs	r1, #4
 801f1ce:	f00c fcc6 	bl	802bb5e <_ZdlPvj>
 801f1d2:	4620      	mov	r0, r4
 801f1d4:	bd10      	pop	{r4, pc}
 801f1d6:	bf00      	nop

0801f1d8 <_ZN8touchgfx8LCDGPU2D57TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f1d8:	b510      	push	{r4, lr}
 801f1da:	4604      	mov	r4, r0
 801f1dc:	2104      	movs	r1, #4
 801f1de:	f00c fcbe 	bl	802bb5e <_ZdlPvj>
 801f1e2:	4620      	mov	r0, r4
 801f1e4:	bd10      	pop	{r4, pc}
 801f1e6:	bf00      	nop

0801f1e8 <_ZN8touchgfx8LCDGPU2D55TextureMapper_24BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f1e8:	b510      	push	{r4, lr}
 801f1ea:	4604      	mov	r4, r0
 801f1ec:	2104      	movs	r1, #4
 801f1ee:	f00c fcb6 	bl	802bb5e <_ZdlPvj>
 801f1f2:	4620      	mov	r0, r4
 801f1f4:	bd10      	pop	{r4, pc}
 801f1f6:	bf00      	nop

0801f1f8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f1f8:	b510      	push	{r4, lr}
 801f1fa:	4604      	mov	r4, r0
 801f1fc:	2104      	movs	r1, #4
 801f1fe:	f00c fcae 	bl	802bb5e <_ZdlPvj>
 801f202:	4620      	mov	r0, r4
 801f204:	bd10      	pop	{r4, pc}
 801f206:	bf00      	nop

0801f208 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f208:	b510      	push	{r4, lr}
 801f20a:	4604      	mov	r4, r0
 801f20c:	2104      	movs	r1, #4
 801f20e:	f00c fca6 	bl	802bb5e <_ZdlPvj>
 801f212:	4620      	mov	r0, r4
 801f214:	bd10      	pop	{r4, pc}
 801f216:	bf00      	nop

0801f218 <_ZN8touchgfx8LCDGPU2D60TextureMapper_32BPP_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f218:	b510      	push	{r4, lr}
 801f21a:	4604      	mov	r4, r0
 801f21c:	2104      	movs	r1, #4
 801f21e:	f00c fc9e 	bl	802bb5e <_ZdlPvj>
 801f222:	4620      	mov	r0, r4
 801f224:	bd10      	pop	{r4, pc}
 801f226:	bf00      	nop

0801f228 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f228:	b510      	push	{r4, lr}
 801f22a:	4604      	mov	r4, r0
 801f22c:	2104      	movs	r1, #4
 801f22e:	f00c fc96 	bl	802bb5e <_ZdlPvj>
 801f232:	4620      	mov	r0, r4
 801f234:	bd10      	pop	{r4, pc}
 801f236:	bf00      	nop

0801f238 <_ZN8touchgfx8LCDGPU2D57TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f238:	b510      	push	{r4, lr}
 801f23a:	4604      	mov	r4, r0
 801f23c:	2104      	movs	r1, #4
 801f23e:	f00c fc8e 	bl	802bb5e <_ZdlPvj>
 801f242:	4620      	mov	r0, r4
 801f244:	bd10      	pop	{r4, pc}
 801f246:	bf00      	nop

0801f248 <_ZN8touchgfx8LCDGPU2D55TextureMapper_32BPP_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f248:	b510      	push	{r4, lr}
 801f24a:	4604      	mov	r4, r0
 801f24c:	2104      	movs	r1, #4
 801f24e:	f00c fc86 	bl	802bb5e <_ZdlPvj>
 801f252:	4620      	mov	r0, r4
 801f254:	bd10      	pop	{r4, pc}
 801f256:	bf00      	nop

0801f258 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f258:	b510      	push	{r4, lr}
 801f25a:	4604      	mov	r4, r0
 801f25c:	2104      	movs	r1, #4
 801f25e:	f00c fc7e 	bl	802bb5e <_ZdlPvj>
 801f262:	4620      	mov	r0, r4
 801f264:	bd10      	pop	{r4, pc}
 801f266:	bf00      	nop

0801f268 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f268:	b510      	push	{r4, lr}
 801f26a:	4604      	mov	r4, r0
 801f26c:	2104      	movs	r1, #4
 801f26e:	f00c fc76 	bl	802bb5e <_ZdlPvj>
 801f272:	4620      	mov	r0, r4
 801f274:	bd10      	pop	{r4, pc}
 801f276:	bf00      	nop

0801f278 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>:
 801f278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f27c:	461c      	mov	r4, r3
 801f27e:	4617      	mov	r7, r2
 801f280:	b086      	sub	sp, #24
 801f282:	4606      	mov	r6, r0
 801f284:	4688      	mov	r8, r1
 801f286:	6818      	ldr	r0, [r3, #0]
 801f288:	6859      	ldr	r1, [r3, #4]
 801f28a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f28c:	ad02      	add	r5, sp, #8
 801f28e:	c503      	stmia	r5!, {r0, r1}
 801f290:	6818      	ldr	r0, [r3, #0]
 801f292:	6859      	ldr	r1, [r3, #4]
 801f294:	ad04      	add	r5, sp, #16
 801f296:	c503      	stmia	r5!, {r0, r1}
 801f298:	a802      	add	r0, sp, #8
 801f29a:	f89d a03c 	ldrb.w	sl, [sp, #60]	@ 0x3c
 801f29e:	f7f7 f963 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f2a2:	4621      	mov	r1, r4
 801f2a4:	a804      	add	r0, sp, #16
 801f2a6:	f7f7 f987 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f2aa:	2f01      	cmp	r7, #1
 801f2ac:	d05c      	beq.n	801f368 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf0>
 801f2ae:	d357      	bcc.n	801f360 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xe8>
 801f2b0:	2f02      	cmp	r7, #2
 801f2b2:	d163      	bne.n	801f37c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x104>
 801f2b4:	f04f 0910 	mov.w	r9, #16
 801f2b8:	2504      	movs	r5, #4
 801f2ba:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f2be:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f2c2:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801f2c6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801f2ca:	fb14 2403 	smlabb	r4, r4, r3, r2
 801f2ce:	4f2e      	ldr	r7, [pc, #184]	@ (801f388 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x110>)
 801f2d0:	440a      	add	r2, r1
 801f2d2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801f2d6:	6838      	ldr	r0, [r7, #0]
 801f2d8:	440b      	add	r3, r1
 801f2da:	fb05 8404 	mla	r4, r5, r4, r8
 801f2de:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f2e2:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f2e6:	2800      	cmp	r0, #0
 801f2e8:	d042      	beq.n	801f370 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 801f2ea:	f7fc feb1 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f2ee:	6833      	ldr	r3, [r6, #0]
 801f2f0:	4630      	mov	r0, r6
 801f2f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f2f4:	4798      	blx	r3
 801f2f6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801f2fa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801f2fe:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801f302:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801f306:	f7fa fbf7 	bl	8019af8 <nema_set_clip>
 801f30a:	2200      	movs	r2, #0
 801f30c:	2600      	movs	r6, #0
 801f30e:	4611      	mov	r1, r2
 801f310:	4653      	mov	r3, sl
 801f312:	4610      	mov	r0, r2
 801f314:	f7fa fc24 	bl	8019b60 <nema_rgba>
 801f318:	f7fc fd94 	bl	801be44 <nema_set_const_color>
 801f31c:	f04f 33ff 	mov.w	r3, #4294967295
 801f320:	2201      	movs	r2, #1
 801f322:	2100      	movs	r1, #0
 801f324:	4819      	ldr	r0, [pc, #100]	@ (801f38c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x114>)
 801f326:	f7fc f9c7 	bl	801b6b8 <nema_set_blend>
 801f32a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f32e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801f332:	fb05 f503 	mul.w	r5, r5, r3
 801f336:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 801f33a:	464b      	mov	r3, r9
 801f33c:	4620      	mov	r0, r4
 801f33e:	e9cd 5600 	strd	r5, r6, [sp]
 801f342:	f7fa fc15 	bl	8019b70 <nema_bind_src_tex>
 801f346:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801f34a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801f34e:	f7fa fd9b 	bl	8019e88 <nema_blit>
 801f352:	6838      	ldr	r0, [r7, #0]
 801f354:	b160      	cbz	r0, 801f370 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0xf8>
 801f356:	f7fc fe9b 	bl	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f35a:	b006      	add	sp, #24
 801f35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f360:	f04f 0904 	mov.w	r9, #4
 801f364:	2502      	movs	r5, #2
 801f366:	e7a8      	b.n	801f2ba <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 801f368:	f04f 0939 	mov.w	r9, #57	@ 0x39
 801f36c:	2503      	movs	r5, #3
 801f36e:	e7a4      	b.n	801f2ba <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x42>
 801f370:	4b07      	ldr	r3, [pc, #28]	@ (801f390 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x118>)
 801f372:	4a08      	ldr	r2, [pc, #32]	@ (801f394 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x11c>)
 801f374:	217c      	movs	r1, #124	@ 0x7c
 801f376:	4808      	ldr	r0, [pc, #32]	@ (801f398 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x120>)
 801f378:	f00c fc1e 	bl	802bbb8 <__assert_func>
 801f37c:	4b07      	ldr	r3, [pc, #28]	@ (801f39c <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x124>)
 801f37e:	4a08      	ldr	r2, [pc, #32]	@ (801f3a0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x128>)
 801f380:	21c9      	movs	r1, #201	@ 0xc9
 801f382:	4808      	ldr	r0, [pc, #32]	@ (801f3a4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6+0x12c>)
 801f384:	f00c fc18 	bl	802bbb8 <__assert_func>
 801f388:	2015a1e4 	.word	0x2015a1e4
 801f38c:	08000504 	.word	0x08000504
 801f390:	0802eab8 	.word	0x0802eab8
 801f394:	0802f324 	.word	0x0802f324
 801f398:	0802eae0 	.word	0x0802eae0
 801f39c:	0802ef64 	.word	0x0802ef64
 801f3a0:	080306c8 	.word	0x080306c8
 801f3a4:	0802eb5c 	.word	0x0802eb5c

0801f3a8 <_ZNK8touchgfx8LCDGPU2D22blendPixelRGB888_32BPPEPKhPmh.constprop.19>:
 801f3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3aa:	680c      	ldr	r4, [r1, #0]
 801f3ac:	7805      	ldrb	r5, [r0, #0]
 801f3ae:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801f3b2:	7847      	ldrb	r7, [r0, #1]
 801f3b4:	7883      	ldrb	r3, [r0, #2]
 801f3b6:	d02e      	beq.n	801f416 <_ZNK8touchgfx8LCDGPU2D22blendPixelRGB888_32BPPEPKhPmh.constprop.19+0x6e>
 801f3b8:	fb02 f60c 	mul.w	r6, r2, ip
 801f3bc:	fb12 f303 	smulbb	r3, r2, r3
 801f3c0:	1c70      	adds	r0, r6, #1
 801f3c2:	fb15 f502 	smulbb	r5, r5, r2
 801f3c6:	eb00 2026 	add.w	r0, r0, r6, asr #8
 801f3ca:	1200      	asrs	r0, r0, #8
 801f3cc:	fb12 f707 	smulbb	r7, r2, r7
 801f3d0:	ebac 0600 	sub.w	r6, ip, r0
 801f3d4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801f3d8:	fb06 330e 	mla	r3, r6, lr, r3
 801f3dc:	fa5f fe84 	uxtb.w	lr, r4
 801f3e0:	fb06 550e 	mla	r5, r6, lr, r5
 801f3e4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f3e8:	fb06 7404 	mla	r4, r6, r4, r7
 801f3ec:	4462      	add	r2, ip
 801f3ee:	1a12      	subs	r2, r2, r0
 801f3f0:	b2d0      	uxtb	r0, r2
 801f3f2:	fbb3 f2f0 	udiv	r2, r3, r0
 801f3f6:	fbb5 f5f0 	udiv	r5, r5, r0
 801f3fa:	fbb4 f3f0 	udiv	r3, r4, r0
 801f3fe:	0412      	lsls	r2, r2, #16
 801f400:	b2ec      	uxtb	r4, r5
 801f402:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 801f406:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 801f40a:	021b      	lsls	r3, r3, #8
 801f40c:	4302      	orrs	r2, r0
 801f40e:	b29b      	uxth	r3, r3
 801f410:	431a      	orrs	r2, r3
 801f412:	600a      	str	r2, [r1, #0]
 801f414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f416:	041b      	lsls	r3, r3, #16
 801f418:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 801f41c:	432a      	orrs	r2, r5
 801f41e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 801f422:	600a      	str	r2, [r1, #0]
 801f424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f426:	bf00      	nop

0801f428 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb>:
 801f428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f42c:	4c1e      	ldr	r4, [pc, #120]	@ (801f4a8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x80>)
 801f42e:	6806      	ldr	r6, [r0, #0]
 801f430:	6824      	ldr	r4, [r4, #0]
 801f432:	4605      	mov	r5, r0
 801f434:	f894 0058 	ldrb.w	r0, [r4, #88]	@ 0x58
 801f438:	b087      	sub	sp, #28
 801f43a:	6937      	ldr	r7, [r6, #16]
 801f43c:	4690      	mov	r8, r2
 801f43e:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801f442:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 801f446:	b170      	cbz	r0, 801f466 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 801f448:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801f44a:	b160      	cbz	r0, 801f466 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x3e>
 801f44c:	6804      	ldr	r4, [r0, #0]
 801f44e:	4a17      	ldr	r2, [pc, #92]	@ (801f4ac <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 801f450:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 801f452:	4294      	cmp	r4, r2
 801f454:	d10d      	bne.n	801f472 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x4a>
 801f456:	4c16      	ldr	r4, [pc, #88]	@ (801f4b0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 801f458:	7b02      	ldrb	r2, [r0, #12]
 801f45a:	42a7      	cmp	r7, r4
 801f45c:	d112      	bne.n	801f484 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x5c>
 801f45e:	b9d6      	cbnz	r6, 801f496 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x6e>
 801f460:	b007      	add	sp, #28
 801f462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f466:	68a0      	ldr	r0, [r4, #8]
 801f468:	4a10      	ldr	r2, [pc, #64]	@ (801f4ac <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x84>)
 801f46a:	6804      	ldr	r4, [r0, #0]
 801f46c:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 801f46e:	4294      	cmp	r4, r2
 801f470:	d0f1      	beq.n	801f456 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x2e>
 801f472:	e9cd 1304 	strd	r1, r3, [sp, #16]
 801f476:	47a0      	blx	r4
 801f478:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 801f47c:	4c0c      	ldr	r4, [pc, #48]	@ (801f4b0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x88>)
 801f47e:	4602      	mov	r2, r0
 801f480:	42a7      	cmp	r7, r4
 801f482:	d0ec      	beq.n	801f45e <_ZN8touchgfx8LCDGPU2D8blitCopyEPKtRKNS_4RectES5_hb+0x36>
 801f484:	9300      	str	r3, [sp, #0]
 801f486:	e9cd 6901 	strd	r6, r9, [sp, #4]
 801f48a:	4643      	mov	r3, r8
 801f48c:	4628      	mov	r0, r5
 801f48e:	47b8      	blx	r7
 801f490:	b007      	add	sp, #28
 801f492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f496:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
 801f49a:	4628      	mov	r0, r5
 801f49c:	4643      	mov	r3, r8
 801f49e:	b007      	add	sp, #28
 801f4a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f4a4:	f7ff bee8 	b.w	801f278 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 801f4a8:	2015a078 	.word	0x2015a078
 801f4ac:	0801c131 	.word	0x0801c131
 801f4b0:	0801f4b5 	.word	0x0801f4b5

0801f4b4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f4b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f4b8:	b087      	sub	sp, #28
 801f4ba:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 801f4be:	b915      	cbnz	r5, 801f4c6 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12>
 801f4c0:	b007      	add	sp, #28
 801f4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f4c6:	461c      	mov	r4, r3
 801f4c8:	4617      	mov	r7, r2
 801f4ca:	4688      	mov	r8, r1
 801f4cc:	4606      	mov	r6, r0
 801f4ce:	6859      	ldr	r1, [r3, #4]
 801f4d0:	6818      	ldr	r0, [r3, #0]
 801f4d2:	ab02      	add	r3, sp, #8
 801f4d4:	c303      	stmia	r3!, {r0, r1}
 801f4d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4d8:	6818      	ldr	r0, [r3, #0]
 801f4da:	6859      	ldr	r1, [r3, #4]
 801f4dc:	ab04      	add	r3, sp, #16
 801f4de:	c303      	stmia	r3!, {r0, r1}
 801f4e0:	a802      	add	r0, sp, #8
 801f4e2:	f7f7 f841 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f4e6:	4621      	mov	r1, r4
 801f4e8:	a804      	add	r0, sp, #16
 801f4ea:	f7f7 f865 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f4ee:	2f01      	cmp	r7, #1
 801f4f0:	d05c      	beq.n	801f5ac <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf8>
 801f4f2:	d357      	bcc.n	801f5a4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0xf0>
 801f4f4:	2f02      	cmp	r7, #2
 801f4f6:	d163      	bne.n	801f5c0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x10c>
 801f4f8:	f04f 0910 	mov.w	r9, #16
 801f4fc:	2404      	movs	r4, #4
 801f4fe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801f502:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f506:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801f50a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 801f50e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f512:	4f2e      	ldr	r7, [pc, #184]	@ (801f5cc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x118>)
 801f514:	fb04 8801 	mla	r8, r4, r1, r8
 801f518:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801f51c:	4402      	add	r2, r0
 801f51e:	6838      	ldr	r0, [r7, #0]
 801f520:	440b      	add	r3, r1
 801f522:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f526:	f8ad 3012 	strh.w	r3, [sp, #18]
 801f52a:	2800      	cmp	r0, #0
 801f52c:	d042      	beq.n	801f5b4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 801f52e:	f7fc fd8f 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f532:	6833      	ldr	r3, [r6, #0]
 801f534:	4630      	mov	r0, r6
 801f536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f538:	4798      	blx	r3
 801f53a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801f53e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801f542:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801f546:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801f54a:	f7fa fad5 	bl	8019af8 <nema_set_clip>
 801f54e:	2200      	movs	r2, #0
 801f550:	462b      	mov	r3, r5
 801f552:	2500      	movs	r5, #0
 801f554:	4611      	mov	r1, r2
 801f556:	4610      	mov	r0, r2
 801f558:	f7fa fb02 	bl	8019b60 <nema_rgba>
 801f55c:	f7fc fc72 	bl	801be44 <nema_set_const_color>
 801f560:	f04f 33ff 	mov.w	r3, #4294967295
 801f564:	2201      	movs	r2, #1
 801f566:	2100      	movs	r1, #0
 801f568:	4819      	ldr	r0, [pc, #100]	@ (801f5d0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x11c>)
 801f56a:	f7fc f8a5 	bl	801b6b8 <nema_set_blend>
 801f56e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f572:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801f576:	fb04 f403 	mul.w	r4, r4, r3
 801f57a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 801f57e:	464b      	mov	r3, r9
 801f580:	4640      	mov	r0, r8
 801f582:	e9cd 4500 	strd	r4, r5, [sp]
 801f586:	f7fa faf3 	bl	8019b70 <nema_bind_src_tex>
 801f58a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801f58e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801f592:	f7fa fc79 	bl	8019e88 <nema_blit>
 801f596:	6838      	ldr	r0, [r7, #0]
 801f598:	b160      	cbz	r0, 801f5b4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x100>
 801f59a:	f7fc fd79 	bl	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f59e:	b007      	add	sp, #28
 801f5a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f5a4:	f04f 0904 	mov.w	r9, #4
 801f5a8:	2402      	movs	r4, #2
 801f5aa:	e7a8      	b.n	801f4fe <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 801f5ac:	f04f 0939 	mov.w	r9, #57	@ 0x39
 801f5b0:	2403      	movs	r4, #3
 801f5b2:	e7a4      	b.n	801f4fe <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4a>
 801f5b4:	4b07      	ldr	r3, [pc, #28]	@ (801f5d4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x120>)
 801f5b6:	4a08      	ldr	r2, [pc, #32]	@ (801f5d8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x124>)
 801f5b8:	217c      	movs	r1, #124	@ 0x7c
 801f5ba:	4808      	ldr	r0, [pc, #32]	@ (801f5dc <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x128>)
 801f5bc:	f00c fafc 	bl	802bbb8 <__assert_func>
 801f5c0:	4b07      	ldr	r3, [pc, #28]	@ (801f5e0 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x12c>)
 801f5c2:	4a08      	ldr	r2, [pc, #32]	@ (801f5e4 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x130>)
 801f5c4:	21c9      	movs	r1, #201	@ 0xc9
 801f5c6:	4808      	ldr	r0, [pc, #32]	@ (801f5e8 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x134>)
 801f5c8:	f00c faf6 	bl	802bbb8 <__assert_func>
 801f5cc:	2015a1e4 	.word	0x2015a1e4
 801f5d0:	08000504 	.word	0x08000504
 801f5d4:	0802eab8 	.word	0x0802eab8
 801f5d8:	0802f324 	.word	0x0802f324
 801f5dc:	0802eae0 	.word	0x0802eae0
 801f5e0:	0802ef64 	.word	0x0802ef64
 801f5e4:	080306c8 	.word	0x080306c8
 801f5e8:	0802eb5c 	.word	0x0802eb5c

0801f5ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801f5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5f0:	4682      	mov	sl, r0
 801f5f2:	4851      	ldr	r0, [pc, #324]	@ (801f738 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x14c>)
 801f5f4:	b08f      	sub	sp, #60	@ 0x3c
 801f5f6:	6800      	ldr	r0, [r0, #0]
 801f5f8:	9104      	str	r1, [sp, #16]
 801f5fa:	f890 1048 	ldrb.w	r1, [r0, #72]	@ 0x48
 801f5fe:	f9bd 0064 	ldrsh.w	r0, [sp, #100]	@ 0x64
 801f602:	2902      	cmp	r1, #2
 801f604:	9003      	str	r0, [sp, #12]
 801f606:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	@ 0x68
 801f60a:	9006      	str	r0, [sp, #24]
 801f60c:	f000 81cd 	beq.w	801f9aa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3be>
 801f610:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801f612:	2900      	cmp	r1, #0
 801f614:	f000 81c3 	beq.w	801f99e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3b2>
 801f618:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f61c:	8899      	ldrh	r1, [r3, #4]
 801f61e:	b2ae      	uxth	r6, r5
 801f620:	4431      	add	r1, r6
 801f622:	b289      	uxth	r1, r1
 801f624:	fa0f fc81 	sxth.w	ip, r1
 801f628:	4565      	cmp	r5, ip
 801f62a:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801f62e:	da28      	bge.n	801f682 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 801f630:	9803      	ldr	r0, [sp, #12]
 801f632:	1830      	adds	r0, r6, r0
 801f634:	b280      	uxth	r0, r0
 801f636:	9005      	str	r0, [sp, #20]
 801f638:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 801f63c:	4575      	cmp	r5, lr
 801f63e:	da20      	bge.n	801f682 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 801f640:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 801f644:	b2a7      	uxth	r7, r4
 801f646:	4638      	mov	r0, r7
 801f648:	4447      	add	r7, r8
 801f64a:	b2bf      	uxth	r7, r7
 801f64c:	fa0f f987 	sxth.w	r9, r7
 801f650:	454c      	cmp	r4, r9
 801f652:	da16      	bge.n	801f682 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 801f654:	4680      	mov	r8, r0
 801f656:	9007      	str	r0, [sp, #28]
 801f658:	9806      	ldr	r0, [sp, #24]
 801f65a:	4480      	add	r8, r0
 801f65c:	fa1f f888 	uxth.w	r8, r8
 801f660:	fa0f fb88 	sxth.w	fp, r8
 801f664:	455c      	cmp	r4, fp
 801f666:	da0c      	bge.n	801f682 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x96>
 801f668:	9805      	ldr	r0, [sp, #20]
 801f66a:	45d9      	cmp	r9, fp
 801f66c:	bfc8      	it	gt
 801f66e:	4647      	movgt	r7, r8
 801f670:	45f4      	cmp	ip, lr
 801f672:	bfc8      	it	gt
 801f674:	4601      	movgt	r1, r0
 801f676:	9807      	ldr	r0, [sp, #28]
 801f678:	1b89      	subs	r1, r1, r6
 801f67a:	1a3f      	subs	r7, r7, r0
 801f67c:	b209      	sxth	r1, r1
 801f67e:	b23f      	sxth	r7, r7
 801f680:	e005      	b.n	801f68e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xa2>
 801f682:	2700      	movs	r7, #0
 801f684:	463c      	mov	r4, r7
 801f686:	4639      	mov	r1, r7
 801f688:	463e      	mov	r6, r7
 801f68a:	463d      	mov	r5, r7
 801f68c:	9707      	str	r7, [sp, #28]
 801f68e:	f9b2 b000 	ldrsh.w	fp, [r2]
 801f692:	8890      	ldrh	r0, [r2, #4]
 801f694:	4458      	add	r0, fp
 801f696:	b280      	uxth	r0, r0
 801f698:	fa0f fc80 	sxth.w	ip, r0
 801f69c:	45ac      	cmp	ip, r5
 801f69e:	dd51      	ble.n	801f744 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 801f6a0:	4431      	add	r1, r6
 801f6a2:	b289      	uxth	r1, r1
 801f6a4:	fa0f fe81 	sxth.w	lr, r1
 801f6a8:	45f3      	cmp	fp, lr
 801f6aa:	da4b      	bge.n	801f744 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 801f6ac:	f9b2 8002 	ldrsh.w	r8, [r2, #2]
 801f6b0:	88d6      	ldrh	r6, [r2, #6]
 801f6b2:	4446      	add	r6, r8
 801f6b4:	b2b6      	uxth	r6, r6
 801f6b6:	fa0f f986 	sxth.w	r9, r6
 801f6ba:	454c      	cmp	r4, r9
 801f6bc:	da42      	bge.n	801f744 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 801f6be:	9a07      	ldr	r2, [sp, #28]
 801f6c0:	443a      	add	r2, r7
 801f6c2:	b297      	uxth	r7, r2
 801f6c4:	b23a      	sxth	r2, r7
 801f6c6:	4590      	cmp	r8, r2
 801f6c8:	9205      	str	r2, [sp, #20]
 801f6ca:	da3b      	bge.n	801f744 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x158>
 801f6cc:	45ab      	cmp	fp, r5
 801f6ce:	bfb8      	it	lt
 801f6d0:	46ab      	movlt	fp, r5
 801f6d2:	4544      	cmp	r4, r8
 801f6d4:	bfb8      	it	lt
 801f6d6:	4644      	movlt	r4, r8
 801f6d8:	45f4      	cmp	ip, lr
 801f6da:	bfc8      	it	gt
 801f6dc:	4608      	movgt	r0, r1
 801f6de:	9905      	ldr	r1, [sp, #20]
 801f6e0:	465a      	mov	r2, fp
 801f6e2:	4589      	cmp	r9, r1
 801f6e4:	bfc8      	it	gt
 801f6e6:	463e      	movgt	r6, r7
 801f6e8:	f8df c054 	ldr.w	ip, [pc, #84]	@ 801f740 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x154>
 801f6ec:	4f13      	ldr	r7, [pc, #76]	@ (801f73c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x150>)
 801f6ee:	fa1f f58b 	uxth.w	r5, fp
 801f6f2:	1b36      	subs	r6, r6, r4
 801f6f4:	1b41      	subs	r1, r0, r5
 801f6f6:	f8bc c000 	ldrh.w	ip, [ip]
 801f6fa:	883f      	ldrh	r7, [r7, #0]
 801f6fc:	fa0f fb86 	sxth.w	fp, r6
 801f700:	fa0f f981 	sxth.w	r9, r1
 801f704:	2a00      	cmp	r2, #0
 801f706:	f8ad b026 	strh.w	fp, [sp, #38]	@ 0x26
 801f70a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f70e:	f8ad 4022 	strh.w	r4, [sp, #34]	@ 0x22
 801f712:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 801f716:	fa0f f68c 	sxth.w	r6, ip
 801f71a:	b239      	sxth	r1, r7
 801f71c:	f280 812b 	bge.w	801f976 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38a>
 801f720:	f04f 0e00 	mov.w	lr, #0
 801f724:	fa0f f980 	sxth.w	r9, r0
 801f728:	4675      	mov	r5, lr
 801f72a:	4672      	mov	r2, lr
 801f72c:	4648      	mov	r0, r9
 801f72e:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 801f732:	f8ad e020 	strh.w	lr, [sp, #32]
 801f736:	e015      	b.n	801f764 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 801f738:	2015a078 	.word	0x2015a078
 801f73c:	2015a06e 	.word	0x2015a06e
 801f740:	2015a06c 	.word	0x2015a06c
 801f744:	2200      	movs	r2, #0
 801f746:	48a3      	ldr	r0, [pc, #652]	@ (801f9d4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3e8>)
 801f748:	4615      	mov	r5, r2
 801f74a:	f8b0 c000 	ldrh.w	ip, [r0]
 801f74e:	4693      	mov	fp, r2
 801f750:	4614      	mov	r4, r2
 801f752:	4610      	mov	r0, r2
 801f754:	4691      	mov	r9, r2
 801f756:	49a0      	ldr	r1, [pc, #640]	@ (801f9d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ec>)
 801f758:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801f75c:	880f      	ldrh	r7, [r1, #0]
 801f75e:	fa0f f68c 	sxth.w	r6, ip
 801f762:	b239      	sxth	r1, r7
 801f764:	1ab2      	subs	r2, r6, r2
 801f766:	4282      	cmp	r2, r0
 801f768:	da05      	bge.n	801f776 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x18a>
 801f76a:	ebac 0c05 	sub.w	ip, ip, r5
 801f76e:	fa0f f98c 	sxth.w	r9, ip
 801f772:	f8ad 9024 	strh.w	r9, [sp, #36]	@ 0x24
 801f776:	2c00      	cmp	r4, #0
 801f778:	f2c0 80e8 	blt.w	801f94c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x360>
 801f77c:	4622      	mov	r2, r4
 801f77e:	1a89      	subs	r1, r1, r2
 801f780:	458b      	cmp	fp, r1
 801f782:	dd04      	ble.n	801f78e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 801f784:	1b3f      	subs	r7, r7, r4
 801f786:	fa0f fb87 	sxth.w	fp, r7
 801f78a:	f8ad b026 	strh.w	fp, [sp, #38]	@ 0x26
 801f78e:	f1b9 0f00 	cmp.w	r9, #0
 801f792:	f340 80d2 	ble.w	801f93a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 801f796:	f1bb 0f00 	cmp.w	fp, #0
 801f79a:	f340 80ce 	ble.w	801f93a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34e>
 801f79e:	2200      	movs	r2, #0
 801f7a0:	8819      	ldrh	r1, [r3, #0]
 801f7a2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 801f7a6:	9b03      	ldr	r3, [sp, #12]
 801f7a8:	1a6d      	subs	r5, r5, r1
 801f7aa:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801f7ae:	eba4 0408 	sub.w	r4, r4, r8
 801f7b2:	9b06      	ldr	r3, [sp, #24]
 801f7b4:	a90c      	add	r1, sp, #48	@ 0x30
 801f7b6:	a80a      	add	r0, sp, #40	@ 0x28
 801f7b8:	b22d      	sxth	r5, r5
 801f7ba:	b224      	sxth	r4, r4
 801f7bc:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801f7c0:	920c      	str	r2, [sp, #48]	@ 0x30
 801f7c2:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 801f7c6:	f8ad b02e 	strh.w	fp, [sp, #46]	@ 0x2e
 801f7ca:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 801f7ce:	f8ad 402a 	strh.w	r4, [sp, #42]	@ 0x2a
 801f7d2:	f7f6 fef1 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f7d6:	a808      	add	r0, sp, #32
 801f7d8:	f7f6 fec6 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f7dc:	a80c      	add	r0, sp, #48	@ 0x30
 801f7de:	f7f6 fec3 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f7e2:	4b7e      	ldr	r3, [pc, #504]	@ (801f9dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801f7ea:	2a00      	cmp	r2, #0
 801f7ec:	f040 80ba 	bne.w	801f964 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x378>
 801f7f0:	6898      	ldr	r0, [r3, #8]
 801f7f2:	6803      	ldr	r3, [r0, #0]
 801f7f4:	4a7a      	ldr	r2, [pc, #488]	@ (801f9e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f4>)
 801f7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f7f8:	4293      	cmp	r3, r2
 801f7fa:	f040 80c4 	bne.w	801f986 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39a>
 801f7fe:	7b00      	ldrb	r0, [r0, #12]
 801f800:	2801      	cmp	r0, #1
 801f802:	f000 80ba 	beq.w	801f97a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x38e>
 801f806:	f0c0 80b2 	bcc.w	801f96e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x382>
 801f80a:	2802      	cmp	r0, #2
 801f80c:	f040 80da 	bne.w	801f9c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3d8>
 801f810:	2310      	movs	r3, #16
 801f812:	2604      	movs	r6, #4
 801f814:	9305      	str	r3, [sp, #20]
 801f816:	9b04      	ldr	r3, [sp, #16]
 801f818:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	@ 0x34
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	fb06 f101 	mul.w	r1, r6, r1
 801f822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f824:	4a6f      	ldr	r2, [pc, #444]	@ (801f9e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f8>)
 801f826:	9103      	str	r1, [sp, #12]
 801f828:	4293      	cmp	r3, r2
 801f82a:	f040 80ae 	bne.w	801f98a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x39e>
 801f82e:	4b6e      	ldr	r3, [pc, #440]	@ (801f9e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3fc>)
 801f830:	881f      	ldrh	r7, [r3, #0]
 801f832:	2f00      	cmp	r7, #0
 801f834:	f000 80bf 	beq.w	801f9b6 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3ca>
 801f838:	9b04      	ldr	r3, [sp, #16]
 801f83a:	7b1b      	ldrb	r3, [r3, #12]
 801f83c:	2b02      	cmp	r3, #2
 801f83e:	f000 80a0 	beq.w	801f982 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x396>
 801f842:	2b01      	cmp	r3, #1
 801f844:	bf14      	ite	ne
 801f846:	2302      	movne	r3, #2
 801f848:	2303      	moveq	r3, #3
 801f84a:	fb17 f703 	smulbb	r7, r7, r3
 801f84e:	b2bf      	uxth	r7, r7
 801f850:	4a62      	ldr	r2, [pc, #392]	@ (801f9dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3f0>)
 801f852:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801f856:	6810      	ldr	r0, [r2, #0]
 801f858:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801f85c:	9a03      	ldr	r2, [sp, #12]
 801f85e:	fb02 3808 	mla	r8, r2, r8, r3
 801f862:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f864:	6803      	ldr	r3, [r0, #0]
 801f866:	4442      	add	r2, r8
 801f868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f86a:	9204      	str	r2, [sp, #16]
 801f86c:	4798      	blx	r3
 801f86e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 801f872:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801f876:	fb07 f202 	mul.w	r2, r7, r2
 801f87a:	fb06 2303 	mla	r3, r6, r3, r2
 801f87e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 801fa18 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x42c>
 801f882:	18c3      	adds	r3, r0, r3
 801f884:	f8d8 2000 	ldr.w	r2, [r8]
 801f888:	9306      	str	r3, [sp, #24]
 801f88a:	2a00      	cmp	r2, #0
 801f88c:	f000 8081 	beq.w	801f992 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 801f890:	2600      	movs	r6, #0
 801f892:	4610      	mov	r0, r2
 801f894:	f7fc fbdc 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801f898:	9b03      	ldr	r3, [sp, #12]
 801f89a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801f89e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801f8a2:	9300      	str	r3, [sp, #0]
 801f8a4:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 801f8a8:	f7fa f9e6 	bl	8019c78 <nema_bind_dst_tex>
 801f8ac:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801f8b0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801f8b4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801f8b8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801f8bc:	f7fa f91c 	bl	8019af8 <nema_set_clip>
 801f8c0:	f04f 33ff 	mov.w	r3, #4294967295
 801f8c4:	2201      	movs	r2, #1
 801f8c6:	4631      	mov	r1, r6
 801f8c8:	f240 5004 	movw	r0, #1284	@ 0x504
 801f8cc:	f7fb fef4 	bl	801b6b8 <nema_set_blend>
 801f8d0:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 801f8d4:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	@ 0x26
 801f8d8:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	@ 0x24
 801f8dc:	9700      	str	r7, [sp, #0]
 801f8de:	9601      	str	r6, [sp, #4]
 801f8e0:	f7fa f946 	bl	8019b70 <nema_bind_src_tex>
 801f8e4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801f8e8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801f8ec:	f7fa facc 	bl	8019e88 <nema_blit>
 801f8f0:	f8d8 0000 	ldr.w	r0, [r8]
 801f8f4:	2800      	cmp	r0, #0
 801f8f6:	d04c      	beq.n	801f992 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 801f8f8:	f7fc fbca 	bl	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801f8fc:	f8d8 0000 	ldr.w	r0, [r8]
 801f900:	2800      	cmp	r0, #0
 801f902:	d046      	beq.n	801f992 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 801f904:	6803      	ldr	r3, [r0, #0]
 801f906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f908:	4798      	blx	r3
 801f90a:	f8d8 0000 	ldr.w	r0, [r8]
 801f90e:	2800      	cmp	r0, #0
 801f910:	d03f      	beq.n	801f992 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x3a6>
 801f912:	6803      	ldr	r3, [r0, #0]
 801f914:	4637      	mov	r7, r6
 801f916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f918:	4798      	blx	r3
 801f91a:	4650      	mov	r0, sl
 801f91c:	f365 060f 	bfi	r6, r5, #0, #16
 801f920:	f369 070f 	bfi	r7, r9, #0, #16
 801f924:	f364 461f 	bfi	r6, r4, #16, #16
 801f928:	f36b 471f 	bfi	r7, fp, #16, #16
 801f92c:	f8ca 6000 	str.w	r6, [sl]
 801f930:	f8ca 7004 	str.w	r7, [sl, #4]
 801f934:	b00f      	add	sp, #60	@ 0x3c
 801f936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f93a:	2300      	movs	r3, #0
 801f93c:	4650      	mov	r0, sl
 801f93e:	f8ca 3000 	str.w	r3, [sl]
 801f942:	f8ca 3004 	str.w	r3, [sl, #4]
 801f946:	b00f      	add	sp, #60	@ 0x3c
 801f948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f94c:	2000      	movs	r0, #0
 801f94e:	eb0b 0604 	add.w	r6, fp, r4
 801f952:	fa0f fb86 	sxth.w	fp, r6
 801f956:	4604      	mov	r4, r0
 801f958:	4602      	mov	r2, r0
 801f95a:	f8ad b026 	strh.w	fp, [sp, #38]	@ 0x26
 801f95e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801f962:	e70c      	b.n	801f77e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x192>
 801f964:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801f966:	2800      	cmp	r0, #0
 801f968:	f47f af43 	bne.w	801f7f2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x206>
 801f96c:	e740      	b.n	801f7f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x204>
 801f96e:	2304      	movs	r3, #4
 801f970:	2602      	movs	r6, #2
 801f972:	9305      	str	r3, [sp, #20]
 801f974:	e74f      	b.n	801f816 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 801f976:	4648      	mov	r0, r9
 801f978:	e6f4      	b.n	801f764 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x178>
 801f97a:	2339      	movs	r3, #57	@ 0x39
 801f97c:	2603      	movs	r6, #3
 801f97e:	9305      	str	r3, [sp, #20]
 801f980:	e749      	b.n	801f816 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22a>
 801f982:	2304      	movs	r3, #4
 801f984:	e761      	b.n	801f84a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25e>
 801f986:	4798      	blx	r3
 801f988:	e73a      	b.n	801f800 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>
 801f98a:	9804      	ldr	r0, [sp, #16]
 801f98c:	4798      	blx	r3
 801f98e:	4607      	mov	r7, r0
 801f990:	e75e      	b.n	801f850 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>
 801f992:	4b16      	ldr	r3, [pc, #88]	@ (801f9ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x400>)
 801f994:	4a16      	ldr	r2, [pc, #88]	@ (801f9f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x404>)
 801f996:	217c      	movs	r1, #124	@ 0x7c
 801f998:	4816      	ldr	r0, [pc, #88]	@ (801f9f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x408>)
 801f99a:	f00c f90d 	bl	802bbb8 <__assert_func>
 801f99e:	4b16      	ldr	r3, [pc, #88]	@ (801f9f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40c>)
 801f9a0:	4a16      	ldr	r2, [pc, #88]	@ (801f9fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 801f9a2:	21f9      	movs	r1, #249	@ 0xf9
 801f9a4:	4816      	ldr	r0, [pc, #88]	@ (801fa00 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 801f9a6:	f00c f907 	bl	802bbb8 <__assert_func>
 801f9aa:	4b16      	ldr	r3, [pc, #88]	@ (801fa04 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x418>)
 801f9ac:	4a13      	ldr	r2, [pc, #76]	@ (801f9fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 801f9ae:	21f8      	movs	r1, #248	@ 0xf8
 801f9b0:	4813      	ldr	r0, [pc, #76]	@ (801fa00 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 801f9b2:	f00c f901 	bl	802bbb8 <__assert_func>
 801f9b6:	4b14      	ldr	r3, [pc, #80]	@ (801fa08 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x41c>)
 801f9b8:	4a14      	ldr	r2, [pc, #80]	@ (801fa0c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x420>)
 801f9ba:	f240 110f 	movw	r1, #271	@ 0x10f
 801f9be:	4814      	ldr	r0, [pc, #80]	@ (801fa10 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x424>)
 801f9c0:	f00c f8fa 	bl	802bbb8 <__assert_func>
 801f9c4:	4b13      	ldr	r3, [pc, #76]	@ (801fa14 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x428>)
 801f9c6:	4a0d      	ldr	r2, [pc, #52]	@ (801f9fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x410>)
 801f9c8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 801f9cc:	480c      	ldr	r0, [pc, #48]	@ (801fa00 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x414>)
 801f9ce:	f00c f8f3 	bl	802bbb8 <__assert_func>
 801f9d2:	bf00      	nop
 801f9d4:	2015a06c 	.word	0x2015a06c
 801f9d8:	2015a06e 	.word	0x2015a06e
 801f9dc:	2015a078 	.word	0x2015a078
 801f9e0:	0801c131 	.word	0x0801c131
 801f9e4:	0801dd11 	.word	0x0801dd11
 801f9e8:	2015a072 	.word	0x2015a072
 801f9ec:	0802eab8 	.word	0x0802eab8
 801f9f0:	0802f324 	.word	0x0802f324
 801f9f4:	0802eae0 	.word	0x0802eae0
 801f9f8:	0802ee14 	.word	0x0802ee14
 801f9fc:	080303fc 	.word	0x080303fc
 801fa00:	0802eb5c 	.word	0x0802eb5c
 801fa04:	0802ed60 	.word	0x0802ed60
 801fa08:	0802f094 	.word	0x0802f094
 801fa0c:	08030858 	.word	0x08030858
 801fa10:	0802f0d8 	.word	0x0802f0d8
 801fa14:	0802ee64 	.word	0x0802ee64
 801fa18:	2015a1e4 	.word	0x2015a1e4

0801fa1c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801fa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa20:	b085      	sub	sp, #20
 801fa22:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 801fa26:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	@ 0x38
 801fa2a:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
 801fa2e:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 801fa32:	2e00      	cmp	r6, #0
 801fa34:	d05b      	beq.n	801faee <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 801fa36:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 801fa3a:	f1be 0f00 	cmp.w	lr, #0
 801fa3e:	dd56      	ble.n	801faee <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 801fa40:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801fa44:	f1be 0f00 	cmp.w	lr, #0
 801fa48:	dd51      	ble.n	801faee <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 801fa4a:	f3c8 0b87 	ubfx	fp, r8, #2, #8
 801fa4e:	f1bb 0f0b 	cmp.w	fp, #11
 801fa52:	f000 815f 	beq.w	801fd14 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2f8>
 801fa56:	f1bb 0f0d 	cmp.w	fp, #13
 801fa5a:	4684      	mov	ip, r0
 801fa5c:	4614      	mov	r4, r2
 801fa5e:	461f      	mov	r7, r3
 801fa60:	d03c      	beq.n	801fadc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xc0>
 801fa62:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801fdc0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a4>
 801fa66:	f8da 0000 	ldr.w	r0, [sl]
 801fa6a:	2800      	cmp	r0, #0
 801fa6c:	f000 8187 	beq.w	801fd7e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 801fa70:	f8cd c00c 	str.w	ip, [sp, #12]
 801fa74:	f7fc faec 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 801fa78:	9b03      	ldr	r3, [sp, #12]
 801fa7a:	681a      	ldr	r2, [r3, #0]
 801fa7c:	4618      	mov	r0, r3
 801fa7e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 801fa80:	4798      	blx	r3
 801fa82:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801fa86:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801fa8a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801fa8e:	f9b5 0000 	ldrsh.w	r0, [r5]
 801fa92:	f7fa f831 	bl	8019af8 <nema_set_clip>
 801fa96:	2200      	movs	r2, #0
 801fa98:	4633      	mov	r3, r6
 801fa9a:	4611      	mov	r1, r2
 801fa9c:	4610      	mov	r0, r2
 801fa9e:	f7fa f85f 	bl	8019b60 <nema_rgba>
 801faa2:	f7fc f9cf 	bl	801be44 <nema_set_const_color>
 801faa6:	f04f 33ff 	mov.w	r3, #4294967295
 801faaa:	2201      	movs	r2, #1
 801faac:	2100      	movs	r1, #0
 801faae:	48ba      	ldr	r0, [pc, #744]	@ (801fd98 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x37c>)
 801fab0:	f7fb fe02 	bl	801b6b8 <nema_set_blend>
 801fab4:	f1bb 0f0d 	cmp.w	fp, #13
 801fab8:	f200 8167 	bhi.w	801fd8a <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801fabc:	e8df f01b 	tbh	[pc, fp, lsl #1]
 801fac0:	00c100cd 	.word	0x00c100cd
 801fac4:	016500d6 	.word	0x016500d6
 801fac8:	01650165 	.word	0x01650165
 801facc:	01650165 	.word	0x01650165
 801fad0:	01650165 	.word	0x01650165
 801fad4:	01650165 	.word	0x01650165
 801fad8:	001a00ac 	.word	0x001a00ac
 801fadc:	685b      	ldr	r3, [r3, #4]
 801fade:	b133      	cbz	r3, 801faee <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xd2>
 801fae0:	781b      	ldrb	r3, [r3, #0]
 801fae2:	f1a3 0216 	sub.w	r2, r3, #22
 801fae6:	2a01      	cmp	r2, #1
 801fae8:	d9bb      	bls.n	801fa62 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 801faea:	2b12      	cmp	r3, #18
 801faec:	d0b9      	beq.n	801fa62 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x46>
 801faee:	b005      	add	sp, #20
 801faf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faf4:	f04f 36ff 	mov.w	r6, #4294967295
 801faf8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	6838      	ldr	r0, [r7, #0]
 801fb00:	781b      	ldrb	r3, [r3, #0]
 801fb02:	f008 0501 	and.w	r5, r8, #1
 801fb06:	e9cd 6500 	strd	r6, r5, [sp]
 801fb0a:	f7fa f831 	bl	8019b70 <nema_bind_src_tex>
 801fb0e:	2001      	movs	r0, #1
 801fb10:	f7fa fe9c 	bl	801a84c <nema_enable_tiling>
 801fb14:	f9b9 3000 	ldrsh.w	r3, [r9]
 801fb18:	edd4 7a00 	vldr	s15, [r4]
 801fb1c:	ee02 3a10 	vmov	s4, r3
 801fb20:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 801fb24:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801fb28:	ee02 3a90 	vmov	s5, r3
 801fb2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fb30:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 801fd9c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801fb34:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 801fb38:	edd4 7a01 	vldr	s15, [r4, #4]
 801fb3c:	eeb0 0a42 	vmov.f32	s0, s4
 801fb40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fb44:	eea7 0a26 	vfma.f32	s0, s14, s13
 801fb48:	eef0 0a62 	vmov.f32	s1, s5
 801fb4c:	ed94 7a03 	vldr	s14, [r4, #12]
 801fb50:	4b93      	ldr	r3, [pc, #588]	@ (801fda0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x384>)
 801fb52:	eee7 0aa6 	vfma.f32	s1, s15, s13
 801fb56:	781b      	ldrb	r3, [r3, #0]
 801fb58:	edd4 7a04 	vldr	s15, [r4, #16]
 801fb5c:	2b01      	cmp	r3, #1
 801fb5e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801fb62:	f000 808c 	beq.w	801fc7e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x262>
 801fb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fb6e:	f240 80ea 	bls.w	801fd46 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32a>
 801fb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb76:	bf94      	ite	ls
 801fb78:	2001      	movls	r0, #1
 801fb7a:	2002      	movhi	r0, #2
 801fb7c:	edd4 7a05 	vldr	s15, [r4, #20]
 801fb80:	ed94 6a08 	vldr	s12, [r4, #32]
 801fb84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fb88:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801fb8c:	edd4 7a06 	vldr	s15, [r4, #24]
 801fb90:	eddf 6a82 	vldr	s13, [pc, #520]	@ 801fd9c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801fb94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fb98:	eeb0 1a42 	vmov.f32	s2, s4
 801fb9c:	eef0 1a62 	vmov.f32	s3, s5
 801fba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fba4:	eee7 1aa6 	vfma.f32	s3, s15, s13
 801fba8:	eea7 1a26 	vfma.f32	s2, s14, s13
 801fbac:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801fbb0:	f240 80c1 	bls.w	801fd36 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x31a>
 801fbb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbbc:	bf94      	ite	ls
 801fbbe:	2101      	movls	r1, #1
 801fbc0:	2102      	movhi	r1, #2
 801fbc2:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 801fbc6:	ed94 6a0d 	vldr	s12, [r4, #52]	@ 0x34
 801fbca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fbce:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801fbd2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801fbd6:	eddf 6a71 	vldr	s13, [pc, #452]	@ 801fd9c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801fbda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbe2:	eee7 2aa6 	vfma.f32	s5, s15, s13
 801fbe6:	eea7 2a26 	vfma.f32	s4, s14, s13
 801fbea:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 801fbee:	f240 809a 	bls.w	801fd26 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30a>
 801fbf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbfa:	bf94      	ite	ls
 801fbfc:	2201      	movls	r2, #1
 801fbfe:	2202      	movhi	r2, #2
 801fc00:	f7fa fa38 	bl	801a074 <nema_blit_tri_fit>
 801fc04:	f8da 0000 	ldr.w	r0, [sl]
 801fc08:	2800      	cmp	r0, #0
 801fc0a:	f000 80b8 	beq.w	801fd7e <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x362>
 801fc0e:	b005      	add	sp, #20
 801fc10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc14:	f7fc ba3c 	b.w	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 801fc18:	4a62      	ldr	r2, [pc, #392]	@ (801fda4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x388>)
 801fc1a:	23ff      	movs	r3, #255	@ 0xff
 801fc1c:	6810      	ldr	r0, [r2, #0]
 801fc1e:	f008 0501 	and.w	r5, r8, #1
 801fc22:	b2c2      	uxtb	r2, r0
 801fc24:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801fc28:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801fc2c:	f7f9 ff98 	bl	8019b60 <nema_rgba>
 801fc30:	f7f9 ff56 	bl	8019ae0 <nema_set_tex_color>
 801fc34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801fc38:	6838      	ldr	r0, [r7, #0]
 801fc3a:	2329      	movs	r3, #41	@ 0x29
 801fc3c:	f04f 36ff 	mov.w	r6, #4294967295
 801fc40:	e761      	b.n	801fb06 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 801fc42:	2339      	movs	r3, #57	@ 0x39
 801fc44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801fc48:	f04f 0c03 	mov.w	ip, #3
 801fc4c:	6838      	ldr	r0, [r7, #0]
 801fc4e:	f008 0501 	and.w	r5, r8, #1
 801fc52:	693e      	ldr	r6, [r7, #16]
 801fc54:	fb06 f60c 	mul.w	r6, r6, ip
 801fc58:	e755      	b.n	801fb06 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0xea>
 801fc5a:	f008 0501 	and.w	r5, r8, #1
 801fc5e:	6838      	ldr	r0, [r7, #0]
 801fc60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801fc64:	2304      	movs	r3, #4
 801fc66:	f04f 0c02 	mov.w	ip, #2
 801fc6a:	e7f2      	b.n	801fc52 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x236>
 801fc6c:	2310      	movs	r3, #16
 801fc6e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801fc72:	f04f 0c04 	mov.w	ip, #4
 801fc76:	6838      	ldr	r0, [r7, #0]
 801fc78:	f008 0501 	and.w	r5, r8, #1
 801fc7c:	e7e9      	b.n	801fc52 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x236>
 801fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fc86:	d974      	bls.n	801fd72 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x356>
 801fc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc8c:	bf94      	ite	ls
 801fc8e:	2002      	movls	r0, #2
 801fc90:	2003      	movhi	r0, #3
 801fc92:	edd4 7a05 	vldr	s15, [r4, #20]
 801fc96:	ed94 6a08 	vldr	s12, [r4, #32]
 801fc9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fc9e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801fca2:	edd4 7a06 	vldr	s15, [r4, #24]
 801fca6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801fd9c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801fcaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fcae:	eeb0 1a42 	vmov.f32	s2, s4
 801fcb2:	eef0 1a62 	vmov.f32	s3, s5
 801fcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcba:	eee7 1aa6 	vfma.f32	s3, s15, s13
 801fcbe:	eea7 1a26 	vfma.f32	s2, s14, s13
 801fcc2:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 801fcc6:	d94c      	bls.n	801fd62 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x346>
 801fcc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcd0:	bf94      	ite	ls
 801fcd2:	2102      	movls	r1, #2
 801fcd4:	2103      	movhi	r1, #3
 801fcd6:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 801fcda:	ed94 6a0d 	vldr	s12, [r4, #52]	@ 0x34
 801fcde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fce2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801fce6:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801fcea:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 801fd9c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x380>
 801fcee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcf6:	eee7 2aa6 	vfma.f32	s5, s15, s13
 801fcfa:	eea7 2a26 	vfma.f32	s4, s14, s13
 801fcfe:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 801fd02:	d926      	bls.n	801fd52 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801fd04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd0c:	bf94      	ite	ls
 801fd0e:	2202      	movls	r2, #2
 801fd10:	2203      	movhi	r2, #3
 801fd12:	e775      	b.n	801fc00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e4>
 801fd14:	e9cd 6a11 	strd	r6, sl, [sp, #68]	@ 0x44
 801fd18:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 801fd1c:	b005      	add	sp, #20
 801fd1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd22:	f7f5 bed1 	b.w	8015ac8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>
 801fd26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd2e:	bf94      	ite	ls
 801fd30:	2200      	movls	r2, #0
 801fd32:	2203      	movhi	r2, #3
 801fd34:	e764      	b.n	801fc00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e4>
 801fd36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd3e:	bf94      	ite	ls
 801fd40:	2100      	movls	r1, #0
 801fd42:	2103      	movhi	r1, #3
 801fd44:	e73d      	b.n	801fbc2 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a6>
 801fd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd4a:	bf94      	ite	ls
 801fd4c:	2000      	movls	r0, #0
 801fd4e:	2003      	movhi	r0, #3
 801fd50:	e714      	b.n	801fb7c <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x160>
 801fd52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd5a:	bf94      	ite	ls
 801fd5c:	2201      	movls	r2, #1
 801fd5e:	2200      	movhi	r2, #0
 801fd60:	e74e      	b.n	801fc00 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1e4>
 801fd62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd6a:	bf94      	ite	ls
 801fd6c:	2101      	movls	r1, #1
 801fd6e:	2100      	movhi	r1, #0
 801fd70:	e7b1      	b.n	801fcd6 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x2ba>
 801fd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd76:	bf94      	ite	ls
 801fd78:	2001      	movls	r0, #1
 801fd7a:	2000      	movhi	r0, #0
 801fd7c:	e789      	b.n	801fc92 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x276>
 801fd7e:	4b0a      	ldr	r3, [pc, #40]	@ (801fda8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x38c>)
 801fd80:	4a0a      	ldr	r2, [pc, #40]	@ (801fdac <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x390>)
 801fd82:	217c      	movs	r1, #124	@ 0x7c
 801fd84:	480a      	ldr	r0, [pc, #40]	@ (801fdb0 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x394>)
 801fd86:	f00b ff17 	bl	802bbb8 <__assert_func>
 801fd8a:	4b0a      	ldr	r3, [pc, #40]	@ (801fdb4 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x398>)
 801fd8c:	4a0a      	ldr	r2, [pc, #40]	@ (801fdb8 <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x39c>)
 801fd8e:	f240 21e2 	movw	r1, #738	@ 0x2e2
 801fd92:	480a      	ldr	r0, [pc, #40]	@ (801fdbc <_ZN8touchgfx8LCDGPU2D22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a0>)
 801fd94:	f00b ff10 	bl	802bbb8 <__assert_func>
 801fd98:	08000504 	.word	0x08000504
 801fd9c:	3d800000 	.word	0x3d800000
 801fda0:	2015a070 	.word	0x2015a070
 801fda4:	2015a080 	.word	0x2015a080
 801fda8:	0802eab8 	.word	0x0802eab8
 801fdac:	0802f324 	.word	0x0802f324
 801fdb0:	0802eae0 	.word	0x0802eae0
 801fdb4:	0802e9b0 	.word	0x0802e9b0
 801fdb8:	0802f6c8 	.word	0x0802f6c8
 801fdbc:	0802eb5c 	.word	0x0802eb5c
 801fdc0:	2015a1e4 	.word	0x2015a1e4

0801fdc4 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801fdc4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 801fdc8:	2700      	movs	r7, #0
 801fdca:	4a2b      	ldr	r2, [pc, #172]	@ (801fe78 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb4>)
 801fdcc:	4b2b      	ldr	r3, [pc, #172]	@ (801fe7c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xb8>)
 801fdce:	4d2c      	ldr	r5, [pc, #176]	@ (801fe80 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xbc>)
 801fdd0:	8812      	ldrh	r2, [r2, #0]
 801fdd2:	881b      	ldrh	r3, [r3, #0]
 801fdd4:	b088      	sub	sp, #32
 801fdd6:	4604      	mov	r4, r0
 801fdd8:	6828      	ldr	r0, [r5, #0]
 801fdda:	f8ad 201c 	strh.w	r2, [sp, #28]
 801fdde:	f8ad 301e 	strh.w	r3, [sp, #30]
 801fde2:	9706      	str	r7, [sp, #24]
 801fde4:	6803      	ldr	r3, [r0, #0]
 801fde6:	4689      	mov	r9, r1
 801fde8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fdea:	4798      	blx	r3
 801fdec:	6823      	ldr	r3, [r4, #0]
 801fdee:	4a25      	ldr	r2, [pc, #148]	@ (801fe84 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc0>)
 801fdf0:	68de      	ldr	r6, [r3, #12]
 801fdf2:	4601      	mov	r1, r0
 801fdf4:	4296      	cmp	r6, r2
 801fdf6:	d134      	bne.n	801fe62 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x9e>
 801fdf8:	682a      	ldr	r2, [r5, #0]
 801fdfa:	691d      	ldr	r5, [r3, #16]
 801fdfc:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 801fe00:	b9a3      	cbnz	r3, 801fe2c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x68>
 801fe02:	6890      	ldr	r0, [r2, #8]
 801fe04:	4a20      	ldr	r2, [pc, #128]	@ (801fe88 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 801fe06:	6803      	ldr	r3, [r0, #0]
 801fe08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe0a:	4293      	cmp	r3, r2
 801fe0c:	d116      	bne.n	801fe3c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x78>
 801fe0e:	4b1f      	ldr	r3, [pc, #124]	@ (801fe8c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 801fe10:	7b02      	ldrb	r2, [r0, #12]
 801fe12:	429d      	cmp	r5, r3
 801fe14:	d119      	bne.n	801fe4a <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801fe16:	23ff      	movs	r3, #255	@ 0xff
 801fe18:	f8cd 9000 	str.w	r9, [sp]
 801fe1c:	9301      	str	r3, [sp, #4]
 801fe1e:	4620      	mov	r0, r4
 801fe20:	ab06      	add	r3, sp, #24
 801fe22:	f7ff fa29 	bl	801f278 <_ZN8touchgfx8LCDGPU2D8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb.part.6>
 801fe26:	b008      	add	sp, #32
 801fe28:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801fe2c:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 801fe2e:	2800      	cmp	r0, #0
 801fe30:	d0e7      	beq.n	801fe02 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x3e>
 801fe32:	6803      	ldr	r3, [r0, #0]
 801fe34:	4a14      	ldr	r2, [pc, #80]	@ (801fe88 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc4>)
 801fe36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe38:	4293      	cmp	r3, r2
 801fe3a:	d0e8      	beq.n	801fe0e <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x4a>
 801fe3c:	9105      	str	r1, [sp, #20]
 801fe3e:	4798      	blx	r3
 801fe40:	4b12      	ldr	r3, [pc, #72]	@ (801fe8c <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0xc8>)
 801fe42:	4602      	mov	r2, r0
 801fe44:	429d      	cmp	r5, r3
 801fe46:	9905      	ldr	r1, [sp, #20]
 801fe48:	d0e5      	beq.n	801fe16 <_ZN8touchgfx8LCDGPU2D29copyAreaFromTFTToClientBufferERKNS_4RectE+0x52>
 801fe4a:	2600      	movs	r6, #0
 801fe4c:	23ff      	movs	r3, #255	@ 0xff
 801fe4e:	f8cd 9000 	str.w	r9, [sp]
 801fe52:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801fe56:	4620      	mov	r0, r4
 801fe58:	ab06      	add	r3, sp, #24
 801fe5a:	47a8      	blx	r5
 801fe5c:	b008      	add	sp, #32
 801fe5e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801fe62:	22ff      	movs	r2, #255	@ 0xff
 801fe64:	9701      	str	r7, [sp, #4]
 801fe66:	9200      	str	r2, [sp, #0]
 801fe68:	464b      	mov	r3, r9
 801fe6a:	4620      	mov	r0, r4
 801fe6c:	aa06      	add	r2, sp, #24
 801fe6e:	47b0      	blx	r6
 801fe70:	b008      	add	sp, #32
 801fe72:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 801fe76:	bf00      	nop
 801fe78:	2015a072 	.word	0x2015a072
 801fe7c:	2015a074 	.word	0x2015a074
 801fe80:	2015a078 	.word	0x2015a078
 801fe84:	0801f429 	.word	0x0801f429
 801fe88:	0801c131 	.word	0x0801c131
 801fe8c:	0801f4b5 	.word	0x0801f4b5

0801fe90 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe94:	4604      	mov	r4, r0
 801fe96:	4865      	ldr	r0, [pc, #404]	@ (802002c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 801fe98:	460f      	mov	r7, r1
 801fe9a:	6800      	ldr	r0, [r0, #0]
 801fe9c:	b093      	sub	sp, #76	@ 0x4c
 801fe9e:	f890 1048 	ldrb.w	r1, [r0, #72]	@ 0x48
 801fea2:	2902      	cmp	r1, #2
 801fea4:	f000 81f2 	beq.w	802028c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3fc>
 801fea8:	f10d 0948 	add.w	r9, sp, #72	@ 0x48
 801feac:	f829 3d1c 	strh.w	r3, [r9, #-28]!
 801feb0:	4648      	mov	r0, r9
 801feb2:	4615      	mov	r5, r2
 801feb4:	f7f9 fa44 	bl	8019340 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801feb8:	6823      	ldr	r3, [r4, #0]
 801feba:	4a5d      	ldr	r2, [pc, #372]	@ (8020030 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a0>)
 801febc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801febe:	4680      	mov	r8, r0
 801fec0:	4293      	cmp	r3, r2
 801fec2:	f040 81b5 	bne.w	8020230 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a0>
 801fec6:	7b20      	ldrb	r0, [r4, #12]
 801fec8:	4580      	cmp	r8, r0
 801feca:	f040 81d9 	bne.w	8020280 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3f0>
 801fece:	4648      	mov	r0, r9
 801fed0:	f7f9 f9b2 	bl	8019238 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fed4:	4683      	mov	fp, r0
 801fed6:	2800      	cmp	r0, #0
 801fed8:	f000 81cc 	beq.w	8020274 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3e4>
 801fedc:	6823      	ldr	r3, [r4, #0]
 801fede:	4648      	mov	r0, r9
 801fee0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801fee4:	f7f9 f940 	bl	8019168 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fee8:	9005      	str	r0, [sp, #20]
 801feea:	4648      	mov	r0, r9
 801feec:	f7f9 f970 	bl	80191d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801fef0:	4b50      	ldr	r3, [pc, #320]	@ (8020034 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a4>)
 801fef2:	9006      	str	r0, [sp, #24]
 801fef4:	4598      	cmp	r8, r3
 801fef6:	f040 818e 	bne.w	8020216 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x386>
 801fefa:	4b4c      	ldr	r3, [pc, #304]	@ (802002c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19c>)
 801fefc:	681b      	ldr	r3, [r3, #0]
 801fefe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801ff02:	2b02      	cmp	r3, #2
 801ff04:	f000 81c8 	beq.w	8020298 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x408>
 801ff08:	f9b5 8000 	ldrsh.w	r8, [r5]
 801ff0c:	88ab      	ldrh	r3, [r5, #4]
 801ff0e:	fa1f fe88 	uxth.w	lr, r8
 801ff12:	4473      	add	r3, lr
 801ff14:	b29b      	uxth	r3, r3
 801ff16:	b218      	sxth	r0, r3
 801ff18:	4580      	cmp	r8, r0
 801ff1a:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
 801ff1e:	da2a      	bge.n	801ff76 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 801ff20:	9a05      	ldr	r2, [sp, #20]
 801ff22:	eb0e 0102 	add.w	r1, lr, r2
 801ff26:	b28a      	uxth	r2, r1
 801ff28:	9207      	str	r2, [sp, #28]
 801ff2a:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 801ff2e:	45e0      	cmp	r8, ip
 801ff30:	da21      	bge.n	801ff76 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 801ff32:	88ea      	ldrh	r2, [r5, #6]
 801ff34:	fa1f f68a 	uxth.w	r6, sl
 801ff38:	4432      	add	r2, r6
 801ff3a:	b292      	uxth	r2, r2
 801ff3c:	b211      	sxth	r1, r2
 801ff3e:	458a      	cmp	sl, r1
 801ff40:	9108      	str	r1, [sp, #32]
 801ff42:	da18      	bge.n	801ff76 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 801ff44:	9906      	ldr	r1, [sp, #24]
 801ff46:	eb06 0901 	add.w	r9, r6, r1
 801ff4a:	fa1f f989 	uxth.w	r9, r9
 801ff4e:	fa0f f189 	sxth.w	r1, r9
 801ff52:	458a      	cmp	sl, r1
 801ff54:	9109      	str	r1, [sp, #36]	@ 0x24
 801ff56:	da0e      	bge.n	801ff76 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xe6>
 801ff58:	9907      	ldr	r1, [sp, #28]
 801ff5a:	4560      	cmp	r0, ip
 801ff5c:	bfc8      	it	gt
 801ff5e:	460b      	movgt	r3, r1
 801ff60:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 801ff64:	4281      	cmp	r1, r0
 801ff66:	bfc8      	it	gt
 801ff68:	464a      	movgt	r2, r9
 801ff6a:	eba3 030e 	sub.w	r3, r3, lr
 801ff6e:	1b92      	subs	r2, r2, r6
 801ff70:	b21b      	sxth	r3, r3
 801ff72:	b212      	sxth	r2, r2
 801ff74:	e005      	b.n	801ff82 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf2>
 801ff76:	2200      	movs	r2, #0
 801ff78:	4616      	mov	r6, r2
 801ff7a:	4692      	mov	sl, r2
 801ff7c:	4613      	mov	r3, r2
 801ff7e:	4696      	mov	lr, r2
 801ff80:	4690      	mov	r8, r2
 801ff82:	f9b7 0000 	ldrsh.w	r0, [r7]
 801ff86:	88b9      	ldrh	r1, [r7, #4]
 801ff88:	4401      	add	r1, r0
 801ff8a:	b289      	uxth	r1, r1
 801ff8c:	fa0f f981 	sxth.w	r9, r1
 801ff90:	45c8      	cmp	r8, r9
 801ff92:	da55      	bge.n	8020040 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 801ff94:	449e      	add	lr, r3
 801ff96:	fa1f fe8e 	uxth.w	lr, lr
 801ff9a:	fa0f f38e 	sxth.w	r3, lr
 801ff9e:	4298      	cmp	r0, r3
 801ffa0:	9307      	str	r3, [sp, #28]
 801ffa2:	da4d      	bge.n	8020040 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 801ffa4:	f9b7 c002 	ldrsh.w	ip, [r7, #2]
 801ffa8:	88fb      	ldrh	r3, [r7, #6]
 801ffaa:	4463      	add	r3, ip
 801ffac:	b29b      	uxth	r3, r3
 801ffae:	b21f      	sxth	r7, r3
 801ffb0:	45ba      	cmp	sl, r7
 801ffb2:	da45      	bge.n	8020040 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 801ffb4:	4416      	add	r6, r2
 801ffb6:	b2b2      	uxth	r2, r6
 801ffb8:	b216      	sxth	r6, r2
 801ffba:	45b4      	cmp	ip, r6
 801ffbc:	9608      	str	r6, [sp, #32]
 801ffbe:	da3f      	bge.n	8020040 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b0>
 801ffc0:	4540      	cmp	r0, r8
 801ffc2:	9e07      	ldr	r6, [sp, #28]
 801ffc4:	bfb8      	it	lt
 801ffc6:	4640      	movlt	r0, r8
 801ffc8:	45d4      	cmp	ip, sl
 801ffca:	bfb8      	it	lt
 801ffcc:	46d4      	movlt	ip, sl
 801ffce:	45b1      	cmp	r9, r6
 801ffd0:	bfc8      	it	gt
 801ffd2:	4671      	movgt	r1, lr
 801ffd4:	9e08      	ldr	r6, [sp, #32]
 801ffd6:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 8020038 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1a8>
 801ffda:	42b7      	cmp	r7, r6
 801ffdc:	bfc8      	it	gt
 801ffde:	4613      	movgt	r3, r2
 801ffe0:	f8df e058 	ldr.w	lr, [pc, #88]	@ 802003c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ac>
 801ffe4:	b282      	uxth	r2, r0
 801ffe6:	eba3 030c 	sub.w	r3, r3, ip
 801ffea:	1a8f      	subs	r7, r1, r2
 801ffec:	f8b8 a000 	ldrh.w	sl, [r8]
 801fff0:	f8be 9000 	ldrh.w	r9, [lr]
 801fff4:	b21b      	sxth	r3, r3
 801fff6:	b23f      	sxth	r7, r7
 801fff8:	2800      	cmp	r0, #0
 801fffa:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801fffe:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020002:	f8ad c032 	strh.w	ip, [sp, #50]	@ 0x32
 8020006:	f8ad 7034 	strh.w	r7, [sp, #52]	@ 0x34
 802000a:	fa0f f88a 	sxth.w	r8, sl
 802000e:	fa0f fe89 	sxth.w	lr, r9
 8020012:	f280 8115 	bge.w	8020240 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b0>
 8020016:	2200      	movs	r2, #0
 8020018:	f04f 0600 	mov.w	r6, #0
 802001c:	b20f      	sxth	r7, r1
 802001e:	4610      	mov	r0, r2
 8020020:	4639      	mov	r1, r7
 8020022:	f8ad 7034 	strh.w	r7, [sp, #52]	@ 0x34
 8020026:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 802002a:	e01b      	b.n	8020064 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 802002c:	2015a078 	.word	0x2015a078
 8020030:	0801c131 	.word	0x0801c131
 8020034:	0801f5ed 	.word	0x0801f5ed
 8020038:	2015a06c 	.word	0x2015a06c
 802003c:	2015a06e 	.word	0x2015a06e
 8020040:	2300      	movs	r3, #0
 8020042:	489f      	ldr	r0, [pc, #636]	@ (80202c0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x430>)
 8020044:	499f      	ldr	r1, [pc, #636]	@ (80202c4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x434>)
 8020046:	f8b0 a000 	ldrh.w	sl, [r0]
 802004a:	f8b1 9000 	ldrh.w	r9, [r1]
 802004e:	461a      	mov	r2, r3
 8020050:	469c      	mov	ip, r3
 8020052:	4618      	mov	r0, r3
 8020054:	4619      	mov	r1, r3
 8020056:	461f      	mov	r7, r3
 8020058:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 802005c:	fa0f f88a 	sxth.w	r8, sl
 8020060:	fa0f fe89 	sxth.w	lr, r9
 8020064:	eba8 0000 	sub.w	r0, r8, r0
 8020068:	4288      	cmp	r0, r1
 802006a:	da04      	bge.n	8020076 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1e6>
 802006c:	ebaa 0702 	sub.w	r7, sl, r2
 8020070:	b23f      	sxth	r7, r7
 8020072:	f8ad 7034 	strh.w	r7, [sp, #52]	@ 0x34
 8020076:	f1bc 0f00 	cmp.w	ip, #0
 802007a:	f2c0 80c2 	blt.w	8020202 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x372>
 802007e:	4661      	mov	r1, ip
 8020080:	ebae 0e01 	sub.w	lr, lr, r1
 8020084:	4573      	cmp	r3, lr
 8020086:	dd04      	ble.n	8020092 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x202>
 8020088:	eba9 030c 	sub.w	r3, r9, ip
 802008c:	b21b      	sxth	r3, r3
 802008e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8020092:	2f00      	cmp	r7, #0
 8020094:	f340 80b1 	ble.w	80201fa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 8020098:	2b00      	cmp	r3, #0
 802009a:	f340 80ae 	ble.w	80201fa <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x36a>
 802009e:	f04f 0e00 	mov.w	lr, #0
 80200a2:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 80200a6:	9b05      	ldr	r3, [sp, #20]
 80200a8:	8868      	ldrh	r0, [r5, #2]
 80200aa:	8829      	ldrh	r1, [r5, #0]
 80200ac:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80200b0:	9b06      	ldr	r3, [sp, #24]
 80200b2:	1a52      	subs	r2, r2, r1
 80200b4:	ebac 0c00 	sub.w	ip, ip, r0
 80200b8:	a910      	add	r1, sp, #64	@ 0x40
 80200ba:	a80e      	add	r0, sp, #56	@ 0x38
 80200bc:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
 80200c0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80200c4:	f8ad c03a 	strh.w	ip, [sp, #58]	@ 0x3a
 80200c8:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
 80200cc:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 80200d0:	f7f6 fa72 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80200d4:	a80c      	add	r0, sp, #48	@ 0x30
 80200d6:	f7f6 fa47 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80200da:	a810      	add	r0, sp, #64	@ 0x40
 80200dc:	f7f6 fa44 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80200e0:	4b79      	ldr	r3, [pc, #484]	@ (80202c8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80200e8:	2a00      	cmp	r2, #0
 80200ea:	f040 80a4 	bne.w	8020236 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3a6>
 80200ee:	6898      	ldr	r0, [r3, #8]
 80200f0:	6803      	ldr	r3, [r0, #0]
 80200f2:	4a76      	ldr	r2, [pc, #472]	@ (80202cc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x43c>)
 80200f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80200f6:	4293      	cmp	r3, r2
 80200f8:	f040 80b0 	bne.w	802025c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3cc>
 80200fc:	7b00      	ldrb	r0, [r0, #12]
 80200fe:	2801      	cmp	r0, #1
 8020100:	f000 80a5 	beq.w	802024e <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3be>
 8020104:	f0c0 809e 	bcc.w	8020244 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3b4>
 8020108:	2802      	cmp	r0, #2
 802010a:	f040 80d2 	bne.w	80202b2 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x422>
 802010e:	f04f 0810 	mov.w	r8, #16
 8020112:	f04f 0a04 	mov.w	sl, #4
 8020116:	6823      	ldr	r3, [r4, #0]
 8020118:	4a6d      	ldr	r2, [pc, #436]	@ (80202d0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x440>)
 802011a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802011c:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	@ 0x44
 8020120:	4293      	cmp	r3, r2
 8020122:	fb0a f707 	mul.w	r7, sl, r7
 8020126:	f040 809b 	bne.w	8020260 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d0>
 802012a:	4b6a      	ldr	r3, [pc, #424]	@ (80202d4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x444>)
 802012c:	881b      	ldrh	r3, [r3, #0]
 802012e:	2b00      	cmp	r3, #0
 8020130:	f000 80b8 	beq.w	80202a4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x414>
 8020134:	7b22      	ldrb	r2, [r4, #12]
 8020136:	2a02      	cmp	r2, #2
 8020138:	f000 808e 	beq.w	8020258 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3c8>
 802013c:	2a01      	cmp	r2, #1
 802013e:	bf14      	ite	ne
 8020140:	2402      	movne	r4, #2
 8020142:	2403      	moveq	r4, #3
 8020144:	fb13 f404 	smulbb	r4, r3, r4
 8020148:	b2a4      	uxth	r4, r4
 802014a:	4a5f      	ldr	r2, [pc, #380]	@ (80202c8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x438>)
 802014c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 8020150:	f9bd 903a 	ldrsh.w	r9, [sp, #58]	@ 0x3a
 8020154:	6810      	ldr	r0, [r2, #0]
 8020156:	fb07 3909 	mla	r9, r7, r9, r3
 802015a:	6803      	ldr	r3, [r0, #0]
 802015c:	4e5e      	ldr	r6, [pc, #376]	@ (80202d8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x448>)
 802015e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020160:	4798      	blx	r3
 8020162:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8020166:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	@ 0x30
 802016a:	fb04 f303 	mul.w	r3, r4, r3
 802016e:	fb0a 3505 	mla	r5, sl, r5, r3
 8020172:	4405      	add	r5, r0
 8020174:	6830      	ldr	r0, [r6, #0]
 8020176:	44d9      	add	r9, fp
 8020178:	2800      	cmp	r0, #0
 802017a:	d075      	beq.n	8020268 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 802017c:	f7fb ff68 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8020180:	9700      	str	r7, [sp, #0]
 8020182:	2700      	movs	r7, #0
 8020184:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	@ 0x3e
 8020188:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 802018c:	4648      	mov	r0, r9
 802018e:	4643      	mov	r3, r8
 8020190:	f7f9 fd72 	bl	8019c78 <nema_bind_dst_tex>
 8020194:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8020198:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802019c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80201a0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80201a4:	f7f9 fca8 	bl	8019af8 <nema_set_clip>
 80201a8:	f04f 33ff 	mov.w	r3, #4294967295
 80201ac:	2201      	movs	r2, #1
 80201ae:	2100      	movs	r1, #0
 80201b0:	f240 5004 	movw	r0, #1284	@ 0x504
 80201b4:	f7fb fa80 	bl	801b6b8 <nema_set_blend>
 80201b8:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	@ 0x36
 80201bc:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	@ 0x34
 80201c0:	4643      	mov	r3, r8
 80201c2:	4628      	mov	r0, r5
 80201c4:	9400      	str	r4, [sp, #0]
 80201c6:	9701      	str	r7, [sp, #4]
 80201c8:	f7f9 fcd2 	bl	8019b70 <nema_bind_src_tex>
 80201cc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80201d0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80201d4:	f7f9 fe58 	bl	8019e88 <nema_blit>
 80201d8:	6830      	ldr	r0, [r6, #0]
 80201da:	2800      	cmp	r0, #0
 80201dc:	d044      	beq.n	8020268 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 80201de:	f7fb ff57 	bl	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 80201e2:	6830      	ldr	r0, [r6, #0]
 80201e4:	2800      	cmp	r0, #0
 80201e6:	d03f      	beq.n	8020268 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 80201e8:	6803      	ldr	r3, [r0, #0]
 80201ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80201ec:	4798      	blx	r3
 80201ee:	6830      	ldr	r0, [r6, #0]
 80201f0:	2800      	cmp	r0, #0
 80201f2:	d039      	beq.n	8020268 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x3d8>
 80201f4:	6803      	ldr	r3, [r0, #0]
 80201f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201f8:	4798      	blx	r3
 80201fa:	4658      	mov	r0, fp
 80201fc:	b013      	add	sp, #76	@ 0x4c
 80201fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020202:	2000      	movs	r0, #0
 8020204:	4463      	add	r3, ip
 8020206:	b21b      	sxth	r3, r3
 8020208:	4684      	mov	ip, r0
 802020a:	4601      	mov	r1, r0
 802020c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8020210:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8020214:	e734      	b.n	8020080 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f0>
 8020216:	9b05      	ldr	r3, [sp, #20]
 8020218:	9002      	str	r0, [sp, #8]
 802021a:	e9cd b300 	strd	fp, r3, [sp]
 802021e:	a810      	add	r0, sp, #64	@ 0x40
 8020220:	462b      	mov	r3, r5
 8020222:	463a      	mov	r2, r7
 8020224:	4621      	mov	r1, r4
 8020226:	47c0      	blx	r8
 8020228:	4658      	mov	r0, fp
 802022a:	b013      	add	sp, #76	@ 0x4c
 802022c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020230:	4620      	mov	r0, r4
 8020232:	4798      	blx	r3
 8020234:	e648      	b.n	801fec8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x38>
 8020236:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8020238:	2800      	cmp	r0, #0
 802023a:	f47f af59 	bne.w	80200f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 802023e:	e756      	b.n	80200ee <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 8020240:	4639      	mov	r1, r7
 8020242:	e70f      	b.n	8020064 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d4>
 8020244:	f04f 0804 	mov.w	r8, #4
 8020248:	f04f 0a02 	mov.w	sl, #2
 802024c:	e763      	b.n	8020116 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 802024e:	f04f 0839 	mov.w	r8, #57	@ 0x39
 8020252:	f04f 0a03 	mov.w	sl, #3
 8020256:	e75e      	b.n	8020116 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x286>
 8020258:	2404      	movs	r4, #4
 802025a:	e773      	b.n	8020144 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b4>
 802025c:	4798      	blx	r3
 802025e:	e74e      	b.n	80200fe <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26e>
 8020260:	4620      	mov	r0, r4
 8020262:	4798      	blx	r3
 8020264:	4604      	mov	r4, r0
 8020266:	e770      	b.n	802014a <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ba>
 8020268:	4b1c      	ldr	r3, [pc, #112]	@ (80202dc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x44c>)
 802026a:	4a1d      	ldr	r2, [pc, #116]	@ (80202e0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x450>)
 802026c:	217c      	movs	r1, #124	@ 0x7c
 802026e:	481d      	ldr	r0, [pc, #116]	@ (80202e4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x454>)
 8020270:	f00b fca2 	bl	802bbb8 <__assert_func>
 8020274:	4b1c      	ldr	r3, [pc, #112]	@ (80202e8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x458>)
 8020276:	4a1d      	ldr	r2, [pc, #116]	@ (80202ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8020278:	21f1      	movs	r1, #241	@ 0xf1
 802027a:	481d      	ldr	r0, [pc, #116]	@ (80202f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 802027c:	f00b fc9c 	bl	802bbb8 <__assert_func>
 8020280:	4b1c      	ldr	r3, [pc, #112]	@ (80202f4 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x464>)
 8020282:	4a1a      	ldr	r2, [pc, #104]	@ (80202ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8020284:	21ef      	movs	r1, #239	@ 0xef
 8020286:	481a      	ldr	r0, [pc, #104]	@ (80202f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8020288:	f00b fc96 	bl	802bbb8 <__assert_func>
 802028c:	4b1a      	ldr	r3, [pc, #104]	@ (80202f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 802028e:	4a17      	ldr	r2, [pc, #92]	@ (80202ec <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x45c>)
 8020290:	21ed      	movs	r1, #237	@ 0xed
 8020292:	4817      	ldr	r0, [pc, #92]	@ (80202f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 8020294:	f00b fc90 	bl	802bbb8 <__assert_func>
 8020298:	4b17      	ldr	r3, [pc, #92]	@ (80202f8 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x468>)
 802029a:	4a18      	ldr	r2, [pc, #96]	@ (80202fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 802029c:	21f8      	movs	r1, #248	@ 0xf8
 802029e:	4814      	ldr	r0, [pc, #80]	@ (80202f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80202a0:	f00b fc8a 	bl	802bbb8 <__assert_func>
 80202a4:	4b16      	ldr	r3, [pc, #88]	@ (8020300 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x470>)
 80202a6:	4a17      	ldr	r2, [pc, #92]	@ (8020304 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x474>)
 80202a8:	f240 110f 	movw	r1, #271	@ 0x10f
 80202ac:	4816      	ldr	r0, [pc, #88]	@ (8020308 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x478>)
 80202ae:	f00b fc83 	bl	802bbb8 <__assert_func>
 80202b2:	4b16      	ldr	r3, [pc, #88]	@ (802030c <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x47c>)
 80202b4:	4a11      	ldr	r2, [pc, #68]	@ (80202fc <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x46c>)
 80202b6:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80202ba:	480d      	ldr	r0, [pc, #52]	@ (80202f0 <_ZN8touchgfx8LCDGPU2D29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x460>)
 80202bc:	f00b fc7c 	bl	802bbb8 <__assert_func>
 80202c0:	2015a06c 	.word	0x2015a06c
 80202c4:	2015a06e 	.word	0x2015a06e
 80202c8:	2015a078 	.word	0x2015a078
 80202cc:	0801c131 	.word	0x0801c131
 80202d0:	0801dd11 	.word	0x0801dd11
 80202d4:	2015a072 	.word	0x2015a072
 80202d8:	2015a1e4 	.word	0x2015a1e4
 80202dc:	0802eab8 	.word	0x0802eab8
 80202e0:	0802f324 	.word	0x0802f324
 80202e4:	0802eae0 	.word	0x0802eae0
 80202e8:	0802ef10 	.word	0x0802ef10
 80202ec:	08030490 	.word	0x08030490
 80202f0:	0802eb5c 	.word	0x0802eb5c
 80202f4:	0802eeb8 	.word	0x0802eeb8
 80202f8:	0802ed60 	.word	0x0802ed60
 80202fc:	080303fc 	.word	0x080303fc
 8020300:	0802f094 	.word	0x0802f094
 8020304:	08030858 	.word	0x08030858
 8020308:	0802f0d8 	.word	0x0802f0d8
 802030c:	0802ee64 	.word	0x0802ee64

08020310 <_ZN8touchgfx8LCDGPU2DC1Ev>:
 8020310:	b410      	push	{r4}
 8020312:	240d      	movs	r4, #13
 8020314:	2200      	movs	r2, #0
 8020316:	4904      	ldr	r1, [pc, #16]	@ (8020328 <_ZN8touchgfx8LCDGPU2DC1Ev+0x18>)
 8020318:	7304      	strb	r4, [r0, #12]
 802031a:	e9c0 1200 	strd	r1, r2, [r0]
 802031e:	6082      	str	r2, [r0, #8]
 8020320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020324:	4770      	bx	lr
 8020326:	bf00      	nop
 8020328:	0802f2cc 	.word	0x0802f2cc

0802032c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE>:
 802032c:	2902      	cmp	r1, #2
 802032e:	d906      	bls.n	802033e <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x12>
 8020330:	b508      	push	{r3, lr}
 8020332:	4a04      	ldr	r2, [pc, #16]	@ (8020344 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x18>)
 8020334:	4b04      	ldr	r3, [pc, #16]	@ (8020348 <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x1c>)
 8020336:	212b      	movs	r1, #43	@ 0x2b
 8020338:	4804      	ldr	r0, [pc, #16]	@ (802034c <_ZN8touchgfx8LCDGPU2D20setFrameBufferFormatENS_6Bitmap12BitmapFormatE+0x20>)
 802033a:	f00b fc3d 	bl	802bbb8 <__assert_func>
 802033e:	7301      	strb	r1, [r0, #12]
 8020340:	4770      	bx	lr
 8020342:	bf00      	nop
 8020344:	0802f63c 	.word	0x0802f63c
 8020348:	0802e9f0 	.word	0x0802e9f0
 802034c:	0802eb5c 	.word	0x0802eb5c

08020350 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8020350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020354:	b093      	sub	sp, #76	@ 0x4c
 8020356:	4691      	mov	r9, r2
 8020358:	468a      	mov	sl, r1
 802035a:	8812      	ldrh	r2, [r2, #0]
 802035c:	f89d 1074 	ldrb.w	r1, [sp, #116]	@ 0x74
 8020360:	461c      	mov	r4, r3
 8020362:	910a      	str	r1, [sp, #40]	@ 0x28
 8020364:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020366:	2a00      	cmp	r2, #0
 8020368:	f040 8109 	bne.w	802057e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 802036c:	6820      	ldr	r0, [r4, #0]
 802036e:	6861      	ldr	r1, [r4, #4]
 8020370:	aa0e      	add	r2, sp, #56	@ 0x38
 8020372:	c203      	stmia	r2!, {r0, r1}
 8020374:	6818      	ldr	r0, [r3, #0]
 8020376:	6859      	ldr	r1, [r3, #4]
 8020378:	aa10      	add	r2, sp, #64	@ 0x40
 802037a:	c203      	stmia	r2!, {r0, r1}
 802037c:	a80e      	add	r0, sp, #56	@ 0x38
 802037e:	f7f6 f8f3 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020382:	4621      	mov	r1, r4
 8020384:	a810      	add	r0, sp, #64	@ 0x40
 8020386:	f7f6 f917 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802038a:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	@ 0x40
 802038e:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	@ 0x42
 8020392:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8020396:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 802039a:	487c      	ldr	r0, [pc, #496]	@ (802058c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802039c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80203a0:	4422      	add	r2, r4
 80203a2:	442b      	add	r3, r5
 80203a4:	6800      	ldr	r0, [r0, #0]
 80203a6:	fb11 4105 	smlabb	r1, r1, r5, r4
 80203aa:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80203ae:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80203b2:	6802      	ldr	r2, [r0, #0]
 80203b4:	4d76      	ldr	r5, [pc, #472]	@ (8020590 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80203b6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80203ba:	448a      	add	sl, r1
 80203bc:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80203c0:	42ab      	cmp	r3, r5
 80203c2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80203c4:	f9bd 4046 	ldrsh.w	r4, [sp, #70]	@ 0x46
 80203c8:	f040 80a6 	bne.w	8020518 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 80203cc:	6841      	ldr	r1, [r0, #4]
 80203ce:	4d71      	ldr	r5, [pc, #452]	@ (8020594 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 80203d0:	680b      	ldr	r3, [r1, #0]
 80203d2:	699b      	ldr	r3, [r3, #24]
 80203d4:	42ab      	cmp	r3, r5
 80203d6:	f040 80c4 	bne.w	8020562 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 80203da:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80203dc:	4798      	blx	r3
 80203de:	4b6e      	ldr	r3, [pc, #440]	@ (8020598 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80203e0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80203e4:	881b      	ldrh	r3, [r3, #0]
 80203e6:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80203ea:	fb03 f404 	mul.w	r4, r3, r4
 80203ee:	fb03 1202 	mla	r2, r3, r2, r1
 80203f2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80203f6:	eb00 0244 	add.w	r2, r0, r4, lsl #1
 80203fa:	4290      	cmp	r0, r2
 80203fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80203fe:	f080 8083 	bcs.w	8020508 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 8020402:	f04f 0b04 	mov.w	fp, #4
 8020406:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020408:	0052      	lsls	r2, r2, #1
 802040a:	920d      	str	r2, [sp, #52]	@ 0x34
 802040c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802040e:	eb00 0802 	add.w	r8, r0, r2
 8020412:	4580      	cmp	r8, r0
 8020414:	d96d      	bls.n	80204f2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 8020416:	4684      	mov	ip, r0
 8020418:	f10a 3eff 	add.w	lr, sl, #4294967295
 802041c:	e03e      	b.n	802049c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 802041e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020420:	f3c5 4707 	ubfx	r7, r5, #16, #8
 8020424:	fb02 f303 	mul.w	r3, r2, r3
 8020428:	1c59      	adds	r1, r3, #1
 802042a:	eb01 2323 	add.w	r3, r1, r3, asr #8
 802042e:	121b      	asrs	r3, r3, #8
 8020430:	43da      	mvns	r2, r3
 8020432:	b299      	uxth	r1, r3
 8020434:	b2f6      	uxtb	r6, r6
 8020436:	b2eb      	uxtb	r3, r5
 8020438:	fb17 f701 	smulbb	r7, r7, r1
 802043c:	f8bc 5000 	ldrh.w	r5, [ip]
 8020440:	fb13 f301 	smulbb	r3, r3, r1
 8020444:	fb16 f601 	smulbb	r6, r6, r1
 8020448:	122c      	asrs	r4, r5, #8
 802044a:	10e9      	asrs	r1, r5, #3
 802044c:	00ed      	lsls	r5, r5, #3
 802044e:	b2d2      	uxtb	r2, r2
 8020450:	b2ed      	uxtb	r5, r5
 8020452:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8020456:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802045a:	fb04 7402 	mla	r4, r4, r2, r7
 802045e:	fb01 6102 	mla	r1, r1, r2, r6
 8020462:	fb05 3202 	mla	r2, r5, r2, r3
 8020466:	b2a4      	uxth	r4, r4
 8020468:	b292      	uxth	r2, r2
 802046a:	b289      	uxth	r1, r1
 802046c:	1c55      	adds	r5, r2, #1
 802046e:	1c67      	adds	r7, r4, #1
 8020470:	1c4b      	adds	r3, r1, #1
 8020472:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8020476:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802047a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802047e:	f404 4278 	and.w	r2, r4, #63488	@ 0xf800
 8020482:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020486:	095b      	lsrs	r3, r3, #5
 8020488:	432a      	orrs	r2, r5
 802048a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802048e:	431a      	orrs	r2, r3
 8020490:	f8ac 2000 	strh.w	r2, [ip]
 8020494:	f10c 0c02 	add.w	ip, ip, #2
 8020498:	45e0      	cmp	r8, ip
 802049a:	d91f      	bls.n	80204dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 802049c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 80204a0:	fb1b b303 	smlabb	r3, fp, r3, fp
 80204a4:	f859 5003 	ldr.w	r5, [r9, r3]
 80204a8:	0e2b      	lsrs	r3, r5, #24
 80204aa:	d0f3      	beq.n	8020494 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x144>
 80204ac:	2bff      	cmp	r3, #255	@ 0xff
 80204ae:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80204b2:	d1b4      	bne.n	802041e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80204b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80204b6:	2aff      	cmp	r2, #255	@ 0xff
 80204b8:	d1b1      	bne.n	802041e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80204ba:	096b      	lsrs	r3, r5, #5
 80204bc:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 80204c0:	f026 0607 	bic.w	r6, r6, #7
 80204c4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80204c8:	431e      	orrs	r6, r3
 80204ca:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80204ce:	4335      	orrs	r5, r6
 80204d0:	f8ac 5000 	strh.w	r5, [ip]
 80204d4:	f10c 0c02 	add.w	ip, ip, #2
 80204d8:	45e0      	cmp	r8, ip
 80204da:	d8df      	bhi.n	802049c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x14c>
 80204dc:	43c3      	mvns	r3, r0
 80204de:	4498      	add	r8, r3
 80204e0:	4b2d      	ldr	r3, [pc, #180]	@ (8020598 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 80204e2:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80204e6:	f108 0801 	add.w	r8, r8, #1
 80204ea:	881b      	ldrh	r3, [r3, #0]
 80204ec:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 80204f0:	44c2      	add	sl, r8
 80204f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204f4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80204f8:	1b19      	subs	r1, r3, r4
 80204fa:	1b12      	subs	r2, r2, r4
 80204fc:	4492      	add	sl, r2
 80204fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020500:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020504:	4282      	cmp	r2, r0
 8020506:	d881      	bhi.n	802040c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8020508:	4b20      	ldr	r3, [pc, #128]	@ (802058c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802050a:	6818      	ldr	r0, [r3, #0]
 802050c:	6803      	ldr	r3, [r0, #0]
 802050e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020510:	4798      	blx	r3
 8020512:	b013      	add	sp, #76	@ 0x4c
 8020514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020518:	4798      	blx	r3
 802051a:	4603      	mov	r3, r0
 802051c:	2b01      	cmp	r3, #1
 802051e:	d124      	bne.n	802056a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8020520:	4a1e      	ldr	r2, [pc, #120]	@ (802059c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8020522:	6810      	ldr	r0, [r2, #0]
 8020524:	b328      	cbz	r0, 8020572 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 8020526:	2700      	movs	r7, #0
 8020528:	260b      	movs	r6, #11
 802052a:	4a1b      	ldr	r2, [pc, #108]	@ (8020598 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 802052c:	b2a1      	uxth	r1, r4
 802052e:	8814      	ldrh	r4, [r2, #0]
 8020530:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8020534:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8020538:	e9cd 2101 	strd	r2, r1, [sp, #4]
 802053c:	9406      	str	r4, [sp, #24]
 802053e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020540:	f8bd 4042 	ldrh.w	r4, [sp, #66]	@ 0x42
 8020544:	9305      	str	r3, [sp, #20]
 8020546:	9204      	str	r2, [sp, #16]
 8020548:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802054c:	464a      	mov	r2, r9
 802054e:	4651      	mov	r1, sl
 8020550:	e9cd 6707 	strd	r6, r7, [sp, #28]
 8020554:	9503      	str	r5, [sp, #12]
 8020556:	9400      	str	r4, [sp, #0]
 8020558:	f7fb fda2 	bl	801c0a0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802055c:	b013      	add	sp, #76	@ 0x4c
 802055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020562:	4608      	mov	r0, r1
 8020564:	4798      	blx	r3
 8020566:	4603      	mov	r3, r0
 8020568:	e7d8      	b.n	802051c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 802056a:	4b08      	ldr	r3, [pc, #32]	@ (802058c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 802056c:	6818      	ldr	r0, [r3, #0]
 802056e:	6802      	ldr	r2, [r0, #0]
 8020570:	e733      	b.n	80203da <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8020572:	4b0b      	ldr	r3, [pc, #44]	@ (80205a0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8020574:	4a0b      	ldr	r2, [pc, #44]	@ (80205a4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8020576:	217c      	movs	r1, #124	@ 0x7c
 8020578:	480b      	ldr	r0, [pc, #44]	@ (80205a8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 802057a:	f00b fb1d 	bl	802bbb8 <__assert_func>
 802057e:	4b0b      	ldr	r3, [pc, #44]	@ (80205ac <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8020580:	4a0b      	ldr	r2, [pc, #44]	@ (80205b0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8020582:	f240 4182 	movw	r1, #1154	@ 0x482
 8020586:	480b      	ldr	r0, [pc, #44]	@ (80205b4 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8020588:	f00b fb16 	bl	802bbb8 <__assert_func>
 802058c:	2015a078 	.word	0x2015a078
 8020590:	080126cd 	.word	0x080126cd
 8020594:	080155bb 	.word	0x080155bb
 8020598:	2015a072 	.word	0x2015a072
 802059c:	2015a1e4 	.word	0x2015a1e4
 80205a0:	0802eab8 	.word	0x0802eab8
 80205a4:	0802f324 	.word	0x0802f324
 80205a8:	0802eae0 	.word	0x0802eae0
 80205ac:	0802ebd0 	.word	0x0802ebd0
 80205b0:	0802f954 	.word	0x0802f954
 80205b4:	0802eb5c 	.word	0x0802eb5c

080205b8 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih>:
 80205b8:	b4f0      	push	{r4, r5, r6, r7}
 80205ba:	7b05      	ldrb	r5, [r0, #12]
 80205bc:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80205c0:	3d01      	subs	r5, #1
 80205c2:	2eff      	cmp	r6, #255	@ 0xff
 80205c4:	fa5f fc81 	uxtb.w	ip, r1
 80205c8:	ea4f 2711 	mov.w	r7, r1, lsr #8
 80205cc:	b2ed      	uxtb	r5, r5
 80205ce:	ea4f 4111 	mov.w	r1, r1, lsr #16
 80205d2:	d041      	beq.n	8020658 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0xa0>
 80205d4:	fb16 f603 	smulbb	r6, r6, r3
 80205d8:	b2b6      	uxth	r6, r6
 80205da:	1c74      	adds	r4, r6, #1
 80205dc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80205e0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80205e4:	43e6      	mvns	r6, r4
 80205e6:	b2a4      	uxth	r4, r4
 80205e8:	fb1c fc04 	smulbb	ip, ip, r4
 80205ec:	b2ff      	uxtb	r7, r7
 80205ee:	fb17 f704 	smulbb	r7, r7, r4
 80205f2:	00d0      	lsls	r0, r2, #3
 80205f4:	b2c0      	uxtb	r0, r0
 80205f6:	10d3      	asrs	r3, r2, #3
 80205f8:	b2f6      	uxtb	r6, r6
 80205fa:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80205fe:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8020602:	fb00 c006 	mla	r0, r0, r6, ip
 8020606:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 802060a:	fb03 7306 	mla	r3, r3, r6, r7
 802060e:	b280      	uxth	r0, r0
 8020610:	b29b      	uxth	r3, r3
 8020612:	1c47      	adds	r7, r0, #1
 8020614:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8020618:	f103 0c01 	add.w	ip, r3, #1
 802061c:	2d01      	cmp	r5, #1
 802061e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8020622:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020626:	d926      	bls.n	8020676 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0xbe>
 8020628:	b2c9      	uxtb	r1, r1
 802062a:	fb11 f404 	smulbb	r4, r1, r4
 802062e:	1212      	asrs	r2, r2, #8
 8020630:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8020634:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020638:	fb02 4206 	mla	r2, r2, r6, r4
 802063c:	b292      	uxth	r2, r2
 802063e:	1c50      	adds	r0, r2, #1
 8020640:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020644:	095b      	lsrs	r3, r3, #5
 8020646:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802064a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802064e:	ea40 00d7 	orr.w	r0, r0, r7, lsr #3
 8020652:	4318      	orrs	r0, r3
 8020654:	bcf0      	pop	{r4, r5, r6, r7}
 8020656:	4770      	bx	lr
 8020658:	2bff      	cmp	r3, #255	@ 0xff
 802065a:	d1bb      	bne.n	80205d4 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0x1c>
 802065c:	2d01      	cmp	r5, #1
 802065e:	d910      	bls.n	8020682 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0xca>
 8020660:	4a0a      	ldr	r2, [pc, #40]	@ (802068c <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0xd4>)
 8020662:	00f8      	lsls	r0, r7, #3
 8020664:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8020668:	f400 67fc 	and.w	r7, r0, #2016	@ 0x7e0
 802066c:	ea41 00dc 	orr.w	r0, r1, ip, lsr #3
 8020670:	4338      	orrs	r0, r7
 8020672:	b280      	uxth	r0, r0
 8020674:	e7ee      	b.n	8020654 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0x9c>
 8020676:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802067a:	ea43 0007 	orr.w	r0, r3, r7
 802067e:	bcf0      	pop	{r4, r5, r6, r7}
 8020680:	4770      	bx	lr
 8020682:	ea4c 2007 	orr.w	r0, ip, r7, lsl #8
 8020686:	b280      	uxth	r0, r0
 8020688:	e7e4      	b.n	8020654 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih+0x9c>
 802068a:	bf00      	nop
 802068c:	fffff800 	.word	0xfffff800

08020690 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8020690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020694:	b093      	sub	sp, #76	@ 0x4c
 8020696:	4614      	mov	r4, r2
 8020698:	460d      	mov	r5, r1
 802069a:	7812      	ldrb	r2, [r2, #0]
 802069c:	f89d 1074 	ldrb.w	r1, [sp, #116]	@ 0x74
 80206a0:	461e      	mov	r6, r3
 80206a2:	9002      	str	r0, [sp, #8]
 80206a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80206a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80206a8:	2a00      	cmp	r2, #0
 80206aa:	f040 81c9 	bne.w	8020a40 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3b0>
 80206ae:	6830      	ldr	r0, [r6, #0]
 80206b0:	6871      	ldr	r1, [r6, #4]
 80206b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80206b4:	c203      	stmia	r2!, {r0, r1}
 80206b6:	6818      	ldr	r0, [r3, #0]
 80206b8:	6859      	ldr	r1, [r3, #4]
 80206ba:	aa10      	add	r2, sp, #64	@ 0x40
 80206bc:	c203      	stmia	r2!, {r0, r1}
 80206be:	a80e      	add	r0, sp, #56	@ 0x38
 80206c0:	f7f5 ff52 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80206c4:	4631      	mov	r1, r6
 80206c6:	a810      	add	r0, sp, #64	@ 0x40
 80206c8:	f7f5 ff76 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80206cc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80206d0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80206d4:	f003 0201 	and.w	r2, r3, #1
 80206d8:	4617      	mov	r7, r2
 80206da:	920a      	str	r2, [sp, #40]	@ 0x28
 80206dc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80206e0:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80206e4:	443b      	add	r3, r7
 80206e6:	fb02 1303 	mla	r3, r2, r3, r1
 80206ea:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 80206ee:	4402      	add	r2, r0
 80206f0:	48d0      	ldr	r0, [pc, #832]	@ (8020a34 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3a4>)
 80206f2:	440e      	add	r6, r1
 80206f4:	6800      	ldr	r0, [r0, #0]
 80206f6:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 80206fa:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 80206fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8020702:	eb05 0363 	add.w	r3, r5, r3, asr #1
 8020706:	6802      	ldr	r2, [r0, #0]
 8020708:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	@ 0x44
 802070c:	9304      	str	r3, [sp, #16]
 802070e:	f001 0301 	and.w	r3, r1, #1
 8020712:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8020714:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020716:	9608      	str	r6, [sp, #32]
 8020718:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 802071c:	4790      	blx	r2
 802071e:	4ac6      	ldr	r2, [pc, #792]	@ (8020a38 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3a8>)
 8020720:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8020724:	8812      	ldrh	r2, [r2, #0]
 8020726:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 802072a:	fb05 f502 	mul.w	r5, r5, r2
 802072e:	fb02 1303 	mla	r3, r2, r3, r1
 8020732:	eb00 0843 	add.w	r8, r0, r3, lsl #1
 8020736:	eb08 0345 	add.w	r3, r8, r5, lsl #1
 802073a:	4598      	cmp	r8, r3
 802073c:	930c      	str	r3, [sp, #48]	@ 0x30
 802073e:	f104 0404 	add.w	r4, r4, #4
 8020742:	f080 8144 	bcs.w	80209ce <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x33e>
 8020746:	1e73      	subs	r3, r6, #1
 8020748:	930d      	str	r3, [sp, #52]	@ 0x34
 802074a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802074c:	2b00      	cmp	r3, #0
 802074e:	f000 8164 	beq.w	8020a1a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x38a>
 8020752:	9a04      	ldr	r2, [sp, #16]
 8020754:	7813      	ldrb	r3, [r2, #0]
 8020756:	3201      	adds	r2, #1
 8020758:	f003 030f 	and.w	r3, r3, #15
 802075c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8020760:	9203      	str	r2, [sp, #12]
 8020762:	0e0b      	lsrs	r3, r1, #24
 8020764:	d008      	beq.n	8020778 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xe8>
 8020766:	f8b8 2000 	ldrh.w	r2, [r8]
 802076a:	9802      	ldr	r0, [sp, #8]
 802076c:	9300      	str	r3, [sp, #0]
 802076e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020770:	f7ff ff22 	bl	80205b8 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih>
 8020774:	f8a8 0000 	strh.w	r0, [r8]
 8020778:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802077a:	f108 0802 	add.w	r8, r8, #2
 802077e:	2b01      	cmp	r3, #1
 8020780:	f340 80fd 	ble.w	802097e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ee>
 8020784:	3b02      	subs	r3, #2
 8020786:	9a03      	ldr	r2, [sp, #12]
 8020788:	9306      	str	r3, [sp, #24]
 802078a:	085b      	lsrs	r3, r3, #1
 802078c:	9305      	str	r3, [sp, #20]
 802078e:	eb02 0e03 	add.w	lr, r2, r3
 8020792:	f108 0704 	add.w	r7, r8, #4
 8020796:	f102 3cff 	add.w	ip, r2, #4294967295
 802079a:	f8cd 801c 	str.w	r8, [sp, #28]
 802079e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80207a2:	e0b2      	b.n	802090a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x27a>
 80207a4:	fb05 f50a 	mul.w	r5, r5, sl
 80207a8:	1c6a      	adds	r2, r5, #1
 80207aa:	eb02 2525 	add.w	r5, r2, r5, asr #8
 80207ae:	122d      	asrs	r5, r5, #8
 80207b0:	43ee      	mvns	r6, r5
 80207b2:	b2ad      	uxth	r5, r5
 80207b4:	fa5f fb8b 	uxtb.w	fp, fp
 80207b8:	fb13 f305 	smulbb	r3, r3, r5
 80207bc:	fb1b fb05 	smulbb	fp, fp, r5
 80207c0:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 80207c4:	b2c0      	uxtb	r0, r0
 80207c6:	ea4f 02e8 	mov.w	r2, r8, asr #3
 80207ca:	b2f6      	uxtb	r6, r6
 80207cc:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80207d0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80207d4:	fb00 3306 	mla	r3, r0, r6, r3
 80207d8:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80207dc:	fb02 bb06 	mla	fp, r2, r6, fp
 80207e0:	b29b      	uxth	r3, r3
 80207e2:	fa1f fb8b 	uxth.w	fp, fp
 80207e6:	1c58      	adds	r0, r3, #1
 80207e8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80207ec:	f10b 0201 	add.w	r2, fp, #1
 80207f0:	f1b9 0f01 	cmp.w	r9, #1
 80207f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80207f8:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 80207fc:	f240 8108 	bls.w	8020a10 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x380>
 8020800:	b2c9      	uxtb	r1, r1
 8020802:	fb11 f505 	smulbb	r5, r1, r5
 8020806:	ea4f 2828 	mov.w	r8, r8, asr #8
 802080a:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 802080e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8020812:	fb08 5806 	mla	r8, r8, r6, r5
 8020816:	fa1f f888 	uxth.w	r8, r8
 802081a:	f108 0101 	add.w	r1, r8, #1
 802081e:	eb01 2118 	add.w	r1, r1, r8, lsr #8
 8020822:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020826:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802082a:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802082e:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8020832:	ea43 030b 	orr.w	r3, r3, fp
 8020836:	f827 3c04 	strh.w	r3, [r7, #-4]
 802083a:	f89c 2000 	ldrb.w	r2, [ip]
 802083e:	f002 020f 	and.w	r2, r2, #15
 8020842:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 8020846:	0e1d      	lsrs	r5, r3, #24
 8020848:	d05b      	beq.n	8020902 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x272>
 802084a:	9a02      	ldr	r2, [sp, #8]
 802084c:	2dff      	cmp	r5, #255	@ 0xff
 802084e:	f892 900c 	ldrb.w	r9, [r2, #12]
 8020852:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8020856:	f109 39ff 	add.w	r9, r9, #4294967295
 802085a:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 802085e:	f837 8c02 	ldrh.w	r8, [r7, #-2]
 8020862:	fa5f f989 	uxtb.w	r9, r9
 8020866:	b2db      	uxtb	r3, r3
 8020868:	f000 80b9 	beq.w	80209de <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x34e>
 802086c:	fb05 f50a 	mul.w	r5, r5, sl
 8020870:	1c6a      	adds	r2, r5, #1
 8020872:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8020876:	122d      	asrs	r5, r5, #8
 8020878:	43ee      	mvns	r6, r5
 802087a:	b2ad      	uxth	r5, r5
 802087c:	fa5f fb8b 	uxtb.w	fp, fp
 8020880:	fb13 f305 	smulbb	r3, r3, r5
 8020884:	fb1b fb05 	smulbb	fp, fp, r5
 8020888:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 802088c:	b2c0      	uxtb	r0, r0
 802088e:	ea4f 02e8 	mov.w	r2, r8, asr #3
 8020892:	b2f6      	uxtb	r6, r6
 8020894:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8020898:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802089c:	fb00 3306 	mla	r3, r0, r6, r3
 80208a0:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80208a4:	fb02 bb06 	mla	fp, r2, r6, fp
 80208a8:	b29b      	uxth	r3, r3
 80208aa:	fa1f fb8b 	uxth.w	fp, fp
 80208ae:	1c58      	adds	r0, r3, #1
 80208b0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80208b4:	f10b 0201 	add.w	r2, fp, #1
 80208b8:	f1b9 0f01 	cmp.w	r9, #1
 80208bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80208c0:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 80208c4:	f240 809f 	bls.w	8020a06 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x376>
 80208c8:	b2c9      	uxtb	r1, r1
 80208ca:	fb11 f505 	smulbb	r5, r1, r5
 80208ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 80208d2:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80208d6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80208da:	fb08 5806 	mla	r8, r8, r6, r5
 80208de:	fa1f f888 	uxth.w	r8, r8
 80208e2:	f108 0101 	add.w	r1, r8, #1
 80208e6:	eb01 2118 	add.w	r1, r1, r8, lsr #8
 80208ea:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80208ee:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80208f2:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80208f6:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 80208fa:	ea43 030b 	orr.w	r3, r3, fp
 80208fe:	f827 3c02 	strh.w	r3, [r7, #-2]
 8020902:	45e6      	cmp	lr, ip
 8020904:	f107 0704 	add.w	r7, r7, #4
 8020908:	d02b      	beq.n	8020962 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2d2>
 802090a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 802090e:	0913      	lsrs	r3, r2, #4
 8020910:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020914:	0e1d      	lsrs	r5, r3, #24
 8020916:	d092      	beq.n	802083e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1ae>
 8020918:	9a02      	ldr	r2, [sp, #8]
 802091a:	2dff      	cmp	r5, #255	@ 0xff
 802091c:	f892 900c 	ldrb.w	r9, [r2, #12]
 8020920:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8020924:	f109 39ff 	add.w	r9, r9, #4294967295
 8020928:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 802092c:	f837 8c04 	ldrh.w	r8, [r7, #-4]
 8020930:	fa5f f989 	uxtb.w	r9, r9
 8020934:	b2db      	uxtb	r3, r3
 8020936:	f47f af35 	bne.w	80207a4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x114>
 802093a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802093e:	f47f af31 	bne.w	80207a4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x114>
 8020942:	f1b9 0f01 	cmp.w	r9, #1
 8020946:	d970      	bls.n	8020a2a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x39a>
 8020948:	4a3c      	ldr	r2, [pc, #240]	@ (8020a3c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3ac>)
 802094a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802094e:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8020952:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8020956:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802095a:	ea43 030b 	orr.w	r3, r3, fp
 802095e:	b29b      	uxth	r3, r3
 8020960:	e769      	b.n	8020836 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a6>
 8020962:	9b05      	ldr	r3, [sp, #20]
 8020964:	9903      	ldr	r1, [sp, #12]
 8020966:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802096a:	1c5a      	adds	r2, r3, #1
 802096c:	4411      	add	r1, r2
 802096e:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8020972:	9a06      	ldr	r2, [sp, #24]
 8020974:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 8020978:	9103      	str	r1, [sp, #12]
 802097a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802097e:	2b01      	cmp	r3, #1
 8020980:	d111      	bne.n	80209a6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x316>
 8020982:	9b03      	ldr	r3, [sp, #12]
 8020984:	781b      	ldrb	r3, [r3, #0]
 8020986:	091b      	lsrs	r3, r3, #4
 8020988:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 802098c:	0e0b      	lsrs	r3, r1, #24
 802098e:	d008      	beq.n	80209a2 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x312>
 8020990:	f8b8 2000 	ldrh.w	r2, [r8]
 8020994:	9802      	ldr	r0, [sp, #8]
 8020996:	9300      	str	r3, [sp, #0]
 8020998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802099a:	f7ff fe0d 	bl	80205b8 <_ZN8touchgfx8LCDGPU2D24blendPixelARGB8888_16BPPEmtih>
 802099e:	f8a8 0000 	strh.w	r0, [r8]
 80209a2:	f108 0802 	add.w	r8, r8, #2
 80209a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80209a8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80209ac:	4a22      	ldr	r2, [pc, #136]	@ (8020a38 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3a8>)
 80209ae:	440b      	add	r3, r1
 80209b0:	8812      	ldrh	r2, [r2, #0]
 80209b2:	9908      	ldr	r1, [sp, #32]
 80209b4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80209b8:	1a52      	subs	r2, r2, r1
 80209ba:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 80209be:	9a04      	ldr	r2, [sp, #16]
 80209c0:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80209c4:	9304      	str	r3, [sp, #16]
 80209c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80209c8:	4543      	cmp	r3, r8
 80209ca:	f63f aebe 	bhi.w	802074a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xba>
 80209ce:	4b19      	ldr	r3, [pc, #100]	@ (8020a34 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3a4>)
 80209d0:	6818      	ldr	r0, [r3, #0]
 80209d2:	6803      	ldr	r3, [r0, #0]
 80209d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80209d6:	4798      	blx	r3
 80209d8:	b013      	add	sp, #76	@ 0x4c
 80209da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209de:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80209e2:	f47f af43 	bne.w	802086c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1dc>
 80209e6:	f1b9 0f01 	cmp.w	r9, #1
 80209ea:	d91a      	bls.n	8020a22 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x392>
 80209ec:	4a13      	ldr	r2, [pc, #76]	@ (8020a3c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3ac>)
 80209ee:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80209f2:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80209f6:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 80209fa:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80209fe:	ea43 030b 	orr.w	r3, r3, fp
 8020a02:	b29b      	uxth	r3, r3
 8020a04:	e77b      	b.n	80208fe <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x26e>
 8020a06:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020a0a:	ea4b 0303 	orr.w	r3, fp, r3
 8020a0e:	e776      	b.n	80208fe <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x26e>
 8020a10:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8020a14:	ea4b 0303 	orr.w	r3, fp, r3
 8020a18:	e70d      	b.n	8020836 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a6>
 8020a1a:	9b04      	ldr	r3, [sp, #16]
 8020a1c:	9303      	str	r3, [sp, #12]
 8020a1e:	9b08      	ldr	r3, [sp, #32]
 8020a20:	e6ad      	b.n	802077e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xee>
 8020a22:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 8020a26:	b29b      	uxth	r3, r3
 8020a28:	e769      	b.n	80208fe <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x26e>
 8020a2a:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 8020a2e:	b29b      	uxth	r3, r3
 8020a30:	e701      	b.n	8020836 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a6>
 8020a32:	bf00      	nop
 8020a34:	2015a078 	.word	0x2015a078
 8020a38:	2015a072 	.word	0x2015a072
 8020a3c:	fffff800 	.word	0xfffff800
 8020a40:	4b03      	ldr	r3, [pc, #12]	@ (8020a50 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c0>)
 8020a42:	4a04      	ldr	r2, [pc, #16]	@ (8020a54 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c4>)
 8020a44:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8020a48:	4803      	ldr	r0, [pc, #12]	@ (8020a58 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c8>)
 8020a4a:	f00b f8b5 	bl	802bbb8 <__assert_func>
 8020a4e:	bf00      	nop
 8020a50:	0802ec50 	.word	0x0802ec50
 8020a54:	0802fe40 	.word	0x0802fe40
 8020a58:	0802eb5c 	.word	0x0802eb5c

08020a5c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8020a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a60:	b08f      	sub	sp, #60	@ 0x3c
 8020a62:	9206      	str	r2, [sp, #24]
 8020a64:	461c      	mov	r4, r3
 8020a66:	7812      	ldrb	r2, [r2, #0]
 8020a68:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8020a6c:	e9cd 1000 	strd	r1, r0, [sp]
 8020a70:	9305      	str	r3, [sp, #20]
 8020a72:	2a00      	cmp	r2, #0
 8020a74:	f040 81ad 	bne.w	8020dd2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x376>
 8020a78:	b913      	cbnz	r3, 8020a80 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x24>
 8020a7a:	b00f      	add	sp, #60	@ 0x3c
 8020a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a80:	6820      	ldr	r0, [r4, #0]
 8020a82:	6861      	ldr	r1, [r4, #4]
 8020a84:	ab0a      	add	r3, sp, #40	@ 0x28
 8020a86:	c303      	stmia	r3!, {r0, r1}
 8020a88:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020a8a:	6818      	ldr	r0, [r3, #0]
 8020a8c:	6859      	ldr	r1, [r3, #4]
 8020a8e:	ab0c      	add	r3, sp, #48	@ 0x30
 8020a90:	c303      	stmia	r3!, {r0, r1}
 8020a92:	a80a      	add	r0, sp, #40	@ 0x28
 8020a94:	f7f5 fd68 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a98:	4621      	mov	r1, r4
 8020a9a:	a80c      	add	r0, sp, #48	@ 0x30
 8020a9c:	f7f5 fd8c 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020aa0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020aa8:	dd71      	ble.n	8020b8e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x132>
 8020aaa:	2201      	movs	r2, #1
 8020aac:	b299      	uxth	r1, r3
 8020aae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8020ab2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020ab6:	fb93 f6f2 	sdiv	r6, r3, r2
 8020aba:	b2b5      	uxth	r5, r6
 8020abc:	fb02 3415 	mls	r4, r2, r5, r3
 8020ac0:	fb14 0101 	smlabb	r1, r4, r1, r0
 8020ac4:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	@ 0x2e
 8020ac8:	fa1f fb81 	uxth.w	fp, r1
 8020acc:	4414      	add	r4, r2
 8020ace:	3c01      	subs	r4, #1
 8020ad0:	fb94 f4f2 	sdiv	r4, r4, r2
 8020ad4:	b135      	cbz	r5, 8020ae4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x88>
 8020ad6:	9a06      	ldr	r2, [sp, #24]
 8020ad8:	9900      	ldr	r1, [sp, #0]
 8020ada:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8020ade:	ba12      	rev	r2, r2
 8020ae0:	4411      	add	r1, r2
 8020ae2:	9100      	str	r1, [sp, #0]
 8020ae4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8020ae8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	@ 0x2a
 8020aec:	4402      	add	r2, r0
 8020aee:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020af2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8020af6:	440b      	add	r3, r1
 8020af8:	4616      	mov	r6, r2
 8020afa:	49b9      	ldr	r1, [pc, #740]	@ (8020de0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x384>)
 8020afc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020b00:	6808      	ldr	r0, [r1, #0]
 8020b02:	9209      	str	r2, [sp, #36]	@ 0x24
 8020b04:	6803      	ldr	r3, [r0, #0]
 8020b06:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8020b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020b0c:	4798      	blx	r3
 8020b0e:	f1bb 0f00 	cmp.w	fp, #0
 8020b12:	bf0c      	ite	eq
 8020b14:	4633      	moveq	r3, r6
 8020b16:	2300      	movne	r3, #0
 8020b18:	49b2      	ldr	r1, [pc, #712]	@ (8020de4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x388>)
 8020b1a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020b1e:	8809      	ldrh	r1, [r1, #0]
 8020b20:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	@ 0x30
 8020b24:	fb01 f505 	mul.w	r5, r1, r5
 8020b28:	fb01 6202 	mla	r2, r1, r2, r6
 8020b2c:	b2a4      	uxth	r4, r4
 8020b2e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020b32:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8020b36:	00a4      	lsls	r4, r4, #2
 8020b38:	1d21      	adds	r1, r4, #4
 8020b3a:	4290      	cmp	r0, r2
 8020b3c:	9202      	str	r2, [sp, #8]
 8020b3e:	9108      	str	r1, [sp, #32]
 8020b40:	fa1f fa83 	uxth.w	sl, r3
 8020b44:	d21b      	bcs.n	8020b7e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x122>
 8020b46:	2300      	movs	r3, #0
 8020b48:	465e      	mov	r6, fp
 8020b4a:	461d      	mov	r5, r3
 8020b4c:	9303      	str	r3, [sp, #12]
 8020b4e:	b965      	cbnz	r5, 8020b6a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x10e>
 8020b50:	9900      	ldr	r1, [sp, #0]
 8020b52:	780b      	ldrb	r3, [r1, #0]
 8020b54:	099d      	lsrs	r5, r3, #6
 8020b56:	1e6a      	subs	r2, r5, #1
 8020b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020b5c:	2a02      	cmp	r2, #2
 8020b5e:	9303      	str	r3, [sp, #12]
 8020b60:	f200 80ce 	bhi.w	8020d00 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>
 8020b64:	3101      	adds	r1, #1
 8020b66:	9100      	str	r1, [sp, #0]
 8020b68:	b2ad      	uxth	r5, r5
 8020b6a:	b1b6      	cbz	r6, 8020b9a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x13e>
 8020b6c:	42b5      	cmp	r5, r6
 8020b6e:	f080 80c1 	bcs.w	8020cf4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8020b72:	1b75      	subs	r5, r6, r5
 8020b74:	b2ae      	uxth	r6, r5
 8020b76:	2500      	movs	r5, #0
 8020b78:	9b02      	ldr	r3, [sp, #8]
 8020b7a:	4283      	cmp	r3, r0
 8020b7c:	d8e7      	bhi.n	8020b4e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xf2>
 8020b7e:	4b98      	ldr	r3, [pc, #608]	@ (8020de0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x384>)
 8020b80:	6818      	ldr	r0, [r3, #0]
 8020b82:	6803      	ldr	r3, [r0, #0]
 8020b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b86:	4798      	blx	r3
 8020b88:	b00f      	add	sp, #60	@ 0x3c
 8020b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b8e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020b92:	b299      	uxth	r1, r3
 8020b94:	fb94 f2f1 	sdiv	r2, r4, r1
 8020b98:	e789      	b.n	8020aae <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x52>
 8020b9a:	2304      	movs	r3, #4
 8020b9c:	4619      	mov	r1, r3
 8020b9e:	9a08      	ldr	r2, [sp, #32]
 8020ba0:	9b03      	ldr	r3, [sp, #12]
 8020ba2:	4555      	cmp	r5, sl
 8020ba4:	fb11 2303 	smlabb	r3, r1, r3, r2
 8020ba8:	9a06      	ldr	r2, [sp, #24]
 8020baa:	58d1      	ldr	r1, [r2, r3]
 8020bac:	ea4f 6211 	mov.w	r2, r1, lsr #24
 8020bb0:	f0c0 8099 	bcc.w	8020ce6 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x28a>
 8020bb4:	eba5 030a 	sub.w	r3, r5, sl
 8020bb8:	b29b      	uxth	r3, r3
 8020bba:	9304      	str	r3, [sp, #16]
 8020bbc:	4653      	mov	r3, sl
 8020bbe:	9607      	str	r6, [sp, #28]
 8020bc0:	2a00      	cmp	r2, #0
 8020bc2:	f000 808d 	beq.w	8020ce0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>
 8020bc6:	2aff      	cmp	r2, #255	@ 0xff
 8020bc8:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 8020bcc:	ea4f 2911 	mov.w	r9, r1, lsr #8
 8020bd0:	fa5f f881 	uxtb.w	r8, r1
 8020bd4:	d103      	bne.n	8020bde <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x182>
 8020bd6:	9905      	ldr	r1, [sp, #20]
 8020bd8:	29ff      	cmp	r1, #255	@ 0xff
 8020bda:	f000 8096 	beq.w	8020d0a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ae>
 8020bde:	9905      	ldr	r1, [sp, #20]
 8020be0:	fa5f fb8b 	uxtb.w	fp, fp
 8020be4:	fb01 f202 	mul.w	r2, r1, r2
 8020be8:	1c51      	adds	r1, r2, #1
 8020bea:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8020bee:	1212      	asrs	r2, r2, #8
 8020bf0:	ea6f 0c02 	mvn.w	ip, r2
 8020bf4:	fa5f f989 	uxtb.w	r9, r9
 8020bf8:	fa5f fc8c 	uxtb.w	ip, ip
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d04d      	beq.n	8020c9c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 8020c00:	b292      	uxth	r2, r2
 8020c02:	fb1b fb02 	smulbb	fp, fp, r2
 8020c06:	fb19 f902 	smulbb	r9, r9, r2
 8020c0a:	fb18 f802 	smulbb	r8, r8, r2
 8020c0e:	f103 3eff 	add.w	lr, r3, #4294967295
 8020c12:	fa1f fe8e 	uxth.w	lr, lr
 8020c16:	f10e 0e01 	add.w	lr, lr, #1
 8020c1a:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8020c1e:	fa1f fb8b 	uxth.w	fp, fp
 8020c22:	fa1f f989 	uxth.w	r9, r9
 8020c26:	fa1f f888 	uxth.w	r8, r8
 8020c2a:	fa1f fc8c 	uxth.w	ip, ip
 8020c2e:	f830 1b02 	ldrh.w	r1, [r0], #2
 8020c32:	9b01      	ldr	r3, [sp, #4]
 8020c34:	00ca      	lsls	r2, r1, #3
 8020c36:	7b1f      	ldrb	r7, [r3, #12]
 8020c38:	b2d2      	uxtb	r2, r2
 8020c3a:	10cb      	asrs	r3, r1, #3
 8020c3c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020c40:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8020c44:	fb02 820c 	mla	r2, r2, ip, r8
 8020c48:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8020c4c:	fb03 930c 	mla	r3, r3, ip, r9
 8020c50:	b292      	uxth	r2, r2
 8020c52:	1c54      	adds	r4, r2, #1
 8020c54:	b29b      	uxth	r3, r3
 8020c56:	3f01      	subs	r7, #1
 8020c58:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8020c5c:	2f01      	cmp	r7, #1
 8020c5e:	f103 0401 	add.w	r4, r3, #1
 8020c62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020c66:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020c6a:	d92d      	bls.n	8020cc8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x26c>
 8020c6c:	1209      	asrs	r1, r1, #8
 8020c6e:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8020c72:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020c76:	fb01 b10c 	mla	r1, r1, ip, fp
 8020c7a:	b289      	uxth	r1, r1
 8020c7c:	1c4c      	adds	r4, r1, #1
 8020c7e:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8020c82:	095b      	lsrs	r3, r3, #5
 8020c84:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8020c88:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8020c8c:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
 8020c90:	431a      	orrs	r2, r3
 8020c92:	4586      	cmp	lr, r0
 8020c94:	f820 2c02 	strh.w	r2, [r0, #-2]
 8020c98:	d1c9      	bne.n	8020c2e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8020c9a:	4670      	mov	r0, lr
 8020c9c:	4555      	cmp	r5, sl
 8020c9e:	d31b      	bcc.n	8020cd8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x27c>
 8020ca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ca2:	f8bd 602c 	ldrh.w	r6, [sp, #44]	@ 0x2c
 8020ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8020de4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x388>)
 8020ca8:	fa1f fa82 	uxth.w	sl, r2
 8020cac:	eba6 060a 	sub.w	r6, r6, sl
 8020cb0:	881b      	ldrh	r3, [r3, #0]
 8020cb2:	b2b6      	uxth	r6, r6
 8020cb4:	2e00      	cmp	r6, #0
 8020cb6:	eba3 0302 	sub.w	r3, r3, r2
 8020cba:	9d04      	ldr	r5, [sp, #16]
 8020cbc:	bf18      	it	ne
 8020cbe:	f04f 0a00 	movne.w	sl, #0
 8020cc2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020cc6:	e757      	b.n	8020b78 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x11c>
 8020cc8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020ccc:	431a      	orrs	r2, r3
 8020cce:	4586      	cmp	lr, r0
 8020cd0:	f820 2c02 	strh.w	r2, [r0, #-2]
 8020cd4:	d1ab      	bne.n	8020c2e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8020cd6:	e7e0      	b.n	8020c9a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x23e>
 8020cd8:	9d04      	ldr	r5, [sp, #16]
 8020cda:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020cde:	e74b      	b.n	8020b78 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x11c>
 8020ce0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020ce4:	e7da      	b.n	8020c9c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 8020ce6:	ebaa 0405 	sub.w	r4, sl, r5
 8020cea:	b2a4      	uxth	r4, r4
 8020cec:	462b      	mov	r3, r5
 8020cee:	9604      	str	r6, [sp, #16]
 8020cf0:	9407      	str	r4, [sp, #28]
 8020cf2:	e765      	b.n	8020bc0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x164>
 8020cf4:	1bad      	subs	r5, r5, r6
 8020cf6:	b2ad      	uxth	r5, r5
 8020cf8:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 8020cfc:	2600      	movs	r6, #0
 8020cfe:	e73b      	b.n	8020b78 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x11c>
 8020d00:	460b      	mov	r3, r1
 8020d02:	3302      	adds	r3, #2
 8020d04:	784d      	ldrb	r5, [r1, #1]
 8020d06:	9300      	str	r3, [sp, #0]
 8020d08:	e72f      	b.n	8020b6a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x10e>
 8020d0a:	9a01      	ldr	r2, [sp, #4]
 8020d0c:	7b12      	ldrb	r2, [r2, #12]
 8020d0e:	3a01      	subs	r2, #1
 8020d10:	2a01      	cmp	r2, #1
 8020d12:	d954      	bls.n	8020dbe <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x362>
 8020d14:	4a34      	ldr	r2, [pc, #208]	@ (8020de8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x38c>)
 8020d16:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020d1a:	ea02 2b0b 	and.w	fp, r2, fp, lsl #8
 8020d1e:	ea4b 08d8 	orr.w	r8, fp, r8, lsr #3
 8020d22:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8020d26:	ea48 0809 	orr.w	r8, r8, r9
 8020d2a:	fa1f fe88 	uxth.w	lr, r8
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	d0b4      	beq.n	8020c9c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 8020d32:	1e5a      	subs	r2, r3, #1
 8020d34:	fa1f fb82 	uxth.w	fp, r2
 8020d38:	f1bb 0f04 	cmp.w	fp, #4
 8020d3c:	f3c0 0140 	ubfx	r1, r0, #1, #1
 8020d40:	d945      	bls.n	8020dce <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x372>
 8020d42:	2900      	cmp	r1, #0
 8020d44:	d040      	beq.n	8020dc8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x36c>
 8020d46:	46d8      	mov	r8, fp
 8020d48:	f8a0 e000 	strh.w	lr, [r0]
 8020d4c:	f100 0902 	add.w	r9, r0, #2
 8020d50:	2700      	movs	r7, #0
 8020d52:	1a5b      	subs	r3, r3, r1
 8020d54:	463a      	mov	r2, r7
 8020d56:	fa1f fc83 	uxth.w	ip, r3
 8020d5a:	f36e 070f 	bfi	r7, lr, #0, #16
 8020d5e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020d62:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8020d66:	f36e 471f 	bfi	r7, lr, #16, #16
 8020d6a:	3201      	adds	r2, #1
 8020d6c:	b294      	uxth	r4, r2
 8020d6e:	42a3      	cmp	r3, r4
 8020d70:	f841 7b04 	str.w	r7, [r1], #4
 8020d74:	d8f9      	bhi.n	8020d6a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x30e>
 8020d76:	f02c 0201 	bic.w	r2, ip, #1
 8020d7a:	b292      	uxth	r2, r2
 8020d7c:	eba8 0302 	sub.w	r3, r8, r2
 8020d80:	4562      	cmp	r2, ip
 8020d82:	b29b      	uxth	r3, r3
 8020d84:	eb09 0142 	add.w	r1, r9, r2, lsl #1
 8020d88:	d014      	beq.n	8020db4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 8020d8a:	1e5a      	subs	r2, r3, #1
 8020d8c:	b292      	uxth	r2, r2
 8020d8e:	f8a1 e000 	strh.w	lr, [r1]
 8020d92:	b17a      	cbz	r2, 8020db4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 8020d94:	1e9a      	subs	r2, r3, #2
 8020d96:	b292      	uxth	r2, r2
 8020d98:	f8a1 e002 	strh.w	lr, [r1, #2]
 8020d9c:	b152      	cbz	r2, 8020db4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 8020d9e:	1eda      	subs	r2, r3, #3
 8020da0:	b292      	uxth	r2, r2
 8020da2:	f8a1 e004 	strh.w	lr, [r1, #4]
 8020da6:	b12a      	cbz	r2, 8020db4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 8020da8:	2b04      	cmp	r3, #4
 8020daa:	f8a1 e006 	strh.w	lr, [r1, #6]
 8020dae:	d001      	beq.n	8020db4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 8020db0:	f8a1 e008 	strh.w	lr, [r1, #8]
 8020db4:	f10b 0b01 	add.w	fp, fp, #1
 8020db8:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 8020dbc:	e76e      	b.n	8020c9c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 8020dbe:	ea48 2809 	orr.w	r8, r8, r9, lsl #8
 8020dc2:	fa1f fe88 	uxth.w	lr, r8
 8020dc6:	e7b2      	b.n	8020d2e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2d2>
 8020dc8:	4681      	mov	r9, r0
 8020dca:	4698      	mov	r8, r3
 8020dcc:	e7c0      	b.n	8020d50 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2f4>
 8020dce:	4601      	mov	r1, r0
 8020dd0:	e7dc      	b.n	8020d8c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x330>
 8020dd2:	4b06      	ldr	r3, [pc, #24]	@ (8020dec <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x390>)
 8020dd4:	4a06      	ldr	r2, [pc, #24]	@ (8020df0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x394>)
 8020dd6:	f44f 61aa 	mov.w	r1, #1360	@ 0x550
 8020dda:	4806      	ldr	r0, [pc, #24]	@ (8020df4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x398>)
 8020ddc:	f00a feec 	bl	802bbb8 <__assert_func>
 8020de0:	2015a078 	.word	0x2015a078
 8020de4:	2015a072 	.word	0x2015a072
 8020de8:	fffff800 	.word	0xfffff800
 8020dec:	0802ec50 	.word	0x0802ec50
 8020df0:	0803024c 	.word	0x0803024c
 8020df4:	0802eb5c 	.word	0x0802eb5c

08020df8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8020df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dfc:	b09f      	sub	sp, #124	@ 0x7c
 8020dfe:	9201      	str	r2, [sp, #4]
 8020e00:	461c      	mov	r4, r3
 8020e02:	7812      	ldrb	r2, [r2, #0]
 8020e04:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020e08:	9116      	str	r1, [sp, #88]	@ 0x58
 8020e0a:	9305      	str	r3, [sp, #20]
 8020e0c:	2a00      	cmp	r2, #0
 8020e0e:	f040 823c 	bne.w	802128a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x492>
 8020e12:	b913      	cbnz	r3, 8020e1a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8020e14:	b01f      	add	sp, #124	@ 0x7c
 8020e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e1a:	6861      	ldr	r1, [r4, #4]
 8020e1c:	4683      	mov	fp, r0
 8020e1e:	6820      	ldr	r0, [r4, #0]
 8020e20:	ab1a      	add	r3, sp, #104	@ 0x68
 8020e22:	c303      	stmia	r3!, {r0, r1}
 8020e24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020e26:	6818      	ldr	r0, [r3, #0]
 8020e28:	6859      	ldr	r1, [r3, #4]
 8020e2a:	ab1c      	add	r3, sp, #112	@ 0x70
 8020e2c:	c303      	stmia	r3!, {r0, r1}
 8020e2e:	a81a      	add	r0, sp, #104	@ 0x68
 8020e30:	f7f5 fb9a 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e34:	4621      	mov	r1, r4
 8020e36:	a81c      	add	r0, sp, #112	@ 0x70
 8020e38:	f7f5 fbbe 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e3c:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	@ 0x6c
 8020e40:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8020e44:	f340 8152 	ble.w	80210ec <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x2f4>
 8020e48:	2301      	movs	r3, #1
 8020e4a:	b289      	uxth	r1, r1
 8020e4c:	9318      	str	r3, [sp, #96]	@ 0x60
 8020e4e:	f9bd 0072 	ldrsh.w	r0, [sp, #114]	@ 0x72
 8020e52:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	@ 0x6e
 8020e56:	fb90 f4f3 	sdiv	r4, r0, r3
 8020e5a:	441a      	add	r2, r3
 8020e5c:	3a01      	subs	r2, #1
 8020e5e:	fb92 f2f3 	sdiv	r2, r2, r3
 8020e62:	b2a4      	uxth	r4, r4
 8020e64:	fb03 0314 	mls	r3, r3, r4, r0
 8020e68:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020e6a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8020e6e:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 8020e72:	fb13 4101 	smlabb	r1, r3, r1, r4
 8020e76:	f8bd 506a 	ldrh.w	r5, [sp, #106]	@ 0x6a
 8020e7a:	4bbb      	ldr	r3, [pc, #748]	@ (8021168 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x370>)
 8020e7c:	4434      	add	r4, r6
 8020e7e:	4405      	add	r5, r0
 8020e80:	6818      	ldr	r0, [r3, #0]
 8020e82:	f8ad 4070 	strh.w	r4, [sp, #112]	@ 0x70
 8020e86:	f8ad 5072 	strh.w	r5, [sp, #114]	@ 0x72
 8020e8a:	f9bd 6074 	ldrsh.w	r6, [sp, #116]	@ 0x74
 8020e8e:	6803      	ldr	r3, [r0, #0]
 8020e90:	3201      	adds	r2, #1
 8020e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020e94:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020e96:	fa1f fa81 	uxth.w	sl, r1
 8020e9a:	b294      	uxth	r4, r2
 8020e9c:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	@ 0x76
 8020ea0:	4798      	blx	r3
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	f1ba 0f00 	cmp.w	sl, #0
 8020ea8:	bf0c      	ite	eq
 8020eaa:	4632      	moveq	r2, r6
 8020eac:	2200      	movne	r2, #0
 8020eae:	49af      	ldr	r1, [pc, #700]	@ (802116c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x374>)
 8020eb0:	9315      	str	r3, [sp, #84]	@ 0x54
 8020eb2:	8809      	ldrh	r1, [r1, #0]
 8020eb4:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	@ 0x72
 8020eb8:	f9bd 6070 	ldrsh.w	r6, [sp, #112]	@ 0x70
 8020ebc:	fb01 f505 	mul.w	r5, r1, r5
 8020ec0:	fb01 6303 	mla	r3, r1, r3, r6
 8020ec4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020ec8:	9300      	str	r3, [sp, #0]
 8020eca:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8020ece:	9307      	str	r3, [sp, #28]
 8020ed0:	b293      	uxth	r3, r2
 8020ed2:	9302      	str	r3, [sp, #8]
 8020ed4:	f10b 030e 	add.w	r3, fp, #14
 8020ed8:	9319      	str	r3, [sp, #100]	@ 0x64
 8020eda:	465b      	mov	r3, fp
 8020edc:	46d3      	mov	fp, sl
 8020ede:	469a      	mov	sl, r3
 8020ee0:	00a4      	lsls	r4, r4, #2
 8020ee2:	1d21      	adds	r1, r4, #4
 8020ee4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020ee6:	9b07      	ldr	r3, [sp, #28]
 8020ee8:	9a00      	ldr	r2, [sp, #0]
 8020eea:	4293      	cmp	r3, r2
 8020eec:	f240 8134 	bls.w	8021158 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x360>
 8020ef0:	2601      	movs	r6, #1
 8020ef2:	2700      	movs	r7, #0
 8020ef4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020ef6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020ef8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8020efc:	fa11 f482 	uxtah	r4, r1, r2
 8020f00:	00a4      	lsls	r4, r4, #2
 8020f02:	9a01      	ldr	r2, [sp, #4]
 8020f04:	3404      	adds	r4, #4
 8020f06:	1911      	adds	r1, r2, r4
 8020f08:	788a      	ldrb	r2, [r1, #2]
 8020f0a:	784d      	ldrb	r5, [r1, #1]
 8020f0c:	0212      	lsls	r2, r2, #8
 8020f0e:	78c9      	ldrb	r1, [r1, #3]
 8020f10:	ea42 4005 	orr.w	r0, r2, r5, lsl #16
 8020f14:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8020f16:	4308      	orrs	r0, r1
 8020f18:	4629      	mov	r1, r5
 8020f1a:	fbbb f3f3 	udiv	r3, fp, r3
 8020f1e:	46bc      	mov	ip, r7
 8020f20:	46b1      	mov	r9, r6
 8020f22:	4401      	add	r1, r0
 8020f24:	784a      	ldrb	r2, [r1, #1]
 8020f26:	5c28      	ldrb	r0, [r5, r0]
 8020f28:	0212      	lsls	r2, r2, #8
 8020f2a:	9d01      	ldr	r5, [sp, #4]
 8020f2c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020f30:	4302      	orrs	r2, r0
 8020f32:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8020f34:	5d2c      	ldrb	r4, [r5, r4]
 8020f36:	f88a 200d 	strb.w	r2, [sl, #13]
 8020f3a:	b292      	uxth	r2, r2
 8020f3c:	1ac3      	subs	r3, r0, r3
 8020f3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020f40:	198a      	adds	r2, r1, r6
 8020f42:	9203      	str	r2, [sp, #12]
 8020f44:	b29b      	uxth	r3, r3
 8020f46:	19a2      	adds	r2, r4, r6
 8020f48:	9712      	str	r7, [sp, #72]	@ 0x48
 8020f4a:	960a      	str	r6, [sp, #40]	@ 0x28
 8020f4c:	940e      	str	r4, [sp, #56]	@ 0x38
 8020f4e:	9206      	str	r2, [sp, #24]
 8020f50:	9314      	str	r3, [sp, #80]	@ 0x50
 8020f52:	9604      	str	r6, [sp, #16]
 8020f54:	f1bb 0f00 	cmp.w	fp, #0
 8020f58:	d037      	beq.n	8020fca <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8020f5a:	45d9      	cmp	r9, fp
 8020f5c:	f080 80ce 	bcs.w	80210fc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x304>
 8020f60:	ebab 0b09 	sub.w	fp, fp, r9
 8020f64:	fa1f fb8b 	uxth.w	fp, fp
 8020f68:	9b07      	ldr	r3, [sp, #28]
 8020f6a:	9a00      	ldr	r2, [sp, #0]
 8020f6c:	4293      	cmp	r3, r2
 8020f6e:	f240 80f3 	bls.w	8021158 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x360>
 8020f72:	9803      	ldr	r0, [sp, #12]
 8020f74:	9c04      	ldr	r4, [sp, #16]
 8020f76:	7842      	ldrb	r2, [r0, #1]
 8020f78:	f1c4 0107 	rsb	r1, r4, #7
 8020f7c:	7803      	ldrb	r3, [r0, #0]
 8020f7e:	408a      	lsls	r2, r1
 8020f80:	0052      	lsls	r2, r2, #1
 8020f82:	4123      	asrs	r3, r4
 8020f84:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8020f88:	1c61      	adds	r1, r4, #1
 8020f8a:	b2db      	uxtb	r3, r3
 8020f8c:	4313      	orrs	r3, r2
 8020f8e:	b2ca      	uxtb	r2, r1
 8020f90:	4611      	mov	r1, r2
 8020f92:	2908      	cmp	r1, #8
 8020f94:	9204      	str	r2, [sp, #16]
 8020f96:	b29a      	uxth	r2, r3
 8020f98:	f000 811a 	beq.w	80211d0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3d8>
 8020f9c:	3001      	adds	r0, #1
 8020f9e:	9003      	str	r0, [sp, #12]
 8020fa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020fa2:	4291      	cmp	r1, r2
 8020fa4:	f0c0 80e6 	bcc.w	8021174 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x37c>
 8020fa8:	f04f 0901 	mov.w	r9, #1
 8020fac:	b2db      	uxtb	r3, r3
 8020fae:	f88a 300d 	strb.w	r3, [sl, #13]
 8020fb2:	9906      	ldr	r1, [sp, #24]
 8020fb4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8020fb8:	f0c0 8132 	bcc.w	8021220 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x428>
 8020fbc:	e9cd 2909 	strd	r2, r9, [sp, #36]	@ 0x24
 8020fc0:	f04f 0c00 	mov.w	ip, #0
 8020fc4:	f1bb 0f00 	cmp.w	fp, #0
 8020fc8:	d1c7      	bne.n	8020f5a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x162>
 8020fca:	9b02      	ldr	r3, [sp, #8]
 8020fcc:	4599      	cmp	r9, r3
 8020fce:	461a      	mov	r2, r3
 8020fd0:	f0c0 80f0 	bcc.w	80211b4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3bc>
 8020fd4:	eba9 0303 	sub.w	r3, r9, r3
 8020fd8:	b29b      	uxth	r3, r3
 8020fda:	930c      	str	r3, [sp, #48]	@ 0x30
 8020fdc:	2a00      	cmp	r2, #0
 8020fde:	f000 80fd 	beq.w	80211dc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3e4>
 8020fe2:	4613      	mov	r3, r2
 8020fe4:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8020fe8:	9208      	str	r2, [sp, #32]
 8020fea:	4463      	add	r3, ip
 8020fec:	b29b      	uxth	r3, r3
 8020fee:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 8020ff2:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8020ff6:	f8dd e000 	ldr.w	lr, [sp]
 8020ffa:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ffc:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 8021000:	469b      	mov	fp, r3
 8021002:	e048      	b.n	8021096 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x29e>
 8021004:	9905      	ldr	r1, [sp, #20]
 8021006:	f8be 5000 	ldrh.w	r5, [lr]
 802100a:	fb01 f202 	mul.w	r2, r1, r2
 802100e:	1c50      	adds	r0, r2, #1
 8021010:	eb00 2022 	add.w	r0, r0, r2, asr #8
 8021014:	1200      	asrs	r0, r0, #8
 8021016:	43c4      	mvns	r4, r0
 8021018:	b280      	uxth	r0, r0
 802101a:	b2ff      	uxtb	r7, r7
 802101c:	fb13 f300 	smulbb	r3, r3, r0
 8021020:	fb17 f700 	smulbb	r7, r7, r0
 8021024:	00e9      	lsls	r1, r5, #3
 8021026:	b2c9      	uxtb	r1, r1
 8021028:	10ea      	asrs	r2, r5, #3
 802102a:	b2e4      	uxtb	r4, r4
 802102c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021030:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8021034:	fb01 3304 	mla	r3, r1, r4, r3
 8021038:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 802103c:	fb02 7704 	mla	r7, r2, r4, r7
 8021040:	b29b      	uxth	r3, r3
 8021042:	b2bf      	uxth	r7, r7
 8021044:	1c59      	adds	r1, r3, #1
 8021046:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802104a:	1c7a      	adds	r2, r7, #1
 802104c:	2e01      	cmp	r6, #1
 802104e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021052:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021056:	d966      	bls.n	8021126 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x32e>
 8021058:	fa5f f888 	uxtb.w	r8, r8
 802105c:	fb18 f800 	smulbb	r8, r8, r0
 8021060:	122d      	asrs	r5, r5, #8
 8021062:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021066:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802106a:	fb05 8804 	mla	r8, r5, r4, r8
 802106e:	fa1f f888 	uxth.w	r8, r8
 8021072:	f108 0101 	add.w	r1, r8, #1
 8021076:	eb01 2118 	add.w	r1, r1, r8, lsr #8
 802107a:	097f      	lsrs	r7, r7, #5
 802107c:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8021080:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8021084:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8021088:	433b      	orrs	r3, r7
 802108a:	f8ae 3000 	strh.w	r3, [lr]
 802108e:	45dc      	cmp	ip, fp
 8021090:	f10e 0e02 	add.w	lr, lr, #2
 8021094:	d04b      	beq.n	802112e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x336>
 8021096:	2204      	movs	r2, #4
 8021098:	eb0a 030c 	add.w	r3, sl, ip
 802109c:	7b5b      	ldrb	r3, [r3, #13]
 802109e:	f10c 0c01 	add.w	ip, ip, #1
 80210a2:	fb12 9303 	smlabb	r3, r2, r3, r9
 80210a6:	9a01      	ldr	r2, [sp, #4]
 80210a8:	fa1f fc8c 	uxth.w	ip, ip
 80210ac:	58d3      	ldr	r3, [r2, r3]
 80210ae:	0e1a      	lsrs	r2, r3, #24
 80210b0:	d0ed      	beq.n	802108e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x296>
 80210b2:	f89a 600c 	ldrb.w	r6, [sl, #12]
 80210b6:	2aff      	cmp	r2, #255	@ 0xff
 80210b8:	f106 36ff 	add.w	r6, r6, #4294967295
 80210bc:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80210c0:	ea4f 2713 	mov.w	r7, r3, lsr #8
 80210c4:	b2f6      	uxtb	r6, r6
 80210c6:	b2db      	uxtb	r3, r3
 80210c8:	d19c      	bne.n	8021004 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 80210ca:	9905      	ldr	r1, [sp, #20]
 80210cc:	29ff      	cmp	r1, #255	@ 0xff
 80210ce:	d199      	bne.n	8021004 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 80210d0:	2e01      	cmp	r6, #1
 80210d2:	f240 80c4 	bls.w	802125e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x466>
 80210d6:	4a26      	ldr	r2, [pc, #152]	@ (8021170 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x378>)
 80210d8:	00ff      	lsls	r7, r7, #3
 80210da:	ea02 2808 	and.w	r8, r2, r8, lsl #8
 80210de:	ea48 03d3 	orr.w	r3, r8, r3, lsr #3
 80210e2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80210e6:	433b      	orrs	r3, r7
 80210e8:	b29b      	uxth	r3, r3
 80210ea:	e7ce      	b.n	802108a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x292>
 80210ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80210f0:	b289      	uxth	r1, r1
 80210f2:	fb93 f3f1 	sdiv	r3, r3, r1
 80210f6:	b29a      	uxth	r2, r3
 80210f8:	9218      	str	r2, [sp, #96]	@ 0x60
 80210fa:	e6a8      	b.n	8020e4e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x56>
 80210fc:	eba9 090b 	sub.w	r9, r9, fp
 8021100:	44dc      	add	ip, fp
 8021102:	f04f 0b00 	mov.w	fp, #0
 8021106:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 802110a:	fa1f f989 	uxth.w	r9, r9
 802110e:	fa1f fc8c 	uxth.w	ip, ip
 8021112:	9302      	str	r3, [sp, #8]
 8021114:	9b07      	ldr	r3, [sp, #28]
 8021116:	9a00      	ldr	r2, [sp, #0]
 8021118:	4293      	cmp	r3, r2
 802111a:	d91d      	bls.n	8021158 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x360>
 802111c:	f1b9 0f00 	cmp.w	r9, #0
 8021120:	f47f af18 	bne.w	8020f54 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 8021124:	e725      	b.n	8020f72 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 8021126:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802112a:	433b      	orrs	r3, r7
 802112c:	e7ad      	b.n	802108a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x292>
 802112e:	9b08      	ldr	r3, [sp, #32]
 8021130:	9a00      	ldr	r2, [sp, #0]
 8021132:	3b01      	subs	r3, #1
 8021134:	b29b      	uxth	r3, r3
 8021136:	3301      	adds	r3, #1
 8021138:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802113c:	9300      	str	r3, [sp, #0]
 802113e:	9b02      	ldr	r3, [sp, #8]
 8021140:	e9dd 9b0f 	ldrd	r9, fp, [sp, #60]	@ 0x3c
 8021144:	4599      	cmp	r9, r3
 8021146:	d24b      	bcs.n	80211e0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x3e8>
 8021148:	e9dd 9c0c 	ldrd	r9, ip, [sp, #48]	@ 0x30
 802114c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802114e:	9a00      	ldr	r2, [sp, #0]
 8021150:	9302      	str	r3, [sp, #8]
 8021152:	9b07      	ldr	r3, [sp, #28]
 8021154:	4293      	cmp	r3, r2
 8021156:	d8e1      	bhi.n	802111c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x324>
 8021158:	4b03      	ldr	r3, [pc, #12]	@ (8021168 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x370>)
 802115a:	6818      	ldr	r0, [r3, #0]
 802115c:	6803      	ldr	r3, [r0, #0]
 802115e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021160:	4798      	blx	r3
 8021162:	b01f      	add	sp, #124	@ 0x7c
 8021164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021168:	2015a078 	.word	0x2015a078
 802116c:	2015a072 	.word	0x2015a072
 8021170:	fffff800 	.word	0xfffff800
 8021174:	9b06      	ldr	r3, [sp, #24]
 8021176:	429a      	cmp	r2, r3
 8021178:	d355      	bcc.n	8021226 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x42e>
 802117a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802117c:	f89a 100d 	ldrb.w	r1, [sl, #13]
 8021180:	eb0a 0300 	add.w	r3, sl, r0
 8021184:	7359      	strb	r1, [r3, #13]
 8021186:	f89a 300d 	ldrb.w	r3, [sl, #13]
 802118a:	1c41      	adds	r1, r0, #1
 802118c:	fa1f f981 	uxth.w	r9, r1
 8021190:	9c06      	ldr	r4, [sp, #24]
 8021192:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021194:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
 8021198:	3401      	adds	r4, #1
 802119a:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 802119e:	b2a3      	uxth	r3, r4
 80211a0:	f8a0 5050 	strh.w	r5, [r0, #80]	@ 0x50
 80211a4:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 80211a8:	9306      	str	r3, [sp, #24]
 80211aa:	e9cd 2909 	strd	r2, r9, [sp, #36]	@ 0x24
 80211ae:	f04f 0c00 	mov.w	ip, #0
 80211b2:	e6cf      	b.n	8020f54 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 80211b4:	eba3 0309 	sub.w	r3, r3, r9
 80211b8:	b29b      	uxth	r3, r3
 80211ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80211bc:	f1b9 0f00 	cmp.w	r9, #0
 80211c0:	f43f aed2 	beq.w	8020f68 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x170>
 80211c4:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80211c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80211cc:	464b      	mov	r3, r9
 80211ce:	e70c      	b.n	8020fea <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 80211d0:	2100      	movs	r1, #0
 80211d2:	9104      	str	r1, [sp, #16]
 80211d4:	9903      	ldr	r1, [sp, #12]
 80211d6:	3102      	adds	r1, #2
 80211d8:	9103      	str	r1, [sp, #12]
 80211da:	e6e1      	b.n	8020fa0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80211dc:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 80211e0:	4b2d      	ldr	r3, [pc, #180]	@ (8021298 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x4a0>)
 80211e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80211e4:	881b      	ldrh	r3, [r3, #0]
 80211e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80211e8:	1a5b      	subs	r3, r3, r1
 80211ea:	9900      	ldr	r1, [sp, #0]
 80211ec:	3201      	adds	r2, #1
 80211ee:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80211f2:	9300      	str	r3, [sp, #0]
 80211f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80211f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80211f8:	429a      	cmp	r2, r3
 80211fa:	d034      	beq.n	8021266 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x46e>
 80211fc:	e9dd 9c0c 	ldrd	r9, ip, [sp, #48]	@ 0x30
 8021200:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8021204:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 8021208:	ebab 0b03 	sub.w	fp, fp, r3
 802120c:	fa1f fb8b 	uxth.w	fp, fp
 8021210:	f1bb 0f00 	cmp.w	fp, #0
 8021214:	bf14      	ite	ne
 8021216:	2300      	movne	r3, #0
 8021218:	f04f 0b00 	moveq.w	fp, #0
 802121c:	9302      	str	r3, [sp, #8]
 802121e:	e779      	b.n	8021114 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x31c>
 8021220:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021222:	3101      	adds	r1, #1
 8021224:	e7b4      	b.n	8021190 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x398>
 8021226:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
 802122a:	f893 904f 	ldrb.w	r9, [r3, #79]	@ 0x4f
 802122e:	4613      	mov	r3, r2
 8021230:	f1b9 0f01 	cmp.w	r9, #1
 8021234:	d90d      	bls.n	8021252 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x45a>
 8021236:	f109 010d 	add.w	r1, r9, #13
 802123a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802123c:	4451      	add	r1, sl
 802123e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8021242:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8021246:	f801 0d01 	strb.w	r0, [r1, #-1]!
 802124a:	428c      	cmp	r4, r1
 802124c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8021250:	d1f5      	bne.n	802123e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x446>
 8021252:	b2db      	uxtb	r3, r3
 8021254:	f88a 300d 	strb.w	r3, [sl, #13]
 8021258:	fa1f f989 	uxth.w	r9, r9
 802125c:	e6a9      	b.n	8020fb2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 802125e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8021262:	b29b      	uxth	r3, r3
 8021264:	e711      	b.n	802108a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x292>
 8021266:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 802126a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	@ 0x68
 802126e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021270:	1a9b      	subs	r3, r3, r2
 8021272:	fa1f fb83 	uxth.w	fp, r3
 8021276:	f1bb 0f00 	cmp.w	fp, #0
 802127a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802127c:	bf18      	it	ne
 802127e:	2300      	movne	r3, #0
 8021280:	3101      	adds	r1, #1
 8021282:	b29b      	uxth	r3, r3
 8021284:	9115      	str	r1, [sp, #84]	@ 0x54
 8021286:	9302      	str	r3, [sp, #8]
 8021288:	e62d      	b.n	8020ee6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0xee>
 802128a:	4b04      	ldr	r3, [pc, #16]	@ (802129c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x4a4>)
 802128c:	4a04      	ldr	r2, [pc, #16]	@ (80212a0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x4a8>)
 802128e:	f240 51f3 	movw	r1, #1523	@ 0x5f3
 8021292:	4804      	ldr	r0, [pc, #16]	@ (80212a4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h+0x4ac>)
 8021294:	f00a fc90 	bl	802bbb8 <__assert_func>
 8021298:	2015a072 	.word	0x2015a072
 802129c:	0802ec50 	.word	0x0802ec50
 80212a0:	08030518 	.word	0x08030518
 80212a4:	0802eb5c 	.word	0x0802eb5c

080212a8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 80212a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212ac:	4691      	mov	r9, r2
 80212ae:	8812      	ldrh	r2, [r2, #0]
 80212b0:	b093      	sub	sp, #76	@ 0x4c
 80212b2:	2a01      	cmp	r2, #1
 80212b4:	f89d 4074 	ldrb.w	r4, [sp, #116]	@ 0x74
 80212b8:	f040 8129 	bne.w	802150e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x266>
 80212bc:	b914      	cbnz	r4, 80212c4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 80212be:	b013      	add	sp, #76	@ 0x4c
 80212c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212c4:	461d      	mov	r5, r3
 80212c6:	468a      	mov	sl, r1
 80212c8:	6818      	ldr	r0, [r3, #0]
 80212ca:	6859      	ldr	r1, [r3, #4]
 80212cc:	ab0e      	add	r3, sp, #56	@ 0x38
 80212ce:	c303      	stmia	r3!, {r0, r1}
 80212d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80212d2:	6818      	ldr	r0, [r3, #0]
 80212d4:	6859      	ldr	r1, [r3, #4]
 80212d6:	ab10      	add	r3, sp, #64	@ 0x40
 80212d8:	c303      	stmia	r3!, {r0, r1}
 80212da:	a80e      	add	r0, sp, #56	@ 0x38
 80212dc:	f7f5 f944 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80212e0:	4629      	mov	r1, r5
 80212e2:	a810      	add	r0, sp, #64	@ 0x40
 80212e4:	f7f5 f968 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80212e8:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	@ 0x40
 80212ec:	f9bd 6042 	ldrsh.w	r6, [sp, #66]	@ 0x42
 80212f0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80212f4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80212f8:	488b      	ldr	r0, [pc, #556]	@ (8021528 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 80212fa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80212fe:	442a      	add	r2, r5
 8021300:	4433      	add	r3, r6
 8021302:	6800      	ldr	r0, [r0, #0]
 8021304:	fb11 5106 	smlabb	r1, r1, r6, r5
 8021308:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 802130c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8021310:	6802      	ldr	r2, [r0, #0]
 8021312:	4e86      	ldr	r6, [pc, #536]	@ (802152c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x284>)
 8021314:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8021318:	448a      	add	sl, r1
 802131a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 802131e:	42b3      	cmp	r3, r6
 8021320:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021322:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8021326:	f040 80c8 	bne.w	80214ba <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x212>
 802132a:	6841      	ldr	r1, [r0, #4]
 802132c:	4e80      	ldr	r6, [pc, #512]	@ (8021530 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>)
 802132e:	680b      	ldr	r3, [r1, #0]
 8021330:	699b      	ldr	r3, [r3, #24]
 8021332:	42b3      	cmp	r3, r6
 8021334:	f040 80e4 	bne.w	8021500 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x258>
 8021338:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 802133a:	4798      	blx	r3
 802133c:	4b7d      	ldr	r3, [pc, #500]	@ (8021534 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802133e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8021342:	881b      	ldrh	r3, [r3, #0]
 8021344:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8021348:	2cff      	cmp	r4, #255	@ 0xff
 802134a:	fb03 1202 	mla	r2, r3, r2, r1
 802134e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021352:	d06f      	beq.n	8021434 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 8021354:	43e2      	mvns	r2, r4
 8021356:	fb05 f503 	mul.w	r5, r5, r3
 802135a:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 802135e:	4288      	cmp	r0, r1
 8021360:	910c      	str	r1, [sp, #48]	@ 0x30
 8021362:	b2d2      	uxtb	r2, r2
 8021364:	d25e      	bcs.n	8021424 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8021366:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021368:	fa1f f884 	uxth.w	r8, r4
 802136c:	0049      	lsls	r1, r1, #1
 802136e:	b292      	uxth	r2, r2
 8021370:	910d      	str	r1, [sp, #52]	@ 0x34
 8021372:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021374:	eb00 0b01 	add.w	fp, r0, r1
 8021378:	4583      	cmp	fp, r0
 802137a:	d948      	bls.n	802140e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x166>
 802137c:	4684      	mov	ip, r0
 802137e:	f10a 3eff 	add.w	lr, sl, #4294967295
 8021382:	2103      	movs	r1, #3
 8021384:	2404      	movs	r4, #4
 8021386:	f81e 6f01 	ldrb.w	r6, [lr, #1]!
 802138a:	f8bc 3000 	ldrh.w	r3, [ip]
 802138e:	fb11 4606 	smlabb	r6, r1, r6, r4
 8021392:	eb09 0106 	add.w	r1, r9, r6
 8021396:	788d      	ldrb	r5, [r1, #2]
 8021398:	784f      	ldrb	r7, [r1, #1]
 802139a:	00dc      	lsls	r4, r3, #3
 802139c:	b2e4      	uxtb	r4, r4
 802139e:	fb14 f402 	smulbb	r4, r4, r2
 80213a2:	fb15 f508 	smulbb	r5, r5, r8
 80213a6:	fb17 f708 	smulbb	r7, r7, r8
 80213aa:	f819 6006 	ldrb.w	r6, [r9, r6]
 80213ae:	1219      	asrs	r1, r3, #8
 80213b0:	10db      	asrs	r3, r3, #3
 80213b2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80213b6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80213ba:	fb06 4608 	mla	r6, r6, r8, r4
 80213be:	fb01 5102 	mla	r1, r1, r2, r5
 80213c2:	fb03 7302 	mla	r3, r3, r2, r7
 80213c6:	b2b6      	uxth	r6, r6
 80213c8:	b29b      	uxth	r3, r3
 80213ca:	b28d      	uxth	r5, r1
 80213cc:	1c5c      	adds	r4, r3, #1
 80213ce:	1c69      	adds	r1, r5, #1
 80213d0:	1c77      	adds	r7, r6, #1
 80213d2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80213d6:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80213da:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80213de:	f401 4378 	and.w	r3, r1, #63488	@ 0xf800
 80213e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80213e6:	0961      	lsrs	r1, r4, #5
 80213e8:	4333      	orrs	r3, r6
 80213ea:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80213ee:	430b      	orrs	r3, r1
 80213f0:	f82c 3b02 	strh.w	r3, [ip], #2
 80213f4:	45e3      	cmp	fp, ip
 80213f6:	d8c4      	bhi.n	8021382 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xda>
 80213f8:	43c3      	mvns	r3, r0
 80213fa:	449b      	add	fp, r3
 80213fc:	4b4d      	ldr	r3, [pc, #308]	@ (8021534 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80213fe:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8021402:	f10b 0b01 	add.w	fp, fp, #1
 8021406:	881b      	ldrh	r3, [r3, #0]
 8021408:	eb00 004b 	add.w	r0, r0, fp, lsl #1
 802140c:	44da      	add	sl, fp
 802140e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8021410:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8021414:	1b5c      	subs	r4, r3, r5
 8021416:	1b49      	subs	r1, r1, r5
 8021418:	448a      	add	sl, r1
 802141a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802141c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8021420:	4281      	cmp	r1, r0
 8021422:	d8a6      	bhi.n	8021372 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xca>
 8021424:	4b40      	ldr	r3, [pc, #256]	@ (8021528 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8021426:	6818      	ldr	r0, [r3, #0]
 8021428:	6803      	ldr	r3, [r0, #0]
 802142a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802142c:	4798      	blx	r3
 802142e:	b013      	add	sp, #76	@ 0x4c
 8021430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021434:	fb05 f503 	mul.w	r5, r5, r3
 8021438:	eb00 0e45 	add.w	lr, r0, r5, lsl #1
 802143c:	4570      	cmp	r0, lr
 802143e:	d2f1      	bcs.n	8021424 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 8021440:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021442:	f04f 0c03 	mov.w	ip, #3
 8021446:	2704      	movs	r7, #4
 8021448:	4693      	mov	fp, r2
 802144a:	0051      	lsls	r1, r2, #1
 802144c:	4e3a      	ldr	r6, [pc, #232]	@ (8021538 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 802144e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021450:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021452:	eb00 0802 	add.w	r8, r0, r2
 8021456:	4580      	cmp	r8, r0
 8021458:	d923      	bls.n	80214a2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 802145a:	4604      	mov	r4, r0
 802145c:	f10a 35ff 	add.w	r5, sl, #4294967295
 8021460:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8021464:	fb1c 7202 	smlabb	r2, ip, r2, r7
 8021468:	eb09 0302 	add.w	r3, r9, r2
 802146c:	7859      	ldrb	r1, [r3, #1]
 802146e:	789b      	ldrb	r3, [r3, #2]
 8021470:	00c9      	lsls	r1, r1, #3
 8021472:	f819 2002 	ldrb.w	r2, [r9, r2]
 8021476:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802147a:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 802147e:	430b      	orrs	r3, r1
 8021480:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021484:	f824 3b02 	strh.w	r3, [r4], #2
 8021488:	45a0      	cmp	r8, r4
 802148a:	d8e9      	bhi.n	8021460 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 802148c:	43c3      	mvns	r3, r0
 802148e:	4498      	add	r8, r3
 8021490:	4b28      	ldr	r3, [pc, #160]	@ (8021534 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8021492:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8021496:	f108 0801 	add.w	r8, r8, #1
 802149a:	881b      	ldrh	r3, [r3, #0]
 802149c:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 80214a0:	44c2      	add	sl, r8
 80214a2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80214a6:	eba3 010b 	sub.w	r1, r3, fp
 80214aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80214ae:	eba2 020b 	sub.w	r2, r2, fp
 80214b2:	4586      	cmp	lr, r0
 80214b4:	4492      	add	sl, r2
 80214b6:	d8cb      	bhi.n	8021450 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80214b8:	e7b4      	b.n	8021424 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17c>
 80214ba:	4798      	blx	r3
 80214bc:	2801      	cmp	r0, #1
 80214be:	d122      	bne.n	8021506 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 80214c0:	4b1e      	ldr	r3, [pc, #120]	@ (802153c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 80214c2:	6818      	ldr	r0, [r3, #0]
 80214c4:	b350      	cbz	r0, 802151c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x274>
 80214c6:	2600      	movs	r6, #0
 80214c8:	270b      	movs	r7, #11
 80214ca:	4b1a      	ldr	r3, [pc, #104]	@ (8021534 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 80214cc:	b2aa      	uxth	r2, r5
 80214ce:	881d      	ldrh	r5, [r3, #0]
 80214d0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80214d4:	9404      	str	r4, [sp, #16]
 80214d6:	9506      	str	r5, [sp, #24]
 80214d8:	f8bd 4042 	ldrh.w	r4, [sp, #66]	@ 0x42
 80214dc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80214e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80214e4:	4651      	mov	r1, sl
 80214e6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80214ea:	464a      	mov	r2, r9
 80214ec:	9608      	str	r6, [sp, #32]
 80214ee:	9605      	str	r6, [sp, #20]
 80214f0:	9707      	str	r7, [sp, #28]
 80214f2:	9503      	str	r5, [sp, #12]
 80214f4:	9400      	str	r4, [sp, #0]
 80214f6:	f7fa fdd3 	bl	801c0a0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80214fa:	b013      	add	sp, #76	@ 0x4c
 80214fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021500:	4608      	mov	r0, r1
 8021502:	4798      	blx	r3
 8021504:	e7da      	b.n	80214bc <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x214>
 8021506:	4b08      	ldr	r3, [pc, #32]	@ (8021528 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x280>)
 8021508:	6818      	ldr	r0, [r3, #0]
 802150a:	6802      	ldr	r2, [r0, #0]
 802150c:	e714      	b.n	8021338 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x90>
 802150e:	4b0c      	ldr	r3, [pc, #48]	@ (8021540 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8021510:	4a0c      	ldr	r2, [pc, #48]	@ (8021544 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 8021512:	f240 61d9 	movw	r1, #1753	@ 0x6d9
 8021516:	480c      	ldr	r0, [pc, #48]	@ (8021548 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a0>)
 8021518:	f00a fb4e 	bl	802bbb8 <__assert_func>
 802151c:	4b0b      	ldr	r3, [pc, #44]	@ (802154c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a4>)
 802151e:	4a0c      	ldr	r2, [pc, #48]	@ (8021550 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2a8>)
 8021520:	217c      	movs	r1, #124	@ 0x7c
 8021522:	480c      	ldr	r0, [pc, #48]	@ (8021554 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8021524:	f00a fb48 	bl	802bbb8 <__assert_func>
 8021528:	2015a078 	.word	0x2015a078
 802152c:	080126cd 	.word	0x080126cd
 8021530:	080155bb 	.word	0x080155bb
 8021534:	2015a072 	.word	0x2015a072
 8021538:	fffff800 	.word	0xfffff800
 802153c:	2015a1e4 	.word	0x2015a1e4
 8021540:	0802eb80 	.word	0x0802eb80
 8021544:	0802f7bc 	.word	0x0802f7bc
 8021548:	0802eb5c 	.word	0x0802eb5c
 802154c:	0802eab8 	.word	0x0802eab8
 8021550:	0802f324 	.word	0x0802f324
 8021554:	0802eae0 	.word	0x0802eae0

08021558 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8021558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802155c:	4693      	mov	fp, r2
 802155e:	7812      	ldrb	r2, [r2, #0]
 8021560:	b08d      	sub	sp, #52	@ 0x34
 8021562:	2a01      	cmp	r2, #1
 8021564:	f89d 705c 	ldrb.w	r7, [sp, #92]	@ 0x5c
 8021568:	f040 8252 	bne.w	8021a10 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4b8>
 802156c:	b917      	cbnz	r7, 8021574 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1c>
 802156e:	b00d      	add	sp, #52	@ 0x34
 8021570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021574:	461e      	mov	r6, r3
 8021576:	6818      	ldr	r0, [r3, #0]
 8021578:	460c      	mov	r4, r1
 802157a:	6859      	ldr	r1, [r3, #4]
 802157c:	ab08      	add	r3, sp, #32
 802157e:	c303      	stmia	r3!, {r0, r1}
 8021580:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021582:	f10b 0b04 	add.w	fp, fp, #4
 8021586:	6818      	ldr	r0, [r3, #0]
 8021588:	6859      	ldr	r1, [r3, #4]
 802158a:	ab0a      	add	r3, sp, #40	@ 0x28
 802158c:	c303      	stmia	r3!, {r0, r1}
 802158e:	a808      	add	r0, sp, #32
 8021590:	f7f4 ffea 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021594:	4631      	mov	r1, r6
 8021596:	a80a      	add	r0, sp, #40	@ 0x28
 8021598:	f7f5 f80e 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802159c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80215a0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80215a4:	f003 0201 	and.w	r2, r3, #1
 80215a8:	4615      	mov	r5, r2
 80215aa:	9204      	str	r2, [sp, #16]
 80215ac:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80215b0:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 80215b4:	442b      	add	r3, r5
 80215b6:	fb02 1303 	mla	r3, r2, r3, r1
 80215ba:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80215be:	4402      	add	r2, r0
 80215c0:	48b9      	ldr	r0, [pc, #740]	@ (80218a8 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x350>)
 80215c2:	440e      	add	r6, r1
 80215c4:	6800      	ldr	r0, [r0, #0]
 80215c6:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80215ca:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 80215ce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80215d2:	eb04 0363 	add.w	r3, r4, r3, asr #1
 80215d6:	6802      	ldr	r2, [r0, #0]
 80215d8:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	@ 0x2c
 80215dc:	9301      	str	r3, [sp, #4]
 80215de:	f001 0301 	and.w	r3, r1, #1
 80215e2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80215e4:	9303      	str	r3, [sp, #12]
 80215e6:	9502      	str	r5, [sp, #8]
 80215e8:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	@ 0x2e
 80215ec:	4790      	blx	r2
 80215ee:	4baf      	ldr	r3, [pc, #700]	@ (80218ac <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x354>)
 80215f0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80215f4:	881b      	ldrh	r3, [r3, #0]
 80215f6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80215fa:	2fff      	cmp	r7, #255	@ 0xff
 80215fc:	fb03 1202 	mla	r2, r3, r2, r1
 8021600:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 8021604:	f000 8154 	beq.w	80218b0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x358>
 8021608:	ea6f 0c07 	mvn.w	ip, r7
 802160c:	fb03 f404 	mul.w	r4, r3, r4
 8021610:	eb0a 0344 	add.w	r3, sl, r4, lsl #1
 8021614:	459a      	cmp	sl, r3
 8021616:	9306      	str	r3, [sp, #24]
 8021618:	fa5f fc8c 	uxtb.w	ip, ip
 802161c:	f080 80b6 	bcs.w	802178c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x234>
 8021620:	1e6b      	subs	r3, r5, #1
 8021622:	b2bf      	uxth	r7, r7
 8021624:	fa1f fc8c 	uxth.w	ip, ip
 8021628:	9307      	str	r3, [sp, #28]
 802162a:	9b03      	ldr	r3, [sp, #12]
 802162c:	2b00      	cmp	r3, #0
 802162e:	f040 80fc 	bne.w	802182a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2d2>
 8021632:	9b01      	ldr	r3, [sp, #4]
 8021634:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8021638:	9300      	str	r3, [sp, #0]
 802163a:	f1b9 0f01 	cmp.w	r9, #1
 802163e:	f340 808e 	ble.w	802175e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x206>
 8021642:	f1a9 0302 	sub.w	r3, r9, #2
 8021646:	ea4f 0953 	mov.w	r9, r3, lsr #1
 802164a:	9305      	str	r3, [sp, #20]
 802164c:	9b00      	ldr	r3, [sp, #0]
 802164e:	f10a 0808 	add.w	r8, sl, #8
 8021652:	eb08 0889 	add.w	r8, r8, r9, lsl #2
 8021656:	f10a 0604 	add.w	r6, sl, #4
 802165a:	f103 3eff 	add.w	lr, r3, #4294967295
 802165e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8021662:	f836 3c04 	ldrh.w	r3, [r6, #-4]
 8021666:	0909      	lsrs	r1, r1, #4
 8021668:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802166c:	eb0b 0001 	add.w	r0, fp, r1
 8021670:	7882      	ldrb	r2, [r0, #2]
 8021672:	7844      	ldrb	r4, [r0, #1]
 8021674:	00dd      	lsls	r5, r3, #3
 8021676:	b2ed      	uxtb	r5, r5
 8021678:	fb12 f207 	smulbb	r2, r2, r7
 802167c:	fb15 f50c 	smulbb	r5, r5, ip
 8021680:	fb14 f407 	smulbb	r4, r4, r7
 8021684:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8021688:	1218      	asrs	r0, r3, #8
 802168a:	10db      	asrs	r3, r3, #3
 802168c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8021690:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8021694:	fb00 200c 	mla	r0, r0, ip, r2
 8021698:	fb01 5507 	mla	r5, r1, r7, r5
 802169c:	fb03 440c 	mla	r4, r3, ip, r4
 80216a0:	b281      	uxth	r1, r0
 80216a2:	b2ad      	uxth	r5, r5
 80216a4:	b2a4      	uxth	r4, r4
 80216a6:	1c68      	adds	r0, r5, #1
 80216a8:	1c4b      	adds	r3, r1, #1
 80216aa:	1c62      	adds	r2, r4, #1
 80216ac:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80216b0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80216b4:	eb00 2115 	add.w	r1, r0, r5, lsr #8
 80216b8:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80216bc:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80216c0:	0952      	lsrs	r2, r2, #5
 80216c2:	430b      	orrs	r3, r1
 80216c4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80216c8:	4313      	orrs	r3, r2
 80216ca:	f826 3c04 	strh.w	r3, [r6, #-4]
 80216ce:	f89e 1000 	ldrb.w	r1, [lr]
 80216d2:	f836 3c02 	ldrh.w	r3, [r6, #-2]
 80216d6:	f001 010f 	and.w	r1, r1, #15
 80216da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80216de:	eb0b 0001 	add.w	r0, fp, r1
 80216e2:	7882      	ldrb	r2, [r0, #2]
 80216e4:	00dd      	lsls	r5, r3, #3
 80216e6:	7840      	ldrb	r0, [r0, #1]
 80216e8:	b2ed      	uxtb	r5, r5
 80216ea:	fb12 f207 	smulbb	r2, r2, r7
 80216ee:	fb10 f007 	smulbb	r0, r0, r7
 80216f2:	fb15 f50c 	smulbb	r5, r5, ip
 80216f6:	f81b 1001 	ldrb.w	r1, [fp, r1]
 80216fa:	121c      	asrs	r4, r3, #8
 80216fc:	10db      	asrs	r3, r3, #3
 80216fe:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8021702:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8021706:	fb04 240c 	mla	r4, r4, ip, r2
 802170a:	fb01 5507 	mla	r5, r1, r7, r5
 802170e:	fb03 020c 	mla	r2, r3, ip, r0
 8021712:	b2a1      	uxth	r1, r4
 8021714:	b2ad      	uxth	r5, r5
 8021716:	b290      	uxth	r0, r2
 8021718:	1c4b      	adds	r3, r1, #1
 802171a:	1c6c      	adds	r4, r5, #1
 802171c:	1c42      	adds	r2, r0, #1
 802171e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021722:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021726:	eb04 2115 	add.w	r1, r4, r5, lsr #8
 802172a:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802172e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8021732:	0952      	lsrs	r2, r2, #5
 8021734:	430b      	orrs	r3, r1
 8021736:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802173a:	4313      	orrs	r3, r2
 802173c:	f826 3c02 	strh.w	r3, [r6, #-2]
 8021740:	3604      	adds	r6, #4
 8021742:	45b0      	cmp	r8, r6
 8021744:	d18b      	bne.n	802165e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x106>
 8021746:	9a00      	ldr	r2, [sp, #0]
 8021748:	f109 0301 	add.w	r3, r9, #1
 802174c:	441a      	add	r2, r3
 802174e:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8021752:	9b05      	ldr	r3, [sp, #20]
 8021754:	ebc9 79c9 	rsb	r9, r9, r9, lsl #31
 8021758:	9200      	str	r2, [sp, #0]
 802175a:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 802175e:	f1b9 0f01 	cmp.w	r9, #1
 8021762:	d01b      	beq.n	802179c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x244>
 8021764:	9904      	ldr	r1, [sp, #16]
 8021766:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802176a:	4a50      	ldr	r2, [pc, #320]	@ (80218ac <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x354>)
 802176c:	440b      	add	r3, r1
 802176e:	8812      	ldrh	r2, [r2, #0]
 8021770:	9902      	ldr	r1, [sp, #8]
 8021772:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8021776:	1a52      	subs	r2, r2, r1
 8021778:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 802177c:	9a01      	ldr	r2, [sp, #4]
 802177e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8021782:	9301      	str	r3, [sp, #4]
 8021784:	9b06      	ldr	r3, [sp, #24]
 8021786:	4553      	cmp	r3, sl
 8021788:	f63f af4f 	bhi.w	802162a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xd2>
 802178c:	4b46      	ldr	r3, [pc, #280]	@ (80218a8 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x350>)
 802178e:	6818      	ldr	r0, [r3, #0]
 8021790:	6803      	ldr	r3, [r0, #0]
 8021792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021794:	4798      	blx	r3
 8021796:	b00d      	add	sp, #52	@ 0x34
 8021798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802179c:	9b00      	ldr	r3, [sp, #0]
 802179e:	781e      	ldrb	r6, [r3, #0]
 80217a0:	f8ba 3000 	ldrh.w	r3, [sl]
 80217a4:	0936      	lsrs	r6, r6, #4
 80217a6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80217aa:	eb0b 0006 	add.w	r0, fp, r6
 80217ae:	7881      	ldrb	r1, [r0, #2]
 80217b0:	7845      	ldrb	r5, [r0, #1]
 80217b2:	00dc      	lsls	r4, r3, #3
 80217b4:	b2e4      	uxtb	r4, r4
 80217b6:	fb14 f40c 	smulbb	r4, r4, ip
 80217ba:	fb11 f107 	smulbb	r1, r1, r7
 80217be:	fb15 f507 	smulbb	r5, r5, r7
 80217c2:	f81b 0006 	ldrb.w	r0, [fp, r6]
 80217c6:	121a      	asrs	r2, r3, #8
 80217c8:	10db      	asrs	r3, r3, #3
 80217ca:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80217ce:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80217d2:	fb00 4007 	mla	r0, r0, r7, r4
 80217d6:	fb02 120c 	mla	r2, r2, ip, r1
 80217da:	fb03 530c 	mla	r3, r3, ip, r5
 80217de:	b291      	uxth	r1, r2
 80217e0:	b29b      	uxth	r3, r3
 80217e2:	b280      	uxth	r0, r0
 80217e4:	1c4a      	adds	r2, r1, #1
 80217e6:	1c5d      	adds	r5, r3, #1
 80217e8:	1c44      	adds	r4, r0, #1
 80217ea:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80217ee:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80217f2:	eb05 2113 	add.w	r1, r5, r3, lsr #8
 80217f6:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80217fa:	f402 4378 	and.w	r3, r2, #63488	@ 0xf800
 80217fe:	094a      	lsrs	r2, r1, #5
 8021800:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021804:	4303      	orrs	r3, r0
 8021806:	4313      	orrs	r3, r2
 8021808:	f8aa 3000 	strh.w	r3, [sl]
 802180c:	4b27      	ldr	r3, [pc, #156]	@ (80218ac <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x354>)
 802180e:	9902      	ldr	r1, [sp, #8]
 8021810:	881a      	ldrh	r2, [r3, #0]
 8021812:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8021816:	1a52      	subs	r2, r2, r1
 8021818:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 802181c:	9a04      	ldr	r2, [sp, #16]
 802181e:	f10a 0a02 	add.w	sl, sl, #2
 8021822:	4413      	add	r3, r2
 8021824:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8021828:	e7a8      	b.n	802177c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x224>
 802182a:	9b01      	ldr	r3, [sp, #4]
 802182c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8021830:	781e      	ldrb	r6, [r3, #0]
 8021832:	f8ba 3000 	ldrh.w	r3, [sl]
 8021836:	f006 060f 	and.w	r6, r6, #15
 802183a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802183e:	eb0b 0006 	add.w	r0, fp, r6
 8021842:	7881      	ldrb	r1, [r0, #2]
 8021844:	7845      	ldrb	r5, [r0, #1]
 8021846:	00dc      	lsls	r4, r3, #3
 8021848:	b2e4      	uxtb	r4, r4
 802184a:	fb14 f40c 	smulbb	r4, r4, ip
 802184e:	fb11 f107 	smulbb	r1, r1, r7
 8021852:	fb15 f507 	smulbb	r5, r5, r7
 8021856:	f81b 0006 	ldrb.w	r0, [fp, r6]
 802185a:	121a      	asrs	r2, r3, #8
 802185c:	10db      	asrs	r3, r3, #3
 802185e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8021862:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8021866:	fb00 4007 	mla	r0, r0, r7, r4
 802186a:	fb02 120c 	mla	r2, r2, ip, r1
 802186e:	fb03 530c 	mla	r3, r3, ip, r5
 8021872:	b291      	uxth	r1, r2
 8021874:	b29b      	uxth	r3, r3
 8021876:	b280      	uxth	r0, r0
 8021878:	1c4a      	adds	r2, r1, #1
 802187a:	1c5d      	adds	r5, r3, #1
 802187c:	1c44      	adds	r4, r0, #1
 802187e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021882:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8021886:	eb05 2113 	add.w	r1, r5, r3, lsr #8
 802188a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802188e:	f402 4378 	and.w	r3, r2, #63488	@ 0xf800
 8021892:	094a      	lsrs	r2, r1, #5
 8021894:	4303      	orrs	r3, r0
 8021896:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802189a:	4313      	orrs	r3, r2
 802189c:	f82a 3b02 	strh.w	r3, [sl], #2
 80218a0:	9b01      	ldr	r3, [sp, #4]
 80218a2:	3301      	adds	r3, #1
 80218a4:	9300      	str	r3, [sp, #0]
 80218a6:	e6c8      	b.n	802163a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xe2>
 80218a8:	2015a078 	.word	0x2015a078
 80218ac:	2015a072 	.word	0x2015a072
 80218b0:	fb03 f304 	mul.w	r3, r3, r4
 80218b4:	eb0a 0843 	add.w	r8, sl, r3, lsl #1
 80218b8:	45c2      	cmp	sl, r8
 80218ba:	f4bf af67 	bcs.w	802178c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x234>
 80218be:	9b02      	ldr	r3, [sp, #8]
 80218c0:	4f57      	ldr	r7, [pc, #348]	@ (8021a20 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4c8>)
 80218c2:	3b01      	subs	r3, #1
 80218c4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80218c8:	9300      	str	r3, [sp, #0]
 80218ca:	9b03      	ldr	r3, [sp, #12]
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	f000 808a 	beq.w	80219e6 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x48e>
 80218d2:	f899 2000 	ldrb.w	r2, [r9]
 80218d6:	9e00      	ldr	r6, [sp, #0]
 80218d8:	f002 020f 	and.w	r2, r2, #15
 80218dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80218e0:	eb0b 0302 	add.w	r3, fp, r2
 80218e4:	7859      	ldrb	r1, [r3, #1]
 80218e6:	789b      	ldrb	r3, [r3, #2]
 80218e8:	00c9      	lsls	r1, r1, #3
 80218ea:	f81b 0002 	ldrb.w	r0, [fp, r2]
 80218ee:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 80218f2:	f401 62fc 	and.w	r2, r1, #2016	@ 0x7e0
 80218f6:	4313      	orrs	r3, r2
 80218f8:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80218fc:	f109 0e01 	add.w	lr, r9, #1
 8021900:	f82a 3b02 	strh.w	r3, [sl], #2
 8021904:	2e01      	cmp	r6, #1
 8021906:	dd40      	ble.n	802198a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x432>
 8021908:	3e02      	subs	r6, #2
 802190a:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 802190e:	f10a 0508 	add.w	r5, sl, #8
 8021912:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8021916:	f10a 0004 	add.w	r0, sl, #4
 802191a:	f10e 34ff 	add.w	r4, lr, #4294967295
 802191e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8021922:	3004      	adds	r0, #4
 8021924:	0912      	lsrs	r2, r2, #4
 8021926:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802192a:	eb0b 0302 	add.w	r3, fp, r2
 802192e:	7859      	ldrb	r1, [r3, #1]
 8021930:	789b      	ldrb	r3, [r3, #2]
 8021932:	00c9      	lsls	r1, r1, #3
 8021934:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8021938:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802193c:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 8021940:	430b      	orrs	r3, r1
 8021942:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021946:	f820 3c08 	strh.w	r3, [r0, #-8]
 802194a:	7822      	ldrb	r2, [r4, #0]
 802194c:	f002 020f 	and.w	r2, r2, #15
 8021950:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021954:	eb0b 0302 	add.w	r3, fp, r2
 8021958:	7859      	ldrb	r1, [r3, #1]
 802195a:	789b      	ldrb	r3, [r3, #2]
 802195c:	00c9      	lsls	r1, r1, #3
 802195e:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8021962:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021966:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 802196a:	430b      	orrs	r3, r1
 802196c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8021970:	f820 3c06 	strh.w	r3, [r0, #-6]
 8021974:	4285      	cmp	r5, r0
 8021976:	d1d2      	bne.n	802191e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c6>
 8021978:	f10c 0301 	add.w	r3, ip, #1
 802197c:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
 8021980:	449e      	add	lr, r3
 8021982:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 8021986:	eb06 064c 	add.w	r6, r6, ip, lsl #1
 802198a:	2e01      	cmp	r6, #1
 802198c:	d12e      	bne.n	80219ec <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x494>
 802198e:	f89e 2000 	ldrb.w	r2, [lr]
 8021992:	0912      	lsrs	r2, r2, #4
 8021994:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021998:	eb0b 0302 	add.w	r3, fp, r2
 802199c:	7859      	ldrb	r1, [r3, #1]
 802199e:	789b      	ldrb	r3, [r3, #2]
 80219a0:	00c9      	lsls	r1, r1, #3
 80219a2:	f81b 0002 	ldrb.w	r0, [fp, r2]
 80219a6:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 80219aa:	f401 62fc 	and.w	r2, r1, #2016	@ 0x7e0
 80219ae:	4313      	orrs	r3, r2
 80219b0:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80219b4:	f8aa 3000 	strh.w	r3, [sl]
 80219b8:	4b1a      	ldr	r3, [pc, #104]	@ (8021a24 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4cc>)
 80219ba:	9902      	ldr	r1, [sp, #8]
 80219bc:	881a      	ldrh	r2, [r3, #0]
 80219be:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80219c2:	1a52      	subs	r2, r2, r1
 80219c4:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 80219c8:	9a04      	ldr	r2, [sp, #16]
 80219ca:	f10a 0a02 	add.w	sl, sl, #2
 80219ce:	4413      	add	r3, r2
 80219d0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80219d4:	45d0      	cmp	r8, sl
 80219d6:	eb09 0963 	add.w	r9, r9, r3, asr #1
 80219da:	f67f aed7 	bls.w	802178c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x234>
 80219de:	9b03      	ldr	r3, [sp, #12]
 80219e0:	2b00      	cmp	r3, #0
 80219e2:	f47f af76 	bne.w	80218d2 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x37a>
 80219e6:	46ce      	mov	lr, r9
 80219e8:	9e02      	ldr	r6, [sp, #8]
 80219ea:	e78b      	b.n	8021904 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3ac>
 80219ec:	9904      	ldr	r1, [sp, #16]
 80219ee:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80219f2:	4a0c      	ldr	r2, [pc, #48]	@ (8021a24 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4cc>)
 80219f4:	440b      	add	r3, r1
 80219f6:	8812      	ldrh	r2, [r2, #0]
 80219f8:	9902      	ldr	r1, [sp, #8]
 80219fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80219fe:	1a52      	subs	r2, r2, r1
 8021a00:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8021a04:	45d0      	cmp	r8, sl
 8021a06:	eb09 0963 	add.w	r9, r9, r3, asr #1
 8021a0a:	f63f af5e 	bhi.w	80218ca <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x372>
 8021a0e:	e6bd      	b.n	802178c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x234>
 8021a10:	4b05      	ldr	r3, [pc, #20]	@ (8021a28 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4d0>)
 8021a12:	4a06      	ldr	r2, [pc, #24]	@ (8021a2c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4d4>)
 8021a14:	f44f 61e9 	mov.w	r1, #1864	@ 0x748
 8021a18:	4805      	ldr	r0, [pc, #20]	@ (8021a30 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x4d8>)
 8021a1a:	f00a f8cd 	bl	802bbb8 <__assert_func>
 8021a1e:	bf00      	nop
 8021a20:	fffff800 	.word	0xfffff800
 8021a24:	2015a072 	.word	0x2015a072
 8021a28:	0802ec20 	.word	0x0802ec20
 8021a2c:	0802faf8 	.word	0x0802faf8
 8021a30:	0802eb5c 	.word	0x0802eb5c

08021a34 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8021a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a38:	b08f      	sub	sp, #60	@ 0x3c
 8021a3a:	7814      	ldrb	r4, [r2, #0]
 8021a3c:	461d      	mov	r5, r3
 8021a3e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8021a42:	2c01      	cmp	r4, #1
 8021a44:	9206      	str	r2, [sp, #24]
 8021a46:	9101      	str	r1, [sp, #4]
 8021a48:	9304      	str	r3, [sp, #16]
 8021a4a:	f040 8142 	bne.w	8021cd2 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x29e>
 8021a4e:	b913      	cbnz	r3, 8021a56 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8021a50:	b00f      	add	sp, #60	@ 0x3c
 8021a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a56:	6828      	ldr	r0, [r5, #0]
 8021a58:	6869      	ldr	r1, [r5, #4]
 8021a5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8021a5c:	c303      	stmia	r3!, {r0, r1}
 8021a5e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021a60:	6818      	ldr	r0, [r3, #0]
 8021a62:	6859      	ldr	r1, [r3, #4]
 8021a64:	ab0c      	add	r3, sp, #48	@ 0x30
 8021a66:	c303      	stmia	r3!, {r0, r1}
 8021a68:	a80a      	add	r0, sp, #40	@ 0x28
 8021a6a:	f7f4 fd7d 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a6e:	4629      	mov	r1, r5
 8021a70:	a80c      	add	r0, sp, #48	@ 0x30
 8021a72:	f7f4 fda1 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a76:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021a7a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8021a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8021a82:	bfdd      	ittte	le
 8021a84:	f44f 6480 	movle.w	r4, #1024	@ 0x400
 8021a88:	b29a      	uxthle	r2, r3
 8021a8a:	fb94 f4f2 	sdivle	r4, r4, r2
 8021a8e:	b29a      	uxthgt	r2, r3
 8021a90:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8021a94:	fb93 f0f4 	sdiv	r0, r3, r4
 8021a98:	b285      	uxth	r5, r0
 8021a9a:	fb04 3c15 	mls	ip, r4, r5, r3
 8021a9e:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8021aa2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8021aa6:	fa1f fb8c 	uxth.w	fp, ip
 8021aaa:	4422      	add	r2, r4
 8021aac:	3a01      	subs	r2, #1
 8021aae:	fb92 f4f4 	sdiv	r4, r2, r4
 8021ab2:	2d00      	cmp	r5, #0
 8021ab4:	f040 8105 	bne.w	8021cc2 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x28e>
 8021ab8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8021abc:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 8021ac0:	4413      	add	r3, r2
 8021ac2:	4a87      	ldr	r2, [pc, #540]	@ (8021ce0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8021ac4:	4401      	add	r1, r0
 8021ac6:	6810      	ldr	r0, [r2, #0]
 8021ac8:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8021acc:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8021ad0:	4616      	mov	r6, r2
 8021ad2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8021ad6:	6803      	ldr	r3, [r0, #0]
 8021ad8:	9209      	str	r2, [sp, #36]	@ 0x24
 8021ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021adc:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8021ae0:	4798      	blx	r3
 8021ae2:	9f04      	ldr	r7, [sp, #16]
 8021ae4:	f1bb 0f00 	cmp.w	fp, #0
 8021ae8:	bf0c      	ite	eq
 8021aea:	4633      	moveq	r3, r6
 8021aec:	2300      	movne	r3, #0
 8021aee:	ea6f 0807 	mvn.w	r8, r7
 8021af2:	497c      	ldr	r1, [pc, #496]	@ (8021ce4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2b0>)
 8021af4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021af8:	8809      	ldrh	r1, [r1, #0]
 8021afa:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	@ 0x30
 8021afe:	fb01 f505 	mul.w	r5, r1, r5
 8021b02:	fb01 6202 	mla	r2, r1, r2, r6
 8021b06:	b2a4      	uxth	r4, r4
 8021b08:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021b0c:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8021b10:	00a4      	lsls	r4, r4, #2
 8021b12:	1d21      	adds	r1, r4, #4
 8021b14:	4290      	cmp	r0, r2
 8021b16:	9202      	str	r2, [sp, #8]
 8021b18:	9108      	str	r1, [sp, #32]
 8021b1a:	fa1f fa83 	uxth.w	sl, r3
 8021b1e:	fa5f f888 	uxtb.w	r8, r8
 8021b22:	d228      	bcs.n	8021b76 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x142>
 8021b24:	2300      	movs	r3, #0
 8021b26:	469c      	mov	ip, r3
 8021b28:	9303      	str	r3, [sp, #12]
 8021b2a:	fa1f f888 	uxth.w	r8, r8
 8021b2e:	fa1f f987 	uxth.w	r9, r7
 8021b32:	f1bc 0f00 	cmp.w	ip, #0
 8021b36:	d10f      	bne.n	8021b58 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x124>
 8021b38:	9901      	ldr	r1, [sp, #4]
 8021b3a:	780a      	ldrb	r2, [r1, #0]
 8021b3c:	ea4f 1c92 	mov.w	ip, r2, lsr #6
 8021b40:	f10c 33ff 	add.w	r3, ip, #4294967295
 8021b44:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021b48:	2b02      	cmp	r3, #2
 8021b4a:	9203      	str	r2, [sp, #12]
 8021b4c:	f200 80b3 	bhi.w	8021cb6 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x282>
 8021b50:	3101      	adds	r1, #1
 8021b52:	9101      	str	r1, [sp, #4]
 8021b54:	fa1f fc8c 	uxth.w	ip, ip
 8021b58:	f1bb 0f00 	cmp.w	fp, #0
 8021b5c:	d013      	beq.n	8021b86 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x152>
 8021b5e:	45dc      	cmp	ip, fp
 8021b60:	f080 80a0 	bcs.w	8021ca4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x270>
 8021b64:	ebab 0c0c 	sub.w	ip, fp, ip
 8021b68:	fa1f fb8c 	uxth.w	fp, ip
 8021b6c:	f04f 0c00 	mov.w	ip, #0
 8021b70:	9b02      	ldr	r3, [sp, #8]
 8021b72:	4283      	cmp	r3, r0
 8021b74:	d8dd      	bhi.n	8021b32 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0xfe>
 8021b76:	4b5a      	ldr	r3, [pc, #360]	@ (8021ce0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2ac>)
 8021b78:	6818      	ldr	r0, [r3, #0]
 8021b7a:	6803      	ldr	r3, [r0, #0]
 8021b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021b7e:	4798      	blx	r3
 8021b80:	b00f      	add	sp, #60	@ 0x3c
 8021b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b86:	2303      	movs	r3, #3
 8021b88:	4619      	mov	r1, r3
 8021b8a:	9a08      	ldr	r2, [sp, #32]
 8021b8c:	9b03      	ldr	r3, [sp, #12]
 8021b8e:	45d4      	cmp	ip, sl
 8021b90:	fb11 2703 	smlabb	r7, r1, r3, r2
 8021b94:	9b06      	ldr	r3, [sp, #24]
 8021b96:	441f      	add	r7, r3
 8021b98:	d362      	bcc.n	8021c60 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x22c>
 8021b9a:	ebac 030a 	sub.w	r3, ip, sl
 8021b9e:	b29b      	uxth	r3, r3
 8021ba0:	9305      	str	r3, [sp, #20]
 8021ba2:	9b04      	ldr	r3, [sp, #16]
 8021ba4:	4654      	mov	r4, sl
 8021ba6:	2bff      	cmp	r3, #255	@ 0xff
 8021ba8:	f8cd b01c 	str.w	fp, [sp, #28]
 8021bac:	d062      	beq.n	8021c74 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x240>
 8021bae:	2c00      	cmp	r4, #0
 8021bb0:	d038      	beq.n	8021c24 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1f0>
 8021bb2:	f104 3eff 	add.w	lr, r4, #4294967295
 8021bb6:	fa1f fe8e 	uxth.w	lr, lr
 8021bba:	f10e 0e01 	add.w	lr, lr, #1
 8021bbe:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8021bc2:	8802      	ldrh	r2, [r0, #0]
 8021bc4:	78bd      	ldrb	r5, [r7, #2]
 8021bc6:	00d4      	lsls	r4, r2, #3
 8021bc8:	7879      	ldrb	r1, [r7, #1]
 8021bca:	b2e4      	uxtb	r4, r4
 8021bcc:	fb14 f408 	smulbb	r4, r4, r8
 8021bd0:	fb15 f509 	smulbb	r5, r5, r9
 8021bd4:	fb11 f109 	smulbb	r1, r1, r9
 8021bd8:	783e      	ldrb	r6, [r7, #0]
 8021bda:	1213      	asrs	r3, r2, #8
 8021bdc:	10d2      	asrs	r2, r2, #3
 8021bde:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8021be2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8021be6:	fb06 4409 	mla	r4, r6, r9, r4
 8021bea:	fb03 5308 	mla	r3, r3, r8, r5
 8021bee:	fb02 1208 	mla	r2, r2, r8, r1
 8021bf2:	b2a4      	uxth	r4, r4
 8021bf4:	b291      	uxth	r1, r2
 8021bf6:	b29d      	uxth	r5, r3
 8021bf8:	1c62      	adds	r2, r4, #1
 8021bfa:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8021bfe:	1c6b      	adds	r3, r5, #1
 8021c00:	1c4a      	adds	r2, r1, #1
 8021c02:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8021c06:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8021c0a:	f3c4 21c4 	ubfx	r1, r4, #11, #5
 8021c0e:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8021c12:	0952      	lsrs	r2, r2, #5
 8021c14:	430b      	orrs	r3, r1
 8021c16:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021c1a:	4313      	orrs	r3, r2
 8021c1c:	f820 3b02 	strh.w	r3, [r0], #2
 8021c20:	4570      	cmp	r0, lr
 8021c22:	d1ce      	bne.n	8021bc2 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18e>
 8021c24:	45d4      	cmp	ip, sl
 8021c26:	d316      	bcc.n	8021c56 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x222>
 8021c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021c2a:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 8021c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8021ce4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2b0>)
 8021c30:	fa1f fa82 	uxth.w	sl, r2
 8021c34:	ebab 0b0a 	sub.w	fp, fp, sl
 8021c38:	881b      	ldrh	r3, [r3, #0]
 8021c3a:	fa1f fb8b 	uxth.w	fp, fp
 8021c3e:	f1bb 0f00 	cmp.w	fp, #0
 8021c42:	eba3 0302 	sub.w	r3, r3, r2
 8021c46:	f8dd c014 	ldr.w	ip, [sp, #20]
 8021c4a:	bf18      	it	ne
 8021c4c:	f04f 0a00 	movne.w	sl, #0
 8021c50:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021c54:	e78c      	b.n	8021b70 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8021c56:	f8dd c014 	ldr.w	ip, [sp, #20]
 8021c5a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021c5e:	e787      	b.n	8021b70 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8021c60:	ebaa 020c 	sub.w	r2, sl, ip
 8021c64:	b293      	uxth	r3, r2
 8021c66:	9307      	str	r3, [sp, #28]
 8021c68:	9b04      	ldr	r3, [sp, #16]
 8021c6a:	4664      	mov	r4, ip
 8021c6c:	2bff      	cmp	r3, #255	@ 0xff
 8021c6e:	f8cd b014 	str.w	fp, [sp, #20]
 8021c72:	d19c      	bne.n	8021bae <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 8021c74:	2c00      	cmp	r4, #0
 8021c76:	d0d5      	beq.n	8021c24 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1f0>
 8021c78:	3c01      	subs	r4, #1
 8021c7a:	b2a4      	uxth	r4, r4
 8021c7c:	3401      	adds	r4, #1
 8021c7e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8021c82:	787a      	ldrb	r2, [r7, #1]
 8021c84:	78bb      	ldrb	r3, [r7, #2]
 8021c86:	4918      	ldr	r1, [pc, #96]	@ (8021ce8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2b4>)
 8021c88:	00d2      	lsls	r2, r2, #3
 8021c8a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021c8e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021c92:	7839      	ldrb	r1, [r7, #0]
 8021c94:	4313      	orrs	r3, r2
 8021c96:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8021c9a:	f820 3b02 	strh.w	r3, [r0], #2
 8021c9e:	42a0      	cmp	r0, r4
 8021ca0:	d1ef      	bne.n	8021c82 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x24e>
 8021ca2:	e7bf      	b.n	8021c24 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1f0>
 8021ca4:	ebac 0c0b 	sub.w	ip, ip, fp
 8021ca8:	fa1f fc8c 	uxth.w	ip, ip
 8021cac:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 8021cb0:	f04f 0b00 	mov.w	fp, #0
 8021cb4:	e75c      	b.n	8021b70 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 8021cb6:	460b      	mov	r3, r1
 8021cb8:	3302      	adds	r3, #2
 8021cba:	f891 c001 	ldrb.w	ip, [r1, #1]
 8021cbe:	9301      	str	r3, [sp, #4]
 8021cc0:	e74a      	b.n	8021b58 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x124>
 8021cc2:	9a06      	ldr	r2, [sp, #24]
 8021cc4:	9801      	ldr	r0, [sp, #4]
 8021cc6:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8021cca:	ba12      	rev	r2, r2
 8021ccc:	4410      	add	r0, r2
 8021cce:	9001      	str	r0, [sp, #4]
 8021cd0:	e6f2      	b.n	8021ab8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x84>
 8021cd2:	4b06      	ldr	r3, [pc, #24]	@ (8021cec <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2b8>)
 8021cd4:	4a06      	ldr	r2, [pc, #24]	@ (8021cf0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2bc>)
 8021cd6:	f240 71c2 	movw	r1, #1986	@ 0x7c2
 8021cda:	4806      	ldr	r0, [pc, #24]	@ (8021cf4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2c0>)
 8021cdc:	f009 ff6c 	bl	802bbb8 <__assert_func>
 8021ce0:	2015a078 	.word	0x2015a078
 8021ce4:	2015a072 	.word	0x2015a072
 8021ce8:	fffff800 	.word	0xfffff800
 8021cec:	0802ec20 	.word	0x0802ec20
 8021cf0:	0802fc9c 	.word	0x0802fc9c
 8021cf4:	0802eb5c 	.word	0x0802eb5c

08021cf8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>:
 8021cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cfc:	b09d      	sub	sp, #116	@ 0x74
 8021cfe:	7814      	ldrb	r4, [r2, #0]
 8021d00:	461d      	mov	r5, r3
 8021d02:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8021d06:	2c01      	cmp	r4, #1
 8021d08:	9211      	str	r2, [sp, #68]	@ 0x44
 8021d0a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021d0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021d0e:	f040 820a 	bne.w	8022126 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x42e>
 8021d12:	b913      	cbnz	r3, 8021d1a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8021d14:	b01d      	add	sp, #116	@ 0x74
 8021d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d1a:	6869      	ldr	r1, [r5, #4]
 8021d1c:	4683      	mov	fp, r0
 8021d1e:	6828      	ldr	r0, [r5, #0]
 8021d20:	ab18      	add	r3, sp, #96	@ 0x60
 8021d22:	c303      	stmia	r3!, {r0, r1}
 8021d24:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021d26:	6818      	ldr	r0, [r3, #0]
 8021d28:	6859      	ldr	r1, [r3, #4]
 8021d2a:	ab1a      	add	r3, sp, #104	@ 0x68
 8021d2c:	c303      	stmia	r3!, {r0, r1}
 8021d2e:	a818      	add	r0, sp, #96	@ 0x60
 8021d30:	f7f4 fc1a 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021d34:	4629      	mov	r1, r5
 8021d36:	a81a      	add	r0, sp, #104	@ 0x68
 8021d38:	f7f4 fc3e 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021d3c:	f9bd 6064 	ldrsh.w	r6, [sp, #100]	@ 0x64
 8021d40:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021d44:	f340 814b 	ble.w	8021fde <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2e6>
 8021d48:	b2b0      	uxth	r0, r6
 8021d4a:	9416      	str	r4, [sp, #88]	@ 0x58
 8021d4c:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	@ 0x6a
 8021d50:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	@ 0x66
 8021d54:	fb93 f1f4 	sdiv	r1, r3, r4
 8021d58:	4422      	add	r2, r4
 8021d5a:	3a01      	subs	r2, #1
 8021d5c:	fb92 f2f4 	sdiv	r2, r2, r4
 8021d60:	b289      	uxth	r1, r1
 8021d62:	fb04 3411 	mls	r4, r4, r1, r3
 8021d66:	9114      	str	r1, [sp, #80]	@ 0x50
 8021d68:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8021d6c:	f8bd 7060 	ldrh.w	r7, [sp, #96]	@ 0x60
 8021d70:	fb14 1600 	smlabb	r6, r4, r0, r1
 8021d74:	f8bd 5062 	ldrh.w	r5, [sp, #98]	@ 0x62
 8021d78:	48a4      	ldr	r0, [pc, #656]	@ (802200c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x314>)
 8021d7a:	4439      	add	r1, r7
 8021d7c:	442b      	add	r3, r5
 8021d7e:	6800      	ldr	r0, [r0, #0]
 8021d80:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8021d84:	f8ad 306a 	strh.w	r3, [sp, #106]	@ 0x6a
 8021d88:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	@ 0x6c
 8021d8c:	6803      	ldr	r3, [r0, #0]
 8021d8e:	b2b5      	uxth	r5, r6
 8021d90:	3201      	adds	r2, #1
 8021d92:	9501      	str	r5, [sp, #4]
 8021d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021d96:	970b      	str	r7, [sp, #44]	@ 0x2c
 8021d98:	b294      	uxth	r4, r2
 8021d9a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8021d9e:	4798      	blx	r3
 8021da0:	2100      	movs	r1, #0
 8021da2:	2d00      	cmp	r5, #0
 8021da4:	4d9a      	ldr	r5, [pc, #616]	@ (8022010 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x318>)
 8021da6:	bf08      	it	eq
 8021da8:	463a      	moveq	r2, r7
 8021daa:	882d      	ldrh	r5, [r5, #0]
 8021dac:	9112      	str	r1, [sp, #72]	@ 0x48
 8021dae:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 8021db2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8021db6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021db8:	fb05 7101 	mla	r1, r5, r1, r7
 8021dbc:	ea6f 0c03 	mvn.w	ip, r3
 8021dc0:	fb05 f306 	mul.w	r3, r5, r6
 8021dc4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8021dc8:	9100      	str	r1, [sp, #0]
 8021dca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8021dce:	f10b 030e 	add.w	r3, fp, #14
 8021dd2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021dd4:	465b      	mov	r3, fp
 8021dd6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021dd8:	bf18      	it	ne
 8021dda:	2200      	movne	r2, #0
 8021ddc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8021de0:	f104 0904 	add.w	r9, r4, #4
 8021de4:	46cb      	mov	fp, r9
 8021de6:	4699      	mov	r9, r3
 8021de8:	460b      	mov	r3, r1
 8021dea:	b292      	uxth	r2, r2
 8021dec:	9202      	str	r2, [sp, #8]
 8021dee:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8021df2:	fa5f f28c 	uxtb.w	r2, ip
 8021df6:	9107      	str	r1, [sp, #28]
 8021df8:	9215      	str	r2, [sp, #84]	@ 0x54
 8021dfa:	9a00      	ldr	r2, [sp, #0]
 8021dfc:	4293      	cmp	r3, r2
 8021dfe:	f240 80fd 	bls.w	8021ffc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x304>
 8021e02:	9a01      	ldr	r2, [sp, #4]
 8021e04:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8021e08:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8021e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8021e0e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021e10:	2701      	movs	r7, #1
 8021e12:	fa11 f482 	uxtah	r4, r1, r2
 8021e16:	00a4      	lsls	r4, r4, #2
 8021e18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021e1a:	3404      	adds	r4, #4
 8021e1c:	1911      	adds	r1, r2, r4
 8021e1e:	788a      	ldrb	r2, [r1, #2]
 8021e20:	784d      	ldrb	r5, [r1, #1]
 8021e22:	0212      	lsls	r2, r2, #8
 8021e24:	78c9      	ldrb	r1, [r1, #3]
 8021e26:	ea42 4005 	orr.w	r0, r2, r5, lsl #16
 8021e2a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8021e2c:	4308      	orrs	r0, r1
 8021e2e:	4629      	mov	r1, r5
 8021e30:	2600      	movs	r6, #0
 8021e32:	4401      	add	r1, r0
 8021e34:	784a      	ldrb	r2, [r1, #1]
 8021e36:	5c28      	ldrb	r0, [r5, r0]
 8021e38:	0212      	lsls	r2, r2, #8
 8021e3a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8021e3c:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8021e40:	4302      	orrs	r2, r0
 8021e42:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021e44:	5d2c      	ldrb	r4, [r5, r4]
 8021e46:	f889 200d 	strb.w	r2, [r9, #13]
 8021e4a:	b292      	uxth	r2, r2
 8021e4c:	1ac3      	subs	r3, r0, r3
 8021e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021e50:	19ca      	adds	r2, r1, r7
 8021e52:	9205      	str	r2, [sp, #20]
 8021e54:	b29b      	uxth	r3, r3
 8021e56:	19e2      	adds	r2, r4, r7
 8021e58:	f8bd e054 	ldrh.w	lr, [sp, #84]	@ 0x54
 8021e5c:	960e      	str	r6, [sp, #56]	@ 0x38
 8021e5e:	970a      	str	r7, [sp, #40]	@ 0x28
 8021e60:	940d      	str	r4, [sp, #52]	@ 0x34
 8021e62:	9206      	str	r2, [sp, #24]
 8021e64:	9310      	str	r3, [sp, #64]	@ 0x40
 8021e66:	9704      	str	r7, [sp, #16]
 8021e68:	9b01      	ldr	r3, [sp, #4]
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d034      	beq.n	8021ed8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1e0>
 8021e6e:	42bb      	cmp	r3, r7
 8021e70:	f240 811a 	bls.w	80220a8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3b0>
 8021e74:	1bdf      	subs	r7, r3, r7
 8021e76:	b2bb      	uxth	r3, r7
 8021e78:	9301      	str	r3, [sp, #4]
 8021e7a:	9a00      	ldr	r2, [sp, #0]
 8021e7c:	9b07      	ldr	r3, [sp, #28]
 8021e7e:	4293      	cmp	r3, r2
 8021e80:	f240 80bc 	bls.w	8021ffc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x304>
 8021e84:	9805      	ldr	r0, [sp, #20]
 8021e86:	9c04      	ldr	r4, [sp, #16]
 8021e88:	7842      	ldrb	r2, [r0, #1]
 8021e8a:	f1c4 0107 	rsb	r1, r4, #7
 8021e8e:	7803      	ldrb	r3, [r0, #0]
 8021e90:	408a      	lsls	r2, r1
 8021e92:	0052      	lsls	r2, r2, #1
 8021e94:	4123      	asrs	r3, r4
 8021e96:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8021e9a:	1c61      	adds	r1, r4, #1
 8021e9c:	b2db      	uxtb	r3, r3
 8021e9e:	4313      	orrs	r3, r2
 8021ea0:	b2ca      	uxtb	r2, r1
 8021ea2:	4611      	mov	r1, r2
 8021ea4:	2908      	cmp	r1, #8
 8021ea6:	9204      	str	r2, [sp, #16]
 8021ea8:	b29a      	uxth	r2, r3
 8021eaa:	f000 8107 	beq.w	80220bc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3c4>
 8021eae:	3001      	adds	r0, #1
 8021eb0:	9005      	str	r0, [sp, #20]
 8021eb2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021eb4:	4291      	cmp	r1, r2
 8021eb6:	f0c0 80d9 	bcc.w	802206c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x374>
 8021eba:	2701      	movs	r7, #1
 8021ebc:	b2db      	uxtb	r3, r3
 8021ebe:	f889 300d 	strb.w	r3, [r9, #13]
 8021ec2:	9906      	ldr	r1, [sp, #24]
 8021ec4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8021ec8:	f0c0 80fe 	bcc.w	80220c8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3d0>
 8021ecc:	9b01      	ldr	r3, [sp, #4]
 8021ece:	e9cd 2709 	strd	r2, r7, [sp, #36]	@ 0x24
 8021ed2:	2600      	movs	r6, #0
 8021ed4:	2b00      	cmp	r3, #0
 8021ed6:	d1ca      	bne.n	8021e6e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x176>
 8021ed8:	9b02      	ldr	r3, [sp, #8]
 8021eda:	429f      	cmp	r7, r3
 8021edc:	461a      	mov	r2, r3
 8021ede:	f0c0 8099 	bcc.w	8022014 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x31c>
 8021ee2:	1afb      	subs	r3, r7, r3
 8021ee4:	b29b      	uxth	r3, r3
 8021ee6:	9308      	str	r3, [sp, #32]
 8021ee8:	9b01      	ldr	r3, [sp, #4]
 8021eea:	9203      	str	r2, [sp, #12]
 8021eec:	930c      	str	r3, [sp, #48]	@ 0x30
 8021eee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021ef0:	2bff      	cmp	r3, #255	@ 0xff
 8021ef2:	9b03      	ldr	r3, [sp, #12]
 8021ef4:	f000 809a 	beq.w	802202c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x334>
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d049      	beq.n	8021f90 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8021efc:	eb06 0803 	add.w	r8, r6, r3
 8021f00:	f8dd c000 	ldr.w	ip, [sp]
 8021f04:	fa1f f888 	uxth.w	r8, r8
 8021f08:	eb09 0306 	add.w	r3, r9, r6
 8021f0c:	7b5c      	ldrb	r4, [r3, #13]
 8021f0e:	f8bc 3000 	ldrh.w	r3, [ip]
 8021f12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021f16:	eb0b 0204 	add.w	r2, fp, r4
 8021f1a:	7890      	ldrb	r0, [r2, #2]
 8021f1c:	7855      	ldrb	r5, [r2, #1]
 8021f1e:	00d9      	lsls	r1, r3, #3
 8021f20:	b2c9      	uxtb	r1, r1
 8021f22:	fb11 f10e 	smulbb	r1, r1, lr
 8021f26:	fb10 f00a 	smulbb	r0, r0, sl
 8021f2a:	fb15 f50a 	smulbb	r5, r5, sl
 8021f2e:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021f32:	121a      	asrs	r2, r3, #8
 8021f34:	10db      	asrs	r3, r3, #3
 8021f36:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8021f3a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8021f3e:	fb04 140a 	mla	r4, r4, sl, r1
 8021f42:	fb02 020e 	mla	r2, r2, lr, r0
 8021f46:	fb03 530e 	mla	r3, r3, lr, r5
 8021f4a:	b2a4      	uxth	r4, r4
 8021f4c:	b29b      	uxth	r3, r3
 8021f4e:	b290      	uxth	r0, r2
 8021f50:	1c59      	adds	r1, r3, #1
 8021f52:	1c42      	adds	r2, r0, #1
 8021f54:	1c65      	adds	r5, r4, #1
 8021f56:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021f5a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021f5e:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8021f62:	f402 4378 	and.w	r3, r2, #63488	@ 0xf800
 8021f66:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8021f6a:	094a      	lsrs	r2, r1, #5
 8021f6c:	3601      	adds	r6, #1
 8021f6e:	4323      	orrs	r3, r4
 8021f70:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8021f74:	b2b6      	uxth	r6, r6
 8021f76:	4313      	orrs	r3, r2
 8021f78:	4546      	cmp	r6, r8
 8021f7a:	f82c 3b02 	strh.w	r3, [ip], #2
 8021f7e:	d1c3      	bne.n	8021f08 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x210>
 8021f80:	9b03      	ldr	r3, [sp, #12]
 8021f82:	9a00      	ldr	r2, [sp, #0]
 8021f84:	3b01      	subs	r3, #1
 8021f86:	b29b      	uxth	r3, r3
 8021f88:	3301      	adds	r3, #1
 8021f8a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021f8e:	9300      	str	r3, [sp, #0]
 8021f90:	9b02      	ldr	r3, [sp, #8]
 8021f92:	429f      	cmp	r7, r3
 8021f94:	d32b      	bcc.n	8021fee <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2f6>
 8021f96:	4b1e      	ldr	r3, [pc, #120]	@ (8022010 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x318>)
 8021f98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021f9a:	881b      	ldrh	r3, [r3, #0]
 8021f9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021f9e:	1a5b      	subs	r3, r3, r1
 8021fa0:	9900      	ldr	r1, [sp, #0]
 8021fa2:	3201      	adds	r2, #1
 8021fa4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8021fa8:	9300      	str	r3, [sp, #0]
 8021faa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021fac:	920e      	str	r2, [sp, #56]	@ 0x38
 8021fae:	429a      	cmp	r2, r3
 8021fb0:	f000 80a7 	beq.w	8022102 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x40a>
 8021fb4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8021fb8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8021fbc:	9f08      	ldr	r7, [sp, #32]
 8021fbe:	1a9b      	subs	r3, r3, r2
 8021fc0:	b29b      	uxth	r3, r3
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	bf14      	ite	ne
 8021fc6:	2200      	movne	r2, #0
 8021fc8:	2300      	moveq	r3, #0
 8021fca:	9202      	str	r2, [sp, #8]
 8021fcc:	9301      	str	r3, [sp, #4]
 8021fce:	9b07      	ldr	r3, [sp, #28]
 8021fd0:	9a00      	ldr	r2, [sp, #0]
 8021fd2:	4293      	cmp	r3, r2
 8021fd4:	d912      	bls.n	8021ffc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x304>
 8021fd6:	2f00      	cmp	r7, #0
 8021fd8:	f47f af46 	bne.w	8021e68 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x170>
 8021fdc:	e752      	b.n	8021e84 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x18c>
 8021fde:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8021fe2:	b2b0      	uxth	r0, r6
 8021fe4:	fb94 f4f0 	sdiv	r4, r4, r0
 8021fe8:	b2a3      	uxth	r3, r4
 8021fea:	9316      	str	r3, [sp, #88]	@ 0x58
 8021fec:	e6ae      	b.n	8021d4c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x54>
 8021fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ff0:	9a00      	ldr	r2, [sp, #0]
 8021ff2:	9302      	str	r3, [sp, #8]
 8021ff4:	9b07      	ldr	r3, [sp, #28]
 8021ff6:	9f08      	ldr	r7, [sp, #32]
 8021ff8:	4293      	cmp	r3, r2
 8021ffa:	d8ec      	bhi.n	8021fd6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2de>
 8021ffc:	4b03      	ldr	r3, [pc, #12]	@ (802200c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x314>)
 8021ffe:	6818      	ldr	r0, [r3, #0]
 8022000:	6803      	ldr	r3, [r0, #0]
 8022002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022004:	4798      	blx	r3
 8022006:	b01d      	add	sp, #116	@ 0x74
 8022008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802200c:	2015a078 	.word	0x2015a078
 8022010:	2015a072 	.word	0x2015a072
 8022014:	9b01      	ldr	r3, [sp, #4]
 8022016:	9703      	str	r7, [sp, #12]
 8022018:	9308      	str	r3, [sp, #32]
 802201a:	9b02      	ldr	r3, [sp, #8]
 802201c:	1bdb      	subs	r3, r3, r7
 802201e:	b29b      	uxth	r3, r3
 8022020:	930c      	str	r3, [sp, #48]	@ 0x30
 8022022:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022024:	2bff      	cmp	r3, #255	@ 0xff
 8022026:	9b03      	ldr	r3, [sp, #12]
 8022028:	f47f af66 	bne.w	8021ef8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x200>
 802202c:	2b00      	cmp	r3, #0
 802202e:	d0af      	beq.n	8021f90 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8022030:	18f4      	adds	r4, r6, r3
 8022032:	9800      	ldr	r0, [sp, #0]
 8022034:	b2a4      	uxth	r4, r4
 8022036:	eb09 0306 	add.w	r3, r9, r6
 802203a:	7b59      	ldrb	r1, [r3, #13]
 802203c:	4d3d      	ldr	r5, [pc, #244]	@ (8022134 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x43c>)
 802203e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022042:	eb0b 0301 	add.w	r3, fp, r1
 8022046:	785a      	ldrb	r2, [r3, #1]
 8022048:	789b      	ldrb	r3, [r3, #2]
 802204a:	00d2      	lsls	r2, r2, #3
 802204c:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8022050:	3601      	adds	r6, #1
 8022052:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022056:	ea05 2303 	and.w	r3, r5, r3, lsl #8
 802205a:	4313      	orrs	r3, r2
 802205c:	b2b6      	uxth	r6, r6
 802205e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022062:	42a6      	cmp	r6, r4
 8022064:	f820 3b02 	strh.w	r3, [r0], #2
 8022068:	d1e5      	bne.n	8022036 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x33e>
 802206a:	e789      	b.n	8021f80 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x288>
 802206c:	9b06      	ldr	r3, [sp, #24]
 802206e:	429a      	cmp	r2, r3
 8022070:	d32d      	bcc.n	80220ce <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3d6>
 8022072:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8022074:	f899 100d 	ldrb.w	r1, [r9, #13]
 8022078:	eb09 0300 	add.w	r3, r9, r0
 802207c:	7359      	strb	r1, [r3, #13]
 802207e:	f899 300d 	ldrb.w	r3, [r9, #13]
 8022082:	1c41      	adds	r1, r0, #1
 8022084:	b28f      	uxth	r7, r1
 8022086:	9c06      	ldr	r4, [sp, #24]
 8022088:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802208a:	eb09 0084 	add.w	r0, r9, r4, lsl #2
 802208e:	3401      	adds	r4, #1
 8022090:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 8022094:	b2a3      	uxth	r3, r4
 8022096:	f8a0 5050 	strh.w	r5, [r0, #80]	@ 0x50
 802209a:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 802209e:	9306      	str	r3, [sp, #24]
 80220a0:	e9cd 2709 	strd	r2, r7, [sp, #36]	@ 0x24
 80220a4:	2600      	movs	r6, #0
 80220a6:	e6df      	b.n	8021e68 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x170>
 80220a8:	1aff      	subs	r7, r7, r3
 80220aa:	441e      	add	r6, r3
 80220ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80220b0:	b2bf      	uxth	r7, r7
 80220b2:	9302      	str	r3, [sp, #8]
 80220b4:	2300      	movs	r3, #0
 80220b6:	b2b6      	uxth	r6, r6
 80220b8:	9301      	str	r3, [sp, #4]
 80220ba:	e788      	b.n	8021fce <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x2d6>
 80220bc:	2100      	movs	r1, #0
 80220be:	9104      	str	r1, [sp, #16]
 80220c0:	9905      	ldr	r1, [sp, #20]
 80220c2:	3102      	adds	r1, #2
 80220c4:	9105      	str	r1, [sp, #20]
 80220c6:	e6f4      	b.n	8021eb2 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 80220c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80220ca:	3101      	adds	r1, #1
 80220cc:	e7db      	b.n	8022086 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x38e>
 80220ce:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 80220d2:	f893 704f 	ldrb.w	r7, [r3, #79]	@ 0x4f
 80220d6:	4613      	mov	r3, r2
 80220d8:	2f01      	cmp	r7, #1
 80220da:	d90d      	bls.n	80220f8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x400>
 80220dc:	f107 010d 	add.w	r1, r7, #13
 80220e0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80220e2:	4449      	add	r1, r9
 80220e4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80220e8:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 80220ec:	f801 0d01 	strb.w	r0, [r1, #-1]!
 80220f0:	428c      	cmp	r4, r1
 80220f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80220f6:	d1f5      	bne.n	80220e4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x3ec>
 80220f8:	b2db      	uxtb	r3, r3
 80220fa:	f889 300d 	strb.w	r3, [r9, #13]
 80220fe:	b2bf      	uxth	r7, r7
 8022100:	e6df      	b.n	8021ec2 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x1ca>
 8022102:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8022106:	f8bd 2060 	ldrh.w	r2, [sp, #96]	@ 0x60
 802210a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802210c:	1a9b      	subs	r3, r3, r2
 802210e:	b29b      	uxth	r3, r3
 8022110:	2b00      	cmp	r3, #0
 8022112:	9301      	str	r3, [sp, #4]
 8022114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022116:	bf18      	it	ne
 8022118:	2300      	movne	r3, #0
 802211a:	3101      	adds	r1, #1
 802211c:	b29b      	uxth	r3, r3
 802211e:	9302      	str	r3, [sp, #8]
 8022120:	9112      	str	r1, [sp, #72]	@ 0x48
 8022122:	9b07      	ldr	r3, [sp, #28]
 8022124:	e669      	b.n	8021dfa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x102>
 8022126:	4b04      	ldr	r3, [pc, #16]	@ (8022138 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x440>)
 8022128:	4a04      	ldr	r2, [pc, #16]	@ (802213c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x444>)
 802212a:	f640 0167 	movw	r1, #2151	@ 0x867
 802212e:	4804      	ldr	r0, [pc, #16]	@ (8022140 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h+0x448>)
 8022130:	f009 fd42 	bl	802bbb8 <__assert_func>
 8022134:	fffff800 	.word	0xfffff800
 8022138:	0802ec20 	.word	0x0802ec20
 802213c:	0802fff0 	.word	0x0802fff0
 8022140:	0802eb5c 	.word	0x0802eb5c

08022144 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022148:	4690      	mov	r8, r2
 802214a:	8812      	ldrh	r2, [r2, #0]
 802214c:	b093      	sub	sp, #76	@ 0x4c
 802214e:	461c      	mov	r4, r3
 8022150:	f89d a074 	ldrb.w	sl, [sp, #116]	@ 0x74
 8022154:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022156:	2a00      	cmp	r2, #0
 8022158:	f040 80fb 	bne.w	8022352 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 802215c:	4689      	mov	r9, r1
 802215e:	6820      	ldr	r0, [r4, #0]
 8022160:	6861      	ldr	r1, [r4, #4]
 8022162:	aa0e      	add	r2, sp, #56	@ 0x38
 8022164:	c203      	stmia	r2!, {r0, r1}
 8022166:	6818      	ldr	r0, [r3, #0]
 8022168:	6859      	ldr	r1, [r3, #4]
 802216a:	aa10      	add	r2, sp, #64	@ 0x40
 802216c:	c203      	stmia	r2!, {r0, r1}
 802216e:	a80e      	add	r0, sp, #56	@ 0x38
 8022170:	f7f4 f9fa 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022174:	4621      	mov	r1, r4
 8022176:	a810      	add	r0, sp, #64	@ 0x40
 8022178:	f7f4 fa1e 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802217c:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	@ 0x40
 8022180:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	@ 0x42
 8022184:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8022188:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 802218c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8022190:	4873      	ldr	r0, [pc, #460]	@ (8022360 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8022192:	fb11 4105 	smlabb	r1, r1, r5, r4
 8022196:	4422      	add	r2, r4
 8022198:	442b      	add	r3, r5
 802219a:	6800      	ldr	r0, [r0, #0]
 802219c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80221a0:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80221a4:	6802      	ldr	r2, [r0, #0]
 80221a6:	4489      	add	r9, r1
 80221a8:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80221ac:	4c6d      	ldr	r4, [pc, #436]	@ (8022364 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x220>)
 80221ae:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80221b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80221b4:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	@ 0x46
 80221b8:	42a3      	cmp	r3, r4
 80221ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80221bc:	f040 8096 	bne.w	80222ec <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 80221c0:	6841      	ldr	r1, [r0, #4]
 80221c2:	4c69      	ldr	r4, [pc, #420]	@ (8022368 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x224>)
 80221c4:	680b      	ldr	r3, [r1, #0]
 80221c6:	699b      	ldr	r3, [r3, #24]
 80221c8:	42a3      	cmp	r3, r4
 80221ca:	f040 80b4 	bne.w	8022336 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 80221ce:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80221d0:	4798      	blx	r3
 80221d2:	4b66      	ldr	r3, [pc, #408]	@ (802236c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 80221d4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80221d8:	881b      	ldrh	r3, [r3, #0]
 80221da:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 80221de:	fb01 2303 	mla	r3, r1, r3, r2
 80221e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221e6:	4418      	add	r0, r3
 80221e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	dd76      	ble.n	80222dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 80221ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	dd73      	ble.n	80222dc <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x198>
 80221f4:	2200      	movs	r2, #0
 80221f6:	2104      	movs	r1, #4
 80221f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80221fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8022200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022202:	464e      	mov	r6, r9
 8022204:	1cc5      	adds	r5, r0, #3
 8022206:	eb09 0c03 	add.w	ip, r9, r3
 802220a:	e039      	b.n	8022280 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 802220c:	fb0a f303 	mul.w	r3, sl, r3
 8022210:	1c5a      	adds	r2, r3, #1
 8022212:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022216:	121b      	asrs	r3, r3, #8
 8022218:	43df      	mvns	r7, r3
 802221a:	b29b      	uxth	r3, r3
 802221c:	fb1e f203 	smulbb	r2, lr, r3
 8022220:	f815 ec03 	ldrb.w	lr, [r5, #-3]
 8022224:	b2ff      	uxtb	r7, r7
 8022226:	fb0e 2e07 	mla	lr, lr, r7, r2
 802222a:	fa1f fe8e 	uxth.w	lr, lr
 802222e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 8022232:	f10e 0b01 	add.w	fp, lr, #1
 8022236:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802223a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802223e:	fb12 fb07 	smulbb	fp, r2, r7
 8022242:	f805 ec03 	strb.w	lr, [r5, #-3]
 8022246:	7862      	ldrb	r2, [r4, #1]
 8022248:	f815 ec01 	ldrb.w	lr, [r5, #-1]
 802224c:	fb02 b203 	mla	r2, r2, r3, fp
 8022250:	b292      	uxth	r2, r2
 8022252:	f102 0b01 	add.w	fp, r2, #1
 8022256:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802225a:	1212      	asrs	r2, r2, #8
 802225c:	fb1e f707 	smulbb	r7, lr, r7
 8022260:	f805 2c02 	strb.w	r2, [r5, #-2]
 8022264:	78a2      	ldrb	r2, [r4, #2]
 8022266:	fb02 7303 	mla	r3, r2, r3, r7
 802226a:	b29b      	uxth	r3, r3
 802226c:	1c5a      	adds	r2, r3, #1
 802226e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022272:	121b      	asrs	r3, r3, #8
 8022274:	f805 3c01 	strb.w	r3, [r5, #-1]
 8022278:	45b4      	cmp	ip, r6
 802227a:	f105 0503 	add.w	r5, r5, #3
 802227e:	d01b      	beq.n	80222b8 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x174>
 8022280:	f816 2b01 	ldrb.w	r2, [r6], #1
 8022284:	fb11 1202 	smlabb	r2, r1, r2, r1
 8022288:	eb08 0402 	add.w	r4, r8, r2
 802228c:	78e3      	ldrb	r3, [r4, #3]
 802228e:	2b00      	cmp	r3, #0
 8022290:	d0f2      	beq.n	8022278 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x134>
 8022292:	2bff      	cmp	r3, #255	@ 0xff
 8022294:	f818 e002 	ldrb.w	lr, [r8, r2]
 8022298:	d1b8      	bne.n	802220c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 802229a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802229e:	d1b5      	bne.n	802220c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 80222a0:	f805 ec03 	strb.w	lr, [r5, #-3]
 80222a4:	7863      	ldrb	r3, [r4, #1]
 80222a6:	45b4      	cmp	ip, r6
 80222a8:	f805 3c02 	strb.w	r3, [r5, #-2]
 80222ac:	78a3      	ldrb	r3, [r4, #2]
 80222ae:	f105 0503 	add.w	r5, r5, #3
 80222b2:	f805 3c04 	strb.w	r3, [r5, #-4]
 80222b6:	d1e3      	bne.n	8022280 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 80222b8:	4b2c      	ldr	r3, [pc, #176]	@ (802236c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 80222ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80222bc:	881b      	ldrh	r3, [r3, #0]
 80222be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80222c0:	1a9b      	subs	r3, r3, r2
 80222c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80222c8:	442b      	add	r3, r5
 80222ca:	4418      	add	r0, r3
 80222cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80222ce:	3401      	adds	r4, #1
 80222d0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80222d4:	42a3      	cmp	r3, r4
 80222d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80222d8:	4491      	add	r9, r2
 80222da:	d191      	bne.n	8022200 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 80222dc:	4b20      	ldr	r3, [pc, #128]	@ (8022360 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 80222de:	6818      	ldr	r0, [r3, #0]
 80222e0:	6803      	ldr	r3, [r0, #0]
 80222e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222e4:	4798      	blx	r3
 80222e6:	b013      	add	sp, #76	@ 0x4c
 80222e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222ec:	4798      	blx	r3
 80222ee:	4602      	mov	r2, r0
 80222f0:	2a01      	cmp	r2, #1
 80222f2:	d124      	bne.n	802233e <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1fa>
 80222f4:	4b1e      	ldr	r3, [pc, #120]	@ (8022370 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22c>)
 80222f6:	6818      	ldr	r0, [r3, #0]
 80222f8:	b328      	cbz	r0, 8022346 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 80222fa:	260b      	movs	r6, #11
 80222fc:	4b1b      	ldr	r3, [pc, #108]	@ (802236c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x228>)
 80222fe:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022302:	881f      	ldrh	r7, [r3, #0]
 8022304:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8022308:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802230c:	f8bd 4042 	ldrh.w	r4, [sp, #66]	@ 0x42
 8022310:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8022314:	9208      	str	r2, [sp, #32]
 8022316:	9205      	str	r2, [sp, #20]
 8022318:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802231c:	f8cd a010 	str.w	sl, [sp, #16]
 8022320:	4642      	mov	r2, r8
 8022322:	4649      	mov	r1, r9
 8022324:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8022328:	9503      	str	r5, [sp, #12]
 802232a:	9400      	str	r4, [sp, #0]
 802232c:	f7f9 feb8 	bl	801c0a0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8022330:	b013      	add	sp, #76	@ 0x4c
 8022332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022336:	4608      	mov	r0, r1
 8022338:	4798      	blx	r3
 802233a:	4602      	mov	r2, r0
 802233c:	e7d8      	b.n	80222f0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 802233e:	4b08      	ldr	r3, [pc, #32]	@ (8022360 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>)
 8022340:	6818      	ldr	r0, [r3, #0]
 8022342:	6802      	ldr	r2, [r0, #0]
 8022344:	e743      	b.n	80221ce <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8022346:	4b0b      	ldr	r3, [pc, #44]	@ (8022374 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x230>)
 8022348:	4a0b      	ldr	r2, [pc, #44]	@ (8022378 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 802234a:	217c      	movs	r1, #124	@ 0x7c
 802234c:	480b      	ldr	r0, [pc, #44]	@ (802237c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 802234e:	f009 fc33 	bl	802bbb8 <__assert_func>
 8022352:	4b0b      	ldr	r3, [pc, #44]	@ (8022380 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8022354:	4a0b      	ldr	r2, [pc, #44]	@ (8022384 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8022356:	f640 1155 	movw	r1, #2389	@ 0x955
 802235a:	480b      	ldr	r0, [pc, #44]	@ (8022388 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 802235c:	f009 fc2c 	bl	802bbb8 <__assert_func>
 8022360:	2015a078 	.word	0x2015a078
 8022364:	080126cd 	.word	0x080126cd
 8022368:	080155bb 	.word	0x080155bb
 802236c:	2015a072 	.word	0x2015a072
 8022370:	2015a1e4 	.word	0x2015a1e4
 8022374:	0802eab8 	.word	0x0802eab8
 8022378:	0802f324 	.word	0x0802f324
 802237c:	0802eae0 	.word	0x0802eae0
 8022380:	0802ebd0 	.word	0x0802ebd0
 8022384:	0802f9e0 	.word	0x0802f9e0
 8022388:	0802eb5c 	.word	0x0802eb5c

0802238c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 802238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022390:	4614      	mov	r4, r2
 8022392:	7812      	ldrb	r2, [r2, #0]
 8022394:	b08d      	sub	sp, #52	@ 0x34
 8022396:	461e      	mov	r6, r3
 8022398:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
 802239c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802239e:	2a00      	cmp	r2, #0
 80223a0:	f040 81e0 	bne.w	8022764 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3d8>
 80223a4:	6830      	ldr	r0, [r6, #0]
 80223a6:	460d      	mov	r5, r1
 80223a8:	6871      	ldr	r1, [r6, #4]
 80223aa:	aa08      	add	r2, sp, #32
 80223ac:	c203      	stmia	r2!, {r0, r1}
 80223ae:	6818      	ldr	r0, [r3, #0]
 80223b0:	6859      	ldr	r1, [r3, #4]
 80223b2:	aa0a      	add	r2, sp, #40	@ 0x28
 80223b4:	c203      	stmia	r2!, {r0, r1}
 80223b6:	a808      	add	r0, sp, #32
 80223b8:	f7f4 f8d6 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80223bc:	4631      	mov	r1, r6
 80223be:	a80a      	add	r0, sp, #40	@ 0x28
 80223c0:	f7f4 f8fa 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80223c4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80223c8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80223cc:	f003 0201 	and.w	r2, r3, #1
 80223d0:	4617      	mov	r7, r2
 80223d2:	9204      	str	r2, [sp, #16]
 80223d4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80223d8:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 80223dc:	443b      	add	r3, r7
 80223de:	fb02 1303 	mla	r3, r2, r3, r1
 80223e2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80223e6:	4402      	add	r2, r0
 80223e8:	48d6      	ldr	r0, [pc, #856]	@ (8022744 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3b8>)
 80223ea:	440e      	add	r6, r1
 80223ec:	6800      	ldr	r0, [r0, #0]
 80223ee:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 80223f2:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80223f6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80223fa:	eb05 0363 	add.w	r3, r5, r3, asr #1
 80223fe:	6802      	ldr	r2, [r0, #0]
 8022400:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8022404:	9301      	str	r3, [sp, #4]
 8022406:	f001 0301 	and.w	r3, r1, #1
 802240a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 802240c:	9305      	str	r3, [sp, #20]
 802240e:	9703      	str	r7, [sp, #12]
 8022410:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8022414:	4790      	blx	r2
 8022416:	4acc      	ldr	r2, [pc, #816]	@ (8022748 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3bc>)
 8022418:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 802241c:	8811      	ldrh	r1, [r2, #0]
 802241e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8022422:	fb05 f201 	mul.w	r2, r5, r1
 8022426:	fb01 6303 	mla	r3, r1, r3, r6
 802242a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802242e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022432:	4418      	add	r0, r3
 8022434:	1883      	adds	r3, r0, r2
 8022436:	4298      	cmp	r0, r3
 8022438:	9306      	str	r3, [sp, #24]
 802243a:	f104 0204 	add.w	r2, r4, #4
 802243e:	f080 80f1 	bcs.w	8022624 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8022442:	1e7b      	subs	r3, r7, #1
 8022444:	4647      	mov	r7, r8
 8022446:	9307      	str	r3, [sp, #28]
 8022448:	9b05      	ldr	r3, [sp, #20]
 802244a:	2b00      	cmp	r3, #0
 802244c:	f000 8106 	beq.w	802265c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2d0>
 8022450:	9901      	ldr	r1, [sp, #4]
 8022452:	780b      	ldrb	r3, [r1, #0]
 8022454:	1c4d      	adds	r5, r1, #1
 8022456:	f003 030f 	and.w	r3, r3, #15
 802245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802245e:	0e19      	lsrs	r1, r3, #24
 8022460:	f040 8136 	bne.w	80226d0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x344>
 8022464:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022468:	3003      	adds	r0, #3
 802246a:	f1bc 0f01 	cmp.w	ip, #1
 802246e:	f340 80ba 	ble.w	80225e6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x25a>
 8022472:	f1ac 0302 	sub.w	r3, ip, #2
 8022476:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802247a:	f10c 0e01 	add.w	lr, ip, #1
 802247e:	9302      	str	r3, [sp, #8]
 8022480:	eb05 060e 	add.w	r6, r5, lr
 8022484:	1d84      	adds	r4, r0, #6
 8022486:	e00b      	b.n	80224a0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 8022488:	f003 030f 	and.w	r3, r3, #15
 802248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022490:	3501      	adds	r5, #1
 8022492:	0e19      	lsrs	r1, r3, #24
 8022494:	d155      	bne.n	8022542 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1b6>
 8022496:	42b5      	cmp	r5, r6
 8022498:	f104 0406 	add.w	r4, r4, #6
 802249c:	f000 809a 	beq.w	80225d4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>
 80224a0:	782b      	ldrb	r3, [r5, #0]
 80224a2:	0919      	lsrs	r1, r3, #4
 80224a4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80224a8:	ea5f 6811 	movs.w	r8, r1, lsr #24
 80224ac:	d0ec      	beq.n	8022488 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xfc>
 80224ae:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80224b2:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80224b6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80224ba:	fa5f f38a 	uxtb.w	r3, sl
 80224be:	b2c9      	uxtb	r1, r1
 80224c0:	fa5f fb89 	uxtb.w	fp, r9
 80224c4:	f000 80bf 	beq.w	8022646 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2ba>
 80224c8:	fb08 f807 	mul.w	r8, r8, r7
 80224cc:	f108 0901 	add.w	r9, r8, #1
 80224d0:	eb09 2828 	add.w	r8, r9, r8, asr #8
 80224d4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80224d8:	ea6f 0908 	mvn.w	r9, r8
 80224dc:	fa1f f888 	uxth.w	r8, r8
 80224e0:	fb11 f108 	smulbb	r1, r1, r8
 80224e4:	fb13 f308 	smulbb	r3, r3, r8
 80224e8:	fb1b f808 	smulbb	r8, fp, r8
 80224ec:	f814 bc06 	ldrb.w	fp, [r4, #-6]
 80224f0:	fa5f f989 	uxtb.w	r9, r9
 80224f4:	f814 ac05 	ldrb.w	sl, [r4, #-5]
 80224f8:	fb0b 1109 	mla	r1, fp, r9, r1
 80224fc:	f814 bc04 	ldrb.w	fp, [r4, #-4]
 8022500:	fb0a 3309 	mla	r3, sl, r9, r3
 8022504:	fb0b 8809 	mla	r8, fp, r9, r8
 8022508:	b289      	uxth	r1, r1
 802250a:	fa1f fa83 	uxth.w	sl, r3
 802250e:	fa1f f888 	uxth.w	r8, r8
 8022512:	f101 0b01 	add.w	fp, r1, #1
 8022516:	f10a 0301 	add.w	r3, sl, #1
 802251a:	f108 0901 	add.w	r9, r8, #1
 802251e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8022522:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022526:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 802252a:	121b      	asrs	r3, r3, #8
 802252c:	1209      	asrs	r1, r1, #8
 802252e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022532:	f804 1c06 	strb.w	r1, [r4, #-6]
 8022536:	f804 3c05 	strb.w	r3, [r4, #-5]
 802253a:	f804 8c04 	strb.w	r8, [r4, #-4]
 802253e:	782b      	ldrb	r3, [r5, #0]
 8022540:	e7a2      	b.n	8022488 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xfc>
 8022542:	f3c3 2a07 	ubfx	sl, r3, #8, #8
 8022546:	f3c3 4907 	ubfx	r9, r3, #16, #8
 802254a:	29ff      	cmp	r1, #255	@ 0xff
 802254c:	fa5f f88a 	uxtb.w	r8, sl
 8022550:	b2db      	uxtb	r3, r3
 8022552:	fa5f fb89 	uxtb.w	fp, r9
 8022556:	d06d      	beq.n	8022634 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2a8>
 8022558:	fb01 f107 	mul.w	r1, r1, r7
 802255c:	f101 0901 	add.w	r9, r1, #1
 8022560:	eb09 2121 	add.w	r1, r9, r1, asr #8
 8022564:	1209      	asrs	r1, r1, #8
 8022566:	ea6f 0901 	mvn.w	r9, r1
 802256a:	b289      	uxth	r1, r1
 802256c:	fb13 f301 	smulbb	r3, r3, r1
 8022570:	fb18 f801 	smulbb	r8, r8, r1
 8022574:	fb1b f101 	smulbb	r1, fp, r1
 8022578:	f814 bc03 	ldrb.w	fp, [r4, #-3]
 802257c:	fa5f f989 	uxtb.w	r9, r9
 8022580:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8022584:	fb0b 3309 	mla	r3, fp, r9, r3
 8022588:	f814 bc01 	ldrb.w	fp, [r4, #-1]
 802258c:	fb0a 8809 	mla	r8, sl, r9, r8
 8022590:	fb0b 1109 	mla	r1, fp, r9, r1
 8022594:	fa1f fa88 	uxth.w	sl, r8
 8022598:	fa1f fb83 	uxth.w	fp, r3
 802259c:	b289      	uxth	r1, r1
 802259e:	f10b 0801 	add.w	r8, fp, #1
 80225a2:	f10a 0301 	add.w	r3, sl, #1
 80225a6:	f101 0901 	add.w	r9, r1, #1
 80225aa:	eb08 2b1b 	add.w	fp, r8, fp, lsr #8
 80225ae:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80225b2:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80225b6:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80225ba:	121b      	asrs	r3, r3, #8
 80225bc:	1209      	asrs	r1, r1, #8
 80225be:	42b5      	cmp	r5, r6
 80225c0:	f804 bc03 	strb.w	fp, [r4, #-3]
 80225c4:	f804 3c02 	strb.w	r3, [r4, #-2]
 80225c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80225cc:	f104 0406 	add.w	r4, r4, #6
 80225d0:	f47f af66 	bne.w	80224a0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 80225d4:	9b02      	ldr	r3, [sp, #8]
 80225d6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80225da:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
 80225de:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 80225e2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80225e6:	f1bc 0f01 	cmp.w	ip, #1
 80225ea:	d106      	bne.n	80225fa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x26e>
 80225ec:	782b      	ldrb	r3, [r5, #0]
 80225ee:	091b      	lsrs	r3, r3, #4
 80225f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80225f4:	0e19      	lsrs	r1, r3, #24
 80225f6:	d135      	bne.n	8022664 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2d8>
 80225f8:	3003      	adds	r0, #3
 80225fa:	4b53      	ldr	r3, [pc, #332]	@ (8022748 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3bc>)
 80225fc:	9c03      	ldr	r4, [sp, #12]
 80225fe:	8819      	ldrh	r1, [r3, #0]
 8022600:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8022604:	1b09      	subs	r1, r1, r4
 8022606:	9c04      	ldr	r4, [sp, #16]
 8022608:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802260c:	4408      	add	r0, r1
 802260e:	4423      	add	r3, r4
 8022610:	9901      	ldr	r1, [sp, #4]
 8022612:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8022616:	eb01 0363 	add.w	r3, r1, r3, asr #1
 802261a:	9301      	str	r3, [sp, #4]
 802261c:	9b06      	ldr	r3, [sp, #24]
 802261e:	4283      	cmp	r3, r0
 8022620:	f63f af12 	bhi.w	8022448 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 8022624:	4b47      	ldr	r3, [pc, #284]	@ (8022744 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3b8>)
 8022626:	6818      	ldr	r0, [r3, #0]
 8022628:	6803      	ldr	r3, [r0, #0]
 802262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802262c:	4798      	blx	r3
 802262e:	b00d      	add	sp, #52	@ 0x34
 8022630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022634:	2fff      	cmp	r7, #255	@ 0xff
 8022636:	d18f      	bne.n	8022558 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1cc>
 8022638:	f804 3c03 	strb.w	r3, [r4, #-3]
 802263c:	f804 ac02 	strb.w	sl, [r4, #-2]
 8022640:	f804 9c01 	strb.w	r9, [r4, #-1]
 8022644:	e727      	b.n	8022496 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x10a>
 8022646:	2fff      	cmp	r7, #255	@ 0xff
 8022648:	f47f af3e 	bne.w	80224c8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x13c>
 802264c:	f804 1c06 	strb.w	r1, [r4, #-6]
 8022650:	f804 ac05 	strb.w	sl, [r4, #-5]
 8022654:	f804 9c04 	strb.w	r9, [r4, #-4]
 8022658:	782b      	ldrb	r3, [r5, #0]
 802265a:	e715      	b.n	8022488 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xfc>
 802265c:	9d01      	ldr	r5, [sp, #4]
 802265e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8022662:	e702      	b.n	802246a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xde>
 8022664:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8022668:	f3c3 4407 	ubfx	r4, r3, #16, #8
 802266c:	29ff      	cmp	r1, #255	@ 0xff
 802266e:	fa5f fc85 	uxtb.w	ip, r5
 8022672:	b2db      	uxtb	r3, r3
 8022674:	b2e6      	uxtb	r6, r4
 8022676:	d069      	beq.n	802274c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c0>
 8022678:	fb01 f107 	mul.w	r1, r1, r7
 802267c:	1c4c      	adds	r4, r1, #1
 802267e:	eb04 2121 	add.w	r1, r4, r1, asr #8
 8022682:	120c      	asrs	r4, r1, #8
 8022684:	43e1      	mvns	r1, r4
 8022686:	b2a4      	uxth	r4, r4
 8022688:	fb13 f304 	smulbb	r3, r3, r4
 802268c:	fb1c fc04 	smulbb	ip, ip, r4
 8022690:	fb16 f404 	smulbb	r4, r6, r4
 8022694:	7806      	ldrb	r6, [r0, #0]
 8022696:	b2c9      	uxtb	r1, r1
 8022698:	fb06 3301 	mla	r3, r6, r1, r3
 802269c:	7845      	ldrb	r5, [r0, #1]
 802269e:	7886      	ldrb	r6, [r0, #2]
 80226a0:	fb05 c501 	mla	r5, r5, r1, ip
 80226a4:	fb06 4401 	mla	r4, r6, r1, r4
 80226a8:	b29b      	uxth	r3, r3
 80226aa:	b2ad      	uxth	r5, r5
 80226ac:	b2a4      	uxth	r4, r4
 80226ae:	1c5e      	adds	r6, r3, #1
 80226b0:	f105 0c01 	add.w	ip, r5, #1
 80226b4:	1c61      	adds	r1, r4, #1
 80226b6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80226ba:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80226be:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80226c2:	121b      	asrs	r3, r3, #8
 80226c4:	122d      	asrs	r5, r5, #8
 80226c6:	1209      	asrs	r1, r1, #8
 80226c8:	7003      	strb	r3, [r0, #0]
 80226ca:	7045      	strb	r5, [r0, #1]
 80226cc:	7081      	strb	r1, [r0, #2]
 80226ce:	e793      	b.n	80225f8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x26c>
 80226d0:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80226d4:	f3c3 4407 	ubfx	r4, r3, #16, #8
 80226d8:	29ff      	cmp	r1, #255	@ 0xff
 80226da:	fa5f fe86 	uxtb.w	lr, r6
 80226de:	b2db      	uxtb	r3, r3
 80226e0:	fa5f fc84 	uxtb.w	ip, r4
 80226e4:	d038      	beq.n	8022758 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3cc>
 80226e6:	fb01 f107 	mul.w	r1, r1, r7
 80226ea:	1c4c      	adds	r4, r1, #1
 80226ec:	eb04 2421 	add.w	r4, r4, r1, asr #8
 80226f0:	1224      	asrs	r4, r4, #8
 80226f2:	43e1      	mvns	r1, r4
 80226f4:	b2a4      	uxth	r4, r4
 80226f6:	fb13 f304 	smulbb	r3, r3, r4
 80226fa:	fb1e fe04 	smulbb	lr, lr, r4
 80226fe:	fb1c f404 	smulbb	r4, ip, r4
 8022702:	f890 c000 	ldrb.w	ip, [r0]
 8022706:	b2c9      	uxtb	r1, r1
 8022708:	fb0c 3301 	mla	r3, ip, r1, r3
 802270c:	7846      	ldrb	r6, [r0, #1]
 802270e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8022712:	fb06 e601 	mla	r6, r6, r1, lr
 8022716:	fb0c 4401 	mla	r4, ip, r1, r4
 802271a:	b29b      	uxth	r3, r3
 802271c:	b2b6      	uxth	r6, r6
 802271e:	b2a4      	uxth	r4, r4
 8022720:	f103 0c01 	add.w	ip, r3, #1
 8022724:	f106 0e01 	add.w	lr, r6, #1
 8022728:	1c61      	adds	r1, r4, #1
 802272a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802272e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8022732:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8022736:	121b      	asrs	r3, r3, #8
 8022738:	1236      	asrs	r6, r6, #8
 802273a:	1209      	asrs	r1, r1, #8
 802273c:	7003      	strb	r3, [r0, #0]
 802273e:	7046      	strb	r6, [r0, #1]
 8022740:	7081      	strb	r1, [r0, #2]
 8022742:	e68f      	b.n	8022464 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xd8>
 8022744:	2015a078 	.word	0x2015a078
 8022748:	2015a072 	.word	0x2015a072
 802274c:	2fff      	cmp	r7, #255	@ 0xff
 802274e:	d193      	bne.n	8022678 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2ec>
 8022750:	7003      	strb	r3, [r0, #0]
 8022752:	7045      	strb	r5, [r0, #1]
 8022754:	7084      	strb	r4, [r0, #2]
 8022756:	e74f      	b.n	80225f8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x26c>
 8022758:	2fff      	cmp	r7, #255	@ 0xff
 802275a:	d1c4      	bne.n	80226e6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x35a>
 802275c:	7003      	strb	r3, [r0, #0]
 802275e:	7046      	strb	r6, [r0, #1]
 8022760:	7084      	strb	r4, [r0, #2]
 8022762:	e67f      	b.n	8022464 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xd8>
 8022764:	4b03      	ldr	r3, [pc, #12]	@ (8022774 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3e8>)
 8022766:	4a04      	ldr	r2, [pc, #16]	@ (8022778 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3ec>)
 8022768:	f640 11b5 	movw	r1, #2485	@ 0x9b5
 802276c:	4803      	ldr	r0, [pc, #12]	@ (802277c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3f0>)
 802276e:	f009 fa23 	bl	802bbb8 <__assert_func>
 8022772:	bf00      	nop
 8022774:	0802ec50 	.word	0x0802ec50
 8022778:	0802fed0 	.word	0x0802fed0
 802277c:	0802eb5c 	.word	0x0802eb5c

08022780 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022784:	b091      	sub	sp, #68	@ 0x44
 8022786:	9208      	str	r2, [sp, #32]
 8022788:	9100      	str	r1, [sp, #0]
 802278a:	7812      	ldrb	r2, [r2, #0]
 802278c:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8022790:	461c      	mov	r4, r3
 8022792:	9106      	str	r1, [sp, #24]
 8022794:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8022796:	2a00      	cmp	r2, #0
 8022798:	f040 8211 	bne.w	8022bbe <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x43e>
 802279c:	6820      	ldr	r0, [r4, #0]
 802279e:	6861      	ldr	r1, [r4, #4]
 80227a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80227a2:	c203      	stmia	r2!, {r0, r1}
 80227a4:	6818      	ldr	r0, [r3, #0]
 80227a6:	6859      	ldr	r1, [r3, #4]
 80227a8:	aa0e      	add	r2, sp, #56	@ 0x38
 80227aa:	c203      	stmia	r2!, {r0, r1}
 80227ac:	a80c      	add	r0, sp, #48	@ 0x30
 80227ae:	f7f3 fedb 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80227b2:	4621      	mov	r1, r4
 80227b4:	a80e      	add	r0, sp, #56	@ 0x38
 80227b6:	f7f3 feff 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80227ba:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80227be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80227c2:	f340 815b 	ble.w	8022a7c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2fc>
 80227c6:	2201      	movs	r2, #1
 80227c8:	b299      	uxth	r1, r3
 80227ca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80227ce:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 80227d2:	fb93 f5f2 	sdiv	r5, r3, r2
 80227d6:	b2ae      	uxth	r6, r5
 80227d8:	fb02 3416 	mls	r4, r2, r6, r3
 80227dc:	fb14 0101 	smlabb	r1, r4, r1, r0
 80227e0:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80227e4:	fa1f f881 	uxth.w	r8, r1
 80227e8:	4414      	add	r4, r2
 80227ea:	3c01      	subs	r4, #1
 80227ec:	fb94 f4f2 	sdiv	r4, r4, r2
 80227f0:	b136      	cbz	r6, 8022800 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x80>
 80227f2:	9a08      	ldr	r2, [sp, #32]
 80227f4:	9900      	ldr	r1, [sp, #0]
 80227f6:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80227fa:	ba12      	rev	r2, r2
 80227fc:	4411      	add	r1, r2
 80227fe:	9100      	str	r1, [sp, #0]
 8022800:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022804:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8022808:	4402      	add	r2, r0
 802280a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 802280e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8022812:	440b      	add	r3, r1
 8022814:	4616      	mov	r6, r2
 8022816:	499c      	ldr	r1, [pc, #624]	@ (8022a88 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 8022818:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802281c:	6808      	ldr	r0, [r1, #0]
 802281e:	9205      	str	r2, [sp, #20]
 8022820:	6803      	ldr	r3, [r0, #0]
 8022822:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8022826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022828:	4798      	blx	r3
 802282a:	f1b8 0f00 	cmp.w	r8, #0
 802282e:	bf0c      	ite	eq
 8022830:	4633      	moveq	r3, r6
 8022832:	2300      	movne	r3, #0
 8022834:	4995      	ldr	r1, [pc, #596]	@ (8022a8c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>)
 8022836:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 802283a:	8809      	ldrh	r1, [r1, #0]
 802283c:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8022840:	fb05 f501 	mul.w	r5, r5, r1
 8022844:	fb01 6202 	mla	r2, r1, r2, r6
 8022848:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802284c:	4410      	add	r0, r2
 802284e:	b2a4      	uxth	r4, r4
 8022850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022854:	1942      	adds	r2, r0, r5
 8022856:	00a4      	lsls	r4, r4, #2
 8022858:	1d21      	adds	r1, r4, #4
 802285a:	4290      	cmp	r0, r2
 802285c:	9201      	str	r2, [sp, #4]
 802285e:	9109      	str	r1, [sp, #36]	@ 0x24
 8022860:	b29f      	uxth	r7, r3
 8022862:	d21a      	bcs.n	802289a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x11a>
 8022864:	2300      	movs	r3, #0
 8022866:	4641      	mov	r1, r8
 8022868:	9302      	str	r3, [sp, #8]
 802286a:	b963      	cbnz	r3, 8022886 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x106>
 802286c:	9d00      	ldr	r5, [sp, #0]
 802286e:	782a      	ldrb	r2, [r5, #0]
 8022870:	0993      	lsrs	r3, r2, #6
 8022872:	1e5c      	subs	r4, r3, #1
 8022874:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8022878:	2c02      	cmp	r4, #2
 802287a:	9202      	str	r2, [sp, #8]
 802287c:	f200 8099 	bhi.w	80229b2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x232>
 8022880:	3501      	adds	r5, #1
 8022882:	9500      	str	r5, [sp, #0]
 8022884:	b29b      	uxth	r3, r3
 8022886:	b181      	cbz	r1, 80228aa <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x12a>
 8022888:	428b      	cmp	r3, r1
 802288a:	f080 808c 	bcs.w	80229a6 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 802288e:	1acb      	subs	r3, r1, r3
 8022890:	b299      	uxth	r1, r3
 8022892:	2300      	movs	r3, #0
 8022894:	9a01      	ldr	r2, [sp, #4]
 8022896:	4290      	cmp	r0, r2
 8022898:	d3e7      	bcc.n	802286a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xea>
 802289a:	4b7b      	ldr	r3, [pc, #492]	@ (8022a88 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 802289c:	6818      	ldr	r0, [r3, #0]
 802289e:	6803      	ldr	r3, [r0, #0]
 80228a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80228a2:	4798      	blx	r3
 80228a4:	b011      	add	sp, #68	@ 0x44
 80228a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228aa:	2204      	movs	r2, #4
 80228ac:	4615      	mov	r5, r2
 80228ae:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80228b0:	9a02      	ldr	r2, [sp, #8]
 80228b2:	42bb      	cmp	r3, r7
 80228b4:	fb15 4202 	smlabb	r2, r5, r2, r4
 80228b8:	9c08      	ldr	r4, [sp, #32]
 80228ba:	58a5      	ldr	r5, [r4, r2]
 80228bc:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80228c0:	f0c0 808d 	bcc.w	80229de <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x25e>
 80228c4:	1bda      	subs	r2, r3, r7
 80228c6:	b292      	uxth	r2, r2
 80228c8:	9203      	str	r2, [sp, #12]
 80228ca:	2f00      	cmp	r7, #0
 80228cc:	d076      	beq.n	80229bc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 80228ce:	9704      	str	r7, [sp, #16]
 80228d0:	9107      	str	r1, [sp, #28]
 80228d2:	9a06      	ldr	r2, [sp, #24]
 80228d4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80228d8:	fb02 f408 	mul.w	r4, r2, r8
 80228dc:	1c62      	adds	r2, r4, #1
 80228de:	eb02 2224 	add.w	r2, r2, r4, asr #8
 80228e2:	1212      	asrs	r2, r2, #8
 80228e4:	43d4      	mvns	r4, r2
 80228e6:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 80228ea:	b292      	uxth	r2, r2
 80228ec:	b2ed      	uxtb	r5, r5
 80228ee:	fa5f f98b 	uxtb.w	r9, fp
 80228f2:	fa5f fa86 	uxtb.w	sl, r6
 80228f6:	fb15 fc02 	smulbb	ip, r5, r2
 80228fa:	fb19 fe02 	smulbb	lr, r9, r2
 80228fe:	fb1a f202 	smulbb	r2, sl, r2
 8022902:	f88d 602b 	strb.w	r6, [sp, #43]	@ 0x2b
 8022906:	b2e4      	uxtb	r4, r4
 8022908:	fa1f fc8c 	uxth.w	ip, ip
 802290c:	fa1f fe8e 	uxth.w	lr, lr
 8022910:	b292      	uxth	r2, r2
 8022912:	f1b8 0f00 	cmp.w	r8, #0
 8022916:	d06b      	beq.n	80229f0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x270>
 8022918:	9e06      	ldr	r6, [sp, #24]
 802291a:	2eff      	cmp	r6, #255	@ 0xff
 802291c:	d070      	beq.n	8022a00 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x280>
 802291e:	9d04      	ldr	r5, [sp, #16]
 8022920:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8022924:	f105 36ff 	add.w	r6, r5, #4294967295
 8022928:	b2b5      	uxth	r5, r6
 802292a:	9504      	str	r5, [sp, #16]
 802292c:	f000 810e 	beq.w	8022b4c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3cc>
 8022930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022934:	f100 0a06 	add.w	sl, r0, #6
 8022938:	44aa      	add	sl, r5
 802293a:	f100 0903 	add.w	r9, r0, #3
 802293e:	f819 8c03 	ldrb.w	r8, [r9, #-3]
 8022942:	f819 6c02 	ldrb.w	r6, [r9, #-2]
 8022946:	f819 5c01 	ldrb.w	r5, [r9, #-1]
 802294a:	fb08 c804 	mla	r8, r8, r4, ip
 802294e:	fb06 e604 	mla	r6, r6, r4, lr
 8022952:	fb05 2504 	mla	r5, r5, r4, r2
 8022956:	fa1f f888 	uxth.w	r8, r8
 802295a:	b2b6      	uxth	r6, r6
 802295c:	f108 0b01 	add.w	fp, r8, #1
 8022960:	b2ad      	uxth	r5, r5
 8022962:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022966:	f106 0b01 	add.w	fp, r6, #1
 802296a:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 802296e:	f105 0b01 	add.w	fp, r5, #1
 8022972:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022976:	ea4f 2828 	mov.w	r8, r8, asr #8
 802297a:	1236      	asrs	r6, r6, #8
 802297c:	122d      	asrs	r5, r5, #8
 802297e:	f809 8c03 	strb.w	r8, [r9, #-3]
 8022982:	f809 6c02 	strb.w	r6, [r9, #-2]
 8022986:	f809 5c01 	strb.w	r5, [r9, #-1]
 802298a:	f109 0903 	add.w	r9, r9, #3
 802298e:	45ca      	cmp	sl, r9
 8022990:	d1d5      	bne.n	802293e <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8022992:	9e04      	ldr	r6, [sp, #16]
 8022994:	3601      	adds	r6, #1
 8022996:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802299a:	4430      	add	r0, r6
 802299c:	42bb      	cmp	r3, r7
 802299e:	d20d      	bcs.n	80229bc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 80229a0:	9b03      	ldr	r3, [sp, #12]
 80229a2:	9f07      	ldr	r7, [sp, #28]
 80229a4:	e776      	b.n	8022894 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 80229a6:	1a5b      	subs	r3, r3, r1
 80229a8:	b29b      	uxth	r3, r3
 80229aa:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 80229ae:	2100      	movs	r1, #0
 80229b0:	e770      	b.n	8022894 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 80229b2:	462a      	mov	r2, r5
 80229b4:	3202      	adds	r2, #2
 80229b6:	786b      	ldrb	r3, [r5, #1]
 80229b8:	9200      	str	r2, [sp, #0]
 80229ba:	e764      	b.n	8022886 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x106>
 80229bc:	9c05      	ldr	r4, [sp, #20]
 80229be:	4b33      	ldr	r3, [pc, #204]	@ (8022a8c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>)
 80229c0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80229c4:	b2a7      	uxth	r7, r4
 80229c6:	881a      	ldrh	r2, [r3, #0]
 80229c8:	1bc9      	subs	r1, r1, r7
 80229ca:	b289      	uxth	r1, r1
 80229cc:	1b12      	subs	r2, r2, r4
 80229ce:	2900      	cmp	r1, #0
 80229d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229d4:	9b03      	ldr	r3, [sp, #12]
 80229d6:	bf18      	it	ne
 80229d8:	2700      	movne	r7, #0
 80229da:	4410      	add	r0, r2
 80229dc:	e75a      	b.n	8022894 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 80229de:	1afa      	subs	r2, r7, r3
 80229e0:	b292      	uxth	r2, r2
 80229e2:	9207      	str	r2, [sp, #28]
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	f000 80f1 	beq.w	8022bcc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x44c>
 80229ea:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80229ee:	e770      	b.n	80228d2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x152>
 80229f0:	9a04      	ldr	r2, [sp, #16]
 80229f2:	3a01      	subs	r2, #1
 80229f4:	b292      	uxth	r2, r2
 80229f6:	3201      	adds	r2, #1
 80229f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80229fc:	4410      	add	r0, r2
 80229fe:	e7cd      	b.n	802299c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8022a00:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8022a04:	d044      	beq.n	8022a90 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x310>
 8022a06:	9d04      	ldr	r5, [sp, #16]
 8022a08:	f100 0a06 	add.w	sl, r0, #6
 8022a0c:	1e6e      	subs	r6, r5, #1
 8022a0e:	b2b5      	uxth	r5, r6
 8022a10:	9504      	str	r5, [sp, #16]
 8022a12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022a16:	44aa      	add	sl, r5
 8022a18:	f100 0903 	add.w	r9, r0, #3
 8022a1c:	f819 8c03 	ldrb.w	r8, [r9, #-3]
 8022a20:	f819 6c02 	ldrb.w	r6, [r9, #-2]
 8022a24:	f819 5c01 	ldrb.w	r5, [r9, #-1]
 8022a28:	fb08 c804 	mla	r8, r8, r4, ip
 8022a2c:	fb06 e604 	mla	r6, r6, r4, lr
 8022a30:	fb05 2504 	mla	r5, r5, r4, r2
 8022a34:	fa1f f888 	uxth.w	r8, r8
 8022a38:	b2b6      	uxth	r6, r6
 8022a3a:	f108 0b01 	add.w	fp, r8, #1
 8022a3e:	b2ad      	uxth	r5, r5
 8022a40:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022a44:	f106 0b01 	add.w	fp, r6, #1
 8022a48:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8022a4c:	f105 0b01 	add.w	fp, r5, #1
 8022a50:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022a54:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022a58:	1236      	asrs	r6, r6, #8
 8022a5a:	122d      	asrs	r5, r5, #8
 8022a5c:	f809 8c03 	strb.w	r8, [r9, #-3]
 8022a60:	f809 6c02 	strb.w	r6, [r9, #-2]
 8022a64:	f809 5c01 	strb.w	r5, [r9, #-1]
 8022a68:	f109 0903 	add.w	r9, r9, #3
 8022a6c:	45ca      	cmp	sl, r9
 8022a6e:	d1d5      	bne.n	8022a1c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x29c>
 8022a70:	9a04      	ldr	r2, [sp, #16]
 8022a72:	3201      	adds	r2, #1
 8022a74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a78:	4410      	add	r0, r2
 8022a7a:	e78f      	b.n	802299c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8022a7c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8022a80:	b299      	uxth	r1, r3
 8022a82:	fb94 f2f1 	sdiv	r2, r4, r1
 8022a86:	e6a0      	b.n	80227ca <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x4a>
 8022a88:	2015a078 	.word	0x2015a078
 8022a8c:	2015a072 	.word	0x2015a072
 8022a90:	9e04      	ldr	r6, [sp, #16]
 8022a92:	1e72      	subs	r2, r6, #1
 8022a94:	b292      	uxth	r2, r2
 8022a96:	2a02      	cmp	r2, #2
 8022a98:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022a9a:	f240 808d 	bls.w	8022bb8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x438>
 8022a9e:	f04f 0800 	mov.w	r8, #0
 8022aa2:	46c6      	mov	lr, r8
 8022aa4:	46c4      	mov	ip, r8
 8022aa6:	4602      	mov	r2, r0
 8022aa8:	4644      	mov	r4, r8
 8022aaa:	f369 0e07 	bfi	lr, r9, #0, #8
 8022aae:	f36a 0807 	bfi	r8, sl, #0, #8
 8022ab2:	f365 0c07 	bfi	ip, r5, #0, #8
 8022ab6:	f36a 2e0f 	bfi	lr, sl, #8, #8
 8022aba:	f365 280f 	bfi	r8, r5, #8, #8
 8022abe:	f369 2c0f 	bfi	ip, r9, #8, #8
 8022ac2:	f36a 4c17 	bfi	ip, sl, #16, #8
 8022ac6:	f369 4817 	bfi	r8, r9, #16, #8
 8022aca:	f365 4e17 	bfi	lr, r5, #16, #8
 8022ace:	f36a 681f 	bfi	r8, sl, #24, #8
 8022ad2:	9004      	str	r0, [sp, #16]
 8022ad4:	f369 6e1f 	bfi	lr, r9, #24, #8
 8022ad8:	f365 6c1f 	bfi	ip, r5, #24, #8
 8022adc:	f3c6 0a8f 	ubfx	sl, r6, #2, #16
 8022ae0:	3401      	adds	r4, #1
 8022ae2:	fa1f f984 	uxth.w	r9, r4
 8022ae6:	45d1      	cmp	r9, sl
 8022ae8:	f8c2 c000 	str.w	ip, [r2]
 8022aec:	f8c2 e004 	str.w	lr, [r2, #4]
 8022af0:	f8c2 8008 	str.w	r8, [r2, #8]
 8022af4:	f102 020c 	add.w	r2, r2, #12
 8022af8:	d3f2      	bcc.n	8022ae0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x360>
 8022afa:	f026 0403 	bic.w	r4, r6, #3
 8022afe:	b2a4      	uxth	r4, r4
 8022b00:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8022b04:	eba6 0c04 	sub.w	ip, r6, r4
 8022b08:	42a6      	cmp	r6, r4
 8022b0a:	9604      	str	r6, [sp, #16]
 8022b0c:	eb0e 0200 	add.w	r2, lr, r0
 8022b10:	fa1f fc8c 	uxth.w	ip, ip
 8022b14:	d014      	beq.n	8022b40 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c0>
 8022b16:	f10c 34ff 	add.w	r4, ip, #4294967295
 8022b1a:	f89d 602b 	ldrb.w	r6, [sp, #43]	@ 0x2b
 8022b1e:	b2a4      	uxth	r4, r4
 8022b20:	7015      	strb	r5, [r2, #0]
 8022b22:	f882 b001 	strb.w	fp, [r2, #1]
 8022b26:	7096      	strb	r6, [r2, #2]
 8022b28:	b154      	cbz	r4, 8022b40 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c0>
 8022b2a:	f1bc 0f02 	cmp.w	ip, #2
 8022b2e:	70d5      	strb	r5, [r2, #3]
 8022b30:	f882 b004 	strb.w	fp, [r2, #4]
 8022b34:	7156      	strb	r6, [r2, #5]
 8022b36:	d003      	beq.n	8022b40 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c0>
 8022b38:	7195      	strb	r5, [r2, #6]
 8022b3a:	f882 b007 	strb.w	fp, [r2, #7]
 8022b3e:	7216      	strb	r6, [r2, #8]
 8022b40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022b42:	3201      	adds	r2, #1
 8022b44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b48:	4410      	add	r0, r2
 8022b4a:	e727      	b.n	802299c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8022b4c:	eb05 0a45 	add.w	sl, r5, r5, lsl #1
 8022b50:	1d85      	adds	r5, r0, #6
 8022b52:	44aa      	add	sl, r5
 8022b54:	f100 0903 	add.w	r9, r0, #3
 8022b58:	f819 8c03 	ldrb.w	r8, [r9, #-3]
 8022b5c:	f819 6c02 	ldrb.w	r6, [r9, #-2]
 8022b60:	f819 5c01 	ldrb.w	r5, [r9, #-1]
 8022b64:	fb08 c804 	mla	r8, r8, r4, ip
 8022b68:	fb06 e604 	mla	r6, r6, r4, lr
 8022b6c:	fb05 2504 	mla	r5, r5, r4, r2
 8022b70:	fa1f f888 	uxth.w	r8, r8
 8022b74:	b2b6      	uxth	r6, r6
 8022b76:	f108 0b01 	add.w	fp, r8, #1
 8022b7a:	b2ad      	uxth	r5, r5
 8022b7c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022b80:	f106 0b01 	add.w	fp, r6, #1
 8022b84:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8022b88:	f105 0b01 	add.w	fp, r5, #1
 8022b8c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022b90:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022b94:	1236      	asrs	r6, r6, #8
 8022b96:	122d      	asrs	r5, r5, #8
 8022b98:	f809 8c03 	strb.w	r8, [r9, #-3]
 8022b9c:	f809 6c02 	strb.w	r6, [r9, #-2]
 8022ba0:	f809 5c01 	strb.w	r5, [r9, #-1]
 8022ba4:	f109 0903 	add.w	r9, r9, #3
 8022ba8:	45d1      	cmp	r9, sl
 8022baa:	d1d5      	bne.n	8022b58 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3d8>
 8022bac:	9a04      	ldr	r2, [sp, #16]
 8022bae:	3201      	adds	r2, #1
 8022bb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022bb4:	4410      	add	r0, r2
 8022bb6:	e6f1      	b.n	802299c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 8022bb8:	46b4      	mov	ip, r6
 8022bba:	4602      	mov	r2, r0
 8022bbc:	e7ab      	b.n	8022b16 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x396>
 8022bbe:	4b05      	ldr	r3, [pc, #20]	@ (8022bd4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x454>)
 8022bc0:	4a05      	ldr	r2, [pc, #20]	@ (8022bd8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x458>)
 8022bc2:	f640 2118 	movw	r1, #2584	@ 0xa18
 8022bc6:	4805      	ldr	r0, [pc, #20]	@ (8022bdc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x45c>)
 8022bc8:	f008 fff6 	bl	802bbb8 <__assert_func>
 8022bcc:	9f07      	ldr	r7, [sp, #28]
 8022bce:	4619      	mov	r1, r3
 8022bd0:	e660      	b.n	8022894 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x114>
 8022bd2:	bf00      	nop
 8022bd4:	0802ec50 	.word	0x0802ec50
 8022bd8:	080302dc 	.word	0x080302dc
 8022bdc:	0802eb5c 	.word	0x0802eb5c

08022be0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8022be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022be4:	b09d      	sub	sp, #116	@ 0x74
 8022be6:	920e      	str	r2, [sp, #56]	@ 0x38
 8022be8:	461c      	mov	r4, r3
 8022bea:	7812      	ldrb	r2, [r2, #0]
 8022bec:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8022bf0:	9114      	str	r1, [sp, #80]	@ 0x50
 8022bf2:	9304      	str	r3, [sp, #16]
 8022bf4:	2a00      	cmp	r2, #0
 8022bf6:	f040 8207 	bne.w	8023008 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x428>
 8022bfa:	b913      	cbnz	r3, 8022c02 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x22>
 8022bfc:	b01d      	add	sp, #116	@ 0x74
 8022bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c02:	6861      	ldr	r1, [r4, #4]
 8022c04:	4681      	mov	r9, r0
 8022c06:	6820      	ldr	r0, [r4, #0]
 8022c08:	ab18      	add	r3, sp, #96	@ 0x60
 8022c0a:	c303      	stmia	r3!, {r0, r1}
 8022c0c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022c0e:	6818      	ldr	r0, [r3, #0]
 8022c10:	6859      	ldr	r1, [r3, #4]
 8022c12:	ab1a      	add	r3, sp, #104	@ 0x68
 8022c14:	c303      	stmia	r3!, {r0, r1}
 8022c16:	a818      	add	r0, sp, #96	@ 0x60
 8022c18:	f7f3 fca6 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022c1c:	4621      	mov	r1, r4
 8022c1e:	a81a      	add	r0, sp, #104	@ 0x68
 8022c20:	f7f3 fcca 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022c24:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	@ 0x64
 8022c28:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8022c2c:	f340 8151 	ble.w	8022ed2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2f2>
 8022c30:	2301      	movs	r3, #1
 8022c32:	b289      	uxth	r1, r1
 8022c34:	9316      	str	r3, [sp, #88]	@ 0x58
 8022c36:	f9bd 006a 	ldrsh.w	r0, [sp, #106]	@ 0x6a
 8022c3a:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	@ 0x66
 8022c3e:	fb90 f4f3 	sdiv	r4, r0, r3
 8022c42:	441a      	add	r2, r3
 8022c44:	3a01      	subs	r2, #1
 8022c46:	fb92 f2f3 	sdiv	r2, r2, r3
 8022c4a:	b2a4      	uxth	r4, r4
 8022c4c:	fb03 0314 	mls	r3, r3, r4, r0
 8022c50:	9415      	str	r4, [sp, #84]	@ 0x54
 8022c52:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 8022c56:	f8bd 6060 	ldrh.w	r6, [sp, #96]	@ 0x60
 8022c5a:	fb13 4101 	smlabb	r1, r3, r1, r4
 8022c5e:	f8bd 5062 	ldrh.w	r5, [sp, #98]	@ 0x62
 8022c62:	4bba      	ldr	r3, [pc, #744]	@ (8022f4c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x36c>)
 8022c64:	4434      	add	r4, r6
 8022c66:	4405      	add	r5, r0
 8022c68:	6818      	ldr	r0, [r3, #0]
 8022c6a:	f8ad 4068 	strh.w	r4, [sp, #104]	@ 0x68
 8022c6e:	f8ad 506a 	strh.w	r5, [sp, #106]	@ 0x6a
 8022c72:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	@ 0x6c
 8022c76:	6803      	ldr	r3, [r0, #0]
 8022c78:	3201      	adds	r2, #1
 8022c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022c7c:	9609      	str	r6, [sp, #36]	@ 0x24
 8022c7e:	fa1f f881 	uxth.w	r8, r1
 8022c82:	b294      	uxth	r4, r2
 8022c84:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	@ 0x6e
 8022c88:	4798      	blx	r3
 8022c8a:	2200      	movs	r2, #0
 8022c8c:	f1b8 0f00 	cmp.w	r8, #0
 8022c90:	bf0c      	ite	eq
 8022c92:	4633      	moveq	r3, r6
 8022c94:	2300      	movne	r3, #0
 8022c96:	49ae      	ldr	r1, [pc, #696]	@ (8022f50 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x370>)
 8022c98:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022c9a:	8809      	ldrh	r1, [r1, #0]
 8022c9c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8022ca0:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	@ 0x68
 8022ca4:	fb01 f505 	mul.w	r5, r1, r5
 8022ca8:	fb01 6202 	mla	r2, r1, r2, r6
 8022cac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022cb0:	1882      	adds	r2, r0, r2
 8022cb2:	b29b      	uxth	r3, r3
 8022cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022cb8:	9200      	str	r2, [sp, #0]
 8022cba:	9302      	str	r3, [sp, #8]
 8022cbc:	442a      	add	r2, r5
 8022cbe:	f109 030e 	add.w	r3, r9, #14
 8022cc2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022cc4:	4647      	mov	r7, r8
 8022cc6:	4613      	mov	r3, r2
 8022cc8:	00a4      	lsls	r4, r4, #2
 8022cca:	1d21      	adds	r1, r4, #4
 8022ccc:	9111      	str	r1, [sp, #68]	@ 0x44
 8022cce:	9206      	str	r2, [sp, #24]
 8022cd0:	9a00      	ldr	r2, [sp, #0]
 8022cd2:	4293      	cmp	r3, r2
 8022cd4:	f240 80f5 	bls.w	8022ec2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2e2>
 8022cd8:	2301      	movs	r3, #1
 8022cda:	2600      	movs	r6, #0
 8022cdc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8022cde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022ce0:	9307      	str	r3, [sp, #28]
 8022ce2:	fa10 f282 	uxtah	r2, r0, r2
 8022ce6:	0092      	lsls	r2, r2, #2
 8022ce8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022cea:	3204      	adds	r2, #4
 8022cec:	4410      	add	r0, r2
 8022cee:	7883      	ldrb	r3, [r0, #2]
 8022cf0:	7845      	ldrb	r5, [r0, #1]
 8022cf2:	021b      	lsls	r3, r3, #8
 8022cf4:	78c0      	ldrb	r0, [r0, #3]
 8022cf6:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8022cfa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8022cfc:	4304      	orrs	r4, r0
 8022cfe:	1928      	adds	r0, r5, r4
 8022d00:	7843      	ldrb	r3, [r0, #1]
 8022d02:	3001      	adds	r0, #1
 8022d04:	9610      	str	r6, [sp, #64]	@ 0x40
 8022d06:	9003      	str	r0, [sp, #12]
 8022d08:	4630      	mov	r0, r6
 8022d0a:	2601      	movs	r6, #1
 8022d0c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8022d10:	46b0      	mov	r8, r6
 8022d12:	fbb7 f1f1 	udiv	r1, r7, r1
 8022d16:	5d2c      	ldrb	r4, [r5, r4]
 8022d18:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8022d1a:	021b      	lsls	r3, r3, #8
 8022d1c:	5caa      	ldrb	r2, [r5, r2]
 8022d1e:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8022d20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8022d24:	431c      	orrs	r4, r3
 8022d26:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022d28:	1a69      	subs	r1, r5, r1
 8022d2a:	3201      	adds	r2, #1
 8022d2c:	f889 400d 	strb.w	r4, [r9, #13]
 8022d30:	9205      	str	r2, [sp, #20]
 8022d32:	b2a4      	uxth	r4, r4
 8022d34:	b28a      	uxth	r2, r1
 8022d36:	9408      	str	r4, [sp, #32]
 8022d38:	9212      	str	r2, [sp, #72]	@ 0x48
 8022d3a:	2f00      	cmp	r7, #0
 8022d3c:	d034      	beq.n	8022da8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1c8>
 8022d3e:	42be      	cmp	r6, r7
 8022d40:	f080 80cf 	bcs.w	8022ee2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x302>
 8022d44:	1bbf      	subs	r7, r7, r6
 8022d46:	b2bf      	uxth	r7, r7
 8022d48:	9b06      	ldr	r3, [sp, #24]
 8022d4a:	9a00      	ldr	r2, [sp, #0]
 8022d4c:	4293      	cmp	r3, r2
 8022d4e:	f240 80b8 	bls.w	8022ec2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2e2>
 8022d52:	9803      	ldr	r0, [sp, #12]
 8022d54:	f1c8 0107 	rsb	r1, r8, #7
 8022d58:	7842      	ldrb	r2, [r0, #1]
 8022d5a:	7803      	ldrb	r3, [r0, #0]
 8022d5c:	408a      	lsls	r2, r1
 8022d5e:	fa43 f308 	asr.w	r3, r3, r8
 8022d62:	0052      	lsls	r2, r2, #1
 8022d64:	f108 0801 	add.w	r8, r8, #1
 8022d68:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022d6c:	b2db      	uxtb	r3, r3
 8022d6e:	fa5f f888 	uxtb.w	r8, r8
 8022d72:	4313      	orrs	r3, r2
 8022d74:	f1b8 0f08 	cmp.w	r8, #8
 8022d78:	b29a      	uxth	r2, r3
 8022d7a:	f000 80e0 	beq.w	8022f3e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x35e>
 8022d7e:	3001      	adds	r0, #1
 8022d80:	9003      	str	r0, [sp, #12]
 8022d82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022d84:	4291      	cmp	r1, r2
 8022d86:	f0c0 80bc 	bcc.w	8022f02 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x322>
 8022d8a:	9905      	ldr	r1, [sp, #20]
 8022d8c:	b2db      	uxtb	r3, r3
 8022d8e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022d92:	f889 300d 	strb.w	r3, [r9, #13]
 8022d96:	f04f 0601 	mov.w	r6, #1
 8022d9a:	f0c0 8121 	bcc.w	8022fe0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x400>
 8022d9e:	e9cd 6207 	strd	r6, r2, [sp, #28]
 8022da2:	2000      	movs	r0, #0
 8022da4:	2f00      	cmp	r7, #0
 8022da6:	d1ca      	bne.n	8022d3e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x15e>
 8022da8:	9b02      	ldr	r3, [sp, #8]
 8022daa:	429e      	cmp	r6, r3
 8022dac:	461a      	mov	r2, r3
 8022dae:	f0c0 80f0 	bcc.w	8022f92 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3b2>
 8022db2:	1af3      	subs	r3, r6, r3
 8022db4:	b29b      	uxth	r3, r3
 8022db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8022db8:	2a00      	cmp	r2, #0
 8022dba:	f000 80cb 	beq.w	8022f54 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x374>
 8022dbe:	4694      	mov	ip, r2
 8022dc0:	970f      	str	r7, [sp, #60]	@ 0x3c
 8022dc2:	9b00      	ldr	r3, [sp, #0]
 8022dc4:	eb00 0e0c 	add.w	lr, r0, ip
 8022dc8:	960c      	str	r6, [sp, #48]	@ 0x30
 8022dca:	970d      	str	r7, [sp, #52]	@ 0x34
 8022dcc:	fa1f fe8e 	uxth.w	lr, lr
 8022dd0:	1cdd      	adds	r5, r3, #3
 8022dd2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8022dd4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8022dd6:	e037      	b.n	8022e48 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x268>
 8022dd8:	9a04      	ldr	r2, [sp, #16]
 8022dda:	9b01      	ldr	r3, [sp, #4]
 8022ddc:	fb02 f101 	mul.w	r1, r2, r1
 8022de0:	1c4a      	adds	r2, r1, #1
 8022de2:	eb02 2121 	add.w	r1, r2, r1, asr #8
 8022de6:	1209      	asrs	r1, r1, #8
 8022de8:	43ca      	mvns	r2, r1
 8022dea:	b289      	uxth	r1, r1
 8022dec:	fb13 f301 	smulbb	r3, r3, r1
 8022df0:	fb1b fb01 	smulbb	fp, fp, r1
 8022df4:	fb1a f101 	smulbb	r1, sl, r1
 8022df8:	f815 ac03 	ldrb.w	sl, [r5, #-3]
 8022dfc:	b2d2      	uxtb	r2, r2
 8022dfe:	fb0a 3302 	mla	r3, sl, r2, r3
 8022e02:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 8022e06:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 8022e0a:	fb04 b402 	mla	r4, r4, r2, fp
 8022e0e:	fb0a 1102 	mla	r1, sl, r2, r1
 8022e12:	b29b      	uxth	r3, r3
 8022e14:	b2a4      	uxth	r4, r4
 8022e16:	b289      	uxth	r1, r1
 8022e18:	f103 0a01 	add.w	sl, r3, #1
 8022e1c:	f104 0b01 	add.w	fp, r4, #1
 8022e20:	1c4a      	adds	r2, r1, #1
 8022e22:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 8022e26:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8022e2a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022e2e:	121b      	asrs	r3, r3, #8
 8022e30:	1224      	asrs	r4, r4, #8
 8022e32:	1209      	asrs	r1, r1, #8
 8022e34:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022e38:	f805 4c02 	strb.w	r4, [r5, #-2]
 8022e3c:	f805 1c01 	strb.w	r1, [r5, #-1]
 8022e40:	4570      	cmp	r0, lr
 8022e42:	f105 0503 	add.w	r5, r5, #3
 8022e46:	d024      	beq.n	8022e92 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2b2>
 8022e48:	2204      	movs	r2, #4
 8022e4a:	eb09 0300 	add.w	r3, r9, r0
 8022e4e:	7b5b      	ldrb	r3, [r3, #13]
 8022e50:	3001      	adds	r0, #1
 8022e52:	fb12 6303 	smlabb	r3, r2, r3, r6
 8022e56:	58fb      	ldr	r3, [r7, r3]
 8022e58:	b280      	uxth	r0, r0
 8022e5a:	0e19      	lsrs	r1, r3, #24
 8022e5c:	d0f0      	beq.n	8022e40 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x260>
 8022e5e:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8022e62:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8022e66:	29ff      	cmp	r1, #255	@ 0xff
 8022e68:	b2db      	uxtb	r3, r3
 8022e6a:	fa5f fb84 	uxtb.w	fp, r4
 8022e6e:	9301      	str	r3, [sp, #4]
 8022e70:	fa5f fa82 	uxtb.w	sl, r2
 8022e74:	d1b0      	bne.n	8022dd8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f8>
 8022e76:	9b04      	ldr	r3, [sp, #16]
 8022e78:	2bff      	cmp	r3, #255	@ 0xff
 8022e7a:	d1ad      	bne.n	8022dd8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1f8>
 8022e7c:	9b01      	ldr	r3, [sp, #4]
 8022e7e:	4570      	cmp	r0, lr
 8022e80:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022e84:	f805 4c02 	strb.w	r4, [r5, #-2]
 8022e88:	f805 2c01 	strb.w	r2, [r5, #-1]
 8022e8c:	f105 0503 	add.w	r5, r5, #3
 8022e90:	d1da      	bne.n	8022e48 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x268>
 8022e92:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	@ 0x30
 8022e96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022e9a:	fa1f fc8c 	uxth.w	ip, ip
 8022e9e:	9b00      	ldr	r3, [sp, #0]
 8022ea0:	f10c 0c01 	add.w	ip, ip, #1
 8022ea4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022ea8:	4463      	add	r3, ip
 8022eaa:	9300      	str	r3, [sp, #0]
 8022eac:	9b02      	ldr	r3, [sp, #8]
 8022eae:	429e      	cmp	r6, r3
 8022eb0:	d251      	bcs.n	8022f56 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x376>
 8022eb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022eb4:	9a00      	ldr	r2, [sp, #0]
 8022eb6:	9302      	str	r3, [sp, #8]
 8022eb8:	9b06      	ldr	r3, [sp, #24]
 8022eba:	4670      	mov	r0, lr
 8022ebc:	4293      	cmp	r3, r2
 8022ebe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8022ec0:	d81b      	bhi.n	8022efa <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x31a>
 8022ec2:	4b22      	ldr	r3, [pc, #136]	@ (8022f4c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x36c>)
 8022ec4:	6818      	ldr	r0, [r3, #0]
 8022ec6:	6803      	ldr	r3, [r0, #0]
 8022ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022eca:	4798      	blx	r3
 8022ecc:	b01d      	add	sp, #116	@ 0x74
 8022ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022ed6:	b289      	uxth	r1, r1
 8022ed8:	fb93 f3f1 	sdiv	r3, r3, r1
 8022edc:	b29a      	uxth	r2, r3
 8022ede:	9216      	str	r2, [sp, #88]	@ 0x58
 8022ee0:	e6a9      	b.n	8022c36 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x56>
 8022ee2:	1bf6      	subs	r6, r6, r7
 8022ee4:	4438      	add	r0, r7
 8022ee6:	2700      	movs	r7, #0
 8022ee8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8022eec:	b2b6      	uxth	r6, r6
 8022eee:	b280      	uxth	r0, r0
 8022ef0:	9302      	str	r3, [sp, #8]
 8022ef2:	9b06      	ldr	r3, [sp, #24]
 8022ef4:	9a00      	ldr	r2, [sp, #0]
 8022ef6:	4293      	cmp	r3, r2
 8022ef8:	d9e3      	bls.n	8022ec2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x2e2>
 8022efa:	2e00      	cmp	r6, #0
 8022efc:	f47f af1d 	bne.w	8022d3a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x15a>
 8022f00:	e727      	b.n	8022d52 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x172>
 8022f02:	9b05      	ldr	r3, [sp, #20]
 8022f04:	429a      	cmp	r2, r3
 8022f06:	d34d      	bcc.n	8022fa4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3c4>
 8022f08:	9807      	ldr	r0, [sp, #28]
 8022f0a:	f899 100d 	ldrb.w	r1, [r9, #13]
 8022f0e:	eb09 0300 	add.w	r3, r9, r0
 8022f12:	7359      	strb	r1, [r3, #13]
 8022f14:	f899 300d 	ldrb.w	r3, [r9, #13]
 8022f18:	1c41      	adds	r1, r0, #1
 8022f1a:	b28e      	uxth	r6, r1
 8022f1c:	9c05      	ldr	r4, [sp, #20]
 8022f1e:	9d08      	ldr	r5, [sp, #32]
 8022f20:	eb09 0084 	add.w	r0, r9, r4, lsl #2
 8022f24:	3401      	adds	r4, #1
 8022f26:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 8022f2a:	b2a3      	uxth	r3, r4
 8022f2c:	f8a0 5050 	strh.w	r5, [r0, #80]	@ 0x50
 8022f30:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 8022f34:	9305      	str	r3, [sp, #20]
 8022f36:	e9cd 6207 	strd	r6, r2, [sp, #28]
 8022f3a:	2000      	movs	r0, #0
 8022f3c:	e6fd      	b.n	8022d3a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x15a>
 8022f3e:	4601      	mov	r1, r0
 8022f40:	3102      	adds	r1, #2
 8022f42:	f04f 0800 	mov.w	r8, #0
 8022f46:	9103      	str	r1, [sp, #12]
 8022f48:	e71b      	b.n	8022d82 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 8022f4a:	bf00      	nop
 8022f4c:	2015a078 	.word	0x2015a078
 8022f50:	2015a072 	.word	0x2015a072
 8022f54:	4686      	mov	lr, r0
 8022f56:	4b30      	ldr	r3, [pc, #192]	@ (8023018 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x438>)
 8022f58:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022f5a:	881b      	ldrh	r3, [r3, #0]
 8022f5c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022f5e:	1a5b      	subs	r3, r3, r1
 8022f60:	9900      	ldr	r1, [sp, #0]
 8022f62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022f66:	4419      	add	r1, r3
 8022f68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022f6a:	3201      	adds	r2, #1
 8022f6c:	429a      	cmp	r2, r3
 8022f6e:	9210      	str	r2, [sp, #64]	@ 0x40
 8022f70:	9100      	str	r1, [sp, #0]
 8022f72:	d038      	beq.n	8022fe6 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x406>
 8022f74:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8022f78:	f8bd 7064 	ldrh.w	r7, [sp, #100]	@ 0x64
 8022f7c:	4670      	mov	r0, lr
 8022f7e:	1aff      	subs	r7, r7, r3
 8022f80:	b2bf      	uxth	r7, r7
 8022f82:	2f00      	cmp	r7, #0
 8022f84:	bf18      	it	ne
 8022f86:	2300      	movne	r3, #0
 8022f88:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8022f8a:	9302      	str	r3, [sp, #8]
 8022f8c:	bf08      	it	eq
 8022f8e:	2700      	moveq	r7, #0
 8022f90:	e7af      	b.n	8022ef2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x312>
 8022f92:	1b9b      	subs	r3, r3, r6
 8022f94:	b29b      	uxth	r3, r3
 8022f96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022f98:	2e00      	cmp	r6, #0
 8022f9a:	f43f aed5 	beq.w	8022d48 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x168>
 8022f9e:	970a      	str	r7, [sp, #40]	@ 0x28
 8022fa0:	46b4      	mov	ip, r6
 8022fa2:	e70e      	b.n	8022dc2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e2>
 8022fa4:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8022fa8:	f893 604f 	ldrb.w	r6, [r3, #79]	@ 0x4f
 8022fac:	4613      	mov	r3, r2
 8022fae:	2e01      	cmp	r6, #1
 8022fb0:	d90d      	bls.n	8022fce <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3ee>
 8022fb2:	f106 010d 	add.w	r1, r6, #13
 8022fb6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8022fb8:	4449      	add	r1, r9
 8022fba:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8022fbe:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8022fc2:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8022fc6:	428c      	cmp	r4, r1
 8022fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8022fcc:	d1f5      	bne.n	8022fba <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x3da>
 8022fce:	9905      	ldr	r1, [sp, #20]
 8022fd0:	b2db      	uxtb	r3, r3
 8022fd2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022fd6:	f889 300d 	strb.w	r3, [r9, #13]
 8022fda:	b2b6      	uxth	r6, r6
 8022fdc:	f4bf aedf 	bcs.w	8022d9e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8022fe0:	9907      	ldr	r1, [sp, #28]
 8022fe2:	3101      	adds	r1, #1
 8022fe4:	e79a      	b.n	8022f1c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x33c>
 8022fe6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8022fea:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 8022fee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022ff0:	1aff      	subs	r7, r7, r3
 8022ff2:	b2bf      	uxth	r7, r7
 8022ff4:	2f00      	cmp	r7, #0
 8022ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022ff8:	bf18      	it	ne
 8022ffa:	2300      	movne	r3, #0
 8022ffc:	3201      	adds	r2, #1
 8022ffe:	b29b      	uxth	r3, r3
 8023000:	9302      	str	r3, [sp, #8]
 8023002:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023004:	9b06      	ldr	r3, [sp, #24]
 8023006:	e663      	b.n	8022cd0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0xf0>
 8023008:	4b04      	ldr	r3, [pc, #16]	@ (802301c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x43c>)
 802300a:	4a05      	ldr	r2, [pc, #20]	@ (8023020 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x440>)
 802300c:	f640 21ae 	movw	r1, #2734	@ 0xaae
 8023010:	4804      	ldr	r0, [pc, #16]	@ (8023024 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h+0x444>)
 8023012:	f008 fdd1 	bl	802bbb8 <__assert_func>
 8023016:	bf00      	nop
 8023018:	2015a072 	.word	0x2015a072
 802301c:	0802ec50 	.word	0x0802ec50
 8023020:	080305a8 	.word	0x080305a8
 8023024:	0802eb5c 	.word	0x0802eb5c

08023028 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8023028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802302c:	4617      	mov	r7, r2
 802302e:	b095      	sub	sp, #84	@ 0x54
 8023030:	8812      	ldrh	r2, [r2, #0]
 8023032:	4688      	mov	r8, r1
 8023034:	f89d 107c 	ldrb.w	r1, [sp, #124]	@ 0x7c
 8023038:	2a01      	cmp	r2, #1
 802303a:	461c      	mov	r4, r3
 802303c:	910d      	str	r1, [sp, #52]	@ 0x34
 802303e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023040:	f040 8105 	bne.w	802324e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8023044:	6820      	ldr	r0, [r4, #0]
 8023046:	6861      	ldr	r1, [r4, #4]
 8023048:	aa10      	add	r2, sp, #64	@ 0x40
 802304a:	c203      	stmia	r2!, {r0, r1}
 802304c:	6818      	ldr	r0, [r3, #0]
 802304e:	6859      	ldr	r1, [r3, #4]
 8023050:	aa12      	add	r2, sp, #72	@ 0x48
 8023052:	c203      	stmia	r2!, {r0, r1}
 8023054:	a810      	add	r0, sp, #64	@ 0x40
 8023056:	f7f3 fa87 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802305a:	4621      	mov	r1, r4
 802305c:	a812      	add	r0, sp, #72	@ 0x48
 802305e:	f7f3 faab 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023062:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	@ 0x48
 8023066:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	@ 0x4a
 802306a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 802306e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8023072:	487a      	ldr	r0, [pc, #488]	@ (802325c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8023074:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8023078:	4422      	add	r2, r4
 802307a:	442b      	add	r3, r5
 802307c:	6800      	ldr	r0, [r0, #0]
 802307e:	fb11 4105 	smlabb	r1, r1, r5, r4
 8023082:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8023086:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 802308a:	6802      	ldr	r2, [r0, #0]
 802308c:	4c74      	ldr	r4, [pc, #464]	@ (8023260 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 802308e:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8023092:	4488      	add	r8, r1
 8023094:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 8023098:	42a3      	cmp	r3, r4
 802309a:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	@ 0x4c
 802309e:	910c      	str	r1, [sp, #48]	@ 0x30
 80230a0:	f040 809f 	bne.w	80231e2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 80230a4:	6841      	ldr	r1, [r0, #4]
 80230a6:	4c6f      	ldr	r4, [pc, #444]	@ (8023264 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 80230a8:	680b      	ldr	r3, [r1, #0]
 80230aa:	699b      	ldr	r3, [r3, #24]
 80230ac:	42a3      	cmp	r3, r4
 80230ae:	f040 80c0 	bne.w	8023232 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20a>
 80230b2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80230b4:	4798      	blx	r3
 80230b6:	4a6c      	ldr	r2, [pc, #432]	@ (8023268 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80230b8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 80230bc:	8814      	ldrh	r4, [r2, #0]
 80230be:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	@ 0x48
 80230c2:	fb04 2303 	mla	r3, r4, r3, r2
 80230c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80230ca:	4418      	add	r0, r3
 80230cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	dd67      	ble.n	80231a2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x17a>
 80230d2:	2300      	movs	r3, #0
 80230d4:	f04f 0903 	mov.w	r9, #3
 80230d8:	2104      	movs	r1, #4
 80230da:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80230dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80230de:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 80230e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80230e4:	f1c5 02ff 	rsb	r2, r5, #255	@ 0xff
 80230e8:	444b      	add	r3, r9
 80230ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80230ec:	b292      	uxth	r2, r2
 80230ee:	fa1f fc85 	uxth.w	ip, r5
 80230f2:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80230f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	dd43      	ble.n	8023184 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x15c>
 80230fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80230fe:	2bff      	cmp	r3, #255	@ 0xff
 8023100:	d057      	beq.n	80231b2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8023102:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023104:	1cc5      	adds	r5, r0, #3
 8023106:	f108 3eff 	add.w	lr, r8, #4294967295
 802310a:	eb00 0a03 	add.w	sl, r0, r3
 802310e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8023112:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 8023116:	fb19 1303 	smlabb	r3, r9, r3, r1
 802311a:	fb16 f402 	smulbb	r4, r6, r2
 802311e:	5cfe      	ldrb	r6, [r7, r3]
 8023120:	443b      	add	r3, r7
 8023122:	fb06 460c 	mla	r6, r6, ip, r4
 8023126:	b2b6      	uxth	r6, r6
 8023128:	f815 4c02 	ldrb.w	r4, [r5, #-2]
 802312c:	f106 0b01 	add.w	fp, r6, #1
 8023130:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8023134:	1236      	asrs	r6, r6, #8
 8023136:	fb14 fb02 	smulbb	fp, r4, r2
 802313a:	f805 6c03 	strb.w	r6, [r5, #-3]
 802313e:	785c      	ldrb	r4, [r3, #1]
 8023140:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8023144:	fb04 b40c 	mla	r4, r4, ip, fp
 8023148:	b2a4      	uxth	r4, r4
 802314a:	f104 0b01 	add.w	fp, r4, #1
 802314e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8023152:	1224      	asrs	r4, r4, #8
 8023154:	fb16 f602 	smulbb	r6, r6, r2
 8023158:	f805 4c02 	strb.w	r4, [r5, #-2]
 802315c:	789b      	ldrb	r3, [r3, #2]
 802315e:	3503      	adds	r5, #3
 8023160:	fb03 630c 	mla	r3, r3, ip, r6
 8023164:	b29b      	uxth	r3, r3
 8023166:	1c5c      	adds	r4, r3, #1
 8023168:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802316c:	121b      	asrs	r3, r3, #8
 802316e:	f805 3c04 	strb.w	r3, [r5, #-4]
 8023172:	45aa      	cmp	sl, r5
 8023174:	d1cb      	bne.n	802310e <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 8023176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023178:	4418      	add	r0, r3
 802317a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802317c:	4498      	add	r8, r3
 802317e:	4b3a      	ldr	r3, [pc, #232]	@ (8023268 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8023180:	881c      	ldrh	r4, [r3, #0]
 8023182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023184:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	@ 0x44
 8023188:	eba4 0e03 	sub.w	lr, r4, r3
 802318c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802318e:	1aed      	subs	r5, r5, r3
 8023190:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8023194:	4418      	add	r0, r3
 8023196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023198:	3601      	adds	r6, #1
 802319a:	42b3      	cmp	r3, r6
 802319c:	960b      	str	r6, [sp, #44]	@ 0x2c
 802319e:	44a8      	add	r8, r5
 80231a0:	d1a9      	bne.n	80230f6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xce>
 80231a2:	4b2e      	ldr	r3, [pc, #184]	@ (802325c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 80231a4:	6818      	ldr	r0, [r3, #0]
 80231a6:	6803      	ldr	r3, [r0, #0]
 80231a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80231aa:	4798      	blx	r3
 80231ac:	b015      	add	sp, #84	@ 0x54
 80231ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80231b4:	1cc4      	adds	r4, r0, #3
 80231b6:	f108 35ff 	add.w	r5, r8, #4294967295
 80231ba:	eb00 0e03 	add.w	lr, r0, r3
 80231be:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80231c2:	3403      	adds	r4, #3
 80231c4:	fb19 1303 	smlabb	r3, r9, r3, r1
 80231c8:	5cfe      	ldrb	r6, [r7, r3]
 80231ca:	443b      	add	r3, r7
 80231cc:	f804 6c06 	strb.w	r6, [r4, #-6]
 80231d0:	785e      	ldrb	r6, [r3, #1]
 80231d2:	f804 6c05 	strb.w	r6, [r4, #-5]
 80231d6:	789b      	ldrb	r3, [r3, #2]
 80231d8:	f804 3c04 	strb.w	r3, [r4, #-4]
 80231dc:	45a6      	cmp	lr, r4
 80231de:	d1ee      	bne.n	80231be <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x196>
 80231e0:	e7c9      	b.n	8023176 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x14e>
 80231e2:	4798      	blx	r3
 80231e4:	4603      	mov	r3, r0
 80231e6:	2b01      	cmp	r3, #1
 80231e8:	d127      	bne.n	802323a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x212>
 80231ea:	4a20      	ldr	r2, [pc, #128]	@ (802326c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 80231ec:	6810      	ldr	r0, [r2, #0]
 80231ee:	b340      	cbz	r0, 8023242 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 80231f0:	f04f 0c0b 	mov.w	ip, #11
 80231f4:	2600      	movs	r6, #0
 80231f6:	4a1c      	ldr	r2, [pc, #112]	@ (8023268 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 80231f8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80231fc:	8814      	ldrh	r4, [r2, #0]
 80231fe:	fa1f f28a 	uxth.w	r2, sl
 8023202:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8023206:	f8bd 5044 	ldrh.w	r5, [sp, #68]	@ 0x44
 802320a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802320c:	9406      	str	r4, [sp, #24]
 802320e:	f8bd 404a 	ldrh.w	r4, [sp, #74]	@ 0x4a
 8023212:	9308      	str	r3, [sp, #32]
 8023214:	9204      	str	r2, [sp, #16]
 8023216:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 802321a:	463a      	mov	r2, r7
 802321c:	4641      	mov	r1, r8
 802321e:	f8cd c01c 	str.w	ip, [sp, #28]
 8023222:	9605      	str	r6, [sp, #20]
 8023224:	9503      	str	r5, [sp, #12]
 8023226:	9400      	str	r4, [sp, #0]
 8023228:	f7f8 ff3a 	bl	801c0a0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802322c:	b015      	add	sp, #84	@ 0x54
 802322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023232:	4608      	mov	r0, r1
 8023234:	4798      	blx	r3
 8023236:	4603      	mov	r3, r0
 8023238:	e7d5      	b.n	80231e6 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 802323a:	4b08      	ldr	r3, [pc, #32]	@ (802325c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 802323c:	6818      	ldr	r0, [r3, #0]
 802323e:	6802      	ldr	r2, [r0, #0]
 8023240:	e737      	b.n	80230b2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8023242:	4b0b      	ldr	r3, [pc, #44]	@ (8023270 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8023244:	4a0b      	ldr	r2, [pc, #44]	@ (8023274 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8023246:	217c      	movs	r1, #124	@ 0x7c
 8023248:	480b      	ldr	r0, [pc, #44]	@ (8023278 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 802324a:	f008 fcb5 	bl	802bbb8 <__assert_func>
 802324e:	4b0b      	ldr	r3, [pc, #44]	@ (802327c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8023250:	4a0b      	ldr	r2, [pc, #44]	@ (8023280 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8023252:	f640 3191 	movw	r1, #2961	@ 0xb91
 8023256:	480b      	ldr	r0, [pc, #44]	@ (8023284 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8023258:	f008 fcae 	bl	802bbb8 <__assert_func>
 802325c:	2015a078 	.word	0x2015a078
 8023260:	080126cd 	.word	0x080126cd
 8023264:	080155bb 	.word	0x080155bb
 8023268:	2015a072 	.word	0x2015a072
 802326c:	2015a1e4 	.word	0x2015a1e4
 8023270:	0802eab8 	.word	0x0802eab8
 8023274:	0802f324 	.word	0x0802f324
 8023278:	0802eae0 	.word	0x0802eae0
 802327c:	0802eb80 	.word	0x0802eb80
 8023280:	0802f844 	.word	0x0802f844
 8023284:	0802eb5c 	.word	0x0802eb5c

08023288 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8023288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802328c:	4615      	mov	r5, r2
 802328e:	7812      	ldrb	r2, [r2, #0]
 8023290:	b08b      	sub	sp, #44	@ 0x2c
 8023292:	2a01      	cmp	r2, #1
 8023294:	461f      	mov	r7, r3
 8023296:	f89d 6054 	ldrb.w	r6, [sp, #84]	@ 0x54
 802329a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802329c:	f040 8213 	bne.w	80236c6 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x43e>
 80232a0:	6838      	ldr	r0, [r7, #0]
 80232a2:	468a      	mov	sl, r1
 80232a4:	6879      	ldr	r1, [r7, #4]
 80232a6:	aa06      	add	r2, sp, #24
 80232a8:	c203      	stmia	r2!, {r0, r1}
 80232aa:	6818      	ldr	r0, [r3, #0]
 80232ac:	6859      	ldr	r1, [r3, #4]
 80232ae:	aa08      	add	r2, sp, #32
 80232b0:	c203      	stmia	r2!, {r0, r1}
 80232b2:	a806      	add	r0, sp, #24
 80232b4:	f7f3 f958 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80232b8:	4639      	mov	r1, r7
 80232ba:	a808      	add	r0, sp, #32
 80232bc:	f7f3 f97c 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80232c0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80232c4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80232c8:	f003 0201 	and.w	r2, r3, #1
 80232cc:	4614      	mov	r4, r2
 80232ce:	9202      	str	r2, [sp, #8]
 80232d0:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 80232d4:	4423      	add	r3, r4
 80232d6:	fb02 1303 	mla	r3, r2, r3, r1
 80232da:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80232de:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80232e2:	4402      	add	r2, r0
 80232e4:	48a9      	ldr	r0, [pc, #676]	@ (802358c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x304>)
 80232e6:	440f      	add	r7, r1
 80232e8:	6800      	ldr	r0, [r0, #0]
 80232ea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80232ee:	f8ad 7020 	strh.w	r7, [sp, #32]
 80232f2:	f8ad 2022 	strh.w	r2, [sp, #34]	@ 0x22
 80232f6:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 80232fa:	f001 0301 	and.w	r3, r1, #1
 80232fe:	6802      	ldr	r2, [r0, #0]
 8023300:	9301      	str	r3, [sp, #4]
 8023302:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8023306:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8023308:	9300      	str	r3, [sp, #0]
 802330a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 802330e:	4790      	blx	r2
 8023310:	4a9f      	ldr	r2, [pc, #636]	@ (8023590 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 8023312:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8023316:	8811      	ldrh	r1, [r2, #0]
 8023318:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 802331c:	2eff      	cmp	r6, #255	@ 0xff
 802331e:	fb01 7303 	mla	r3, r1, r3, r7
 8023322:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023326:	f105 0204 	add.w	r2, r5, #4
 802332a:	4418      	add	r0, r3
 802332c:	f000 8132 	beq.w	8023594 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>
 8023330:	fb04 f401 	mul.w	r4, r4, r1
 8023334:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023338:	1901      	adds	r1, r0, r4
 802333a:	4288      	cmp	r0, r1
 802333c:	9104      	str	r1, [sp, #16]
 802333e:	f080 80aa 	bcs.w	8023496 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8023342:	9b00      	ldr	r3, [sp, #0]
 8023344:	f1c6 07ff 	rsb	r7, r6, #255	@ 0xff
 8023348:	3b01      	subs	r3, #1
 802334a:	b2bf      	uxth	r7, r7
 802334c:	b2b6      	uxth	r6, r6
 802334e:	9305      	str	r3, [sp, #20]
 8023350:	9b01      	ldr	r3, [sp, #4]
 8023352:	2b00      	cmp	r3, #0
 8023354:	f040 80e8 	bne.w	8023528 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2a0>
 8023358:	46d1      	mov	r9, sl
 802335a:	f8dd 8000 	ldr.w	r8, [sp]
 802335e:	f1b8 0f01 	cmp.w	r8, #1
 8023362:	f340 8082 	ble.w	802346a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e2>
 8023366:	f1a8 0302 	sub.w	r3, r8, #2
 802336a:	ea4f 0853 	mov.w	r8, r3, lsr #1
 802336e:	9303      	str	r3, [sp, #12]
 8023370:	f100 0e0c 	add.w	lr, r0, #12
 8023374:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8023378:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
 802337c:	1d84      	adds	r4, r0, #6
 802337e:	f109 3cff 	add.w	ip, r9, #4294967295
 8023382:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8023386:	f814 5c06 	ldrb.w	r5, [r4, #-6]
 802338a:	091b      	lsrs	r3, r3, #4
 802338c:	fb15 f507 	smulbb	r5, r5, r7
 8023390:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023394:	5cd1      	ldrb	r1, [r2, r3]
 8023396:	4413      	add	r3, r2
 8023398:	fb01 5506 	mla	r5, r1, r6, r5
 802339c:	b2ad      	uxth	r5, r5
 802339e:	f814 1c05 	ldrb.w	r1, [r4, #-5]
 80233a2:	f105 0b01 	add.w	fp, r5, #1
 80233a6:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80233aa:	122d      	asrs	r5, r5, #8
 80233ac:	fb11 fb07 	smulbb	fp, r1, r7
 80233b0:	f804 5c06 	strb.w	r5, [r4, #-6]
 80233b4:	7859      	ldrb	r1, [r3, #1]
 80233b6:	f814 5c04 	ldrb.w	r5, [r4, #-4]
 80233ba:	fb01 b106 	mla	r1, r1, r6, fp
 80233be:	b289      	uxth	r1, r1
 80233c0:	f101 0b01 	add.w	fp, r1, #1
 80233c4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80233c8:	1209      	asrs	r1, r1, #8
 80233ca:	fb15 f507 	smulbb	r5, r5, r7
 80233ce:	f804 1c05 	strb.w	r1, [r4, #-5]
 80233d2:	789b      	ldrb	r3, [r3, #2]
 80233d4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80233d8:	fb03 5306 	mla	r3, r3, r6, r5
 80233dc:	b29b      	uxth	r3, r3
 80233de:	1c5d      	adds	r5, r3, #1
 80233e0:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80233e4:	121b      	asrs	r3, r3, #8
 80233e6:	f804 3c04 	strb.w	r3, [r4, #-4]
 80233ea:	f89c 3000 	ldrb.w	r3, [ip]
 80233ee:	fb11 f107 	smulbb	r1, r1, r7
 80233f2:	f003 030f 	and.w	r3, r3, #15
 80233f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80233fa:	5cd5      	ldrb	r5, [r2, r3]
 80233fc:	4413      	add	r3, r2
 80233fe:	fb05 1106 	mla	r1, r5, r6, r1
 8023402:	b28d      	uxth	r5, r1
 8023404:	f105 0b01 	add.w	fp, r5, #1
 8023408:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802340c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023410:	122d      	asrs	r5, r5, #8
 8023412:	fb11 fb07 	smulbb	fp, r1, r7
 8023416:	f804 5c03 	strb.w	r5, [r4, #-3]
 802341a:	7859      	ldrb	r1, [r3, #1]
 802341c:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8023420:	fb01 b106 	mla	r1, r1, r6, fp
 8023424:	b289      	uxth	r1, r1
 8023426:	f101 0b01 	add.w	fp, r1, #1
 802342a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 802342e:	1209      	asrs	r1, r1, #8
 8023430:	fb15 f507 	smulbb	r5, r5, r7
 8023434:	f804 1c02 	strb.w	r1, [r4, #-2]
 8023438:	789b      	ldrb	r3, [r3, #2]
 802343a:	3406      	adds	r4, #6
 802343c:	fb03 5306 	mla	r3, r3, r6, r5
 8023440:	b29b      	uxth	r3, r3
 8023442:	1c59      	adds	r1, r3, #1
 8023444:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023448:	121b      	asrs	r3, r3, #8
 802344a:	f804 3c07 	strb.w	r3, [r4, #-7]
 802344e:	45a6      	cmp	lr, r4
 8023450:	d197      	bne.n	8023382 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xfa>
 8023452:	f108 0301 	add.w	r3, r8, #1
 8023456:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 802345a:	4499      	add	r9, r3
 802345c:	9b03      	ldr	r3, [sp, #12]
 802345e:	ebc8 78c8 	rsb	r8, r8, r8, lsl #31
 8023462:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8023466:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 802346a:	f1b8 0f01 	cmp.w	r8, #1
 802346e:	d01a      	beq.n	80234a6 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21e>
 8023470:	4b47      	ldr	r3, [pc, #284]	@ (8023590 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 8023472:	9c00      	ldr	r4, [sp, #0]
 8023474:	8819      	ldrh	r1, [r3, #0]
 8023476:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802347a:	1b09      	subs	r1, r1, r4
 802347c:	9c02      	ldr	r4, [sp, #8]
 802347e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023482:	4423      	add	r3, r4
 8023484:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8023488:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 802348c:	9b04      	ldr	r3, [sp, #16]
 802348e:	4408      	add	r0, r1
 8023490:	4283      	cmp	r3, r0
 8023492:	f63f af5d 	bhi.w	8023350 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xc8>
 8023496:	4b3d      	ldr	r3, [pc, #244]	@ (802358c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x304>)
 8023498:	6818      	ldr	r0, [r3, #0]
 802349a:	6803      	ldr	r3, [r0, #0]
 802349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802349e:	4798      	blx	r3
 80234a0:	b00b      	add	sp, #44	@ 0x2c
 80234a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234a6:	f899 3000 	ldrb.w	r3, [r9]
 80234aa:	7801      	ldrb	r1, [r0, #0]
 80234ac:	091b      	lsrs	r3, r3, #4
 80234ae:	fb11 f407 	smulbb	r4, r1, r7
 80234b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80234b6:	5cd1      	ldrb	r1, [r2, r3]
 80234b8:	4413      	add	r3, r2
 80234ba:	fb01 4106 	mla	r1, r1, r6, r4
 80234be:	b289      	uxth	r1, r1
 80234c0:	7844      	ldrb	r4, [r0, #1]
 80234c2:	1c4d      	adds	r5, r1, #1
 80234c4:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80234c8:	1209      	asrs	r1, r1, #8
 80234ca:	fb14 f507 	smulbb	r5, r4, r7
 80234ce:	7001      	strb	r1, [r0, #0]
 80234d0:	785c      	ldrb	r4, [r3, #1]
 80234d2:	7881      	ldrb	r1, [r0, #2]
 80234d4:	fb04 5406 	mla	r4, r4, r6, r5
 80234d8:	b2a4      	uxth	r4, r4
 80234da:	1c65      	adds	r5, r4, #1
 80234dc:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 80234e0:	1224      	asrs	r4, r4, #8
 80234e2:	fb11 f507 	smulbb	r5, r1, r7
 80234e6:	7044      	strb	r4, [r0, #1]
 80234e8:	7899      	ldrb	r1, [r3, #2]
 80234ea:	4b29      	ldr	r3, [pc, #164]	@ (8023590 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 80234ec:	fb01 5106 	mla	r1, r1, r6, r5
 80234f0:	b289      	uxth	r1, r1
 80234f2:	1c4c      	adds	r4, r1, #1
 80234f4:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80234f8:	881b      	ldrh	r3, [r3, #0]
 80234fa:	9c00      	ldr	r4, [sp, #0]
 80234fc:	1209      	asrs	r1, r1, #8
 80234fe:	1b1b      	subs	r3, r3, r4
 8023500:	7081      	strb	r1, [r0, #2]
 8023502:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023506:	3303      	adds	r3, #3
 8023508:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 802350c:	9c02      	ldr	r4, [sp, #8]
 802350e:	4418      	add	r0, r3
 8023510:	9b04      	ldr	r3, [sp, #16]
 8023512:	4421      	add	r1, r4
 8023514:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8023518:	4283      	cmp	r3, r0
 802351a:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
 802351e:	d9ba      	bls.n	8023496 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8023520:	9b01      	ldr	r3, [sp, #4]
 8023522:	2b00      	cmp	r3, #0
 8023524:	f43f af18 	beq.w	8023358 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xd0>
 8023528:	f89a 3000 	ldrb.w	r3, [sl]
 802352c:	7804      	ldrb	r4, [r0, #0]
 802352e:	f003 030f 	and.w	r3, r3, #15
 8023532:	fb14 f107 	smulbb	r1, r4, r7
 8023536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802353a:	5cd4      	ldrb	r4, [r2, r3]
 802353c:	4413      	add	r3, r2
 802353e:	fb04 1406 	mla	r4, r4, r6, r1
 8023542:	b2a4      	uxth	r4, r4
 8023544:	7841      	ldrb	r1, [r0, #1]
 8023546:	1c65      	adds	r5, r4, #1
 8023548:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 802354c:	1224      	asrs	r4, r4, #8
 802354e:	fb11 fc07 	smulbb	ip, r1, r7
 8023552:	7004      	strb	r4, [r0, #0]
 8023554:	7859      	ldrb	r1, [r3, #1]
 8023556:	7885      	ldrb	r5, [r0, #2]
 8023558:	fb01 c106 	mla	r1, r1, r6, ip
 802355c:	b289      	uxth	r1, r1
 802355e:	1c4c      	adds	r4, r1, #1
 8023560:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8023564:	1209      	asrs	r1, r1, #8
 8023566:	fb15 f407 	smulbb	r4, r5, r7
 802356a:	7041      	strb	r1, [r0, #1]
 802356c:	789b      	ldrb	r3, [r3, #2]
 802356e:	f10a 0901 	add.w	r9, sl, #1
 8023572:	fb03 4306 	mla	r3, r3, r6, r4
 8023576:	b29b      	uxth	r3, r3
 8023578:	1c59      	adds	r1, r3, #1
 802357a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802357e:	121b      	asrs	r3, r3, #8
 8023580:	7083      	strb	r3, [r0, #2]
 8023582:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8023586:	3003      	adds	r0, #3
 8023588:	e6e9      	b.n	802335e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xd6>
 802358a:	bf00      	nop
 802358c:	2015a078 	.word	0x2015a078
 8023590:	2015a072 	.word	0x2015a072
 8023594:	fb04 f101 	mul.w	r1, r4, r1
 8023598:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802359c:	eb00 0e01 	add.w	lr, r0, r1
 80235a0:	4570      	cmp	r0, lr
 80235a2:	f4bf af78 	bcs.w	8023496 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 80235a6:	9b00      	ldr	r3, [sp, #0]
 80235a8:	4698      	mov	r8, r3
 80235aa:	f103 39ff 	add.w	r9, r3, #4294967295
 80235ae:	9b01      	ldr	r3, [sp, #4]
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	d072      	beq.n	802369a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x412>
 80235b4:	464e      	mov	r6, r9
 80235b6:	f89a 3000 	ldrb.w	r3, [sl]
 80235ba:	f10a 0c01 	add.w	ip, sl, #1
 80235be:	f003 030f 	and.w	r3, r3, #15
 80235c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80235c6:	5cd1      	ldrb	r1, [r2, r3]
 80235c8:	4413      	add	r3, r2
 80235ca:	7001      	strb	r1, [r0, #0]
 80235cc:	7859      	ldrb	r1, [r3, #1]
 80235ce:	3003      	adds	r0, #3
 80235d0:	f800 1c02 	strb.w	r1, [r0, #-2]
 80235d4:	789b      	ldrb	r3, [r3, #2]
 80235d6:	f800 3c01 	strb.w	r3, [r0, #-1]
 80235da:	2e01      	cmp	r6, #1
 80235dc:	dd39      	ble.n	8023652 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3ca>
 80235de:	3e02      	subs	r6, #2
 80235e0:	0877      	lsrs	r7, r6, #1
 80235e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80235e6:	f100 050c 	add.w	r5, r0, #12
 80235ea:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80235ee:	1d81      	adds	r1, r0, #6
 80235f0:	f10c 34ff 	add.w	r4, ip, #4294967295
 80235f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80235f8:	3106      	adds	r1, #6
 80235fa:	091b      	lsrs	r3, r3, #4
 80235fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023600:	f812 b003 	ldrb.w	fp, [r2, r3]
 8023604:	4413      	add	r3, r2
 8023606:	f801 bc0c 	strb.w	fp, [r1, #-12]
 802360a:	f893 b001 	ldrb.w	fp, [r3, #1]
 802360e:	f801 bc0b 	strb.w	fp, [r1, #-11]
 8023612:	789b      	ldrb	r3, [r3, #2]
 8023614:	f801 3c0a 	strb.w	r3, [r1, #-10]
 8023618:	7823      	ldrb	r3, [r4, #0]
 802361a:	f003 030f 	and.w	r3, r3, #15
 802361e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023622:	f812 b003 	ldrb.w	fp, [r2, r3]
 8023626:	4413      	add	r3, r2
 8023628:	f801 bc09 	strb.w	fp, [r1, #-9]
 802362c:	f893 b001 	ldrb.w	fp, [r3, #1]
 8023630:	f801 bc08 	strb.w	fp, [r1, #-8]
 8023634:	789b      	ldrb	r3, [r3, #2]
 8023636:	f801 3c07 	strb.w	r3, [r1, #-7]
 802363a:	428d      	cmp	r5, r1
 802363c:	d1da      	bne.n	80235f4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x36c>
 802363e:	1c7b      	adds	r3, r7, #1
 8023640:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8023644:	ebc7 77c7 	rsb	r7, r7, r7, lsl #31
 8023648:	449c      	add	ip, r3
 802364a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802364e:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 8023652:	2e01      	cmp	r6, #1
 8023654:	d124      	bne.n	80236a0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x418>
 8023656:	f89c 3000 	ldrb.w	r3, [ip]
 802365a:	9c02      	ldr	r4, [sp, #8]
 802365c:	091b      	lsrs	r3, r3, #4
 802365e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023662:	5cd1      	ldrb	r1, [r2, r3]
 8023664:	4413      	add	r3, r2
 8023666:	7001      	strb	r1, [r0, #0]
 8023668:	7859      	ldrb	r1, [r3, #1]
 802366a:	7041      	strb	r1, [r0, #1]
 802366c:	7899      	ldrb	r1, [r3, #2]
 802366e:	4b19      	ldr	r3, [pc, #100]	@ (80236d4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x44c>)
 8023670:	7081      	strb	r1, [r0, #2]
 8023672:	881b      	ldrh	r3, [r3, #0]
 8023674:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8023678:	eba3 0308 	sub.w	r3, r3, r8
 802367c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023680:	3303      	adds	r3, #3
 8023682:	4421      	add	r1, r4
 8023684:	4418      	add	r0, r3
 8023686:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 802368a:	4586      	cmp	lr, r0
 802368c:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
 8023690:	f67f af01 	bls.w	8023496 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 8023694:	9b01      	ldr	r3, [sp, #4]
 8023696:	2b00      	cmp	r3, #0
 8023698:	d18c      	bne.n	80235b4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x32c>
 802369a:	46d4      	mov	ip, sl
 802369c:	4646      	mov	r6, r8
 802369e:	e79c      	b.n	80235da <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x352>
 80236a0:	4b0c      	ldr	r3, [pc, #48]	@ (80236d4 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x44c>)
 80236a2:	9c02      	ldr	r4, [sp, #8]
 80236a4:	8819      	ldrh	r1, [r3, #0]
 80236a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80236aa:	eba1 0108 	sub.w	r1, r1, r8
 80236ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80236b2:	4423      	add	r3, r4
 80236b4:	4408      	add	r0, r1
 80236b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80236ba:	4586      	cmp	lr, r0
 80236bc:	eb0a 0a63 	add.w	sl, sl, r3, asr #1
 80236c0:	f63f af75 	bhi.w	80235ae <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x326>
 80236c4:	e6e7      	b.n	8023496 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20e>
 80236c6:	4b04      	ldr	r3, [pc, #16]	@ (80236d8 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x450>)
 80236c8:	4a04      	ldr	r2, [pc, #16]	@ (80236dc <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x454>)
 80236ca:	f640 31da 	movw	r1, #3034	@ 0xbda
 80236ce:	4804      	ldr	r0, [pc, #16]	@ (80236e0 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x458>)
 80236d0:	f008 fa72 	bl	802bbb8 <__assert_func>
 80236d4:	2015a072 	.word	0x2015a072
 80236d8:	0802ec20 	.word	0x0802ec20
 80236dc:	0802fb84 	.word	0x0802fb84
 80236e0:	0802eb5c 	.word	0x0802eb5c

080236e4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 80236e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236e8:	b08d      	sub	sp, #52	@ 0x34
 80236ea:	7814      	ldrb	r4, [r2, #0]
 80236ec:	461d      	mov	r5, r3
 80236ee:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
 80236f2:	2c01      	cmp	r4, #1
 80236f4:	9204      	str	r2, [sp, #16]
 80236f6:	9302      	str	r3, [sp, #8]
 80236f8:	f040 8133 	bne.w	8023962 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x27e>
 80236fc:	b913      	cbnz	r3, 8023704 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x20>
 80236fe:	b00d      	add	sp, #52	@ 0x34
 8023700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023704:	6828      	ldr	r0, [r5, #0]
 8023706:	4689      	mov	r9, r1
 8023708:	6869      	ldr	r1, [r5, #4]
 802370a:	ab08      	add	r3, sp, #32
 802370c:	c303      	stmia	r3!, {r0, r1}
 802370e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023710:	6818      	ldr	r0, [r3, #0]
 8023712:	6859      	ldr	r1, [r3, #4]
 8023714:	ab0a      	add	r3, sp, #40	@ 0x28
 8023716:	c303      	stmia	r3!, {r0, r1}
 8023718:	a808      	add	r0, sp, #32
 802371a:	f7f2 ff25 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802371e:	4629      	mov	r1, r5
 8023720:	a80a      	add	r0, sp, #40	@ 0x28
 8023722:	f7f2 ff49 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023726:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802372a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 802372e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023732:	bfdd      	ittte	le
 8023734:	f44f 6480 	movle.w	r4, #1024	@ 0x400
 8023738:	b29a      	uxthle	r2, r3
 802373a:	fb94 f4f2 	sdivle	r4, r4, r2
 802373e:	b29a      	uxthgt	r2, r3
 8023740:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8023744:	fb93 f0f4 	sdiv	r0, r3, r4
 8023748:	b286      	uxth	r6, r0
 802374a:	fb04 3816 	mls	r8, r4, r6, r3
 802374e:	fb18 1802 	smlabb	r8, r8, r2, r1
 8023752:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	@ 0x26
 8023756:	fa1f f888 	uxth.w	r8, r8
 802375a:	4422      	add	r2, r4
 802375c:	3a01      	subs	r2, #1
 802375e:	fb92 f4f4 	sdiv	r4, r2, r4
 8023762:	2e00      	cmp	r6, #0
 8023764:	f040 80f7 	bne.w	8023956 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x272>
 8023768:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 802376c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8023770:	4413      	add	r3, r2
 8023772:	4a7f      	ldr	r2, [pc, #508]	@ (8023970 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 8023774:	4401      	add	r1, r0
 8023776:	6810      	ldr	r0, [r2, #0]
 8023778:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802377c:	f8ad 1028 	strh.w	r1, [sp, #40]	@ 0x28
 8023780:	4616      	mov	r6, r2
 8023782:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8023786:	6803      	ldr	r3, [r0, #0]
 8023788:	9207      	str	r2, [sp, #28]
 802378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802378c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8023790:	4798      	blx	r3
 8023792:	f1b8 0f00 	cmp.w	r8, #0
 8023796:	bf0c      	ite	eq
 8023798:	4633      	moveq	r3, r6
 802379a:	2300      	movne	r3, #0
 802379c:	4975      	ldr	r1, [pc, #468]	@ (8023974 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 802379e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80237a2:	8809      	ldrh	r1, [r1, #0]
 80237a4:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80237a8:	fb01 f505 	mul.w	r5, r1, r5
 80237ac:	fb01 6202 	mla	r2, r1, r2, r6
 80237b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80237b4:	4410      	add	r0, r2
 80237b6:	b2a4      	uxth	r4, r4
 80237b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80237bc:	1942      	adds	r2, r0, r5
 80237be:	00a4      	lsls	r4, r4, #2
 80237c0:	1d21      	adds	r1, r4, #4
 80237c2:	4290      	cmp	r0, r2
 80237c4:	9200      	str	r2, [sp, #0]
 80237c6:	9106      	str	r1, [sp, #24]
 80237c8:	fa1f fa83 	uxth.w	sl, r3
 80237cc:	d225      	bcs.n	802381a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x136>
 80237ce:	2500      	movs	r5, #0
 80237d0:	4686      	mov	lr, r0
 80237d2:	4640      	mov	r0, r8
 80237d4:	9b02      	ldr	r3, [sp, #8]
 80237d6:	9501      	str	r5, [sp, #4]
 80237d8:	f1c3 07ff 	rsb	r7, r3, #255	@ 0xff
 80237dc:	b2bf      	uxth	r7, r7
 80237de:	fa1f fc83 	uxth.w	ip, r3
 80237e2:	b985      	cbnz	r5, 8023806 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x122>
 80237e4:	f899 2000 	ldrb.w	r2, [r9]
 80237e8:	0995      	lsrs	r5, r2, #6
 80237ea:	1e6b      	subs	r3, r5, #1
 80237ec:	2b02      	cmp	r3, #2
 80237ee:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80237f2:	bf88      	it	hi
 80237f4:	f899 5001 	ldrbhi.w	r5, [r9, #1]
 80237f8:	9201      	str	r2, [sp, #4]
 80237fa:	bf9a      	itte	ls
 80237fc:	f109 0901 	addls.w	r9, r9, #1
 8023800:	b2ad      	uxthls	r5, r5
 8023802:	f109 0902 	addhi.w	r9, r9, #2
 8023806:	b180      	cbz	r0, 802382a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x146>
 8023808:	4285      	cmp	r5, r0
 802380a:	f080 809e 	bcs.w	802394a <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x266>
 802380e:	1b40      	subs	r0, r0, r5
 8023810:	2500      	movs	r5, #0
 8023812:	b280      	uxth	r0, r0
 8023814:	9b00      	ldr	r3, [sp, #0]
 8023816:	4573      	cmp	r3, lr
 8023818:	d8e3      	bhi.n	80237e2 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0xfe>
 802381a:	4b55      	ldr	r3, [pc, #340]	@ (8023970 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x28c>)
 802381c:	6818      	ldr	r0, [r3, #0]
 802381e:	6803      	ldr	r3, [r0, #0]
 8023820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023822:	4798      	blx	r3
 8023824:	b00d      	add	sp, #52	@ 0x34
 8023826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802382a:	2303      	movs	r3, #3
 802382c:	4619      	mov	r1, r3
 802382e:	9a06      	ldr	r2, [sp, #24]
 8023830:	9b01      	ldr	r3, [sp, #4]
 8023832:	4555      	cmp	r5, sl
 8023834:	fb11 2403 	smlabb	r4, r1, r3, r2
 8023838:	9b04      	ldr	r3, [sp, #16]
 802383a:	441c      	add	r4, r3
 802383c:	d360      	bcc.n	8023900 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x21c>
 802383e:	eba5 030a 	sub.w	r3, r5, sl
 8023842:	b29b      	uxth	r3, r3
 8023844:	9303      	str	r3, [sp, #12]
 8023846:	9b02      	ldr	r3, [sp, #8]
 8023848:	4656      	mov	r6, sl
 802384a:	2bff      	cmp	r3, #255	@ 0xff
 802384c:	9005      	str	r0, [sp, #20]
 802384e:	d060      	beq.n	8023912 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x22e>
 8023850:	2e00      	cmp	r6, #0
 8023852:	d03b      	beq.n	80238cc <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e8>
 8023854:	3e01      	subs	r6, #1
 8023856:	b2b6      	uxth	r6, r6
 8023858:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 802385c:	f10e 0806 	add.w	r8, lr, #6
 8023860:	4498      	add	r8, r3
 8023862:	f10e 0103 	add.w	r1, lr, #3
 8023866:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 802386a:	7823      	ldrb	r3, [r4, #0]
 802386c:	fb12 f207 	smulbb	r2, r2, r7
 8023870:	fb03 230c 	mla	r3, r3, ip, r2
 8023874:	b29b      	uxth	r3, r3
 8023876:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 802387a:	f103 0b01 	add.w	fp, r3, #1
 802387e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8023882:	121b      	asrs	r3, r3, #8
 8023884:	fb12 fb07 	smulbb	fp, r2, r7
 8023888:	f801 3c03 	strb.w	r3, [r1, #-3]
 802388c:	7862      	ldrb	r2, [r4, #1]
 802388e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8023892:	fb02 b20c 	mla	r2, r2, ip, fp
 8023896:	b292      	uxth	r2, r2
 8023898:	f102 0b01 	add.w	fp, r2, #1
 802389c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80238a0:	1212      	asrs	r2, r2, #8
 80238a2:	fb13 fb07 	smulbb	fp, r3, r7
 80238a6:	f801 2c02 	strb.w	r2, [r1, #-2]
 80238aa:	78a3      	ldrb	r3, [r4, #2]
 80238ac:	3103      	adds	r1, #3
 80238ae:	fb03 b30c 	mla	r3, r3, ip, fp
 80238b2:	b29b      	uxth	r3, r3
 80238b4:	1c5a      	adds	r2, r3, #1
 80238b6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80238ba:	121b      	asrs	r3, r3, #8
 80238bc:	f801 3c04 	strb.w	r3, [r1, #-4]
 80238c0:	4541      	cmp	r1, r8
 80238c2:	d1d0      	bne.n	8023866 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x182>
 80238c4:	3601      	adds	r6, #1
 80238c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80238ca:	44b6      	add	lr, r6
 80238cc:	4555      	cmp	r5, sl
 80238ce:	d313      	bcc.n	80238f8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x214>
 80238d0:	9a07      	ldr	r2, [sp, #28]
 80238d2:	4b28      	ldr	r3, [pc, #160]	@ (8023974 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x290>)
 80238d4:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 80238d8:	fa1f fa82 	uxth.w	sl, r2
 80238dc:	881b      	ldrh	r3, [r3, #0]
 80238de:	eba0 000a 	sub.w	r0, r0, sl
 80238e2:	b280      	uxth	r0, r0
 80238e4:	1a9b      	subs	r3, r3, r2
 80238e6:	2800      	cmp	r0, #0
 80238e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80238ec:	9d03      	ldr	r5, [sp, #12]
 80238ee:	bf18      	it	ne
 80238f0:	f04f 0a00 	movne.w	sl, #0
 80238f4:	449e      	add	lr, r3
 80238f6:	e78d      	b.n	8023814 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x130>
 80238f8:	9d03      	ldr	r5, [sp, #12]
 80238fa:	f8dd a014 	ldr.w	sl, [sp, #20]
 80238fe:	e789      	b.n	8023814 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x130>
 8023900:	ebaa 0305 	sub.w	r3, sl, r5
 8023904:	b29b      	uxth	r3, r3
 8023906:	9305      	str	r3, [sp, #20]
 8023908:	9b02      	ldr	r3, [sp, #8]
 802390a:	462e      	mov	r6, r5
 802390c:	2bff      	cmp	r3, #255	@ 0xff
 802390e:	9003      	str	r0, [sp, #12]
 8023910:	d19e      	bne.n	8023850 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x16c>
 8023912:	2e00      	cmp	r6, #0
 8023914:	d0da      	beq.n	80238cc <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e8>
 8023916:	3e01      	subs	r6, #1
 8023918:	b2b2      	uxth	r2, r6
 802391a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 802391e:	f10e 0606 	add.w	r6, lr, #6
 8023922:	441e      	add	r6, r3
 8023924:	f10e 0303 	add.w	r3, lr, #3
 8023928:	7821      	ldrb	r1, [r4, #0]
 802392a:	3303      	adds	r3, #3
 802392c:	f803 1c06 	strb.w	r1, [r3, #-6]
 8023930:	7861      	ldrb	r1, [r4, #1]
 8023932:	f803 1c05 	strb.w	r1, [r3, #-5]
 8023936:	78a1      	ldrb	r1, [r4, #2]
 8023938:	f803 1c04 	strb.w	r1, [r3, #-4]
 802393c:	429e      	cmp	r6, r3
 802393e:	d1f3      	bne.n	8023928 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x244>
 8023940:	3201      	adds	r2, #1
 8023942:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023946:	4496      	add	lr, r2
 8023948:	e7c0      	b.n	80238cc <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e8>
 802394a:	1a2d      	subs	r5, r5, r0
 802394c:	b2ad      	uxth	r5, r5
 802394e:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8023952:	2000      	movs	r0, #0
 8023954:	e75e      	b.n	8023814 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x130>
 8023956:	9a04      	ldr	r2, [sp, #16]
 8023958:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802395c:	ba12      	rev	r2, r2
 802395e:	4491      	add	r9, r2
 8023960:	e702      	b.n	8023768 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x84>
 8023962:	4b05      	ldr	r3, [pc, #20]	@ (8023978 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x294>)
 8023964:	4a05      	ldr	r2, [pc, #20]	@ (802397c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x298>)
 8023966:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
 802396a:	4805      	ldr	r0, [pc, #20]	@ (8023980 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x29c>)
 802396c:	f008 f924 	bl	802bbb8 <__assert_func>
 8023970:	2015a078 	.word	0x2015a078
 8023974:	2015a072 	.word	0x2015a072
 8023978:	0802ec20 	.word	0x0802ec20
 802397c:	0802fd28 	.word	0x0802fd28
 8023980:	0802eb5c 	.word	0x0802eb5c

08023984 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>:
 8023984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023988:	b09b      	sub	sp, #108	@ 0x6c
 802398a:	7814      	ldrb	r4, [r2, #0]
 802398c:	461d      	mov	r5, r3
 802398e:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8023992:	2c01      	cmp	r4, #1
 8023994:	9210      	str	r2, [sp, #64]	@ 0x40
 8023996:	9112      	str	r1, [sp, #72]	@ 0x48
 8023998:	930d      	str	r3, [sp, #52]	@ 0x34
 802399a:	f040 820f 	bne.w	8023dbc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x438>
 802399e:	b913      	cbnz	r3, 80239a6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x22>
 80239a0:	b01b      	add	sp, #108	@ 0x6c
 80239a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239a6:	6869      	ldr	r1, [r5, #4]
 80239a8:	4681      	mov	r9, r0
 80239aa:	6828      	ldr	r0, [r5, #0]
 80239ac:	ab16      	add	r3, sp, #88	@ 0x58
 80239ae:	c303      	stmia	r3!, {r0, r1}
 80239b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80239b2:	6818      	ldr	r0, [r3, #0]
 80239b4:	6859      	ldr	r1, [r3, #4]
 80239b6:	ab18      	add	r3, sp, #96	@ 0x60
 80239b8:	c303      	stmia	r3!, {r0, r1}
 80239ba:	a816      	add	r0, sp, #88	@ 0x58
 80239bc:	f7f2 fdd4 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239c0:	4629      	mov	r1, r5
 80239c2:	a818      	add	r0, sp, #96	@ 0x60
 80239c4:	f7f2 fdf8 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80239c8:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	@ 0x5c
 80239cc:	f5ba 6f80 	cmp.w	sl, #1024	@ 0x400
 80239d0:	f340 814e 	ble.w	8023c70 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2ec>
 80239d4:	fa1f f08a 	uxth.w	r0, sl
 80239d8:	9414      	str	r4, [sp, #80]	@ 0x50
 80239da:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	@ 0x62
 80239de:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 80239e2:	fb93 f1f4 	sdiv	r1, r3, r4
 80239e6:	4422      	add	r2, r4
 80239e8:	3a01      	subs	r2, #1
 80239ea:	fb92 f2f4 	sdiv	r2, r2, r4
 80239ee:	b289      	uxth	r1, r1
 80239f0:	fb04 3411 	mls	r4, r4, r1, r3
 80239f4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80239f6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80239fa:	f8bd 6058 	ldrh.w	r6, [sp, #88]	@ 0x58
 80239fe:	fb14 1a00 	smlabb	sl, r4, r0, r1
 8023a02:	f8bd 505a 	ldrh.w	r5, [sp, #90]	@ 0x5a
 8023a06:	48bc      	ldr	r0, [pc, #752]	@ (8023cf8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x374>)
 8023a08:	4431      	add	r1, r6
 8023a0a:	442b      	add	r3, r5
 8023a0c:	6800      	ldr	r0, [r0, #0]
 8023a0e:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8023a12:	f8ad 3062 	strh.w	r3, [sp, #98]	@ 0x62
 8023a16:	f9bd 7064 	ldrsh.w	r7, [sp, #100]	@ 0x64
 8023a1a:	6803      	ldr	r3, [r0, #0]
 8023a1c:	3201      	adds	r2, #1
 8023a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a20:	970a      	str	r7, [sp, #40]	@ 0x28
 8023a22:	b294      	uxth	r4, r2
 8023a24:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8023a28:	4798      	blx	r3
 8023a2a:	2200      	movs	r2, #0
 8023a2c:	fa1f f68a 	uxth.w	r6, sl
 8023a30:	2e00      	cmp	r6, #0
 8023a32:	bf0c      	ite	eq
 8023a34:	463b      	moveq	r3, r7
 8023a36:	2300      	movne	r3, #0
 8023a38:	49b0      	ldr	r1, [pc, #704]	@ (8023cfc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x378>)
 8023a3a:	9602      	str	r6, [sp, #8]
 8023a3c:	8809      	ldrh	r1, [r1, #0]
 8023a3e:	9211      	str	r2, [sp, #68]	@ 0x44
 8023a40:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	@ 0x60
 8023a44:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8023a48:	fb01 f505 	mul.w	r5, r1, r5
 8023a4c:	fb01 6202 	mla	r2, r1, r2, r6
 8023a50:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8023a52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a56:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8023a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023a5e:	1881      	adds	r1, r0, r2
 8023a60:	9101      	str	r1, [sp, #4]
 8023a62:	fa1f fe83 	uxth.w	lr, r3
 8023a66:	4429      	add	r1, r5
 8023a68:	f109 030e 	add.w	r3, r9, #14
 8023a6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8023a6e:	460b      	mov	r3, r1
 8023a70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023a72:	464f      	mov	r7, r9
 8023a74:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8023a78:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8023a7c:	f104 0c04 	add.w	ip, r4, #4
 8023a80:	9106      	str	r1, [sp, #24]
 8023a82:	fa1f f882 	uxth.w	r8, r2
 8023a86:	9a01      	ldr	r2, [sp, #4]
 8023a88:	4293      	cmp	r3, r2
 8023a8a:	f240 8101 	bls.w	8023c90 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>
 8023a8e:	2200      	movs	r2, #0
 8023a90:	2601      	movs	r6, #1
 8023a92:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023a94:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023a96:	920c      	str	r2, [sp, #48]	@ 0x30
 8023a98:	fa10 f481 	uxtah	r4, r0, r1
 8023a9c:	00a4      	lsls	r4, r4, #2
 8023a9e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8023aa0:	3404      	adds	r4, #4
 8023aa2:	4421      	add	r1, r4
 8023aa4:	788a      	ldrb	r2, [r1, #2]
 8023aa6:	784d      	ldrb	r5, [r1, #1]
 8023aa8:	0212      	lsls	r2, r2, #8
 8023aaa:	78c9      	ldrb	r1, [r1, #3]
 8023aac:	ea42 4005 	orr.w	r0, r2, r5, lsl #16
 8023ab0:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8023ab2:	4308      	orrs	r0, r1
 8023ab4:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8023ab8:	1829      	adds	r1, r5, r0
 8023aba:	5c28      	ldrb	r0, [r5, r0]
 8023abc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023abe:	fbb9 f3f3 	udiv	r3, r9, r3
 8023ac2:	5d2c      	ldrb	r4, [r5, r4]
 8023ac4:	784a      	ldrb	r2, [r1, #1]
 8023ac6:	4431      	add	r1, r6
 8023ac8:	940e      	str	r4, [sp, #56]	@ 0x38
 8023aca:	9104      	str	r1, [sp, #16]
 8023acc:	f04f 0a00 	mov.w	sl, #0
 8023ad0:	19a1      	adds	r1, r4, r6
 8023ad2:	4634      	mov	r4, r6
 8023ad4:	0212      	lsls	r2, r2, #8
 8023ad6:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8023ada:	4302      	orrs	r2, r0
 8023adc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8023ade:	f8bd 5034 	ldrh.w	r5, [sp, #52]	@ 0x34
 8023ae2:	1ac3      	subs	r3, r0, r3
 8023ae4:	b29b      	uxth	r3, r3
 8023ae6:	b290      	uxth	r0, r2
 8023ae8:	9609      	str	r6, [sp, #36]	@ 0x24
 8023aea:	737a      	strb	r2, [r7, #13]
 8023aec:	9008      	str	r0, [sp, #32]
 8023aee:	9105      	str	r1, [sp, #20]
 8023af0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023af2:	9603      	str	r6, [sp, #12]
 8023af4:	f1b9 0f00 	cmp.w	r9, #0
 8023af8:	d035      	beq.n	8023b66 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1e2>
 8023afa:	45a1      	cmp	r9, r4
 8023afc:	f240 8100 	bls.w	8023d00 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x37c>
 8023b00:	9b06      	ldr	r3, [sp, #24]
 8023b02:	9a01      	ldr	r2, [sp, #4]
 8023b04:	eba9 0904 	sub.w	r9, r9, r4
 8023b08:	4293      	cmp	r3, r2
 8023b0a:	fa1f f989 	uxth.w	r9, r9
 8023b0e:	f240 80bf 	bls.w	8023c90 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>
 8023b12:	9804      	ldr	r0, [sp, #16]
 8023b14:	9c03      	ldr	r4, [sp, #12]
 8023b16:	7842      	ldrb	r2, [r0, #1]
 8023b18:	f1c4 0107 	rsb	r1, r4, #7
 8023b1c:	7803      	ldrb	r3, [r0, #0]
 8023b1e:	408a      	lsls	r2, r1
 8023b20:	0052      	lsls	r2, r2, #1
 8023b22:	4123      	asrs	r3, r4
 8023b24:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8023b28:	1c61      	adds	r1, r4, #1
 8023b2a:	b2db      	uxtb	r3, r3
 8023b2c:	4313      	orrs	r3, r2
 8023b2e:	b2ca      	uxtb	r2, r1
 8023b30:	4611      	mov	r1, r2
 8023b32:	2908      	cmp	r1, #8
 8023b34:	9203      	str	r2, [sp, #12]
 8023b36:	b29a      	uxth	r2, r3
 8023b38:	f000 810b 	beq.w	8023d52 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3ce>
 8023b3c:	3001      	adds	r0, #1
 8023b3e:	9004      	str	r0, [sp, #16]
 8023b40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023b42:	4291      	cmp	r1, r2
 8023b44:	f0c0 80e7 	bcc.w	8023d16 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x392>
 8023b48:	2401      	movs	r4, #1
 8023b4a:	b2db      	uxtb	r3, r3
 8023b4c:	737b      	strb	r3, [r7, #13]
 8023b4e:	9905      	ldr	r1, [sp, #20]
 8023b50:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8023b54:	f0c0 8103 	bcc.w	8023d5e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3da>
 8023b58:	e9cd 2408 	strd	r2, r4, [sp, #32]
 8023b5c:	f04f 0a00 	mov.w	sl, #0
 8023b60:	f1b9 0f00 	cmp.w	r9, #0
 8023b64:	d1c9      	bne.n	8023afa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x176>
 8023b66:	4574      	cmp	r4, lr
 8023b68:	f0c0 809a 	bcc.w	8023ca0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x31c>
 8023b6c:	eba4 030e 	sub.w	r3, r4, lr
 8023b70:	b29b      	uxth	r3, r3
 8023b72:	9307      	str	r3, [sp, #28]
 8023b74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023b76:	f8cd e008 	str.w	lr, [sp, #8]
 8023b7a:	2bff      	cmp	r3, #255	@ 0xff
 8023b7c:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8023b80:	9b02      	ldr	r3, [sp, #8]
 8023b82:	f000 8099 	beq.w	8023cb8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x334>
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	d048      	beq.n	8023c1c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8023b8a:	eb0a 0603 	add.w	r6, sl, r3
 8023b8e:	9b01      	ldr	r3, [sp, #4]
 8023b90:	b2b6      	uxth	r6, r6
 8023b92:	1cd8      	adds	r0, r3, #3
 8023b94:	f810 1c03 	ldrb.w	r1, [r0, #-3]
 8023b98:	eb07 030a 	add.w	r3, r7, sl
 8023b9c:	7b5b      	ldrb	r3, [r3, #13]
 8023b9e:	fb11 f208 	smulbb	r2, r1, r8
 8023ba2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023ba6:	f81c 1003 	ldrb.w	r1, [ip, r3]
 8023baa:	4463      	add	r3, ip
 8023bac:	fb01 2105 	mla	r1, r1, r5, r2
 8023bb0:	b289      	uxth	r1, r1
 8023bb2:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 8023bb6:	f101 0b01 	add.w	fp, r1, #1
 8023bba:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023bbe:	1209      	asrs	r1, r1, #8
 8023bc0:	fb12 fb08 	smulbb	fp, r2, r8
 8023bc4:	f800 1c03 	strb.w	r1, [r0, #-3]
 8023bc8:	785a      	ldrb	r2, [r3, #1]
 8023bca:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 8023bce:	fb02 b205 	mla	r2, r2, r5, fp
 8023bd2:	b292      	uxth	r2, r2
 8023bd4:	f102 0b01 	add.w	fp, r2, #1
 8023bd8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023bdc:	1212      	asrs	r2, r2, #8
 8023bde:	fb11 f108 	smulbb	r1, r1, r8
 8023be2:	f800 2c02 	strb.w	r2, [r0, #-2]
 8023be6:	789b      	ldrb	r3, [r3, #2]
 8023be8:	f10a 0a01 	add.w	sl, sl, #1
 8023bec:	fb03 1305 	mla	r3, r3, r5, r1
 8023bf0:	b29b      	uxth	r3, r3
 8023bf2:	1c5a      	adds	r2, r3, #1
 8023bf4:	fa1f fa8a 	uxth.w	sl, sl
 8023bf8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023bfc:	121b      	asrs	r3, r3, #8
 8023bfe:	45b2      	cmp	sl, r6
 8023c00:	f800 3c01 	strb.w	r3, [r0, #-1]
 8023c04:	f100 0003 	add.w	r0, r0, #3
 8023c08:	d1c4      	bne.n	8023b94 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x210>
 8023c0a:	9b02      	ldr	r3, [sp, #8]
 8023c0c:	9a01      	ldr	r2, [sp, #4]
 8023c0e:	3b01      	subs	r3, #1
 8023c10:	b29b      	uxth	r3, r3
 8023c12:	3301      	adds	r3, #1
 8023c14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023c18:	441a      	add	r2, r3
 8023c1a:	9201      	str	r2, [sp, #4]
 8023c1c:	4574      	cmp	r4, lr
 8023c1e:	d330      	bcc.n	8023c82 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8023c20:	4b36      	ldr	r3, [pc, #216]	@ (8023cfc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x378>)
 8023c22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023c24:	881b      	ldrh	r3, [r3, #0]
 8023c26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023c28:	1a5b      	subs	r3, r3, r1
 8023c2a:	9901      	ldr	r1, [sp, #4]
 8023c2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023c30:	4419      	add	r1, r3
 8023c32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023c34:	3201      	adds	r2, #1
 8023c36:	429a      	cmp	r2, r3
 8023c38:	920c      	str	r2, [sp, #48]	@ 0x30
 8023c3a:	9101      	str	r1, [sp, #4]
 8023c3c:	f000 80ab 	beq.w	8023d96 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x412>
 8023c40:	f8bd e028 	ldrh.w	lr, [sp, #40]	@ 0x28
 8023c44:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 8023c48:	9c07      	ldr	r4, [sp, #28]
 8023c4a:	eba9 090e 	sub.w	r9, r9, lr
 8023c4e:	fa1f f989 	uxth.w	r9, r9
 8023c52:	f1b9 0f00 	cmp.w	r9, #0
 8023c56:	bf14      	ite	ne
 8023c58:	f04f 0e00 	movne.w	lr, #0
 8023c5c:	f04f 0900 	moveq.w	r9, #0
 8023c60:	9b06      	ldr	r3, [sp, #24]
 8023c62:	9a01      	ldr	r2, [sp, #4]
 8023c64:	4293      	cmp	r3, r2
 8023c66:	d913      	bls.n	8023c90 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x30c>
 8023c68:	2c00      	cmp	r4, #0
 8023c6a:	f47f af43 	bne.w	8023af4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x170>
 8023c6e:	e750      	b.n	8023b12 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x18e>
 8023c70:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8023c74:	fa1f f08a 	uxth.w	r0, sl
 8023c78:	fb94 f4f0 	sdiv	r4, r4, r0
 8023c7c:	b2a3      	uxth	r3, r4
 8023c7e:	9314      	str	r3, [sp, #80]	@ 0x50
 8023c80:	e6ab      	b.n	80239da <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x56>
 8023c82:	9b06      	ldr	r3, [sp, #24]
 8023c84:	9a01      	ldr	r2, [sp, #4]
 8023c86:	9c07      	ldr	r4, [sp, #28]
 8023c88:	4293      	cmp	r3, r2
 8023c8a:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 8023c8e:	d8eb      	bhi.n	8023c68 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2e4>
 8023c90:	4b19      	ldr	r3, [pc, #100]	@ (8023cf8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x374>)
 8023c92:	6818      	ldr	r0, [r3, #0]
 8023c94:	6803      	ldr	r3, [r0, #0]
 8023c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023c98:	4798      	blx	r3
 8023c9a:	b01b      	add	sp, #108	@ 0x6c
 8023c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ca0:	ebae 0304 	sub.w	r3, lr, r4
 8023ca4:	b29b      	uxth	r3, r3
 8023ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023ca8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023caa:	9402      	str	r4, [sp, #8]
 8023cac:	2bff      	cmp	r3, #255	@ 0xff
 8023cae:	f8cd 901c 	str.w	r9, [sp, #28]
 8023cb2:	9b02      	ldr	r3, [sp, #8]
 8023cb4:	f47f af67 	bne.w	8023b86 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x202>
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	d0af      	beq.n	8023c1c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x298>
 8023cbc:	eb0a 0003 	add.w	r0, sl, r3
 8023cc0:	9b01      	ldr	r3, [sp, #4]
 8023cc2:	b280      	uxth	r0, r0
 8023cc4:	1cda      	adds	r2, r3, #3
 8023cc6:	eb07 030a 	add.w	r3, r7, sl
 8023cca:	7b5b      	ldrb	r3, [r3, #13]
 8023ccc:	f10a 0a01 	add.w	sl, sl, #1
 8023cd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023cd4:	f81c 1003 	ldrb.w	r1, [ip, r3]
 8023cd8:	4463      	add	r3, ip
 8023cda:	f802 1c03 	strb.w	r1, [r2, #-3]
 8023cde:	7859      	ldrb	r1, [r3, #1]
 8023ce0:	fa1f fa8a 	uxth.w	sl, sl
 8023ce4:	f802 1c02 	strb.w	r1, [r2, #-2]
 8023ce8:	789b      	ldrb	r3, [r3, #2]
 8023cea:	4582      	cmp	sl, r0
 8023cec:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023cf0:	f102 0203 	add.w	r2, r2, #3
 8023cf4:	d1e7      	bne.n	8023cc6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x342>
 8023cf6:	e788      	b.n	8023c0a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x286>
 8023cf8:	2015a078 	.word	0x2015a078
 8023cfc:	2015a072 	.word	0x2015a072
 8023d00:	eba4 0409 	sub.w	r4, r4, r9
 8023d04:	44ca      	add	sl, r9
 8023d06:	b2a4      	uxth	r4, r4
 8023d08:	fa1f fa8a 	uxth.w	sl, sl
 8023d0c:	f8bd e028 	ldrh.w	lr, [sp, #40]	@ 0x28
 8023d10:	f04f 0900 	mov.w	r9, #0
 8023d14:	e7a4      	b.n	8023c60 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x2dc>
 8023d16:	9b05      	ldr	r3, [sp, #20]
 8023d18:	429a      	cmp	r2, r3
 8023d1a:	d323      	bcc.n	8023d64 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3e0>
 8023d1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023d1e:	7b79      	ldrb	r1, [r7, #13]
 8023d20:	183b      	adds	r3, r7, r0
 8023d22:	7359      	strb	r1, [r3, #13]
 8023d24:	7b7b      	ldrb	r3, [r7, #13]
 8023d26:	1c41      	adds	r1, r0, #1
 8023d28:	b28c      	uxth	r4, r1
 8023d2a:	9e05      	ldr	r6, [sp, #20]
 8023d2c:	eb07 0086 	add.w	r0, r7, r6, lsl #2
 8023d30:	f106 0a01 	add.w	sl, r6, #1
 8023d34:	9e08      	ldr	r6, [sp, #32]
 8023d36:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 8023d3a:	fa1f f38a 	uxth.w	r3, sl
 8023d3e:	f8a0 6050 	strh.w	r6, [r0, #80]	@ 0x50
 8023d42:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 8023d46:	9305      	str	r3, [sp, #20]
 8023d48:	e9cd 2408 	strd	r2, r4, [sp, #32]
 8023d4c:	f04f 0a00 	mov.w	sl, #0
 8023d50:	e6d0      	b.n	8023af4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x170>
 8023d52:	2100      	movs	r1, #0
 8023d54:	9103      	str	r1, [sp, #12]
 8023d56:	9904      	ldr	r1, [sp, #16]
 8023d58:	3102      	adds	r1, #2
 8023d5a:	9104      	str	r1, [sp, #16]
 8023d5c:	e6f0      	b.n	8023b40 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1bc>
 8023d5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023d60:	3101      	adds	r1, #1
 8023d62:	e7e2      	b.n	8023d2a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3a6>
 8023d64:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8023d68:	f893 404f 	ldrb.w	r4, [r3, #79]	@ 0x4f
 8023d6c:	4613      	mov	r3, r2
 8023d6e:	2c01      	cmp	r4, #1
 8023d70:	d90d      	bls.n	8023d8e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x40a>
 8023d72:	f104 010d 	add.w	r1, r4, #13
 8023d76:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8023d78:	4439      	add	r1, r7
 8023d7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8023d7e:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8023d82:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8023d86:	428e      	cmp	r6, r1
 8023d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8023d8c:	d1f5      	bne.n	8023d7a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x3f6>
 8023d8e:	b2db      	uxtb	r3, r3
 8023d90:	737b      	strb	r3, [r7, #13]
 8023d92:	b2a4      	uxth	r4, r4
 8023d94:	e6db      	b.n	8023b4e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x1ca>
 8023d96:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8023d9a:	f8bd 2058 	ldrh.w	r2, [sp, #88]	@ 0x58
 8023d9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023da0:	1a9b      	subs	r3, r3, r2
 8023da2:	fa1f f983 	uxth.w	r9, r3
 8023da6:	f1b9 0f00 	cmp.w	r9, #0
 8023daa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023dac:	bf18      	it	ne
 8023dae:	2300      	movne	r3, #0
 8023db0:	3101      	adds	r1, #1
 8023db2:	fa1f fe83 	uxth.w	lr, r3
 8023db6:	9111      	str	r1, [sp, #68]	@ 0x44
 8023db8:	9b06      	ldr	r3, [sp, #24]
 8023dba:	e664      	b.n	8023a86 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x102>
 8023dbc:	4b03      	ldr	r3, [pc, #12]	@ (8023dcc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x448>)
 8023dbe:	4a04      	ldr	r2, [pc, #16]	@ (8023dd0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x44c>)
 8023dc0:	f640 41f6 	movw	r1, #3318	@ 0xcf6
 8023dc4:	4803      	ldr	r0, [pc, #12]	@ (8023dd4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h+0x450>)
 8023dc6:	f007 fef7 	bl	802bbb8 <__assert_func>
 8023dca:	bf00      	nop
 8023dcc:	0802ec20 	.word	0x0802ec20
 8023dd0:	08030080 	.word	0x08030080
 8023dd4:	0802eb5c 	.word	0x0802eb5c

08023dd8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8023dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ddc:	4690      	mov	r8, r2
 8023dde:	8812      	ldrh	r2, [r2, #0]
 8023de0:	b095      	sub	sp, #84	@ 0x54
 8023de2:	2a01      	cmp	r2, #1
 8023de4:	461c      	mov	r4, r3
 8023de6:	f89d 907c 	ldrb.w	r9, [sp, #124]	@ 0x7c
 8023dea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023dec:	f040 8107 	bne.w	8023ffe <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x226>
 8023df0:	468a      	mov	sl, r1
 8023df2:	6820      	ldr	r0, [r4, #0]
 8023df4:	6861      	ldr	r1, [r4, #4]
 8023df6:	aa10      	add	r2, sp, #64	@ 0x40
 8023df8:	c203      	stmia	r2!, {r0, r1}
 8023dfa:	6818      	ldr	r0, [r3, #0]
 8023dfc:	6859      	ldr	r1, [r3, #4]
 8023dfe:	aa12      	add	r2, sp, #72	@ 0x48
 8023e00:	c203      	stmia	r2!, {r0, r1}
 8023e02:	a810      	add	r0, sp, #64	@ 0x40
 8023e04:	f7f2 fbb0 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023e08:	4621      	mov	r1, r4
 8023e0a:	a812      	add	r0, sp, #72	@ 0x48
 8023e0c:	f7f2 fbd4 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023e10:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	@ 0x48
 8023e14:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	@ 0x4a
 8023e18:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8023e1c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8023e20:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8023e24:	4879      	ldr	r0, [pc, #484]	@ (802400c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8023e26:	fb11 4105 	smlabb	r1, r1, r5, r4
 8023e2a:	4422      	add	r2, r4
 8023e2c:	442b      	add	r3, r5
 8023e2e:	6800      	ldr	r0, [r0, #0]
 8023e30:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8023e34:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 8023e38:	6802      	ldr	r2, [r0, #0]
 8023e3a:	448a      	add	sl, r1
 8023e3c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 8023e40:	4c73      	ldr	r4, [pc, #460]	@ (8024010 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x238>)
 8023e42:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8023e46:	910c      	str	r1, [sp, #48]	@ 0x30
 8023e48:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 8023e4c:	42a3      	cmp	r3, r4
 8023e4e:	910e      	str	r1, [sp, #56]	@ 0x38
 8023e50:	f040 80a2 	bne.w	8023f98 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c0>
 8023e54:	6841      	ldr	r1, [r0, #4]
 8023e56:	4c6f      	ldr	r4, [pc, #444]	@ (8024014 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>)
 8023e58:	680b      	ldr	r3, [r1, #0]
 8023e5a:	699b      	ldr	r3, [r3, #24]
 8023e5c:	42a3      	cmp	r3, r4
 8023e5e:	f040 80c1 	bne.w	8023fe4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8023e62:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8023e64:	4798      	blx	r3
 8023e66:	4b6c      	ldr	r3, [pc, #432]	@ (8024018 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8023e68:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	@ 0x4a
 8023e6c:	881b      	ldrh	r3, [r3, #0]
 8023e6e:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	@ 0x48
 8023e72:	fb01 2303 	mla	r3, r1, r3, r2
 8023e76:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023e7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023e7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023e7e:	2b00      	cmp	r3, #0
 8023e80:	f340 8082 	ble.w	8023f88 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8023e84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	dd7e      	ble.n	8023f88 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b0>
 8023e8a:	2200      	movs	r2, #0
 8023e8c:	f04f 0e03 	mov.w	lr, #3
 8023e90:	f04f 0c04 	mov.w	ip, #4
 8023e94:	f1c9 07ff 	rsb	r7, r9, #255	@ 0xff
 8023e98:	009b      	lsls	r3, r3, #2
 8023e9a:	920d      	str	r2, [sp, #52]	@ 0x34
 8023e9c:	b2bf      	uxth	r7, r7
 8023e9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023ea0:	fa1f f289 	uxth.w	r2, r9
 8023ea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023ea6:	4655      	mov	r5, sl
 8023ea8:	1d18      	adds	r0, r3, #4
 8023eaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023eac:	eb0a 0603 	add.w	r6, sl, r3
 8023eb0:	e03e      	b.n	8023f30 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8023eb2:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8023eb6:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 8023eba:	fb13 f307 	smulbb	r3, r3, r7
 8023ebe:	fb0b 3302 	mla	r3, fp, r2, r3
 8023ec2:	b29b      	uxth	r3, r3
 8023ec4:	f103 0b01 	add.w	fp, r3, #1
 8023ec8:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8023ecc:	121b      	asrs	r3, r3, #8
 8023ece:	fb14 f407 	smulbb	r4, r4, r7
 8023ed2:	f800 3c04 	strb.w	r3, [r0, #-4]
 8023ed6:	784b      	ldrb	r3, [r1, #1]
 8023ed8:	f810 bc02 	ldrb.w	fp, [r0, #-2]
 8023edc:	fb03 4302 	mla	r3, r3, r2, r4
 8023ee0:	b29b      	uxth	r3, r3
 8023ee2:	1c5c      	adds	r4, r3, #1
 8023ee4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8023ee8:	121b      	asrs	r3, r3, #8
 8023eea:	fb1b fb07 	smulbb	fp, fp, r7
 8023eee:	f800 3c03 	strb.w	r3, [r0, #-3]
 8023ef2:	788c      	ldrb	r4, [r1, #2]
 8023ef4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8023ef8:	fb04 b402 	mla	r4, r4, r2, fp
 8023efc:	b2a4      	uxth	r4, r4
 8023efe:	f104 0b01 	add.w	fp, r4, #1
 8023f02:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8023f06:	1224      	asrs	r4, r4, #8
 8023f08:	fb13 fb07 	smulbb	fp, r3, r7
 8023f0c:	f800 4c02 	strb.w	r4, [r0, #-2]
 8023f10:	78cb      	ldrb	r3, [r1, #3]
 8023f12:	42ae      	cmp	r6, r5
 8023f14:	fb03 b302 	mla	r3, r3, r2, fp
 8023f18:	b29b      	uxth	r3, r3
 8023f1a:	f103 0101 	add.w	r1, r3, #1
 8023f1e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023f22:	ea4f 2323 	mov.w	r3, r3, asr #8
 8023f26:	f800 3c01 	strb.w	r3, [r0, #-1]
 8023f2a:	f100 0004 	add.w	r0, r0, #4
 8023f2e:	d018      	beq.n	8023f62 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x18a>
 8023f30:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023f34:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8023f38:	fb1e c303 	smlabb	r3, lr, r3, ip
 8023f3c:	eb08 0103 	add.w	r1, r8, r3
 8023f40:	f818 b003 	ldrb.w	fp, [r8, r3]
 8023f44:	d1b5      	bne.n	8023eb2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 8023f46:	f800 bc04 	strb.w	fp, [r0, #-4]
 8023f4a:	784b      	ldrb	r3, [r1, #1]
 8023f4c:	42ae      	cmp	r6, r5
 8023f4e:	f800 3c03 	strb.w	r3, [r0, #-3]
 8023f52:	788b      	ldrb	r3, [r1, #2]
 8023f54:	f100 0004 	add.w	r0, r0, #4
 8023f58:	f800 9c05 	strb.w	r9, [r0, #-5]
 8023f5c:	f800 3c06 	strb.w	r3, [r0, #-6]
 8023f60:	d1e6      	bne.n	8023f30 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8023f62:	4b2d      	ldr	r3, [pc, #180]	@ (8024018 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8023f64:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023f66:	881b      	ldrh	r3, [r3, #0]
 8023f68:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023f6a:	1a1b      	subs	r3, r3, r0
 8023f6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023f70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023f72:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023f74:	441c      	add	r4, r3
 8023f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023f78:	3001      	adds	r0, #1
 8023f7a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8023f7e:	4283      	cmp	r3, r0
 8023f80:	900d      	str	r0, [sp, #52]	@ 0x34
 8023f82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023f84:	448a      	add	sl, r1
 8023f86:	d18d      	bne.n	8023ea4 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 8023f88:	4b20      	ldr	r3, [pc, #128]	@ (802400c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8023f8a:	6818      	ldr	r0, [r3, #0]
 8023f8c:	6803      	ldr	r3, [r0, #0]
 8023f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023f90:	4798      	blx	r3
 8023f92:	b015      	add	sp, #84	@ 0x54
 8023f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f98:	4798      	blx	r3
 8023f9a:	2801      	cmp	r0, #1
 8023f9c:	d125      	bne.n	8023fea <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x212>
 8023f9e:	4b1f      	ldr	r3, [pc, #124]	@ (802401c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>)
 8023fa0:	6818      	ldr	r0, [r3, #0]
 8023fa2:	b330      	cbz	r0, 8023ff2 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x21a>
 8023fa4:	2502      	movs	r5, #2
 8023fa6:	240b      	movs	r4, #11
 8023fa8:	2600      	movs	r6, #0
 8023faa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8023fae:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8023fb2:	9302      	str	r3, [sp, #8]
 8023fb4:	4b18      	ldr	r3, [pc, #96]	@ (8024018 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x240>)
 8023fb6:	9201      	str	r2, [sp, #4]
 8023fb8:	881b      	ldrh	r3, [r3, #0]
 8023fba:	9508      	str	r5, [sp, #32]
 8023fbc:	9407      	str	r4, [sp, #28]
 8023fbe:	f8bd 5044 	ldrh.w	r5, [sp, #68]	@ 0x44
 8023fc2:	f8bd 404a 	ldrh.w	r4, [sp, #74]	@ 0x4a
 8023fc6:	9306      	str	r3, [sp, #24]
 8023fc8:	f8cd 9010 	str.w	r9, [sp, #16]
 8023fcc:	4642      	mov	r2, r8
 8023fce:	4651      	mov	r1, sl
 8023fd0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8023fd4:	9605      	str	r6, [sp, #20]
 8023fd6:	9503      	str	r5, [sp, #12]
 8023fd8:	9400      	str	r4, [sp, #0]
 8023fda:	f7f8 f861 	bl	801c0a0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8023fde:	b015      	add	sp, #84	@ 0x54
 8023fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fe4:	4608      	mov	r0, r1
 8023fe6:	4798      	blx	r3
 8023fe8:	e7d7      	b.n	8023f9a <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8023fea:	4b08      	ldr	r3, [pc, #32]	@ (802400c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>)
 8023fec:	6818      	ldr	r0, [r3, #0]
 8023fee:	6802      	ldr	r2, [r0, #0]
 8023ff0:	e737      	b.n	8023e62 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8023ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8024020 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>)
 8023ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8024024 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8023ff6:	217c      	movs	r1, #124	@ 0x7c
 8023ff8:	480b      	ldr	r0, [pc, #44]	@ (8024028 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8023ffa:	f007 fddd 	bl	802bbb8 <__assert_func>
 8023ffe:	4b0b      	ldr	r3, [pc, #44]	@ (802402c <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8024000:	4a0b      	ldr	r2, [pc, #44]	@ (8024030 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8024002:	f640 51d3 	movw	r1, #3539	@ 0xdd3
 8024006:	480b      	ldr	r0, [pc, #44]	@ (8024034 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8024008:	f007 fdd6 	bl	802bbb8 <__assert_func>
 802400c:	2015a078 	.word	0x2015a078
 8024010:	080126cd 	.word	0x080126cd
 8024014:	080155bb 	.word	0x080155bb
 8024018:	2015a072 	.word	0x2015a072
 802401c:	2015a1e4 	.word	0x2015a1e4
 8024020:	0802eab8 	.word	0x0802eab8
 8024024:	0802f324 	.word	0x0802f324
 8024028:	0802eae0 	.word	0x0802eae0
 802402c:	0802eb80 	.word	0x0802eb80
 8024030:	0802f8cc 	.word	0x0802f8cc
 8024034:	0802eb5c 	.word	0x0802eb5c

08024038 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8024038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802403c:	4617      	mov	r7, r2
 802403e:	7812      	ldrb	r2, [r2, #0]
 8024040:	b08f      	sub	sp, #60	@ 0x3c
 8024042:	2a01      	cmp	r2, #1
 8024044:	461e      	mov	r6, r3
 8024046:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 802404a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802404c:	f040 8203 	bne.w	8024456 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x41e>
 8024050:	6830      	ldr	r0, [r6, #0]
 8024052:	460d      	mov	r5, r1
 8024054:	6871      	ldr	r1, [r6, #4]
 8024056:	aa0a      	add	r2, sp, #40	@ 0x28
 8024058:	c203      	stmia	r2!, {r0, r1}
 802405a:	6818      	ldr	r0, [r3, #0]
 802405c:	6859      	ldr	r1, [r3, #4]
 802405e:	aa0c      	add	r2, sp, #48	@ 0x30
 8024060:	c203      	stmia	r2!, {r0, r1}
 8024062:	a80a      	add	r0, sp, #40	@ 0x28
 8024064:	f7f2 fa80 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024068:	4631      	mov	r1, r6
 802406a:	a80c      	add	r0, sp, #48	@ 0x30
 802406c:	f7f2 faa4 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024070:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024074:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8024078:	f003 0201 	and.w	r2, r3, #1
 802407c:	4614      	mov	r4, r2
 802407e:	9206      	str	r2, [sp, #24]
 8024080:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8024084:	4423      	add	r3, r4
 8024086:	fb02 1303 	mla	r3, r2, r3, r1
 802408a:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 802408e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 8024092:	4402      	add	r2, r0
 8024094:	489d      	ldr	r0, [pc, #628]	@ (802430c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d4>)
 8024096:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802409a:	440e      	add	r6, r1
 802409c:	eb05 0363 	add.w	r3, r5, r3, asr #1
 80240a0:	6800      	ldr	r0, [r0, #0]
 80240a2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80240a6:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 80240aa:	9302      	str	r3, [sp, #8]
 80240ac:	f001 0301 	and.w	r3, r1, #1
 80240b0:	6802      	ldr	r2, [r0, #0]
 80240b2:	9305      	str	r3, [sp, #20]
 80240b4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80240b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80240ba:	9303      	str	r3, [sp, #12]
 80240bc:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 80240c0:	4790      	blx	r2
 80240c2:	4a93      	ldr	r2, [pc, #588]	@ (8024310 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d8>)
 80240c4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80240c8:	8812      	ldrh	r2, [r2, #0]
 80240ca:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80240ce:	fb05 f502 	mul.w	r5, r5, r2
 80240d2:	fb02 1303 	mla	r3, r2, r3, r1
 80240d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80240da:	461a      	mov	r2, r3
 80240dc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80240e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80240e4:	f107 0704 	add.w	r7, r7, #4
 80240e8:	9304      	str	r3, [sp, #16]
 80240ea:	f000 8113 	beq.w	8024314 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2dc>
 80240ee:	4614      	mov	r4, r2
 80240f0:	9a04      	ldr	r2, [sp, #16]
 80240f2:	4294      	cmp	r4, r2
 80240f4:	f080 80c2 	bcs.w	802427c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>
 80240f8:	ea4f 6308 	mov.w	r3, r8, lsl #24
 80240fc:	9300      	str	r3, [sp, #0]
 80240fe:	9b03      	ldr	r3, [sp, #12]
 8024100:	3b01      	subs	r3, #1
 8024102:	9309      	str	r3, [sp, #36]	@ 0x24
 8024104:	9b05      	ldr	r3, [sp, #20]
 8024106:	2b00      	cmp	r3, #0
 8024108:	f040 80ef 	bne.w	80242ea <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2b2>
 802410c:	9b02      	ldr	r3, [sp, #8]
 802410e:	9301      	str	r3, [sp, #4]
 8024110:	9b03      	ldr	r3, [sp, #12]
 8024112:	2b01      	cmp	r3, #1
 8024114:	f340 809c 	ble.w	8024250 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x218>
 8024118:	3b02      	subs	r3, #2
 802411a:	9308      	str	r3, [sp, #32]
 802411c:	f104 0e10 	add.w	lr, r4, #16
 8024120:	085b      	lsrs	r3, r3, #1
 8024122:	9307      	str	r3, [sp, #28]
 8024124:	eb0e 0ec3 	add.w	lr, lr, r3, lsl #3
 8024128:	9b01      	ldr	r3, [sp, #4]
 802412a:	f104 0608 	add.w	r6, r4, #8
 802412e:	f103 3cff 	add.w	ip, r3, #4294967295
 8024132:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8024136:	f856 1c08 	ldr.w	r1, [r6, #-8]
 802413a:	091b      	lsrs	r3, r3, #4
 802413c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024140:	18f8      	adds	r0, r7, r3
 8024142:	5cfa      	ldrb	r2, [r7, r3]
 8024144:	f890 9001 	ldrb.w	r9, [r0, #1]
 8024148:	7883      	ldrb	r3, [r0, #2]
 802414a:	0e08      	lsrs	r0, r1, #24
 802414c:	f000 80ae 	beq.w	80242ac <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>
 8024150:	fb08 f500 	mul.w	r5, r8, r0
 8024154:	fb18 fb03 	smulbb	fp, r8, r3
 8024158:	1c6b      	adds	r3, r5, #1
 802415a:	eb03 2525 	add.w	r5, r3, r5, asr #8
 802415e:	fb18 f202 	smulbb	r2, r8, r2
 8024162:	122d      	asrs	r5, r5, #8
 8024164:	fb18 f909 	smulbb	r9, r8, r9
 8024168:	eba0 0a05 	sub.w	sl, r0, r5
 802416c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8024170:	fb0a b303 	mla	r3, sl, r3, fp
 8024174:	fa5f fb81 	uxtb.w	fp, r1
 8024178:	fb0a 220b 	mla	r2, sl, fp, r2
 802417c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024180:	4440      	add	r0, r8
 8024182:	fb0a 9101 	mla	r1, sl, r1, r9
 8024186:	1b40      	subs	r0, r0, r5
 8024188:	b2c0      	uxtb	r0, r0
 802418a:	fbb3 f3f0 	udiv	r3, r3, r0
 802418e:	fbb2 f2f0 	udiv	r2, r2, r0
 8024192:	fbb1 f1f0 	udiv	r1, r1, r0
 8024196:	041b      	lsls	r3, r3, #16
 8024198:	b2d2      	uxtb	r2, r2
 802419a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 802419e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80241a2:	0209      	lsls	r1, r1, #8
 80241a4:	4303      	orrs	r3, r0
 80241a6:	b289      	uxth	r1, r1
 80241a8:	430b      	orrs	r3, r1
 80241aa:	f846 3c08 	str.w	r3, [r6, #-8]
 80241ae:	f89c 2000 	ldrb.w	r2, [ip]
 80241b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80241b6:	f002 020f 	and.w	r2, r2, #15
 80241ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80241be:	0e18      	lsrs	r0, r3, #24
 80241c0:	eb07 0102 	add.w	r1, r7, r2
 80241c4:	d062      	beq.n	802428c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>
 80241c6:	fb08 f500 	mul.w	r5, r8, r0
 80241ca:	f105 0901 	add.w	r9, r5, #1
 80241ce:	eb09 2925 	add.w	r9, r9, r5, asr #8
 80241d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80241d6:	eba0 0b09 	sub.w	fp, r0, r9
 80241da:	788d      	ldrb	r5, [r1, #2]
 80241dc:	f891 a001 	ldrb.w	sl, [r1, #1]
 80241e0:	b2d9      	uxtb	r1, r3
 80241e2:	fb0b f101 	mul.w	r1, fp, r1
 80241e6:	fb15 f508 	smulbb	r5, r5, r8
 80241ea:	5cba      	ldrb	r2, [r7, r2]
 80241ec:	fb1a fa08 	smulbb	sl, sl, r8
 80241f0:	fb02 1108 	mla	r1, r2, r8, r1
 80241f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80241f8:	fb0b 5502 	mla	r5, fp, r2, r5
 80241fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8024200:	4440      	add	r0, r8
 8024202:	fb0b a202 	mla	r2, fp, r2, sl
 8024206:	eba0 0009 	sub.w	r0, r0, r9
 802420a:	b2c0      	uxtb	r0, r0
 802420c:	fbb1 f3f0 	udiv	r3, r1, r0
 8024210:	fbb5 f5f0 	udiv	r5, r5, r0
 8024214:	fbb2 f2f0 	udiv	r2, r2, r0
 8024218:	b2db      	uxtb	r3, r3
 802421a:	042d      	lsls	r5, r5, #16
 802421c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8024220:	f405 057f 	and.w	r5, r5, #16711680	@ 0xff0000
 8024224:	0212      	lsls	r2, r2, #8
 8024226:	432b      	orrs	r3, r5
 8024228:	b292      	uxth	r2, r2
 802422a:	4313      	orrs	r3, r2
 802422c:	f846 3c04 	str.w	r3, [r6, #-4]
 8024230:	3608      	adds	r6, #8
 8024232:	4576      	cmp	r6, lr
 8024234:	f47f af7d 	bne.w	8024132 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xfa>
 8024238:	9b07      	ldr	r3, [sp, #28]
 802423a:	9901      	ldr	r1, [sp, #4]
 802423c:	1c5a      	adds	r2, r3, #1
 802423e:	4411      	add	r1, r2
 8024240:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 8024244:	9a08      	ldr	r2, [sp, #32]
 8024246:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 802424a:	9101      	str	r1, [sp, #4]
 802424c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024250:	2b01      	cmp	r3, #1
 8024252:	d032      	beq.n	80242ba <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x282>
 8024254:	9906      	ldr	r1, [sp, #24]
 8024256:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802425a:	4a2d      	ldr	r2, [pc, #180]	@ (8024310 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d8>)
 802425c:	440b      	add	r3, r1
 802425e:	8812      	ldrh	r2, [r2, #0]
 8024260:	9903      	ldr	r1, [sp, #12]
 8024262:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8024266:	1a52      	subs	r2, r2, r1
 8024268:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802426c:	9a02      	ldr	r2, [sp, #8]
 802426e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8024272:	9302      	str	r3, [sp, #8]
 8024274:	9b04      	ldr	r3, [sp, #16]
 8024276:	42a3      	cmp	r3, r4
 8024278:	f63f af44 	bhi.w	8024104 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xcc>
 802427c:	4b23      	ldr	r3, [pc, #140]	@ (802430c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d4>)
 802427e:	6818      	ldr	r0, [r3, #0]
 8024280:	6803      	ldr	r3, [r0, #0]
 8024282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024284:	4798      	blx	r3
 8024286:	b00f      	add	sp, #60	@ 0x3c
 8024288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802428c:	5cbb      	ldrb	r3, [r7, r2]
 802428e:	9a00      	ldr	r2, [sp, #0]
 8024290:	7888      	ldrb	r0, [r1, #2]
 8024292:	4313      	orrs	r3, r2
 8024294:	784a      	ldrb	r2, [r1, #1]
 8024296:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802429a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802429e:	f846 3c04 	str.w	r3, [r6, #-4]
 80242a2:	3608      	adds	r6, #8
 80242a4:	45b6      	cmp	lr, r6
 80242a6:	f47f af44 	bne.w	8024132 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xfa>
 80242aa:	e7c5      	b.n	8024238 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x200>
 80242ac:	9900      	ldr	r1, [sp, #0]
 80242ae:	430a      	orrs	r2, r1
 80242b0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80242b4:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 80242b8:	e777      	b.n	80241aa <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x172>
 80242ba:	9b01      	ldr	r3, [sp, #4]
 80242bc:	4621      	mov	r1, r4
 80242be:	7818      	ldrb	r0, [r3, #0]
 80242c0:	4642      	mov	r2, r8
 80242c2:	0900      	lsrs	r0, r0, #4
 80242c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80242c8:	4438      	add	r0, r7
 80242ca:	f7fb f86d 	bl	801f3a8 <_ZNK8touchgfx8LCDGPU2D22blendPixelRGB888_32BPPEPKhPmh.constprop.19>
 80242ce:	4b10      	ldr	r3, [pc, #64]	@ (8024310 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d8>)
 80242d0:	9903      	ldr	r1, [sp, #12]
 80242d2:	881a      	ldrh	r2, [r3, #0]
 80242d4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80242d8:	1a52      	subs	r2, r2, r1
 80242da:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80242de:	9a06      	ldr	r2, [sp, #24]
 80242e0:	3404      	adds	r4, #4
 80242e2:	4413      	add	r3, r2
 80242e4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80242e8:	e7c0      	b.n	802426c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x234>
 80242ea:	9d02      	ldr	r5, [sp, #8]
 80242ec:	4621      	mov	r1, r4
 80242ee:	7828      	ldrb	r0, [r5, #0]
 80242f0:	4642      	mov	r2, r8
 80242f2:	f000 000f 	and.w	r0, r0, #15
 80242f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80242fa:	4438      	add	r0, r7
 80242fc:	f7fb f854 	bl	801f3a8 <_ZNK8touchgfx8LCDGPU2D22blendPixelRGB888_32BPPEPKhPmh.constprop.19>
 8024300:	1c6b      	adds	r3, r5, #1
 8024302:	9301      	str	r3, [sp, #4]
 8024304:	3404      	adds	r4, #4
 8024306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024308:	e703      	b.n	8024112 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 802430a:	bf00      	nop
 802430c:	2015a078 	.word	0x2015a078
 8024310:	2015a072 	.word	0x2015a072
 8024314:	4615      	mov	r5, r2
 8024316:	9a04      	ldr	r2, [sp, #16]
 8024318:	4295      	cmp	r5, r2
 802431a:	d2af      	bcs.n	802427c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>
 802431c:	9b03      	ldr	r3, [sp, #12]
 802431e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8024322:	469a      	mov	sl, r3
 8024324:	f103 38ff 	add.w	r8, r3, #4294967295
 8024328:	9b05      	ldr	r3, [sp, #20]
 802432a:	2b00      	cmp	r3, #0
 802432c:	d07d      	beq.n	802442a <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3f2>
 802432e:	4646      	mov	r6, r8
 8024330:	f899 3000 	ldrb.w	r3, [r9]
 8024334:	f109 0e01 	add.w	lr, r9, #1
 8024338:	f003 030f 	and.w	r3, r3, #15
 802433c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024340:	18fa      	adds	r2, r7, r3
 8024342:	5cfb      	ldrb	r3, [r7, r3]
 8024344:	7891      	ldrb	r1, [r2, #2]
 8024346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 802434a:	7852      	ldrb	r2, [r2, #1]
 802434c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8024350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024354:	f845 3b04 	str.w	r3, [r5], #4
 8024358:	2e01      	cmp	r6, #1
 802435a:	dd3e      	ble.n	80243da <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3a2>
 802435c:	3e02      	subs	r6, #2
 802435e:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 8024362:	f105 0410 	add.w	r4, r5, #16
 8024366:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 802436a:	f105 0108 	add.w	r1, r5, #8
 802436e:	f10e 30ff 	add.w	r0, lr, #4294967295
 8024372:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8024376:	3108      	adds	r1, #8
 8024378:	091b      	lsrs	r3, r3, #4
 802437a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802437e:	5cfa      	ldrb	r2, [r7, r3]
 8024380:	eb07 0b03 	add.w	fp, r7, r3
 8024384:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8024388:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 802438c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8024390:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8024394:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 8024398:	f841 3c10 	str.w	r3, [r1, #-16]
 802439c:	7803      	ldrb	r3, [r0, #0]
 802439e:	f003 030f 	and.w	r3, r3, #15
 80243a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80243a6:	5cfa      	ldrb	r2, [r7, r3]
 80243a8:	eb07 0b03 	add.w	fp, r7, r3
 80243ac:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80243b0:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80243b4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80243b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80243bc:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 80243c0:	f841 3c0c 	str.w	r3, [r1, #-12]
 80243c4:	428c      	cmp	r4, r1
 80243c6:	d1d4      	bne.n	8024372 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x33a>
 80243c8:	f10c 0301 	add.w	r3, ip, #1
 80243cc:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
 80243d0:	449e      	add	lr, r3
 80243d2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80243d6:	eb06 064c 	add.w	r6, r6, ip, lsl #1
 80243da:	2e01      	cmp	r6, #1
 80243dc:	d128      	bne.n	8024430 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3f8>
 80243de:	f89e 3000 	ldrb.w	r3, [lr]
 80243e2:	091b      	lsrs	r3, r3, #4
 80243e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80243e8:	18fa      	adds	r2, r7, r3
 80243ea:	5cfb      	ldrb	r3, [r7, r3]
 80243ec:	7891      	ldrb	r1, [r2, #2]
 80243ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80243f2:	7852      	ldrb	r2, [r2, #1]
 80243f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80243f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80243fc:	602b      	str	r3, [r5, #0]
 80243fe:	4b19      	ldr	r3, [pc, #100]	@ (8024464 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x42c>)
 8024400:	881a      	ldrh	r2, [r3, #0]
 8024402:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024406:	eba2 020a 	sub.w	r2, r2, sl
 802440a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 802440e:	9a06      	ldr	r2, [sp, #24]
 8024410:	3504      	adds	r5, #4
 8024412:	4413      	add	r3, r2
 8024414:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8024418:	eb09 0963 	add.w	r9, r9, r3, asr #1
 802441c:	9b04      	ldr	r3, [sp, #16]
 802441e:	42ab      	cmp	r3, r5
 8024420:	f67f af2c 	bls.w	802427c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>
 8024424:	9b05      	ldr	r3, [sp, #20]
 8024426:	2b00      	cmp	r3, #0
 8024428:	d181      	bne.n	802432e <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f6>
 802442a:	46ce      	mov	lr, r9
 802442c:	4656      	mov	r6, sl
 802442e:	e793      	b.n	8024358 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x320>
 8024430:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024434:	4a0b      	ldr	r2, [pc, #44]	@ (8024464 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x42c>)
 8024436:	9906      	ldr	r1, [sp, #24]
 8024438:	8812      	ldrh	r2, [r2, #0]
 802443a:	440b      	add	r3, r1
 802443c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8024440:	eba2 020a 	sub.w	r2, r2, sl
 8024444:	eb09 0963 	add.w	r9, r9, r3, asr #1
 8024448:	9b04      	ldr	r3, [sp, #16]
 802444a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 802444e:	42ab      	cmp	r3, r5
 8024450:	f63f af6a 	bhi.w	8024328 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f0>
 8024454:	e712      	b.n	802427c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x244>
 8024456:	4b04      	ldr	r3, [pc, #16]	@ (8024468 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x430>)
 8024458:	4a04      	ldr	r2, [pc, #16]	@ (802446c <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x434>)
 802445a:	f640 612c 	movw	r1, #3628	@ 0xe2c
 802445e:	4804      	ldr	r0, [pc, #16]	@ (8024470 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x438>)
 8024460:	f007 fbaa 	bl	802bbb8 <__assert_func>
 8024464:	2015a072 	.word	0x2015a072
 8024468:	0802ec20 	.word	0x0802ec20
 802446c:	0802fc10 	.word	0x0802fc10
 8024470:	0802eb5c 	.word	0x0802eb5c

08024474 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8024474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024478:	7814      	ldrb	r4, [r2, #0]
 802447a:	b091      	sub	sp, #68	@ 0x44
 802447c:	2c01      	cmp	r4, #1
 802447e:	461d      	mov	r5, r3
 8024480:	9208      	str	r2, [sp, #32]
 8024482:	9102      	str	r1, [sp, #8]
 8024484:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8024486:	f89d a06c 	ldrb.w	sl, [sp, #108]	@ 0x6c
 802448a:	f040 814b 	bne.w	8024724 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2b0>
 802448e:	6828      	ldr	r0, [r5, #0]
 8024490:	6869      	ldr	r1, [r5, #4]
 8024492:	aa0c      	add	r2, sp, #48	@ 0x30
 8024494:	c203      	stmia	r2!, {r0, r1}
 8024496:	6818      	ldr	r0, [r3, #0]
 8024498:	6859      	ldr	r1, [r3, #4]
 802449a:	aa0e      	add	r2, sp, #56	@ 0x38
 802449c:	c203      	stmia	r2!, {r0, r1}
 802449e:	a80c      	add	r0, sp, #48	@ 0x30
 80244a0:	f7f2 f862 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80244a4:	4629      	mov	r1, r5
 80244a6:	a80e      	add	r0, sp, #56	@ 0x38
 80244a8:	f7f2 f886 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80244ac:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80244b0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80244b4:	f340 8130 	ble.w	8024718 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a4>
 80244b8:	4623      	mov	r3, r4
 80244ba:	b291      	uxth	r1, r2
 80244bc:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 80244c0:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 80244c4:	fb92 f5f3 	sdiv	r5, r2, r3
 80244c8:	b2ae      	uxth	r6, r5
 80244ca:	fb03 2416 	mls	r4, r3, r6, r2
 80244ce:	fb14 0101 	smlabb	r1, r4, r1, r0
 80244d2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80244d6:	b289      	uxth	r1, r1
 80244d8:	441c      	add	r4, r3
 80244da:	3c01      	subs	r4, #1
 80244dc:	9100      	str	r1, [sp, #0]
 80244de:	fb94 f4f3 	sdiv	r4, r4, r3
 80244e2:	b136      	cbz	r6, 80244f2 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x7e>
 80244e4:	9b08      	ldr	r3, [sp, #32]
 80244e6:	9902      	ldr	r1, [sp, #8]
 80244e8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80244ec:	ba1b      	rev	r3, r3
 80244ee:	4419      	add	r1, r3
 80244f0:	9102      	str	r1, [sp, #8]
 80244f2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80244f6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80244fa:	440a      	add	r2, r1
 80244fc:	498d      	ldr	r1, [pc, #564]	@ (8024734 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c0>)
 80244fe:	4403      	add	r3, r0
 8024500:	6808      	ldr	r0, [r1, #0]
 8024502:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 8024506:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 802450a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 802450e:	6803      	ldr	r3, [r0, #0]
 8024510:	960a      	str	r6, [sp, #40]	@ 0x28
 8024512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024514:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8024518:	4798      	blx	r3
 802451a:	9b00      	ldr	r3, [sp, #0]
 802451c:	4986      	ldr	r1, [pc, #536]	@ (8024738 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c4>)
 802451e:	2b00      	cmp	r3, #0
 8024520:	bf0c      	ite	eq
 8024522:	4633      	moveq	r3, r6
 8024524:	2300      	movne	r3, #0
 8024526:	8809      	ldrh	r1, [r1, #0]
 8024528:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 802452c:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 8024530:	fb05 f501 	mul.w	r5, r5, r1
 8024534:	fb01 6202 	mla	r2, r1, r2, r6
 8024538:	b2a4      	uxth	r4, r4
 802453a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802453e:	eb08 0285 	add.w	r2, r8, r5, lsl #2
 8024542:	00a4      	lsls	r4, r4, #2
 8024544:	1d21      	adds	r1, r4, #4
 8024546:	4590      	cmp	r8, r2
 8024548:	9203      	str	r2, [sp, #12]
 802454a:	9109      	str	r1, [sp, #36]	@ 0x24
 802454c:	fa1f f983 	uxth.w	r9, r3
 8024550:	d227      	bcs.n	80245a2 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x12e>
 8024552:	2300      	movs	r3, #0
 8024554:	469b      	mov	fp, r3
 8024556:	ea4f 620a 	mov.w	r2, sl, lsl #24
 802455a:	9304      	str	r3, [sp, #16]
 802455c:	9205      	str	r2, [sp, #20]
 802455e:	f1bb 0f00 	cmp.w	fp, #0
 8024562:	d10f      	bne.n	8024584 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x110>
 8024564:	9902      	ldr	r1, [sp, #8]
 8024566:	780b      	ldrb	r3, [r1, #0]
 8024568:	ea4f 1b93 	mov.w	fp, r3, lsr #6
 802456c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8024570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8024574:	2a02      	cmp	r2, #2
 8024576:	9304      	str	r3, [sp, #16]
 8024578:	f200 80c8 	bhi.w	802470c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x298>
 802457c:	3101      	adds	r1, #1
 802457e:	9102      	str	r1, [sp, #8]
 8024580:	fa1f fb8b 	uxth.w	fp, fp
 8024584:	9b00      	ldr	r3, [sp, #0]
 8024586:	b1a3      	cbz	r3, 80245b2 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x13e>
 8024588:	459b      	cmp	fp, r3
 802458a:	f080 80b6 	bcs.w	80246fa <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x286>
 802458e:	eba3 0b0b 	sub.w	fp, r3, fp
 8024592:	fa1f f38b 	uxth.w	r3, fp
 8024596:	f04f 0b00 	mov.w	fp, #0
 802459a:	9300      	str	r3, [sp, #0]
 802459c:	9b03      	ldr	r3, [sp, #12]
 802459e:	4543      	cmp	r3, r8
 80245a0:	d8dd      	bhi.n	802455e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xea>
 80245a2:	4b64      	ldr	r3, [pc, #400]	@ (8024734 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c0>)
 80245a4:	6818      	ldr	r0, [r3, #0]
 80245a6:	6803      	ldr	r3, [r0, #0]
 80245a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80245aa:	4798      	blx	r3
 80245ac:	b011      	add	sp, #68	@ 0x44
 80245ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80245b2:	2303      	movs	r3, #3
 80245b4:	4619      	mov	r1, r3
 80245b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80245b8:	9b04      	ldr	r3, [sp, #16]
 80245ba:	45cb      	cmp	fp, r9
 80245bc:	fb11 2c03 	smlabb	ip, r1, r3, r2
 80245c0:	9b08      	ldr	r3, [sp, #32]
 80245c2:	449c      	add	ip, r3
 80245c4:	d377      	bcc.n	80246b6 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x242>
 80245c6:	ebab 0309 	sub.w	r3, fp, r9
 80245ca:	9a00      	ldr	r2, [sp, #0]
 80245cc:	b29b      	uxth	r3, r3
 80245ce:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80245d2:	9306      	str	r3, [sp, #24]
 80245d4:	9207      	str	r2, [sp, #28]
 80245d6:	464b      	mov	r3, r9
 80245d8:	d077      	beq.n	80246ca <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x256>
 80245da:	b303      	cbz	r3, 802461e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1aa>
 80245dc:	3b01      	subs	r3, #1
 80245de:	b29b      	uxth	r3, r3
 80245e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80245e2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80245e6:	9301      	str	r3, [sp, #4]
 80245e8:	f1a8 0e04 	sub.w	lr, r8, #4
 80245ec:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 80245f0:	f89c 4000 	ldrb.w	r4, [ip]
 80245f4:	0e18      	lsrs	r0, r3, #24
 80245f6:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80245fa:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80245fe:	d126      	bne.n	802464e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1da>
 8024600:	9b05      	ldr	r3, [sp, #20]
 8024602:	431c      	orrs	r4, r3
 8024604:	9b01      	ldr	r3, [sp, #4]
 8024606:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 802460a:	ea44 2606 	orr.w	r6, r4, r6, lsl #8
 802460e:	459e      	cmp	lr, r3
 8024610:	f8ce 6000 	str.w	r6, [lr]
 8024614:	d1ea      	bne.n	80245ec <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x178>
 8024616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024618:	3301      	adds	r3, #1
 802461a:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 802461e:	45cb      	cmp	fp, r9
 8024620:	d346      	bcc.n	80246b0 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8024622:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024624:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8024628:	4b43      	ldr	r3, [pc, #268]	@ (8024738 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c4>)
 802462a:	fa1f f981 	uxth.w	r9, r1
 802462e:	eba2 0209 	sub.w	r2, r2, r9
 8024632:	881b      	ldrh	r3, [r3, #0]
 8024634:	b292      	uxth	r2, r2
 8024636:	2a00      	cmp	r2, #0
 8024638:	eba3 0301 	sub.w	r3, r3, r1
 802463c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024640:	bf18      	it	ne
 8024642:	f04f 0900 	movne.w	r9, #0
 8024646:	9200      	str	r2, [sp, #0]
 8024648:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 802464c:	e7a6      	b.n	802459c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x128>
 802464e:	fb0a f200 	mul.w	r2, sl, r0
 8024652:	fb1a f101 	smulbb	r1, sl, r1
 8024656:	1c55      	adds	r5, r2, #1
 8024658:	eb05 2522 	add.w	r5, r5, r2, asr #8
 802465c:	fb1a f404 	smulbb	r4, sl, r4
 8024660:	122d      	asrs	r5, r5, #8
 8024662:	fb1a f606 	smulbb	r6, sl, r6
 8024666:	1b47      	subs	r7, r0, r5
 8024668:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802466c:	fb07 1102 	mla	r1, r7, r2, r1
 8024670:	b2da      	uxtb	r2, r3
 8024672:	fb07 4402 	mla	r4, r7, r2, r4
 8024676:	f3c3 2207 	ubfx	r2, r3, #8, #8
 802467a:	4450      	add	r0, sl
 802467c:	fb07 6202 	mla	r2, r7, r2, r6
 8024680:	1b45      	subs	r5, r0, r5
 8024682:	b2ed      	uxtb	r5, r5
 8024684:	fbb1 f3f5 	udiv	r3, r1, r5
 8024688:	fbb4 f4f5 	udiv	r4, r4, r5
 802468c:	fbb2 f2f5 	udiv	r2, r2, r5
 8024690:	041b      	lsls	r3, r3, #16
 8024692:	b2e4      	uxtb	r4, r4
 8024694:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8024698:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 802469c:	0212      	lsls	r2, r2, #8
 802469e:	432b      	orrs	r3, r5
 80246a0:	b292      	uxth	r2, r2
 80246a2:	4313      	orrs	r3, r2
 80246a4:	f8ce 3000 	str.w	r3, [lr]
 80246a8:	9b01      	ldr	r3, [sp, #4]
 80246aa:	459e      	cmp	lr, r3
 80246ac:	d19e      	bne.n	80245ec <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x178>
 80246ae:	e7b2      	b.n	8024616 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1a2>
 80246b0:	e9dd b906 	ldrd	fp, r9, [sp, #24]
 80246b4:	e772      	b.n	802459c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x128>
 80246b6:	9a00      	ldr	r2, [sp, #0]
 80246b8:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80246bc:	9206      	str	r2, [sp, #24]
 80246be:	eba9 020b 	sub.w	r2, r9, fp
 80246c2:	b292      	uxth	r2, r2
 80246c4:	465b      	mov	r3, fp
 80246c6:	9207      	str	r2, [sp, #28]
 80246c8:	d187      	bne.n	80245da <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x166>
 80246ca:	2b00      	cmp	r3, #0
 80246cc:	d0a7      	beq.n	802461e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1aa>
 80246ce:	1e58      	subs	r0, r3, #1
 80246d0:	b280      	uxth	r0, r0
 80246d2:	3001      	adds	r0, #1
 80246d4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80246d8:	f89c 3000 	ldrb.w	r3, [ip]
 80246dc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80246e0:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80246e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80246e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80246ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80246f0:	f848 3b04 	str.w	r3, [r8], #4
 80246f4:	4540      	cmp	r0, r8
 80246f6:	d1ef      	bne.n	80246d8 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>
 80246f8:	e791      	b.n	802461e <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1aa>
 80246fa:	ebab 0b03 	sub.w	fp, fp, r3
 80246fe:	2300      	movs	r3, #0
 8024700:	fa1f fb8b 	uxth.w	fp, fp
 8024704:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 8024708:	9300      	str	r3, [sp, #0]
 802470a:	e747      	b.n	802459c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x128>
 802470c:	460b      	mov	r3, r1
 802470e:	3302      	adds	r3, #2
 8024710:	f891 b001 	ldrb.w	fp, [r1, #1]
 8024714:	9302      	str	r3, [sp, #8]
 8024716:	e735      	b.n	8024584 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x110>
 8024718:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 802471c:	b291      	uxth	r1, r2
 802471e:	fb94 f3f1 	sdiv	r3, r4, r1
 8024722:	e6cb      	b.n	80244bc <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x48>
 8024724:	4b05      	ldr	r3, [pc, #20]	@ (802473c <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c8>)
 8024726:	4a06      	ldr	r2, [pc, #24]	@ (8024740 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2cc>)
 8024728:	f640 61a3 	movw	r1, #3747	@ 0xea3
 802472c:	4805      	ldr	r0, [pc, #20]	@ (8024744 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d0>)
 802472e:	f007 fa43 	bl	802bbb8 <__assert_func>
 8024732:	bf00      	nop
 8024734:	2015a078 	.word	0x2015a078
 8024738:	2015a072 	.word	0x2015a072
 802473c:	0802ec20 	.word	0x0802ec20
 8024740:	0802fdb4 	.word	0x0802fdb4
 8024744:	0802eb5c 	.word	0x0802eb5c

08024748 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8024748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802474c:	7814      	ldrb	r4, [r2, #0]
 802474e:	b09f      	sub	sp, #124	@ 0x7c
 8024750:	2c01      	cmp	r4, #1
 8024752:	461d      	mov	r5, r3
 8024754:	9214      	str	r2, [sp, #80]	@ 0x50
 8024756:	9117      	str	r1, [sp, #92]	@ 0x5c
 8024758:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802475a:	f89d a0a4 	ldrb.w	sl, [sp, #164]	@ 0xa4
 802475e:	f040 8232 	bne.w	8024bc6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x47e>
 8024762:	6869      	ldr	r1, [r5, #4]
 8024764:	4683      	mov	fp, r0
 8024766:	6828      	ldr	r0, [r5, #0]
 8024768:	aa1a      	add	r2, sp, #104	@ 0x68
 802476a:	c203      	stmia	r2!, {r0, r1}
 802476c:	6818      	ldr	r0, [r3, #0]
 802476e:	6859      	ldr	r1, [r3, #4]
 8024770:	aa1c      	add	r2, sp, #112	@ 0x70
 8024772:	c203      	stmia	r2!, {r0, r1}
 8024774:	a81a      	add	r0, sp, #104	@ 0x68
 8024776:	f7f1 fef7 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802477a:	4629      	mov	r1, r5
 802477c:	a81c      	add	r0, sp, #112	@ 0x70
 802477e:	f7f1 ff1b 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024782:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	@ 0x6c
 8024786:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 802478a:	f340 8214 	ble.w	8024bb6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x46e>
 802478e:	4623      	mov	r3, r4
 8024790:	b292      	uxth	r2, r2
 8024792:	9418      	str	r4, [sp, #96]	@ 0x60
 8024794:	f9bd 0072 	ldrsh.w	r0, [sp, #114]	@ 0x72
 8024798:	f9bd 106e 	ldrsh.w	r1, [sp, #110]	@ 0x6e
 802479c:	fb90 f4f3 	sdiv	r4, r0, r3
 80247a0:	4419      	add	r1, r3
 80247a2:	3901      	subs	r1, #1
 80247a4:	fb91 f1f3 	sdiv	r1, r1, r3
 80247a8:	b2a4      	uxth	r4, r4
 80247aa:	fb03 0314 	mls	r3, r3, r4, r0
 80247ae:	9416      	str	r4, [sp, #88]	@ 0x58
 80247b0:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80247b4:	f8bd 6068 	ldrh.w	r6, [sp, #104]	@ 0x68
 80247b8:	fb13 4202 	smlabb	r2, r3, r2, r4
 80247bc:	f8bd 506a 	ldrh.w	r5, [sp, #106]	@ 0x6a
 80247c0:	4bae      	ldr	r3, [pc, #696]	@ (8024a7c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x334>)
 80247c2:	4434      	add	r4, r6
 80247c4:	4405      	add	r5, r0
 80247c6:	6818      	ldr	r0, [r3, #0]
 80247c8:	f8ad 4070 	strh.w	r4, [sp, #112]	@ 0x70
 80247cc:	f8ad 5072 	strh.w	r5, [sp, #114]	@ 0x72
 80247d0:	f9bd 7074 	ldrsh.w	r7, [sp, #116]	@ 0x74
 80247d4:	6803      	ldr	r3, [r0, #0]
 80247d6:	b296      	uxth	r6, r2
 80247d8:	3101      	adds	r1, #1
 80247da:	9602      	str	r6, [sp, #8]
 80247dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80247de:	970d      	str	r7, [sp, #52]	@ 0x34
 80247e0:	b28c      	uxth	r4, r1
 80247e2:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	@ 0x76
 80247e6:	4798      	blx	r3
 80247e8:	2300      	movs	r3, #0
 80247ea:	2e00      	cmp	r6, #0
 80247ec:	bf0c      	ite	eq
 80247ee:	463a      	moveq	r2, r7
 80247f0:	2200      	movne	r2, #0
 80247f2:	49a3      	ldr	r1, [pc, #652]	@ (8024a80 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x338>)
 80247f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80247f6:	8809      	ldrh	r1, [r1, #0]
 80247f8:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	@ 0x72
 80247fc:	f9bd 6070 	ldrsh.w	r6, [sp, #112]	@ 0x70
 8024800:	fb05 f501 	mul.w	r5, r5, r1
 8024804:	fb01 6303 	mla	r3, r1, r3, r6
 8024808:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802480c:	9301      	str	r3, [sp, #4]
 802480e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8024812:	9308      	str	r3, [sp, #32]
 8024814:	b293      	uxth	r3, r2
 8024816:	9303      	str	r3, [sp, #12]
 8024818:	ea4f 630a 	mov.w	r3, sl, lsl #24
 802481c:	930a      	str	r3, [sp, #40]	@ 0x28
 802481e:	f10b 030e 	add.w	r3, fp, #14
 8024822:	9319      	str	r3, [sp, #100]	@ 0x64
 8024824:	4653      	mov	r3, sl
 8024826:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8024828:	46da      	mov	sl, fp
 802482a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 802482e:	f104 0904 	add.w	r9, r4, #4
 8024832:	46cb      	mov	fp, r9
 8024834:	4699      	mov	r9, r3
 8024836:	9b01      	ldr	r3, [sp, #4]
 8024838:	9a08      	ldr	r2, [sp, #32]
 802483a:	4293      	cmp	r3, r2
 802483c:	f080 8116 	bcs.w	8024a6c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x324>
 8024840:	2601      	movs	r6, #1
 8024842:	2700      	movs	r7, #0
 8024844:	9b02      	ldr	r3, [sp, #8]
 8024846:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 802484a:	46bc      	mov	ip, r7
 802484c:	fbb3 f1f1 	udiv	r1, r3, r1
 8024850:	e9dd 3215 	ldrd	r3, r2, [sp, #84]	@ 0x54
 8024854:	fa12 f283 	uxtah	r2, r2, r3
 8024858:	0092      	lsls	r2, r2, #2
 802485a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802485c:	3204      	adds	r2, #4
 802485e:	1898      	adds	r0, r3, r2
 8024860:	7883      	ldrb	r3, [r0, #2]
 8024862:	7845      	ldrb	r5, [r0, #1]
 8024864:	021b      	lsls	r3, r3, #8
 8024866:	78c0      	ldrb	r0, [r0, #3]
 8024868:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 802486c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 802486e:	4304      	orrs	r4, r0
 8024870:	4628      	mov	r0, r5
 8024872:	46b0      	mov	r8, r6
 8024874:	4420      	add	r0, r4
 8024876:	7843      	ldrb	r3, [r0, #1]
 8024878:	5d2c      	ldrb	r4, [r5, r4]
 802487a:	021b      	lsls	r3, r3, #8
 802487c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8024880:	431c      	orrs	r4, r3
 8024882:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024884:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024886:	5caa      	ldrb	r2, [r5, r2]
 8024888:	1a59      	subs	r1, r3, r1
 802488a:	b2a3      	uxth	r3, r4
 802488c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802488e:	1983      	adds	r3, r0, r6
 8024890:	9306      	str	r3, [sp, #24]
 8024892:	1993      	adds	r3, r2, r6
 8024894:	9307      	str	r3, [sp, #28]
 8024896:	b28b      	uxth	r3, r1
 8024898:	9710      	str	r7, [sp, #64]	@ 0x40
 802489a:	960c      	str	r6, [sp, #48]	@ 0x30
 802489c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802489e:	f88a 400d 	strb.w	r4, [sl, #13]
 80248a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80248a4:	9605      	str	r6, [sp, #20]
 80248a6:	9b02      	ldr	r3, [sp, #8]
 80248a8:	2b00      	cmp	r3, #0
 80248aa:	d038      	beq.n	802491e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 80248ac:	4598      	cmp	r8, r3
 80248ae:	f080 813f 	bcs.w	8024b30 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3e8>
 80248b2:	eba3 0808 	sub.w	r8, r3, r8
 80248b6:	fa1f f388 	uxth.w	r3, r8
 80248ba:	9302      	str	r3, [sp, #8]
 80248bc:	9a08      	ldr	r2, [sp, #32]
 80248be:	9b01      	ldr	r3, [sp, #4]
 80248c0:	4293      	cmp	r3, r2
 80248c2:	f080 80d3 	bcs.w	8024a6c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x324>
 80248c6:	9806      	ldr	r0, [sp, #24]
 80248c8:	9c05      	ldr	r4, [sp, #20]
 80248ca:	7842      	ldrb	r2, [r0, #1]
 80248cc:	f1c4 0107 	rsb	r1, r4, #7
 80248d0:	7803      	ldrb	r3, [r0, #0]
 80248d2:	408a      	lsls	r2, r1
 80248d4:	0052      	lsls	r2, r2, #1
 80248d6:	4123      	asrs	r3, r4
 80248d8:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80248dc:	1c61      	adds	r1, r4, #1
 80248de:	b2db      	uxtb	r3, r3
 80248e0:	4313      	orrs	r3, r2
 80248e2:	b2ca      	uxtb	r2, r1
 80248e4:	4611      	mov	r1, r2
 80248e6:	2908      	cmp	r1, #8
 80248e8:	9205      	str	r2, [sp, #20]
 80248ea:	b29a      	uxth	r2, r3
 80248ec:	f000 812d 	beq.w	8024b4a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x402>
 80248f0:	3001      	adds	r0, #1
 80248f2:	9006      	str	r0, [sp, #24]
 80248f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80248f6:	4291      	cmp	r1, r2
 80248f8:	f0c0 80fa 	bcc.w	8024af0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3a8>
 80248fc:	f04f 0801 	mov.w	r8, #1
 8024900:	b2db      	uxtb	r3, r3
 8024902:	f88a 300d 	strb.w	r3, [sl, #13]
 8024906:	9907      	ldr	r1, [sp, #28]
 8024908:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802490c:	f0c0 8123 	bcc.w	8024b56 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x40e>
 8024910:	9b02      	ldr	r3, [sp, #8]
 8024912:	e9cd 280b 	strd	r2, r8, [sp, #44]	@ 0x2c
 8024916:	f04f 0c00 	mov.w	ip, #0
 802491a:	2b00      	cmp	r3, #0
 802491c:	d1c6      	bne.n	80248ac <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x164>
 802491e:	9b03      	ldr	r3, [sp, #12]
 8024920:	4598      	cmp	r8, r3
 8024922:	461a      	mov	r2, r3
 8024924:	f0c0 80ae 	bcc.w	8024a84 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x33c>
 8024928:	eba8 0303 	sub.w	r3, r8, r3
 802492c:	b29b      	uxth	r3, r3
 802492e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024930:	9b02      	ldr	r3, [sp, #8]
 8024932:	9204      	str	r2, [sp, #16]
 8024934:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024938:	930e      	str	r3, [sp, #56]	@ 0x38
 802493a:	9b04      	ldr	r3, [sp, #16]
 802493c:	f000 80b0 	beq.w	8024aa0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x358>
 8024940:	b393      	cbz	r3, 80249a8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>
 8024942:	4463      	add	r3, ip
 8024944:	b29b      	uxth	r3, r3
 8024946:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 802494a:	4698      	mov	r8, r3
 802494c:	9a01      	ldr	r2, [sp, #4]
 802494e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024950:	f1a2 0e04 	sub.w	lr, r2, #4
 8024954:	eb0a 030c 	add.w	r3, sl, ip
 8024958:	7b5a      	ldrb	r2, [r3, #13]
 802495a:	f85e 3f04 	ldr.w	r3, [lr, #4]!
 802495e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024962:	eb0b 0102 	add.w	r1, fp, r2
 8024966:	f10c 0c01 	add.w	ip, ip, #1
 802496a:	f81b 0002 	ldrb.w	r0, [fp, r2]
 802496e:	784d      	ldrb	r5, [r1, #1]
 8024970:	788a      	ldrb	r2, [r1, #2]
 8024972:	0e19      	lsrs	r1, r3, #24
 8024974:	fa1f fc8c 	uxth.w	ip, ip
 8024978:	d13f      	bne.n	80249fa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2b2>
 802497a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802497c:	45c4      	cmp	ip, r8
 802497e:	ea40 0003 	orr.w	r0, r0, r3
 8024982:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8024986:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
 802498a:	f8ce 5000 	str.w	r5, [lr]
 802498e:	d1e1      	bne.n	8024954 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8024990:	9b04      	ldr	r3, [sp, #16]
 8024992:	9a01      	ldr	r2, [sp, #4]
 8024994:	3b01      	subs	r3, #1
 8024996:	b29b      	uxth	r3, r3
 8024998:	3301      	adds	r3, #1
 802499a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802499e:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 80249a2:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 80249a6:	9301      	str	r3, [sp, #4]
 80249a8:	9b03      	ldr	r3, [sp, #12]
 80249aa:	4598      	cmp	r8, r3
 80249ac:	d356      	bcc.n	8024a5c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x314>
 80249ae:	4b34      	ldr	r3, [pc, #208]	@ (8024a80 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x338>)
 80249b0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80249b2:	881b      	ldrh	r3, [r3, #0]
 80249b4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80249b6:	1a5b      	subs	r3, r3, r1
 80249b8:	9901      	ldr	r1, [sp, #4]
 80249ba:	3201      	adds	r2, #1
 80249bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80249c0:	9301      	str	r3, [sp, #4]
 80249c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80249c4:	9210      	str	r2, [sp, #64]	@ 0x40
 80249c6:	4293      	cmp	r3, r2
 80249c8:	f000 80e4 	beq.w	8024b94 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x44c>
 80249cc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80249d0:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80249d4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80249d8:	1a9b      	subs	r3, r3, r2
 80249da:	b29b      	uxth	r3, r3
 80249dc:	2b00      	cmp	r3, #0
 80249de:	bf14      	ite	ne
 80249e0:	2200      	movne	r2, #0
 80249e2:	2300      	moveq	r3, #0
 80249e4:	9203      	str	r2, [sp, #12]
 80249e6:	9302      	str	r3, [sp, #8]
 80249e8:	9b01      	ldr	r3, [sp, #4]
 80249ea:	9a08      	ldr	r2, [sp, #32]
 80249ec:	4293      	cmp	r3, r2
 80249ee:	d23d      	bcs.n	8024a6c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x324>
 80249f0:	f1b8 0f00 	cmp.w	r8, #0
 80249f4:	f47f af57 	bne.w	80248a6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x15e>
 80249f8:	e765      	b.n	80248c6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x17e>
 80249fa:	fb09 f601 	mul.w	r6, r9, r1
 80249fe:	fb19 f702 	smulbb	r7, r9, r2
 8024a02:	1c74      	adds	r4, r6, #1
 8024a04:	eb04 2426 	add.w	r4, r4, r6, asr #8
 8024a08:	fb19 f000 	smulbb	r0, r9, r0
 8024a0c:	1224      	asrs	r4, r4, #8
 8024a0e:	fb19 f505 	smulbb	r5, r9, r5
 8024a12:	1b0e      	subs	r6, r1, r4
 8024a14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8024a18:	fb06 7202 	mla	r2, r6, r2, r7
 8024a1c:	b2df      	uxtb	r7, r3
 8024a1e:	fb06 0007 	mla	r0, r6, r7, r0
 8024a22:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024a26:	fb06 5503 	mla	r5, r6, r3, r5
 8024a2a:	4449      	add	r1, r9
 8024a2c:	1b09      	subs	r1, r1, r4
 8024a2e:	b2c9      	uxtb	r1, r1
 8024a30:	fbb2 f2f1 	udiv	r2, r2, r1
 8024a34:	fbb0 f0f1 	udiv	r0, r0, r1
 8024a38:	fbb5 f5f1 	udiv	r5, r5, r1
 8024a3c:	0413      	lsls	r3, r2, #16
 8024a3e:	b2c0      	uxtb	r0, r0
 8024a40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8024a44:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 8024a48:	022d      	lsls	r5, r5, #8
 8024a4a:	430b      	orrs	r3, r1
 8024a4c:	b2ad      	uxth	r5, r5
 8024a4e:	432b      	orrs	r3, r5
 8024a50:	45c4      	cmp	ip, r8
 8024a52:	f8ce 3000 	str.w	r3, [lr]
 8024a56:	f47f af7d 	bne.w	8024954 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x20c>
 8024a5a:	e799      	b.n	8024990 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x248>
 8024a5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024a5e:	9a08      	ldr	r2, [sp, #32]
 8024a60:	9303      	str	r3, [sp, #12]
 8024a62:	9b01      	ldr	r3, [sp, #4]
 8024a64:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8024a68:	4293      	cmp	r3, r2
 8024a6a:	d3c1      	bcc.n	80249f0 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a8>
 8024a6c:	4b03      	ldr	r3, [pc, #12]	@ (8024a7c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x334>)
 8024a6e:	6818      	ldr	r0, [r3, #0]
 8024a70:	6803      	ldr	r3, [r0, #0]
 8024a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024a74:	4798      	blx	r3
 8024a76:	b01f      	add	sp, #124	@ 0x7c
 8024a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a7c:	2015a078 	.word	0x2015a078
 8024a80:	2015a072 	.word	0x2015a072
 8024a84:	9b02      	ldr	r3, [sp, #8]
 8024a86:	f8cd 8010 	str.w	r8, [sp, #16]
 8024a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a8c:	9b03      	ldr	r3, [sp, #12]
 8024a8e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024a92:	eba3 0308 	sub.w	r3, r3, r8
 8024a96:	b29b      	uxth	r3, r3
 8024a98:	930e      	str	r3, [sp, #56]	@ 0x38
 8024a9a:	9b04      	ldr	r3, [sp, #16]
 8024a9c:	f47f af50 	bne.w	8024940 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1f8>
 8024aa0:	2b00      	cmp	r3, #0
 8024aa2:	d081      	beq.n	80249a8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>
 8024aa4:	eb0c 0003 	add.w	r0, ip, r3
 8024aa8:	9901      	ldr	r1, [sp, #4]
 8024aaa:	b280      	uxth	r0, r0
 8024aac:	eb0a 030c 	add.w	r3, sl, ip
 8024ab0:	7b5b      	ldrb	r3, [r3, #13]
 8024ab2:	f10c 0c01 	add.w	ip, ip, #1
 8024ab6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024aba:	eb0b 0203 	add.w	r2, fp, r3
 8024abe:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8024ac2:	7894      	ldrb	r4, [r2, #2]
 8024ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8024ac8:	7852      	ldrb	r2, [r2, #1]
 8024aca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8024ace:	fa1f fc8c 	uxth.w	ip, ip
 8024ad2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024ad6:	4584      	cmp	ip, r0
 8024ad8:	f841 3b04 	str.w	r3, [r1], #4
 8024adc:	d1e6      	bne.n	8024aac <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x364>
 8024ade:	9b04      	ldr	r3, [sp, #16]
 8024ae0:	9a01      	ldr	r2, [sp, #4]
 8024ae2:	3b01      	subs	r3, #1
 8024ae4:	b29b      	uxth	r3, r3
 8024ae6:	3301      	adds	r3, #1
 8024ae8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024aec:	9301      	str	r3, [sp, #4]
 8024aee:	e75b      	b.n	80249a8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>
 8024af0:	9b07      	ldr	r3, [sp, #28]
 8024af2:	4293      	cmp	r3, r2
 8024af4:	d832      	bhi.n	8024b5c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x414>
 8024af6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024af8:	f89a 100d 	ldrb.w	r1, [sl, #13]
 8024afc:	eb0a 0300 	add.w	r3, sl, r0
 8024b00:	7359      	strb	r1, [r3, #13]
 8024b02:	f89a 300d 	ldrb.w	r3, [sl, #13]
 8024b06:	1c41      	adds	r1, r0, #1
 8024b08:	fa1f f881 	uxth.w	r8, r1
 8024b0c:	9c07      	ldr	r4, [sp, #28]
 8024b0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8024b10:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
 8024b14:	3401      	adds	r4, #1
 8024b16:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 8024b1a:	b2a3      	uxth	r3, r4
 8024b1c:	f8a0 5050 	strh.w	r5, [r0, #80]	@ 0x50
 8024b20:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 8024b24:	9307      	str	r3, [sp, #28]
 8024b26:	e9cd 280b 	strd	r2, r8, [sp, #44]	@ 0x2c
 8024b2a:	f04f 0c00 	mov.w	ip, #0
 8024b2e:	e6ba      	b.n	80248a6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x15e>
 8024b30:	eba8 0803 	sub.w	r8, r8, r3
 8024b34:	449c      	add	ip, r3
 8024b36:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8024b3a:	fa1f f888 	uxth.w	r8, r8
 8024b3e:	9303      	str	r3, [sp, #12]
 8024b40:	2300      	movs	r3, #0
 8024b42:	fa1f fc8c 	uxth.w	ip, ip
 8024b46:	9302      	str	r3, [sp, #8]
 8024b48:	e74e      	b.n	80249e8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a0>
 8024b4a:	2100      	movs	r1, #0
 8024b4c:	9105      	str	r1, [sp, #20]
 8024b4e:	9906      	ldr	r1, [sp, #24]
 8024b50:	3102      	adds	r1, #2
 8024b52:	9106      	str	r1, [sp, #24]
 8024b54:	e6ce      	b.n	80248f4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ac>
 8024b56:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024b58:	3101      	adds	r1, #1
 8024b5a:	e7d7      	b.n	8024b0c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x3c4>
 8024b5c:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
 8024b60:	f893 804f 	ldrb.w	r8, [r3, #79]	@ 0x4f
 8024b64:	4613      	mov	r3, r2
 8024b66:	f1b8 0f01 	cmp.w	r8, #1
 8024b6a:	d90d      	bls.n	8024b88 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x440>
 8024b6c:	f108 010d 	add.w	r1, r8, #13
 8024b70:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8024b72:	4451      	add	r1, sl
 8024b74:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8024b78:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8024b7c:	f801 0d01 	strb.w	r0, [r1, #-1]!
 8024b80:	428c      	cmp	r4, r1
 8024b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8024b86:	d1f5      	bne.n	8024b74 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x42c>
 8024b88:	b2db      	uxtb	r3, r3
 8024b8a:	f88a 300d 	strb.w	r3, [sl, #13]
 8024b8e:	fa1f f888 	uxth.w	r8, r8
 8024b92:	e6b8      	b.n	8024906 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x1be>
 8024b94:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8024b98:	f8bd 2068 	ldrh.w	r2, [sp, #104]	@ 0x68
 8024b9c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8024b9e:	1a9b      	subs	r3, r3, r2
 8024ba0:	b29b      	uxth	r3, r3
 8024ba2:	2b00      	cmp	r3, #0
 8024ba4:	9302      	str	r3, [sp, #8]
 8024ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024ba8:	bf18      	it	ne
 8024baa:	2300      	movne	r3, #0
 8024bac:	3101      	adds	r1, #1
 8024bae:	b29b      	uxth	r3, r3
 8024bb0:	9115      	str	r1, [sp, #84]	@ 0x54
 8024bb2:	9303      	str	r3, [sp, #12]
 8024bb4:	e63f      	b.n	8024836 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0xee>
 8024bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024bba:	b292      	uxth	r2, r2
 8024bbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8024bc0:	b299      	uxth	r1, r3
 8024bc2:	9118      	str	r1, [sp, #96]	@ 0x60
 8024bc4:	e5e6      	b.n	8024794 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x4c>
 8024bc6:	4b03      	ldr	r3, [pc, #12]	@ (8024bd4 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x48c>)
 8024bc8:	4a03      	ldr	r2, [pc, #12]	@ (8024bd8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x490>)
 8024bca:	f640 7142 	movw	r1, #3906	@ 0xf42
 8024bce:	4803      	ldr	r0, [pc, #12]	@ (8024bdc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h+0x494>)
 8024bd0:	f006 fff2 	bl	802bbb8 <__assert_func>
 8024bd4:	0802ec20 	.word	0x0802ec20
 8024bd8:	08030110 	.word	0x08030110
 8024bdc:	0802eb5c 	.word	0x0802eb5c

08024be0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8024be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024be4:	4617      	mov	r7, r2
 8024be6:	8812      	ldrh	r2, [r2, #0]
 8024be8:	b095      	sub	sp, #84	@ 0x54
 8024bea:	461c      	mov	r4, r3
 8024bec:	f89d 907c 	ldrb.w	r9, [sp, #124]	@ 0x7c
 8024bf0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024bf2:	2a00      	cmp	r2, #0
 8024bf4:	f040 8112 	bne.w	8024e1c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x23c>
 8024bf8:	4688      	mov	r8, r1
 8024bfa:	6820      	ldr	r0, [r4, #0]
 8024bfc:	6861      	ldr	r1, [r4, #4]
 8024bfe:	aa10      	add	r2, sp, #64	@ 0x40
 8024c00:	c203      	stmia	r2!, {r0, r1}
 8024c02:	6818      	ldr	r0, [r3, #0]
 8024c04:	6859      	ldr	r1, [r3, #4]
 8024c06:	aa12      	add	r2, sp, #72	@ 0x48
 8024c08:	c203      	stmia	r2!, {r0, r1}
 8024c0a:	a810      	add	r0, sp, #64	@ 0x40
 8024c0c:	f7f1 fcac 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024c10:	4621      	mov	r1, r4
 8024c12:	a812      	add	r0, sp, #72	@ 0x48
 8024c14:	f7f1 fcd0 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024c18:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	@ 0x48
 8024c1c:	f9bd 504a 	ldrsh.w	r5, [sp, #74]	@ 0x4a
 8024c20:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8024c24:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8024c28:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8024c2c:	487f      	ldr	r0, [pc, #508]	@ (8024e2c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8024c2e:	fb11 4105 	smlabb	r1, r1, r5, r4
 8024c32:	4422      	add	r2, r4
 8024c34:	442b      	add	r3, r5
 8024c36:	6800      	ldr	r0, [r0, #0]
 8024c38:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8024c3c:	f8ad 2048 	strh.w	r2, [sp, #72]	@ 0x48
 8024c40:	6802      	ldr	r2, [r0, #0]
 8024c42:	4488      	add	r8, r1
 8024c44:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 8024c48:	4c79      	ldr	r4, [pc, #484]	@ (8024e30 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x250>)
 8024c4a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8024c4e:	910c      	str	r1, [sp, #48]	@ 0x30
 8024c50:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	@ 0x4e
 8024c54:	42a3      	cmp	r3, r4
 8024c56:	910e      	str	r1, [sp, #56]	@ 0x38
 8024c58:	f040 80ab 	bne.w	8024db2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d2>
 8024c5c:	6841      	ldr	r1, [r0, #4]
 8024c5e:	4c75      	ldr	r4, [pc, #468]	@ (8024e34 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x254>)
 8024c60:	680b      	ldr	r3, [r1, #0]
 8024c62:	699b      	ldr	r3, [r3, #24]
 8024c64:	42a3      	cmp	r3, r4
 8024c66:	f040 80cb 	bne.w	8024e00 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x220>
 8024c6a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8024c6c:	4798      	blx	r3
 8024c6e:	4b72      	ldr	r3, [pc, #456]	@ (8024e38 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8024c70:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	@ 0x4a
 8024c74:	881b      	ldrh	r3, [r3, #0]
 8024c76:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	@ 0x48
 8024c7a:	fb01 2303 	mla	r3, r1, r3, r2
 8024c7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024c82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024c86:	2b00      	cmp	r3, #0
 8024c88:	f340 808b 	ble.w	8024da2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8024c8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c8e:	2b00      	cmp	r3, #0
 8024c90:	f340 8087 	ble.w	8024da2 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c2>
 8024c94:	2200      	movs	r2, #0
 8024c96:	f04f 0c04 	mov.w	ip, #4
 8024c9a:	009b      	lsls	r3, r3, #2
 8024c9c:	920d      	str	r2, [sp, #52]	@ 0x34
 8024c9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024ca0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ca2:	4645      	mov	r5, r8
 8024ca4:	1d1c      	adds	r4, r3, #4
 8024ca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ca8:	eb08 0e03 	add.w	lr, r8, r3
 8024cac:	e048      	b.n	8024d40 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8024cae:	fb09 f303 	mul.w	r3, r9, r3
 8024cb2:	1c5a      	adds	r2, r3, #1
 8024cb4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024cb8:	121b      	asrs	r3, r3, #8
 8024cba:	b2d8      	uxtb	r0, r3
 8024cbc:	43c1      	mvns	r1, r0
 8024cbe:	b29b      	uxth	r3, r3
 8024cc0:	fb1a f203 	smulbb	r2, sl, r3
 8024cc4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8024cc8:	b2c9      	uxtb	r1, r1
 8024cca:	fb0a 2a01 	mla	sl, sl, r1, r2
 8024cce:	fa1f fa8a 	uxth.w	sl, sl
 8024cd2:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8024cd6:	f10a 0b01 	add.w	fp, sl, #1
 8024cda:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8024cde:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024ce2:	fb12 fb01 	smulbb	fp, r2, r1
 8024ce6:	f804 ac04 	strb.w	sl, [r4, #-4]
 8024cea:	7872      	ldrb	r2, [r6, #1]
 8024cec:	f814 ac02 	ldrb.w	sl, [r4, #-2]
 8024cf0:	fb02 b203 	mla	r2, r2, r3, fp
 8024cf4:	b292      	uxth	r2, r2
 8024cf6:	f102 0b01 	add.w	fp, r2, #1
 8024cfa:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8024cfe:	fb1a fa01 	smulbb	sl, sl, r1
 8024d02:	1212      	asrs	r2, r2, #8
 8024d04:	f804 2c03 	strb.w	r2, [r4, #-3]
 8024d08:	78b1      	ldrb	r1, [r6, #2]
 8024d0a:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8024d0e:	fb01 a103 	mla	r1, r1, r3, sl
 8024d12:	fb12 f303 	smulbb	r3, r2, r3
 8024d16:	b289      	uxth	r1, r1
 8024d18:	b29b      	uxth	r3, r3
 8024d1a:	f101 0a01 	add.w	sl, r1, #1
 8024d1e:	1c5e      	adds	r6, r3, #1
 8024d20:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 8024d24:	4402      	add	r2, r0
 8024d26:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8024d2a:	1209      	asrs	r1, r1, #8
 8024d2c:	eba2 2313 	sub.w	r3, r2, r3, lsr #8
 8024d30:	f804 1c02 	strb.w	r1, [r4, #-2]
 8024d34:	f804 3c01 	strb.w	r3, [r4, #-1]
 8024d38:	45ae      	cmp	lr, r5
 8024d3a:	f104 0404 	add.w	r4, r4, #4
 8024d3e:	d01c      	beq.n	8024d7a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x19a>
 8024d40:	f815 2b01 	ldrb.w	r2, [r5], #1
 8024d44:	fb1c c202 	smlabb	r2, ip, r2, ip
 8024d48:	18be      	adds	r6, r7, r2
 8024d4a:	78f3      	ldrb	r3, [r6, #3]
 8024d4c:	2b00      	cmp	r3, #0
 8024d4e:	d0f3      	beq.n	8024d38 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x158>
 8024d50:	2bff      	cmp	r3, #255	@ 0xff
 8024d52:	f817 a002 	ldrb.w	sl, [r7, r2]
 8024d56:	d1aa      	bne.n	8024cae <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8024d58:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8024d5c:	d1a7      	bne.n	8024cae <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xce>
 8024d5e:	f804 ac04 	strb.w	sl, [r4, #-4]
 8024d62:	7873      	ldrb	r3, [r6, #1]
 8024d64:	45ae      	cmp	lr, r5
 8024d66:	f804 3c03 	strb.w	r3, [r4, #-3]
 8024d6a:	78b3      	ldrb	r3, [r6, #2]
 8024d6c:	f104 0404 	add.w	r4, r4, #4
 8024d70:	f804 9c05 	strb.w	r9, [r4, #-5]
 8024d74:	f804 3c06 	strb.w	r3, [r4, #-6]
 8024d78:	d1e2      	bne.n	8024d40 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 8024d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8024e38 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8024d7c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024d7e:	881b      	ldrh	r3, [r3, #0]
 8024d80:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8024d82:	1a5b      	subs	r3, r3, r1
 8024d84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024d88:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8024d8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024d8c:	4418      	add	r0, r3
 8024d8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024d90:	3101      	adds	r1, #1
 8024d92:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	@ 0x44
 8024d96:	428b      	cmp	r3, r1
 8024d98:	910d      	str	r1, [sp, #52]	@ 0x34
 8024d9a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024d9c:	4490      	add	r8, r2
 8024d9e:	f47f af7f 	bne.w	8024ca0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xc0>
 8024da2:	4b22      	ldr	r3, [pc, #136]	@ (8024e2c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8024da4:	6818      	ldr	r0, [r3, #0]
 8024da6:	6803      	ldr	r3, [r0, #0]
 8024da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024daa:	4798      	blx	r3
 8024dac:	b015      	add	sp, #84	@ 0x54
 8024dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024db2:	4798      	blx	r3
 8024db4:	4603      	mov	r3, r0
 8024db6:	2b01      	cmp	r3, #1
 8024db8:	d126      	bne.n	8024e08 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x228>
 8024dba:	4a20      	ldr	r2, [pc, #128]	@ (8024e3c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x25c>)
 8024dbc:	6810      	ldr	r0, [r2, #0]
 8024dbe:	b338      	cbz	r0, 8024e10 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x230>
 8024dc0:	f04f 0c02 	mov.w	ip, #2
 8024dc4:	260b      	movs	r6, #11
 8024dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8024e38 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x258>)
 8024dc8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8024dcc:	8814      	ldrh	r4, [r2, #0]
 8024dce:	f8bd 5044 	ldrh.w	r5, [sp, #68]	@ 0x44
 8024dd2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8024dd6:	9406      	str	r4, [sp, #24]
 8024dd8:	f8bd 404a 	ldrh.w	r4, [sp, #74]	@ 0x4a
 8024ddc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8024de0:	9305      	str	r3, [sp, #20]
 8024de2:	f8cd 9010 	str.w	r9, [sp, #16]
 8024de6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8024dea:	463a      	mov	r2, r7
 8024dec:	4641      	mov	r1, r8
 8024dee:	e9cd 6c07 	strd	r6, ip, [sp, #28]
 8024df2:	9503      	str	r5, [sp, #12]
 8024df4:	9400      	str	r4, [sp, #0]
 8024df6:	f7f7 f953 	bl	801c0a0 <_ZN8touchgfx8HALGPU2D13dma2dBlitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8024dfa:	b015      	add	sp, #84	@ 0x54
 8024dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e00:	4608      	mov	r0, r1
 8024e02:	4798      	blx	r3
 8024e04:	4603      	mov	r3, r0
 8024e06:	e7d6      	b.n	8024db6 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d6>
 8024e08:	4b08      	ldr	r3, [pc, #32]	@ (8024e2c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24c>)
 8024e0a:	6818      	ldr	r0, [r3, #0]
 8024e0c:	6802      	ldr	r2, [r0, #0]
 8024e0e:	e72c      	b.n	8024c6a <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x8a>
 8024e10:	4b0b      	ldr	r3, [pc, #44]	@ (8024e40 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x260>)
 8024e12:	4a0c      	ldr	r2, [pc, #48]	@ (8024e44 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x264>)
 8024e14:	217c      	movs	r1, #124	@ 0x7c
 8024e16:	480c      	ldr	r0, [pc, #48]	@ (8024e48 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x268>)
 8024e18:	f006 fece 	bl	802bbb8 <__assert_func>
 8024e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8024e4c <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x26c>)
 8024e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8024e50 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x270>)
 8024e20:	f241 012a 	movw	r1, #4138	@ 0x102a
 8024e24:	480b      	ldr	r0, [pc, #44]	@ (8024e54 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>)
 8024e26:	f006 fec7 	bl	802bbb8 <__assert_func>
 8024e2a:	bf00      	nop
 8024e2c:	2015a078 	.word	0x2015a078
 8024e30:	080126cd 	.word	0x080126cd
 8024e34:	080155bb 	.word	0x080155bb
 8024e38:	2015a072 	.word	0x2015a072
 8024e3c:	2015a1e4 	.word	0x2015a1e4
 8024e40:	0802eab8 	.word	0x0802eab8
 8024e44:	0802f324 	.word	0x0802f324
 8024e48:	0802eae0 	.word	0x0802eae0
 8024e4c:	0802ebd0 	.word	0x0802ebd0
 8024e50:	0802fa6c 	.word	0x0802fa6c
 8024e54:	0802eb5c 	.word	0x0802eb5c

08024e58 <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh>:
 8024e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024e5c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8024e60:	fb03 f300 	mul.w	r3, r3, r0
 8024e64:	1c58      	adds	r0, r3, #1
 8024e66:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024e6a:	121b      	asrs	r3, r3, #8
 8024e6c:	2bff      	cmp	r3, #255	@ 0xff
 8024e6e:	d039      	beq.n	8024ee4 <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh+0x8c>
 8024e70:	6810      	ldr	r0, [r2, #0]
 8024e72:	0e07      	lsrs	r7, r0, #24
 8024e74:	d036      	beq.n	8024ee4 <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh+0x8c>
 8024e76:	b2dc      	uxtb	r4, r3
 8024e78:	2b00      	cmp	r3, #0
 8024e7a:	d03d      	beq.n	8024ef8 <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh+0xa0>
 8024e7c:	fb04 f507 	mul.w	r5, r4, r7
 8024e80:	1c6e      	adds	r6, r5, #1
 8024e82:	eb06 2625 	add.w	r6, r6, r5, asr #8
 8024e86:	1236      	asrs	r6, r6, #8
 8024e88:	f891 8002 	ldrb.w	r8, [r1, #2]
 8024e8c:	eba7 0e06 	sub.w	lr, r7, r6
 8024e90:	b2c5      	uxtb	r5, r0
 8024e92:	f891 c001 	ldrb.w	ip, [r1, #1]
 8024e96:	fb0e f505 	mul.w	r5, lr, r5
 8024e9a:	fb03 f808 	mul.w	r8, r3, r8
 8024e9e:	7809      	ldrb	r1, [r1, #0]
 8024ea0:	fb03 fc0c 	mul.w	ip, r3, ip
 8024ea4:	fb03 5501 	mla	r5, r3, r1, r5
 8024ea8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8024eac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8024eb0:	fb0e 8101 	mla	r1, lr, r1, r8
 8024eb4:	19e0      	adds	r0, r4, r7
 8024eb6:	fb0e c303 	mla	r3, lr, r3, ip
 8024eba:	1b80      	subs	r0, r0, r6
 8024ebc:	b2c0      	uxtb	r0, r0
 8024ebe:	fbb1 f1f0 	udiv	r1, r1, r0
 8024ec2:	fbb5 f4f0 	udiv	r4, r5, r0
 8024ec6:	fbb3 f3f0 	udiv	r3, r3, r0
 8024eca:	0409      	lsls	r1, r1, #16
 8024ecc:	b2e4      	uxtb	r4, r4
 8024ece:	f401 017f 	and.w	r1, r1, #16711680	@ 0xff0000
 8024ed2:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
 8024ed6:	021b      	lsls	r3, r3, #8
 8024ed8:	4301      	orrs	r1, r0
 8024eda:	b29b      	uxth	r3, r3
 8024edc:	430b      	orrs	r3, r1
 8024ede:	6013      	str	r3, [r2, #0]
 8024ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024ee4:	7848      	ldrb	r0, [r1, #1]
 8024ee6:	788d      	ldrb	r5, [r1, #2]
 8024ee8:	780c      	ldrb	r4, [r1, #0]
 8024eea:	0200      	lsls	r0, r0, #8
 8024eec:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 8024ef0:	4321      	orrs	r1, r4
 8024ef2:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8024ef6:	6013      	str	r3, [r2, #0]
 8024ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024efc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8024efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f00:	4692      	mov	sl, r2
 8024f02:	7812      	ldrb	r2, [r2, #0]
 8024f04:	b095      	sub	sp, #84	@ 0x54
 8024f06:	460d      	mov	r5, r1
 8024f08:	461e      	mov	r6, r3
 8024f0a:	900d      	str	r0, [sp, #52]	@ 0x34
 8024f0c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024f0e:	f89d 107c 	ldrb.w	r1, [sp, #124]	@ 0x7c
 8024f12:	2a00      	cmp	r2, #0
 8024f14:	f040 816b 	bne.w	80251ee <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f2>
 8024f18:	6830      	ldr	r0, [r6, #0]
 8024f1a:	460f      	mov	r7, r1
 8024f1c:	6871      	ldr	r1, [r6, #4]
 8024f1e:	aa10      	add	r2, sp, #64	@ 0x40
 8024f20:	c203      	stmia	r2!, {r0, r1}
 8024f22:	6818      	ldr	r0, [r3, #0]
 8024f24:	6859      	ldr	r1, [r3, #4]
 8024f26:	aa12      	add	r2, sp, #72	@ 0x48
 8024f28:	c203      	stmia	r2!, {r0, r1}
 8024f2a:	a810      	add	r0, sp, #64	@ 0x40
 8024f2c:	f7f1 fb1c 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024f30:	4631      	mov	r1, r6
 8024f32:	a812      	add	r0, sp, #72	@ 0x48
 8024f34:	f7f1 fb40 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024f38:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8024f3c:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	@ 0x48
 8024f40:	f003 0201 	and.w	r2, r3, #1
 8024f44:	4614      	mov	r4, r2
 8024f46:	9208      	str	r2, [sp, #32]
 8024f48:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	@ 0x4a
 8024f4c:	f8bd 0042 	ldrh.w	r0, [sp, #66]	@ 0x42
 8024f50:	4423      	add	r3, r4
 8024f52:	fb02 1303 	mla	r3, r2, r3, r1
 8024f56:	f8bd 6040 	ldrh.w	r6, [sp, #64]	@ 0x40
 8024f5a:	4402      	add	r2, r0
 8024f5c:	48a7      	ldr	r0, [pc, #668]	@ (80251fc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x300>)
 8024f5e:	440e      	add	r6, r1
 8024f60:	6800      	ldr	r0, [r0, #0]
 8024f62:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8024f66:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 8024f6a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8024f6e:	eb05 0363 	add.w	r3, r5, r3, asr #1
 8024f72:	6802      	ldr	r2, [r0, #0]
 8024f74:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8024f78:	9302      	str	r3, [sp, #8]
 8024f7a:	f001 0301 	and.w	r3, r1, #1
 8024f7e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8024f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f82:	9607      	str	r6, [sp, #28]
 8024f84:	f9bd 404e 	ldrsh.w	r4, [sp, #78]	@ 0x4e
 8024f88:	4790      	blx	r2
 8024f8a:	4a9d      	ldr	r2, [pc, #628]	@ (8025200 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x304>)
 8024f8c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 8024f90:	8812      	ldrh	r2, [r2, #0]
 8024f92:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	@ 0x48
 8024f96:	fb04 f402 	mul.w	r4, r4, r2
 8024f9a:	fb02 1303 	mla	r3, r2, r3, r1
 8024f9e:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8024fa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024fa6:	429d      	cmp	r5, r3
 8024fa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8024faa:	f10a 0a04 	add.w	sl, sl, #4
 8024fae:	f080 80f4 	bcs.w	802519a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x29e>
 8024fb2:	46bb      	mov	fp, r7
 8024fb4:	1e73      	subs	r3, r6, #1
 8024fb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8024fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024fba:	2b00      	cmp	r3, #0
 8024fbc:	f000 8104 	beq.w	80251c8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2cc>
 8024fc0:	9a02      	ldr	r2, [sp, #8]
 8024fc2:	7813      	ldrb	r3, [r2, #0]
 8024fc4:	1c54      	adds	r4, r2, #1
 8024fc6:	f003 030f 	and.w	r3, r3, #15
 8024fca:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8024fce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024fd0:	0e1b      	lsrs	r3, r3, #24
 8024fd2:	f040 8104 	bne.w	80251de <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2e2>
 8024fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024fd8:	3504      	adds	r5, #4
 8024fda:	2b01      	cmp	r3, #1
 8024fdc:	f340 80bf 	ble.w	802515e <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x262>
 8024fe0:	3b02      	subs	r3, #2
 8024fe2:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8024fe6:	9304      	str	r3, [sp, #16]
 8024fe8:	f10e 0301 	add.w	r3, lr, #1
 8024fec:	e9cd 5e05 	strd	r5, lr, [sp, #20]
 8024ff0:	9303      	str	r3, [sp, #12]
 8024ff2:	18e7      	adds	r7, r4, r3
 8024ff4:	f105 0808 	add.w	r8, r5, #8
 8024ff8:	46de      	mov	lr, fp
 8024ffa:	e00b      	b.n	8025014 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x118>
 8024ffc:	f005 050f 	and.w	r5, r5, #15
 8025000:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8025004:	3401      	adds	r4, #1
 8025006:	0e1a      	lsrs	r2, r3, #24
 8025008:	d153      	bne.n	80250b2 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b6>
 802500a:	42bc      	cmp	r4, r7
 802500c:	f108 0808 	add.w	r8, r8, #8
 8025010:	f000 8099 	beq.w	8025146 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x24a>
 8025014:	7825      	ldrb	r5, [r4, #0]
 8025016:	092b      	lsrs	r3, r5, #4
 8025018:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 802501c:	0e1a      	lsrs	r2, r3, #24
 802501e:	d0ed      	beq.n	8024ffc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x100>
 8025020:	fb0e f202 	mul.w	r2, lr, r2
 8025024:	1c51      	adds	r1, r2, #1
 8025026:	eb01 2222 	add.w	r2, r1, r2, asr #8
 802502a:	1212      	asrs	r2, r2, #8
 802502c:	2aff      	cmp	r2, #255	@ 0xff
 802502e:	f000 80bc 	beq.w	80251aa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ae>
 8025032:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8025036:	0e0e      	lsrs	r6, r1, #24
 8025038:	f000 80b7 	beq.w	80251aa <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ae>
 802503c:	b2d0      	uxtb	r0, r2
 802503e:	2a00      	cmp	r2, #0
 8025040:	d0dc      	beq.n	8024ffc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x100>
 8025042:	fb00 fc06 	mul.w	ip, r0, r6
 8025046:	f10c 0501 	add.w	r5, ip, #1
 802504a:	eb05 252c 	add.w	r5, r5, ip, asr #8
 802504e:	122d      	asrs	r5, r5, #8
 8025050:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025052:	fa5f fb81 	uxtb.w	fp, r1
 8025056:	1b75      	subs	r5, r6, r5
 8025058:	f3c3 4907 	ubfx	r9, r3, #16, #8
 802505c:	fb05 fb0b 	mul.w	fp, r5, fp
 8025060:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8025064:	fb02 f909 	mul.w	r9, r2, r9
 8025068:	fb02 fc0c 	mul.w	ip, r2, ip
 802506c:	b2db      	uxtb	r3, r3
 802506e:	fb02 b303 	mla	r3, r2, r3, fp
 8025072:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8025076:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802507a:	fb05 9902 	mla	r9, r5, r2, r9
 802507e:	fb05 c101 	mla	r1, r5, r1, ip
 8025082:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025084:	4430      	add	r0, r6
 8025086:	1b45      	subs	r5, r0, r5
 8025088:	b2ed      	uxtb	r5, r5
 802508a:	fbb9 f2f5 	udiv	r2, r9, r5
 802508e:	fbb3 f3f5 	udiv	r3, r3, r5
 8025092:	fbb1 f1f5 	udiv	r1, r1, r5
 8025096:	0412      	lsls	r2, r2, #16
 8025098:	b2db      	uxtb	r3, r3
 802509a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 802509e:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80250a2:	0209      	lsls	r1, r1, #8
 80250a4:	4313      	orrs	r3, r2
 80250a6:	b289      	uxth	r1, r1
 80250a8:	430b      	orrs	r3, r1
 80250aa:	f848 3c08 	str.w	r3, [r8, #-8]
 80250ae:	7825      	ldrb	r5, [r4, #0]
 80250b0:	e7a4      	b.n	8024ffc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x100>
 80250b2:	fb0e f202 	mul.w	r2, lr, r2
 80250b6:	1c51      	adds	r1, r2, #1
 80250b8:	eb01 2222 	add.w	r2, r1, r2, asr #8
 80250bc:	1212      	asrs	r2, r2, #8
 80250be:	2aff      	cmp	r2, #255	@ 0xff
 80250c0:	d07b      	beq.n	80251ba <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2be>
 80250c2:	f858 1c04 	ldr.w	r1, [r8, #-4]
 80250c6:	0e0e      	lsrs	r6, r1, #24
 80250c8:	d077      	beq.n	80251ba <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2be>
 80250ca:	b2d0      	uxtb	r0, r2
 80250cc:	2a00      	cmp	r2, #0
 80250ce:	d09c      	beq.n	802500a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x10e>
 80250d0:	fb00 fc06 	mul.w	ip, r0, r6
 80250d4:	f10c 0501 	add.w	r5, ip, #1
 80250d8:	eb05 252c 	add.w	r5, r5, ip, asr #8
 80250dc:	122d      	asrs	r5, r5, #8
 80250de:	950b      	str	r5, [sp, #44]	@ 0x2c
 80250e0:	fa5f fb81 	uxtb.w	fp, r1
 80250e4:	1b75      	subs	r5, r6, r5
 80250e6:	f3c3 4907 	ubfx	r9, r3, #16, #8
 80250ea:	fb05 fb0b 	mul.w	fp, r5, fp
 80250ee:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80250f2:	fb02 f909 	mul.w	r9, r2, r9
 80250f6:	fb02 fc0c 	mul.w	ip, r2, ip
 80250fa:	b2db      	uxtb	r3, r3
 80250fc:	fb02 b303 	mla	r3, r2, r3, fp
 8025100:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8025104:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025108:	fb05 9902 	mla	r9, r5, r2, r9
 802510c:	fb05 c101 	mla	r1, r5, r1, ip
 8025110:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025112:	4430      	add	r0, r6
 8025114:	1b45      	subs	r5, r0, r5
 8025116:	b2ed      	uxtb	r5, r5
 8025118:	fbb9 f2f5 	udiv	r2, r9, r5
 802511c:	fbb3 f3f5 	udiv	r3, r3, r5
 8025120:	fbb1 f1f5 	udiv	r1, r1, r5
 8025124:	0412      	lsls	r2, r2, #16
 8025126:	b2db      	uxtb	r3, r3
 8025128:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 802512c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8025130:	0209      	lsls	r1, r1, #8
 8025132:	4313      	orrs	r3, r2
 8025134:	b289      	uxth	r1, r1
 8025136:	430b      	orrs	r3, r1
 8025138:	42bc      	cmp	r4, r7
 802513a:	f848 3c04 	str.w	r3, [r8, #-4]
 802513e:	f108 0808 	add.w	r8, r8, #8
 8025142:	f47f af67 	bne.w	8025014 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x118>
 8025146:	46f3      	mov	fp, lr
 8025148:	f8dd e018 	ldr.w	lr, [sp, #24]
 802514c:	9a04      	ldr	r2, [sp, #16]
 802514e:	ebce 73ce 	rsb	r3, lr, lr, lsl #31
 8025152:	9d05      	ldr	r5, [sp, #20]
 8025154:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025158:	9a03      	ldr	r2, [sp, #12]
 802515a:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 802515e:	2b01      	cmp	r3, #1
 8025160:	d107      	bne.n	8025172 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x276>
 8025162:	7823      	ldrb	r3, [r4, #0]
 8025164:	091b      	lsrs	r3, r3, #4
 8025166:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 802516a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802516c:	0e1b      	lsrs	r3, r3, #24
 802516e:	d12e      	bne.n	80251ce <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d2>
 8025170:	3504      	adds	r5, #4
 8025172:	9908      	ldr	r1, [sp, #32]
 8025174:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8025178:	4a21      	ldr	r2, [pc, #132]	@ (8025200 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x304>)
 802517a:	440b      	add	r3, r1
 802517c:	8812      	ldrh	r2, [r2, #0]
 802517e:	9907      	ldr	r1, [sp, #28]
 8025180:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8025184:	1a52      	subs	r2, r2, r1
 8025186:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 802518a:	9a02      	ldr	r2, [sp, #8]
 802518c:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8025190:	9302      	str	r3, [sp, #8]
 8025192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025194:	42ab      	cmp	r3, r5
 8025196:	f63f af0f 	bhi.w	8024fb8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xbc>
 802519a:	4b18      	ldr	r3, [pc, #96]	@ (80251fc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x300>)
 802519c:	6818      	ldr	r0, [r3, #0]
 802519e:	6803      	ldr	r3, [r0, #0]
 80251a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80251a2:	4798      	blx	r3
 80251a4:	b015      	add	sp, #84	@ 0x54
 80251a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251aa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80251ae:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80251b2:	f848 2c08 	str.w	r2, [r8, #-8]
 80251b6:	7825      	ldrb	r5, [r4, #0]
 80251b8:	e720      	b.n	8024ffc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x100>
 80251ba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80251be:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80251c2:	f848 2c04 	str.w	r2, [r8, #-4]
 80251c6:	e720      	b.n	802500a <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x10e>
 80251c8:	9c02      	ldr	r4, [sp, #8]
 80251ca:	9b07      	ldr	r3, [sp, #28]
 80251cc:	e705      	b.n	8024fda <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xde>
 80251ce:	9300      	str	r3, [sp, #0]
 80251d0:	462a      	mov	r2, r5
 80251d2:	465b      	mov	r3, fp
 80251d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80251d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80251d8:	f7ff fe3e 	bl	8024e58 <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh>
 80251dc:	e7c8      	b.n	8025170 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x274>
 80251de:	9300      	str	r3, [sp, #0]
 80251e0:	462a      	mov	r2, r5
 80251e2:	465b      	mov	r3, fp
 80251e4:	a90f      	add	r1, sp, #60	@ 0x3c
 80251e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80251e8:	f7ff fe36 	bl	8024e58 <_ZNK8touchgfx8LCDGPU2D24blendPixelARGB8888_32BPPEPKhPmhh>
 80251ec:	e6f3      	b.n	8024fd6 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xda>
 80251ee:	4b05      	ldr	r3, [pc, #20]	@ (8025204 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x308>)
 80251f0:	4a05      	ldr	r2, [pc, #20]	@ (8025208 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x30c>)
 80251f2:	f241 018c 	movw	r1, #4236	@ 0x108c
 80251f6:	4805      	ldr	r0, [pc, #20]	@ (802520c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x310>)
 80251f8:	f006 fcde 	bl	802bbb8 <__assert_func>
 80251fc:	2015a078 	.word	0x2015a078
 8025200:	2015a072 	.word	0x2015a072
 8025204:	0802ec50 	.word	0x0802ec50
 8025208:	0802ff60 	.word	0x0802ff60
 802520c:	0802eb5c 	.word	0x0802eb5c

08025210 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 8025210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025214:	b093      	sub	sp, #76	@ 0x4c
 8025216:	9206      	str	r2, [sp, #24]
 8025218:	468b      	mov	fp, r1
 802521a:	7812      	ldrb	r2, [r2, #0]
 802521c:	f89d 1074 	ldrb.w	r1, [sp, #116]	@ 0x74
 8025220:	461c      	mov	r4, r3
 8025222:	9108      	str	r1, [sp, #32]
 8025224:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025226:	2a00      	cmp	r2, #0
 8025228:	f040 815f 	bne.w	80254ea <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2da>
 802522c:	6820      	ldr	r0, [r4, #0]
 802522e:	6861      	ldr	r1, [r4, #4]
 8025230:	aa0e      	add	r2, sp, #56	@ 0x38
 8025232:	c203      	stmia	r2!, {r0, r1}
 8025234:	6818      	ldr	r0, [r3, #0]
 8025236:	6859      	ldr	r1, [r3, #4]
 8025238:	aa10      	add	r2, sp, #64	@ 0x40
 802523a:	c203      	stmia	r2!, {r0, r1}
 802523c:	a80e      	add	r0, sp, #56	@ 0x38
 802523e:	f7f1 f993 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025242:	4621      	mov	r1, r4
 8025244:	a810      	add	r0, sp, #64	@ 0x40
 8025246:	f7f1 f9b7 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802524a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 802524e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8025252:	f340 8137 	ble.w	80254c4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2b4>
 8025256:	2201      	movs	r2, #1
 8025258:	b299      	uxth	r1, r3
 802525a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802525e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8025262:	fb93 f5f2 	sdiv	r5, r3, r2
 8025266:	b2ae      	uxth	r6, r5
 8025268:	fb02 3416 	mls	r4, r2, r6, r3
 802526c:	fb14 0101 	smlabb	r1, r4, r1, r0
 8025270:	f9bd 403e 	ldrsh.w	r4, [sp, #62]	@ 0x3e
 8025274:	fa1f fa81 	uxth.w	sl, r1
 8025278:	4414      	add	r4, r2
 802527a:	3c01      	subs	r4, #1
 802527c:	fb94 f4f2 	sdiv	r4, r4, r2
 8025280:	b126      	cbz	r6, 802528c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x7c>
 8025282:	9a06      	ldr	r2, [sp, #24]
 8025284:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8025288:	ba12      	rev	r2, r2
 802528a:	4493      	add	fp, r2
 802528c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8025290:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8025294:	4402      	add	r2, r0
 8025296:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802529a:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	@ 0x44
 802529e:	440b      	add	r3, r1
 80252a0:	4616      	mov	r6, r2
 80252a2:	4995      	ldr	r1, [pc, #596]	@ (80254f8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2e8>)
 80252a4:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80252a8:	6808      	ldr	r0, [r1, #0]
 80252aa:	9203      	str	r2, [sp, #12]
 80252ac:	6803      	ldr	r3, [r0, #0]
 80252ae:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80252b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80252b4:	4798      	blx	r3
 80252b6:	f1ba 0f00 	cmp.w	sl, #0
 80252ba:	bf0c      	ite	eq
 80252bc:	4633      	moveq	r3, r6
 80252be:	2300      	movne	r3, #0
 80252c0:	498e      	ldr	r1, [pc, #568]	@ (80254fc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ec>)
 80252c2:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80252c6:	8809      	ldrh	r1, [r1, #0]
 80252c8:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 80252cc:	fb05 f501 	mul.w	r5, r5, r1
 80252d0:	fb01 6202 	mla	r2, r1, r2, r6
 80252d4:	b2a4      	uxth	r4, r4
 80252d6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80252da:	00a2      	lsls	r2, r4, #2
 80252dc:	eb08 0485 	add.w	r4, r8, r5, lsl #2
 80252e0:	3204      	adds	r2, #4
 80252e2:	45a0      	cmp	r8, r4
 80252e4:	9207      	str	r2, [sp, #28]
 80252e6:	fa1f f983 	uxth.w	r9, r3
 80252ea:	d21e      	bcs.n	802532a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x11a>
 80252ec:	2300      	movs	r3, #0
 80252ee:	4648      	mov	r0, r9
 80252f0:	9301      	str	r3, [sp, #4]
 80252f2:	461d      	mov	r5, r3
 80252f4:	4653      	mov	r3, sl
 80252f6:	b985      	cbnz	r5, 802531a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x10a>
 80252f8:	f89b 2000 	ldrb.w	r2, [fp]
 80252fc:	0995      	lsrs	r5, r2, #6
 80252fe:	1e69      	subs	r1, r5, #1
 8025300:	2902      	cmp	r1, #2
 8025302:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8025306:	bf88      	it	hi
 8025308:	f89b 5001 	ldrbhi.w	r5, [fp, #1]
 802530c:	9201      	str	r2, [sp, #4]
 802530e:	bf9a      	itte	ls
 8025310:	f10b 0b01 	addls.w	fp, fp, #1
 8025314:	b2ad      	uxthls	r5, r5
 8025316:	f10b 0b02 	addhi.w	fp, fp, #2
 802531a:	b173      	cbz	r3, 802533a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x12a>
 802531c:	429d      	cmp	r5, r3
 802531e:	d259      	bcs.n	80253d4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1c4>
 8025320:	1b5b      	subs	r3, r3, r5
 8025322:	2500      	movs	r5, #0
 8025324:	b29b      	uxth	r3, r3
 8025326:	45a0      	cmp	r8, r4
 8025328:	d3e5      	bcc.n	80252f6 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xe6>
 802532a:	4b73      	ldr	r3, [pc, #460]	@ (80254f8 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2e8>)
 802532c:	6818      	ldr	r0, [r3, #0]
 802532e:	6803      	ldr	r3, [r0, #0]
 8025330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025332:	4798      	blx	r3
 8025334:	b013      	add	sp, #76	@ 0x4c
 8025336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802533a:	2204      	movs	r2, #4
 802533c:	4616      	mov	r6, r2
 802533e:	9907      	ldr	r1, [sp, #28]
 8025340:	9a01      	ldr	r2, [sp, #4]
 8025342:	4285      	cmp	r5, r0
 8025344:	fb16 1202 	smlabb	r2, r6, r2, r1
 8025348:	9906      	ldr	r1, [sp, #24]
 802534a:	588e      	ldr	r6, [r1, r2]
 802534c:	ea4f 6c16 	mov.w	ip, r6, lsr #24
 8025350:	d357      	bcc.n	8025402 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1f2>
 8025352:	1a2a      	subs	r2, r5, r0
 8025354:	b292      	uxth	r2, r2
 8025356:	9202      	str	r2, [sp, #8]
 8025358:	2800      	cmp	r0, #0
 802535a:	d041      	beq.n	80253e0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d0>
 802535c:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8025360:	9a08      	ldr	r2, [sp, #32]
 8025362:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8025366:	fb02 f20c 	mul.w	r2, r2, ip
 802536a:	f102 0a01 	add.w	sl, r2, #1
 802536e:	eb0a 2222 	add.w	r2, sl, r2, asr #8
 8025372:	1212      	asrs	r2, r2, #8
 8025374:	b2d1      	uxtb	r1, r2
 8025376:	910a      	str	r1, [sp, #40]	@ 0x28
 8025378:	b291      	uxth	r1, r2
 802537a:	9109      	str	r1, [sp, #36]	@ 0x24
 802537c:	fb02 f109 	mul.w	r1, r2, r9
 8025380:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8025384:	ea4f 2709 	mov.w	r7, r9, lsl #8
 8025388:	b2f6      	uxtb	r6, r6
 802538a:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 802538e:	4337      	orrs	r7, r6
 8025390:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025392:	fb06 f602 	mul.w	r6, r6, r2
 8025396:	fb02 fe0e 	mul.w	lr, r2, lr
 802539a:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 802539e:	f1bc 0f00 	cmp.w	ip, #0
 80253a2:	d036      	beq.n	8025412 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x202>
 80253a4:	2a00      	cmp	r2, #0
 80253a6:	d13b      	bne.n	8025420 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x210>
 80253a8:	9a04      	ldr	r2, [sp, #16]
 80253aa:	1e51      	subs	r1, r2, #1
 80253ac:	b289      	uxth	r1, r1
 80253ae:	eb08 0c81 	add.w	ip, r8, r1, lsl #2
 80253b2:	f1a8 0204 	sub.w	r2, r8, #4
 80253b6:	f852 6f04 	ldr.w	r6, [r2, #4]!
 80253ba:	0e36      	lsrs	r6, r6, #24
 80253bc:	bf08      	it	eq
 80253be:	6017      	streq	r7, [r2, #0]
 80253c0:	4594      	cmp	ip, r2
 80253c2:	d1f8      	bne.n	80253b6 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1a6>
 80253c4:	3101      	adds	r1, #1
 80253c6:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80253ca:	4285      	cmp	r5, r0
 80253cc:	d208      	bcs.n	80253e0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1d0>
 80253ce:	9d02      	ldr	r5, [sp, #8]
 80253d0:	9805      	ldr	r0, [sp, #20]
 80253d2:	e7a8      	b.n	8025326 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x116>
 80253d4:	1aed      	subs	r5, r5, r3
 80253d6:	b2ad      	uxth	r5, r5
 80253d8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 80253dc:	2300      	movs	r3, #0
 80253de:	e7a2      	b.n	8025326 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x116>
 80253e0:	9903      	ldr	r1, [sp, #12]
 80253e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80253e6:	4a45      	ldr	r2, [pc, #276]	@ (80254fc <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ec>)
 80253e8:	b288      	uxth	r0, r1
 80253ea:	1a1b      	subs	r3, r3, r0
 80253ec:	8812      	ldrh	r2, [r2, #0]
 80253ee:	b29b      	uxth	r3, r3
 80253f0:	2b00      	cmp	r3, #0
 80253f2:	eba2 0201 	sub.w	r2, r2, r1
 80253f6:	9d02      	ldr	r5, [sp, #8]
 80253f8:	bf18      	it	ne
 80253fa:	2000      	movne	r0, #0
 80253fc:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8025400:	e791      	b.n	8025326 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x116>
 8025402:	1b42      	subs	r2, r0, r5
 8025404:	b292      	uxth	r2, r2
 8025406:	9205      	str	r2, [sp, #20]
 8025408:	2d00      	cmp	r5, #0
 802540a:	d06b      	beq.n	80254e4 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d4>
 802540c:	9504      	str	r5, [sp, #16]
 802540e:	9302      	str	r3, [sp, #8]
 8025410:	e7a6      	b.n	8025360 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x150>
 8025412:	9a04      	ldr	r2, [sp, #16]
 8025414:	3a01      	subs	r2, #1
 8025416:	b292      	uxth	r2, r2
 8025418:	3201      	adds	r2, #1
 802541a:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 802541e:	e7d4      	b.n	80253ca <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 8025420:	2aff      	cmp	r2, #255	@ 0xff
 8025422:	9a04      	ldr	r2, [sp, #16]
 8025424:	d054      	beq.n	80254d0 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2c0>
 8025426:	f102 3aff 	add.w	sl, r2, #4294967295
 802542a:	fa1f fa8a 	uxth.w	sl, sl
 802542e:	e9cd 6e0c 	strd	r6, lr, [sp, #48]	@ 0x30
 8025432:	f10a 0a01 	add.w	sl, sl, #1
 8025436:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
 802543a:	9304      	str	r3, [sp, #16]
 802543c:	f8d8 2000 	ldr.w	r2, [r8]
 8025440:	0e11      	lsrs	r1, r2, #24
 8025442:	d038      	beq.n	80254b6 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a6>
 8025444:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8025446:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025448:	fb11 f606 	smulbb	r6, r1, r6
 802544c:	b2b6      	uxth	r6, r6
 802544e:	f106 0e01 	add.w	lr, r6, #1
 8025452:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8025456:	ea4f 2e26 	mov.w	lr, r6, asr #8
 802545a:	eba1 090e 	sub.w	r9, r1, lr
 802545e:	b2d6      	uxtb	r6, r2
 8025460:	fb09 3606 	mla	r6, r9, r6, r3
 8025464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025466:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802546a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802546e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025470:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025474:	4419      	add	r1, r3
 8025476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025478:	eba1 010e 	sub.w	r1, r1, lr
 802547c:	fb09 3202 	mla	r2, r9, r2, r3
 8025480:	b2c9      	uxtb	r1, r1
 8025482:	fbb6 f6f1 	udiv	r6, r6, r1
 8025486:	fbbc fcf1 	udiv	ip, ip, r1
 802548a:	fbb2 f9f1 	udiv	r9, r2, r1
 802548e:	b2f6      	uxtb	r6, r6
 8025490:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8025494:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8025498:	f40c 027f 	and.w	r2, ip, #16711680	@ 0xff0000
 802549c:	ea4f 2109 	mov.w	r1, r9, lsl #8
 80254a0:	4332      	orrs	r2, r6
 80254a2:	b289      	uxth	r1, r1
 80254a4:	430a      	orrs	r2, r1
 80254a6:	f8c8 2000 	str.w	r2, [r8]
 80254aa:	f108 0804 	add.w	r8, r8, #4
 80254ae:	45d0      	cmp	r8, sl
 80254b0:	d1c4      	bne.n	802543c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x22c>
 80254b2:	9b04      	ldr	r3, [sp, #16]
 80254b4:	e789      	b.n	80253ca <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 80254b6:	f8c8 7000 	str.w	r7, [r8]
 80254ba:	f108 0804 	add.w	r8, r8, #4
 80254be:	45d0      	cmp	r8, sl
 80254c0:	d1bc      	bne.n	802543c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x22c>
 80254c2:	e7f6      	b.n	80254b2 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2a2>
 80254c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80254c8:	b299      	uxth	r1, r3
 80254ca:	fb94 f2f1 	sdiv	r2, r4, r1
 80254ce:	e6c4      	b.n	802525a <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x4a>
 80254d0:	3a01      	subs	r2, #1
 80254d2:	b292      	uxth	r2, r2
 80254d4:	3201      	adds	r2, #1
 80254d6:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80254da:	f848 7b04 	str.w	r7, [r8], #4
 80254de:	4590      	cmp	r8, r2
 80254e0:	d1fb      	bne.n	80254da <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2ca>
 80254e2:	e772      	b.n	80253ca <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ba>
 80254e4:	9805      	ldr	r0, [sp, #20]
 80254e6:	462b      	mov	r3, r5
 80254e8:	e71d      	b.n	8025326 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x116>
 80254ea:	4b05      	ldr	r3, [pc, #20]	@ (8025500 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f0>)
 80254ec:	4a05      	ldr	r2, [pc, #20]	@ (8025504 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f4>)
 80254ee:	f241 01eb 	movw	r1, #4331	@ 0x10eb
 80254f2:	4805      	ldr	r0, [pc, #20]	@ (8025508 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2f8>)
 80254f4:	f006 fb60 	bl	802bbb8 <__assert_func>
 80254f8:	2015a078 	.word	0x2015a078
 80254fc:	2015a072 	.word	0x2015a072
 8025500:	0802ec50 	.word	0x0802ec50
 8025504:	0803036c 	.word	0x0803036c
 8025508:	0802eb5c 	.word	0x0802eb5c

0802550c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>:
 802550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025510:	b0a1      	sub	sp, #132	@ 0x84
 8025512:	9210      	str	r2, [sp, #64]	@ 0x40
 8025514:	9119      	str	r1, [sp, #100]	@ 0x64
 8025516:	7812      	ldrb	r2, [r2, #0]
 8025518:	f89d 10ac 	ldrb.w	r1, [sp, #172]	@ 0xac
 802551c:	461c      	mov	r4, r3
 802551e:	9104      	str	r1, [sp, #16]
 8025520:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8025522:	2a00      	cmp	r2, #0
 8025524:	f040 8215 	bne.w	8025952 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x446>
 8025528:	6861      	ldr	r1, [r4, #4]
 802552a:	4683      	mov	fp, r0
 802552c:	6820      	ldr	r0, [r4, #0]
 802552e:	aa1c      	add	r2, sp, #112	@ 0x70
 8025530:	c203      	stmia	r2!, {r0, r1}
 8025532:	6818      	ldr	r0, [r3, #0]
 8025534:	6859      	ldr	r1, [r3, #4]
 8025536:	aa1e      	add	r2, sp, #120	@ 0x78
 8025538:	c203      	stmia	r2!, {r0, r1}
 802553a:	a81c      	add	r0, sp, #112	@ 0x70
 802553c:	f7f1 f814 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025540:	4621      	mov	r1, r4
 8025542:	a81e      	add	r0, sp, #120	@ 0x78
 8025544:	f7f1 f838 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025548:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	@ 0x74
 802554c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8025550:	f340 81f7 	ble.w	8025942 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x436>
 8025554:	2301      	movs	r3, #1
 8025556:	b289      	uxth	r1, r1
 8025558:	931a      	str	r3, [sp, #104]	@ 0x68
 802555a:	f9bd 007a 	ldrsh.w	r0, [sp, #122]	@ 0x7a
 802555e:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	@ 0x76
 8025562:	fb90 f4f3 	sdiv	r4, r0, r3
 8025566:	441a      	add	r2, r3
 8025568:	3a01      	subs	r2, #1
 802556a:	fb92 f2f3 	sdiv	r2, r2, r3
 802556e:	b2a4      	uxth	r4, r4
 8025570:	fb03 0314 	mls	r3, r3, r4, r0
 8025574:	9418      	str	r4, [sp, #96]	@ 0x60
 8025576:	f8bd 4078 	ldrh.w	r4, [sp, #120]	@ 0x78
 802557a:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 802557e:	fb13 4101 	smlabb	r1, r3, r1, r4
 8025582:	f8bd 5072 	ldrh.w	r5, [sp, #114]	@ 0x72
 8025586:	4bc6      	ldr	r3, [pc, #792]	@ (80258a0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x394>)
 8025588:	4434      	add	r4, r6
 802558a:	4405      	add	r5, r0
 802558c:	6818      	ldr	r0, [r3, #0]
 802558e:	f8ad 4078 	strh.w	r4, [sp, #120]	@ 0x78
 8025592:	f8ad 507a 	strh.w	r5, [sp, #122]	@ 0x7a
 8025596:	f9bd 607c 	ldrsh.w	r6, [sp, #124]	@ 0x7c
 802559a:	6803      	ldr	r3, [r0, #0]
 802559c:	3201      	adds	r2, #1
 802559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80255a0:	9608      	str	r6, [sp, #32]
 80255a2:	fa1f f881 	uxth.w	r8, r1
 80255a6:	b294      	uxth	r4, r2
 80255a8:	f9bd 507e 	ldrsh.w	r5, [sp, #126]	@ 0x7e
 80255ac:	4798      	blx	r3
 80255ae:	2300      	movs	r3, #0
 80255b0:	49bc      	ldr	r1, [pc, #752]	@ (80258a4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x398>)
 80255b2:	f1b8 0f00 	cmp.w	r8, #0
 80255b6:	bf08      	it	eq
 80255b8:	4632      	moveq	r2, r6
 80255ba:	8809      	ldrh	r1, [r1, #0]
 80255bc:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 80255c0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80255c2:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	@ 0x7a
 80255c6:	fb05 f501 	mul.w	r5, r5, r1
 80255ca:	fb01 6303 	mla	r3, r1, r3, r6
 80255ce:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80255d2:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80255d6:	f104 0304 	add.w	r3, r4, #4
 80255da:	9315      	str	r3, [sp, #84]	@ 0x54
 80255dc:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80255e0:	bf18      	it	ne
 80255e2:	2200      	movne	r2, #0
 80255e4:	9303      	str	r3, [sp, #12]
 80255e6:	f10b 030e 	add.w	r3, fp, #14
 80255ea:	931b      	str	r3, [sp, #108]	@ 0x6c
 80255ec:	465b      	mov	r3, fp
 80255ee:	fa1f f982 	uxth.w	r9, r2
 80255f2:	46cb      	mov	fp, r9
 80255f4:	46b4      	mov	ip, r6
 80255f6:	4647      	mov	r7, r8
 80255f8:	4699      	mov	r9, r3
 80255fa:	9b03      	ldr	r3, [sp, #12]
 80255fc:	459c      	cmp	ip, r3
 80255fe:	f080 8104 	bcs.w	802580a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8025602:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	@ 0x5c
 8025606:	2301      	movs	r3, #1
 8025608:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 802560c:	2500      	movs	r5, #0
 802560e:	fbb7 f1f1 	udiv	r1, r7, r1
 8025612:	f04f 0a01 	mov.w	sl, #1
 8025616:	fa10 f282 	uxtah	r2, r0, r2
 802561a:	0092      	lsls	r2, r2, #2
 802561c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802561e:	3204      	adds	r2, #4
 8025620:	4410      	add	r0, r2
 8025622:	9305      	str	r3, [sp, #20]
 8025624:	7883      	ldrb	r3, [r0, #2]
 8025626:	7844      	ldrb	r4, [r0, #1]
 8025628:	021b      	lsls	r3, r3, #8
 802562a:	78c0      	ldrb	r0, [r0, #3]
 802562c:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 802562e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8025632:	4304      	orrs	r4, r0
 8025634:	1930      	adds	r0, r6, r4
 8025636:	7843      	ldrb	r3, [r0, #1]
 8025638:	5d34      	ldrb	r4, [r6, r4]
 802563a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 802563c:	021b      	lsls	r3, r3, #8
 802563e:	5cb2      	ldrb	r2, [r6, r2]
 8025640:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8025642:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8025646:	1a71      	subs	r1, r6, r1
 8025648:	431c      	orrs	r4, r3
 802564a:	920a      	str	r2, [sp, #40]	@ 0x28
 802564c:	3201      	adds	r2, #1
 802564e:	f889 400d 	strb.w	r4, [r9, #13]
 8025652:	9512      	str	r5, [sp, #72]	@ 0x48
 8025654:	9202      	str	r2, [sp, #8]
 8025656:	4666      	mov	r6, ip
 8025658:	b28a      	uxth	r2, r1
 802565a:	46d6      	mov	lr, sl
 802565c:	4629      	mov	r1, r5
 802565e:	464d      	mov	r5, r9
 8025660:	46d9      	mov	r9, fp
 8025662:	b2a4      	uxth	r4, r4
 8025664:	3001      	adds	r0, #1
 8025666:	9407      	str	r4, [sp, #28]
 8025668:	9001      	str	r0, [sp, #4]
 802566a:	9216      	str	r2, [sp, #88]	@ 0x58
 802566c:	2f00      	cmp	r7, #0
 802566e:	d034      	beq.n	80256da <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ce>
 8025670:	45ba      	cmp	sl, r7
 8025672:	f080 80d2 	bcs.w	802581a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x30e>
 8025676:	9b03      	ldr	r3, [sp, #12]
 8025678:	eba7 070a 	sub.w	r7, r7, sl
 802567c:	429e      	cmp	r6, r3
 802567e:	b2bf      	uxth	r7, r7
 8025680:	f080 80c3 	bcs.w	802580a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8025684:	9801      	ldr	r0, [sp, #4]
 8025686:	f1ce 0107 	rsb	r1, lr, #7
 802568a:	7842      	ldrb	r2, [r0, #1]
 802568c:	7803      	ldrb	r3, [r0, #0]
 802568e:	408a      	lsls	r2, r1
 8025690:	fa43 f30e 	asr.w	r3, r3, lr
 8025694:	0052      	lsls	r2, r2, #1
 8025696:	f10e 0101 	add.w	r1, lr, #1
 802569a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 802569e:	b2db      	uxtb	r3, r3
 80256a0:	fa5f fe81 	uxtb.w	lr, r1
 80256a4:	4313      	orrs	r3, r2
 80256a6:	f1be 0f08 	cmp.w	lr, #8
 80256aa:	b29a      	uxth	r2, r3
 80256ac:	f000 80f1 	beq.w	8025892 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x386>
 80256b0:	3001      	adds	r0, #1
 80256b2:	9001      	str	r0, [sp, #4]
 80256b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80256b6:	4291      	cmp	r1, r2
 80256b8:	f0c0 80c0 	bcc.w	802583c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x330>
 80256bc:	f04f 0a01 	mov.w	sl, #1
 80256c0:	b2db      	uxtb	r3, r3
 80256c2:	736b      	strb	r3, [r5, #13]
 80256c4:	9902      	ldr	r1, [sp, #8]
 80256c6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80256ca:	f0c0 810a 	bcc.w	80258e2 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x3d6>
 80256ce:	9207      	str	r2, [sp, #28]
 80256d0:	f8cd a014 	str.w	sl, [sp, #20]
 80256d4:	2100      	movs	r1, #0
 80256d6:	2f00      	cmp	r7, #0
 80256d8:	d1ca      	bne.n	8025670 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x164>
 80256da:	45ca      	cmp	sl, r9
 80256dc:	f0c0 80cd 	bcc.w	802587a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x36e>
 80256e0:	ebaa 0309 	sub.w	r3, sl, r9
 80256e4:	b29b      	uxth	r3, r3
 80256e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80256e8:	f1b9 0f00 	cmp.w	r9, #0
 80256ec:	f000 80dc 	beq.w	80258a8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x39c>
 80256f0:	464b      	mov	r3, r9
 80256f2:	f8cd 9018 	str.w	r9, [sp, #24]
 80256f6:	9711      	str	r7, [sp, #68]	@ 0x44
 80256f8:	18cb      	adds	r3, r1, r3
 80256fa:	e9cd ea0d 	strd	lr, sl, [sp, #52]	@ 0x34
 80256fe:	46b3      	mov	fp, r6
 8025700:	fa1f fc83 	uxth.w	ip, r3
 8025704:	e9cd 690b 	strd	r6, r9, [sp, #44]	@ 0x2c
 8025708:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 802570c:	970f      	str	r7, [sp, #60]	@ 0x3c
 802570e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8025712:	e045      	b.n	80257a0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x294>
 8025714:	f8db 0000 	ldr.w	r0, [fp]
 8025718:	0e07      	lsrs	r7, r0, #24
 802571a:	d055      	beq.n	80257c8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2bc>
 802571c:	b2d4      	uxtb	r4, r2
 802571e:	2a00      	cmp	r2, #0
 8025720:	d03a      	beq.n	8025798 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x28c>
 8025722:	fb04 fe07 	mul.w	lr, r4, r7
 8025726:	f10e 0601 	add.w	r6, lr, #1
 802572a:	eb06 262e 	add.w	r6, r6, lr, asr #8
 802572e:	1236      	asrs	r6, r6, #8
 8025730:	fa5f fe80 	uxtb.w	lr, r0
 8025734:	9614      	str	r6, [sp, #80]	@ 0x50
 8025736:	1bbe      	subs	r6, r7, r6
 8025738:	9413      	str	r4, [sp, #76]	@ 0x4c
 802573a:	f3c3 4907 	ubfx	r9, r3, #16, #8
 802573e:	fb06 f40e 	mul.w	r4, r6, lr
 8025742:	fb02 f909 	mul.w	r9, r2, r9
 8025746:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 802574a:	fb02 fe0e 	mul.w	lr, r2, lr
 802574e:	b2db      	uxtb	r3, r3
 8025750:	fb02 4303 	mla	r3, r2, r3, r4
 8025754:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8025758:	fb06 9902 	mla	r9, r6, r2, r9
 802575c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025760:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025762:	fb06 e000 	mla	r0, r6, r0, lr
 8025766:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025768:	443a      	add	r2, r7
 802576a:	1b94      	subs	r4, r2, r6
 802576c:	b2e4      	uxtb	r4, r4
 802576e:	fbb9 f9f4 	udiv	r9, r9, r4
 8025772:	fbb3 f3f4 	udiv	r3, r3, r4
 8025776:	fbb0 f0f4 	udiv	r0, r0, r4
 802577a:	ea4f 4909 	mov.w	r9, r9, lsl #16
 802577e:	b2db      	uxtb	r3, r3
 8025780:	f409 097f 	and.w	r9, r9, #16711680	@ 0xff0000
 8025784:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8025788:	0200      	lsls	r0, r0, #8
 802578a:	ea43 0909 	orr.w	r9, r3, r9
 802578e:	b280      	uxth	r0, r0
 8025790:	ea49 0000 	orr.w	r0, r9, r0
 8025794:	f8cb 0000 	str.w	r0, [fp]
 8025798:	4561      	cmp	r1, ip
 802579a:	f10b 0b04 	add.w	fp, fp, #4
 802579e:	d01d      	beq.n	80257dc <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2d0>
 80257a0:	2204      	movs	r2, #4
 80257a2:	186b      	adds	r3, r5, r1
 80257a4:	7b5b      	ldrb	r3, [r3, #13]
 80257a6:	3101      	adds	r1, #1
 80257a8:	fb12 a303 	smlabb	r3, r2, r3, sl
 80257ac:	f858 3003 	ldr.w	r3, [r8, r3]
 80257b0:	b289      	uxth	r1, r1
 80257b2:	0e1a      	lsrs	r2, r3, #24
 80257b4:	d0f0      	beq.n	8025798 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x28c>
 80257b6:	9804      	ldr	r0, [sp, #16]
 80257b8:	fb00 f202 	mul.w	r2, r0, r2
 80257bc:	1c50      	adds	r0, r2, #1
 80257be:	eb00 2222 	add.w	r2, r0, r2, asr #8
 80257c2:	1212      	asrs	r2, r2, #8
 80257c4:	2aff      	cmp	r2, #255	@ 0xff
 80257c6:	d1a5      	bne.n	8025714 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x208>
 80257c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80257cc:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80257d0:	4561      	cmp	r1, ip
 80257d2:	f8cb 2000 	str.w	r2, [fp]
 80257d6:	f10b 0b04 	add.w	fp, fp, #4
 80257da:	d1e1      	bne.n	80257a0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x294>
 80257dc:	e9dd 690b 	ldrd	r6, r9, [sp, #44]	@ 0x2c
 80257e0:	e9dd ea0d 	ldrd	lr, sl, [sp, #52]	@ 0x34
 80257e4:	9b06      	ldr	r3, [sp, #24]
 80257e6:	45ca      	cmp	sl, r9
 80257e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80257ec:	b29b      	uxth	r3, r3
 80257ee:	f103 0301 	add.w	r3, r3, #1
 80257f2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80257f4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80257f8:	d257      	bcs.n	80258aa <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x39e>
 80257fa:	9b03      	ldr	r3, [sp, #12]
 80257fc:	4661      	mov	r1, ip
 80257fe:	429e      	cmp	r6, r3
 8025800:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8025804:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8025808:	d313      	bcc.n	8025832 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x326>
 802580a:	4b25      	ldr	r3, [pc, #148]	@ (80258a0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x394>)
 802580c:	6818      	ldr	r0, [r3, #0]
 802580e:	6803      	ldr	r3, [r0, #0]
 8025810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025812:	4798      	blx	r3
 8025814:	b021      	add	sp, #132	@ 0x84
 8025816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802581a:	ebaa 0a07 	sub.w	sl, sl, r7
 802581e:	4439      	add	r1, r7
 8025820:	2700      	movs	r7, #0
 8025822:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8025826:	fa1f fa8a 	uxth.w	sl, sl
 802582a:	b289      	uxth	r1, r1
 802582c:	9b03      	ldr	r3, [sp, #12]
 802582e:	429e      	cmp	r6, r3
 8025830:	d2eb      	bcs.n	802580a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8025832:	f1ba 0f00 	cmp.w	sl, #0
 8025836:	f47f af19 	bne.w	802566c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 802583a:	e723      	b.n	8025684 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x178>
 802583c:	9b02      	ldr	r3, [sp, #8]
 802583e:	4293      	cmp	r3, r2
 8025840:	d852      	bhi.n	80258e8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x3dc>
 8025842:	9805      	ldr	r0, [sp, #20]
 8025844:	7b69      	ldrb	r1, [r5, #13]
 8025846:	182b      	adds	r3, r5, r0
 8025848:	7359      	strb	r1, [r3, #13]
 802584a:	7b6b      	ldrb	r3, [r5, #13]
 802584c:	1c41      	adds	r1, r0, #1
 802584e:	fa1f fa81 	uxth.w	sl, r1
 8025852:	9c02      	ldr	r4, [sp, #8]
 8025854:	f8cd a014 	str.w	sl, [sp, #20]
 8025858:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 802585c:	f104 0c01 	add.w	ip, r4, #1
 8025860:	9c07      	ldr	r4, [sp, #28]
 8025862:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
 8025866:	fa1f f38c 	uxth.w	r3, ip
 802586a:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
 802586e:	f8a0 4050 	strh.w	r4, [r0, #80]	@ 0x50
 8025872:	9302      	str	r3, [sp, #8]
 8025874:	9207      	str	r2, [sp, #28]
 8025876:	2100      	movs	r1, #0
 8025878:	e6f8      	b.n	802566c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x160>
 802587a:	eba9 030a 	sub.w	r3, r9, sl
 802587e:	b29b      	uxth	r3, r3
 8025880:	9311      	str	r3, [sp, #68]	@ 0x44
 8025882:	f1ba 0f00 	cmp.w	sl, #0
 8025886:	d06b      	beq.n	8025960 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x454>
 8025888:	f8cd a018 	str.w	sl, [sp, #24]
 802588c:	9709      	str	r7, [sp, #36]	@ 0x24
 802588e:	4653      	mov	r3, sl
 8025890:	e732      	b.n	80256f8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1ec>
 8025892:	4601      	mov	r1, r0
 8025894:	3102      	adds	r1, #2
 8025896:	f04f 0e00 	mov.w	lr, #0
 802589a:	9101      	str	r1, [sp, #4]
 802589c:	e70a      	b.n	80256b4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1a8>
 802589e:	bf00      	nop
 80258a0:	2015a078 	.word	0x2015a078
 80258a4:	2015a072 	.word	0x2015a072
 80258a8:	468c      	mov	ip, r1
 80258aa:	4b31      	ldr	r3, [pc, #196]	@ (8025970 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x464>)
 80258ac:	9908      	ldr	r1, [sp, #32]
 80258ae:	881b      	ldrh	r3, [r3, #0]
 80258b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80258b2:	1a5b      	subs	r3, r3, r1
 80258b4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80258b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80258ba:	3201      	adds	r2, #1
 80258bc:	4293      	cmp	r3, r2
 80258be:	9212      	str	r2, [sp, #72]	@ 0x48
 80258c0:	d02d      	beq.n	802591e <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x412>
 80258c2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80258c6:	f8bd 7074 	ldrh.w	r7, [sp, #116]	@ 0x74
 80258ca:	4661      	mov	r1, ip
 80258cc:	eba7 0709 	sub.w	r7, r7, r9
 80258d0:	b2bf      	uxth	r7, r7
 80258d2:	2f00      	cmp	r7, #0
 80258d4:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80258d8:	bf14      	ite	ne
 80258da:	f04f 0900 	movne.w	r9, #0
 80258de:	2700      	moveq	r7, #0
 80258e0:	e7a4      	b.n	802582c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x320>
 80258e2:	9905      	ldr	r1, [sp, #20]
 80258e4:	3101      	adds	r1, #1
 80258e6:	e7b4      	b.n	8025852 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x346>
 80258e8:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80258ec:	f893 a04f 	ldrb.w	sl, [r3, #79]	@ 0x4f
 80258f0:	4613      	mov	r3, r2
 80258f2:	f1ba 0f01 	cmp.w	sl, #1
 80258f6:	d90d      	bls.n	8025914 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x408>
 80258f8:	f10a 010d 	add.w	r1, sl, #13
 80258fc:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 80258fe:	4429      	add	r1, r5
 8025900:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8025904:	f893 004e 	ldrb.w	r0, [r3, #78]	@ 0x4e
 8025908:	f801 0d01 	strb.w	r0, [r1, #-1]!
 802590c:	428c      	cmp	r4, r1
 802590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8025912:	d1f5      	bne.n	8025900 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x3f4>
 8025914:	b2db      	uxtb	r3, r3
 8025916:	736b      	strb	r3, [r5, #13]
 8025918:	fa1f fa8a 	uxth.w	sl, sl
 802591c:	e6d2      	b.n	80256c4 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x1b8>
 802591e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 8025922:	f8bd 2070 	ldrh.w	r2, [sp, #112]	@ 0x70
 8025926:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025928:	1a9b      	subs	r3, r3, r2
 802592a:	b29f      	uxth	r7, r3
 802592c:	2f00      	cmp	r7, #0
 802592e:	9b08      	ldr	r3, [sp, #32]
 8025930:	bf18      	it	ne
 8025932:	2300      	movne	r3, #0
 8025934:	3101      	adds	r1, #1
 8025936:	46b4      	mov	ip, r6
 8025938:	46a9      	mov	r9, r5
 802593a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802593c:	fa1f fb83 	uxth.w	fp, r3
 8025940:	e65b      	b.n	80255fa <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0xee>
 8025942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025946:	b289      	uxth	r1, r1
 8025948:	fb93 f3f1 	sdiv	r3, r3, r1
 802594c:	b29a      	uxth	r2, r3
 802594e:	921a      	str	r2, [sp, #104]	@ 0x68
 8025950:	e603      	b.n	802555a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x4e>
 8025952:	4b08      	ldr	r3, [pc, #32]	@ (8025974 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x468>)
 8025954:	4a08      	ldr	r2, [pc, #32]	@ (8025978 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x46c>)
 8025956:	f241 1181 	movw	r1, #4481	@ 0x1181
 802595a:	4808      	ldr	r0, [pc, #32]	@ (802597c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x470>)
 802595c:	f006 f92c 	bl	802bbb8 <__assert_func>
 8025960:	9b03      	ldr	r3, [sp, #12]
 8025962:	429e      	cmp	r6, r3
 8025964:	f4bf af51 	bcs.w	802580a <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x2fe>
 8025968:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 802596c:	e68a      	b.n	8025684 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h+0x178>
 802596e:	bf00      	nop
 8025970:	2015a072 	.word	0x2015a072
 8025974:	0802ec50 	.word	0x0802ec50
 8025978:	08030638 	.word	0x08030638
 802597c:	0802eb5c 	.word	0x0802eb5c

08025980 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8025980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025984:	7814      	ldrb	r4, [r2, #0]
 8025986:	7855      	ldrb	r5, [r2, #1]
 8025988:	2c01      	cmp	r4, #1
 802598a:	9e06      	ldr	r6, [sp, #24]
 802598c:	f89d 701c 	ldrb.w	r7, [sp, #28]
 8025990:	d013      	beq.n	80259ba <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3a>
 8025992:	d304      	bcc.n	802599e <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8025994:	2c02      	cmp	r4, #2
 8025996:	f000 80ca 	beq.w	8025b2e <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1ae>
 802599a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802599e:	7b04      	ldrb	r4, [r0, #12]
 80259a0:	2c01      	cmp	r4, #1
 80259a2:	d02d      	beq.n	8025a00 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x80>
 80259a4:	d317      	bcc.n	80259d6 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 80259a6:	2c02      	cmp	r4, #2
 80259a8:	f040 80cf 	bne.w	8025b4a <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1ca>
 80259ac:	2d03      	cmp	r5, #3
 80259ae:	f200 80da 	bhi.w	8025b66 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e6>
 80259b2:	e8df f005 	tbb	[pc, r5]
 80259b6:	989e      	.short	0x989e
 80259b8:	8c92      	.short	0x8c92
 80259ba:	7b04      	ldrb	r4, [r0, #12]
 80259bc:	2c01      	cmp	r4, #1
 80259be:	d018      	beq.n	80259f2 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x72>
 80259c0:	d310      	bcc.n	80259e4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x64>
 80259c2:	2c02      	cmp	r4, #2
 80259c4:	f040 80ba 	bne.w	8025b3c <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1bc>
 80259c8:	2d03      	cmp	r5, #3
 80259ca:	f200 80c5 	bhi.w	8025b58 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1d8>
 80259ce:	e8df f005 	tbb	[pc, r5]
 80259d2:	a2a8      	.short	0xa2a8
 80259d4:	969c      	.short	0x969c
 80259d6:	2d03      	cmp	r5, #3
 80259d8:	f200 80d3 	bhi.w	8025b82 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x202>
 80259dc:	e8df f005 	tbb	[pc, r5]
 80259e0:	5f656b71 	.word	0x5f656b71
 80259e4:	2d03      	cmp	r5, #3
 80259e6:	f200 80c5 	bhi.w	8025b74 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1f4>
 80259ea:	e8df f005 	tbb	[pc, r5]
 80259ee:	4c52      	.short	0x4c52
 80259f0:	4046      	.short	0x4046
 80259f2:	2d03      	cmp	r5, #3
 80259f4:	f200 80d3 	bhi.w	8025b9e <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x21e>
 80259f8:	e8df f005 	tbb	[pc, r5]
 80259fc:	21272d33 	.word	0x21272d33
 8025a00:	2d03      	cmp	r5, #3
 8025a02:	f200 80c5 	bhi.w	8025b90 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x210>
 8025a06:	e8df f005 	tbb	[pc, r5]
 8025a0a:	0e14      	.short	0x0e14
 8025a0c:	0208      	.short	0x0208
 8025a0e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a16:	f7fd b8e3 	b.w	8022be0 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8025a1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a22:	f7fc bead 	b.w	8022780 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8025a26:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a2e:	f7fc bcad 	b.w	802238c <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8025a32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a3a:	f7fc bb83 	b.w	8022144 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_24BPPEPKhS2_RKNS_4RectES5_h>
 8025a3e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a46:	f7fd bf9d 	b.w	8023984 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8025a4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a52:	f7fd be47 	b.w	80236e4 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8025a56:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a5e:	f7fd bc13 	b.w	8023288 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8025a62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a6a:	f7fd badd 	b.w	8023028 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_24BPPEPKhS2_RKNS_4RectES5_h>
 8025a6e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a76:	f7fc b93f 	b.w	8021cf8 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8025a7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a82:	f7fb bfd7 	b.w	8021a34 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8025a86:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a8e:	f7fb bd63 	b.w	8021558 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8025a92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025a9a:	f7fb bc05 	b.w	80212a8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_16BPPEPKhS2_RKNS_4RectES5_h>
 8025a9e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025aa6:	f7fb b9a7 	b.w	8020df8 <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8025aaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025ab2:	f7fa bfd3 	b.w	8020a5c <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8025ab6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025abe:	f7fa bde7 	b.w	8020690 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8025ac2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025aca:	f7fa bc41 	b.w	8020350 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_16BPPEPKhS2_RKNS_4RectES5_h>
 8025ace:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025ad6:	f7ff bd19 	b.w	802550c <_ZN8touchgfx8LCDGPU2D30blitCopyL8_LZW9_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8025ada:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025ae2:	f7ff bb95 	b.w	8025210 <_ZN8touchgfx8LCDGPU2D29blitCopyL8_RLE_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8025ae6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025aee:	f7ff ba05 	b.w	8024efc <_ZN8touchgfx8LCDGPU2D28blitCopyL8_L4_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8025af2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025afa:	f7ff b871 	b.w	8024be0 <_ZN8touchgfx8LCDGPU2D25blitCopyL8_ARGB8888_32BPPEPKhS2_RKNS_4RectES5_h>
 8025afe:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025b06:	f7fe be1f 	b.w	8024748 <_ZN8touchgfx8LCDGPU2D28blitCopyL8_LZW9_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8025b0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025b12:	f7fe bcaf 	b.w	8024474 <_ZN8touchgfx8LCDGPU2D27blitCopyL8_RLE_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8025b16:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025b1e:	f7fe ba8b 	b.w	8024038 <_ZN8touchgfx8LCDGPU2D26blitCopyL8_L4_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8025b22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025b2a:	f7fe b955 	b.w	8023dd8 <_ZN8touchgfx8LCDGPU2D23blitCopyL8_RGB888_32BPPEPKhS2_RKNS_4RectES5_h>
 8025b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8025bac <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22c>)
 8025b30:	4a1f      	ldr	r2, [pc, #124]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025b32:	f240 31f3 	movw	r1, #1011	@ 0x3f3
 8025b36:	481f      	ldr	r0, [pc, #124]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025b38:	f006 f83e 	bl	802bbb8 <__assert_func>
 8025b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8025bb8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x238>)
 8025b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025b40:	f240 4179 	movw	r1, #1145	@ 0x479
 8025b44:	481b      	ldr	r0, [pc, #108]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025b46:	f006 f837 	bl	802bbb8 <__assert_func>
 8025b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8025bb8 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x238>)
 8025b4c:	4a18      	ldr	r2, [pc, #96]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025b4e:	f240 4135 	movw	r1, #1077	@ 0x435
 8025b52:	4818      	ldr	r0, [pc, #96]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025b54:	f006 f830 	bl	802bbb8 <__assert_func>
 8025b58:	4b18      	ldr	r3, [pc, #96]	@ (8025bbc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x23c>)
 8025b5a:	4a15      	ldr	r2, [pc, #84]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025b5c:	f240 4174 	movw	r1, #1140	@ 0x474
 8025b60:	4814      	ldr	r0, [pc, #80]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025b62:	f006 f829 	bl	802bbb8 <__assert_func>
 8025b66:	4b15      	ldr	r3, [pc, #84]	@ (8025bbc <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x23c>)
 8025b68:	4a11      	ldr	r2, [pc, #68]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025b6a:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8025b6e:	4811      	ldr	r0, [pc, #68]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025b70:	f006 f822 	bl	802bbb8 <__assert_func>
 8025b74:	4b12      	ldr	r3, [pc, #72]	@ (8025bc0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x240>)
 8025b76:	4a0e      	ldr	r2, [pc, #56]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025b78:	f240 414c 	movw	r1, #1100	@ 0x44c
 8025b7c:	480d      	ldr	r0, [pc, #52]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025b7e:	f006 f81b 	bl	802bbb8 <__assert_func>
 8025b82:	4b0f      	ldr	r3, [pc, #60]	@ (8025bc0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x240>)
 8025b84:	4a0a      	ldr	r2, [pc, #40]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025b86:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8025b8a:	480a      	ldr	r0, [pc, #40]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025b8c:	f006 f814 	bl	802bbb8 <__assert_func>
 8025b90:	4b0c      	ldr	r3, [pc, #48]	@ (8025bc4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x244>)
 8025b92:	4a07      	ldr	r2, [pc, #28]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025b94:	f240 411c 	movw	r1, #1052	@ 0x41c
 8025b98:	4806      	ldr	r0, [pc, #24]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025b9a:	f006 f80d 	bl	802bbb8 <__assert_func>
 8025b9e:	4b09      	ldr	r3, [pc, #36]	@ (8025bc4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x244>)
 8025ba0:	4a03      	ldr	r2, [pc, #12]	@ (8025bb0 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x230>)
 8025ba2:	f44f 618c 	mov.w	r1, #1120	@ 0x460
 8025ba6:	4803      	ldr	r0, [pc, #12]	@ (8025bb4 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x234>)
 8025ba8:	f006 f806 	bl	802bbb8 <__assert_func>
 8025bac:	0802e814 	.word	0x0802e814
 8025bb0:	0802f364 	.word	0x0802f364
 8025bb4:	0802eb5c 	.word	0x0802eb5c
 8025bb8:	0802e974 	.word	0x0802e974
 8025bbc:	0802e910 	.word	0x0802e910
 8025bc0:	0802e850 	.word	0x0802e850
 8025bc4:	0802e8b0 	.word	0x0802e8b0

08025bc8 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8025bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025bcc:	b089      	sub	sp, #36	@ 0x24
 8025bce:	f89d 4044 	ldrb.w	r4, [sp, #68]	@ 0x44
 8025bd2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8025bd4:	b13c      	cbz	r4, 8025be6 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8025bd6:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8025bda:	2e00      	cmp	r6, #0
 8025bdc:	dd03      	ble.n	8025be6 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8025bde:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 8025be2:	2e00      	cmp	r6, #0
 8025be4:	dc02      	bgt.n	8025bec <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x24>
 8025be6:	b009      	add	sp, #36	@ 0x24
 8025be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025bec:	f04f 0800 	mov.w	r8, #0
 8025bf0:	4606      	mov	r6, r0
 8025bf2:	f362 080f 	bfi	r8, r2, #0, #16
 8025bf6:	4608      	mov	r0, r1
 8025bf8:	460f      	mov	r7, r1
 8025bfa:	f363 481f 	bfi	r8, r3, #16, #16
 8025bfe:	f7f3 fab3 	bl	8019168 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8025c02:	4681      	mov	r9, r0
 8025c04:	4638      	mov	r0, r7
 8025c06:	f7f3 fae3 	bl	80191d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8025c0a:	2300      	movs	r3, #0
 8025c0c:	f369 030f 	bfi	r3, r9, #0, #16
 8025c10:	f360 431f 	bfi	r3, r0, #16, #16
 8025c14:	4638      	mov	r0, r7
 8025c16:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8025c1a:	f7f3 fb91 	bl	8019340 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025c1e:	280b      	cmp	r0, #11
 8025c20:	d024      	beq.n	8025c6c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa4>
 8025c22:	aa04      	add	r2, sp, #16
 8025c24:	f10d 0808 	add.w	r8, sp, #8
 8025c28:	e898 0003 	ldmia.w	r8, {r0, r1}
 8025c2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8025c30:	6828      	ldr	r0, [r5, #0]
 8025c32:	6869      	ldr	r1, [r5, #4]
 8025c34:	ab06      	add	r3, sp, #24
 8025c36:	c303      	stmia	r3!, {r0, r1}
 8025c38:	4610      	mov	r0, r2
 8025c3a:	f7f0 fc95 	bl	8016568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025c3e:	4641      	mov	r1, r8
 8025c40:	a806      	add	r0, sp, #24
 8025c42:	f7f0 fcb9 	bl	80165b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8025c46:	4638      	mov	r0, r7
 8025c48:	f7f3 faf6 	bl	8019238 <_ZNK8touchgfx6Bitmap7getDataEv>
 8025c4c:	4680      	mov	r8, r0
 8025c4e:	4638      	mov	r0, r7
 8025c50:	f7f3 fb76 	bl	8019340 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025c54:	280d      	cmp	r0, #13
 8025c56:	f200 8083 	bhi.w	8025d60 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x198>
 8025c5a:	e8df f000 	tbb	[pc, r0]
 8025c5e:	6467      	.short	0x6467
 8025c60:	81818117 	.word	0x81818117
 8025c64:	81818181 	.word	0x81818181
 8025c68:	6a818181 	.word	0x6a818181
 8025c6c:	4638      	mov	r0, r7
 8025c6e:	f7f3 fae3 	bl	8019238 <_ZNK8touchgfx6Bitmap7getDataEv>
 8025c72:	4680      	mov	r8, r0
 8025c74:	4638      	mov	r0, r7
 8025c76:	f7f3 fb0f 	bl	8019298 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8025c7a:	4641      	mov	r1, r8
 8025c7c:	4602      	mov	r2, r0
 8025c7e:	e9cd 5400 	strd	r5, r4, [sp]
 8025c82:	4630      	mov	r0, r6
 8025c84:	ab02      	add	r3, sp, #8
 8025c86:	f7ff fe7b 	bl	8025980 <_ZN8touchgfx8LCDGPU2D10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8025c8a:	e7ac      	b.n	8025be6 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8025c8c:	f04f 0910 	mov.w	r9, #16
 8025c90:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8025c94:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8025c98:	4d37      	ldr	r5, [pc, #220]	@ (8025d78 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b0>)
 8025c9a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8025c9e:	440a      	add	r2, r1
 8025ca0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8025ca4:	6828      	ldr	r0, [r5, #0]
 8025ca6:	440b      	add	r3, r1
 8025ca8:	f8ad 2018 	strh.w	r2, [sp, #24]
 8025cac:	f8ad 301a 	strh.w	r3, [sp, #26]
 8025cb0:	2800      	cmp	r0, #0
 8025cb2:	d05b      	beq.n	8025d6c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1a4>
 8025cb4:	f7f6 f9cc 	bl	801c050 <_ZN8touchgfx8HALGPU2D14bindExecBufferEv>
 8025cb8:	6833      	ldr	r3, [r6, #0]
 8025cba:	4630      	mov	r0, r6
 8025cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8025cbe:	4798      	blx	r3
 8025cc0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8025cc4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8025cc8:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8025ccc:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8025cd0:	f7f3 ff12 	bl	8019af8 <nema_set_clip>
 8025cd4:	2200      	movs	r2, #0
 8025cd6:	4623      	mov	r3, r4
 8025cd8:	4611      	mov	r1, r2
 8025cda:	4610      	mov	r0, r2
 8025cdc:	f7f3 ff40 	bl	8019b60 <nema_rgba>
 8025ce0:	f7f6 f8b0 	bl	801be44 <nema_set_const_color>
 8025ce4:	2cff      	cmp	r4, #255	@ 0xff
 8025ce6:	d02a      	beq.n	8025d3e <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x176>
 8025ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8025cec:	2201      	movs	r2, #1
 8025cee:	2100      	movs	r1, #0
 8025cf0:	4822      	ldr	r0, [pc, #136]	@ (8025d7c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b4>)
 8025cf2:	f7f5 fce1 	bl	801b6b8 <nema_set_blend>
 8025cf6:	2100      	movs	r1, #0
 8025cf8:	f04f 34ff 	mov.w	r4, #4294967295
 8025cfc:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8025d00:	464b      	mov	r3, r9
 8025d02:	4640      	mov	r0, r8
 8025d04:	9101      	str	r1, [sp, #4]
 8025d06:	9400      	str	r4, [sp, #0]
 8025d08:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8025d0c:	f7f3 ff30 	bl	8019b70 <nema_bind_src_tex>
 8025d10:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8025d14:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8025d18:	f7f4 f8b6 	bl	8019e88 <nema_blit>
 8025d1c:	6828      	ldr	r0, [r5, #0]
 8025d1e:	b328      	cbz	r0, 8025d6c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1a4>
 8025d20:	f7f6 f9b6 	bl	801c090 <_ZN8touchgfx8HALGPU2D16submitExecBufferEv>
 8025d24:	e75f      	b.n	8025be6 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1e>
 8025d26:	f04f 0939 	mov.w	r9, #57	@ 0x39
 8025d2a:	e7b1      	b.n	8025c90 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>
 8025d2c:	f04f 0904 	mov.w	r9, #4
 8025d30:	e7ae      	b.n	8025c90 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>
 8025d32:	4638      	mov	r0, r7
 8025d34:	f7f3 fab0 	bl	8019298 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8025d38:	f890 9000 	ldrb.w	r9, [r0]
 8025d3c:	e7a8      	b.n	8025c90 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>
 8025d3e:	4638      	mov	r0, r7
 8025d40:	f7f3 fafe 	bl	8019340 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025d44:	b120      	cbz	r0, 8025d50 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 8025d46:	4638      	mov	r0, r7
 8025d48:	f7f3 fafa 	bl	8019340 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025d4c:	2801      	cmp	r0, #1
 8025d4e:	d1cb      	bne.n	8025ce8 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x120>
 8025d50:	2201      	movs	r2, #1
 8025d52:	f04f 33ff 	mov.w	r3, #4294967295
 8025d56:	4610      	mov	r0, r2
 8025d58:	2100      	movs	r1, #0
 8025d5a:	f7f5 fcad 	bl	801b6b8 <nema_set_blend>
 8025d5e:	e7ca      	b.n	8025cf6 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x12e>
 8025d60:	4b07      	ldr	r3, [pc, #28]	@ (8025d80 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>)
 8025d62:	4a08      	ldr	r2, [pc, #32]	@ (8025d84 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1bc>)
 8025d64:	2175      	movs	r1, #117	@ 0x75
 8025d66:	4808      	ldr	r0, [pc, #32]	@ (8025d88 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c0>)
 8025d68:	f005 ff26 	bl	802bbb8 <__assert_func>
 8025d6c:	4b07      	ldr	r3, [pc, #28]	@ (8025d8c <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>)
 8025d6e:	4a08      	ldr	r2, [pc, #32]	@ (8025d90 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c8>)
 8025d70:	217c      	movs	r1, #124	@ 0x7c
 8025d72:	4808      	ldr	r0, [pc, #32]	@ (8025d94 <_ZN8touchgfx8LCDGPU2D17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1cc>)
 8025d74:	f005 ff20 	bl	802bbb8 <__assert_func>
 8025d78:	2015a1e4 	.word	0x2015a1e4
 8025d7c:	08000504 	.word	0x08000504
 8025d80:	0802e9b0 	.word	0x0802e9b0
 8025d84:	0802f458 	.word	0x0802f458
 8025d88:	0802eb5c 	.word	0x0802eb5c
 8025d8c:	0802eab8 	.word	0x0802eab8
 8025d90:	0802f324 	.word	0x0802f324
 8025d94:	0802eae0 	.word	0x0802eae0

08025d98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8025d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d9c:	b089      	sub	sp, #36	@ 0x24
 8025d9e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8025da0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025da2:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	@ 0x48
 8025da6:	9104      	str	r1, [sp, #16]
 8025da8:	8809      	ldrh	r1, [r1, #0]
 8025daa:	fb07 6c04 	mla	ip, r7, r4, r6
 8025dae:	10c8      	asrs	r0, r1, #3
 8025db0:	120d      	asrs	r5, r1, #8
 8025db2:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8025db6:	f005 0af8 	and.w	sl, r5, #248	@ 0xf8
 8025dba:	9002      	str	r0, [sp, #8]
 8025dbc:	00c9      	lsls	r1, r1, #3
 8025dbe:	0200      	lsls	r0, r0, #8
 8025dc0:	b2c9      	uxtb	r1, r1
 8025dc2:	4690      	mov	r8, r2
 8025dc4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8025dc8:	469e      	mov	lr, r3
 8025dca:	eb02 030c 	add.w	r3, r2, ip
 8025dce:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8025dd2:	4308      	orrs	r0, r1
 8025dd4:	2f00      	cmp	r7, #0
 8025dd6:	9103      	str	r1, [sp, #12]
 8025dd8:	9305      	str	r3, [sp, #20]
 8025dda:	9007      	str	r0, [sp, #28]
 8025ddc:	f107 0501 	add.w	r5, r7, #1
 8025de0:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	@ 0x4c
 8025de4:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8025de8:	f89d 105c 	ldrb.w	r1, [sp, #92]	@ 0x5c
 8025dec:	9200      	str	r2, [sp, #0]
 8025dee:	db02      	blt.n	8025df6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x5e>
 8025df0:	42be      	cmp	r6, r7
 8025df2:	f300 80a3 	bgt.w	8025f3c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1a4>
 8025df6:	fa5f fb80 	uxtb.w	fp, r0
 8025dfa:	af07      	add	r7, sp, #28
 8025dfc:	465a      	mov	r2, fp
 8025dfe:	46b8      	mov	r8, r7
 8025e00:	2d00      	cmp	r5, #0
 8025e02:	db01      	blt.n	8025e08 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x70>
 8025e04:	42ae      	cmp	r6, r5
 8025e06:	dc79      	bgt.n	8025efc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x164>
 8025e08:	f10d 0e1c 	add.w	lr, sp, #28
 8025e0c:	46f1      	mov	r9, lr
 8025e0e:	b2c0      	uxtb	r0, r0
 8025e10:	9001      	str	r0, [sp, #4]
 8025e12:	2b0f      	cmp	r3, #15
 8025e14:	f200 80ce 	bhi.w	8025fb4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8025e18:	290f      	cmp	r1, #15
 8025e1a:	f200 80cb 	bhi.w	8025fb4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8025e1e:	9c00      	ldr	r4, [sp, #0]
 8025e20:	b29b      	uxth	r3, r3
 8025e22:	43e4      	mvns	r4, r4
 8025e24:	b289      	uxth	r1, r1
 8025e26:	fb03 f501 	mul.w	r5, r3, r1
 8025e2a:	011b      	lsls	r3, r3, #4
 8025e2c:	1b5e      	subs	r6, r3, r5
 8025e2e:	b2b6      	uxth	r6, r6
 8025e30:	f897 c002 	ldrb.w	ip, [r7, #2]
 8025e34:	ebc5 1101 	rsb	r1, r5, r1, lsl #4
 8025e38:	787f      	ldrb	r7, [r7, #1]
 8025e3a:	fb06 f202 	mul.w	r2, r6, r2
 8025e3e:	b289      	uxth	r1, r1
 8025e40:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8025e44:	fb06 fc0c 	mul.w	ip, r6, ip
 8025e48:	1a5b      	subs	r3, r3, r1
 8025e4a:	fb06 f607 	mul.w	r6, r6, r7
 8025e4e:	b29b      	uxth	r3, r3
 8025e50:	f898 7001 	ldrb.w	r7, [r8, #1]
 8025e54:	fb03 220b 	mla	r2, r3, fp, r2
 8025e58:	f898 b002 	ldrb.w	fp, [r8, #2]
 8025e5c:	fb03 6607 	mla	r6, r3, r7, r6
 8025e60:	fb03 cc0b 	mla	ip, r3, fp, ip
 8025e64:	f899 8002 	ldrb.w	r8, [r9, #2]
 8025e68:	f899 7001 	ldrb.w	r7, [r9, #1]
 8025e6c:	9b01      	ldr	r3, [sp, #4]
 8025e6e:	fb01 cc08 	mla	ip, r1, r8, ip
 8025e72:	fb01 2203 	mla	r2, r1, r3, r2
 8025e76:	fb01 6607 	mla	r6, r1, r7, r6
 8025e7a:	f89e 8002 	ldrb.w	r8, [lr, #2]
 8025e7e:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8025e82:	9b03      	ldr	r3, [sp, #12]
 8025e84:	9902      	ldr	r1, [sp, #8]
 8025e86:	fb05 2200 	mla	r2, r5, r0, r2
 8025e8a:	b2e4      	uxtb	r4, r4
 8025e8c:	fb05 cc08 	mla	ip, r5, r8, ip
 8025e90:	fb05 6607 	mla	r6, r5, r7, r6
 8025e94:	fb13 f004 	smulbb	r0, r3, r4
 8025e98:	fb1a f304 	smulbb	r3, sl, r4
 8025e9c:	fb11 f404 	smulbb	r4, r1, r4
 8025ea0:	f8bd e000 	ldrh.w	lr, [sp]
 8025ea4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025ea8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025eac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025eb0:	fb02 020e 	mla	r2, r2, lr, r0
 8025eb4:	fb0c 330e 	mla	r3, ip, lr, r3
 8025eb8:	fb06 4e0e 	mla	lr, r6, lr, r4
 8025ebc:	fa1f fc83 	uxth.w	ip, r3
 8025ec0:	b292      	uxth	r2, r2
 8025ec2:	fa1f fe8e 	uxth.w	lr, lr
 8025ec6:	f10c 0301 	add.w	r3, ip, #1
 8025eca:	1c50      	adds	r0, r2, #1
 8025ecc:	f10e 0101 	add.w	r1, lr, #1
 8025ed0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025ed4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025ed8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8025edc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025ee0:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8025ee4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025ee8:	4313      	orrs	r3, r2
 8025eea:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8025eee:	9a04      	ldr	r2, [sp, #16]
 8025ef0:	ea43 030e 	orr.w	r3, r3, lr
 8025ef4:	8013      	strh	r3, [r2, #0]
 8025ef6:	b009      	add	sp, #36	@ 0x24
 8025ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025efc:	2900      	cmp	r1, #0
 8025efe:	d036      	beq.n	8025f6e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d6>
 8025f00:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025f02:	2d00      	cmp	r5, #0
 8025f04:	db45      	blt.n	8025f92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 8025f06:	42ac      	cmp	r4, r5
 8025f08:	dd43      	ble.n	8025f92 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1fa>
 8025f0a:	9d05      	ldr	r5, [sp, #20]
 8025f0c:	f815 9004 	ldrb.w	r9, [r5, r4]
 8025f10:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025f14:	44f1      	add	r9, lr
 8025f16:	f899 5000 	ldrb.w	r5, [r9]
 8025f1a:	9501      	str	r5, [sp, #4]
 8025f1c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025f1e:	3501      	adds	r5, #1
 8025f20:	d433      	bmi.n	8025f8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 8025f22:	42ac      	cmp	r4, r5
 8025f24:	dd31      	ble.n	8025f8a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1f2>
 8025f26:	2b00      	cmp	r3, #0
 8025f28:	d040      	beq.n	8025fac <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x214>
 8025f2a:	9805      	ldr	r0, [sp, #20]
 8025f2c:	4420      	add	r0, r4
 8025f2e:	7840      	ldrb	r0, [r0, #1]
 8025f30:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8025f34:	f81e 0004 	ldrb.w	r0, [lr, r4]
 8025f38:	44a6      	add	lr, r4
 8025f3a:	e76a      	b.n	8025e12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 8025f3c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025f3e:	2a00      	cmp	r2, #0
 8025f40:	db01      	blt.n	8025f46 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ae>
 8025f42:	4294      	cmp	r4, r2
 8025f44:	dc1b      	bgt.n	8025f7e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1e6>
 8025f46:	f10d 081c 	add.w	r8, sp, #28
 8025f4a:	3201      	adds	r2, #1
 8025f4c:	f898 b000 	ldrb.w	fp, [r8]
 8025f50:	d40a      	bmi.n	8025f68 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 8025f52:	4294      	cmp	r4, r2
 8025f54:	dd08      	ble.n	8025f68 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>
 8025f56:	b1fb      	cbz	r3, 8025f98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x200>
 8025f58:	9a05      	ldr	r2, [sp, #20]
 8025f5a:	7857      	ldrb	r7, [r2, #1]
 8025f5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025f60:	f81e 2007 	ldrb.w	r2, [lr, r7]
 8025f64:	4477      	add	r7, lr
 8025f66:	e74b      	b.n	8025e00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 8025f68:	b2c2      	uxtb	r2, r0
 8025f6a:	af07      	add	r7, sp, #28
 8025f6c:	e748      	b.n	8025e00 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x68>
 8025f6e:	b2c0      	uxtb	r0, r0
 8025f70:	2b0f      	cmp	r3, #15
 8025f72:	9001      	str	r0, [sp, #4]
 8025f74:	d81e      	bhi.n	8025fb4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x21c>
 8025f76:	f10d 0e1c 	add.w	lr, sp, #28
 8025f7a:	46f1      	mov	r9, lr
 8025f7c:	e74f      	b.n	8025e1e <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x86>
 8025f7e:	f818 800c 	ldrb.w	r8, [r8, ip]
 8025f82:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025f86:	44f0      	add	r8, lr
 8025f88:	e7df      	b.n	8025f4a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1b2>
 8025f8a:	b2c0      	uxtb	r0, r0
 8025f8c:	f10d 0e1c 	add.w	lr, sp, #28
 8025f90:	e73f      	b.n	8025e12 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x7a>
 8025f92:	f10d 091c 	add.w	r9, sp, #28
 8025f96:	e7be      	b.n	8025f16 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x17e>
 8025f98:	2d00      	cmp	r5, #0
 8025f9a:	b2c2      	uxtb	r2, r0
 8025f9c:	af07      	add	r7, sp, #28
 8025f9e:	f6bf af31 	bge.w	8025e04 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8025fa2:	46be      	mov	lr, r7
 8025fa4:	46b9      	mov	r9, r7
 8025fa6:	4610      	mov	r0, r2
 8025fa8:	9201      	str	r2, [sp, #4]
 8025faa:	e735      	b.n	8025e18 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8025fac:	b2c0      	uxtb	r0, r0
 8025fae:	f10d 0e1c 	add.w	lr, sp, #28
 8025fb2:	e731      	b.n	8025e18 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8025fb4:	4b03      	ldr	r3, [pc, #12]	@ (8025fc4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x22c>)
 8025fb6:	4a04      	ldr	r2, [pc, #16]	@ (8025fc8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x230>)
 8025fb8:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8025fbc:	4803      	ldr	r0, [pc, #12]	@ (8025fcc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x234>)
 8025fbe:	f005 fdfb 	bl	802bbb8 <__assert_func>
 8025fc2:	bf00      	nop
 8025fc4:	0802ef50 	.word	0x0802ef50
 8025fc8:	0802f5cc 	.word	0x0802f5cc
 8025fcc:	0802f0d8 	.word	0x0802f0d8

08025fd0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fd4:	ed2d 8b08 	vpush	{d8-d11}
 8025fd8:	b095      	sub	sp, #84	@ 0x54
 8025fda:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 8025fde:	e9dd 512b 	ldrd	r5, r1, [sp, #172]	@ 0xac
 8025fe2:	e9dd b827 	ldrd	fp, r8, [sp, #156]	@ 0x9c
 8025fe6:	686c      	ldr	r4, [r5, #4]
 8025fe8:	461a      	mov	r2, r3
 8025fea:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8025fec:	f89d 60bc 	ldrb.w	r6, [sp, #188]	@ 0xbc
 8025ff0:	fb04 1303 	mla	r3, r4, r3, r1
 8025ff4:	682c      	ldr	r4, [r5, #0]
 8025ff6:	e9cd 0612 	strd	r0, r6, [sp, #72]	@ 0x48
 8025ffa:	43f0      	mvns	r0, r6
 8025ffc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026000:	eeb0 aa40 	vmov.f32	s20, s0
 8026004:	eef0 9a60 	vmov.f32	s19, s1
 8026008:	eeb0 9a41 	vmov.f32	s18, s2
 802600c:	eef0 8a62 	vmov.f32	s17, s5
 8026010:	eeb0 8a43 	vmov.f32	s16, s6
 8026014:	eef0 ba44 	vmov.f32	s23, s8
 8026018:	eeb0 ba64 	vmov.f32	s22, s9
 802601c:	eef0 aa45 	vmov.f32	s21, s10
 8026020:	469a      	mov	sl, r3
 8026022:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8026024:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 8026026:	6849      	ldr	r1, [r1, #4]
 8026028:	682d      	ldr	r5, [r5, #0]
 802602a:	3104      	adds	r1, #4
 802602c:	b2c0      	uxtb	r0, r0
 802602e:	9108      	str	r1, [sp, #32]
 8026030:	b2b1      	uxth	r1, r6
 8026032:	950b      	str	r5, [sp, #44]	@ 0x2c
 8026034:	900c      	str	r0, [sp, #48]	@ 0x30
 8026036:	910d      	str	r1, [sp, #52]	@ 0x34
 8026038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802603a:	2b00      	cmp	r3, #0
 802603c:	dc02      	bgt.n	8026044 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802603e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026040:	2b00      	cmp	r3, #0
 8026042:	dd65      	ble.n	8026110 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8026044:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026046:	2a00      	cmp	r2, #0
 8026048:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 802604c:	b225      	sxth	r5, r4
 802604e:	fa0f f78e 	sxth.w	r7, lr
 8026052:	f340 8233 	ble.w	80264bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8026056:	1e6e      	subs	r6, r5, #1
 8026058:	f107 3cff 	add.w	ip, r7, #4294967295
 802605c:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8026060:	e9dd e929 	ldrd	lr, r9, [sp, #164]	@ 0xa4
 8026064:	ea5f 432b 	movs.w	r3, fp, asr #16
 8026068:	ea4f 4128 	mov.w	r1, r8, asr #16
 802606c:	d405      	bmi.n	802607a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802606e:	42b3      	cmp	r3, r6
 8026070:	da03      	bge.n	802607a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026072:	2900      	cmp	r1, #0
 8026074:	db01      	blt.n	802607a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026076:	4561      	cmp	r1, ip
 8026078:	db4f      	blt.n	802611a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802607a:	1c58      	adds	r0, r3, #1
 802607c:	d406      	bmi.n	802608c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 802607e:	42a8      	cmp	r0, r5
 8026080:	dc04      	bgt.n	802608c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8026082:	1c48      	adds	r0, r1, #1
 8026084:	d402      	bmi.n	802608c <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8026086:	42b8      	cmp	r0, r7
 8026088:	f340 817e 	ble.w	8026388 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 802608c:	3a01      	subs	r2, #1
 802608e:	44f3      	add	fp, lr
 8026090:	44c8      	add	r8, r9
 8026092:	f10a 0a02 	add.w	sl, sl, #2
 8026096:	d1e5      	bne.n	8026064 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802609a:	2b00      	cmp	r3, #0
 802609c:	dd38      	ble.n	8026110 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802609e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80260a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80260a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80260aa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80260ae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80260b2:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80260b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80260ba:	ee76 6a68 	vsub.f32	s13, s12, s17
 80260be:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80260c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80260c6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80260ca:	ee16 2a90 	vmov	r2, s13
 80260ce:	3b01      	subs	r3, #1
 80260d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80260d2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80260d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80260d8:	ee17 2a10 	vmov	r2, s14
 80260dc:	eeb0 7a48 	vmov.f32	s14, s16
 80260e0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80260e4:	ee17 8a10 	vmov	r8, s14
 80260e8:	eeb0 7a68 	vmov.f32	s14, s17
 80260ec:	9329      	str	r3, [sp, #164]	@ 0xa4
 80260ee:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80260f0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80260f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80260f8:	932a      	str	r3, [sp, #168]	@ 0xa8
 80260fa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80260fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80260fe:	ee17 ba10 	vmov	fp, s14
 8026102:	eeb0 8a67 	vmov.f32	s16, s15
 8026106:	eef0 8a46 	vmov.f32	s17, s12
 802610a:	bf18      	it	ne
 802610c:	461a      	movne	r2, r3
 802610e:	e793      	b.n	8026038 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026110:	b015      	add	sp, #84	@ 0x54
 8026112:	ecbd 8b08 	vpop	{d8-d11}
 8026116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802611a:	46d4      	mov	ip, sl
 802611c:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8026120:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8026122:	1e51      	subs	r1, r2, #1
 8026124:	fb00 b301 	mla	r3, r0, r1, fp
 8026128:	141b      	asrs	r3, r3, #16
 802612a:	910a      	str	r1, [sp, #40]	@ 0x28
 802612c:	f100 80cc 	bmi.w	80262c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8026130:	42b3      	cmp	r3, r6
 8026132:	f280 80c9 	bge.w	80262c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8026136:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026138:	fb03 8301 	mla	r3, r3, r1, r8
 802613c:	141b      	asrs	r3, r3, #16
 802613e:	f100 80c3 	bmi.w	80262c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8026142:	3f01      	subs	r7, #1
 8026144:	42bb      	cmp	r3, r7
 8026146:	f280 80bf 	bge.w	80262c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802614a:	2a00      	cmp	r2, #0
 802614c:	dda4      	ble.n	8026098 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802614e:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
 8026152:	e9cd ca09 	strd	ip, sl, [sp, #36]	@ 0x24
 8026156:	e08e      	b.n	8026276 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8026158:	f891 c001 	ldrb.w	ip, [r1, #1]
 802615c:	194c      	adds	r4, r1, r5
 802615e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026162:	44bc      	add	ip, r7
 8026164:	2a00      	cmp	r2, #0
 8026166:	f000 80a6 	beq.w	80262b6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802616a:	5d48      	ldrb	r0, [r1, r5]
 802616c:	7865      	ldrb	r5, [r4, #1]
 802616e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026176:	4438      	add	r0, r7
 8026178:	443d      	add	r5, r7
 802617a:	b29b      	uxth	r3, r3
 802617c:	b292      	uxth	r2, r2
 802617e:	fb03 f402 	mul.w	r4, r3, r2
 8026182:	011b      	lsls	r3, r3, #4
 8026184:	1b19      	subs	r1, r3, r4
 8026186:	f89c 9000 	ldrb.w	r9, [ip]
 802618a:	f89c e002 	ldrb.w	lr, [ip, #2]
 802618e:	b289      	uxth	r1, r1
 8026190:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026194:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026198:	fb01 f909 	mul.w	r9, r1, r9
 802619c:	b292      	uxth	r2, r2
 802619e:	fb01 fe0e 	mul.w	lr, r1, lr
 80261a2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80261a6:	fb01 f10c 	mul.w	r1, r1, ip
 80261aa:	f817 a00a 	ldrb.w	sl, [r7, sl]
 80261ae:	1a9b      	subs	r3, r3, r2
 80261b0:	f896 c002 	ldrb.w	ip, [r6, #2]
 80261b4:	b29b      	uxth	r3, r3
 80261b6:	7876      	ldrb	r6, [r6, #1]
 80261b8:	fb03 990a 	mla	r9, r3, sl, r9
 80261bc:	fb03 ec0c 	mla	ip, r3, ip, lr
 80261c0:	fb03 1306 	mla	r3, r3, r6, r1
 80261c4:	7801      	ldrb	r1, [r0, #0]
 80261c6:	f890 e002 	ldrb.w	lr, [r0, #2]
 80261ca:	fb02 9901 	mla	r9, r2, r1, r9
 80261ce:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80261d0:	fb02 ce0e 	mla	lr, r2, lr, ip
 80261d4:	7829      	ldrb	r1, [r5, #0]
 80261d6:	f8b7 c000 	ldrh.w	ip, [r7]
 80261da:	7840      	ldrb	r0, [r0, #1]
 80261dc:	78ae      	ldrb	r6, [r5, #2]
 80261de:	fb02 3200 	mla	r2, r2, r0, r3
 80261e2:	fb04 9901 	mla	r9, r4, r1, r9
 80261e6:	7868      	ldrb	r0, [r5, #1]
 80261e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80261ea:	ea4f 252c 	mov.w	r5, ip, asr #8
 80261ee:	fb04 ee06 	mla	lr, r4, r6, lr
 80261f2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80261f6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80261fa:	fb15 f501 	smulbb	r5, r5, r1
 80261fe:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026202:	b2db      	uxtb	r3, r3
 8026204:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8026208:	fb13 f301 	smulbb	r3, r3, r1
 802620c:	fb1c fc01 	smulbb	ip, ip, r1
 8026210:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026212:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8026216:	fb04 2200 	mla	r2, r4, r0, r2
 802621a:	fb0e 5501 	mla	r5, lr, r1, r5
 802621e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026222:	b2ad      	uxth	r5, r5
 8026224:	fb02 cc01 	mla	ip, r2, r1, ip
 8026228:	1c6a      	adds	r2, r5, #1
 802622a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 802622e:	463a      	mov	r2, r7
 8026230:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8026234:	fb09 3301 	mla	r3, r9, r1, r3
 8026238:	fa1f f18c 	uxth.w	r1, ip
 802623c:	b29b      	uxth	r3, r3
 802623e:	1c5c      	adds	r4, r3, #1
 8026240:	1c48      	adds	r0, r1, #1
 8026242:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8026246:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802624a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802624e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026252:	0949      	lsrs	r1, r1, #5
 8026254:	432b      	orrs	r3, r5
 8026256:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802625a:	430b      	orrs	r3, r1
 802625c:	f822 3b02 	strh.w	r3, [r2], #2
 8026260:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026262:	9209      	str	r2, [sp, #36]	@ 0x24
 8026264:	449b      	add	fp, r3
 8026266:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026268:	4498      	add	r8, r3
 802626a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802626c:	429a      	cmp	r2, r3
 802626e:	d029      	beq.n	80262c4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026270:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8026272:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8026276:	ea4f 432b 	mov.w	r3, fp, asr #16
 802627a:	ea4f 4128 	mov.w	r1, r8, asr #16
 802627e:	fb05 3101 	mla	r1, r5, r1, r3
 8026282:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026284:	9f08      	ldr	r7, [sp, #32]
 8026286:	f812 a001 	ldrb.w	sl, [r2, r1]
 802628a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802628e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8026292:	4411      	add	r1, r2
 8026294:	eb07 060a 	add.w	r6, r7, sl
 8026298:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802629c:	2b00      	cmp	r3, #0
 802629e:	f47f af5b 	bne.w	8026158 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80262a2:	b15a      	cbz	r2, 80262bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>
 80262a4:	5d48      	ldrb	r0, [r1, r5]
 80262a6:	9908      	ldr	r1, [sp, #32]
 80262a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80262ac:	4635      	mov	r5, r6
 80262ae:	4408      	add	r0, r1
 80262b0:	46b4      	mov	ip, r6
 80262b2:	460f      	mov	r7, r1
 80262b4:	e761      	b.n	802617a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80262b6:	4635      	mov	r5, r6
 80262b8:	4630      	mov	r0, r6
 80262ba:	e75e      	b.n	802617a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80262bc:	4635      	mov	r5, r6
 80262be:	4630      	mov	r0, r6
 80262c0:	46b4      	mov	ip, r6
 80262c2:	e75a      	b.n	802617a <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80262c4:	469a      	mov	sl, r3
 80262c6:	e6e7      	b.n	8026098 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80262c8:	2a00      	cmp	r2, #0
 80262ca:	f77f aee5 	ble.w	8026098 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80262ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80262d0:	ea4f 432b 	mov.w	r3, fp, asr #16
 80262d4:	ea4f 4128 	mov.w	r1, r8, asr #16
 80262d8:	4675      	mov	r5, lr
 80262da:	46d1      	mov	r9, sl
 80262dc:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80262e0:	f8dd a0b8 	ldr.w	sl, [sp, #184]	@ 0xb8
 80262e4:	9609      	str	r6, [sp, #36]	@ 0x24
 80262e6:	2b00      	cmp	r3, #0
 80262e8:	f3cb 3703 	ubfx	r7, fp, #12, #4
 80262ec:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80262f0:	db27      	blt.n	8026342 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80262f2:	1e60      	subs	r0, r4, #1
 80262f4:	4283      	cmp	r3, r0
 80262f6:	da24      	bge.n	8026342 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80262f8:	2900      	cmp	r1, #0
 80262fa:	db22      	blt.n	8026342 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80262fc:	1e68      	subs	r0, r5, #1
 80262fe:	4281      	cmp	r1, r0
 8026300:	da1f      	bge.n	8026342 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026302:	b220      	sxth	r0, r4
 8026304:	fb01 3300 	mla	r3, r1, r0, r3
 8026308:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802630a:	5ccd      	ldrb	r5, [r1, r3]
 802630c:	440b      	add	r3, r1
 802630e:	9908      	ldr	r1, [sp, #32]
 8026310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026314:	460e      	mov	r6, r1
 8026316:	eb01 0c05 	add.w	ip, r1, r5
 802631a:	2f00      	cmp	r7, #0
 802631c:	d04b      	beq.n	80263b6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802631e:	785c      	ldrb	r4, [r3, #1]
 8026320:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026324:	440c      	add	r4, r1
 8026326:	2a00      	cmp	r2, #0
 8026328:	f000 80c4 	beq.w	80264b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802632c:	1819      	adds	r1, r3, r0
 802632e:	7849      	ldrb	r1, [r1, #1]
 8026330:	5c18      	ldrb	r0, [r3, r0]
 8026332:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026336:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802633a:	1873      	adds	r3, r6, r1
 802633c:	9311      	str	r3, [sp, #68]	@ 0x44
 802633e:	4430      	add	r0, r6
 8026340:	e03f      	b.n	80263c2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8026342:	1c58      	adds	r0, r3, #1
 8026344:	d405      	bmi.n	8026352 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8026346:	42a0      	cmp	r0, r4
 8026348:	dc03      	bgt.n	8026352 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802634a:	1c48      	adds	r0, r1, #1
 802634c:	d401      	bmi.n	8026352 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802634e:	42a8      	cmp	r0, r5
 8026350:	dd20      	ble.n	8026394 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 8026352:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026354:	f109 0902 	add.w	r9, r9, #2
 8026358:	449b      	add	fp, r3
 802635a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802635c:	4498      	add	r8, r3
 802635e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026360:	2b00      	cmp	r3, #0
 8026362:	dd08      	ble.n	8026376 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8026364:	e9da 4502 	ldrd	r4, r5, [sl, #8]
 8026368:	3b01      	subs	r3, #1
 802636a:	9309      	str	r3, [sp, #36]	@ 0x24
 802636c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8026370:	ea4f 432b 	mov.w	r3, fp, asr #16
 8026374:	e7b7      	b.n	80262e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8026376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026378:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 802637c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026380:	3301      	adds	r3, #1
 8026382:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
 8026386:	e687      	b.n	8026098 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8026388:	3a01      	subs	r2, #1
 802638a:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802638e:	920a      	str	r2, [sp, #40]	@ 0x28
 8026390:	4616      	mov	r6, r2
 8026392:	e7a1      	b.n	80262d8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026394:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8026396:	b22d      	sxth	r5, r5
 8026398:	b224      	sxth	r4, r4
 802639a:	e9cd 2005 	strd	r2, r0, [sp, #20]
 802639e:	e9cd 1703 	strd	r1, r7, [sp, #12]
 80263a2:	9302      	str	r3, [sp, #8]
 80263a4:	e9cd 4500 	strd	r4, r5, [sp]
 80263a8:	9b08      	ldr	r3, [sp, #32]
 80263aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80263ac:	4649      	mov	r1, r9
 80263ae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80263b0:	f7ff fcf2 	bl	8025d98 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80263b4:	e7cd      	b.n	8026352 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80263b6:	2a00      	cmp	r2, #0
 80263b8:	d173      	bne.n	80264a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d2>
 80263ba:	4660      	mov	r0, ip
 80263bc:	4664      	mov	r4, ip
 80263be:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80263c2:	b2bb      	uxth	r3, r7
 80263c4:	b292      	uxth	r2, r2
 80263c6:	fb03 f702 	mul.w	r7, r3, r2
 80263ca:	011b      	lsls	r3, r3, #4
 80263cc:	1bd9      	subs	r1, r3, r7
 80263ce:	7826      	ldrb	r6, [r4, #0]
 80263d0:	f894 e002 	ldrb.w	lr, [r4, #2]
 80263d4:	7864      	ldrb	r4, [r4, #1]
 80263d6:	b289      	uxth	r1, r1
 80263d8:	fb01 f606 	mul.w	r6, r1, r6
 80263dc:	fb01 fe0e 	mul.w	lr, r1, lr
 80263e0:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80263e4:	fb01 f104 	mul.w	r1, r1, r4
 80263e8:	9c08      	ldr	r4, [sp, #32]
 80263ea:	b292      	uxth	r2, r2
 80263ec:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80263f0:	5d65      	ldrb	r5, [r4, r5]
 80263f2:	1a9b      	subs	r3, r3, r2
 80263f4:	f89c 4002 	ldrb.w	r4, [ip, #2]
 80263f8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80263fc:	b29b      	uxth	r3, r3
 80263fe:	fb03 e404 	mla	r4, r3, r4, lr
 8026402:	fb03 6505 	mla	r5, r3, r5, r6
 8026406:	fb03 130c 	mla	r3, r3, ip, r1
 802640a:	f890 c001 	ldrb.w	ip, [r0, #1]
 802640e:	7801      	ldrb	r1, [r0, #0]
 8026410:	f890 e002 	ldrb.w	lr, [r0, #2]
 8026414:	fb02 3c0c 	mla	ip, r2, ip, r3
 8026418:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802641a:	fb02 5601 	mla	r6, r2, r1, r5
 802641e:	fb02 4e0e 	mla	lr, r2, lr, r4
 8026422:	7899      	ldrb	r1, [r3, #2]
 8026424:	781a      	ldrb	r2, [r3, #0]
 8026426:	785b      	ldrb	r3, [r3, #1]
 8026428:	f8b9 0000 	ldrh.w	r0, [r9]
 802642c:	fb07 c303 	mla	r3, r7, r3, ip
 8026430:	fb07 6202 	mla	r2, r7, r2, r6
 8026434:	00c5      	lsls	r5, r0, #3
 8026436:	1204      	asrs	r4, r0, #8
 8026438:	fb07 e101 	mla	r1, r7, r1, lr
 802643c:	10c0      	asrs	r0, r0, #3
 802643e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8026440:	b2ed      	uxtb	r5, r5
 8026442:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8026446:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802644a:	fb15 f507 	smulbb	r5, r5, r7
 802644e:	fb14 f407 	smulbb	r4, r4, r7
 8026452:	fb10 f007 	smulbb	r0, r0, r7
 8026456:	f3c3 2707 	ubfx	r7, r3, #8, #8
 802645a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802645c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026460:	461e      	mov	r6, r3
 8026462:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026466:	fb02 5203 	mla	r2, r2, r3, r5
 802646a:	fb07 0006 	mla	r0, r7, r6, r0
 802646e:	fb01 4303 	mla	r3, r1, r3, r4
 8026472:	b281      	uxth	r1, r0
 8026474:	b294      	uxth	r4, r2
 8026476:	b29b      	uxth	r3, r3
 8026478:	1c4a      	adds	r2, r1, #1
 802647a:	1c5d      	adds	r5, r3, #1
 802647c:	1c60      	adds	r0, r4, #1
 802647e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8026482:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8026486:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802648a:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802648e:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8026492:	0952      	lsrs	r2, r2, #5
 8026494:	430b      	orrs	r3, r1
 8026496:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802649a:	4313      	orrs	r3, r2
 802649c:	f8a9 3000 	strh.w	r3, [r9]
 80264a0:	e757      	b.n	8026352 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80264a2:	5c18      	ldrb	r0, [r3, r0]
 80264a4:	9b08      	ldr	r3, [sp, #32]
 80264a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80264aa:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80264ae:	4418      	add	r0, r3
 80264b0:	4664      	mov	r4, ip
 80264b2:	e786      	b.n	80263c2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80264b4:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80264b8:	4660      	mov	r0, ip
 80264ba:	e782      	b.n	80263c2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80264bc:	f43f adec 	beq.w	8026098 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80264c0:	1e6e      	subs	r6, r5, #1
 80264c2:	46d4      	mov	ip, sl
 80264c4:	e62c      	b.n	8026120 <_ZN8touchgfx8LCDGPU2D61TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80264c6:	bf00      	nop

080264c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80264c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264cc:	4692      	mov	sl, r2
 80264ce:	b083      	sub	sp, #12
 80264d0:	880a      	ldrh	r2, [r1, #0]
 80264d2:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80264d6:	e9dd 740e 	ldrd	r7, r4, [sp, #56]	@ 0x38
 80264da:	0215      	lsls	r5, r2, #8
 80264dc:	0150      	lsls	r0, r2, #5
 80264de:	fb04 7e0c 	mla	lr, r4, ip, r7
 80264e2:	f400 407c 	and.w	r0, r0, #64512	@ 0xfc00
 80264e6:	f405 0578 	and.w	r5, r5, #16252928	@ 0xf80000
 80264ea:	00d2      	lsls	r2, r2, #3
 80264ec:	4305      	orrs	r5, r0
 80264ee:	b2d2      	uxtb	r2, r2
 80264f0:	4315      	orrs	r5, r2
 80264f2:	2c00      	cmp	r4, #0
 80264f4:	9501      	str	r5, [sp, #4]
 80264f6:	eb0a 020e 	add.w	r2, sl, lr
 80264fa:	f104 0801 	add.w	r8, r4, #1
 80264fe:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8026502:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 8026506:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 802650a:	db01      	blt.n	8026510 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x48>
 802650c:	45a1      	cmp	r9, r4
 802650e:	dc71      	bgt.n	80265f4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x12c>
 8026510:	fa5f fa85 	uxtb.w	sl, r5
 8026514:	f10d 0b04 	add.w	fp, sp, #4
 8026518:	4654      	mov	r4, sl
 802651a:	46de      	mov	lr, fp
 802651c:	f1b8 0f00 	cmp.w	r8, #0
 8026520:	db01      	blt.n	8026526 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5e>
 8026522:	45c1      	cmp	r9, r8
 8026524:	dc4c      	bgt.n	80265c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xf8>
 8026526:	fa5f f985 	uxtb.w	r9, r5
 802652a:	ab01      	add	r3, sp, #4
 802652c:	464d      	mov	r5, r9
 802652e:	4698      	mov	r8, r3
 8026530:	2e0f      	cmp	r6, #15
 8026532:	f200 809b 	bhi.w	802666c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 8026536:	280f      	cmp	r0, #15
 8026538:	f200 8098 	bhi.w	802666c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 802653c:	b2b2      	uxth	r2, r6
 802653e:	b280      	uxth	r0, r0
 8026540:	fb02 f700 	mul.w	r7, r2, r0
 8026544:	0112      	lsls	r2, r2, #4
 8026546:	f89b c002 	ldrb.w	ip, [fp, #2]
 802654a:	1bd6      	subs	r6, r2, r7
 802654c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8026550:	b2b6      	uxth	r6, r6
 8026552:	ebc7 1000 	rsb	r0, r7, r0, lsl #4
 8026556:	fb06 f404 	mul.w	r4, r6, r4
 802655a:	fb06 fc0c 	mul.w	ip, r6, ip
 802655e:	fb06 f60b 	mul.w	r6, r6, fp
 8026562:	b280      	uxth	r0, r0
 8026564:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8026568:	f89e b002 	ldrb.w	fp, [lr, #2]
 802656c:	1a12      	subs	r2, r2, r0
 802656e:	f89e e001 	ldrb.w	lr, [lr, #1]
 8026572:	b292      	uxth	r2, r2
 8026574:	fb02 440a 	mla	r4, r2, sl, r4
 8026578:	fb02 660e 	mla	r6, r2, lr, r6
 802657c:	fb02 cc0b 	mla	ip, r2, fp, ip
 8026580:	f898 a002 	ldrb.w	sl, [r8, #2]
 8026584:	f898 8001 	ldrb.w	r8, [r8, #1]
 8026588:	fb00 4909 	mla	r9, r0, r9, r4
 802658c:	fb00 cc0a 	mla	ip, r0, sl, ip
 8026590:	fb00 6008 	mla	r0, r0, r8, r6
 8026594:	789e      	ldrb	r6, [r3, #2]
 8026596:	785b      	ldrb	r3, [r3, #1]
 8026598:	fb07 9905 	mla	r9, r7, r5, r9
 802659c:	fb07 c506 	mla	r5, r7, r6, ip
 80265a0:	fb07 0703 	mla	r7, r7, r3, r0
 80265a4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80265a8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80265ac:	097f      	lsrs	r7, r7, #5
 80265ae:	ea45 0509 	orr.w	r5, r5, r9
 80265b2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80265b6:	433d      	orrs	r5, r7
 80265b8:	800d      	strh	r5, [r1, #0]
 80265ba:	b003      	add	sp, #12
 80265bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265c0:	b388      	cbz	r0, 8026626 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x15e>
 80265c2:	2f00      	cmp	r7, #0
 80265c4:	db40      	blt.n	8026648 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 80265c6:	45bc      	cmp	ip, r7
 80265c8:	dd3e      	ble.n	8026648 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x180>
 80265ca:	f812 800c 	ldrb.w	r8, [r2, ip]
 80265ce:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80265d2:	4498      	add	r8, r3
 80265d4:	3701      	adds	r7, #1
 80265d6:	f898 9000 	ldrb.w	r9, [r8]
 80265da:	d432      	bmi.n	8026642 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 80265dc:	45bc      	cmp	ip, r7
 80265de:	dd30      	ble.n	8026642 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x17a>
 80265e0:	2e00      	cmp	r6, #0
 80265e2:	d040      	beq.n	8026666 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x19e>
 80265e4:	4494      	add	ip, r2
 80265e6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80265ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80265ee:	5c9d      	ldrb	r5, [r3, r2]
 80265f0:	4413      	add	r3, r2
 80265f2:	e79d      	b.n	8026530 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 80265f4:	2f00      	cmp	r7, #0
 80265f6:	db01      	blt.n	80265fc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x134>
 80265f8:	45bc      	cmp	ip, r7
 80265fa:	dc1c      	bgt.n	8026636 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16e>
 80265fc:	f10d 0e04 	add.w	lr, sp, #4
 8026600:	1c7c      	adds	r4, r7, #1
 8026602:	f89e a000 	ldrb.w	sl, [lr]
 8026606:	d40a      	bmi.n	802661e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 8026608:	45a4      	cmp	ip, r4
 802660a:	dd08      	ble.n	802661e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x156>
 802660c:	b1fe      	cbz	r6, 802664e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x186>
 802660e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8026612:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8026616:	f813 400b 	ldrb.w	r4, [r3, fp]
 802661a:	449b      	add	fp, r3
 802661c:	e77e      	b.n	802651c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 802661e:	b2ec      	uxtb	r4, r5
 8026620:	f10d 0b04 	add.w	fp, sp, #4
 8026624:	e77a      	b.n	802651c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x54>
 8026626:	2e0f      	cmp	r6, #15
 8026628:	fa5f f985 	uxtb.w	r9, r5
 802662c:	d81e      	bhi.n	802666c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1a4>
 802662e:	ab01      	add	r3, sp, #4
 8026630:	4698      	mov	r8, r3
 8026632:	464d      	mov	r5, r9
 8026634:	e782      	b.n	802653c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x74>
 8026636:	f81a e00e 	ldrb.w	lr, [sl, lr]
 802663a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802663e:	449e      	add	lr, r3
 8026640:	e7de      	b.n	8026600 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8026642:	b2ed      	uxtb	r5, r5
 8026644:	ab01      	add	r3, sp, #4
 8026646:	e773      	b.n	8026530 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x68>
 8026648:	f10d 0804 	add.w	r8, sp, #4
 802664c:	e7c2      	b.n	80265d4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x10c>
 802664e:	f1b8 0f00 	cmp.w	r8, #0
 8026652:	b2ec      	uxtb	r4, r5
 8026654:	f10d 0b04 	add.w	fp, sp, #4
 8026658:	f6bf af63 	bge.w	8026522 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 802665c:	465b      	mov	r3, fp
 802665e:	46d8      	mov	r8, fp
 8026660:	4625      	mov	r5, r4
 8026662:	46a1      	mov	r9, r4
 8026664:	e767      	b.n	8026536 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8026666:	b2ed      	uxtb	r5, r5
 8026668:	ab01      	add	r3, sp, #4
 802666a:	e764      	b.n	8026536 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802666c:	4b03      	ldr	r3, [pc, #12]	@ (802667c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b4>)
 802666e:	4a04      	ldr	r2, [pc, #16]	@ (8026680 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1b8>)
 8026670:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8026674:	4803      	ldr	r0, [pc, #12]	@ (8026684 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x1bc>)
 8026676:	f005 fa9f 	bl	802bbb8 <__assert_func>
 802667a:	bf00      	nop
 802667c:	0802ef50 	.word	0x0802ef50
 8026680:	0802f5cc 	.word	0x0802f5cc
 8026684:	0802f0d8 	.word	0x0802f0d8

08026688 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802668c:	ed2d 8b0a 	vpush	{d8-d12}
 8026690:	eeb0 aa40 	vmov.f32	s20, s0
 8026694:	eef0 9a60 	vmov.f32	s19, s1
 8026698:	eeb0 9a41 	vmov.f32	s18, s2
 802669c:	eef0 8a62 	vmov.f32	s17, s5
 80266a0:	eeb0 8a43 	vmov.f32	s16, s6
 80266a4:	eeb0 ca44 	vmov.f32	s24, s8
 80266a8:	eef0 ba64 	vmov.f32	s23, s9
 80266ac:	eeb0 ba45 	vmov.f32	s22, s10
 80266b0:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 80266b4:	b093      	sub	sp, #76	@ 0x4c
 80266b6:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80266ba:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	@ 0xac
 80266be:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	@ 0x9c
 80266c2:	9011      	str	r0, [sp, #68]	@ 0x44
 80266c4:	461a      	mov	r2, r3
 80266c6:	6860      	ldr	r0, [r4, #4]
 80266c8:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80266ca:	f8dd a0a4 	ldr.w	sl, [sp, #164]	@ 0xa4
 80266ce:	fb00 1303 	mla	r3, r0, r3, r1
 80266d2:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80266d4:	6820      	ldr	r0, [r4, #0]
 80266d6:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 80266d8:	6849      	ldr	r1, [r1, #4]
 80266da:	6824      	ldr	r4, [r4, #0]
 80266dc:	eb00 0b43 	add.w	fp, r0, r3, lsl #1
 80266e0:	1d0b      	adds	r3, r1, #4
 80266e2:	9409      	str	r4, [sp, #36]	@ 0x24
 80266e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80266e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80266e8:	2b00      	cmp	r3, #0
 80266ea:	dc02      	bgt.n	80266f2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80266ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80266ee:	2b00      	cmp	r3, #0
 80266f0:	dd61      	ble.n	80267b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 80266f2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80266f4:	2a00      	cmp	r2, #0
 80266f6:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 80266fa:	b225      	sxth	r5, r4
 80266fc:	fa0f f78e 	sxth.w	r7, lr
 8026700:	f340 81d9 	ble.w	8026ab6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8026704:	f8cd e01c 	str.w	lr, [sp, #28]
 8026708:	f8dd e0a8 	ldr.w	lr, [sp, #168]	@ 0xa8
 802670c:	1e6e      	subs	r6, r5, #1
 802670e:	f107 3cff 	add.w	ip, r7, #4294967295
 8026712:	ea5f 4329 	movs.w	r3, r9, asr #16
 8026716:	ea4f 4128 	mov.w	r1, r8, asr #16
 802671a:	d405      	bmi.n	8026728 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802671c:	42b3      	cmp	r3, r6
 802671e:	da03      	bge.n	8026728 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026720:	2900      	cmp	r1, #0
 8026722:	db01      	blt.n	8026728 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026724:	4561      	cmp	r1, ip
 8026726:	db4b      	blt.n	80267c0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8026728:	1c58      	adds	r0, r3, #1
 802672a:	d406      	bmi.n	802673a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802672c:	42a8      	cmp	r0, r5
 802672e:	dc04      	bgt.n	802673a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026730:	1c48      	adds	r0, r1, #1
 8026732:	d402      	bmi.n	802673a <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026734:	42b8      	cmp	r0, r7
 8026736:	f340 8149 	ble.w	80269cc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802673a:	3a01      	subs	r2, #1
 802673c:	44d1      	add	r9, sl
 802673e:	44f0      	add	r8, lr
 8026740:	f10b 0b02 	add.w	fp, fp, #2
 8026744:	d1e5      	bne.n	8026712 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026746:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026748:	2b00      	cmp	r3, #0
 802674a:	dd34      	ble.n	80267b6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 802674c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8026750:	ee79 9aab 	vadd.f32	s19, s19, s23
 8026754:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8026758:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802675c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026760:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026764:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026768:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802676c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026770:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026774:	ee16 2a90 	vmov	r2, s13
 8026778:	3b01      	subs	r3, #1
 802677a:	930a      	str	r3, [sp, #40]	@ 0x28
 802677c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802677e:	fb92 faf3 	sdiv	sl, r2, r3
 8026782:	ee17 2a10 	vmov	r2, s14
 8026786:	eeb0 7a48 	vmov.f32	s14, s16
 802678a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802678e:	ee17 8a10 	vmov	r8, s14
 8026792:	eeb0 7a68 	vmov.f32	s14, s17
 8026796:	fb92 f3f3 	sdiv	r3, r2, r3
 802679a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802679e:	932a      	str	r3, [sp, #168]	@ 0xa8
 80267a0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80267a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80267a4:	ee17 9a10 	vmov	r9, s14
 80267a8:	eeb0 8a67 	vmov.f32	s16, s15
 80267ac:	eef0 8a46 	vmov.f32	s17, s12
 80267b0:	bf18      	it	ne
 80267b2:	461a      	movne	r2, r3
 80267b4:	e797      	b.n	80266e6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80267b6:	b013      	add	sp, #76	@ 0x4c
 80267b8:	ecbd 8b0a 	vpop	{d8-d12}
 80267bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267c0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80267c4:	f8cd b01c 	str.w	fp, [sp, #28]
 80267c8:	1e51      	subs	r1, r2, #1
 80267ca:	fb0a 9301 	mla	r3, sl, r1, r9
 80267ce:	141b      	asrs	r3, r3, #16
 80267d0:	9108      	str	r1, [sp, #32]
 80267d2:	f100 809e 	bmi.w	8026912 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80267d6:	42b3      	cmp	r3, r6
 80267d8:	f280 809b 	bge.w	8026912 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80267dc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80267de:	fb03 8301 	mla	r3, r3, r1, r8
 80267e2:	141b      	asrs	r3, r3, #16
 80267e4:	f100 8095 	bmi.w	8026912 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80267e8:	3f01      	subs	r7, #1
 80267ea:	42bb      	cmp	r3, r7
 80267ec:	f280 8091 	bge.w	8026912 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80267f0:	2a00      	cmp	r2, #0
 80267f2:	dda8      	ble.n	8026746 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80267f4:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 80267f8:	f8cd a0a4 	str.w	sl, [sp, #164]	@ 0xa4
 80267fc:	f8cd b020 	str.w	fp, [sp, #32]
 8026800:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8026804:	e060      	b.n	80268c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8026806:	784f      	ldrb	r7, [r1, #1]
 8026808:	194c      	adds	r4, r1, r5
 802680a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802680e:	4457      	add	r7, sl
 8026810:	2a00      	cmp	r2, #0
 8026812:	d075      	beq.n	8026900 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8026814:	5d48      	ldrb	r0, [r1, r5]
 8026816:	7865      	ldrb	r5, [r4, #1]
 8026818:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802681c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026820:	4450      	add	r0, sl
 8026822:	4455      	add	r5, sl
 8026824:	b29b      	uxth	r3, r3
 8026826:	b292      	uxth	r2, r2
 8026828:	fb03 f402 	mul.w	r4, r3, r2
 802682c:	011b      	lsls	r3, r3, #4
 802682e:	f897 e000 	ldrb.w	lr, [r7]
 8026832:	f897 c002 	ldrb.w	ip, [r7, #2]
 8026836:	1b19      	subs	r1, r3, r4
 8026838:	787f      	ldrb	r7, [r7, #1]
 802683a:	b289      	uxth	r1, r1
 802683c:	fb01 fc0c 	mul.w	ip, r1, ip
 8026840:	fb01 fe0e 	mul.w	lr, r1, lr
 8026844:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8026848:	fb01 f107 	mul.w	r1, r1, r7
 802684c:	b292      	uxth	r2, r2
 802684e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8026852:	f81a b00b 	ldrb.w	fp, [sl, fp]
 8026856:	78b7      	ldrb	r7, [r6, #2]
 8026858:	1a9b      	subs	r3, r3, r2
 802685a:	7876      	ldrb	r6, [r6, #1]
 802685c:	b29b      	uxth	r3, r3
 802685e:	fb03 ee0b 	mla	lr, r3, fp, lr
 8026862:	fb03 c707 	mla	r7, r3, r7, ip
 8026866:	fb03 1306 	mla	r3, r3, r6, r1
 802686a:	f890 b000 	ldrb.w	fp, [r0]
 802686e:	f890 c002 	ldrb.w	ip, [r0, #2]
 8026872:	7841      	ldrb	r1, [r0, #1]
 8026874:	fb02 ee0b 	mla	lr, r2, fp, lr
 8026878:	fb02 3301 	mla	r3, r2, r1, r3
 802687c:	fb02 770c 	mla	r7, r2, ip, r7
 8026880:	f895 b000 	ldrb.w	fp, [r5]
 8026884:	f895 c002 	ldrb.w	ip, [r5, #2]
 8026888:	7869      	ldrb	r1, [r5, #1]
 802688a:	fb04 ee0b 	mla	lr, r4, fp, lr
 802688e:	fb04 3101 	mla	r1, r4, r1, r3
 8026892:	fb04 7c0c 	mla	ip, r4, ip, r7
 8026896:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8026898:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802689c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80268a0:	0949      	lsrs	r1, r1, #5
 80268a2:	4491      	add	r9, r2
 80268a4:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80268a6:	9b07      	ldr	r3, [sp, #28]
 80268a8:	ea4c 0e0e 	orr.w	lr, ip, lr
 80268ac:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80268b0:	ea4e 0e01 	orr.w	lr, lr, r1
 80268b4:	4490      	add	r8, r2
 80268b6:	9a08      	ldr	r2, [sp, #32]
 80268b8:	f823 eb02 	strh.w	lr, [r3], #2
 80268bc:	4293      	cmp	r3, r2
 80268be:	9307      	str	r3, [sp, #28]
 80268c0:	d025      	beq.n	802690e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80268c2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80268c4:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 80268c8:	ea4f 4329 	mov.w	r3, r9, asr #16
 80268cc:	ea4f 4128 	mov.w	r1, r8, asr #16
 80268d0:	fb05 3101 	mla	r1, r5, r1, r3
 80268d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80268d6:	f3c9 3303 	ubfx	r3, r9, #12, #4
 80268da:	f812 b001 	ldrb.w	fp, [r2, r1]
 80268de:	4411      	add	r1, r2
 80268e0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80268e4:	eb0a 060b 	add.w	r6, sl, fp
 80268e8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80268ec:	2b00      	cmp	r3, #0
 80268ee:	d18a      	bne.n	8026806 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80268f0:	b14a      	cbz	r2, 8026906 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80268f2:	5d48      	ldrb	r0, [r1, r5]
 80268f4:	4637      	mov	r7, r6
 80268f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80268fa:	4635      	mov	r5, r6
 80268fc:	4450      	add	r0, sl
 80268fe:	e791      	b.n	8026824 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8026900:	4635      	mov	r5, r6
 8026902:	4630      	mov	r0, r6
 8026904:	e78e      	b.n	8026824 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8026906:	4635      	mov	r5, r6
 8026908:	4630      	mov	r0, r6
 802690a:	4637      	mov	r7, r6
 802690c:	e78a      	b.n	8026824 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802690e:	4693      	mov	fp, r2
 8026910:	e719      	b.n	8026746 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026912:	2a00      	cmp	r2, #0
 8026914:	f77f af17 	ble.w	8026746 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026918:	9e08      	ldr	r6, [sp, #32]
 802691a:	ea4f 4329 	mov.w	r3, r9, asr #16
 802691e:	ea4f 4128 	mov.w	r1, r8, asr #16
 8026922:	465f      	mov	r7, fp
 8026924:	f8cd b01c 	str.w	fp, [sp, #28]
 8026928:	f8dd b0b8 	ldr.w	fp, [sp, #184]	@ 0xb8
 802692c:	2b00      	cmp	r3, #0
 802692e:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8026932:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8026936:	db2a      	blt.n	802698e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026938:	1e65      	subs	r5, r4, #1
 802693a:	42ab      	cmp	r3, r5
 802693c:	da27      	bge.n	802698e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802693e:	2900      	cmp	r1, #0
 8026940:	db25      	blt.n	802698e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026942:	f10e 35ff 	add.w	r5, lr, #4294967295
 8026946:	42a9      	cmp	r1, r5
 8026948:	da21      	bge.n	802698e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802694a:	b224      	sxth	r4, r4
 802694c:	fb01 3304 	mla	r3, r1, r4, r3
 8026950:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026952:	f811 c003 	ldrb.w	ip, [r1, r3]
 8026956:	440b      	add	r3, r1
 8026958:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802695a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802695e:	eb01 0e0c 	add.w	lr, r1, ip
 8026962:	2800      	cmp	r0, #0
 8026964:	d048      	beq.n	80269f8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8026966:	785d      	ldrb	r5, [r3, #1]
 8026968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802696c:	440d      	add	r5, r1
 802696e:	2a00      	cmp	r2, #0
 8026970:	f000 809e 	beq.w	8026ab0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8026974:	1919      	adds	r1, r3, r4
 8026976:	7849      	ldrb	r1, [r1, #1]
 8026978:	5d1c      	ldrb	r4, [r3, r4]
 802697a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802697c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026980:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026984:	1859      	adds	r1, r3, r1
 8026986:	18e3      	adds	r3, r4, r3
 8026988:	910f      	str	r1, [sp, #60]	@ 0x3c
 802698a:	9310      	str	r3, [sp, #64]	@ 0x40
 802698c:	e039      	b.n	8026a02 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802698e:	1c5d      	adds	r5, r3, #1
 8026990:	d405      	bmi.n	802699e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8026992:	42a5      	cmp	r5, r4
 8026994:	dc03      	bgt.n	802699e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8026996:	1c4d      	adds	r5, r1, #1
 8026998:	d401      	bmi.n	802699e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 802699a:	4575      	cmp	r5, lr
 802699c:	dd1c      	ble.n	80269d8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802699e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80269a0:	2e00      	cmp	r6, #0
 80269a2:	f107 0702 	add.w	r7, r7, #2
 80269a6:	44d1      	add	r9, sl
 80269a8:	4498      	add	r8, r3
 80269aa:	dd07      	ble.n	80269bc <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80269ac:	e9db 4e02 	ldrd	r4, lr, [fp, #8]
 80269b0:	3e01      	subs	r6, #1
 80269b2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80269b6:	ea4f 4128 	mov.w	r1, r8, asr #16
 80269ba:	e7b7      	b.n	802692c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80269bc:	e9dd b307 	ldrd	fp, r3, [sp, #28]
 80269c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80269c4:	3301      	adds	r3, #1
 80269c6:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 80269ca:	e6bc      	b.n	8026746 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80269cc:	3a01      	subs	r2, #1
 80269ce:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80269d2:	9208      	str	r2, [sp, #32]
 80269d4:	4616      	mov	r6, r2
 80269d6:	e7a4      	b.n	8026922 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80269d8:	fa0f f58e 	sxth.w	r5, lr
 80269dc:	b224      	sxth	r4, r4
 80269de:	e9cd 0204 	strd	r0, r2, [sp, #16]
 80269e2:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80269e6:	e9cd 4500 	strd	r4, r5, [sp]
 80269ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80269ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80269ee:	4639      	mov	r1, r7
 80269f0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80269f2:	f7ff fd69 	bl	80264c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80269f6:	e7d2      	b.n	802699e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80269f8:	2a00      	cmp	r2, #0
 80269fa:	d14f      	bne.n	8026a9c <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80269fc:	4675      	mov	r5, lr
 80269fe:	e9cd ee0f 	strd	lr, lr, [sp, #60]	@ 0x3c
 8026a02:	b283      	uxth	r3, r0
 8026a04:	b292      	uxth	r2, r2
 8026a06:	fb03 f002 	mul.w	r0, r3, r2
 8026a0a:	782c      	ldrb	r4, [r5, #0]
 8026a0c:	011b      	lsls	r3, r3, #4
 8026a0e:	940e      	str	r4, [sp, #56]	@ 0x38
 8026a10:	78ac      	ldrb	r4, [r5, #2]
 8026a12:	1a19      	subs	r1, r3, r0
 8026a14:	940d      	str	r4, [sp, #52]	@ 0x34
 8026a16:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026a18:	b289      	uxth	r1, r1
 8026a1a:	fb01 f404 	mul.w	r4, r1, r4
 8026a1e:	940e      	str	r4, [sp, #56]	@ 0x38
 8026a20:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026a22:	786d      	ldrb	r5, [r5, #1]
 8026a24:	fb01 f404 	mul.w	r4, r1, r4
 8026a28:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8026a2c:	fb01 f105 	mul.w	r1, r1, r5
 8026a30:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8026a32:	b292      	uxth	r2, r2
 8026a34:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8026a38:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8026a3c:	940d      	str	r4, [sp, #52]	@ 0x34
 8026a3e:	1a9b      	subs	r3, r3, r2
 8026a40:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026a42:	b29b      	uxth	r3, r3
 8026a44:	f89e 5002 	ldrb.w	r5, [lr, #2]
 8026a48:	fb03 4c0c 	mla	ip, r3, ip, r4
 8026a4c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8026a50:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026a52:	fb03 4505 	mla	r5, r3, r5, r4
 8026a56:	fb03 130e 	mla	r3, r3, lr, r1
 8026a5a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026a5c:	78a1      	ldrb	r1, [r4, #2]
 8026a5e:	f894 e000 	ldrb.w	lr, [r4]
 8026a62:	7864      	ldrb	r4, [r4, #1]
 8026a64:	fb02 5501 	mla	r5, r2, r1, r5
 8026a68:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026a6c:	fb02 3104 	mla	r1, r2, r4, r3
 8026a70:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026a72:	7822      	ldrb	r2, [r4, #0]
 8026a74:	78a3      	ldrb	r3, [r4, #2]
 8026a76:	7864      	ldrb	r4, [r4, #1]
 8026a78:	fb00 cc02 	mla	ip, r0, r2, ip
 8026a7c:	fb00 5303 	mla	r3, r0, r3, r5
 8026a80:	fb00 1204 	mla	r2, r0, r4, r1
 8026a84:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8026a88:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8026a8c:	0952      	lsrs	r2, r2, #5
 8026a8e:	ea43 030c 	orr.w	r3, r3, ip
 8026a92:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026a96:	4313      	orrs	r3, r2
 8026a98:	803b      	strh	r3, [r7, #0]
 8026a9a:	e780      	b.n	802699e <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 8026a9c:	5d1c      	ldrb	r4, [r3, r4]
 8026a9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026aa0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026aa4:	18e3      	adds	r3, r4, r3
 8026aa6:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 8026aaa:	9310      	str	r3, [sp, #64]	@ 0x40
 8026aac:	4675      	mov	r5, lr
 8026aae:	e7a8      	b.n	8026a02 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8026ab0:	e9cd ee0f 	strd	lr, lr, [sp, #60]	@ 0x3c
 8026ab4:	e7a5      	b.n	8026a02 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8026ab6:	f43f ae46 	beq.w	8026746 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026aba:	1e6e      	subs	r6, r5, #1
 8026abc:	f8cd b01c 	str.w	fp, [sp, #28]
 8026ac0:	e682      	b.n	80267c8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_16BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8026ac2:	bf00      	nop

08026ac4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8026ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ac8:	b08b      	sub	sp, #44	@ 0x2c
 8026aca:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	@ 0x50
 8026ace:	f8b1 c000 	ldrh.w	ip, [r1]
 8026ad2:	e9dd 6416 	ldrd	r6, r4, [sp, #88]	@ 0x58
 8026ad6:	fb04 6507 	mla	r5, r4, r7, r6
 8026ada:	9107      	str	r1, [sp, #28]
 8026adc:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8026ae0:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026ae4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026ae8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8026aec:	469a      	mov	sl, r3
 8026aee:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8026af2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026af6:	9105      	str	r1, [sp, #20]
 8026af8:	2c00      	cmp	r4, #0
 8026afa:	fa5f f18c 	uxtb.w	r1, ip
 8026afe:	9004      	str	r0, [sp, #16]
 8026b00:	9106      	str	r1, [sp, #24]
 8026b02:	eb02 0e05 	add.w	lr, r2, r5
 8026b06:	f104 0801 	add.w	r8, r4, #1
 8026b0a:	f9bd 9054 	ldrsh.w	r9, [sp, #84]	@ 0x54
 8026b0e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8026b12:	f89d 0064 	ldrb.w	r0, [sp, #100]	@ 0x64
 8026b16:	9308      	str	r3, [sp, #32]
 8026b18:	db02      	blt.n	8026b20 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8026b1a:	45a1      	cmp	r9, r4
 8026b1c:	f300 8119 	bgt.w	8026d52 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28e>
 8026b20:	f04f 0c00 	mov.w	ip, #0
 8026b24:	4665      	mov	r5, ip
 8026b26:	4662      	mov	r2, ip
 8026b28:	4664      	mov	r4, ip
 8026b2a:	f1b8 0f00 	cmp.w	r8, #0
 8026b2e:	db02      	blt.n	8026b36 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x72>
 8026b30:	45c1      	cmp	r9, r8
 8026b32:	f300 8127 	bgt.w	8026d84 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>
 8026b36:	f04f 0e00 	mov.w	lr, #0
 8026b3a:	46f0      	mov	r8, lr
 8026b3c:	4676      	mov	r6, lr
 8026b3e:	46f1      	mov	r9, lr
 8026b40:	290f      	cmp	r1, #15
 8026b42:	f200 815e 	bhi.w	8026e02 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8026b46:	280f      	cmp	r0, #15
 8026b48:	f200 815b 	bhi.w	8026e02 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8026b4c:	b280      	uxth	r0, r0
 8026b4e:	b289      	uxth	r1, r1
 8026b50:	fb00 fa01 	mul.w	sl, r0, r1
 8026b54:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8026b58:	b280      	uxth	r0, r0
 8026b5a:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8026b5e:	fb00 fb08 	mul.w	fp, r0, r8
 8026b62:	fb0a f70e 	mul.w	r7, sl, lr
 8026b66:	9301      	str	r3, [sp, #4]
 8026b68:	f009 13ff 	and.w	r3, r9, #16711935	@ 0xff00ff
 8026b6c:	9302      	str	r3, [sp, #8]
 8026b6e:	f409 437f 	and.w	r3, r9, #65280	@ 0xff00
 8026b72:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026b76:	9303      	str	r3, [sp, #12]
 8026b78:	0109      	lsls	r1, r1, #4
 8026b7a:	eba1 090a 	sub.w	r9, r1, sl
 8026b7e:	fa1f f989 	uxth.w	r9, r9
 8026b82:	fb09 f30c 	mul.w	r3, r9, ip
 8026b86:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8026b8a:	1a09      	subs	r1, r1, r0
 8026b8c:	b289      	uxth	r1, r1
 8026b8e:	fb01 3305 	mla	r3, r1, r5, r3
 8026b92:	445b      	add	r3, fp
 8026b94:	443b      	add	r3, r7
 8026b96:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b9a:	2dff      	cmp	r5, #255	@ 0xff
 8026b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8026b9e:	f004 13ff 	and.w	r3, r4, #16711935	@ 0xff00ff
 8026ba2:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026ba6:	d019      	beq.n	8026bdc <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x118>
 8026ba8:	fb03 f305 	mul.w	r3, r3, r5
 8026bac:	fb04 f405 	mul.w	r4, r4, r5
 8026bb0:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8026bb4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8026bb8:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8026bbc:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 8026bc0:	445b      	add	r3, fp
 8026bc2:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8026bc6:	0a1b      	lsrs	r3, r3, #8
 8026bc8:	0a24      	lsrs	r4, r4, #8
 8026bca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026bce:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026bd2:	431c      	orrs	r4, r3
 8026bd4:	f004 13ff 	and.w	r3, r4, #16711935	@ 0xff00ff
 8026bd8:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026bdc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026be0:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8026be4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026be8:	d018      	beq.n	8026c1c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x158>
 8026bea:	fb05 f50c 	mul.w	r5, r5, ip
 8026bee:	fb02 f20c 	mul.w	r2, r2, ip
 8026bf2:	0a2f      	lsrs	r7, r5, #8
 8026bf4:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026bf8:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8026bfc:	f502 7c80 	add.w	ip, r2, #256	@ 0x100
 8026c00:	443d      	add	r5, r7
 8026c02:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026c06:	0a2d      	lsrs	r5, r5, #8
 8026c08:	0a12      	lsrs	r2, r2, #8
 8026c0a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026c0e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026c12:	432a      	orrs	r2, r5
 8026c14:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8026c18:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026c1c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026c20:	d01f      	beq.n	8026c62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x19e>
 8026c22:	9f02      	ldr	r7, [sp, #8]
 8026c24:	fb07 fb08 	mul.w	fp, r7, r8
 8026c28:	9f03      	ldr	r7, [sp, #12]
 8026c2a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8026c2e:	fb07 f808 	mul.w	r8, r7, r8
 8026c32:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c36:	f508 7780 	add.w	r7, r8, #256	@ 0x100
 8026c3a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026c3e:	eb07 2718 	add.w	r7, r7, r8, lsr #8
 8026c42:	44dc      	add	ip, fp
 8026c44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c48:	0a3f      	lsrs	r7, r7, #8
 8026c4a:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026c4e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c52:	ea4c 0807 	orr.w	r8, ip, r7
 8026c56:	f008 17ff 	and.w	r7, r8, #16711935	@ 0xff00ff
 8026c5a:	9702      	str	r7, [sp, #8]
 8026c5c:	f408 477f 	and.w	r7, r8, #65280	@ 0xff00
 8026c60:	9703      	str	r7, [sp, #12]
 8026c62:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026c66:	d01d      	beq.n	8026ca4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1e0>
 8026c68:	9f01      	ldr	r7, [sp, #4]
 8026c6a:	fb06 f60e 	mul.w	r6, r6, lr
 8026c6e:	fb07 f80e 	mul.w	r8, r7, lr
 8026c72:	ea4f 2c18 	mov.w	ip, r8, lsr #8
 8026c76:	f506 7780 	add.w	r7, r6, #256	@ 0x100
 8026c7a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026c7e:	f108 1801 	add.w	r8, r8, #65537	@ 0x10001
 8026c82:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8026c86:	44e0      	add	r8, ip
 8026c88:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026c8c:	0a36      	lsrs	r6, r6, #8
 8026c8e:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8026c92:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026c96:	ea48 0606 	orr.w	r6, r8, r6
 8026c9a:	f006 17ff 	and.w	r7, r6, #16711935	@ 0xff00ff
 8026c9e:	9701      	str	r7, [sp, #4]
 8026ca0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026ca4:	f8bd e020 	ldrh.w	lr, [sp, #32]
 8026ca8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026caa:	fb05 f509 	mul.w	r5, r5, r9
 8026cae:	fb07 f70e 	mul.w	r7, r7, lr
 8026cb2:	f107 0c01 	add.w	ip, r7, #1
 8026cb6:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8026cba:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 8026cbe:	fb02 f209 	mul.w	r2, r2, r9
 8026cc2:	fb03 5501 	mla	r5, r3, r1, r5
 8026cc6:	fb04 2201 	mla	r2, r4, r1, r2
 8026cca:	9b02      	ldr	r3, [sp, #8]
 8026ccc:	fa5f fc8c 	uxtb.w	ip, ip
 8026cd0:	fb03 5500 	mla	r5, r3, r0, r5
 8026cd4:	9b03      	ldr	r3, [sp, #12]
 8026cd6:	fb03 2200 	mla	r2, r3, r0, r2
 8026cda:	9b01      	ldr	r3, [sp, #4]
 8026cdc:	fb03 550a 	mla	r5, r3, sl, r5
 8026ce0:	fb06 2a0a 	mla	sl, r6, sl, r2
 8026ce4:	9a05      	ldr	r2, [sp, #20]
 8026ce6:	9b04      	ldr	r3, [sp, #16]
 8026ce8:	fb12 f10c 	smulbb	r1, r2, ip
 8026cec:	9a06      	ldr	r2, [sp, #24]
 8026cee:	0a2e      	lsrs	r6, r5, #8
 8026cf0:	fb13 f30c 	smulbb	r3, r3, ip
 8026cf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026cf8:	fb12 fc0c 	smulbb	ip, r2, ip
 8026cfc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026d00:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8026d04:	ea46 060a 	orr.w	r6, r6, sl
 8026d08:	0c30      	lsrs	r0, r6, #16
 8026d0a:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8026d0e:	b2f6      	uxtb	r6, r6
 8026d10:	fb00 330e 	mla	r3, r0, lr, r3
 8026d14:	fb02 120e 	mla	r2, r2, lr, r1
 8026d18:	fb06 c60e 	mla	r6, r6, lr, ip
 8026d1c:	b298      	uxth	r0, r3
 8026d1e:	b291      	uxth	r1, r2
 8026d20:	b2b6      	uxth	r6, r6
 8026d22:	1c43      	adds	r3, r0, #1
 8026d24:	f106 0e01 	add.w	lr, r6, #1
 8026d28:	1c4a      	adds	r2, r1, #1
 8026d2a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026d2e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8026d32:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8026d36:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8026d3a:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 8026d3e:	0952      	lsrs	r2, r2, #5
 8026d40:	4333      	orrs	r3, r6
 8026d42:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026d46:	4313      	orrs	r3, r2
 8026d48:	9a07      	ldr	r2, [sp, #28]
 8026d4a:	8013      	strh	r3, [r2, #0]
 8026d4c:	b00b      	add	sp, #44	@ 0x2c
 8026d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d52:	2e00      	cmp	r6, #0
 8026d54:	db01      	blt.n	8026d5a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x296>
 8026d56:	42b7      	cmp	r7, r6
 8026d58:	dc3c      	bgt.n	8026dd4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x310>
 8026d5a:	2500      	movs	r5, #0
 8026d5c:	462c      	mov	r4, r5
 8026d5e:	1c72      	adds	r2, r6, #1
 8026d60:	d427      	bmi.n	8026db2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8026d62:	4297      	cmp	r7, r2
 8026d64:	dd25      	ble.n	8026db2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2ee>
 8026d66:	b131      	cbz	r1, 8026d76 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2b2>
 8026d68:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026d6c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8026d70:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8026d74:	e6d9      	b.n	8026b2a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8026d76:	f1b8 0f00 	cmp.w	r8, #0
 8026d7a:	db3b      	blt.n	8026df4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8026d7c:	45c1      	cmp	r9, r8
 8026d7e:	dd39      	ble.n	8026df4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x330>
 8026d80:	468c      	mov	ip, r1
 8026d82:	460a      	mov	r2, r1
 8026d84:	b1c8      	cbz	r0, 8026dba <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2f6>
 8026d86:	2e00      	cmp	r6, #0
 8026d88:	db2d      	blt.n	8026de6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8026d8a:	42b7      	cmp	r7, r6
 8026d8c:	dd2b      	ble.n	8026de6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x322>
 8026d8e:	f81e 8007 	ldrb.w	r8, [lr, r7]
 8026d92:	f85a 9028 	ldr.w	r9, [sl, r8, lsl #2]
 8026d96:	ea4f 6819 	mov.w	r8, r9, lsr #24
 8026d9a:	3601      	adds	r6, #1
 8026d9c:	d41f      	bmi.n	8026dde <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8026d9e:	42b7      	cmp	r7, r6
 8026da0:	dd1d      	ble.n	8026dde <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x31a>
 8026da2:	b321      	cbz	r1, 8026dee <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x32a>
 8026da4:	4477      	add	r7, lr
 8026da6:	787e      	ldrb	r6, [r7, #1]
 8026da8:	f85a 6026 	ldr.w	r6, [sl, r6, lsl #2]
 8026dac:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8026db0:	e6c6      	b.n	8026b40 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 8026db2:	f04f 0c00 	mov.w	ip, #0
 8026db6:	4662      	mov	r2, ip
 8026db8:	e6b7      	b.n	8026b2a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8026dba:	290f      	cmp	r1, #15
 8026dbc:	d821      	bhi.n	8026e02 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x33e>
 8026dbe:	b289      	uxth	r1, r1
 8026dc0:	4682      	mov	sl, r0
 8026dc2:	4607      	mov	r7, r0
 8026dc4:	4683      	mov	fp, r0
 8026dc6:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8026dca:	4606      	mov	r6, r0
 8026dcc:	9001      	str	r0, [sp, #4]
 8026dce:	4686      	mov	lr, r0
 8026dd0:	4680      	mov	r8, r0
 8026dd2:	e6d1      	b.n	8026b78 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb4>
 8026dd4:	5d52      	ldrb	r2, [r2, r5]
 8026dd6:	f85a 4022 	ldr.w	r4, [sl, r2, lsl #2]
 8026dda:	0e25      	lsrs	r5, r4, #24
 8026ddc:	e7bf      	b.n	8026d5e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x29a>
 8026dde:	f04f 0e00 	mov.w	lr, #0
 8026de2:	4676      	mov	r6, lr
 8026de4:	e6ac      	b.n	8026b40 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x7c>
 8026de6:	f04f 0800 	mov.w	r8, #0
 8026dea:	46c1      	mov	r9, r8
 8026dec:	e7d5      	b.n	8026d9a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d6>
 8026dee:	460e      	mov	r6, r1
 8026df0:	468e      	mov	lr, r1
 8026df2:	e6a8      	b.n	8026b46 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8026df4:	460a      	mov	r2, r1
 8026df6:	460e      	mov	r6, r1
 8026df8:	4689      	mov	r9, r1
 8026dfa:	468e      	mov	lr, r1
 8026dfc:	4688      	mov	r8, r1
 8026dfe:	468c      	mov	ip, r1
 8026e00:	e6a1      	b.n	8026b46 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8026e02:	4b03      	ldr	r3, [pc, #12]	@ (8026e10 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x34c>)
 8026e04:	4a03      	ldr	r2, [pc, #12]	@ (8026e14 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x350>)
 8026e06:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8026e0a:	4803      	ldr	r0, [pc, #12]	@ (8026e18 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x354>)
 8026e0c:	f004 fed4 	bl	802bbb8 <__assert_func>
 8026e10:	0802ef50 	.word	0x0802ef50
 8026e14:	0802f5cc 	.word	0x0802f5cc
 8026e18:	0802f0d8 	.word	0x0802f0d8

08026e1c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e20:	ed2d 8b08 	vpush	{d8-d11}
 8026e24:	b0a9      	sub	sp, #164	@ 0xa4
 8026e26:	9c3f      	ldr	r4, [sp, #252]	@ 0xfc
 8026e28:	9022      	str	r0, [sp, #136]	@ 0x88
 8026e2a:	9115      	str	r1, [sp, #84]	@ 0x54
 8026e2c:	6860      	ldr	r0, [r4, #4]
 8026e2e:	9940      	ldr	r1, [sp, #256]	@ 0x100
 8026e30:	9219      	str	r2, [sp, #100]	@ 0x64
 8026e32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8026e34:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	@ 0xec
 8026e38:	fb00 1202 	mla	r2, r0, r2, r1
 8026e3c:	6820      	ldr	r0, [r4, #0]
 8026e3e:	46d1      	mov	r9, sl
 8026e40:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8026e44:	46da      	mov	sl, fp
 8026e46:	eeb0 aa40 	vmov.f32	s20, s0
 8026e4a:	eef0 9a60 	vmov.f32	s19, s1
 8026e4e:	eeb0 9a41 	vmov.f32	s18, s2
 8026e52:	eef0 8a62 	vmov.f32	s17, s5
 8026e56:	eeb0 8a43 	vmov.f32	s16, s6
 8026e5a:	eef0 ba44 	vmov.f32	s23, s8
 8026e5e:	eeb0 ba64 	vmov.f32	s22, s9
 8026e62:	eef0 aa45 	vmov.f32	s21, s10
 8026e66:	4693      	mov	fp, r2
 8026e68:	9942      	ldr	r1, [sp, #264]	@ 0x108
 8026e6a:	9d42      	ldr	r5, [sp, #264]	@ 0x108
 8026e6c:	6849      	ldr	r1, [r1, #4]
 8026e6e:	f89d 410c 	ldrb.w	r4, [sp, #268]	@ 0x10c
 8026e72:	3104      	adds	r1, #4
 8026e74:	682d      	ldr	r5, [r5, #0]
 8026e76:	910e      	str	r1, [sp, #56]	@ 0x38
 8026e78:	b2a1      	uxth	r1, r4
 8026e7a:	9423      	str	r4, [sp, #140]	@ 0x8c
 8026e7c:	9511      	str	r5, [sp, #68]	@ 0x44
 8026e7e:	9112      	str	r1, [sp, #72]	@ 0x48
 8026e80:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8026e82:	2a00      	cmp	r2, #0
 8026e84:	dc02      	bgt.n	8026e8c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026e86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8026e88:	2a00      	cmp	r2, #0
 8026e8a:	dd65      	ble.n	8026f58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8026e8c:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8026e8e:	2b00      	cmp	r3, #0
 8026e90:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8026e94:	b234      	sxth	r4, r6
 8026e96:	fa0f f78c 	sxth.w	r7, ip
 8026e9a:	f340 8396 	ble.w	80275ca <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ae>
 8026e9e:	1e65      	subs	r5, r4, #1
 8026ea0:	f107 3eff 	add.w	lr, r7, #4294967295
 8026ea4:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8026ea8:	e9dd c83d 	ldrd	ip, r8, [sp, #244]	@ 0xf4
 8026eac:	ea5f 422a 	movs.w	r2, sl, asr #16
 8026eb0:	ea4f 4129 	mov.w	r1, r9, asr #16
 8026eb4:	d405      	bmi.n	8026ec2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8026eb6:	42aa      	cmp	r2, r5
 8026eb8:	da03      	bge.n	8026ec2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8026eba:	2900      	cmp	r1, #0
 8026ebc:	db01      	blt.n	8026ec2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8026ebe:	4571      	cmp	r1, lr
 8026ec0:	db4f      	blt.n	8026f62 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8026ec2:	1c50      	adds	r0, r2, #1
 8026ec4:	d406      	bmi.n	8026ed4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026ec6:	42a0      	cmp	r0, r4
 8026ec8:	dc04      	bgt.n	8026ed4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026eca:	1c48      	adds	r0, r1, #1
 8026ecc:	d402      	bmi.n	8026ed4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026ece:	42b8      	cmp	r0, r7
 8026ed0:	f340 834f 	ble.w	8027572 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8026ed4:	3b01      	subs	r3, #1
 8026ed6:	44e2      	add	sl, ip
 8026ed8:	44c1      	add	r9, r8
 8026eda:	f10b 0b02 	add.w	fp, fp, #2
 8026ede:	d1e5      	bne.n	8026eac <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026ee0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	dd38      	ble.n	8026f58 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8026ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026eea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026eee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026ef2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026ef6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026efa:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8026efe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026f02:	ee76 6a68 	vsub.f32	s13, s12, s17
 8026f06:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8026f0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f0e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026f12:	ee16 2a90 	vmov	r2, s13
 8026f16:	3b01      	subs	r3, #1
 8026f18:	9315      	str	r3, [sp, #84]	@ 0x54
 8026f1a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8026f1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f20:	ee17 2a10 	vmov	r2, s14
 8026f24:	eeb0 7a48 	vmov.f32	s14, s16
 8026f28:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026f2c:	ee17 9a10 	vmov	r9, s14
 8026f30:	eeb0 7a68 	vmov.f32	s14, s17
 8026f34:	933d      	str	r3, [sp, #244]	@ 0xf4
 8026f36:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8026f38:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8026f3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8026f42:	933e      	str	r3, [sp, #248]	@ 0xf8
 8026f44:	ee17 aa10 	vmov	sl, s14
 8026f48:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8026f4a:	eeb0 8a67 	vmov.f32	s16, s15
 8026f4e:	eef0 8a46 	vmov.f32	s17, s12
 8026f52:	bf08      	it	eq
 8026f54:	4613      	moveq	r3, r2
 8026f56:	e793      	b.n	8026e80 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8026f58:	b029      	add	sp, #164	@ 0xa4
 8026f5a:	ecbd 8b08 	vpop	{d8-d11}
 8026f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f62:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8026f66:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8026f6a:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 8026f6c:	1e59      	subs	r1, r3, #1
 8026f6e:	fb00 a201 	mla	r2, r0, r1, sl
 8026f72:	1412      	asrs	r2, r2, #16
 8026f74:	910d      	str	r1, [sp, #52]	@ 0x34
 8026f76:	f100 8161 	bmi.w	802723c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026f7a:	42aa      	cmp	r2, r5
 8026f7c:	f280 815e 	bge.w	802723c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026f80:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8026f82:	fb02 9201 	mla	r2, r2, r1, r9
 8026f86:	1412      	asrs	r2, r2, #16
 8026f88:	f100 8158 	bmi.w	802723c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026f8c:	3f01      	subs	r7, #1
 8026f8e:	42ba      	cmp	r2, r7
 8026f90:	f280 8154 	bge.w	802723c <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026f94:	2b00      	cmp	r3, #0
 8026f96:	dda3      	ble.n	8026ee0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8026f98:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8026f9c:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8026fa0:	46d0      	mov	r8, sl
 8026fa2:	4621      	mov	r1, r4
 8026fa4:	e129      	b.n	80271fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8026fa6:	f893 c001 	ldrb.w	ip, [r3, #1]
 8026faa:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8026fae:	9513      	str	r5, [sp, #76]	@ 0x4c
 8026fb0:	0e2d      	lsrs	r5, r5, #24
 8026fb2:	950a      	str	r5, [sp, #40]	@ 0x28
 8026fb4:	b162      	cbz	r2, 8026fd0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026fb6:	185d      	adds	r5, r3, r1
 8026fb8:	786d      	ldrb	r5, [r5, #1]
 8026fba:	5c5b      	ldrb	r3, [r3, r1]
 8026fbc:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8026fc0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026fc4:	9116      	str	r1, [sp, #88]	@ 0x58
 8026fc6:	9314      	str	r3, [sp, #80]	@ 0x50
 8026fc8:	0e09      	lsrs	r1, r1, #24
 8026fca:	0e1b      	lsrs	r3, r3, #24
 8026fcc:	910c      	str	r1, [sp, #48]	@ 0x30
 8026fce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026fd0:	b2a4      	uxth	r4, r4
 8026fd2:	b292      	uxth	r2, r2
 8026fd4:	fb04 f502 	mul.w	r5, r4, r2
 8026fd8:	0124      	lsls	r4, r4, #4
 8026fda:	1b66      	subs	r6, r4, r5
 8026fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026fde:	b2b6      	uxth	r6, r6
 8026fe0:	fb06 f103 	mul.w	r1, r6, r3
 8026fe4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8026fe8:	b292      	uxth	r2, r2
 8026fea:	f5c4 7380 	rsb	r3, r4, #256	@ 0x100
 8026fee:	1a9b      	subs	r3, r3, r2
 8026ff0:	b29b      	uxth	r3, r3
 8026ff2:	fb03 1100 	mla	r1, r3, r0, r1
 8026ff6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026ff8:	fb02 1104 	mla	r1, r2, r4, r1
 8026ffc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026ffe:	fb05 1104 	mla	r1, r5, r4, r1
 8027002:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027006:	2900      	cmp	r1, #0
 8027008:	f000 80ea 	beq.w	80271e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c4>
 802700c:	f007 14ff 	and.w	r4, r7, #16711935	@ 0xff00ff
 8027010:	28ff      	cmp	r0, #255	@ 0xff
 8027012:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8027016:	940f      	str	r4, [sp, #60]	@ 0x3c
 8027018:	970d      	str	r7, [sp, #52]	@ 0x34
 802701a:	d01c      	beq.n	8027056 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802701c:	fb04 f400 	mul.w	r4, r4, r0
 8027020:	4627      	mov	r7, r4
 8027022:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027024:	fb04 fe00 	mul.w	lr, r4, r0
 8027028:	0a3c      	lsrs	r4, r7, #8
 802702a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802702e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027032:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 8027036:	4427      	add	r7, r4
 8027038:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 802703c:	0a3f      	lsrs	r7, r7, #8
 802703e:	0a00      	lsrs	r0, r0, #8
 8027040:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8027044:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027048:	4307      	orrs	r7, r0
 802704a:	f007 10ff 	and.w	r0, r7, #16711935	@ 0xff00ff
 802704e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8027050:	f407 407f 	and.w	r0, r7, #65280	@ 0xff00
 8027054:	900d      	str	r0, [sp, #52]	@ 0x34
 8027056:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8027058:	f000 1cff 	and.w	ip, r0, #16711935	@ 0xff00ff
 802705c:	f400 4e7f 	and.w	lr, r0, #65280	@ 0xff00
 8027060:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027062:	28ff      	cmp	r0, #255	@ 0xff
 8027064:	d01c      	beq.n	80270a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8027066:	fb0c fc00 	mul.w	ip, ip, r0
 802706a:	fb0e fe00 	mul.w	lr, lr, r0
 802706e:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8027072:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027076:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802707a:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 802707e:	44a4      	add	ip, r4
 8027080:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8027084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027088:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802708c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027090:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027094:	ea4c 0e0e 	orr.w	lr, ip, lr
 8027098:	f00e 1cff 	and.w	ip, lr, #16711935	@ 0xff00ff
 802709c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80270a0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80270a2:	f000 17ff 	and.w	r7, r0, #16711935	@ 0xff00ff
 80270a6:	f400 4a7f 	and.w	sl, r0, #65280	@ 0xff00
 80270aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80270ac:	28ff      	cmp	r0, #255	@ 0xff
 80270ae:	d01a      	beq.n	80270e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80270b0:	fb07 f700 	mul.w	r7, r7, r0
 80270b4:	fb0a fa00 	mul.w	sl, sl, r0
 80270b8:	0a3c      	lsrs	r4, r7, #8
 80270ba:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80270be:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80270c2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80270c6:	4427      	add	r7, r4
 80270c8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80270cc:	0a3f      	lsrs	r7, r7, #8
 80270ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270d2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80270d6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80270da:	ea47 0a0a 	orr.w	sl, r7, sl
 80270de:	f00a 17ff 	and.w	r7, sl, #16711935	@ 0xff00ff
 80270e2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80270e6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80270e8:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 80270ec:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80270f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80270f2:	2cff      	cmp	r4, #255	@ 0xff
 80270f4:	d01d      	beq.n	8027132 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80270f6:	fb00 f004 	mul.w	r0, r0, r4
 80270fa:	fb0b fb04 	mul.w	fp, fp, r4
 80270fe:	0a04      	lsrs	r4, r0, #8
 8027100:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027104:	9418      	str	r4, [sp, #96]	@ 0x60
 8027106:	f50b 7480 	add.w	r4, fp, #256	@ 0x100
 802710a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802710c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802710e:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8027112:	4420      	add	r0, r4
 8027114:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8027116:	0a00      	lsrs	r0, r0, #8
 8027118:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 802711c:	0a24      	lsrs	r4, r4, #8
 802711e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027122:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8027126:	ea40 0b0b 	orr.w	fp, r0, fp
 802712a:	f00b 10ff 	and.w	r0, fp, #16711935	@ 0xff00ff
 802712e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027132:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027134:	fb0c fc06 	mul.w	ip, ip, r6
 8027138:	fb01 f104 	mul.w	r1, r1, r4
 802713c:	1c4c      	adds	r4, r1, #1
 802713e:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8027142:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027146:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027148:	fb0e f606 	mul.w	r6, lr, r6
 802714c:	fb04 cc03 	mla	ip, r4, r3, ip
 8027150:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027152:	fb07 cc02 	mla	ip, r7, r2, ip
 8027156:	fb04 6603 	mla	r6, r4, r3, r6
 802715a:	fb0a 6602 	mla	r6, sl, r2, r6
 802715e:	fb00 cc05 	mla	ip, r0, r5, ip
 8027162:	fb0b 6605 	mla	r6, fp, r5, r6
 8027166:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802716a:	0a36      	lsrs	r6, r6, #8
 802716c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027170:	f406 437f 	and.w	r3, r6, #65280	@ 0xff00
 8027174:	ea4c 0303 	orr.w	r3, ip, r3
 8027178:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802717a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802717c:	0c1f      	lsrs	r7, r3, #16
 802717e:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8027182:	b2db      	uxtb	r3, r3
 8027184:	8805      	ldrh	r5, [r0, #0]
 8027186:	fb13 f302 	smulbb	r3, r3, r2
 802718a:	fb17 f702 	smulbb	r7, r7, r2
 802718e:	fb16 f602 	smulbb	r6, r6, r2
 8027192:	1228      	asrs	r0, r5, #8
 8027194:	10ea      	asrs	r2, r5, #3
 8027196:	00ed      	lsls	r5, r5, #3
 8027198:	b2c9      	uxtb	r1, r1
 802719a:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802719e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80271a2:	b2ed      	uxtb	r5, r5
 80271a4:	fb00 7001 	mla	r0, r0, r1, r7
 80271a8:	fb02 6201 	mla	r2, r2, r1, r6
 80271ac:	fb05 3101 	mla	r1, r5, r1, r3
 80271b0:	b280      	uxth	r0, r0
 80271b2:	b292      	uxth	r2, r2
 80271b4:	b289      	uxth	r1, r1
 80271b6:	1c43      	adds	r3, r0, #1
 80271b8:	1c4c      	adds	r4, r1, #1
 80271ba:	f102 0c01 	add.w	ip, r2, #1
 80271be:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80271c2:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 80271c6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80271ca:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80271ce:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80271d2:	0952      	lsrs	r2, r2, #5
 80271d4:	4308      	orrs	r0, r1
 80271d6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80271da:	4302      	orrs	r2, r0
 80271dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80271de:	8002      	strh	r2, [r0, #0]
 80271e0:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 80271e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80271e4:	4490      	add	r8, r2
 80271e6:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 80271e8:	3302      	adds	r3, #2
 80271ea:	4491      	add	r9, r2
 80271ec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80271ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80271f0:	4293      	cmp	r3, r2
 80271f2:	d021      	beq.n	8027238 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80271f4:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 80271f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80271fa:	ea4f 4228 	mov.w	r2, r8, asr #16
 80271fe:	ea4f 4329 	mov.w	r3, r9, asr #16
 8027202:	fb01 2303 	mla	r3, r1, r3, r2
 8027206:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027208:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 802720a:	5cc2      	ldrb	r2, [r0, r3]
 802720c:	f3c8 3403 	ubfx	r4, r8, #12, #4
 8027210:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8027214:	4403      	add	r3, r0
 8027216:	f3c9 3203 	ubfx	r2, r9, #12, #4
 802721a:	0e38      	lsrs	r0, r7, #24
 802721c:	2c00      	cmp	r4, #0
 802721e:	f47f aec2 	bne.w	8026fa6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027222:	2a00      	cmp	r2, #0
 8027224:	f43f aed4 	beq.w	8026fd0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8027228:	5c5b      	ldrb	r3, [r3, r1]
 802722a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802722c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8027230:	9314      	str	r3, [sp, #80]	@ 0x50
 8027232:	0e1b      	lsrs	r3, r3, #24
 8027234:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027236:	e6cb      	b.n	8026fd0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8027238:	4693      	mov	fp, r2
 802723a:	e651      	b.n	8026ee0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 802723c:	2b00      	cmp	r3, #0
 802723e:	f77f ae4f 	ble.w	8026ee0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8027242:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8027246:	ea4f 422a 	mov.w	r2, sl, asr #16
 802724a:	ea4f 4129 	mov.w	r1, r9, asr #16
 802724e:	2a00      	cmp	r2, #0
 8027250:	465f      	mov	r7, fp
 8027252:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8027256:	9c42      	ldr	r4, [sp, #264]	@ 0x108
 8027258:	e9dd 5b3d 	ldrd	r5, fp, [sp, #244]	@ 0xf4
 802725c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8027260:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8027264:	f2c0 815c 	blt.w	8027520 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027268:	1e73      	subs	r3, r6, #1
 802726a:	429a      	cmp	r2, r3
 802726c:	f280 8158 	bge.w	8027520 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027270:	2900      	cmp	r1, #0
 8027272:	f2c0 8155 	blt.w	8027520 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027276:	f10c 33ff 	add.w	r3, ip, #4294967295
 802727a:	4299      	cmp	r1, r3
 802727c:	f280 8150 	bge.w	8027520 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8027280:	b233      	sxth	r3, r6
 8027282:	fb01 2203 	mla	r2, r1, r3, r2
 8027286:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8027288:	930f      	str	r3, [sp, #60]	@ 0x3c
 802728a:	5c8b      	ldrb	r3, [r1, r2]
 802728c:	440a      	add	r2, r1
 802728e:	4616      	mov	r6, r2
 8027290:	9210      	str	r2, [sp, #64]	@ 0x40
 8027292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027294:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8027298:	0e0b      	lsrs	r3, r1, #24
 802729a:	2800      	cmp	r0, #0
 802729c:	f000 816f 	beq.w	802757e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x762>
 80272a0:	f896 c001 	ldrb.w	ip, [r6, #1]
 80272a4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80272a8:	9224      	str	r2, [sp, #144]	@ 0x90
 80272aa:	0e12      	lsrs	r2, r2, #24
 80272ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80272ae:	f1be 0f00 	cmp.w	lr, #0
 80272b2:	f040 8172 	bne.w	802759a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80272b6:	b280      	uxth	r0, r0
 80272b8:	fa1f fc8e 	uxth.w	ip, lr
 80272bc:	fb00 f20c 	mul.w	r2, r0, ip
 80272c0:	0106      	lsls	r6, r0, #4
 80272c2:	1ab0      	subs	r0, r6, r2
 80272c4:	b280      	uxth	r0, r0
 80272c6:	4686      	mov	lr, r0
 80272c8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80272ca:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80272cc:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 80272d0:	fb0e f000 	mul.w	r0, lr, r0
 80272d4:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 80272d8:	fa1f fe8c 	uxth.w	lr, ip
 80272dc:	eba6 060e 	sub.w	r6, r6, lr
 80272e0:	b2b6      	uxth	r6, r6
 80272e2:	fb06 0003 	mla	r0, r6, r3, r0
 80272e6:	9610      	str	r6, [sp, #64]	@ 0x40
 80272e8:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80272ea:	fb0e 0006 	mla	r0, lr, r6, r0
 80272ee:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80272f0:	fb02 0006 	mla	r0, r2, r6, r0
 80272f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80272f8:	9017      	str	r0, [sp, #92]	@ 0x5c
 80272fa:	2800      	cmp	r0, #0
 80272fc:	f000 80fa 	beq.w	80274f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8027300:	f001 10ff 	and.w	r0, r1, #16711935	@ 0xff00ff
 8027304:	2bff      	cmp	r3, #255	@ 0xff
 8027306:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802730a:	9018      	str	r0, [sp, #96]	@ 0x60
 802730c:	911d      	str	r1, [sp, #116]	@ 0x74
 802730e:	d01b      	beq.n	8027348 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52c>
 8027310:	fb01 f103 	mul.w	r1, r1, r3
 8027314:	fb00 f003 	mul.w	r0, r0, r3
 8027318:	460b      	mov	r3, r1
 802731a:	0a01      	lsrs	r1, r0, #8
 802731c:	f100 1601 	add.w	r6, r0, #65537	@ 0x10001
 8027320:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027324:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8027328:	4431      	add	r1, r6
 802732a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802732e:	0a09      	lsrs	r1, r1, #8
 8027330:	0a1b      	lsrs	r3, r3, #8
 8027332:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027336:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802733a:	430b      	orrs	r3, r1
 802733c:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 8027340:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027344:	9118      	str	r1, [sp, #96]	@ 0x60
 8027346:	931d      	str	r3, [sp, #116]	@ 0x74
 8027348:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802734a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802734c:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 8027350:	2eff      	cmp	r6, #255	@ 0xff
 8027352:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8027356:	931e      	str	r3, [sp, #120]	@ 0x78
 8027358:	911f      	str	r1, [sp, #124]	@ 0x7c
 802735a:	d01b      	beq.n	8027394 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x578>
 802735c:	fb01 f106 	mul.w	r1, r1, r6
 8027360:	fb03 f306 	mul.w	r3, r3, r6
 8027364:	460e      	mov	r6, r1
 8027366:	0a19      	lsrs	r1, r3, #8
 8027368:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 802736c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027370:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8027374:	4401      	add	r1, r0
 8027376:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802737a:	0a09      	lsrs	r1, r1, #8
 802737c:	0a1b      	lsrs	r3, r3, #8
 802737e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027382:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027386:	4319      	orrs	r1, r3
 8027388:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802738c:	931e      	str	r3, [sp, #120]	@ 0x78
 802738e:	f401 437f 	and.w	r3, r1, #65280	@ 0xff00
 8027392:	931f      	str	r3, [sp, #124]	@ 0x7c
 8027394:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027396:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 802739a:	f403 4c7f 	and.w	ip, r3, #65280	@ 0xff00
 802739e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80273a0:	9120      	str	r1, [sp, #128]	@ 0x80
 80273a2:	2bff      	cmp	r3, #255	@ 0xff
 80273a4:	d01c      	beq.n	80273e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80273a6:	fb01 f103 	mul.w	r1, r1, r3
 80273aa:	4608      	mov	r0, r1
 80273ac:	fb0c fc03 	mul.w	ip, ip, r3
 80273b0:	0a09      	lsrs	r1, r1, #8
 80273b2:	f50c 7380 	add.w	r3, ip, #256	@ 0x100
 80273b6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80273ba:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 80273be:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80273c2:	4408      	add	r0, r1
 80273c4:	0a00      	lsrs	r0, r0, #8
 80273c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273ca:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80273ce:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80273d2:	ea40 0c0c 	orr.w	ip, r0, ip
 80273d6:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80273da:	9320      	str	r3, [sp, #128]	@ 0x80
 80273dc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80273e0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80273e2:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 80273e6:	f401 467f 	and.w	r6, r1, #65280	@ 0xff00
 80273ea:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80273ec:	9321      	str	r3, [sp, #132]	@ 0x84
 80273ee:	29ff      	cmp	r1, #255	@ 0xff
 80273f0:	d019      	beq.n	8027426 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 80273f2:	fb03 f301 	mul.w	r3, r3, r1
 80273f6:	fb06 f601 	mul.w	r6, r6, r1
 80273fa:	0a19      	lsrs	r1, r3, #8
 80273fc:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027400:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8027404:	f506 7080 	add.w	r0, r6, #256	@ 0x100
 8027408:	4419      	add	r1, r3
 802740a:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 802740e:	0a09      	lsrs	r1, r1, #8
 8027410:	0a36      	lsrs	r6, r6, #8
 8027412:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8027416:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802741a:	430e      	orrs	r6, r1
 802741c:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8027420:	9321      	str	r3, [sp, #132]	@ 0x84
 8027422:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8027426:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8027428:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802742a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802742c:	fb00 f001 	mul.w	r0, r0, r1
 8027430:	4601      	mov	r1, r0
 8027432:	3001      	adds	r0, #1
 8027434:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8027438:	ea6f 2011 	mvn.w	r0, r1, lsr #8
 802743c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802743e:	9025      	str	r0, [sp, #148]	@ 0x94
 8027440:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8027442:	fb00 f001 	mul.w	r0, r0, r1
 8027446:	900f      	str	r0, [sp, #60]	@ 0x3c
 8027448:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802744a:	fb00 f001 	mul.w	r0, r0, r1
 802744e:	9017      	str	r0, [sp, #92]	@ 0x5c
 8027450:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8027452:	4601      	mov	r1, r0
 8027454:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8027456:	fb01 0003 	mla	r0, r1, r3, r0
 802745a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802745c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802745e:	4601      	mov	r1, r0
 8027460:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8027462:	fb01 0103 	mla	r1, r1, r3, r0
 8027466:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027468:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802746a:	fb0c 110e 	mla	r1, ip, lr, r1
 802746e:	fb03 000e 	mla	r0, r3, lr, r0
 8027472:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027474:	f89d e094 	ldrb.w	lr, [sp, #148]	@ 0x94
 8027478:	fb03 0002 	mla	r0, r3, r2, r0
 802747c:	fb06 1302 	mla	r3, r6, r2, r1
 8027480:	0a02      	lsrs	r2, r0, #8
 8027482:	0a1b      	lsrs	r3, r3, #8
 8027484:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027488:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802748c:	4313      	orrs	r3, r2
 802748e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8027490:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8027494:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8027498:	b2db      	uxtb	r3, r3
 802749a:	8838      	ldrh	r0, [r7, #0]
 802749c:	fb16 f602 	smulbb	r6, r6, r2
 80274a0:	fb1c fc02 	smulbb	ip, ip, r2
 80274a4:	fb13 f302 	smulbb	r3, r3, r2
 80274a8:	1201      	asrs	r1, r0, #8
 80274aa:	10c2      	asrs	r2, r0, #3
 80274ac:	00c0      	lsls	r0, r0, #3
 80274ae:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80274b2:	b2c0      	uxtb	r0, r0
 80274b4:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80274b8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80274bc:	fb02 620e 	mla	r2, r2, lr, r6
 80274c0:	fb00 330e 	mla	r3, r0, lr, r3
 80274c4:	b296      	uxth	r6, r2
 80274c6:	b29b      	uxth	r3, r3
 80274c8:	fa1f fc8c 	uxth.w	ip, ip
 80274cc:	1c58      	adds	r0, r3, #1
 80274ce:	f10c 0201 	add.w	r2, ip, #1
 80274d2:	1c71      	adds	r1, r6, #1
 80274d4:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 80274d8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80274dc:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80274e0:	f402 4378 	and.w	r3, r2, #63488	@ 0xf800
 80274e4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80274e8:	094a      	lsrs	r2, r1, #5
 80274ea:	4303      	orrs	r3, r0
 80274ec:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80274f0:	4313      	orrs	r3, r2
 80274f2:	803b      	strh	r3, [r7, #0]
 80274f4:	f1b8 0f00 	cmp.w	r8, #0
 80274f8:	f107 0702 	add.w	r7, r7, #2
 80274fc:	44aa      	add	sl, r5
 80274fe:	44d9      	add	r9, fp
 8027500:	dd2e      	ble.n	8027560 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8027502:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8027506:	ea4f 422a 	mov.w	r2, sl, asr #16
 802750a:	2a00      	cmp	r2, #0
 802750c:	f108 38ff 	add.w	r8, r8, #4294967295
 8027510:	ea4f 4129 	mov.w	r1, r9, asr #16
 8027514:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8027518:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 802751c:	f6bf aea4 	bge.w	8027268 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8027520:	1c53      	adds	r3, r2, #1
 8027522:	d4e7      	bmi.n	80274f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8027524:	42b3      	cmp	r3, r6
 8027526:	dce5      	bgt.n	80274f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8027528:	1c4b      	adds	r3, r1, #1
 802752a:	d4e3      	bmi.n	80274f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 802752c:	4563      	cmp	r3, ip
 802752e:	dce1      	bgt.n	80274f4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d8>
 8027530:	fa0f f38c 	sxth.w	r3, ip
 8027534:	b236      	sxth	r6, r6
 8027536:	e9cd 6300 	strd	r6, r3, [sp]
 802753a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802753c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027540:	e9cd e305 	strd	lr, r3, [sp, #20]
 8027544:	9202      	str	r2, [sp, #8]
 8027546:	4639      	mov	r1, r7
 8027548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802754a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802754c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 802754e:	f7ff fab9 	bl	8026ac4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8027552:	f1b8 0f00 	cmp.w	r8, #0
 8027556:	f107 0702 	add.w	r7, r7, #2
 802755a:	44aa      	add	sl, r5
 802755c:	44d9      	add	r9, fp
 802755e:	dcd0      	bgt.n	8027502 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e6>
 8027560:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027562:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8027566:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802756a:	3301      	adds	r3, #1
 802756c:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8027570:	e4b6      	b.n	8026ee0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8027572:	3b01      	subs	r3, #1
 8027574:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8027578:	930d      	str	r3, [sp, #52]	@ 0x34
 802757a:	4698      	mov	r8, r3
 802757c:	e667      	b.n	802724e <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 802757e:	f1be 0f00 	cmp.w	lr, #0
 8027582:	f43f ae98 	beq.w	80272b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8027586:	4632      	mov	r2, r6
 8027588:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 802758a:	5d92      	ldrb	r2, [r2, r6]
 802758c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 802758e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8027592:	9226      	str	r2, [sp, #152]	@ 0x98
 8027594:	0e12      	lsrs	r2, r2, #24
 8027596:	921b      	str	r2, [sp, #108]	@ 0x6c
 8027598:	e68d      	b.n	80272b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802759a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802759c:	eb06 0c02 	add.w	ip, r6, r2
 80275a0:	4632      	mov	r2, r6
 80275a2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80275a4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80275a8:	5d92      	ldrb	r2, [r2, r6]
 80275aa:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80275ac:	9210      	str	r2, [sp, #64]	@ 0x40
 80275ae:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 80275b2:	920f      	str	r2, [sp, #60]	@ 0x3c
 80275b4:	9227      	str	r2, [sp, #156]	@ 0x9c
 80275b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80275b8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80275bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80275be:	9626      	str	r6, [sp, #152]	@ 0x98
 80275c0:	0e12      	lsrs	r2, r2, #24
 80275c2:	921c      	str	r2, [sp, #112]	@ 0x70
 80275c4:	0e32      	lsrs	r2, r6, #24
 80275c6:	921b      	str	r2, [sp, #108]	@ 0x6c
 80275c8:	e675      	b.n	80272b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 80275ca:	f43f ac89 	beq.w	8026ee0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80275ce:	1e65      	subs	r5, r4, #1
 80275d0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80275d4:	e4c9      	b.n	8026f6a <_ZN8touchgfx8LCDGPU2D66TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80275d6:	bf00      	nop

080275d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80275d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275dc:	b089      	sub	sp, #36	@ 0x24
 80275de:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	@ 0x48
 80275e2:	880f      	ldrh	r7, [r1, #0]
 80275e4:	e9dd 5014 	ldrd	r5, r0, [sp, #80]	@ 0x50
 80275e8:	fb00 5408 	mla	r4, r0, r8, r5
 80275ec:	9106      	str	r1, [sp, #24]
 80275ee:	10f9      	asrs	r1, r7, #3
 80275f0:	123e      	asrs	r6, r7, #8
 80275f2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80275f6:	00ff      	lsls	r7, r7, #3
 80275f8:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80275fc:	9104      	str	r1, [sp, #16]
 80275fe:	2800      	cmp	r0, #0
 8027600:	b2f9      	uxtb	r1, r7
 8027602:	9105      	str	r1, [sp, #20]
 8027604:	9603      	str	r6, [sp, #12]
 8027606:	eb02 0704 	add.w	r7, r2, r4
 802760a:	f100 0c01 	add.w	ip, r0, #1
 802760e:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	@ 0x4c
 8027612:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8027616:	f89d 105c 	ldrb.w	r1, [sp, #92]	@ 0x5c
 802761a:	db02      	blt.n	8027622 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x4a>
 802761c:	4582      	cmp	sl, r0
 802761e:	f300 8113 	bgt.w	8027848 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8027622:	2600      	movs	r6, #0
 8027624:	46b1      	mov	r9, r6
 8027626:	4630      	mov	r0, r6
 8027628:	4634      	mov	r4, r6
 802762a:	f1bc 0f00 	cmp.w	ip, #0
 802762e:	db02      	blt.n	8027636 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5e>
 8027630:	45e2      	cmp	sl, ip
 8027632:	f300 8123 	bgt.w	802787c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>
 8027636:	2700      	movs	r7, #0
 8027638:	46bc      	mov	ip, r7
 802763a:	463d      	mov	r5, r7
 802763c:	9702      	str	r7, [sp, #8]
 802763e:	f1be 0f0f 	cmp.w	lr, #15
 8027642:	f200 8160 	bhi.w	8027906 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 8027646:	290f      	cmp	r1, #15
 8027648:	f200 815d 	bhi.w	8027906 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 802764c:	b289      	uxth	r1, r1
 802764e:	fa1f f38e 	uxth.w	r3, lr
 8027652:	fb01 f803 	mul.w	r8, r1, r3
 8027656:	f005 12ff 	and.w	r2, r5, #16711935	@ 0xff00ff
 802765a:	9200      	str	r2, [sp, #0]
 802765c:	9a02      	ldr	r2, [sp, #8]
 802765e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8027662:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027666:	b289      	uxth	r1, r1
 8027668:	9201      	str	r2, [sp, #4]
 802766a:	fb01 fa0c 	mul.w	sl, r1, ip
 802766e:	9a02      	ldr	r2, [sp, #8]
 8027670:	fb08 fb07 	mul.w	fp, r8, r7
 8027674:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027678:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802767c:	9202      	str	r2, [sp, #8]
 802767e:	011b      	lsls	r3, r3, #4
 8027680:	eba3 0e08 	sub.w	lr, r3, r8
 8027684:	fa1f fe8e 	uxth.w	lr, lr
 8027688:	fb0e f206 	mul.w	r2, lr, r6
 802768c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8027690:	1a5b      	subs	r3, r3, r1
 8027692:	b29b      	uxth	r3, r3
 8027694:	fb03 2209 	mla	r2, r3, r9, r2
 8027698:	4452      	add	r2, sl
 802769a:	445a      	add	r2, fp
 802769c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80276a0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80276a4:	9207      	str	r2, [sp, #28]
 80276a6:	f004 12ff 	and.w	r2, r4, #16711935	@ 0xff00ff
 80276aa:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80276ae:	d019      	beq.n	80276e4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x10c>
 80276b0:	fb02 f209 	mul.w	r2, r2, r9
 80276b4:	fb04 f409 	mul.w	r4, r4, r9
 80276b8:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80276bc:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80276c0:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 80276c4:	f504 7a80 	add.w	sl, r4, #256	@ 0x100
 80276c8:	445a      	add	r2, fp
 80276ca:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80276ce:	0a12      	lsrs	r2, r2, #8
 80276d0:	0a24      	lsrs	r4, r4, #8
 80276d2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80276d6:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80276da:	4314      	orrs	r4, r2
 80276dc:	f004 12ff 	and.w	r2, r4, #16711935	@ 0xff00ff
 80276e0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80276e4:	2eff      	cmp	r6, #255	@ 0xff
 80276e6:	f000 1aff 	and.w	sl, r0, #16711935	@ 0xff00ff
 80276ea:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80276ee:	d01b      	beq.n	8027728 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 80276f0:	fb0a fa06 	mul.w	sl, sl, r6
 80276f4:	fb00 f006 	mul.w	r0, r0, r6
 80276f8:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80276fc:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8027700:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027704:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 8027708:	44da      	add	sl, fp
 802770a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 802770e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027712:	0a00      	lsrs	r0, r0, #8
 8027714:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 8027718:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802771c:	ea4a 0000 	orr.w	r0, sl, r0
 8027720:	f000 1aff 	and.w	sl, r0, #16711935	@ 0xff00ff
 8027724:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8027728:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802772c:	d020      	beq.n	8027770 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x198>
 802772e:	9e01      	ldr	r6, [sp, #4]
 8027730:	fb06 fb0c 	mul.w	fp, r6, ip
 8027734:	9e02      	ldr	r6, [sp, #8]
 8027736:	ea4f 291b 	mov.w	r9, fp, lsr #8
 802773a:	fb06 fc0c 	mul.w	ip, r6, ip
 802773e:	f009 19ff 	and.w	r9, r9, #16711935	@ 0xff00ff
 8027742:	f50c 7680 	add.w	r6, ip, #256	@ 0x100
 8027746:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802774a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802774e:	44cb      	add	fp, r9
 8027750:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027754:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027758:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802775c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027760:	ea4b 0c0c 	orr.w	ip, fp, ip
 8027764:	f00c 16ff 	and.w	r6, ip, #16711935	@ 0xff00ff
 8027768:	9601      	str	r6, [sp, #4]
 802776a:	f40c 467f 	and.w	r6, ip, #65280	@ 0xff00
 802776e:	9602      	str	r6, [sp, #8]
 8027770:	2fff      	cmp	r7, #255	@ 0xff
 8027772:	d01d      	beq.n	80277b0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d8>
 8027774:	9e00      	ldr	r6, [sp, #0]
 8027776:	fb05 f507 	mul.w	r5, r5, r7
 802777a:	fb06 fb07 	mul.w	fp, r6, r7
 802777e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8027782:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8027786:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802778a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802778e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8027792:	44e3      	add	fp, ip
 8027794:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027798:	0a2d      	lsrs	r5, r5, #8
 802779a:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802779e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80277a2:	ea4b 0505 	orr.w	r5, fp, r5
 80277a6:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80277aa:	9600      	str	r6, [sp, #0]
 80277ac:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80277b0:	9e07      	ldr	r6, [sp, #28]
 80277b2:	fb0a fa0e 	mul.w	sl, sl, lr
 80277b6:	43f7      	mvns	r7, r6
 80277b8:	fb00 f00e 	mul.w	r0, r0, lr
 80277bc:	fb02 aa03 	mla	sl, r2, r3, sl
 80277c0:	fb04 0003 	mla	r0, r4, r3, r0
 80277c4:	9b01      	ldr	r3, [sp, #4]
 80277c6:	b2ff      	uxtb	r7, r7
 80277c8:	fb03 aa01 	mla	sl, r3, r1, sl
 80277cc:	9b02      	ldr	r3, [sp, #8]
 80277ce:	fb03 0c01 	mla	ip, r3, r1, r0
 80277d2:	9b00      	ldr	r3, [sp, #0]
 80277d4:	9803      	ldr	r0, [sp, #12]
 80277d6:	fb03 aa08 	mla	sl, r3, r8, sl
 80277da:	9b05      	ldr	r3, [sp, #20]
 80277dc:	9904      	ldr	r1, [sp, #16]
 80277de:	fb03 f307 	mul.w	r3, r3, r7
 80277e2:	fb00 f007 	mul.w	r0, r0, r7
 80277e6:	fb01 f107 	mul.w	r1, r1, r7
 80277ea:	461f      	mov	r7, r3
 80277ec:	fb05 c808 	mla	r8, r5, r8, ip
 80277f0:	ea4f 251a 	mov.w	r5, sl, lsr #8
 80277f4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80277f8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80277fc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8027800:	ea45 0508 	orr.w	r5, r5, r8
 8027804:	f100 0c01 	add.w	ip, r0, #1
 8027808:	1c4e      	adds	r6, r1, #1
 802780a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802780e:	0c2c      	lsrs	r4, r5, #16
 8027810:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8027814:	1c78      	adds	r0, r7, #1
 8027816:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802781a:	4b3e      	ldr	r3, [pc, #248]	@ (8027914 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x33c>)
 802781c:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8027820:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8027824:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8027828:	b2ed      	uxtb	r5, r5
 802782a:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 802782e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8027832:	00d2      	lsls	r2, r2, #3
 8027834:	ea43 05d5 	orr.w	r5, r3, r5, lsr #3
 8027838:	f402 63fc 	and.w	r3, r2, #2016	@ 0x7e0
 802783c:	431d      	orrs	r5, r3
 802783e:	9b06      	ldr	r3, [sp, #24]
 8027840:	801d      	strh	r5, [r3, #0]
 8027842:	b009      	add	sp, #36	@ 0x24
 8027844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027848:	2d00      	cmp	r5, #0
 802784a:	db01      	blt.n	8027850 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x278>
 802784c:	45a8      	cmp	r8, r5
 802784e:	dc41      	bgt.n	80278d4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2fc>
 8027850:	f04f 0900 	mov.w	r9, #0
 8027854:	464c      	mov	r4, r9
 8027856:	1c6a      	adds	r2, r5, #1
 8027858:	d42a      	bmi.n	80278b0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 802785a:	4590      	cmp	r8, r2
 802785c:	dd28      	ble.n	80278b0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2d8>
 802785e:	f1be 0f00 	cmp.w	lr, #0
 8027862:	d004      	beq.n	802786e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x296>
 8027864:	787a      	ldrb	r2, [r7, #1]
 8027866:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802786a:	0e06      	lsrs	r6, r0, #24
 802786c:	e6dd      	b.n	802762a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 802786e:	f1bc 0f00 	cmp.w	ip, #0
 8027872:	db40      	blt.n	80278f6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8027874:	45e2      	cmp	sl, ip
 8027876:	dd3e      	ble.n	80278f6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x31e>
 8027878:	4676      	mov	r6, lr
 802787a:	4670      	mov	r0, lr
 802787c:	b1d9      	cbz	r1, 80278b6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2de>
 802787e:	2d00      	cmp	r5, #0
 8027880:	db31      	blt.n	80278e6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8027882:	45a8      	cmp	r8, r5
 8027884:	dd2f      	ble.n	80278e6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x30e>
 8027886:	f817 2008 	ldrb.w	r2, [r7, r8]
 802788a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802788e:	9202      	str	r2, [sp, #8]
 8027890:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8027894:	3501      	adds	r5, #1
 8027896:	d423      	bmi.n	80278e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 8027898:	45a8      	cmp	r8, r5
 802789a:	dd21      	ble.n	80278e0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x308>
 802789c:	f1be 0f00 	cmp.w	lr, #0
 80278a0:	d026      	beq.n	80278f0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x318>
 80278a2:	44b8      	add	r8, r7
 80278a4:	f898 5001 	ldrb.w	r5, [r8, #1]
 80278a8:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 80278ac:	0e2f      	lsrs	r7, r5, #24
 80278ae:	e6c6      	b.n	802763e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 80278b0:	2600      	movs	r6, #0
 80278b2:	4630      	mov	r0, r6
 80278b4:	e6b9      	b.n	802762a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x52>
 80278b6:	f1be 0f0f 	cmp.w	lr, #15
 80278ba:	d824      	bhi.n	8027906 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x32e>
 80278bc:	fa1f f38e 	uxth.w	r3, lr
 80278c0:	4688      	mov	r8, r1
 80278c2:	468b      	mov	fp, r1
 80278c4:	468a      	mov	sl, r1
 80278c6:	e9cd 1101 	strd	r1, r1, [sp, #4]
 80278ca:	460d      	mov	r5, r1
 80278cc:	9100      	str	r1, [sp, #0]
 80278ce:	460f      	mov	r7, r1
 80278d0:	468c      	mov	ip, r1
 80278d2:	e6d4      	b.n	802767e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 80278d4:	5d12      	ldrb	r2, [r2, r4]
 80278d6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80278da:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80278de:	e7ba      	b.n	8027856 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27e>
 80278e0:	2700      	movs	r7, #0
 80278e2:	463d      	mov	r5, r7
 80278e4:	e6ab      	b.n	802763e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 80278e6:	f04f 0c00 	mov.w	ip, #0
 80278ea:	f8cd c008 	str.w	ip, [sp, #8]
 80278ee:	e7d1      	b.n	8027894 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2bc>
 80278f0:	4675      	mov	r5, lr
 80278f2:	4677      	mov	r7, lr
 80278f4:	e6a7      	b.n	8027646 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 80278f6:	4670      	mov	r0, lr
 80278f8:	4675      	mov	r5, lr
 80278fa:	f8cd e008 	str.w	lr, [sp, #8]
 80278fe:	4677      	mov	r7, lr
 8027900:	46f4      	mov	ip, lr
 8027902:	4676      	mov	r6, lr
 8027904:	e69f      	b.n	8027646 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6e>
 8027906:	4b04      	ldr	r3, [pc, #16]	@ (8027918 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x340>)
 8027908:	4a04      	ldr	r2, [pc, #16]	@ (802791c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x344>)
 802790a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 802790e:	4804      	ldr	r0, [pc, #16]	@ (8027920 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x348>)
 8027910:	f004 f952 	bl	802bbb8 <__assert_func>
 8027914:	fffff800 	.word	0xfffff800
 8027918:	0802ef50 	.word	0x0802ef50
 802791c:	0802f5cc 	.word	0x0802f5cc
 8027920:	0802f0d8 	.word	0x0802f0d8

08027924 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027928:	ed2d 8b08 	vpush	{d8-d11}
 802792c:	b0a3      	sub	sp, #140	@ 0x8c
 802792e:	901e      	str	r0, [sp, #120]	@ 0x78
 8027930:	9111      	str	r1, [sp, #68]	@ 0x44
 8027932:	9215      	str	r2, [sp, #84]	@ 0x54
 8027934:	e9dd 4139 	ldrd	r4, r1, [sp, #228]	@ 0xe4
 8027938:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 802793a:	6860      	ldr	r0, [r4, #4]
 802793c:	e9dd 8b35 	ldrd	r8, fp, [sp, #212]	@ 0xd4
 8027940:	fb00 1202 	mla	r2, r0, r2, r1
 8027944:	6820      	ldr	r0, [r4, #0]
 8027946:	46c1      	mov	r9, r8
 8027948:	eb00 0a42 	add.w	sl, r0, r2, lsl #1
 802794c:	46d8      	mov	r8, fp
 802794e:	eeb0 aa40 	vmov.f32	s20, s0
 8027952:	eef0 9a60 	vmov.f32	s19, s1
 8027956:	eeb0 9a41 	vmov.f32	s18, s2
 802795a:	eef0 8a62 	vmov.f32	s17, s5
 802795e:	eeb0 8a43 	vmov.f32	s16, s6
 8027962:	eef0 ba44 	vmov.f32	s23, s8
 8027966:	eeb0 ba64 	vmov.f32	s22, s9
 802796a:	eef0 aa45 	vmov.f32	s21, s10
 802796e:	46d3      	mov	fp, sl
 8027970:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 8027972:	9c3c      	ldr	r4, [sp, #240]	@ 0xf0
 8027974:	6849      	ldr	r1, [r1, #4]
 8027976:	6824      	ldr	r4, [r4, #0]
 8027978:	1d0a      	adds	r2, r1, #4
 802797a:	940e      	str	r4, [sp, #56]	@ 0x38
 802797c:	920b      	str	r2, [sp, #44]	@ 0x2c
 802797e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027980:	2a00      	cmp	r2, #0
 8027982:	dc02      	bgt.n	802798a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027984:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8027986:	2a00      	cmp	r2, #0
 8027988:	dd65      	ble.n	8027a56 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 802798a:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 802798c:	2b00      	cmp	r3, #0
 802798e:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8027992:	b234      	sxth	r4, r6
 8027994:	fa0f f78c 	sxth.w	r7, ip
 8027998:	f340 836d 	ble.w	8028076 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 802799c:	1e65      	subs	r5, r4, #1
 802799e:	f107 3eff 	add.w	lr, r7, #4294967295
 80279a2:	f8cd c01c 	str.w	ip, [sp, #28]
 80279a6:	e9dd ca37 	ldrd	ip, sl, [sp, #220]	@ 0xdc
 80279aa:	ea5f 4229 	movs.w	r2, r9, asr #16
 80279ae:	ea4f 4128 	mov.w	r1, r8, asr #16
 80279b2:	d405      	bmi.n	80279c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80279b4:	42aa      	cmp	r2, r5
 80279b6:	da03      	bge.n	80279c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80279b8:	2900      	cmp	r1, #0
 80279ba:	db01      	blt.n	80279c0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80279bc:	4571      	cmp	r1, lr
 80279be:	db4f      	blt.n	8027a60 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80279c0:	1c50      	adds	r0, r2, #1
 80279c2:	d406      	bmi.n	80279d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80279c4:	42a0      	cmp	r0, r4
 80279c6:	dc04      	bgt.n	80279d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80279c8:	1c48      	adds	r0, r1, #1
 80279ca:	d402      	bmi.n	80279d2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80279cc:	42b8      	cmp	r0, r7
 80279ce:	f340 832f 	ble.w	8028030 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 80279d2:	3b01      	subs	r3, #1
 80279d4:	44e1      	add	r9, ip
 80279d6:	44d0      	add	r8, sl
 80279d8:	f10b 0b02 	add.w	fp, fp, #2
 80279dc:	d1e5      	bne.n	80279aa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80279de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80279e0:	2b00      	cmp	r3, #0
 80279e2:	dd38      	ble.n	8027a56 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80279e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80279e8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80279ec:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80279f0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80279f4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80279f8:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80279fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027a00:	ee76 6a68 	vsub.f32	s13, s12, s17
 8027a04:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8027a08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027a0c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027a10:	ee16 2a90 	vmov	r2, s13
 8027a14:	3b01      	subs	r3, #1
 8027a16:	9311      	str	r3, [sp, #68]	@ 0x44
 8027a18:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8027a1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a1e:	ee17 2a10 	vmov	r2, s14
 8027a22:	eeb0 7a48 	vmov.f32	s14, s16
 8027a26:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027a2a:	ee17 8a10 	vmov	r8, s14
 8027a2e:	eeb0 7a68 	vmov.f32	s14, s17
 8027a32:	9337      	str	r3, [sp, #220]	@ 0xdc
 8027a34:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8027a36:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8027a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8027a40:	9338      	str	r3, [sp, #224]	@ 0xe0
 8027a42:	ee17 9a10 	vmov	r9, s14
 8027a46:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8027a48:	eeb0 8a67 	vmov.f32	s16, s15
 8027a4c:	eef0 8a46 	vmov.f32	s17, s12
 8027a50:	bf08      	it	eq
 8027a52:	4613      	moveq	r3, r2
 8027a54:	e793      	b.n	802797e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8027a56:	b023      	add	sp, #140	@ 0x8c
 8027a58:	ecbd 8b08 	vpop	{d8-d11}
 8027a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a60:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8027a64:	f8cd b01c 	str.w	fp, [sp, #28]
 8027a68:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8027a6a:	1e59      	subs	r1, r3, #1
 8027a6c:	fb00 9201 	mla	r2, r0, r1, r9
 8027a70:	1412      	asrs	r2, r2, #16
 8027a72:	910c      	str	r1, [sp, #48]	@ 0x30
 8027a74:	f100 815e 	bmi.w	8027d34 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8027a78:	42aa      	cmp	r2, r5
 8027a7a:	f280 815b 	bge.w	8027d34 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8027a7e:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8027a80:	fb02 8201 	mla	r2, r2, r1, r8
 8027a84:	1412      	asrs	r2, r2, #16
 8027a86:	f100 8155 	bmi.w	8027d34 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8027a8a:	3f01      	subs	r7, #1
 8027a8c:	42ba      	cmp	r2, r7
 8027a8e:	f280 8151 	bge.w	8027d34 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8027a92:	2b00      	cmp	r3, #0
 8027a94:	dda3      	ble.n	80279de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027a96:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 8027a9a:	4621      	mov	r1, r4
 8027a9c:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 8027aa0:	f8cd 90d4 	str.w	r9, [sp, #212]	@ 0xd4
 8027aa4:	464a      	mov	r2, r9
 8027aa6:	464c      	mov	r4, r9
 8027aa8:	e122      	b.n	8027cf0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8027aaa:	f893 c001 	ldrb.w	ip, [r3, #1]
 8027aae:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
 8027ab2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8027ab4:	0e2d      	lsrs	r5, r5, #24
 8027ab6:	9508      	str	r5, [sp, #32]
 8027ab8:	b162      	cbz	r2, 8027ad4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027aba:	185d      	adds	r5, r3, r1
 8027abc:	786d      	ldrb	r5, [r5, #1]
 8027abe:	5c5b      	ldrb	r3, [r3, r1]
 8027ac0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8027ac4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027ac8:	9112      	str	r1, [sp, #72]	@ 0x48
 8027aca:	9310      	str	r3, [sp, #64]	@ 0x40
 8027acc:	0e09      	lsrs	r1, r1, #24
 8027ace:	0e1b      	lsrs	r3, r3, #24
 8027ad0:	910a      	str	r1, [sp, #40]	@ 0x28
 8027ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8027ad4:	b2a4      	uxth	r4, r4
 8027ad6:	b292      	uxth	r2, r2
 8027ad8:	fb04 f502 	mul.w	r5, r4, r2
 8027adc:	0124      	lsls	r4, r4, #4
 8027ade:	1b66      	subs	r6, r4, r5
 8027ae0:	9b08      	ldr	r3, [sp, #32]
 8027ae2:	b2b6      	uxth	r6, r6
 8027ae4:	fb06 f103 	mul.w	r1, r6, r3
 8027ae8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8027aec:	b292      	uxth	r2, r2
 8027aee:	f5c4 7380 	rsb	r3, r4, #256	@ 0x100
 8027af2:	1a9b      	subs	r3, r3, r2
 8027af4:	b29b      	uxth	r3, r3
 8027af6:	fb03 1100 	mla	r1, r3, r0, r1
 8027afa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027afc:	fb02 1104 	mla	r1, r2, r4, r1
 8027b00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027b02:	fb05 1104 	mla	r1, r5, r4, r1
 8027b06:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027b0a:	2900      	cmp	r1, #0
 8027b0c:	f000 80df 	beq.w	8027cce <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027b10:	f007 14ff 	and.w	r4, r7, #16711935	@ 0xff00ff
 8027b14:	28ff      	cmp	r0, #255	@ 0xff
 8027b16:	940c      	str	r4, [sp, #48]	@ 0x30
 8027b18:	f407 497f 	and.w	r9, r7, #65280	@ 0xff00
 8027b1c:	d01a      	beq.n	8027b54 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027b1e:	fb04 f400 	mul.w	r4, r4, r0
 8027b22:	4627      	mov	r7, r4
 8027b24:	fb09 fc00 	mul.w	ip, r9, r0
 8027b28:	0a24      	lsrs	r4, r4, #8
 8027b2a:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027b2e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027b32:	f50c 7080 	add.w	r0, ip, #256	@ 0x100
 8027b36:	4427      	add	r7, r4
 8027b38:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8027b3c:	0a3f      	lsrs	r7, r7, #8
 8027b3e:	0a00      	lsrs	r0, r0, #8
 8027b40:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8027b44:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027b48:	4307      	orrs	r7, r0
 8027b4a:	f007 10ff 	and.w	r0, r7, #16711935	@ 0xff00ff
 8027b4e:	900c      	str	r0, [sp, #48]	@ 0x30
 8027b50:	f407 497f 	and.w	r9, r7, #65280	@ 0xff00
 8027b54:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8027b56:	f000 17ff 	and.w	r7, r0, #16711935	@ 0xff00ff
 8027b5a:	f400 4c7f 	and.w	ip, r0, #65280	@ 0xff00
 8027b5e:	9808      	ldr	r0, [sp, #32]
 8027b60:	28ff      	cmp	r0, #255	@ 0xff
 8027b62:	d01a      	beq.n	8027b9a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8027b64:	fb07 f700 	mul.w	r7, r7, r0
 8027b68:	fb0c fc00 	mul.w	ip, ip, r0
 8027b6c:	0a3c      	lsrs	r4, r7, #8
 8027b6e:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027b72:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027b76:	f50c 7080 	add.w	r0, ip, #256	@ 0x100
 8027b7a:	4427      	add	r7, r4
 8027b7c:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8027b80:	0a3f      	lsrs	r7, r7, #8
 8027b82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b86:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8027b8a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027b8e:	ea47 0c0c 	orr.w	ip, r7, ip
 8027b92:	f00c 17ff 	and.w	r7, ip, #16711935	@ 0xff00ff
 8027b96:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8027b9a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8027b9c:	f000 1eff 	and.w	lr, r0, #16711935	@ 0xff00ff
 8027ba0:	f400 4a7f 	and.w	sl, r0, #65280	@ 0xff00
 8027ba4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027ba6:	28ff      	cmp	r0, #255	@ 0xff
 8027ba8:	d01c      	beq.n	8027be4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8027baa:	fb0e fe00 	mul.w	lr, lr, r0
 8027bae:	fb0a fa00 	mul.w	sl, sl, r0
 8027bb2:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8027bb6:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027bba:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8027bbe:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8027bc2:	44a6      	add	lr, r4
 8027bc4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8027bc8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027bcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027bd0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027bd4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027bd8:	ea4e 0a0a 	orr.w	sl, lr, sl
 8027bdc:	f00a 1eff 	and.w	lr, sl, #16711935	@ 0xff00ff
 8027be0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027be4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027be6:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 8027bea:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8027bee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027bf0:	2cff      	cmp	r4, #255	@ 0xff
 8027bf2:	d01d      	beq.n	8027c30 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027bf4:	fb00 f004 	mul.w	r0, r0, r4
 8027bf8:	fb0b fb04 	mul.w	fp, fp, r4
 8027bfc:	0a04      	lsrs	r4, r0, #8
 8027bfe:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8027c02:	9414      	str	r4, [sp, #80]	@ 0x50
 8027c04:	f50b 7480 	add.w	r4, fp, #256	@ 0x100
 8027c08:	9413      	str	r4, [sp, #76]	@ 0x4c
 8027c0a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8027c0c:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8027c10:	4420      	add	r0, r4
 8027c12:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027c14:	0a00      	lsrs	r0, r0, #8
 8027c16:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8027c1a:	0a24      	lsrs	r4, r4, #8
 8027c1c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027c20:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8027c24:	ea40 0b0b 	orr.w	fp, r0, fp
 8027c28:	f00b 10ff 	and.w	r0, fp, #16711935	@ 0xff00ff
 8027c2c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8027c30:	43c9      	mvns	r1, r1
 8027c32:	fb07 f706 	mul.w	r7, r7, r6
 8027c36:	fb0c f606 	mul.w	r6, ip, r6
 8027c3a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027c3c:	fb09 6603 	mla	r6, r9, r3, r6
 8027c40:	fb04 7703 	mla	r7, r4, r3, r7
 8027c44:	9b07      	ldr	r3, [sp, #28]
 8027c46:	fb0e 7702 	mla	r7, lr, r2, r7
 8027c4a:	fb0a 6602 	mla	r6, sl, r2, r6
 8027c4e:	f8b3 e000 	ldrh.w	lr, [r3]
 8027c52:	b2c9      	uxtb	r1, r1
 8027c54:	ea4f 242e 	mov.w	r4, lr, asr #8
 8027c58:	fb00 7005 	mla	r0, r0, r5, r7
 8027c5c:	fb0b 6605 	mla	r6, fp, r5, r6
 8027c60:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8027c64:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8027c68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027c6c:	fb04 f401 	mul.w	r4, r4, r1
 8027c70:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8027c74:	fa5f fe8e 	uxtb.w	lr, lr
 8027c78:	fb09 f901 	mul.w	r9, r9, r1
 8027c7c:	fb0e f101 	mul.w	r1, lr, r1
 8027c80:	0a00      	lsrs	r0, r0, #8
 8027c82:	0a36      	lsrs	r6, r6, #8
 8027c84:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8027c88:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8027c8c:	1c62      	adds	r2, r4, #1
 8027c8e:	ea40 0306 	orr.w	r3, r0, r6
 8027c92:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027c96:	f109 0001 	add.w	r0, r9, #1
 8027c9a:	1c4a      	adds	r2, r1, #1
 8027c9c:	0c1e      	lsrs	r6, r3, #16
 8027c9e:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8027ca2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027ca6:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8027caa:	4a21      	ldr	r2, [pc, #132]	@ (8027d30 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40c>)
 8027cac:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 8027cb0:	b2db      	uxtb	r3, r3
 8027cb2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027cb6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027cba:	ea02 2404 	and.w	r4, r2, r4, lsl #8
 8027cbe:	00c0      	lsls	r0, r0, #3
 8027cc0:	ea44 04d3 	orr.w	r4, r4, r3, lsr #3
 8027cc4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027cc8:	9b07      	ldr	r3, [sp, #28]
 8027cca:	4320      	orrs	r0, r4
 8027ccc:	8018      	strh	r0, [r3, #0]
 8027cce:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8027cd0:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8027cd2:	9b07      	ldr	r3, [sp, #28]
 8027cd4:	440a      	add	r2, r1
 8027cd6:	9235      	str	r2, [sp, #212]	@ 0xd4
 8027cd8:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8027cda:	3302      	adds	r3, #2
 8027cdc:	4490      	add	r8, r2
 8027cde:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027ce0:	9307      	str	r3, [sp, #28]
 8027ce2:	4293      	cmp	r3, r2
 8027ce4:	d022      	beq.n	8027d2c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8027ce6:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8027ce8:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8027cea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027cee:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
 8027cf0:	1412      	asrs	r2, r2, #16
 8027cf2:	ea4f 4328 	mov.w	r3, r8, asr #16
 8027cf6:	fb01 2303 	mla	r3, r1, r3, r2
 8027cfa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8027cfc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8027cfe:	5cc2      	ldrb	r2, [r0, r3]
 8027d00:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8027d04:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8027d08:	4403      	add	r3, r0
 8027d0a:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8027d0e:	0e38      	lsrs	r0, r7, #24
 8027d10:	2c00      	cmp	r4, #0
 8027d12:	f47f aeca 	bne.w	8027aaa <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8027d16:	2a00      	cmp	r2, #0
 8027d18:	f43f aedc 	beq.w	8027ad4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027d1c:	5c5b      	ldrb	r3, [r3, r1]
 8027d1e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8027d24:	9310      	str	r3, [sp, #64]	@ 0x40
 8027d26:	0e1b      	lsrs	r3, r3, #24
 8027d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8027d2a:	e6d3      	b.n	8027ad4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027d2c:	4693      	mov	fp, r2
 8027d2e:	e656      	b.n	80279de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027d30:	fffff800 	.word	0xfffff800
 8027d34:	2b00      	cmp	r3, #0
 8027d36:	f77f ae52 	ble.w	80279de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027d3a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8027d3e:	ea4f 4229 	mov.w	r2, r9, asr #16
 8027d42:	ea4f 4128 	mov.w	r1, r8, asr #16
 8027d46:	2a00      	cmp	r2, #0
 8027d48:	465f      	mov	r7, fp
 8027d4a:	f8cd b01c 	str.w	fp, [sp, #28]
 8027d4e:	9c3c      	ldr	r4, [sp, #240]	@ 0xf0
 8027d50:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 8027d54:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027d58:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8027d5c:	f2c0 8147 	blt.w	8027fee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8027d60:	1e73      	subs	r3, r6, #1
 8027d62:	429a      	cmp	r2, r3
 8027d64:	f280 8143 	bge.w	8027fee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8027d68:	2900      	cmp	r1, #0
 8027d6a:	f2c0 8140 	blt.w	8027fee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8027d6e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8027d72:	4299      	cmp	r1, r3
 8027d74:	f280 813b 	bge.w	8027fee <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8027d78:	b236      	sxth	r6, r6
 8027d7a:	fb01 2106 	mla	r1, r1, r6, r2
 8027d7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027d80:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027d82:	5c53      	ldrb	r3, [r2, r1]
 8027d84:	4411      	add	r1, r2
 8027d86:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8027d8a:	910d      	str	r1, [sp, #52]	@ 0x34
 8027d8c:	0e13      	lsrs	r3, r2, #24
 8027d8e:	2800      	cmp	r0, #0
 8027d90:	f000 8154 	beq.w	802803c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8027d94:	f891 c001 	ldrb.w	ip, [r1, #1]
 8027d98:	9513      	str	r5, [sp, #76]	@ 0x4c
 8027d9a:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
 8027d9e:	911f      	str	r1, [sp, #124]	@ 0x7c
 8027da0:	0e09      	lsrs	r1, r1, #24
 8027da2:	9116      	str	r1, [sp, #88]	@ 0x58
 8027da4:	f1be 0f00 	cmp.w	lr, #0
 8027da8:	f040 8153 	bne.w	8028052 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8027dac:	b286      	uxth	r6, r0
 8027dae:	fa1f fc8e 	uxth.w	ip, lr
 8027db2:	fb06 f00c 	mul.w	r0, r6, ip
 8027db6:	0136      	lsls	r6, r6, #4
 8027db8:	1a31      	subs	r1, r6, r0
 8027dba:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8027dbc:	b289      	uxth	r1, r1
 8027dbe:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027dc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8027dc4:	fb01 f105 	mul.w	r1, r1, r5
 8027dc8:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 8027dcc:	fa1f f58c 	uxth.w	r5, ip
 8027dd0:	1b76      	subs	r6, r6, r5
 8027dd2:	b2b6      	uxth	r6, r6
 8027dd4:	fb06 1c03 	mla	ip, r6, r3, r1
 8027dd8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8027dda:	9514      	str	r5, [sp, #80]	@ 0x50
 8027ddc:	fb05 cc01 	mla	ip, r5, r1, ip
 8027de0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8027de2:	9619      	str	r6, [sp, #100]	@ 0x64
 8027de4:	fb00 cc01 	mla	ip, r0, r1, ip
 8027de8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8027dec:	f1bc 0f00 	cmp.w	ip, #0
 8027df0:	f000 80e6 	beq.w	8027fc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027df4:	f002 11ff 	and.w	r1, r2, #16711935	@ 0xff00ff
 8027df8:	2bff      	cmp	r3, #255	@ 0xff
 8027dfa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8027dfe:	911a      	str	r1, [sp, #104]	@ 0x68
 8027e00:	921b      	str	r2, [sp, #108]	@ 0x6c
 8027e02:	d01b      	beq.n	8027e3c <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8027e04:	fb02 f203 	mul.w	r2, r2, r3
 8027e08:	fb01 f103 	mul.w	r1, r1, r3
 8027e0c:	4613      	mov	r3, r2
 8027e0e:	0a0a      	lsrs	r2, r1, #8
 8027e10:	f101 1601 	add.w	r6, r1, #65537	@ 0x10001
 8027e14:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027e18:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 8027e1c:	4432      	add	r2, r6
 8027e1e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027e22:	0a12      	lsrs	r2, r2, #8
 8027e24:	0a1b      	lsrs	r3, r3, #8
 8027e26:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027e2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027e2e:	4313      	orrs	r3, r2
 8027e30:	f003 12ff 	and.w	r2, r3, #16711935	@ 0xff00ff
 8027e34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027e38:	921a      	str	r2, [sp, #104]	@ 0x68
 8027e3a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8027e3c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8027e3e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8027e40:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 8027e44:	2aff      	cmp	r2, #255	@ 0xff
 8027e46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027e4a:	931c      	str	r3, [sp, #112]	@ 0x70
 8027e4c:	d01b      	beq.n	8027e86 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8027e4e:	fb03 f302 	mul.w	r3, r3, r2
 8027e52:	461e      	mov	r6, r3
 8027e54:	fb01 f102 	mul.w	r1, r1, r2
 8027e58:	0a0a      	lsrs	r2, r1, #8
 8027e5a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027e5e:	f101 1101 	add.w	r1, r1, #65537	@ 0x10001
 8027e62:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8027e66:	440a      	add	r2, r1
 8027e68:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8027e6c:	0a12      	lsrs	r2, r2, #8
 8027e6e:	0a1b      	lsrs	r3, r3, #8
 8027e70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027e74:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027e78:	ea42 0603 	orr.w	r6, r2, r3
 8027e7c:	f406 437f 	and.w	r3, r6, #65280	@ 0xff00
 8027e80:	f006 11ff 	and.w	r1, r6, #16711935	@ 0xff00ff
 8027e84:	931c      	str	r3, [sp, #112]	@ 0x70
 8027e86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027e88:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8027e8a:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 8027e8e:	2aff      	cmp	r2, #255	@ 0xff
 8027e90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027e94:	931d      	str	r3, [sp, #116]	@ 0x74
 8027e96:	d01b      	beq.n	8027ed0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8027e98:	fb03 f302 	mul.w	r3, r3, r2
 8027e9c:	fb06 f602 	mul.w	r6, r6, r2
 8027ea0:	461a      	mov	r2, r3
 8027ea2:	0a33      	lsrs	r3, r6, #8
 8027ea4:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8027ea8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8027eac:	f502 7380 	add.w	r3, r2, #256	@ 0x100
 8027eb0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027eb4:	4476      	add	r6, lr
 8027eb6:	0a36      	lsrs	r6, r6, #8
 8027eb8:	0a1b      	lsrs	r3, r3, #8
 8027eba:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8027ebe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027ec2:	ea46 0203 	orr.w	r2, r6, r3
 8027ec6:	f402 437f 	and.w	r3, r2, #65280	@ 0xff00
 8027eca:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8027ece:	931d      	str	r3, [sp, #116]	@ 0x74
 8027ed0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8027ed2:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 8027ed6:	f402 4e7f 	and.w	lr, r2, #65280	@ 0xff00
 8027eda:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8027edc:	930d      	str	r3, [sp, #52]	@ 0x34
 8027ede:	2aff      	cmp	r2, #255	@ 0xff
 8027ee0:	d01b      	beq.n	8027f1a <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8027ee2:	fb03 f302 	mul.w	r3, r3, r2
 8027ee6:	fb0e fe02 	mul.w	lr, lr, r2
 8027eea:	0a1a      	lsrs	r2, r3, #8
 8027eec:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027ef0:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8027ef4:	f50e 7580 	add.w	r5, lr, #256	@ 0x100
 8027ef8:	441a      	add	r2, r3
 8027efa:	eb05 2e1e 	add.w	lr, r5, lr, lsr #8
 8027efe:	0a12      	lsrs	r2, r2, #8
 8027f00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027f04:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8027f08:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027f0c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027f10:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8027f14:	930d      	str	r3, [sp, #52]	@ 0x34
 8027f16:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8027f1a:	ea6f 0c0c 	mvn.w	ip, ip
 8027f1e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8027f20:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8027f22:	fb01 f305 	mul.w	r3, r1, r5
 8027f26:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8027f28:	fa5f fc8c 	uxtb.w	ip, ip
 8027f2c:	fb01 f105 	mul.w	r1, r1, r5
 8027f30:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8027f32:	fb02 3305 	mla	r3, r2, r5, r3
 8027f36:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8027f38:	fb02 1105 	mla	r1, r2, r5, r1
 8027f3c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8027f3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8027f40:	fb06 3605 	mla	r6, r6, r5, r3
 8027f44:	fb02 1205 	mla	r2, r2, r5, r1
 8027f48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027f4a:	8839      	ldrh	r1, [r7, #0]
 8027f4c:	fb03 6300 	mla	r3, r3, r0, r6
 8027f50:	fb0e 2e00 	mla	lr, lr, r0, r2
 8027f54:	10c8      	asrs	r0, r1, #3
 8027f56:	120a      	asrs	r2, r1, #8
 8027f58:	f000 06fc 	and.w	r6, r0, #252	@ 0xfc
 8027f5c:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027f60:	00c9      	lsls	r1, r1, #3
 8027f62:	fb02 f20c 	mul.w	r2, r2, ip
 8027f66:	fb06 f60c 	mul.w	r6, r6, ip
 8027f6a:	b2c9      	uxtb	r1, r1
 8027f6c:	fb01 f00c 	mul.w	r0, r1, ip
 8027f70:	0a1b      	lsrs	r3, r3, #8
 8027f72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027f76:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 8027f7a:	f40e 437f 	and.w	r3, lr, #65280	@ 0xff00
 8027f7e:	430b      	orrs	r3, r1
 8027f80:	f106 0e01 	add.w	lr, r6, #1
 8027f84:	1c51      	adds	r1, r2, #1
 8027f86:	0c1d      	lsrs	r5, r3, #16
 8027f88:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027f8c:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8027f90:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8027f94:	fa5f fe83 	uxtb.w	lr, r3
 8027f98:	f100 0c01 	add.w	ip, r0, #1
 8027f9c:	4b39      	ldr	r3, [pc, #228]	@ (8028084 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>)
 8027f9e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8027fa2:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8027fa6:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8027faa:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8027fae:	00c9      	lsls	r1, r1, #3
 8027fb0:	eb0e 2310 	add.w	r3, lr, r0, lsr #8
 8027fb4:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 8027fb8:	f401 62fc 	and.w	r2, r1, #2016	@ 0x7e0
 8027fbc:	4313      	orrs	r3, r2
 8027fbe:	803b      	strh	r3, [r7, #0]
 8027fc0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8027fc2:	f1ba 0f00 	cmp.w	sl, #0
 8027fc6:	f107 0702 	add.w	r7, r7, #2
 8027fca:	44d9      	add	r9, fp
 8027fcc:	4498      	add	r8, r3
 8027fce:	dd26      	ble.n	802801e <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8027fd0:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 8027fd4:	ea4f 4229 	mov.w	r2, r9, asr #16
 8027fd8:	2a00      	cmp	r2, #0
 8027fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027fde:	ea4f 4128 	mov.w	r1, r8, asr #16
 8027fe2:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8027fe6:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8027fea:	f6bf aeb9 	bge.w	8027d60 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8027fee:	1c53      	adds	r3, r2, #1
 8027ff0:	d4e6      	bmi.n	8027fc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027ff2:	42b3      	cmp	r3, r6
 8027ff4:	dce4      	bgt.n	8027fc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027ff6:	1c4b      	adds	r3, r1, #1
 8027ff8:	d4e2      	bmi.n	8027fc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027ffa:	4563      	cmp	r3, ip
 8027ffc:	dce0      	bgt.n	8027fc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 8027ffe:	fa0f f38c 	sxth.w	r3, ip
 8028002:	b236      	sxth	r6, r6
 8028004:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8028008:	e9cd 6300 	strd	r6, r3, [sp]
 802800c:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 8028010:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028014:	4639      	mov	r1, r7
 8028016:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8028018:	f7ff fade 	bl	80275d8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802801c:	e7d0      	b.n	8027fc0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802801e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028020:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028028:	3301      	adds	r3, #1
 802802a:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 802802e:	e4d6      	b.n	80279de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028030:	3b01      	subs	r3, #1
 8028032:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8028036:	930c      	str	r3, [sp, #48]	@ 0x30
 8028038:	469a      	mov	sl, r3
 802803a:	e684      	b.n	8027d46 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x422>
 802803c:	f1be 0f00 	cmp.w	lr, #0
 8028040:	f43f aeb4 	beq.w	8027dac <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8028044:	5d89      	ldrb	r1, [r1, r6]
 8028046:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 802804a:	9120      	str	r1, [sp, #128]	@ 0x80
 802804c:	0e09      	lsrs	r1, r1, #24
 802804e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8028050:	e6ac      	b.n	8027dac <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8028052:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028054:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028056:	eb01 0c06 	add.w	ip, r1, r6
 802805a:	f89c c001 	ldrb.w	ip, [ip, #1]
 802805e:	5d89      	ldrb	r1, [r1, r6]
 8028060:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
 8028064:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8028068:	0e35      	lsrs	r5, r6, #24
 802806a:	9120      	str	r1, [sp, #128]	@ 0x80
 802806c:	0e09      	lsrs	r1, r1, #24
 802806e:	9621      	str	r6, [sp, #132]	@ 0x84
 8028070:	9518      	str	r5, [sp, #96]	@ 0x60
 8028072:	9117      	str	r1, [sp, #92]	@ 0x5c
 8028074:	e69a      	b.n	8027dac <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8028076:	f43f acb2 	beq.w	80279de <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802807a:	1e65      	subs	r5, r4, #1
 802807c:	f8cd b01c 	str.w	fp, [sp, #28]
 8028080:	e4f2      	b.n	8027a68 <_ZN8touchgfx8LCDGPU2D68TextureMapper_16BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8028082:	bf00      	nop
 8028084:	fffff800 	.word	0xfffff800

08028088 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8028088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802808c:	b08b      	sub	sp, #44	@ 0x2c
 802808e:	f89d 0068 	ldrb.w	r0, [sp, #104]	@ 0x68
 8028092:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8028096:	ea6f 0b00 	mvn.w	fp, r0
 802809a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802809c:	f9bd 5050 	ldrsh.w	r5, [sp, #80]	@ 0x50
 80280a0:	9005      	str	r0, [sp, #20]
 80280a2:	fb0c 4805 	mla	r8, ip, r5, r4
 80280a6:	7848      	ldrb	r0, [r1, #1]
 80280a8:	788e      	ldrb	r6, [r1, #2]
 80280aa:	0204      	lsls	r4, r0, #8
 80280ac:	780f      	ldrb	r7, [r1, #0]
 80280ae:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80280b2:	9306      	str	r3, [sp, #24]
 80280b4:	fa5f f38b 	uxtb.w	r3, fp
 80280b8:	433c      	orrs	r4, r7
 80280ba:	9304      	str	r3, [sp, #16]
 80280bc:	f1bc 0f00 	cmp.w	ip, #0
 80280c0:	eb02 0308 	add.w	r3, r2, r8
 80280c4:	9003      	str	r0, [sp, #12]
 80280c6:	9602      	str	r6, [sp, #8]
 80280c8:	9307      	str	r3, [sp, #28]
 80280ca:	9409      	str	r4, [sp, #36]	@ 0x24
 80280cc:	f10c 0601 	add.w	r6, ip, #1
 80280d0:	f9bd e054 	ldrsh.w	lr, [sp, #84]	@ 0x54
 80280d4:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 80280d8:	f89d 0064 	ldrb.w	r0, [sp, #100]	@ 0x64
 80280dc:	db02      	blt.n	80280e4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x5c>
 80280de:	45e6      	cmp	lr, ip
 80280e0:	f300 80a0 	bgt.w	8028224 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x19c>
 80280e4:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 80280e8:	46e0      	mov	r8, ip
 80280ea:	fa5f fb84 	uxtb.w	fp, r4
 80280ee:	f8cd b004 	str.w	fp, [sp, #4]
 80280f2:	2e00      	cmp	r6, #0
 80280f4:	db01      	blt.n	80280fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 80280f6:	45b6      	cmp	lr, r6
 80280f8:	dc73      	bgt.n	80281e2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x15a>
 80280fa:	fa5f fa84 	uxtb.w	sl, r4
 80280fe:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 8028102:	4654      	mov	r4, sl
 8028104:	46f1      	mov	r9, lr
 8028106:	2b0f      	cmp	r3, #15
 8028108:	f200 80cb 	bhi.w	80282a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 802810c:	280f      	cmp	r0, #15
 802810e:	f200 80c8 	bhi.w	80282a2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x21a>
 8028112:	b29b      	uxth	r3, r3
 8028114:	b280      	uxth	r0, r0
 8028116:	fb03 f600 	mul.w	r6, r3, r0
 802811a:	011b      	lsls	r3, r3, #4
 802811c:	1b9d      	subs	r5, r3, r6
 802811e:	9a01      	ldr	r2, [sp, #4]
 8028120:	b2ad      	uxth	r5, r5
 8028122:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 8028126:	fb05 f202 	mul.w	r2, r5, r2
 802812a:	b280      	uxth	r0, r0
 802812c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8028130:	1a1b      	subs	r3, r3, r0
 8028132:	b29b      	uxth	r3, r3
 8028134:	fb03 220b 	mla	r2, r3, fp, r2
 8028138:	fb00 2a0a 	mla	sl, r0, sl, r2
 802813c:	f8bd b010 	ldrh.w	fp, [sp, #16]
 8028140:	fb06 a404 	mla	r4, r6, r4, sl
 8028144:	fb17 f70b 	smulbb	r7, r7, fp
 8028148:	f8bd a014 	ldrh.w	sl, [sp, #20]
 802814c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8028150:	fb04 770a 	mla	r7, r4, sl, r7
 8028154:	b2bf      	uxth	r7, r7
 8028156:	1c7a      	adds	r2, r7, #1
 8028158:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802815c:	123f      	asrs	r7, r7, #8
 802815e:	700f      	strb	r7, [r1, #0]
 8028160:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8028164:	f898 7001 	ldrb.w	r7, [r8, #1]
 8028168:	fb05 f204 	mul.w	r2, r5, r4
 802816c:	fb03 2407 	mla	r4, r3, r7, r2
 8028170:	f899 2001 	ldrb.w	r2, [r9, #1]
 8028174:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8028178:	fb00 4202 	mla	r2, r0, r2, r4
 802817c:	9c03      	ldr	r4, [sp, #12]
 802817e:	fb06 2207 	mla	r2, r6, r7, r2
 8028182:	fb14 f40b 	smulbb	r4, r4, fp
 8028186:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802818a:	fb02 420a 	mla	r2, r2, sl, r4
 802818e:	b292      	uxth	r2, r2
 8028190:	1c54      	adds	r4, r2, #1
 8028192:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8028196:	1212      	asrs	r2, r2, #8
 8028198:	704a      	strb	r2, [r1, #1]
 802819a:	f89c 4002 	ldrb.w	r4, [ip, #2]
 802819e:	f898 2002 	ldrb.w	r2, [r8, #2]
 80281a2:	fb05 f504 	mul.w	r5, r5, r4
 80281a6:	fb03 5502 	mla	r5, r3, r2, r5
 80281aa:	f899 4002 	ldrb.w	r4, [r9, #2]
 80281ae:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80281b2:	fb00 5004 	mla	r0, r0, r4, r5
 80281b6:	9b02      	ldr	r3, [sp, #8]
 80281b8:	fb06 0602 	mla	r6, r6, r2, r0
 80281bc:	fb13 fb0b 	smulbb	fp, r3, fp
 80281c0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80281c4:	fb06 ba0a 	mla	sl, r6, sl, fp
 80281c8:	fa1f fa8a 	uxth.w	sl, sl
 80281cc:	f10a 0b01 	add.w	fp, sl, #1
 80281d0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80281d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80281d8:	f881 a002 	strb.w	sl, [r1, #2]
 80281dc:	b00b      	add	sp, #44	@ 0x2c
 80281de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281e2:	2800      	cmp	r0, #0
 80281e4:	d089      	beq.n	80280fa <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x72>
 80281e6:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80281e8:	2e00      	cmp	r6, #0
 80281ea:	db47      	blt.n	802827c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 80281ec:	42b5      	cmp	r5, r6
 80281ee:	dd45      	ble.n	802827c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1f4>
 80281f0:	9a07      	ldr	r2, [sp, #28]
 80281f2:	f812 9005 	ldrb.w	r9, [r2, r5]
 80281f6:	9a06      	ldr	r2, [sp, #24]
 80281f8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80281fc:	4491      	add	r9, r2
 80281fe:	3601      	adds	r6, #1
 8028200:	f899 a000 	ldrb.w	sl, [r9]
 8028204:	d436      	bmi.n	8028274 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 8028206:	42b5      	cmp	r5, r6
 8028208:	dd34      	ble.n	8028274 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ec>
 802820a:	2b00      	cmp	r3, #0
 802820c:	d045      	beq.n	802829a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x212>
 802820e:	9a07      	ldr	r2, [sp, #28]
 8028210:	442a      	add	r2, r5
 8028212:	f892 e001 	ldrb.w	lr, [r2, #1]
 8028216:	9a06      	ldr	r2, [sp, #24]
 8028218:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802821c:	f812 400e 	ldrb.w	r4, [r2, lr]
 8028220:	4496      	add	lr, r2
 8028222:	e770      	b.n	8028106 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 8028224:	4691      	mov	r9, r2
 8028226:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8028228:	2a00      	cmp	r2, #0
 802822a:	db01      	blt.n	8028230 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1a8>
 802822c:	4295      	cmp	r5, r2
 802822e:	dc19      	bgt.n	8028264 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>
 8028230:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8028234:	3201      	adds	r2, #1
 8028236:	f898 b000 	ldrb.w	fp, [r8]
 802823a:	d40e      	bmi.n	802825a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 802823c:	4295      	cmp	r5, r2
 802823e:	dd0c      	ble.n	802825a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d2>
 8028240:	b1fb      	cbz	r3, 8028282 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1fa>
 8028242:	9a07      	ldr	r2, [sp, #28]
 8028244:	f892 c001 	ldrb.w	ip, [r2, #1]
 8028248:	9a06      	ldr	r2, [sp, #24]
 802824a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802824e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8028252:	9201      	str	r2, [sp, #4]
 8028254:	9a06      	ldr	r2, [sp, #24]
 8028256:	4494      	add	ip, r2
 8028258:	e74b      	b.n	80280f2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 802825a:	b2e2      	uxtb	r2, r4
 802825c:	9201      	str	r2, [sp, #4]
 802825e:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8028262:	e746      	b.n	80280f2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6a>
 8028264:	f819 8008 	ldrb.w	r8, [r9, r8]
 8028268:	9a06      	ldr	r2, [sp, #24]
 802826a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802826e:	4490      	add	r8, r2
 8028270:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8028272:	e7df      	b.n	8028234 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ac>
 8028274:	b2e4      	uxtb	r4, r4
 8028276:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 802827a:	e744      	b.n	8028106 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7e>
 802827c:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 8028280:	e7bd      	b.n	80281fe <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x176>
 8028282:	b2e2      	uxtb	r2, r4
 8028284:	2e00      	cmp	r6, #0
 8028286:	9201      	str	r2, [sp, #4]
 8028288:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 802828c:	f6bf af33 	bge.w	80280f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x6e>
 8028290:	46e6      	mov	lr, ip
 8028292:	46e1      	mov	r9, ip
 8028294:	4692      	mov	sl, r2
 8028296:	4614      	mov	r4, r2
 8028298:	e738      	b.n	802810c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 802829a:	b2e4      	uxtb	r4, r4
 802829c:	f10d 0e24 	add.w	lr, sp, #36	@ 0x24
 80282a0:	e734      	b.n	802810c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x84>
 80282a2:	4b03      	ldr	r3, [pc, #12]	@ (80282b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x228>)
 80282a4:	4a03      	ldr	r2, [pc, #12]	@ (80282b4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x22c>)
 80282a6:	f240 31ca 	movw	r1, #970	@ 0x3ca
 80282aa:	4803      	ldr	r0, [pc, #12]	@ (80282b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x230>)
 80282ac:	f003 fc84 	bl	802bbb8 <__assert_func>
 80282b0:	0802ef50 	.word	0x0802ef50
 80282b4:	0802f5cc 	.word	0x0802f5cc
 80282b8:	0802f0d8 	.word	0x0802f0d8

080282bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80282bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282c0:	ed2d 8b08 	vpush	{d8-d11}
 80282c4:	b097      	sub	sp, #92	@ 0x5c
 80282c6:	f89d 60c4 	ldrb.w	r6, [sp, #196]	@ 0xc4
 80282ca:	eeb0 aa40 	vmov.f32	s20, s0
 80282ce:	e9dd b729 	ldrd	fp, r7, [sp, #164]	@ 0xa4
 80282d2:	e9cd 0614 	strd	r0, r6, [sp, #80]	@ 0x50
 80282d6:	43f0      	mvns	r0, r6
 80282d8:	eef0 9a60 	vmov.f32	s19, s1
 80282dc:	eeb0 9a41 	vmov.f32	s18, s2
 80282e0:	eef0 8a62 	vmov.f32	s17, s5
 80282e4:	eeb0 8a43 	vmov.f32	s16, s6
 80282e8:	eef0 ba44 	vmov.f32	s23, s8
 80282ec:	eeb0 ba64 	vmov.f32	s22, s9
 80282f0:	eef0 aa45 	vmov.f32	s21, s10
 80282f4:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 80282f8:	e9dd 512d 	ldrd	r5, r1, [sp, #180]	@ 0xb4
 80282fc:	461a      	mov	r2, r3
 80282fe:	686c      	ldr	r4, [r5, #4]
 8028300:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8028302:	f8dd 90ac 	ldr.w	r9, [sp, #172]	@ 0xac
 8028306:	fb04 1303 	mla	r3, r4, r3, r1
 802830a:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
 802830c:	6829      	ldr	r1, [r5, #0]
 802830e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028312:	6865      	ldr	r5, [r4, #4]
 8028314:	eb01 0a03 	add.w	sl, r1, r3
 8028318:	b2c3      	uxtb	r3, r0
 802831a:	6824      	ldr	r4, [r4, #0]
 802831c:	9309      	str	r3, [sp, #36]	@ 0x24
 802831e:	1d2b      	adds	r3, r5, #4
 8028320:	930a      	str	r3, [sp, #40]	@ 0x28
 8028322:	b2b3      	uxth	r3, r6
 8028324:	940d      	str	r4, [sp, #52]	@ 0x34
 8028326:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802832a:	2b00      	cmp	r3, #0
 802832c:	dc02      	bgt.n	8028334 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802832e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028330:	2b00      	cmp	r3, #0
 8028332:	dd63      	ble.n	80283fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028334:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8028336:	2a00      	cmp	r2, #0
 8028338:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 802833c:	b234      	sxth	r4, r6
 802833e:	fa0f fc8e 	sxth.w	ip, lr
 8028342:	f340 825b 	ble.w	80287fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>
 8028346:	f8cd e020 	str.w	lr, [sp, #32]
 802834a:	f8dd e0b0 	ldr.w	lr, [sp, #176]	@ 0xb0
 802834e:	1e65      	subs	r5, r4, #1
 8028350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8028354:	ea5f 432b 	movs.w	r3, fp, asr #16
 8028358:	ea4f 4127 	mov.w	r1, r7, asr #16
 802835c:	d405      	bmi.n	802836a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802835e:	42ab      	cmp	r3, r5
 8028360:	da03      	bge.n	802836a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028362:	2900      	cmp	r1, #0
 8028364:	db01      	blt.n	802836a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028366:	4541      	cmp	r1, r8
 8028368:	db4d      	blt.n	8028406 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802836a:	1c58      	adds	r0, r3, #1
 802836c:	d406      	bmi.n	802837c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802836e:	42a0      	cmp	r0, r4
 8028370:	dc04      	bgt.n	802837c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8028372:	1c48      	adds	r0, r1, #1
 8028374:	d402      	bmi.n	802837c <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8028376:	4560      	cmp	r0, ip
 8028378:	f340 819b 	ble.w	80286b2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802837c:	3a01      	subs	r2, #1
 802837e:	44cb      	add	fp, r9
 8028380:	4477      	add	r7, lr
 8028382:	f10a 0a03 	add.w	sl, sl, #3
 8028386:	d1e5      	bne.n	8028354 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802838a:	2b00      	cmp	r3, #0
 802838c:	dd36      	ble.n	80283fc <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802838e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028392:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028396:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802839a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802839e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80283a2:	ee29 6aa7 	vmul.f32	s12, s19, s15
 80283a6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80283aa:	ee76 6a68 	vsub.f32	s13, s12, s17
 80283ae:	ee37 7ac8 	vsub.f32	s14, s15, s16
 80283b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283b6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80283ba:	ee16 2a90 	vmov	r2, s13
 80283be:	3b01      	subs	r3, #1
 80283c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80283c2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80283c4:	fb92 f9f3 	sdiv	r9, r2, r3
 80283c8:	ee17 2a10 	vmov	r2, s14
 80283cc:	eeb0 7a48 	vmov.f32	s14, s16
 80283d0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80283d4:	ee17 7a10 	vmov	r7, s14
 80283d8:	eeb0 7a68 	vmov.f32	s14, s17
 80283dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80283e0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80283e4:	932c      	str	r3, [sp, #176]	@ 0xb0
 80283e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80283e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80283ea:	ee17 ba10 	vmov	fp, s14
 80283ee:	eeb0 8a67 	vmov.f32	s16, s15
 80283f2:	eef0 8a46 	vmov.f32	s17, s12
 80283f6:	bf18      	it	ne
 80283f8:	461a      	movne	r2, r3
 80283fa:	e795      	b.n	8028328 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80283fc:	b017      	add	sp, #92	@ 0x5c
 80283fe:	ecbd 8b08 	vpop	{d8-d11}
 8028402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028406:	f8dd e020 	ldr.w	lr, [sp, #32]
 802840a:	1e51      	subs	r1, r2, #1
 802840c:	fb09 b301 	mla	r3, r9, r1, fp
 8028410:	141b      	asrs	r3, r3, #16
 8028412:	9108      	str	r1, [sp, #32]
 8028414:	f100 80e7 	bmi.w	80285e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028418:	42ab      	cmp	r3, r5
 802841a:	f280 80e4 	bge.w	80285e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802841e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8028420:	fb03 7301 	mla	r3, r3, r1, r7
 8028424:	141b      	asrs	r3, r3, #16
 8028426:	f100 80de 	bmi.w	80285e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802842a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802842e:	4563      	cmp	r3, ip
 8028430:	f280 80d9 	bge.w	80285e6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028434:	2a00      	cmp	r2, #0
 8028436:	dda7      	ble.n	8028388 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8028438:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802843c:	eb0a 0302 	add.w	r3, sl, r2
 8028440:	930c      	str	r3, [sp, #48]	@ 0x30
 8028442:	f10a 0c03 	add.w	ip, sl, #3
 8028446:	e9cd 792a 	strd	r7, r9, [sp, #168]	@ 0xa8
 802844a:	463b      	mov	r3, r7
 802844c:	e09a      	b.n	8028584 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 802844e:	784d      	ldrb	r5, [r1, #1]
 8028450:	1908      	adds	r0, r1, r4
 8028452:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028456:	4435      	add	r5, r6
 8028458:	2a00      	cmp	r2, #0
 802845a:	f000 80b5 	beq.w	80285c8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802845e:	5d0c      	ldrb	r4, [r1, r4]
 8028460:	f890 e001 	ldrb.w	lr, [r0, #1]
 8028464:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028468:	19a1      	adds	r1, r4, r6
 802846a:	9108      	str	r1, [sp, #32]
 802846c:	4631      	mov	r1, r6
 802846e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8028472:	9f08      	ldr	r7, [sp, #32]
 8028474:	44b6      	add	lr, r6
 8028476:	b29b      	uxth	r3, r3
 8028478:	b292      	uxth	r2, r2
 802847a:	fb03 f602 	mul.w	r6, r3, r2
 802847e:	011b      	lsls	r3, r3, #4
 8028480:	f895 9000 	ldrb.w	r9, [r5]
 8028484:	1b98      	subs	r0, r3, r6
 8028486:	b280      	uxth	r0, r0
 8028488:	fb00 f909 	mul.w	r9, r0, r9
 802848c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8028490:	b292      	uxth	r2, r2
 8028492:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8028496:	f811 100a 	ldrb.w	r1, [r1, sl]
 802849a:	1a9b      	subs	r3, r3, r2
 802849c:	b29b      	uxth	r3, r3
 802849e:	fb03 9101 	mla	r1, r3, r1, r9
 80284a2:	f897 9000 	ldrb.w	r9, [r7]
 80284a6:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 80284a8:	fb02 1109 	mla	r1, r2, r9, r1
 80284ac:	f89e a000 	ldrb.w	sl, [lr]
 80284b0:	f81c 9c03 	ldrb.w	r9, [ip, #-3]
 80284b4:	44a3      	add	fp, r4
 80284b6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80284b8:	fb06 110a 	mla	r1, r6, sl, r1
 80284bc:	fb19 f904 	smulbb	r9, r9, r4
 80284c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80284c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80284c6:	fb01 9904 	mla	r9, r1, r4, r9
 80284ca:	fa1f f989 	uxth.w	r9, r9
 80284ce:	f109 0101 	add.w	r1, r9, #1
 80284d2:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80284d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80284da:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80284de:	7869      	ldrb	r1, [r5, #1]
 80284e0:	f898 9001 	ldrb.w	r9, [r8, #1]
 80284e4:	fb00 f101 	mul.w	r1, r0, r1
 80284e8:	9c08      	ldr	r4, [sp, #32]
 80284ea:	fb03 1109 	mla	r1, r3, r9, r1
 80284ee:	f894 9001 	ldrb.w	r9, [r4, #1]
 80284f2:	9f2c      	ldr	r7, [sp, #176]	@ 0xb0
 80284f4:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 80284f6:	fb02 1109 	mla	r1, r2, r9, r1
 80284fa:	f89e a001 	ldrb.w	sl, [lr, #1]
 80284fe:	443c      	add	r4, r7
 8028500:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
 8028504:	942a      	str	r4, [sp, #168]	@ 0xa8
 8028506:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8028508:	fb06 110a 	mla	r1, r6, sl, r1
 802850c:	fb19 f904 	smulbb	r9, r9, r4
 8028510:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8028512:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028516:	fb01 9907 	mla	r9, r1, r7, r9
 802851a:	fa1f f989 	uxth.w	r9, r9
 802851e:	f109 0101 	add.w	r1, r9, #1
 8028522:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8028526:	ea4f 2929 	mov.w	r9, r9, asr #8
 802852a:	f80c 9c02 	strb.w	r9, [ip, #-2]
 802852e:	78a9      	ldrb	r1, [r5, #2]
 8028530:	f898 5002 	ldrb.w	r5, [r8, #2]
 8028534:	fb00 f001 	mul.w	r0, r0, r1
 8028538:	fb03 0005 	mla	r0, r3, r5, r0
 802853c:	9b08      	ldr	r3, [sp, #32]
 802853e:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8028542:	789b      	ldrb	r3, [r3, #2]
 8028544:	f81c ec01 	ldrb.w	lr, [ip, #-1]
 8028548:	fb02 0003 	mla	r0, r2, r3, r0
 802854c:	fb06 0004 	mla	r0, r6, r4, r0
 8028550:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8028552:	fb1e f404 	smulbb	r4, lr, r4
 8028556:	f3c0 2e07 	ubfx	lr, r0, #8, #8
 802855a:	fb0e 4e07 	mla	lr, lr, r7, r4
 802855e:	fa1f fe8e 	uxth.w	lr, lr
 8028562:	f10e 0301 	add.w	r3, lr, #1
 8028566:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802856a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802856c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8028570:	4563      	cmp	r3, ip
 8028572:	f80c ec01 	strb.w	lr, [ip, #-1]
 8028576:	d034      	beq.n	80285e2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8028578:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802857a:	f10c 0c03 	add.w	ip, ip, #3
 802857e:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 8028582:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028584:	1419      	asrs	r1, r3, #16
 8028586:	ea4f 432b 	mov.w	r3, fp, asr #16
 802858a:	fb04 3101 	mla	r1, r4, r1, r3
 802858e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028590:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8028592:	f812 a001 	ldrb.w	sl, [r2, r1]
 8028596:	4411      	add	r1, r2
 8028598:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 802859a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802859e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80285a2:	eb06 080a 	add.w	r8, r6, sl
 80285a6:	f3c2 3203 	ubfx	r2, r2, #12, #4
 80285aa:	2b00      	cmp	r3, #0
 80285ac:	f47f af4f 	bne.w	802844e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80285b0:	b182      	cbz	r2, 80285d4 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80285b2:	5d0c      	ldrb	r4, [r1, r4]
 80285b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80285b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80285ba:	1861      	adds	r1, r4, r1
 80285bc:	9108      	str	r1, [sp, #32]
 80285be:	46c6      	mov	lr, r8
 80285c0:	4645      	mov	r5, r8
 80285c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80285c4:	9f08      	ldr	r7, [sp, #32]
 80285c6:	e756      	b.n	8028476 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80285c8:	46c6      	mov	lr, r8
 80285ca:	f8cd 8020 	str.w	r8, [sp, #32]
 80285ce:	4631      	mov	r1, r6
 80285d0:	4647      	mov	r7, r8
 80285d2:	e750      	b.n	8028476 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80285d4:	46c6      	mov	lr, r8
 80285d6:	f8cd 8020 	str.w	r8, [sp, #32]
 80285da:	4645      	mov	r5, r8
 80285dc:	4631      	mov	r1, r6
 80285de:	4647      	mov	r7, r8
 80285e0:	e749      	b.n	8028476 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80285e2:	469a      	mov	sl, r3
 80285e4:	e6d0      	b.n	8028388 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 80285e6:	2a00      	cmp	r2, #0
 80285e8:	f77f aece 	ble.w	8028388 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 80285ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80285f0:	ea4f 432b 	mov.w	r3, fp, asr #16
 80285f4:	1439      	asrs	r1, r7, #16
 80285f6:	4654      	mov	r4, sl
 80285f8:	9d30      	ldr	r5, [sp, #192]	@ 0xc0
 80285fa:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
 80285fe:	2b00      	cmp	r3, #0
 8028600:	f3cb 3003 	ubfx	r0, fp, #12, #4
 8028604:	f3c7 3203 	ubfx	r2, r7, #12, #4
 8028608:	db2f      	blt.n	802866a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802860a:	f106 3cff 	add.w	ip, r6, #4294967295
 802860e:	4563      	cmp	r3, ip
 8028610:	da2b      	bge.n	802866a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8028612:	2900      	cmp	r1, #0
 8028614:	db29      	blt.n	802866a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8028616:	f10e 3cff 	add.w	ip, lr, #4294967295
 802861a:	4561      	cmp	r1, ip
 802861c:	da25      	bge.n	802866a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802861e:	fa0f fa86 	sxth.w	sl, r6
 8028622:	fb01 330a 	mla	r3, r1, sl, r3
 8028626:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028628:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802862a:	f811 e003 	ldrb.w	lr, [r1, r3]
 802862e:	440b      	add	r3, r1
 8028630:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8028634:	eb06 0c0e 	add.w	ip, r6, lr
 8028638:	2800      	cmp	r0, #0
 802863a:	d052      	beq.n	80286e2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x426>
 802863c:	7859      	ldrb	r1, [r3, #1]
 802863e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028642:	1871      	adds	r1, r6, r1
 8028644:	910c      	str	r1, [sp, #48]	@ 0x30
 8028646:	2a00      	cmp	r2, #0
 8028648:	f000 80d5 	beq.w	80287f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53a>
 802864c:	eb03 010a 	add.w	r1, r3, sl
 8028650:	7849      	ldrb	r1, [r1, #1]
 8028652:	f813 300a 	ldrb.w	r3, [r3, sl]
 8028656:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802865a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802865e:	1871      	adds	r1, r6, r1
 8028660:	18f3      	adds	r3, r6, r3
 8028662:	9110      	str	r1, [sp, #64]	@ 0x40
 8028664:	9311      	str	r3, [sp, #68]	@ 0x44
 8028666:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8028668:	e042      	b.n	80286f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802866a:	f113 0c01 	adds.w	ip, r3, #1
 802866e:	d406      	bmi.n	802867e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028670:	45b4      	cmp	ip, r6
 8028672:	dc04      	bgt.n	802867e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028674:	f111 0c01 	adds.w	ip, r1, #1
 8028678:	d401      	bmi.n	802867e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802867a:	45f4      	cmp	ip, lr
 802867c:	dd1f      	ble.n	80286be <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 802867e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8028680:	f1b8 0f00 	cmp.w	r8, #0
 8028684:	f104 0403 	add.w	r4, r4, #3
 8028688:	44cb      	add	fp, r9
 802868a:	441f      	add	r7, r3
 802868c:	dd07      	ble.n	802869e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802868e:	e9d5 6e02 	ldrd	r6, lr, [r5, #8]
 8028692:	f108 38ff 	add.w	r8, r8, #4294967295
 8028696:	ea4f 432b 	mov.w	r3, fp, asr #16
 802869a:	1439      	asrs	r1, r7, #16
 802869c:	e7af      	b.n	80285fe <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802869e:	9b08      	ldr	r3, [sp, #32]
 80286a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80286a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80286a8:	3301      	adds	r3, #1
 80286aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80286ae:	449a      	add	sl, r3
 80286b0:	e66a      	b.n	8028388 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 80286b2:	3a01      	subs	r2, #1
 80286b4:	f8dd e020 	ldr.w	lr, [sp, #32]
 80286b8:	4690      	mov	r8, r2
 80286ba:	9208      	str	r2, [sp, #32]
 80286bc:	e79b      	b.n	80285f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80286be:	fa0f fe8e 	sxth.w	lr, lr
 80286c2:	b236      	sxth	r6, r6
 80286c4:	e9cd 6e00 	strd	r6, lr, [sp]
 80286c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80286ca:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80286ce:	e9cd 2605 	strd	r2, r6, [sp, #20]
 80286d2:	9302      	str	r3, [sp, #8]
 80286d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80286d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80286d8:	4621      	mov	r1, r4
 80286da:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80286dc:	f7ff fcd4 	bl	8028088 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80286e0:	e7cd      	b.n	802867e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80286e2:	2a00      	cmp	r2, #0
 80286e4:	d17b      	bne.n	80287de <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x522>
 80286e6:	4661      	mov	r1, ip
 80286e8:	e9cd cc10 	strd	ip, ip, [sp, #64]	@ 0x40
 80286ec:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 80286f0:	b283      	uxth	r3, r0
 80286f2:	b292      	uxth	r2, r2
 80286f4:	fb03 f602 	mul.w	r6, r3, r2
 80286f8:	011b      	lsls	r3, r3, #4
 80286fa:	7809      	ldrb	r1, [r1, #0]
 80286fc:	1b98      	subs	r0, r3, r6
 80286fe:	b280      	uxth	r0, r0
 8028700:	9012      	str	r0, [sp, #72]	@ 0x48
 8028702:	fb00 f101 	mul.w	r1, r0, r1
 8028706:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802870a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802870c:	b292      	uxth	r2, r2
 802870e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8028712:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8028716:	1a9b      	subs	r3, r3, r2
 8028718:	b29b      	uxth	r3, r3
 802871a:	fb03 110e 	mla	r1, r3, lr, r1
 802871e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028720:	f890 a000 	ldrb.w	sl, [r0]
 8028724:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028726:	fb02 110a 	mla	r1, r2, sl, r1
 802872a:	f890 e000 	ldrb.w	lr, [r0]
 802872e:	f894 a000 	ldrb.w	sl, [r4]
 8028732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028734:	fb06 110e 	mla	r1, r6, lr, r1
 8028738:	fb1a fa00 	smulbb	sl, sl, r0
 802873c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802873e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028742:	fb01 a100 	mla	r1, r1, r0, sl
 8028746:	b289      	uxth	r1, r1
 8028748:	f101 0e01 	add.w	lr, r1, #1
 802874c:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8028750:	1209      	asrs	r1, r1, #8
 8028752:	7021      	strb	r1, [r4, #0]
 8028754:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8028756:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8028758:	7849      	ldrb	r1, [r1, #1]
 802875a:	f89c e001 	ldrb.w	lr, [ip, #1]
 802875e:	fb00 f101 	mul.w	r1, r0, r1
 8028762:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028764:	fb03 110e 	mla	r1, r3, lr, r1
 8028768:	f890 a001 	ldrb.w	sl, [r0, #1]
 802876c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802876e:	fb02 110a 	mla	r1, r2, sl, r1
 8028772:	f890 e001 	ldrb.w	lr, [r0, #1]
 8028776:	f894 a001 	ldrb.w	sl, [r4, #1]
 802877a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802877c:	fb06 110e 	mla	r1, r6, lr, r1
 8028780:	fb1a fa00 	smulbb	sl, sl, r0
 8028784:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8028786:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802878a:	fb01 a100 	mla	r1, r1, r0, sl
 802878e:	b289      	uxth	r1, r1
 8028790:	f101 0e01 	add.w	lr, r1, #1
 8028794:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 8028798:	1209      	asrs	r1, r1, #8
 802879a:	7061      	strb	r1, [r4, #1]
 802879c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802879e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80287a0:	7889      	ldrb	r1, [r1, #2]
 80287a2:	f89c c002 	ldrb.w	ip, [ip, #2]
 80287a6:	fb00 f001 	mul.w	r0, r0, r1
 80287aa:	fb03 010c 	mla	r1, r3, ip, r0
 80287ae:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80287b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80287b2:	7880      	ldrb	r0, [r0, #2]
 80287b4:	789b      	ldrb	r3, [r3, #2]
 80287b6:	fb02 1100 	mla	r1, r2, r0, r1
 80287ba:	78a2      	ldrb	r2, [r4, #2]
 80287bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80287be:	fb06 1303 	mla	r3, r6, r3, r1
 80287c2:	fb12 f200 	smulbb	r2, r2, r0
 80287c6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80287c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80287cc:	fb03 2300 	mla	r3, r3, r0, r2
 80287d0:	b29b      	uxth	r3, r3
 80287d2:	1c5a      	adds	r2, r3, #1
 80287d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80287d8:	121b      	asrs	r3, r3, #8
 80287da:	70a3      	strb	r3, [r4, #2]
 80287dc:	e74f      	b.n	802867e <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80287de:	f813 300a 	ldrb.w	r3, [r3, sl]
 80287e2:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 80287e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80287ea:	18f3      	adds	r3, r6, r3
 80287ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80287ee:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 80287f2:	4661      	mov	r1, ip
 80287f4:	e77c      	b.n	80286f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80287f6:	e9cd cc10 	strd	ip, ip, [sp, #64]	@ 0x40
 80287fa:	e779      	b.n	80286f0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80287fc:	f43f adc4 	beq.w	8028388 <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xcc>
 8028800:	1e65      	subs	r5, r4, #1
 8028802:	e602      	b.n	802840a <_ZN8touchgfx8LCDGPU2D61TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>

08028804 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8028804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028808:	b083      	sub	sp, #12
 802880a:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	@ 0x30
 802880e:	f891 9001 	ldrb.w	r9, [r1, #1]
 8028812:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8028816:	7888      	ldrb	r0, [r1, #2]
 8028818:	fb07 6c08 	mla	ip, r7, r8, r6
 802881c:	ea4f 2909 	mov.w	r9, r9, lsl #8
 8028820:	780c      	ldrb	r4, [r1, #0]
 8028822:	ea49 4900 	orr.w	r9, r9, r0, lsl #16
 8028826:	ea49 0404 	orr.w	r4, r9, r4
 802882a:	2f00      	cmp	r7, #0
 802882c:	9401      	str	r4, [sp, #4]
 802882e:	eb02 090c 	add.w	r9, r2, ip
 8028832:	f107 0e01 	add.w	lr, r7, #1
 8028836:	f9bd a034 	ldrsh.w	sl, [sp, #52]	@ 0x34
 802883a:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 802883e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8028842:	db01      	blt.n	8028848 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x44>
 8028844:	45ba      	cmp	sl, r7
 8028846:	dc6e      	bgt.n	8028926 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x122>
 8028848:	fa5f fb84 	uxtb.w	fp, r4
 802884c:	af01      	add	r7, sp, #4
 802884e:	465a      	mov	r2, fp
 8028850:	46bc      	mov	ip, r7
 8028852:	f1be 0f00 	cmp.w	lr, #0
 8028856:	db01      	blt.n	802885c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x58>
 8028858:	45f2      	cmp	sl, lr
 802885a:	dc49      	bgt.n	80288f0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xec>
 802885c:	fa5f fa84 	uxtb.w	sl, r4
 8028860:	ab01      	add	r3, sp, #4
 8028862:	46d1      	mov	r9, sl
 8028864:	469e      	mov	lr, r3
 8028866:	280f      	cmp	r0, #15
 8028868:	f200 8098 	bhi.w	802899c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 802886c:	2d0f      	cmp	r5, #15
 802886e:	f200 8095 	bhi.w	802899c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 8028872:	b280      	uxth	r0, r0
 8028874:	b2ad      	uxth	r5, r5
 8028876:	fb00 f805 	mul.w	r8, r0, r5
 802887a:	0104      	lsls	r4, r0, #4
 802887c:	eba4 0608 	sub.w	r6, r4, r8
 8028880:	b2b6      	uxth	r6, r6
 8028882:	fb06 f002 	mul.w	r0, r6, r2
 8028886:	ebc8 1505 	rsb	r5, r8, r5, lsl #4
 802888a:	b2ad      	uxth	r5, r5
 802888c:	f5c4 7280 	rsb	r2, r4, #256	@ 0x100
 8028890:	1b52      	subs	r2, r2, r5
 8028892:	b292      	uxth	r2, r2
 8028894:	fb02 000b 	mla	r0, r2, fp, r0
 8028898:	fb05 000a 	mla	r0, r5, sl, r0
 802889c:	fb08 0009 	mla	r0, r8, r9, r0
 80288a0:	1200      	asrs	r0, r0, #8
 80288a2:	7008      	strb	r0, [r1, #0]
 80288a4:	f897 9001 	ldrb.w	r9, [r7, #1]
 80288a8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80288ac:	fb06 f909 	mul.w	r9, r6, r9
 80288b0:	fb02 9904 	mla	r9, r2, r4, r9
 80288b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80288b8:	7858      	ldrb	r0, [r3, #1]
 80288ba:	fb05 9404 	mla	r4, r5, r4, r9
 80288be:	fb08 4000 	mla	r0, r8, r0, r4
 80288c2:	1200      	asrs	r0, r0, #8
 80288c4:	7048      	strb	r0, [r1, #1]
 80288c6:	78bc      	ldrb	r4, [r7, #2]
 80288c8:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80288cc:	fb06 f604 	mul.w	r6, r6, r4
 80288d0:	fb02 6600 	mla	r6, r2, r0, r6
 80288d4:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80288d8:	789b      	ldrb	r3, [r3, #2]
 80288da:	fb05 6500 	mla	r5, r5, r0, r6
 80288de:	fb08 5803 	mla	r8, r8, r3, r5
 80288e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80288e6:	f881 8002 	strb.w	r8, [r1, #2]
 80288ea:	b003      	add	sp, #12
 80288ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288f0:	b385      	cbz	r5, 8028954 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x150>
 80288f2:	2e00      	cmp	r6, #0
 80288f4:	db40      	blt.n	8028978 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 80288f6:	45b0      	cmp	r8, r6
 80288f8:	dd3e      	ble.n	8028978 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x174>
 80288fa:	f819 e008 	ldrb.w	lr, [r9, r8]
 80288fe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8028902:	449e      	add	lr, r3
 8028904:	3601      	adds	r6, #1
 8028906:	f89e a000 	ldrb.w	sl, [lr]
 802890a:	d431      	bmi.n	8028970 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 802890c:	45b0      	cmp	r8, r6
 802890e:	dd2f      	ble.n	8028970 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x16c>
 8028910:	2800      	cmp	r0, #0
 8028912:	d03f      	beq.n	8028994 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x190>
 8028914:	44c8      	add	r8, r9
 8028916:	f898 4001 	ldrb.w	r4, [r8, #1]
 802891a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802891e:	f813 9004 	ldrb.w	r9, [r3, r4]
 8028922:	4423      	add	r3, r4
 8028924:	e79f      	b.n	8028866 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8028926:	2e00      	cmp	r6, #0
 8028928:	db01      	blt.n	802892e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 802892a:	45b0      	cmp	r8, r6
 802892c:	dc1a      	bgt.n	8028964 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>
 802892e:	f10d 0c04 	add.w	ip, sp, #4
 8028932:	1c72      	adds	r2, r6, #1
 8028934:	f89c b000 	ldrb.w	fp, [ip]
 8028938:	d409      	bmi.n	802894e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 802893a:	4590      	cmp	r8, r2
 802893c:	dd07      	ble.n	802894e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x14a>
 802893e:	b1f0      	cbz	r0, 802897e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x17a>
 8028940:	f899 7001 	ldrb.w	r7, [r9, #1]
 8028944:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8028948:	5dda      	ldrb	r2, [r3, r7]
 802894a:	441f      	add	r7, r3
 802894c:	e781      	b.n	8028852 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 802894e:	b2e2      	uxtb	r2, r4
 8028950:	af01      	add	r7, sp, #4
 8028952:	e77e      	b.n	8028852 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8028954:	280f      	cmp	r0, #15
 8028956:	fa5f fa84 	uxtb.w	sl, r4
 802895a:	d81f      	bhi.n	802899c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x198>
 802895c:	ab01      	add	r3, sp, #4
 802895e:	469e      	mov	lr, r3
 8028960:	46d1      	mov	r9, sl
 8028962:	e786      	b.n	8028872 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x6e>
 8028964:	f812 c00c 	ldrb.w	ip, [r2, ip]
 8028968:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802896c:	449c      	add	ip, r3
 802896e:	e7e0      	b.n	8028932 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8028970:	fa5f f984 	uxtb.w	r9, r4
 8028974:	ab01      	add	r3, sp, #4
 8028976:	e776      	b.n	8028866 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x62>
 8028978:	f10d 0e04 	add.w	lr, sp, #4
 802897c:	e7c2      	b.n	8028904 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x100>
 802897e:	f1be 0f00 	cmp.w	lr, #0
 8028982:	b2e2      	uxtb	r2, r4
 8028984:	af01      	add	r7, sp, #4
 8028986:	f6bf af67 	bge.w	8028858 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x54>
 802898a:	463b      	mov	r3, r7
 802898c:	46be      	mov	lr, r7
 802898e:	4691      	mov	r9, r2
 8028990:	4692      	mov	sl, r2
 8028992:	e76b      	b.n	802886c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8028994:	fa5f f984 	uxtb.w	r9, r4
 8028998:	ab01      	add	r3, sp, #4
 802899a:	e767      	b.n	802886c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802899c:	4b03      	ldr	r3, [pc, #12]	@ (80289ac <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1a8>)
 802899e:	4a04      	ldr	r2, [pc, #16]	@ (80289b0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1ac>)
 80289a0:	f240 31ca 	movw	r1, #970	@ 0x3ca
 80289a4:	4803      	ldr	r0, [pc, #12]	@ (80289b4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x1b0>)
 80289a6:	f003 f907 	bl	802bbb8 <__assert_func>
 80289aa:	bf00      	nop
 80289ac:	0802ef50 	.word	0x0802ef50
 80289b0:	0802f5cc 	.word	0x0802f5cc
 80289b4:	0802f0d8 	.word	0x0802f0d8

080289b8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80289b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289bc:	ed2d 8b0a 	vpush	{d8-d12}
 80289c0:	eeb0 aa40 	vmov.f32	s20, s0
 80289c4:	eef0 9a60 	vmov.f32	s19, s1
 80289c8:	eeb0 9a41 	vmov.f32	s18, s2
 80289cc:	eef0 8a62 	vmov.f32	s17, s5
 80289d0:	eeb0 8a43 	vmov.f32	s16, s6
 80289d4:	eeb0 ca44 	vmov.f32	s24, s8
 80289d8:	eef0 ba64 	vmov.f32	s23, s9
 80289dc:	eeb0 ba45 	vmov.f32	s22, s10
 80289e0:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 80289e4:	b093      	sub	sp, #76	@ 0x4c
 80289e6:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80289ea:	e9dd 412b 	ldrd	r4, r1, [sp, #172]	@ 0xac
 80289ee:	e9dd 9b27 	ldrd	r9, fp, [sp, #156]	@ 0x9c
 80289f2:	9011      	str	r0, [sp, #68]	@ 0x44
 80289f4:	461a      	mov	r2, r3
 80289f6:	6860      	ldr	r0, [r4, #4]
 80289f8:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80289fa:	fb00 1803 	mla	r8, r0, r3, r1
 80289fe:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028a00:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8028a02:	6821      	ldr	r1, [r4, #0]
 8028a04:	685b      	ldr	r3, [r3, #4]
 8028a06:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8028a0a:	6800      	ldr	r0, [r0, #0]
 8028a0c:	eb01 0a08 	add.w	sl, r1, r8
 8028a10:	3304      	adds	r3, #4
 8028a12:	f8dd 80a4 	ldr.w	r8, [sp, #164]	@ 0xa4
 8028a16:	9009      	str	r0, [sp, #36]	@ 0x24
 8028a18:	9307      	str	r3, [sp, #28]
 8028a1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028a1c:	2b00      	cmp	r3, #0
 8028a1e:	dc02      	bgt.n	8028a26 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028a20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028a22:	2b00      	cmp	r3, #0
 8028a24:	dd61      	ble.n	8028aea <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8028a26:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028a28:	2a00      	cmp	r2, #0
 8028a2a:	e9d3 6e02 	ldrd	r6, lr, [r3, #8]
 8028a2e:	b230      	sxth	r0, r6
 8028a30:	fa0f f78e 	sxth.w	r7, lr
 8028a34:	f340 81fe 	ble.w	8028e34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47c>
 8028a38:	f8cd e018 	str.w	lr, [sp, #24]
 8028a3c:	f8dd e0a8 	ldr.w	lr, [sp, #168]	@ 0xa8
 8028a40:	1e45      	subs	r5, r0, #1
 8028a42:	f107 3cff 	add.w	ip, r7, #4294967295
 8028a46:	ea5f 4329 	movs.w	r3, r9, asr #16
 8028a4a:	ea4f 412b 	mov.w	r1, fp, asr #16
 8028a4e:	d405      	bmi.n	8028a5c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8028a50:	42ab      	cmp	r3, r5
 8028a52:	da03      	bge.n	8028a5c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8028a54:	2900      	cmp	r1, #0
 8028a56:	db01      	blt.n	8028a5c <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8028a58:	4561      	cmp	r1, ip
 8028a5a:	db4b      	blt.n	8028af4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8028a5c:	1c5c      	adds	r4, r3, #1
 8028a5e:	d406      	bmi.n	8028a6e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028a60:	4284      	cmp	r4, r0
 8028a62:	dc04      	bgt.n	8028a6e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028a64:	1c4c      	adds	r4, r1, #1
 8028a66:	d402      	bmi.n	8028a6e <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8028a68:	42bc      	cmp	r4, r7
 8028a6a:	f340 815e 	ble.w	8028d2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8028a6e:	3a01      	subs	r2, #1
 8028a70:	44c1      	add	r9, r8
 8028a72:	44f3      	add	fp, lr
 8028a74:	f10a 0a03 	add.w	sl, sl, #3
 8028a78:	d1e5      	bne.n	8028a46 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028a7c:	2b00      	cmp	r3, #0
 8028a7e:	dd34      	ble.n	8028aea <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8028a80:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8028a84:	ee79 9aab 	vadd.f32	s19, s19, s23
 8028a88:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8028a8c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8028a90:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8028a94:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028a98:	ee76 6a68 	vsub.f32	s13, s12, s17
 8028a9c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8028aa0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028aa4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028aa8:	ee16 2a90 	vmov	r2, s13
 8028aac:	3b01      	subs	r3, #1
 8028aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8028ab0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028ab2:	fb92 f8f3 	sdiv	r8, r2, r3
 8028ab6:	ee17 2a10 	vmov	r2, s14
 8028aba:	eeb0 7a48 	vmov.f32	s14, s16
 8028abe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028ac2:	ee17 ba10 	vmov	fp, s14
 8028ac6:	eeb0 7a68 	vmov.f32	s14, s17
 8028aca:	fb92 f3f3 	sdiv	r3, r2, r3
 8028ace:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8028ad2:	932a      	str	r3, [sp, #168]	@ 0xa8
 8028ad4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8028ad6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028ad8:	ee17 9a10 	vmov	r9, s14
 8028adc:	eeb0 8a67 	vmov.f32	s16, s15
 8028ae0:	eef0 8a46 	vmov.f32	s17, s12
 8028ae4:	bf18      	it	ne
 8028ae6:	461a      	movne	r2, r3
 8028ae8:	e797      	b.n	8028a1a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8028aea:	b013      	add	sp, #76	@ 0x4c
 8028aec:	ecbd 8b0a 	vpop	{d8-d12}
 8028af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028af4:	f8dd e018 	ldr.w	lr, [sp, #24]
 8028af8:	1e51      	subs	r1, r2, #1
 8028afa:	fb08 9301 	mla	r3, r8, r1, r9
 8028afe:	141b      	asrs	r3, r3, #16
 8028b00:	9106      	str	r1, [sp, #24]
 8028b02:	f100 80aa 	bmi.w	8028c5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8028b06:	42ab      	cmp	r3, r5
 8028b08:	f280 80a7 	bge.w	8028c5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8028b0c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8028b0e:	fb03 b301 	mla	r3, r3, r1, fp
 8028b12:	141b      	asrs	r3, r3, #16
 8028b14:	f100 80a1 	bmi.w	8028c5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8028b18:	3f01      	subs	r7, #1
 8028b1a:	42bb      	cmp	r3, r7
 8028b1c:	f280 809d 	bge.w	8028c5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8028b20:	2a00      	cmp	r2, #0
 8028b22:	ddaa      	ble.n	8028a7a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8028b24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8028b28:	eb0a 0302 	add.w	r3, sl, r2
 8028b2c:	9308      	str	r3, [sp, #32]
 8028b2e:	f10a 0a03 	add.w	sl, sl, #3
 8028b32:	f8cd 80a4 	str.w	r8, [sp, #164]	@ 0xa4
 8028b36:	e062      	b.n	8028bfe <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028b38:	784c      	ldrb	r4, [r1, #1]
 8028b3a:	180d      	adds	r5, r1, r0
 8028b3c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028b40:	4434      	add	r4, r6
 8028b42:	2a00      	cmp	r2, #0
 8028b44:	d07c      	beq.n	8028c40 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8028b46:	5c08      	ldrb	r0, [r1, r0]
 8028b48:	786f      	ldrb	r7, [r5, #1]
 8028b4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028b4e:	1981      	adds	r1, r0, r6
 8028b50:	4608      	mov	r0, r1
 8028b52:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8028b56:	9106      	str	r1, [sp, #24]
 8028b58:	4437      	add	r7, r6
 8028b5a:	b29b      	uxth	r3, r3
 8028b5c:	b292      	uxth	r2, r2
 8028b5e:	fb03 f502 	mul.w	r5, r3, r2
 8028b62:	011b      	lsls	r3, r3, #4
 8028b64:	f894 e000 	ldrb.w	lr, [r4]
 8028b68:	1b59      	subs	r1, r3, r5
 8028b6a:	b289      	uxth	r1, r1
 8028b6c:	fb01 fe0e 	mul.w	lr, r1, lr
 8028b70:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8028b74:	b292      	uxth	r2, r2
 8028b76:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8028b7a:	f816 6008 	ldrb.w	r6, [r6, r8]
 8028b7e:	1a9b      	subs	r3, r3, r2
 8028b80:	b29b      	uxth	r3, r3
 8028b82:	fb03 e606 	mla	r6, r3, r6, lr
 8028b86:	f890 e000 	ldrb.w	lr, [r0]
 8028b8a:	f897 8000 	ldrb.w	r8, [r7]
 8028b8e:	fb02 660e 	mla	r6, r2, lr, r6
 8028b92:	fb05 6808 	mla	r8, r5, r8, r6
 8028b96:	ea4f 2828 	mov.w	r8, r8, asr #8
 8028b9a:	f80a 8c03 	strb.w	r8, [sl, #-3]
 8028b9e:	f894 8001 	ldrb.w	r8, [r4, #1]
 8028ba2:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8028ba4:	fb01 f608 	mul.w	r6, r1, r8
 8028ba8:	f89c e001 	ldrb.w	lr, [ip, #1]
 8028bac:	4481      	add	r9, r0
 8028bae:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8028bb0:	fb03 680e 	mla	r8, r3, lr, r6
 8028bb4:	4483      	add	fp, r0
 8028bb6:	9806      	ldr	r0, [sp, #24]
 8028bb8:	787e      	ldrb	r6, [r7, #1]
 8028bba:	f890 e001 	ldrb.w	lr, [r0, #1]
 8028bbe:	fb02 8e0e 	mla	lr, r2, lr, r8
 8028bc2:	fb05 ee06 	mla	lr, r5, r6, lr
 8028bc6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8028bca:	f80a ec02 	strb.w	lr, [sl, #-2]
 8028bce:	78a4      	ldrb	r4, [r4, #2]
 8028bd0:	f89c 6002 	ldrb.w	r6, [ip, #2]
 8028bd4:	fb01 f104 	mul.w	r1, r1, r4
 8028bd8:	fb03 1106 	mla	r1, r3, r6, r1
 8028bdc:	7883      	ldrb	r3, [r0, #2]
 8028bde:	78b8      	ldrb	r0, [r7, #2]
 8028be0:	fb02 1103 	mla	r1, r2, r3, r1
 8028be4:	fb05 1500 	mla	r5, r5, r0, r1
 8028be8:	9b08      	ldr	r3, [sp, #32]
 8028bea:	122d      	asrs	r5, r5, #8
 8028bec:	4553      	cmp	r3, sl
 8028bee:	f80a 5c01 	strb.w	r5, [sl, #-1]
 8028bf2:	d030      	beq.n	8028c56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8028bf4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8028bf6:	f10a 0a03 	add.w	sl, sl, #3
 8028bfa:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8028bfe:	ea4f 4329 	mov.w	r3, r9, asr #16
 8028c02:	ea4f 412b 	mov.w	r1, fp, asr #16
 8028c06:	fb00 3101 	mla	r1, r0, r1, r3
 8028c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028c0c:	9e07      	ldr	r6, [sp, #28]
 8028c0e:	f812 8001 	ldrb.w	r8, [r2, r1]
 8028c12:	f3c9 3303 	ubfx	r3, r9, #12, #4
 8028c16:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8028c1a:	4411      	add	r1, r2
 8028c1c:	eb06 0c08 	add.w	ip, r6, r8
 8028c20:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8028c24:	2b00      	cmp	r3, #0
 8028c26:	d187      	bne.n	8028b38 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 8028c28:	b17a      	cbz	r2, 8028c4a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8028c2a:	5c08      	ldrb	r0, [r1, r0]
 8028c2c:	9907      	ldr	r1, [sp, #28]
 8028c2e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028c32:	1841      	adds	r1, r0, r1
 8028c34:	4667      	mov	r7, ip
 8028c36:	9106      	str	r1, [sp, #24]
 8028c38:	4664      	mov	r4, ip
 8028c3a:	9e07      	ldr	r6, [sp, #28]
 8028c3c:	4608      	mov	r0, r1
 8028c3e:	e78c      	b.n	8028b5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028c40:	4667      	mov	r7, ip
 8028c42:	f8cd c018 	str.w	ip, [sp, #24]
 8028c46:	4660      	mov	r0, ip
 8028c48:	e787      	b.n	8028b5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028c4a:	4667      	mov	r7, ip
 8028c4c:	f8cd c018 	str.w	ip, [sp, #24]
 8028c50:	4664      	mov	r4, ip
 8028c52:	4660      	mov	r0, ip
 8028c54:	e781      	b.n	8028b5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028c56:	469a      	mov	sl, r3
 8028c58:	e70f      	b.n	8028a7a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8028c5a:	2a00      	cmp	r2, #0
 8028c5c:	f77f af0d 	ble.w	8028a7a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8028c60:	9d06      	ldr	r5, [sp, #24]
 8028c62:	ea4f 4329 	mov.w	r3, r9, asr #16
 8028c66:	ea4f 412b 	mov.w	r1, fp, asr #16
 8028c6a:	4657      	mov	r7, sl
 8028c6c:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
 8028c70:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 8028c72:	f8dd a0a8 	ldr.w	sl, [sp, #168]	@ 0xa8
 8028c76:	2b00      	cmp	r3, #0
 8028c78:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8028c7c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8028c80:	db31      	blt.n	8028ce6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8028c82:	f106 3cff 	add.w	ip, r6, #4294967295
 8028c86:	4563      	cmp	r3, ip
 8028c88:	da2d      	bge.n	8028ce6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8028c8a:	2900      	cmp	r1, #0
 8028c8c:	db2b      	blt.n	8028ce6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8028c8e:	f10e 3cff 	add.w	ip, lr, #4294967295
 8028c92:	4561      	cmp	r1, ip
 8028c94:	da27      	bge.n	8028ce6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8028c96:	fa0f fc86 	sxth.w	ip, r6
 8028c9a:	fb01 330c 	mla	r3, r1, ip, r3
 8028c9e:	9e07      	ldr	r6, [sp, #28]
 8028ca0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028ca2:	f811 e003 	ldrb.w	lr, [r1, r3]
 8028ca6:	440b      	add	r3, r1
 8028ca8:	4631      	mov	r1, r6
 8028caa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8028cae:	4471      	add	r1, lr
 8028cb0:	910e      	str	r1, [sp, #56]	@ 0x38
 8028cb2:	2800      	cmp	r0, #0
 8028cb4:	d04f      	beq.n	8028d56 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028cb6:	7859      	ldrb	r1, [r3, #1]
 8028cb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028cbc:	1871      	adds	r1, r6, r1
 8028cbe:	9108      	str	r1, [sp, #32]
 8028cc0:	2a00      	cmp	r2, #0
 8028cc2:	f000 80b2 	beq.w	8028e2a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8028cc6:	eb03 010c 	add.w	r1, r3, ip
 8028cca:	f813 600c 	ldrb.w	r6, [r3, ip]
 8028cce:	7849      	ldrb	r1, [r1, #1]
 8028cd0:	9b07      	ldr	r3, [sp, #28]
 8028cd2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8028cd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8028cda:	1859      	adds	r1, r3, r1
 8028cdc:	18f3      	adds	r3, r6, r3
 8028cde:	910c      	str	r1, [sp, #48]	@ 0x30
 8028ce0:	930d      	str	r3, [sp, #52]	@ 0x34
 8028ce2:	9e08      	ldr	r6, [sp, #32]
 8028ce4:	e03d      	b.n	8028d62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8028ce6:	f113 0c01 	adds.w	ip, r3, #1
 8028cea:	d406      	bmi.n	8028cfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028cec:	45b4      	cmp	ip, r6
 8028cee:	dc04      	bgt.n	8028cfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028cf0:	f111 0c01 	adds.w	ip, r1, #1
 8028cf4:	d401      	bmi.n	8028cfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028cf6:	45f4      	cmp	ip, lr
 8028cf8:	dd1d      	ble.n	8028d36 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8028cfa:	2d00      	cmp	r5, #0
 8028cfc:	f107 0703 	add.w	r7, r7, #3
 8028d00:	44c1      	add	r9, r8
 8028d02:	44d3      	add	fp, sl
 8028d04:	dd07      	ble.n	8028d16 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8028d06:	e9d4 6e02 	ldrd	r6, lr, [r4, #8]
 8028d0a:	3d01      	subs	r5, #1
 8028d0c:	ea4f 4329 	mov.w	r3, r9, asr #16
 8028d10:	ea4f 412b 	mov.w	r1, fp, asr #16
 8028d14:	e7af      	b.n	8028c76 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8028d16:	9b06      	ldr	r3, [sp, #24]
 8028d18:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8028d1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8028d20:	3301      	adds	r3, #1
 8028d22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028d26:	449a      	add	sl, r3
 8028d28:	e6a7      	b.n	8028a7a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8028d2a:	3a01      	subs	r2, #1
 8028d2c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8028d30:	4615      	mov	r5, r2
 8028d32:	9206      	str	r2, [sp, #24]
 8028d34:	e799      	b.n	8028c6a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8028d36:	fa0f fe8e 	sxth.w	lr, lr
 8028d3a:	b236      	sxth	r6, r6
 8028d3c:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8028d40:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8028d44:	e9cd 6e00 	strd	r6, lr, [sp]
 8028d48:	9b07      	ldr	r3, [sp, #28]
 8028d4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028d4c:	4639      	mov	r1, r7
 8028d4e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028d50:	f7ff fd58 	bl	8028804 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8028d54:	e7d1      	b.n	8028cfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028d56:	2a00      	cmp	r2, #0
 8028d58:	d15b      	bne.n	8028e12 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8028d5a:	460e      	mov	r6, r1
 8028d5c:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 8028d60:	9108      	str	r1, [sp, #32]
 8028d62:	b283      	uxth	r3, r0
 8028d64:	b292      	uxth	r2, r2
 8028d66:	fb03 f002 	mul.w	r0, r3, r2
 8028d6a:	011b      	lsls	r3, r3, #4
 8028d6c:	f896 c000 	ldrb.w	ip, [r6]
 8028d70:	1a19      	subs	r1, r3, r0
 8028d72:	b289      	uxth	r1, r1
 8028d74:	fb01 fc0c 	mul.w	ip, r1, ip
 8028d78:	9e07      	ldr	r6, [sp, #28]
 8028d7a:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 8028d7e:	b292      	uxth	r2, r2
 8028d80:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8028d84:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8028d88:	1a9b      	subs	r3, r3, r2
 8028d8a:	b29b      	uxth	r3, r3
 8028d8c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028d90:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8028d92:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8028d96:	f896 e000 	ldrb.w	lr, [r6]
 8028d9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028d9c:	f896 c000 	ldrb.w	ip, [r6]
 8028da0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8028da2:	fb02 6e0e 	mla	lr, r2, lr, r6
 8028da6:	fb00 ec0c 	mla	ip, r0, ip, lr
 8028daa:	9e08      	ldr	r6, [sp, #32]
 8028dac:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8028db0:	f887 c000 	strb.w	ip, [r7]
 8028db4:	f896 c001 	ldrb.w	ip, [r6, #1]
 8028db8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8028dba:	fb01 fc0c 	mul.w	ip, r1, ip
 8028dbe:	f896 e001 	ldrb.w	lr, [r6, #1]
 8028dc2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8028dc4:	fb03 ce0e 	mla	lr, r3, lr, ip
 8028dc8:	f896 c001 	ldrb.w	ip, [r6, #1]
 8028dcc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028dce:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8028dd2:	f896 c001 	ldrb.w	ip, [r6, #1]
 8028dd6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8028dd8:	fb02 ee06 	mla	lr, r2, r6, lr
 8028ddc:	fb00 ec0c 	mla	ip, r0, ip, lr
 8028de0:	9e08      	ldr	r6, [sp, #32]
 8028de2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8028de6:	f887 c001 	strb.w	ip, [r7, #1]
 8028dea:	f896 c002 	ldrb.w	ip, [r6, #2]
 8028dee:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8028df0:	fb01 f10c 	mul.w	r1, r1, ip
 8028df4:	f896 e002 	ldrb.w	lr, [r6, #2]
 8028df8:	fb03 110e 	mla	r1, r3, lr, r1
 8028dfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028dfe:	789e      	ldrb	r6, [r3, #2]
 8028e00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8028e02:	fb02 1206 	mla	r2, r2, r6, r1
 8028e06:	789b      	ldrb	r3, [r3, #2]
 8028e08:	fb00 2303 	mla	r3, r0, r3, r2
 8028e0c:	121b      	asrs	r3, r3, #8
 8028e0e:	70bb      	strb	r3, [r7, #2]
 8028e10:	e773      	b.n	8028cfa <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028e12:	4631      	mov	r1, r6
 8028e14:	f813 600c 	ldrb.w	r6, [r3, ip]
 8028e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028e1a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8028e1e:	1871      	adds	r1, r6, r1
 8028e20:	930c      	str	r3, [sp, #48]	@ 0x30
 8028e22:	910d      	str	r1, [sp, #52]	@ 0x34
 8028e24:	9308      	str	r3, [sp, #32]
 8028e26:	461e      	mov	r6, r3
 8028e28:	e79b      	b.n	8028d62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8028e2a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8028e2c:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8028e30:	460e      	mov	r6, r1
 8028e32:	e796      	b.n	8028d62 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8028e34:	f43f ae21 	beq.w	8028a7a <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8028e38:	1e45      	subs	r5, r0, #1
 8028e3a:	e65d      	b.n	8028af8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_24BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>

08028e3c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8028e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e40:	b087      	sub	sp, #28
 8028e42:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 8028e46:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8028e4a:	fb06 080c 	mla	r8, r6, ip, r0
 8028e4e:	2e00      	cmp	r6, #0
 8028e50:	4696      	mov	lr, r2
 8028e52:	eb02 0a08 	add.w	sl, r2, r8
 8028e56:	f106 0b01 	add.w	fp, r6, #1
 8028e5a:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	@ 0x44
 8028e5e:	f89d 7050 	ldrb.w	r7, [sp, #80]	@ 0x50
 8028e62:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8028e66:	f89d 4058 	ldrb.w	r4, [sp, #88]	@ 0x58
 8028e6a:	db02      	blt.n	8028e72 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8028e6c:	42b2      	cmp	r2, r6
 8028e6e:	f300 80f1 	bgt.w	8029054 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x218>
 8028e72:	2600      	movs	r6, #0
 8028e74:	46b1      	mov	r9, r6
 8028e76:	46b0      	mov	r8, r6
 8028e78:	46b6      	mov	lr, r6
 8028e7a:	f1bb 0f00 	cmp.w	fp, #0
 8028e7e:	db02      	blt.n	8028e86 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x4a>
 8028e80:	455a      	cmp	r2, fp
 8028e82:	f300 8101 	bgt.w	8029088 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8028e86:	f04f 0c00 	mov.w	ip, #0
 8028e8a:	e9cd cc02 	strd	ip, ip, [sp, #8]
 8028e8e:	f8cd c004 	str.w	ip, [sp, #4]
 8028e92:	2f0f      	cmp	r7, #15
 8028e94:	f200 813a 	bhi.w	802910c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8028e98:	2d0f      	cmp	r5, #15
 8028e9a:	f200 8137 	bhi.w	802910c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 8028e9e:	b2a8      	uxth	r0, r5
 8028ea0:	b2bb      	uxth	r3, r7
 8028ea2:	fb00 f503 	mul.w	r5, r0, r3
 8028ea6:	9a01      	ldr	r2, [sp, #4]
 8028ea8:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 8028eac:	b280      	uxth	r0, r0
 8028eae:	fb00 fa02 	mul.w	sl, r0, r2
 8028eb2:	fb05 fb0c 	mul.w	fp, r5, ip
 8028eb6:	011b      	lsls	r3, r3, #4
 8028eb8:	1b5f      	subs	r7, r3, r5
 8028eba:	b2bf      	uxth	r7, r7
 8028ebc:	fb07 f206 	mul.w	r2, r7, r6
 8028ec0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8028ec4:	1a1b      	subs	r3, r3, r0
 8028ec6:	b29b      	uxth	r3, r3
 8028ec8:	fb03 2209 	mla	r2, r3, r9, r2
 8028ecc:	4452      	add	r2, sl
 8028ece:	445a      	add	r2, fp
 8028ed0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028ed4:	2a00      	cmp	r2, #0
 8028ed6:	f000 80ba 	beq.w	802904e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x212>
 8028eda:	b2a4      	uxth	r4, r4
 8028edc:	fb02 f204 	mul.w	r2, r2, r4
 8028ee0:	f102 0a01 	add.w	sl, r2, #1
 8028ee4:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8028ee8:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8028eec:	9205      	str	r2, [sp, #20]
 8028eee:	f008 12ff 	and.w	r2, r8, #16711935	@ 0xff00ff
 8028ef2:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8028ef6:	fb06 f202 	mul.w	r2, r6, r2
 8028efa:	fb06 f608 	mul.w	r6, r6, r8
 8028efe:	f00e 1bff 	and.w	fp, lr, #16711935	@ 0xff00ff
 8028f02:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028f06:	fb09 fb0b 	mul.w	fp, r9, fp
 8028f0a:	fb09 fe0e 	mul.w	lr, r9, lr
 8028f0e:	f506 7980 	add.w	r9, r6, #256	@ 0x100
 8028f12:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8028f16:	0a36      	lsrs	r6, r6, #8
 8028f18:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8028f1c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8028f20:	fb07 f606 	mul.w	r6, r7, r6
 8028f24:	9404      	str	r4, [sp, #16]
 8028f26:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 8028f2a:	9c03      	ldr	r4, [sp, #12]
 8028f2c:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8028f30:	4490      	add	r8, r2
 8028f32:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028f36:	f004 12ff 	and.w	r2, r4, #16711935	@ 0xff00ff
 8028f3a:	fb0c f202 	mul.w	r2, ip, r2
 8028f3e:	f404 497f 	and.w	r9, r4, #65280	@ 0xff00
 8028f42:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 8028f46:	9c02      	ldr	r4, [sp, #8]
 8028f48:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8028f4c:	fb0c fc09 	mul.w	ip, ip, r9
 8028f50:	fb08 f807 	mul.w	r8, r8, r7
 8028f54:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 8028f58:	9603      	str	r6, [sp, #12]
 8028f5a:	f50e 7980 	add.w	r9, lr, #256	@ 0x100
 8028f5e:	9e01      	ldr	r6, [sp, #4]
 8028f60:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028f64:	44d3      	add	fp, sl
 8028f66:	eb09 2e1e 	add.w	lr, r9, lr, lsr #8
 8028f6a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8028f6e:	f404 497f 	and.w	r9, r4, #65280	@ 0xff00
 8028f72:	fb06 f707 	mul.w	r7, r6, r7
 8028f76:	fb06 f909 	mul.w	r9, r6, r9
 8028f7a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028f7e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028f82:	9e03      	ldr	r6, [sp, #12]
 8028f84:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8028f88:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 8028f8c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028f90:	fb0b 8803 	mla	r8, fp, r3, r8
 8028f94:	fb03 660e 	mla	r6, r3, lr, r6
 8028f98:	f102 1201 	add.w	r2, r2, #65537	@ 0x10001
 8028f9c:	f50c 7e80 	add.w	lr, ip, #256	@ 0x100
 8028fa0:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 8028fa4:	4492      	add	sl, r2
 8028fa6:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8028faa:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8028fae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028fb2:	0a3a      	lsrs	r2, r7, #8
 8028fb4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8028fb8:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028fbc:	fb0b 8b05 	mla	fp, fp, r5, r8
 8028fc0:	fb05 660e 	mla	r6, r5, lr, r6
 8028fc4:	f002 18ff 	and.w	r8, r2, #16711935	@ 0xff00ff
 8028fc8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8028fcc:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8028fd0:	44b8      	add	r8, r7
 8028fd2:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8028fd6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028fda:	0a2d      	lsrs	r5, r5, #8
 8028fdc:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8028fe0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028fe4:	fb00 6505 	mla	r5, r0, r5, r6
 8028fe8:	fb08 b800 	mla	r8, r8, r0, fp
 8028fec:	0a2d      	lsrs	r5, r5, #8
 8028fee:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8028ff2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8028ff6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8028ffa:	4328      	orrs	r0, r5
 8028ffc:	784b      	ldrb	r3, [r1, #1]
 8028ffe:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8029002:	9c04      	ldr	r4, [sp, #16]
 8029004:	788d      	ldrb	r5, [r1, #2]
 8029006:	fa5f fa80 	uxtb.w	sl, r0
 802900a:	fb13 f602 	smulbb	r6, r3, r2
 802900e:	fb15 f502 	smulbb	r5, r5, r2
 8029012:	fb1a fa04 	smulbb	sl, sl, r4
 8029016:	780f      	ldrb	r7, [r1, #0]
 8029018:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 802901c:	0c00      	lsrs	r0, r0, #16
 802901e:	fb0c 6304 	mla	r3, ip, r4, r6
 8029022:	fb07 a202 	mla	r2, r7, r2, sl
 8029026:	fb00 5404 	mla	r4, r0, r4, r5
 802902a:	b29b      	uxth	r3, r3
 802902c:	b292      	uxth	r2, r2
 802902e:	b2a4      	uxth	r4, r4
 8029030:	1c56      	adds	r6, r2, #1
 8029032:	1c5d      	adds	r5, r3, #1
 8029034:	1c60      	adds	r0, r4, #1
 8029036:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802903a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 802903e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8029042:	1212      	asrs	r2, r2, #8
 8029044:	121b      	asrs	r3, r3, #8
 8029046:	1224      	asrs	r4, r4, #8
 8029048:	700a      	strb	r2, [r1, #0]
 802904a:	704b      	strb	r3, [r1, #1]
 802904c:	708c      	strb	r4, [r1, #2]
 802904e:	b007      	add	sp, #28
 8029050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029054:	2800      	cmp	r0, #0
 8029056:	db01      	blt.n	802905c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x220>
 8029058:	4584      	cmp	ip, r0
 802905a:	dc3d      	bgt.n	80290d8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>
 802905c:	f04f 0900 	mov.w	r9, #0
 8029060:	46ce      	mov	lr, r9
 8029062:	1c46      	adds	r6, r0, #1
 8029064:	d42a      	bmi.n	80290bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 8029066:	45b4      	cmp	ip, r6
 8029068:	dd28      	ble.n	80290bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x280>
 802906a:	b137      	cbz	r7, 802907a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x23e>
 802906c:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8029070:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8029074:	ea4f 6618 	mov.w	r6, r8, lsr #24
 8029078:	e6ff      	b.n	8028e7a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 802907a:	f1bb 0f00 	cmp.w	fp, #0
 802907e:	db3e      	blt.n	80290fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8029080:	455a      	cmp	r2, fp
 8029082:	dd3c      	ble.n	80290fe <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2c2>
 8029084:	463e      	mov	r6, r7
 8029086:	46b8      	mov	r8, r7
 8029088:	b1dd      	cbz	r5, 80290c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x286>
 802908a:	2800      	cmp	r0, #0
 802908c:	db30      	blt.n	80290f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 802908e:	4584      	cmp	ip, r0
 8029090:	dd2e      	ble.n	80290f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2b4>
 8029092:	f81a 200c 	ldrb.w	r2, [sl, ip]
 8029096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802909a:	9202      	str	r2, [sp, #8]
 802909c:	0e12      	lsrs	r2, r2, #24
 802909e:	9201      	str	r2, [sp, #4]
 80290a0:	3001      	adds	r0, #1
 80290a2:	d420      	bmi.n	80290e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 80290a4:	4584      	cmp	ip, r0
 80290a6:	dd1e      	ble.n	80290e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2aa>
 80290a8:	b337      	cbz	r7, 80290f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2bc>
 80290aa:	44d4      	add	ip, sl
 80290ac:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80290b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80290b4:	9303      	str	r3, [sp, #12]
 80290b6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80290ba:	e6ea      	b.n	8028e92 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 80290bc:	2600      	movs	r6, #0
 80290be:	46b0      	mov	r8, r6
 80290c0:	e6db      	b.n	8028e7a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80290c2:	2f0f      	cmp	r7, #15
 80290c4:	d822      	bhi.n	802910c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2d0>
 80290c6:	b2bb      	uxth	r3, r7
 80290c8:	4628      	mov	r0, r5
 80290ca:	46ab      	mov	fp, r5
 80290cc:	46aa      	mov	sl, r5
 80290ce:	e9cd 5502 	strd	r5, r5, [sp, #8]
 80290d2:	46ac      	mov	ip, r5
 80290d4:	9501      	str	r5, [sp, #4]
 80290d6:	e6ee      	b.n	8028eb6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 80290d8:	f81e 6008 	ldrb.w	r6, [lr, r8]
 80290dc:	f853 e026 	ldr.w	lr, [r3, r6, lsl #2]
 80290e0:	ea4f 691e 	mov.w	r9, lr, lsr #24
 80290e4:	e7bd      	b.n	8029062 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x226>
 80290e6:	f04f 0c00 	mov.w	ip, #0
 80290ea:	f8cd c00c 	str.w	ip, [sp, #12]
 80290ee:	e6d0      	b.n	8028e92 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x56>
 80290f0:	2200      	movs	r2, #0
 80290f2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80290f6:	e7d3      	b.n	80290a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80290f8:	9703      	str	r7, [sp, #12]
 80290fa:	46bc      	mov	ip, r7
 80290fc:	e6cc      	b.n	8028e98 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 80290fe:	46b8      	mov	r8, r7
 8029100:	e9cd 7702 	strd	r7, r7, [sp, #8]
 8029104:	46bc      	mov	ip, r7
 8029106:	9701      	str	r7, [sp, #4]
 8029108:	463e      	mov	r6, r7
 802910a:	e6c5      	b.n	8028e98 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x5c>
 802910c:	4b03      	ldr	r3, [pc, #12]	@ (802911c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e0>)
 802910e:	4a04      	ldr	r2, [pc, #16]	@ (8029120 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e4>)
 8029110:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8029114:	4803      	ldr	r0, [pc, #12]	@ (8029124 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2e8>)
 8029116:	f002 fd4f 	bl	802bbb8 <__assert_func>
 802911a:	bf00      	nop
 802911c:	0802ef50 	.word	0x0802ef50
 8029120:	0802f5cc 	.word	0x0802f5cc
 8029124:	0802f0d8 	.word	0x0802f0d8

08029128 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802912c:	ed2d 8b08 	vpush	{d8-d11}
 8029130:	b0a9      	sub	sp, #164	@ 0xa4
 8029132:	9c3f      	ldr	r4, [sp, #252]	@ 0xfc
 8029134:	9022      	str	r0, [sp, #136]	@ 0x88
 8029136:	9114      	str	r1, [sp, #80]	@ 0x50
 8029138:	6860      	ldr	r0, [r4, #4]
 802913a:	9940      	ldr	r1, [sp, #256]	@ 0x100
 802913c:	9217      	str	r2, [sp, #92]	@ 0x5c
 802913e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8029140:	eeb0 aa40 	vmov.f32	s20, s0
 8029144:	fb00 1b02 	mla	fp, r0, r2, r1
 8029148:	6821      	ldr	r1, [r4, #0]
 802914a:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 802914e:	eb01 0800 	add.w	r8, r1, r0
 8029152:	e9dd ab3b 	ldrd	sl, fp, [sp, #236]	@ 0xec
 8029156:	eef0 9a60 	vmov.f32	s19, s1
 802915a:	eeb0 9a41 	vmov.f32	s18, s2
 802915e:	eef0 8a62 	vmov.f32	s17, s5
 8029162:	eeb0 8a43 	vmov.f32	s16, s6
 8029166:	eef0 ba44 	vmov.f32	s23, s8
 802916a:	eeb0 ba64 	vmov.f32	s22, s9
 802916e:	eef0 aa45 	vmov.f32	s21, s10
 8029172:	46c1      	mov	r9, r8
 8029174:	465f      	mov	r7, fp
 8029176:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 8029178:	9d42      	ldr	r5, [sp, #264]	@ 0x108
 802917a:	6852      	ldr	r2, [r2, #4]
 802917c:	f89d 410c 	ldrb.w	r4, [sp, #268]	@ 0x10c
 8029180:	3204      	adds	r2, #4
 8029182:	682d      	ldr	r5, [r5, #0]
 8029184:	920a      	str	r2, [sp, #40]	@ 0x28
 8029186:	b2a2      	uxth	r2, r4
 8029188:	9423      	str	r4, [sp, #140]	@ 0x8c
 802918a:	9511      	str	r5, [sp, #68]	@ 0x44
 802918c:	9216      	str	r2, [sp, #88]	@ 0x58
 802918e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029190:	2a00      	cmp	r2, #0
 8029192:	dc02      	bgt.n	802919a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8029194:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8029196:	2a00      	cmp	r2, #0
 8029198:	dd65      	ble.n	8029266 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802919a:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 802919c:	2b00      	cmp	r3, #0
 802919e:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 80291a2:	b235      	sxth	r5, r6
 80291a4:	fa0f f88c 	sxth.w	r8, ip
 80291a8:	f340 838b 	ble.w	80298c2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 80291ac:	1e6c      	subs	r4, r5, #1
 80291ae:	f108 3eff 	add.w	lr, r8, #4294967295
 80291b2:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 80291b6:	e9dd cb3d 	ldrd	ip, fp, [sp, #244]	@ 0xf4
 80291ba:	ea5f 422a 	movs.w	r2, sl, asr #16
 80291be:	ea4f 4127 	mov.w	r1, r7, asr #16
 80291c2:	d405      	bmi.n	80291d0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80291c4:	42a2      	cmp	r2, r4
 80291c6:	da03      	bge.n	80291d0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80291c8:	2900      	cmp	r1, #0
 80291ca:	db01      	blt.n	80291d0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80291cc:	4571      	cmp	r1, lr
 80291ce:	db4f      	blt.n	8029270 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80291d0:	1c50      	adds	r0, r2, #1
 80291d2:	d406      	bmi.n	80291e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80291d4:	42a8      	cmp	r0, r5
 80291d6:	dc04      	bgt.n	80291e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80291d8:	1c48      	adds	r0, r1, #1
 80291da:	d402      	bmi.n	80291e2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80291dc:	4540      	cmp	r0, r8
 80291de:	f340 834c 	ble.w	802987a <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 80291e2:	3b01      	subs	r3, #1
 80291e4:	44e2      	add	sl, ip
 80291e6:	445f      	add	r7, fp
 80291e8:	f109 0903 	add.w	r9, r9, #3
 80291ec:	d1e5      	bne.n	80291ba <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80291ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80291f0:	2b00      	cmp	r3, #0
 80291f2:	dd38      	ble.n	8029266 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80291f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80291f8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80291fc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029200:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029204:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029208:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802920c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029210:	ee76 6a68 	vsub.f32	s13, s12, s17
 8029214:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8029218:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802921c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8029220:	ee16 2a90 	vmov	r2, s13
 8029224:	3b01      	subs	r3, #1
 8029226:	9314      	str	r3, [sp, #80]	@ 0x50
 8029228:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802922a:	fb92 f3f3 	sdiv	r3, r2, r3
 802922e:	ee17 2a10 	vmov	r2, s14
 8029232:	eeb0 7a48 	vmov.f32	s14, s16
 8029236:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802923a:	ee17 7a10 	vmov	r7, s14
 802923e:	eeb0 7a68 	vmov.f32	s14, s17
 8029242:	933d      	str	r3, [sp, #244]	@ 0xf4
 8029244:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8029246:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802924a:	fb92 f3f3 	sdiv	r3, r2, r3
 802924e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8029250:	933e      	str	r3, [sp, #248]	@ 0xf8
 8029252:	ee17 aa10 	vmov	sl, s14
 8029256:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8029258:	eeb0 8a67 	vmov.f32	s16, s15
 802925c:	eef0 8a46 	vmov.f32	s17, s12
 8029260:	bf08      	it	eq
 8029262:	4613      	moveq	r3, r2
 8029264:	e793      	b.n	802918e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029266:	b029      	add	sp, #164	@ 0xa4
 8029268:	ecbd 8b08 	vpop	{d8-d11}
 802926c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029270:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8029274:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 8029276:	1e59      	subs	r1, r3, #1
 8029278:	fb00 a201 	mla	r2, r0, r1, sl
 802927c:	1412      	asrs	r2, r2, #16
 802927e:	9109      	str	r1, [sp, #36]	@ 0x24
 8029280:	f100 8168 	bmi.w	8029554 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8029284:	42a2      	cmp	r2, r4
 8029286:	f280 8165 	bge.w	8029554 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 802928a:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 802928c:	fb02 7201 	mla	r2, r2, r1, r7
 8029290:	1412      	asrs	r2, r2, #16
 8029292:	f100 815f 	bmi.w	8029554 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 8029296:	f108 31ff 	add.w	r1, r8, #4294967295
 802929a:	428a      	cmp	r2, r1
 802929c:	f280 815a 	bge.w	8029554 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42c>
 80292a0:	2b00      	cmp	r3, #0
 80292a2:	dda4      	ble.n	80291ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80292a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80292a8:	444b      	add	r3, r9
 80292aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80292ac:	f109 0303 	add.w	r3, r9, #3
 80292b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80292b2:	46d1      	mov	r9, sl
 80292b4:	973c      	str	r7, [sp, #240]	@ 0xf0
 80292b6:	462e      	mov	r6, r5
 80292b8:	463b      	mov	r3, r7
 80292ba:	e12b      	b.n	8029514 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80292bc:	785f      	ldrb	r7, [r3, #1]
 80292be:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80292c2:	9712      	str	r7, [sp, #72]	@ 0x48
 80292c4:	0e3f      	lsrs	r7, r7, #24
 80292c6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80292c8:	b16a      	cbz	r2, 80292e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80292ca:	199f      	adds	r7, r3, r6
 80292cc:	5d9b      	ldrb	r3, [r3, r6]
 80292ce:	4626      	mov	r6, r4
 80292d0:	787f      	ldrb	r7, [r7, #1]
 80292d2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80292d6:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 80292da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80292dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80292de:	0e1b      	lsrs	r3, r3, #24
 80292e0:	0e24      	lsrs	r4, r4, #24
 80292e2:	940d      	str	r4, [sp, #52]	@ 0x34
 80292e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80292e6:	fa1f fc81 	uxth.w	ip, r1
 80292ea:	b292      	uxth	r2, r2
 80292ec:	fb0c f602 	mul.w	r6, ip, r2
 80292f0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80292f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80292f6:	ebac 0706 	sub.w	r7, ip, r6
 80292fa:	b2bf      	uxth	r7, r7
 80292fc:	fb07 f103 	mul.w	r1, r7, r3
 8029300:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8029304:	b292      	uxth	r2, r2
 8029306:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802930a:	1a9b      	subs	r3, r3, r2
 802930c:	b29b      	uxth	r3, r3
 802930e:	fb03 1100 	mla	r1, r3, r0, r1
 8029312:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029314:	fb02 1104 	mla	r1, r2, r4, r1
 8029318:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802931a:	fb06 1104 	mla	r1, r6, r4, r1
 802931e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029322:	2900      	cmp	r1, #0
 8029324:	f000 80e5 	beq.w	80294f2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8029328:	f005 14ff 	and.w	r4, r5, #16711935	@ 0xff00ff
 802932c:	28ff      	cmp	r0, #255	@ 0xff
 802932e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029332:	940e      	str	r4, [sp, #56]	@ 0x38
 8029334:	950f      	str	r5, [sp, #60]	@ 0x3c
 8029336:	d01d      	beq.n	8029374 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8029338:	fb04 fe00 	mul.w	lr, r4, r0
 802933c:	fb05 f800 	mul.w	r8, r5, r0
 8029340:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8029344:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8029348:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802934c:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8029350:	44ae      	add	lr, r5
 8029352:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8029356:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802935a:	0a00      	lsrs	r0, r0, #8
 802935c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8029360:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029364:	ea4e 0e00 	orr.w	lr, lr, r0
 8029368:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802936c:	900e      	str	r0, [sp, #56]	@ 0x38
 802936e:	f40e 407f 	and.w	r0, lr, #65280	@ 0xff00
 8029372:	900f      	str	r0, [sp, #60]	@ 0x3c
 8029374:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8029376:	f000 1eff 	and.w	lr, r0, #16711935	@ 0xff00ff
 802937a:	f400 487f 	and.w	r8, r0, #65280	@ 0xff00
 802937e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8029380:	28ff      	cmp	r0, #255	@ 0xff
 8029382:	d01c      	beq.n	80293be <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8029384:	fb0e fe00 	mul.w	lr, lr, r0
 8029388:	fb08 f800 	mul.w	r8, r8, r0
 802938c:	ea4f 251e 	mov.w	r5, lr, lsr #8
 8029390:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8029394:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8029398:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 802939c:	44ae      	add	lr, r5
 802939e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 80293a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80293a6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80293aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80293ae:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80293b2:	ea4e 0808 	orr.w	r8, lr, r8
 80293b6:	f008 1eff 	and.w	lr, r8, #16711935	@ 0xff00ff
 80293ba:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80293be:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80293c0:	f000 1cff 	and.w	ip, r0, #16711935	@ 0xff00ff
 80293c4:	f400 4a7f 	and.w	sl, r0, #65280	@ 0xff00
 80293c8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80293ca:	28ff      	cmp	r0, #255	@ 0xff
 80293cc:	d01c      	beq.n	8029408 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80293ce:	fb0c fc00 	mul.w	ip, ip, r0
 80293d2:	fb0a fa00 	mul.w	sl, sl, r0
 80293d6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80293da:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 80293de:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80293e2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80293e6:	44ac      	add	ip, r5
 80293e8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80293ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80293f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80293f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80293f8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80293fc:	ea4c 0a0a 	orr.w	sl, ip, sl
 8029400:	f00a 1cff 	and.w	ip, sl, #16711935	@ 0xff00ff
 8029404:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029408:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802940a:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 802940e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8029412:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8029414:	2cff      	cmp	r4, #255	@ 0xff
 8029416:	d019      	beq.n	802944c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8029418:	fb00 f004 	mul.w	r0, r0, r4
 802941c:	fb0b fb04 	mul.w	fp, fp, r4
 8029420:	0a05      	lsrs	r5, r0, #8
 8029422:	f005 14ff 	and.w	r4, r5, #16711935	@ 0xff00ff
 8029426:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802942a:	f50b 7580 	add.w	r5, fp, #256	@ 0x100
 802942e:	eb05 251b 	add.w	r5, r5, fp, lsr #8
 8029432:	4420      	add	r0, r4
 8029434:	0a00      	lsrs	r0, r0, #8
 8029436:	0a2d      	lsrs	r5, r5, #8
 8029438:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802943c:	f405 4b7f 	and.w	fp, r5, #65280	@ 0xff00
 8029440:	ea40 0b0b 	orr.w	fp, r0, fp
 8029444:	f00b 10ff 	and.w	r0, fp, #16711935	@ 0xff00ff
 8029448:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802944c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802944e:	fb0e fe07 	mul.w	lr, lr, r7
 8029452:	fb01 f104 	mul.w	r1, r1, r4
 8029456:	1c4d      	adds	r5, r1, #1
 8029458:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802945c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029460:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029462:	fb08 f707 	mul.w	r7, r8, r7
 8029466:	fb05 ee03 	mla	lr, r5, r3, lr
 802946a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802946c:	fb0c ee02 	mla	lr, ip, r2, lr
 8029470:	fb05 7703 	mla	r7, r5, r3, r7
 8029474:	fb0a 7702 	mla	r7, sl, r2, r7
 8029478:	fb00 ee06 	mla	lr, r0, r6, lr
 802947c:	fb0b 7706 	mla	r7, fp, r6, r7
 8029480:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029482:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029486:	0a3f      	lsrs	r7, r7, #8
 8029488:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802948c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029490:	ea4e 0307 	orr.w	r3, lr, r7
 8029494:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8029498:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 802949c:	b2c9      	uxtb	r1, r1
 802949e:	fa5f fc83 	uxtb.w	ip, r3
 80294a2:	fb16 f601 	smulbb	r6, r6, r1
 80294a6:	fb17 f701 	smulbb	r7, r7, r1
 80294aa:	fb1c fc04 	smulbb	ip, ip, r4
 80294ae:	f810 0c03 	ldrb.w	r0, [r0, #-3]
 80294b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80294b6:	0c1b      	lsrs	r3, r3, #16
 80294b8:	fb00 c101 	mla	r1, r0, r1, ip
 80294bc:	fb03 6304 	mla	r3, r3, r4, r6
 80294c0:	fb02 7204 	mla	r2, r2, r4, r7
 80294c4:	b289      	uxth	r1, r1
 80294c6:	b292      	uxth	r2, r2
 80294c8:	b29b      	uxth	r3, r3
 80294ca:	f101 0e01 	add.w	lr, r1, #1
 80294ce:	1c56      	adds	r6, r2, #1
 80294d0:	1c5d      	adds	r5, r3, #1
 80294d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80294d4:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 80294d8:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80294dc:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80294e0:	1209      	asrs	r1, r1, #8
 80294e2:	1212      	asrs	r2, r2, #8
 80294e4:	121b      	asrs	r3, r3, #8
 80294e6:	f800 1c03 	strb.w	r1, [r0, #-3]
 80294ea:	f800 2c02 	strb.w	r2, [r0, #-2]
 80294ee:	f800 3c01 	strb.w	r3, [r0, #-1]
 80294f2:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 80294f4:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 80294f6:	4499      	add	r9, r3
 80294f8:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 80294fa:	4413      	add	r3, r2
 80294fc:	933c      	str	r3, [sp, #240]	@ 0xf0
 80294fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029500:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029502:	4293      	cmp	r3, r2
 8029504:	d024      	beq.n	8029550 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8029506:	4613      	mov	r3, r2
 8029508:	3303      	adds	r3, #3
 802950a:	9309      	str	r3, [sp, #36]	@ 0x24
 802950c:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802950e:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8029512:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8029514:	ea4f 4229 	mov.w	r2, r9, asr #16
 8029518:	141b      	asrs	r3, r3, #16
 802951a:	fb06 2303 	mla	r3, r6, r3, r2
 802951e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8029520:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8029522:	5cc2      	ldrb	r2, [r0, r3]
 8029524:	f3c9 3103 	ubfx	r1, r9, #12, #4
 8029528:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 802952c:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 802952e:	4403      	add	r3, r0
 8029530:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8029534:	0e28      	lsrs	r0, r5, #24
 8029536:	2900      	cmp	r1, #0
 8029538:	f47f aec0 	bne.w	80292bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 802953c:	2a00      	cmp	r2, #0
 802953e:	f43f aed2 	beq.w	80292e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029542:	5d9b      	ldrb	r3, [r3, r6]
 8029544:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8029548:	9313      	str	r3, [sp, #76]	@ 0x4c
 802954a:	0e1b      	lsrs	r3, r3, #24
 802954c:	930c      	str	r3, [sp, #48]	@ 0x30
 802954e:	e6ca      	b.n	80292e6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029550:	4699      	mov	r9, r3
 8029552:	e64c      	b.n	80291ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8029554:	2b00      	cmp	r3, #0
 8029556:	f77f ae4a 	ble.w	80291ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 802955a:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 802955e:	ea4f 422a 	mov.w	r2, sl, asr #16
 8029562:	1439      	asrs	r1, r7, #16
 8029564:	2a00      	cmp	r2, #0
 8029566:	46cb      	mov	fp, r9
 8029568:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 802956c:	9c42      	ldr	r4, [sp, #264]	@ 0x108
 802956e:	e9dd 953d 	ldrd	r9, r5, [sp, #244]	@ 0xf4
 8029572:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8029576:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 802957a:	f2c0 8154 	blt.w	8029826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 802957e:	1e73      	subs	r3, r6, #1
 8029580:	429a      	cmp	r2, r3
 8029582:	f280 8150 	bge.w	8029826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8029586:	2900      	cmp	r1, #0
 8029588:	f2c0 814d 	blt.w	8029826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 802958c:	f10c 33ff 	add.w	r3, ip, #4294967295
 8029590:	4299      	cmp	r1, r3
 8029592:	f280 8148 	bge.w	8029826 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 8029596:	b236      	sxth	r6, r6
 8029598:	fb01 2206 	mla	r2, r1, r6, r2
 802959c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802959e:	5c8b      	ldrb	r3, [r1, r2]
 80295a0:	440a      	add	r2, r1
 80295a2:	9210      	str	r2, [sp, #64]	@ 0x40
 80295a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80295a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80295aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80295ac:	0e1b      	lsrs	r3, r3, #24
 80295ae:	2800      	cmp	r0, #0
 80295b0:	f000 8169 	beq.w	8029886 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 80295b4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80295b6:	f891 c001 	ldrb.w	ip, [r1, #1]
 80295ba:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80295be:	9224      	str	r2, [sp, #144]	@ 0x90
 80295c0:	0e12      	lsrs	r2, r2, #24
 80295c2:	9218      	str	r2, [sp, #96]	@ 0x60
 80295c4:	f1be 0f00 	cmp.w	lr, #0
 80295c8:	f040 816a 	bne.w	80298a0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 80295cc:	b280      	uxth	r0, r0
 80295ce:	fa1f fc8e 	uxth.w	ip, lr
 80295d2:	fb00 f20c 	mul.w	r2, r0, ip
 80295d6:	4611      	mov	r1, r2
 80295d8:	0106      	lsls	r6, r0, #4
 80295da:	1ab0      	subs	r0, r6, r2
 80295dc:	9210      	str	r2, [sp, #64]	@ 0x40
 80295de:	b282      	uxth	r2, r0
 80295e0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80295e2:	ebc1 1c0c 	rsb	ip, r1, ip, lsl #4
 80295e6:	fb02 f000 	mul.w	r0, r2, r0
 80295ea:	921b      	str	r2, [sp, #108]	@ 0x6c
 80295ec:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 80295f0:	fa1f f28c 	uxth.w	r2, ip
 80295f4:	1ab6      	subs	r6, r6, r2
 80295f6:	b2b6      	uxth	r6, r6
 80295f8:	fb06 0c03 	mla	ip, r6, r3, r0
 80295fc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80295fe:	921c      	str	r2, [sp, #112]	@ 0x70
 8029600:	fb02 cc00 	mla	ip, r2, r0, ip
 8029604:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8029606:	961d      	str	r6, [sp, #116]	@ 0x74
 8029608:	fb01 cc02 	mla	ip, r1, r2, ip
 802960c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8029610:	f1bc 0f00 	cmp.w	ip, #0
 8029614:	f000 80f1 	beq.w	80297fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8029618:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802961a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802961c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029620:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8029624:	2bff      	cmp	r3, #255	@ 0xff
 8029626:	921e      	str	r2, [sp, #120]	@ 0x78
 8029628:	910e      	str	r1, [sp, #56]	@ 0x38
 802962a:	d01b      	beq.n	8029664 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 802962c:	fb01 f103 	mul.w	r1, r1, r3
 8029630:	fb02 f203 	mul.w	r2, r2, r3
 8029634:	460b      	mov	r3, r1
 8029636:	0a11      	lsrs	r1, r2, #8
 8029638:	f102 1601 	add.w	r6, r2, #65537	@ 0x10001
 802963c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8029640:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8029644:	4431      	add	r1, r6
 8029646:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802964a:	0a09      	lsrs	r1, r1, #8
 802964c:	0a1b      	lsrs	r3, r3, #8
 802964e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8029652:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029656:	430b      	orrs	r3, r1
 8029658:	f003 12ff 	and.w	r2, r3, #16711935	@ 0xff00ff
 802965c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029660:	921e      	str	r2, [sp, #120]	@ 0x78
 8029662:	930e      	str	r3, [sp, #56]	@ 0x38
 8029664:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8029666:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8029668:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 802966c:	29ff      	cmp	r1, #255	@ 0xff
 802966e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029672:	931f      	str	r3, [sp, #124]	@ 0x7c
 8029674:	9220      	str	r2, [sp, #128]	@ 0x80
 8029676:	d01b      	beq.n	80296b0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8029678:	fb03 f301 	mul.w	r3, r3, r1
 802967c:	fb02 f201 	mul.w	r2, r2, r1
 8029680:	0a19      	lsrs	r1, r3, #8
 8029682:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 8029686:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802968a:	f502 7380 	add.w	r3, r2, #256	@ 0x100
 802968e:	4401      	add	r1, r0
 8029690:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029694:	0a09      	lsrs	r1, r1, #8
 8029696:	0a1b      	lsrs	r3, r3, #8
 8029698:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802969c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80296a0:	ea41 0003 	orr.w	r0, r1, r3
 80296a4:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 80296a8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80296aa:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 80296ae:	9320      	str	r3, [sp, #128]	@ 0x80
 80296b0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80296b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80296b4:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 80296b8:	2aff      	cmp	r2, #255	@ 0xff
 80296ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80296be:	9321      	str	r3, [sp, #132]	@ 0x84
 80296c0:	d01a      	beq.n	80296f8 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d0>
 80296c2:	fb03 f302 	mul.w	r3, r3, r2
 80296c6:	4618      	mov	r0, r3
 80296c8:	fb06 f602 	mul.w	r6, r6, r2
 80296cc:	0a31      	lsrs	r1, r6, #8
 80296ce:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80296d2:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80296d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80296da:	440e      	add	r6, r1
 80296dc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80296e0:	0a36      	lsrs	r6, r6, #8
 80296e2:	0a1b      	lsrs	r3, r3, #8
 80296e4:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 80296e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80296ec:	4333      	orrs	r3, r6
 80296ee:	f003 16ff 	and.w	r6, r3, #16711935	@ 0xff00ff
 80296f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80296f6:	9321      	str	r3, [sp, #132]	@ 0x84
 80296f8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80296fa:	f002 13ff 	and.w	r3, r2, #16711935	@ 0xff00ff
 80296fe:	f402 4e7f 	and.w	lr, r2, #65280	@ 0xff00
 8029702:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8029704:	2aff      	cmp	r2, #255	@ 0xff
 8029706:	d01a      	beq.n	802973e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x616>
 8029708:	fb03 f302 	mul.w	r3, r3, r2
 802970c:	fb0e fe02 	mul.w	lr, lr, r2
 8029710:	0a19      	lsrs	r1, r3, #8
 8029712:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 8029716:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802971a:	f50e 7380 	add.w	r3, lr, #256	@ 0x100
 802971e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8029722:	4401      	add	r1, r0
 8029724:	0a09      	lsrs	r1, r1, #8
 8029726:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802972a:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802972e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029732:	ea41 0e0e 	orr.w	lr, r1, lr
 8029736:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 802973a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802973e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8029740:	fb0c f102 	mul.w	r1, ip, r2
 8029744:	1c48      	adds	r0, r1, #1
 8029746:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802974a:	ea6f 2211 	mvn.w	r2, r1, lsr #8
 802974e:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8029750:	9225      	str	r2, [sp, #148]	@ 0x94
 8029752:	4684      	mov	ip, r0
 8029754:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8029756:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8029758:	fb0c fc02 	mul.w	ip, ip, r2
 802975c:	fb00 f002 	mul.w	r0, r0, r2
 8029760:	4601      	mov	r1, r0
 8029762:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8029764:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8029766:	fb00 cc02 	mla	ip, r0, r2, ip
 802976a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802976c:	fb00 1102 	mla	r1, r0, r2, r1
 8029770:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8029772:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8029774:	fb06 c602 	mla	r6, r6, r2, ip
 8029778:	fb00 1002 	mla	r0, r0, r2, r1
 802977c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802977e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8029782:	fb03 6602 	mla	r6, r3, r2, r6
 8029786:	fb0e 0302 	mla	r3, lr, r2, r0
 802978a:	0a32      	lsrs	r2, r6, #8
 802978c:	0a1b      	lsrs	r3, r3, #8
 802978e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8029792:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029796:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802979a:	4313      	orrs	r3, r2
 802979c:	fb16 f001 	smulbb	r0, r6, r1
 80297a0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80297a2:	fa5f fe83 	uxtb.w	lr, r3
 80297a6:	fb1e fe02 	smulbb	lr, lr, r2
 80297aa:	f89b c001 	ldrb.w	ip, [fp, #1]
 80297ae:	900e      	str	r0, [sp, #56]	@ 0x38
 80297b0:	f89b 0000 	ldrb.w	r0, [fp]
 80297b4:	fb1c fc01 	smulbb	ip, ip, r1
 80297b8:	fb00 e001 	mla	r0, r0, r1, lr
 80297bc:	4611      	mov	r1, r2
 80297be:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80297c2:	fb06 c202 	mla	r2, r6, r2, ip
 80297c6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80297c8:	0c1b      	lsrs	r3, r3, #16
 80297ca:	fb03 6301 	mla	r3, r3, r1, r6
 80297ce:	b280      	uxth	r0, r0
 80297d0:	b296      	uxth	r6, r2
 80297d2:	b29b      	uxth	r3, r3
 80297d4:	1c5a      	adds	r2, r3, #1
 80297d6:	f100 0c01 	add.w	ip, r0, #1
 80297da:	1c71      	adds	r1, r6, #1
 80297dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80297e0:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80297e4:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 80297e8:	1200      	asrs	r0, r0, #8
 80297ea:	120a      	asrs	r2, r1, #8
 80297ec:	121b      	asrs	r3, r3, #8
 80297ee:	f88b 0000 	strb.w	r0, [fp]
 80297f2:	f88b 2001 	strb.w	r2, [fp, #1]
 80297f6:	f88b 3002 	strb.w	r3, [fp, #2]
 80297fa:	f1b8 0f00 	cmp.w	r8, #0
 80297fe:	f10b 0b03 	add.w	fp, fp, #3
 8029802:	44ca      	add	sl, r9
 8029804:	442f      	add	r7, r5
 8029806:	dd2e      	ble.n	8029866 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8029808:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 802980c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8029810:	2a00      	cmp	r2, #0
 8029812:	f108 38ff 	add.w	r8, r8, #4294967295
 8029816:	ea4f 4127 	mov.w	r1, r7, asr #16
 802981a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802981e:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 8029822:	f6bf aeac 	bge.w	802957e <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8029826:	1c53      	adds	r3, r2, #1
 8029828:	d4e7      	bmi.n	80297fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 802982a:	42b3      	cmp	r3, r6
 802982c:	dce5      	bgt.n	80297fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 802982e:	1c4b      	adds	r3, r1, #1
 8029830:	d4e3      	bmi.n	80297fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8029832:	4563      	cmp	r3, ip
 8029834:	dce1      	bgt.n	80297fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d2>
 8029836:	fa0f f38c 	sxth.w	r3, ip
 802983a:	b236      	sxth	r6, r6
 802983c:	e9cd 6300 	strd	r6, r3, [sp]
 8029840:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029842:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029846:	e9cd e305 	strd	lr, r3, [sp, #20]
 802984a:	9202      	str	r2, [sp, #8]
 802984c:	4659      	mov	r1, fp
 802984e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029850:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029852:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8029854:	f7ff faf2 	bl	8028e3c <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8029858:	f1b8 0f00 	cmp.w	r8, #0
 802985c:	f10b 0b03 	add.w	fp, fp, #3
 8029860:	44ca      	add	sl, r9
 8029862:	442f      	add	r7, r5
 8029864:	dcd0      	bgt.n	8029808 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8029866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029868:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 802986c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8029870:	3301      	adds	r3, #1
 8029872:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029876:	4499      	add	r9, r3
 8029878:	e4b9      	b.n	80291ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 802987a:	3b01      	subs	r3, #1
 802987c:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8029880:	4698      	mov	r8, r3
 8029882:	9309      	str	r3, [sp, #36]	@ 0x24
 8029884:	e66e      	b.n	8029564 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8029886:	f1be 0f00 	cmp.w	lr, #0
 802988a:	f43f ae9f 	beq.w	80295cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 802988e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029890:	5d92      	ldrb	r2, [r2, r6]
 8029892:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8029894:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8029898:	9226      	str	r2, [sp, #152]	@ 0x98
 802989a:	0e12      	lsrs	r2, r2, #24
 802989c:	9219      	str	r2, [sp, #100]	@ 0x64
 802989e:	e695      	b.n	80295cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 80298a0:	eb01 0c06 	add.w	ip, r1, r6
 80298a4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80298a8:	5d89      	ldrb	r1, [r1, r6]
 80298aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80298ac:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
 80298b0:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 80298b4:	9227      	str	r2, [sp, #156]	@ 0x9c
 80298b6:	0e12      	lsrs	r2, r2, #24
 80298b8:	921a      	str	r2, [sp, #104]	@ 0x68
 80298ba:	0e32      	lsrs	r2, r6, #24
 80298bc:	9626      	str	r6, [sp, #152]	@ 0x98
 80298be:	9219      	str	r2, [sp, #100]	@ 0x64
 80298c0:	e684      	b.n	80295cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 80298c2:	f43f ac94 	beq.w	80291ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 80298c6:	1e6c      	subs	r4, r5, #1
 80298c8:	e4d4      	b.n	8029274 <_ZN8touchgfx8LCDGPU2D66TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80298ca:	bf00      	nop

080298cc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80298cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298d0:	b089      	sub	sp, #36	@ 0x24
 80298d2:	f9bd b048 	ldrsh.w	fp, [sp, #72]	@ 0x48
 80298d6:	e9dd 4014 	ldrd	r4, r0, [sp, #80]	@ 0x50
 80298da:	fb00 450b 	mla	r5, r0, fp, r4
 80298de:	2800      	cmp	r0, #0
 80298e0:	4694      	mov	ip, r2
 80298e2:	f100 0601 	add.w	r6, r0, #1
 80298e6:	442a      	add	r2, r5
 80298e8:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 80298ec:	f89d a058 	ldrb.w	sl, [sp, #88]	@ 0x58
 80298f0:	f89d 705c 	ldrb.w	r7, [sp, #92]	@ 0x5c
 80298f4:	db02      	blt.n	80298fc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x30>
 80298f6:	4580      	cmp	r8, r0
 80298f8:	f300 810a 	bgt.w	8029b10 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x244>
 80298fc:	f04f 0c00 	mov.w	ip, #0
 8029900:	46e6      	mov	lr, ip
 8029902:	4665      	mov	r5, ip
 8029904:	46e1      	mov	r9, ip
 8029906:	2e00      	cmp	r6, #0
 8029908:	db02      	blt.n	8029910 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x44>
 802990a:	45b0      	cmp	r8, r6
 802990c:	f300 811a 	bgt.w	8029b44 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x278>
 8029910:	2400      	movs	r4, #0
 8029912:	46a0      	mov	r8, r4
 8029914:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8029918:	f1ba 0f0f 	cmp.w	sl, #15
 802991c:	f200 8158 	bhi.w	8029bd0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8029920:	2f0f      	cmp	r7, #15
 8029922:	f200 8155 	bhi.w	8029bd0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8029926:	b2ba      	uxth	r2, r7
 8029928:	fa1f f38a 	uxth.w	r3, sl
 802992c:	fb02 f703 	mul.w	r7, r2, r3
 8029930:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8029934:	b292      	uxth	r2, r2
 8029936:	fb02 fa08 	mul.w	sl, r2, r8
 802993a:	fb07 fb04 	mul.w	fp, r7, r4
 802993e:	011b      	lsls	r3, r3, #4
 8029940:	1bd8      	subs	r0, r3, r7
 8029942:	b280      	uxth	r0, r0
 8029944:	9001      	str	r0, [sp, #4]
 8029946:	fb00 f00c 	mul.w	r0, r0, ip
 802994a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802994e:	1a9b      	subs	r3, r3, r2
 8029950:	b29b      	uxth	r3, r3
 8029952:	fb03 000e 	mla	r0, r3, lr, r0
 8029956:	4450      	add	r0, sl
 8029958:	4458      	add	r0, fp
 802995a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802995e:	9002      	str	r0, [sp, #8]
 8029960:	2800      	cmp	r0, #0
 8029962:	f000 80d2 	beq.w	8029b0a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8029966:	f009 10ff 	and.w	r0, r9, #16711935	@ 0xff00ff
 802996a:	f409 467f 	and.w	r6, r9, #65280	@ 0xff00
 802996e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8029972:	9005      	str	r0, [sp, #20]
 8029974:	9606      	str	r6, [sp, #24]
 8029976:	d01e      	beq.n	80299b6 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xea>
 8029978:	fb00 fb0e 	mul.w	fp, r0, lr
 802997c:	fb06 fe0e 	mul.w	lr, r6, lr
 8029980:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8029984:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8029988:	f50e 7a80 	add.w	sl, lr, #256	@ 0x100
 802998c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029990:	4483      	add	fp, r0
 8029992:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8029996:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802999a:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 802999e:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80299a2:	f40a 4e7f 	and.w	lr, sl, #65280	@ 0xff00
 80299a6:	ea4b 0e0e 	orr.w	lr, fp, lr
 80299aa:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80299ae:	9005      	str	r0, [sp, #20]
 80299b0:	f40e 407f 	and.w	r0, lr, #65280	@ 0xff00
 80299b4:	9006      	str	r0, [sp, #24]
 80299b6:	f405 407f 	and.w	r0, r5, #65280	@ 0xff00
 80299ba:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80299be:	f005 1aff 	and.w	sl, r5, #16711935	@ 0xff00ff
 80299c2:	9007      	str	r0, [sp, #28]
 80299c4:	d01d      	beq.n	8029a02 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x136>
 80299c6:	fb0a fa0c 	mul.w	sl, sl, ip
 80299ca:	fb00 f50c 	mul.w	r5, r0, ip
 80299ce:	ea4f 201a 	mov.w	r0, sl, lsr #8
 80299d2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80299d6:	f505 7b80 	add.w	fp, r5, #256	@ 0x100
 80299da:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80299de:	4482      	add	sl, r0
 80299e0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80299e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80299e8:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80299ec:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 80299f0:	f40b 457f 	and.w	r5, fp, #65280	@ 0xff00
 80299f4:	ea4a 0505 	orr.w	r5, sl, r5
 80299f8:	f405 407f 	and.w	r0, r5, #65280	@ 0xff00
 80299fc:	f005 1aff 	and.w	sl, r5, #16711935	@ 0xff00ff
 8029a00:	9007      	str	r0, [sp, #28]
 8029a02:	9803      	ldr	r0, [sp, #12]
 8029a04:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8029a08:	f000 19ff 	and.w	r9, r0, #16711935	@ 0xff00ff
 8029a0c:	f400 467f 	and.w	r6, r0, #65280	@ 0xff00
 8029a10:	d01b      	beq.n	8029a4a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x17e>
 8029a12:	fb09 f908 	mul.w	r9, r9, r8
 8029a16:	fb06 f608 	mul.w	r6, r6, r8
 8029a1a:	ea4f 2c19 	mov.w	ip, r9, lsr #8
 8029a1e:	f506 7080 	add.w	r0, r6, #256	@ 0x100
 8029a22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029a26:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8029a2a:	eb00 2616 	add.w	r6, r0, r6, lsr #8
 8029a2e:	44e1      	add	r9, ip
 8029a30:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029a34:	0a30      	lsrs	r0, r6, #8
 8029a36:	f009 19ff 	and.w	r9, r9, #16711935	@ 0xff00ff
 8029a3a:	f400 467f 	and.w	r6, r0, #65280	@ 0xff00
 8029a3e:	ea49 0606 	orr.w	r6, r9, r6
 8029a42:	f006 19ff 	and.w	r9, r6, #16711935	@ 0xff00ff
 8029a46:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8029a4a:	9d04      	ldr	r5, [sp, #16]
 8029a4c:	2cff      	cmp	r4, #255	@ 0xff
 8029a4e:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8029a52:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029a56:	d01a      	beq.n	8029a8e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1c2>
 8029a58:	fb00 f004 	mul.w	r0, r0, r4
 8029a5c:	fb0e f404 	mul.w	r4, lr, r4
 8029a60:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8029a64:	f504 7e80 	add.w	lr, r4, #256	@ 0x100
 8029a68:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029a6c:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8029a70:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 8029a74:	4460      	add	r0, ip
 8029a76:	0a00      	lsrs	r0, r0, #8
 8029a78:	0a24      	lsrs	r4, r4, #8
 8029a7a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8029a7e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8029a82:	ea40 0e0e 	orr.w	lr, r0, lr
 8029a86:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8029a8a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029a8e:	9c02      	ldr	r4, [sp, #8]
 8029a90:	9d07      	ldr	r5, [sp, #28]
 8029a92:	ea6f 0c04 	mvn.w	ip, r4
 8029a96:	9c01      	ldr	r4, [sp, #4]
 8029a98:	fa5f fc8c 	uxtb.w	ip, ip
 8029a9c:	fb0a fb04 	mul.w	fp, sl, r4
 8029aa0:	fb05 f504 	mul.w	r5, r5, r4
 8029aa4:	9c05      	ldr	r4, [sp, #20]
 8029aa6:	fb04 bb03 	mla	fp, r4, r3, fp
 8029aaa:	9c06      	ldr	r4, [sp, #24]
 8029aac:	fb09 b902 	mla	r9, r9, r2, fp
 8029ab0:	fb04 5303 	mla	r3, r4, r3, r5
 8029ab4:	fb06 3602 	mla	r6, r6, r2, r3
 8029ab8:	780c      	ldrb	r4, [r1, #0]
 8029aba:	fb00 9007 	mla	r0, r0, r7, r9
 8029abe:	784a      	ldrb	r2, [r1, #1]
 8029ac0:	fb0e 6707 	mla	r7, lr, r7, r6
 8029ac4:	788b      	ldrb	r3, [r1, #2]
 8029ac6:	fb02 f20c 	mul.w	r2, r2, ip
 8029aca:	fb03 f30c 	mul.w	r3, r3, ip
 8029ace:	fb04 fc0c 	mul.w	ip, r4, ip
 8029ad2:	0a00      	lsrs	r0, r0, #8
 8029ad4:	0a3f      	lsrs	r7, r7, #8
 8029ad6:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029ada:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8029ade:	4338      	orrs	r0, r7
 8029ae0:	1c54      	adds	r4, r2, #1
 8029ae2:	1c5f      	adds	r7, r3, #1
 8029ae4:	f10c 0601 	add.w	r6, ip, #1
 8029ae8:	0a05      	lsrs	r5, r0, #8
 8029aea:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8029aee:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8029af2:	0c04      	lsrs	r4, r0, #16
 8029af4:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8029af8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8029afc:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8029b00:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8029b04:	704a      	strb	r2, [r1, #1]
 8029b06:	708b      	strb	r3, [r1, #2]
 8029b08:	7008      	strb	r0, [r1, #0]
 8029b0a:	b009      	add	sp, #36	@ 0x24
 8029b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b10:	2c00      	cmp	r4, #0
 8029b12:	db01      	blt.n	8029b18 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24c>
 8029b14:	45a3      	cmp	fp, r4
 8029b16:	dc41      	bgt.n	8029b9c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2d0>
 8029b18:	f04f 0e00 	mov.w	lr, #0
 8029b1c:	46f1      	mov	r9, lr
 8029b1e:	1c60      	adds	r0, r4, #1
 8029b20:	d42b      	bmi.n	8029b7a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8029b22:	4583      	cmp	fp, r0
 8029b24:	dd29      	ble.n	8029b7a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ae>
 8029b26:	f1ba 0f00 	cmp.w	sl, #0
 8029b2a:	d005      	beq.n	8029b38 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x26c>
 8029b2c:	7850      	ldrb	r0, [r2, #1]
 8029b2e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8029b32:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 8029b36:	e6e6      	b.n	8029906 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8029b38:	2e00      	cmp	r6, #0
 8029b3a:	db42      	blt.n	8029bc2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8029b3c:	45b0      	cmp	r8, r6
 8029b3e:	dd40      	ble.n	8029bc2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2f6>
 8029b40:	46d4      	mov	ip, sl
 8029b42:	4655      	mov	r5, sl
 8029b44:	b1ef      	cbz	r7, 8029b82 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2b6>
 8029b46:	2c00      	cmp	r4, #0
 8029b48:	db32      	blt.n	8029bb0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8029b4a:	45a3      	cmp	fp, r4
 8029b4c:	dd30      	ble.n	8029bb0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2e4>
 8029b4e:	f812 000b 	ldrb.w	r0, [r2, fp]
 8029b52:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8029b56:	9003      	str	r0, [sp, #12]
 8029b58:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8029b5c:	3401      	adds	r4, #1
 8029b5e:	d424      	bmi.n	8029baa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8029b60:	45a3      	cmp	fp, r4
 8029b62:	dd22      	ble.n	8029baa <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2de>
 8029b64:	f1ba 0f00 	cmp.w	sl, #0
 8029b68:	d027      	beq.n	8029bba <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x2ee>
 8029b6a:	4493      	add	fp, r2
 8029b6c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8029b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8029b74:	9304      	str	r3, [sp, #16]
 8029b76:	0e1c      	lsrs	r4, r3, #24
 8029b78:	e6ce      	b.n	8029918 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 8029b7a:	f04f 0c00 	mov.w	ip, #0
 8029b7e:	4665      	mov	r5, ip
 8029b80:	e6c1      	b.n	8029906 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3a>
 8029b82:	f1ba 0f0f 	cmp.w	sl, #15
 8029b86:	d823      	bhi.n	8029bd0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x304>
 8029b88:	fa1f f38a 	uxth.w	r3, sl
 8029b8c:	463a      	mov	r2, r7
 8029b8e:	46bb      	mov	fp, r7
 8029b90:	46ba      	mov	sl, r7
 8029b92:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8029b96:	463c      	mov	r4, r7
 8029b98:	46b8      	mov	r8, r7
 8029b9a:	e6d0      	b.n	802993e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x72>
 8029b9c:	f81c 0005 	ldrb.w	r0, [ip, r5]
 8029ba0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8029ba4:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8029ba8:	e7b9      	b.n	8029b1e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8029baa:	2400      	movs	r4, #0
 8029bac:	9404      	str	r4, [sp, #16]
 8029bae:	e6b3      	b.n	8029918 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x4c>
 8029bb0:	f04f 0800 	mov.w	r8, #0
 8029bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8029bb8:	e7d0      	b.n	8029b5c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>
 8029bba:	f8cd a010 	str.w	sl, [sp, #16]
 8029bbe:	4654      	mov	r4, sl
 8029bc0:	e6ae      	b.n	8029920 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 8029bc2:	4655      	mov	r5, sl
 8029bc4:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8029bc8:	4654      	mov	r4, sl
 8029bca:	46d0      	mov	r8, sl
 8029bcc:	46d4      	mov	ip, sl
 8029bce:	e6a7      	b.n	8029920 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x54>
 8029bd0:	4b03      	ldr	r3, [pc, #12]	@ (8029be0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x314>)
 8029bd2:	4a04      	ldr	r2, [pc, #16]	@ (8029be4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x318>)
 8029bd4:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8029bd8:	4803      	ldr	r0, [pc, #12]	@ (8029be8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x31c>)
 8029bda:	f001 ffed 	bl	802bbb8 <__assert_func>
 8029bde:	bf00      	nop
 8029be0:	0802ef50 	.word	0x0802ef50
 8029be4:	0802f5cc 	.word	0x0802f5cc
 8029be8:	0802f0d8 	.word	0x0802f0d8

08029bec <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029bf0:	ed2d 8b0a 	vpush	{d8-d12}
 8029bf4:	eeb0 aa40 	vmov.f32	s20, s0
 8029bf8:	eef0 9a60 	vmov.f32	s19, s1
 8029bfc:	eeb0 9a41 	vmov.f32	s18, s2
 8029c00:	eef0 8a62 	vmov.f32	s17, s5
 8029c04:	eeb0 8a43 	vmov.f32	s16, s6
 8029c08:	eeb0 ca44 	vmov.f32	s24, s8
 8029c0c:	eef0 ba64 	vmov.f32	s23, s9
 8029c10:	eeb0 ba45 	vmov.f32	s22, s10
 8029c14:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8029c18:	b0a3      	sub	sp, #140	@ 0x8c
 8029c1a:	901e      	str	r0, [sp, #120]	@ 0x78
 8029c1c:	9111      	str	r1, [sp, #68]	@ 0x44
 8029c1e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8029c20:	e9dd 413b 	ldrd	r4, r1, [sp, #236]	@ 0xec
 8029c24:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8029c26:	6860      	ldr	r0, [r4, #4]
 8029c28:	fb00 1b02 	mla	fp, r0, r2, r1
 8029c2c:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8029c2e:	6821      	ldr	r1, [r4, #0]
 8029c30:	9c3e      	ldr	r4, [sp, #248]	@ 0xf8
 8029c32:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 8029c36:	6852      	ldr	r2, [r2, #4]
 8029c38:	eb01 0800 	add.w	r8, r1, r0
 8029c3c:	6824      	ldr	r4, [r4, #0]
 8029c3e:	e9dd 7b37 	ldrd	r7, fp, [sp, #220]	@ 0xdc
 8029c42:	3204      	adds	r2, #4
 8029c44:	46c3      	mov	fp, r8
 8029c46:	46b8      	mov	r8, r7
 8029c48:	9f38      	ldr	r7, [sp, #224]	@ 0xe0
 8029c4a:	940e      	str	r4, [sp, #56]	@ 0x38
 8029c4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8029c4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029c50:	2a00      	cmp	r2, #0
 8029c52:	dc02      	bgt.n	8029c5a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8029c54:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029c56:	2a00      	cmp	r2, #0
 8029c58:	dd63      	ble.n	8029d22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8029c5a:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8029c5c:	2b00      	cmp	r3, #0
 8029c5e:	e9d2 6c02 	ldrd	r6, ip, [r2, #8]
 8029c62:	b234      	sxth	r4, r6
 8029c64:	fa0f f98c 	sxth.w	r9, ip
 8029c68:	f340 835f 	ble.w	802a32a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73e>
 8029c6c:	1e65      	subs	r5, r4, #1
 8029c6e:	f109 3eff 	add.w	lr, r9, #4294967295
 8029c72:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8029c76:	e9dd ca39 	ldrd	ip, sl, [sp, #228]	@ 0xe4
 8029c7a:	ea5f 4228 	movs.w	r2, r8, asr #16
 8029c7e:	ea4f 4127 	mov.w	r1, r7, asr #16
 8029c82:	d405      	bmi.n	8029c90 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8029c84:	42aa      	cmp	r2, r5
 8029c86:	da03      	bge.n	8029c90 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8029c88:	2900      	cmp	r1, #0
 8029c8a:	db01      	blt.n	8029c90 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8029c8c:	4571      	cmp	r1, lr
 8029c8e:	db4d      	blt.n	8029d2c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029c90:	1c50      	adds	r0, r2, #1
 8029c92:	d406      	bmi.n	8029ca2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c94:	42a0      	cmp	r0, r4
 8029c96:	dc04      	bgt.n	8029ca2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c98:	1c48      	adds	r0, r1, #1
 8029c9a:	d402      	bmi.n	8029ca2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c9c:	4548      	cmp	r0, r9
 8029c9e:	f340 831e 	ble.w	802a2de <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8029ca2:	3b01      	subs	r3, #1
 8029ca4:	44e0      	add	r8, ip
 8029ca6:	4457      	add	r7, sl
 8029ca8:	f10b 0b03 	add.w	fp, fp, #3
 8029cac:	d1e5      	bne.n	8029c7a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029cae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8029cb0:	2b00      	cmp	r3, #0
 8029cb2:	dd36      	ble.n	8029d22 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8029cb4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8029cb8:	ee79 9aab 	vadd.f32	s19, s19, s23
 8029cbc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8029cc0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8029cc4:	ee29 6aa7 	vmul.f32	s12, s19, s15
 8029cc8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029ccc:	ee76 6a68 	vsub.f32	s13, s12, s17
 8029cd0:	ee37 7ac8 	vsub.f32	s14, s15, s16
 8029cd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029cd8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8029cdc:	ee16 2a90 	vmov	r2, s13
 8029ce0:	3b01      	subs	r3, #1
 8029ce2:	9311      	str	r3, [sp, #68]	@ 0x44
 8029ce4:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8029ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8029cea:	ee17 2a10 	vmov	r2, s14
 8029cee:	eeb0 7a48 	vmov.f32	s14, s16
 8029cf2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8029cf6:	ee17 7a10 	vmov	r7, s14
 8029cfa:	eeb0 7a68 	vmov.f32	s14, s17
 8029cfe:	9339      	str	r3, [sp, #228]	@ 0xe4
 8029d00:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8029d02:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8029d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8029d0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029d0c:	933a      	str	r3, [sp, #232]	@ 0xe8
 8029d0e:	ee17 8a10 	vmov	r8, s14
 8029d12:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8029d14:	eeb0 8a67 	vmov.f32	s16, s15
 8029d18:	eef0 8a46 	vmov.f32	s17, s12
 8029d1c:	bf08      	it	eq
 8029d1e:	4613      	moveq	r3, r2
 8029d20:	e795      	b.n	8029c4e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8029d22:	b023      	add	sp, #140	@ 0x8c
 8029d24:	ecbd 8b0a 	vpop	{d8-d12}
 8029d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d2c:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8029d30:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 8029d32:	1e59      	subs	r1, r3, #1
 8029d34:	fb00 8201 	mla	r2, r0, r1, r8
 8029d38:	1412      	asrs	r2, r2, #16
 8029d3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8029d3c:	f100 8151 	bmi.w	8029fe2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8029d40:	42aa      	cmp	r2, r5
 8029d42:	f280 814e 	bge.w	8029fe2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8029d46:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8029d48:	fb02 7201 	mla	r2, r2, r1, r7
 8029d4c:	1412      	asrs	r2, r2, #16
 8029d4e:	f100 8148 	bmi.w	8029fe2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8029d52:	f109 31ff 	add.w	r1, r9, #4294967295
 8029d56:	428a      	cmp	r2, r1
 8029d58:	f280 8143 	bge.w	8029fe2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8029d5c:	2b00      	cmp	r3, #0
 8029d5e:	dda6      	ble.n	8029cae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8029d60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029d64:	445b      	add	r3, fp
 8029d66:	930d      	str	r3, [sp, #52]	@ 0x34
 8029d68:	f10b 0c03 	add.w	ip, fp, #3
 8029d6c:	46c1      	mov	r9, r8
 8029d6e:	9738      	str	r7, [sp, #224]	@ 0xe0
 8029d70:	4621      	mov	r1, r4
 8029d72:	463b      	mov	r3, r7
 8029d74:	e114      	b.n	8029fa0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8029d76:	f893 e001 	ldrb.w	lr, [r3, #1]
 8029d7a:	f856 502e 	ldr.w	r5, [r6, lr, lsl #2]
 8029d7e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8029d80:	0e2d      	lsrs	r5, r5, #24
 8029d82:	9506      	str	r5, [sp, #24]
 8029d84:	b162      	cbz	r2, 8029da0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8029d86:	185d      	adds	r5, r3, r1
 8029d88:	786d      	ldrb	r5, [r5, #1]
 8029d8a:	5c5b      	ldrb	r3, [r3, r1]
 8029d8c:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8029d90:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8029d94:	9112      	str	r1, [sp, #72]	@ 0x48
 8029d96:	9310      	str	r3, [sp, #64]	@ 0x40
 8029d98:	0e09      	lsrs	r1, r1, #24
 8029d9a:	0e1b      	lsrs	r3, r3, #24
 8029d9c:	9108      	str	r1, [sp, #32]
 8029d9e:	9307      	str	r3, [sp, #28]
 8029da0:	b2a4      	uxth	r4, r4
 8029da2:	b292      	uxth	r2, r2
 8029da4:	fb04 f502 	mul.w	r5, r4, r2
 8029da8:	0124      	lsls	r4, r4, #4
 8029daa:	1b66      	subs	r6, r4, r5
 8029dac:	9b06      	ldr	r3, [sp, #24]
 8029dae:	b2b6      	uxth	r6, r6
 8029db0:	fb06 f103 	mul.w	r1, r6, r3
 8029db4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8029db8:	b292      	uxth	r2, r2
 8029dba:	f5c4 7380 	rsb	r3, r4, #256	@ 0x100
 8029dbe:	1a9b      	subs	r3, r3, r2
 8029dc0:	b29b      	uxth	r3, r3
 8029dc2:	fb03 1100 	mla	r1, r3, r0, r1
 8029dc6:	9c07      	ldr	r4, [sp, #28]
 8029dc8:	fb02 1104 	mla	r1, r2, r4, r1
 8029dcc:	9c08      	ldr	r4, [sp, #32]
 8029dce:	fb05 1104 	mla	r1, r5, r4, r1
 8029dd2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029dd6:	9109      	str	r1, [sp, #36]	@ 0x24
 8029dd8:	2900      	cmp	r1, #0
 8029dda:	f000 80d2 	beq.w	8029f82 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8029dde:	f007 14ff 	and.w	r4, r7, #16711935	@ 0xff00ff
 8029de2:	f407 417f 	and.w	r1, r7, #65280	@ 0xff00
 8029de6:	28ff      	cmp	r0, #255	@ 0xff
 8029de8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029dea:	910c      	str	r1, [sp, #48]	@ 0x30
 8029dec:	d01b      	beq.n	8029e26 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8029dee:	fb04 f400 	mul.w	r4, r4, r0
 8029df2:	4627      	mov	r7, r4
 8029df4:	fb01 fe00 	mul.w	lr, r1, r0
 8029df8:	0a24      	lsrs	r4, r4, #8
 8029dfa:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8029dfe:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029e02:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 8029e06:	4427      	add	r7, r4
 8029e08:	eb00 201e 	add.w	r0, r0, lr, lsr #8
 8029e0c:	0a3f      	lsrs	r7, r7, #8
 8029e0e:	0a00      	lsrs	r0, r0, #8
 8029e10:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029e14:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8029e18:	4307      	orrs	r7, r0
 8029e1a:	f007 11ff 	and.w	r1, r7, #16711935	@ 0xff00ff
 8029e1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029e20:	f407 417f 	and.w	r1, r7, #65280	@ 0xff00
 8029e24:	910c      	str	r1, [sp, #48]	@ 0x30
 8029e26:	9806      	ldr	r0, [sp, #24]
 8029e28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029e2a:	28ff      	cmp	r0, #255	@ 0xff
 8029e2c:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8029e30:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8029e34:	d01a      	beq.n	8029e6c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8029e36:	fb07 f700 	mul.w	r7, r7, r0
 8029e3a:	fb0e fe00 	mul.w	lr, lr, r0
 8029e3e:	0a3c      	lsrs	r4, r7, #8
 8029e40:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8029e44:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029e48:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 8029e4c:	4427      	add	r7, r4
 8029e4e:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8029e52:	0a3f      	lsrs	r7, r7, #8
 8029e54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029e58:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029e5c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029e60:	ea47 0e0e 	orr.w	lr, r7, lr
 8029e64:	f00e 17ff 	and.w	r7, lr, #16711935	@ 0xff00ff
 8029e68:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029e6c:	9c07      	ldr	r4, [sp, #28]
 8029e6e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8029e70:	2cff      	cmp	r4, #255	@ 0xff
 8029e72:	f001 10ff 	and.w	r0, r1, #16711935	@ 0xff00ff
 8029e76:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029e7a:	d01b      	beq.n	8029eb4 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8029e7c:	fb00 f004 	mul.w	r0, r0, r4
 8029e80:	fb0a fa04 	mul.w	sl, sl, r4
 8029e84:	ea4f 2810 	mov.w	r8, r0, lsr #8
 8029e88:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8029e8c:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8029e90:	f50a 7480 	add.w	r4, sl, #256	@ 0x100
 8029e94:	4440      	add	r0, r8
 8029e96:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8029e9a:	0a00      	lsrs	r0, r0, #8
 8029e9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ea0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8029ea4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029ea8:	ea40 0a0a 	orr.w	sl, r0, sl
 8029eac:	f00a 10ff 	and.w	r0, sl, #16711935	@ 0xff00ff
 8029eb0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029eb4:	9c08      	ldr	r4, [sp, #32]
 8029eb6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8029eb8:	2cff      	cmp	r4, #255	@ 0xff
 8029eba:	f001 18ff 	and.w	r8, r1, #16711935	@ 0xff00ff
 8029ebe:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8029ec2:	d01b      	beq.n	8029efc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8029ec4:	fb08 f804 	mul.w	r8, r8, r4
 8029ec8:	fb0b fb04 	mul.w	fp, fp, r4
 8029ecc:	ea4f 2418 	mov.w	r4, r8, lsr #8
 8029ed0:	f004 11ff 	and.w	r1, r4, #16711935	@ 0xff00ff
 8029ed4:	f108 1801 	add.w	r8, r8, #65537	@ 0x10001
 8029ed8:	f50b 7480 	add.w	r4, fp, #256	@ 0x100
 8029edc:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 8029ee0:	4488      	add	r8, r1
 8029ee2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029ee6:	0a24      	lsrs	r4, r4, #8
 8029ee8:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8029eec:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8029ef0:	ea48 0b0b 	orr.w	fp, r8, fp
 8029ef4:	f00b 18ff 	and.w	r8, fp, #16711935	@ 0xff00ff
 8029ef8:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8029efc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029efe:	fb07 f706 	mul.w	r7, r7, r6
 8029f02:	43c9      	mvns	r1, r1
 8029f04:	fb0e f606 	mul.w	r6, lr, r6
 8029f08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8029f0a:	f81c ec02 	ldrb.w	lr, [ip, #-2]
 8029f0e:	fb04 7703 	mla	r7, r4, r3, r7
 8029f12:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8029f14:	fb00 7702 	mla	r7, r0, r2, r7
 8029f18:	fb04 6603 	mla	r6, r4, r3, r6
 8029f1c:	fb0a 6602 	mla	r6, sl, r2, r6
 8029f20:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
 8029f24:	fb0b 6b05 	mla	fp, fp, r5, r6
 8029f28:	fb08 7805 	mla	r8, r8, r5, r7
 8029f2c:	f81c 4c01 	ldrb.w	r4, [ip, #-1]
 8029f30:	b2c9      	uxtb	r1, r1
 8029f32:	fb0e fe01 	mul.w	lr, lr, r1
 8029f36:	fb04 f401 	mul.w	r4, r4, r1
 8029f3a:	fb03 f101 	mul.w	r1, r3, r1
 8029f3e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029f42:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8029f46:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8029f4a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8029f4e:	ea48 030b 	orr.w	r3, r8, fp
 8029f52:	f10e 0201 	add.w	r2, lr, #1
 8029f56:	1c66      	adds	r6, r4, #1
 8029f58:	1c4d      	adds	r5, r1, #1
 8029f5a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8029f5e:	0a18      	lsrs	r0, r3, #8
 8029f60:	0c1a      	lsrs	r2, r3, #16
 8029f62:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 8029f66:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8029f6a:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 8029f6e:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8029f72:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029f76:	f80c ec02 	strb.w	lr, [ip, #-2]
 8029f7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8029f7e:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8029f82:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8029f84:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 8029f86:	4499      	add	r9, r3
 8029f88:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8029f8a:	4413      	add	r3, r2
 8029f8c:	9338      	str	r3, [sp, #224]	@ 0xe0
 8029f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029f90:	4563      	cmp	r3, ip
 8029f92:	d024      	beq.n	8029fde <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8029f94:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8029f96:	f10c 0c03 	add.w	ip, ip, #3
 8029f9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029f9e:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8029fa0:	ea4f 4229 	mov.w	r2, r9, asr #16
 8029fa4:	141b      	asrs	r3, r3, #16
 8029fa6:	fb01 2303 	mla	r3, r1, r3, r2
 8029faa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029fac:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8029fae:	5cc2      	ldrb	r2, [r0, r3]
 8029fb0:	f3c9 3403 	ubfx	r4, r9, #12, #4
 8029fb4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8029fb8:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8029fba:	4403      	add	r3, r0
 8029fbc:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8029fc0:	0e38      	lsrs	r0, r7, #24
 8029fc2:	2c00      	cmp	r4, #0
 8029fc4:	f47f aed7 	bne.w	8029d76 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8029fc8:	2a00      	cmp	r2, #0
 8029fca:	f43f aee9 	beq.w	8029da0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8029fce:	5c5b      	ldrb	r3, [r3, r1]
 8029fd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029fd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8029fd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8029fd8:	0e1b      	lsrs	r3, r3, #24
 8029fda:	9307      	str	r3, [sp, #28]
 8029fdc:	e6e0      	b.n	8029da0 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8029fde:	469b      	mov	fp, r3
 8029fe0:	e665      	b.n	8029cae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8029fe2:	2b00      	cmp	r3, #0
 8029fe4:	f77f ae63 	ble.w	8029cae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8029fe8:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8029fec:	ea4f 4228 	mov.w	r2, r8, asr #16
 8029ff0:	1439      	asrs	r1, r7, #16
 8029ff2:	2a00      	cmp	r2, #0
 8029ff4:	46d9      	mov	r9, fp
 8029ff6:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 8029ffa:	9c3e      	ldr	r4, [sp, #248]	@ 0xf8
 8029ffc:	e9dd b539 	ldrd	fp, r5, [sp, #228]	@ 0xe4
 802a000:	f3c8 3003 	ubfx	r0, r8, #12, #4
 802a004:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 802a008:	f2c0 8141 	blt.w	802a28e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 802a00c:	1e73      	subs	r3, r6, #1
 802a00e:	429a      	cmp	r2, r3
 802a010:	f280 813d 	bge.w	802a28e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 802a014:	2900      	cmp	r1, #0
 802a016:	f2c0 813a 	blt.w	802a28e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 802a01a:	f10c 33ff 	add.w	r3, ip, #4294967295
 802a01e:	4299      	cmp	r1, r3
 802a020:	f280 8135 	bge.w	802a28e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a2>
 802a024:	b233      	sxth	r3, r6
 802a026:	fb01 2203 	mla	r2, r1, r3, r2
 802a02a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802a02c:	930c      	str	r3, [sp, #48]	@ 0x30
 802a02e:	5c8b      	ldrb	r3, [r1, r2]
 802a030:	440a      	add	r2, r1
 802a032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802a034:	4616      	mov	r6, r2
 802a036:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802a03a:	930d      	str	r3, [sp, #52]	@ 0x34
 802a03c:	0e1b      	lsrs	r3, r3, #24
 802a03e:	2800      	cmp	r0, #0
 802a040:	f000 8153 	beq.w	802a2ea <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 802a044:	f896 c001 	ldrb.w	ip, [r6, #1]
 802a048:	f851 202c 	ldr.w	r2, [r1, ip, lsl #2]
 802a04c:	921f      	str	r2, [sp, #124]	@ 0x7c
 802a04e:	0e12      	lsrs	r2, r2, #24
 802a050:	9214      	str	r2, [sp, #80]	@ 0x50
 802a052:	f1be 0f00 	cmp.w	lr, #0
 802a056:	f040 8155 	bne.w	802a304 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802a05a:	b280      	uxth	r0, r0
 802a05c:	fa1f fc8e 	uxth.w	ip, lr
 802a060:	fb00 f20c 	mul.w	r2, r0, ip
 802a064:	0106      	lsls	r6, r0, #4
 802a066:	1ab0      	subs	r0, r6, r2
 802a068:	b281      	uxth	r1, r0
 802a06a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802a06c:	ebc2 1c0c 	rsb	ip, r2, ip, lsl #4
 802a070:	fb01 f000 	mul.w	r0, r1, r0
 802a074:	9117      	str	r1, [sp, #92]	@ 0x5c
 802a076:	f5c6 7680 	rsb	r6, r6, #256	@ 0x100
 802a07a:	fa1f f18c 	uxth.w	r1, ip
 802a07e:	1a76      	subs	r6, r6, r1
 802a080:	b2b6      	uxth	r6, r6
 802a082:	9619      	str	r6, [sp, #100]	@ 0x64
 802a084:	fb06 0603 	mla	r6, r6, r3, r0
 802a088:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802a08a:	9118      	str	r1, [sp, #96]	@ 0x60
 802a08c:	fb01 6600 	mla	r6, r1, r0, r6
 802a090:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802a092:	fb02 6601 	mla	r6, r2, r1, r6
 802a096:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802a09a:	911a      	str	r1, [sp, #104]	@ 0x68
 802a09c:	2900      	cmp	r1, #0
 802a09e:	f000 80e0 	beq.w	802a262 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802a0a2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a0a4:	2bff      	cmp	r3, #255	@ 0xff
 802a0a6:	f000 11ff 	and.w	r1, r0, #16711935	@ 0xff00ff
 802a0aa:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802a0ae:	910d      	str	r1, [sp, #52]	@ 0x34
 802a0b0:	901b      	str	r0, [sp, #108]	@ 0x6c
 802a0b2:	d01c      	beq.n	802a0ee <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 802a0b4:	fb01 f103 	mul.w	r1, r1, r3
 802a0b8:	fb00 f003 	mul.w	r0, r0, r3
 802a0bc:	460e      	mov	r6, r1
 802a0be:	4603      	mov	r3, r0
 802a0c0:	0a09      	lsrs	r1, r1, #8
 802a0c2:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a0c6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802a0ca:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 802a0ce:	4431      	add	r1, r6
 802a0d0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802a0d4:	0a09      	lsrs	r1, r1, #8
 802a0d6:	0a1b      	lsrs	r3, r3, #8
 802a0d8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a0dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a0e0:	430b      	orrs	r3, r1
 802a0e2:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 802a0e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a0ea:	910d      	str	r1, [sp, #52]	@ 0x34
 802a0ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 802a0ee:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 802a0f0:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802a0f4:	f401 467f 	and.w	r6, r1, #65280	@ 0xff00
 802a0f8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802a0fa:	931c      	str	r3, [sp, #112]	@ 0x70
 802a0fc:	29ff      	cmp	r1, #255	@ 0xff
 802a0fe:	d019      	beq.n	802a134 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 802a100:	fb03 f301 	mul.w	r3, r3, r1
 802a104:	fb06 f601 	mul.w	r6, r6, r1
 802a108:	0a19      	lsrs	r1, r3, #8
 802a10a:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 802a10e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a112:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 802a116:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802a11a:	4401      	add	r1, r0
 802a11c:	0a09      	lsrs	r1, r1, #8
 802a11e:	0a1b      	lsrs	r3, r3, #8
 802a120:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a124:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a128:	4319      	orrs	r1, r3
 802a12a:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802a12e:	931c      	str	r3, [sp, #112]	@ 0x70
 802a130:	f401 467f 	and.w	r6, r1, #65280	@ 0xff00
 802a134:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802a136:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802a13a:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802a13e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802a140:	930c      	str	r3, [sp, #48]	@ 0x30
 802a142:	29ff      	cmp	r1, #255	@ 0xff
 802a144:	901d      	str	r0, [sp, #116]	@ 0x74
 802a146:	d01a      	beq.n	802a17e <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x592>
 802a148:	fb03 f301 	mul.w	r3, r3, r1
 802a14c:	fb00 fc01 	mul.w	ip, r0, r1
 802a150:	0a19      	lsrs	r1, r3, #8
 802a152:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 802a156:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a15a:	f50c 7380 	add.w	r3, ip, #256	@ 0x100
 802a15e:	4401      	add	r1, r0
 802a160:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802a164:	0a09      	lsrs	r1, r1, #8
 802a166:	0a1b      	lsrs	r3, r3, #8
 802a168:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a16c:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a170:	4319      	orrs	r1, r3
 802a172:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802a176:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802a17a:	930c      	str	r3, [sp, #48]	@ 0x30
 802a17c:	911d      	str	r1, [sp, #116]	@ 0x74
 802a17e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 802a180:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802a184:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 802a188:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802a18a:	29ff      	cmp	r1, #255	@ 0xff
 802a18c:	d01c      	beq.n	802a1c8 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 802a18e:	fb0c fc01 	mul.w	ip, ip, r1
 802a192:	fb0e fe01 	mul.w	lr, lr, r1
 802a196:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802a19a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802a19e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a1a2:	f50e 7180 	add.w	r1, lr, #256	@ 0x100
 802a1a6:	4484      	add	ip, r0
 802a1a8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a1ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a1b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a1b4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a1b8:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802a1bc:	ea4c 0e0e 	orr.w	lr, ip, lr
 802a1c0:	f00e 1cff 	and.w	ip, lr, #16711935	@ 0xff00ff
 802a1c4:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802a1c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802a1ca:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802a1cc:	43c9      	mvns	r1, r1
 802a1ce:	911a      	str	r1, [sp, #104]	@ 0x68
 802a1d0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802a1d2:	fb00 f001 	mul.w	r0, r0, r1
 802a1d6:	fb06 f301 	mul.w	r3, r6, r1
 802a1da:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 802a1dc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802a1de:	fb01 0006 	mla	r0, r1, r6, r0
 802a1e2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802a1e4:	fb01 3106 	mla	r1, r1, r6, r3
 802a1e8:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 802a1ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a1ec:	910d      	str	r1, [sp, #52]	@ 0x34
 802a1ee:	fb03 0306 	mla	r3, r3, r6, r0
 802a1f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802a1f4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802a1f6:	fb0c 3302 	mla	r3, ip, r2, r3
 802a1fa:	fb00 1106 	mla	r1, r0, r6, r1
 802a1fe:	f89d 6068 	ldrb.w	r6, [sp, #104]	@ 0x68
 802a202:	f899 0002 	ldrb.w	r0, [r9, #2]
 802a206:	fb0e 1e02 	mla	lr, lr, r2, r1
 802a20a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802a20e:	f899 1000 	ldrb.w	r1, [r9]
 802a212:	fb00 f006 	mul.w	r0, r0, r6
 802a216:	fb02 fc06 	mul.w	ip, r2, r6
 802a21a:	fb01 f106 	mul.w	r1, r1, r6
 802a21e:	0a1b      	lsrs	r3, r3, #8
 802a220:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a224:	f003 12ff 	and.w	r2, r3, #16711935	@ 0xff00ff
 802a228:	1c46      	adds	r6, r0, #1
 802a22a:	f40e 437f 	and.w	r3, lr, #65280	@ 0xff00
 802a22e:	4313      	orrs	r3, r2
 802a230:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802a234:	f10c 0201 	add.w	r2, ip, #1
 802a238:	1c4e      	adds	r6, r1, #1
 802a23a:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 802a23e:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 802a242:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802a246:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 802a24a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802a24e:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802a252:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802a256:	f889 2001 	strb.w	r2, [r9, #1]
 802a25a:	f889 0002 	strb.w	r0, [r9, #2]
 802a25e:	f889 3000 	strb.w	r3, [r9]
 802a262:	f1ba 0f00 	cmp.w	sl, #0
 802a266:	f109 0903 	add.w	r9, r9, #3
 802a26a:	44d8      	add	r8, fp
 802a26c:	442f      	add	r7, r5
 802a26e:	dd2c      	ble.n	802a2ca <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6de>
 802a270:	e9d4 6c02 	ldrd	r6, ip, [r4, #8]
 802a274:	ea4f 4228 	mov.w	r2, r8, asr #16
 802a278:	2a00      	cmp	r2, #0
 802a27a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802a27e:	ea4f 4127 	mov.w	r1, r7, asr #16
 802a282:	f3c8 3003 	ubfx	r0, r8, #12, #4
 802a286:	f3c7 3e03 	ubfx	lr, r7, #12, #4
 802a28a:	f6bf aebf 	bge.w	802a00c <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802a28e:	1c53      	adds	r3, r2, #1
 802a290:	d4e7      	bmi.n	802a262 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802a292:	42b3      	cmp	r3, r6
 802a294:	dce5      	bgt.n	802a262 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802a296:	1c4b      	adds	r3, r1, #1
 802a298:	d4e3      	bmi.n	802a262 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802a29a:	4563      	cmp	r3, ip
 802a29c:	dce1      	bgt.n	802a262 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 802a29e:	fa0f f38c 	sxth.w	r3, ip
 802a2a2:	b236      	sxth	r6, r6
 802a2a4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802a2a8:	e9cd 6300 	strd	r6, r3, [sp]
 802a2ac:	e9cd 0e04 	strd	r0, lr, [sp, #16]
 802a2b0:	4649      	mov	r1, r9
 802a2b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a2b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a2b6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802a2b8:	f7ff fb08 	bl	80298cc <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802a2bc:	f1ba 0f00 	cmp.w	sl, #0
 802a2c0:	f109 0903 	add.w	r9, r9, #3
 802a2c4:	44d8      	add	r8, fp
 802a2c6:	442f      	add	r7, r5
 802a2c8:	dcd2      	bgt.n	802a270 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x684>
 802a2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a2cc:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 802a2d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802a2d4:	3301      	adds	r3, #1
 802a2d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802a2da:	449b      	add	fp, r3
 802a2dc:	e4e7      	b.n	8029cae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802a2de:	3b01      	subs	r3, #1
 802a2e0:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 802a2e4:	469a      	mov	sl, r3
 802a2e6:	9309      	str	r3, [sp, #36]	@ 0x24
 802a2e8:	e683      	b.n	8029ff2 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 802a2ea:	f1be 0f00 	cmp.w	lr, #0
 802a2ee:	f43f aeb4 	beq.w	802a05a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802a2f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a2f4:	5c72      	ldrb	r2, [r6, r1]
 802a2f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802a2f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802a2fc:	9220      	str	r2, [sp, #128]	@ 0x80
 802a2fe:	0e12      	lsrs	r2, r2, #24
 802a300:	9215      	str	r2, [sp, #84]	@ 0x54
 802a302:	e6aa      	b.n	802a05a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802a304:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a306:	eb06 0c02 	add.w	ip, r6, r2
 802a30a:	4632      	mov	r2, r6
 802a30c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802a30e:	f89c c001 	ldrb.w	ip, [ip, #1]
 802a312:	5d92      	ldrb	r2, [r2, r6]
 802a314:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 802a318:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802a31c:	0e31      	lsrs	r1, r6, #24
 802a31e:	9220      	str	r2, [sp, #128]	@ 0x80
 802a320:	0e12      	lsrs	r2, r2, #24
 802a322:	9621      	str	r6, [sp, #132]	@ 0x84
 802a324:	9116      	str	r1, [sp, #88]	@ 0x58
 802a326:	9215      	str	r2, [sp, #84]	@ 0x54
 802a328:	e697      	b.n	802a05a <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46e>
 802a32a:	f43f acc0 	beq.w	8029cae <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 802a32e:	1e65      	subs	r5, r4, #1
 802a330:	e4fe      	b.n	8029d30 <_ZN8touchgfx8LCDGPU2D68TextureMapper_24BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802a332:	bf00      	nop

0802a334 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 802a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a338:	b087      	sub	sp, #28
 802a33a:	f89d b058 	ldrb.w	fp, [sp, #88]	@ 0x58
 802a33e:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	@ 0x40
 802a342:	ea6f 000b 	mvn.w	r0, fp
 802a346:	e9dd 4712 	ldrd	r4, r7, [sp, #72]	@ 0x48
 802a34a:	fb07 4c06 	mla	ip, r7, r6, r4
 802a34e:	b2c0      	uxtb	r0, r0
 802a350:	2f00      	cmp	r7, #0
 802a352:	9002      	str	r0, [sp, #8]
 802a354:	eb02 0e0c 	add.w	lr, r2, ip
 802a358:	f107 0801 	add.w	r8, r7, #1
 802a35c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	@ 0x44
 802a360:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 802a364:	f89d 0054 	ldrb.w	r0, [sp, #84]	@ 0x54
 802a368:	db02      	blt.n	802a370 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x3c>
 802a36a:	45b9      	cmp	r9, r7
 802a36c:	f300 80a0 	bgt.w	802a4b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x17c>
 802a370:	468c      	mov	ip, r1
 802a372:	460f      	mov	r7, r1
 802a374:	780a      	ldrb	r2, [r1, #0]
 802a376:	9203      	str	r2, [sp, #12]
 802a378:	9201      	str	r2, [sp, #4]
 802a37a:	f1b8 0f00 	cmp.w	r8, #0
 802a37e:	db01      	blt.n	802a384 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x50>
 802a380:	45c1      	cmp	r9, r8
 802a382:	dc7b      	bgt.n	802a47c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x148>
 802a384:	460b      	mov	r3, r1
 802a386:	4689      	mov	r9, r1
 802a388:	f891 a000 	ldrb.w	sl, [r1]
 802a38c:	f8cd a014 	str.w	sl, [sp, #20]
 802a390:	2d0f      	cmp	r5, #15
 802a392:	f200 80cd 	bhi.w	802a530 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 802a396:	280f      	cmp	r0, #15
 802a398:	f200 80ca 	bhi.w	802a530 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 802a39c:	780a      	ldrb	r2, [r1, #0]
 802a39e:	9204      	str	r2, [sp, #16]
 802a3a0:	b2aa      	uxth	r2, r5
 802a3a2:	b280      	uxth	r0, r0
 802a3a4:	fb02 f500 	mul.w	r5, r2, r0
 802a3a8:	0112      	lsls	r2, r2, #4
 802a3aa:	f89c 8001 	ldrb.w	r8, [ip, #1]
 802a3ae:	f89c e002 	ldrb.w	lr, [ip, #2]
 802a3b2:	1b54      	subs	r4, r2, r5
 802a3b4:	b2a4      	uxth	r4, r4
 802a3b6:	fb04 f808 	mul.w	r8, r4, r8
 802a3ba:	fb04 fe0e 	mul.w	lr, r4, lr
 802a3be:	ebc5 1000 	rsb	r0, r5, r0, lsl #4
 802a3c2:	b280      	uxth	r0, r0
 802a3c4:	9e01      	ldr	r6, [sp, #4]
 802a3c6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802a3ca:	f897 c001 	ldrb.w	ip, [r7, #1]
 802a3ce:	1a12      	subs	r2, r2, r0
 802a3d0:	78bf      	ldrb	r7, [r7, #2]
 802a3d2:	b292      	uxth	r2, r2
 802a3d4:	fb04 f406 	mul.w	r4, r4, r6
 802a3d8:	fb02 8c0c 	mla	ip, r2, ip, r8
 802a3dc:	fb02 e707 	mla	r7, r2, r7, lr
 802a3e0:	9e03      	ldr	r6, [sp, #12]
 802a3e2:	f899 8001 	ldrb.w	r8, [r9, #1]
 802a3e6:	f899 e002 	ldrb.w	lr, [r9, #2]
 802a3ea:	fb02 4206 	mla	r2, r2, r6, r4
 802a3ee:	fb00 cc08 	mla	ip, r0, r8, ip
 802a3f2:	fb00 770e 	mla	r7, r0, lr, r7
 802a3f6:	f893 8001 	ldrb.w	r8, [r3, #1]
 802a3fa:	f893 e002 	ldrb.w	lr, [r3, #2]
 802a3fe:	fb00 220a 	mla	r2, r0, sl, r2
 802a402:	fb05 c808 	mla	r8, r5, r8, ip
 802a406:	fb05 7e0e 	mla	lr, r5, lr, r7
 802a40a:	9805      	ldr	r0, [sp, #20]
 802a40c:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 802a410:	fb05 2500 	mla	r5, r5, r0, r2
 802a414:	9a04      	ldr	r2, [sp, #16]
 802a416:	fa1f f38b 	uxth.w	r3, fp
 802a41a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802a41e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802a422:	fb12 f609 	smulbb	r6, r2, r9
 802a426:	fb1e fe03 	smulbb	lr, lr, r3
 802a42a:	fb18 f803 	smulbb	r8, r8, r3
 802a42e:	784a      	ldrb	r2, [r1, #1]
 802a430:	7888      	ldrb	r0, [r1, #2]
 802a432:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802a436:	fb05 6503 	mla	r5, r5, r3, r6
 802a43a:	fb02 8809 	mla	r8, r2, r9, r8
 802a43e:	fb00 e909 	mla	r9, r0, r9, lr
 802a442:	b2ad      	uxth	r5, r5
 802a444:	fa1f f888 	uxth.w	r8, r8
 802a448:	fa1f f989 	uxth.w	r9, r9
 802a44c:	f108 0001 	add.w	r0, r8, #1
 802a450:	f109 0201 	add.w	r2, r9, #1
 802a454:	1c6b      	adds	r3, r5, #1
 802a456:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802a45a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802a45e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802a462:	ea4f 2828 	mov.w	r8, r8, asr #8
 802a466:	ea4f 2929 	mov.w	r9, r9, asr #8
 802a46a:	122d      	asrs	r5, r5, #8
 802a46c:	f881 8001 	strb.w	r8, [r1, #1]
 802a470:	f881 9002 	strb.w	r9, [r1, #2]
 802a474:	700d      	strb	r5, [r1, #0]
 802a476:	b007      	add	sp, #28
 802a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a47c:	b388      	cbz	r0, 802a4e2 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1ae>
 802a47e:	2c00      	cmp	r4, #0
 802a480:	db44      	blt.n	802a50c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 802a482:	42a6      	cmp	r6, r4
 802a484:	dd42      	ble.n	802a50c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d8>
 802a486:	f81e 9006 	ldrb.w	r9, [lr, r6]
 802a48a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802a48e:	4499      	add	r9, r3
 802a490:	3401      	adds	r4, #1
 802a492:	f899 a000 	ldrb.w	sl, [r9]
 802a496:	d435      	bmi.n	802a504 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 802a498:	42a6      	cmp	r6, r4
 802a49a:	dd33      	ble.n	802a504 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1d0>
 802a49c:	2d00      	cmp	r5, #0
 802a49e:	d043      	beq.n	802a528 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1f4>
 802a4a0:	4476      	add	r6, lr
 802a4a2:	7872      	ldrb	r2, [r6, #1]
 802a4a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802a4a8:	5c9c      	ldrb	r4, [r3, r2]
 802a4aa:	4413      	add	r3, r2
 802a4ac:	9405      	str	r4, [sp, #20]
 802a4ae:	e76f      	b.n	802a390 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 802a4b0:	2c00      	cmp	r4, #0
 802a4b2:	db01      	blt.n	802a4b8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x184>
 802a4b4:	42a6      	cmp	r6, r4
 802a4b6:	dc1f      	bgt.n	802a4f8 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1c4>
 802a4b8:	460f      	mov	r7, r1
 802a4ba:	783a      	ldrb	r2, [r7, #0]
 802a4bc:	9203      	str	r2, [sp, #12]
 802a4be:	1c62      	adds	r2, r4, #1
 802a4c0:	d40b      	bmi.n	802a4da <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 802a4c2:	4296      	cmp	r6, r2
 802a4c4:	dd09      	ble.n	802a4da <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a6>
 802a4c6:	b31d      	cbz	r5, 802a510 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1dc>
 802a4c8:	f89e c001 	ldrb.w	ip, [lr, #1]
 802a4cc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802a4d0:	f813 200c 	ldrb.w	r2, [r3, ip]
 802a4d4:	449c      	add	ip, r3
 802a4d6:	9201      	str	r2, [sp, #4]
 802a4d8:	e74f      	b.n	802a37a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 802a4da:	780a      	ldrb	r2, [r1, #0]
 802a4dc:	468c      	mov	ip, r1
 802a4de:	9201      	str	r2, [sp, #4]
 802a4e0:	e74b      	b.n	802a37a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x46>
 802a4e2:	2d0f      	cmp	r5, #15
 802a4e4:	f891 a000 	ldrb.w	sl, [r1]
 802a4e8:	d822      	bhi.n	802a530 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1fc>
 802a4ea:	f8cd a010 	str.w	sl, [sp, #16]
 802a4ee:	460b      	mov	r3, r1
 802a4f0:	4689      	mov	r9, r1
 802a4f2:	f8cd a014 	str.w	sl, [sp, #20]
 802a4f6:	e753      	b.n	802a3a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x6c>
 802a4f8:	f812 700c 	ldrb.w	r7, [r2, ip]
 802a4fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802a500:	441f      	add	r7, r3
 802a502:	e7da      	b.n	802a4ba <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x186>
 802a504:	780b      	ldrb	r3, [r1, #0]
 802a506:	9305      	str	r3, [sp, #20]
 802a508:	460b      	mov	r3, r1
 802a50a:	e741      	b.n	802a390 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5c>
 802a50c:	4689      	mov	r9, r1
 802a50e:	e7bf      	b.n	802a490 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x15c>
 802a510:	780a      	ldrb	r2, [r1, #0]
 802a512:	f1b8 0f00 	cmp.w	r8, #0
 802a516:	9201      	str	r2, [sp, #4]
 802a518:	468c      	mov	ip, r1
 802a51a:	f6bf af31 	bge.w	802a380 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x4c>
 802a51e:	460b      	mov	r3, r1
 802a520:	4689      	mov	r9, r1
 802a522:	9205      	str	r2, [sp, #20]
 802a524:	4692      	mov	sl, r2
 802a526:	e736      	b.n	802a396 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 802a528:	780b      	ldrb	r3, [r1, #0]
 802a52a:	9305      	str	r3, [sp, #20]
 802a52c:	460b      	mov	r3, r1
 802a52e:	e732      	b.n	802a396 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x62>
 802a530:	4b03      	ldr	r3, [pc, #12]	@ (802a540 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x20c>)
 802a532:	4a04      	ldr	r2, [pc, #16]	@ (802a544 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x210>)
 802a534:	f240 31ca 	movw	r1, #970	@ 0x3ca
 802a538:	4803      	ldr	r0, [pc, #12]	@ (802a548 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x214>)
 802a53a:	f001 fb3d 	bl	802bbb8 <__assert_func>
 802a53e:	bf00      	nop
 802a540:	0802ef50 	.word	0x0802ef50
 802a544:	0802f5cc 	.word	0x0802f5cc
 802a548:	0802f0d8 	.word	0x0802f0d8

0802a54c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a550:	ed2d 8b08 	vpush	{d8-d11}
 802a554:	b095      	sub	sp, #84	@ 0x54
 802a556:	f89d 40bc 	ldrb.w	r4, [sp, #188]	@ 0xbc
 802a55a:	9013      	str	r0, [sp, #76]	@ 0x4c
 802a55c:	43e0      	mvns	r0, r4
 802a55e:	e9dd a727 	ldrd	sl, r7, [sp, #156]	@ 0x9c
 802a562:	eeb0 aa40 	vmov.f32	s20, s0
 802a566:	eef0 9a60 	vmov.f32	s19, s1
 802a56a:	eeb0 9a41 	vmov.f32	s18, s2
 802a56e:	eef0 8a62 	vmov.f32	s17, s5
 802a572:	eeb0 8a43 	vmov.f32	s16, s6
 802a576:	eef0 ba44 	vmov.f32	s23, s8
 802a57a:	eeb0 ba64 	vmov.f32	s22, s9
 802a57e:	eef0 aa45 	vmov.f32	s21, s10
 802a582:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 802a586:	9411      	str	r4, [sp, #68]	@ 0x44
 802a588:	469b      	mov	fp, r3
 802a58a:	e9dd 422b 	ldrd	r4, r2, [sp, #172]	@ 0xac
 802a58e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 802a590:	6861      	ldr	r1, [r4, #4]
 802a592:	fb01 2303 	mla	r3, r1, r3, r2
 802a596:	6821      	ldr	r1, [r4, #0]
 802a598:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 802a59a:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 802a59c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802a5a0:	6852      	ldr	r2, [r2, #4]
 802a5a2:	6824      	ldr	r4, [r4, #0]
 802a5a4:	930d      	str	r3, [sp, #52]	@ 0x34
 802a5a6:	b2c3      	uxtb	r3, r0
 802a5a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a5aa:	1d13      	adds	r3, r2, #4
 802a5ac:	940a      	str	r4, [sp, #40]	@ 0x28
 802a5ae:	9308      	str	r3, [sp, #32]
 802a5b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a5b2:	2b00      	cmp	r3, #0
 802a5b4:	dc02      	bgt.n	802a5bc <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802a5b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a5b8:	2b00      	cmp	r3, #0
 802a5ba:	dd6c      	ble.n	802a696 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802a5bc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802a5be:	f1bb 0f00 	cmp.w	fp, #0
 802a5c2:	e9d3 5e02 	ldrd	r5, lr, [r3, #8]
 802a5c6:	b228      	sxth	r0, r5
 802a5c8:	fa0f f68e 	sxth.w	r6, lr
 802a5cc:	f340 8245 	ble.w	802aa5a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 802a5d0:	e9dd 8929 	ldrd	r8, r9, [sp, #164]	@ 0xa4
 802a5d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a5d6:	1e44      	subs	r4, r0, #1
 802a5d8:	f106 3cff 	add.w	ip, r6, #4294967295
 802a5dc:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 802a5e0:	ea5f 432a 	movs.w	r3, sl, asr #16
 802a5e4:	ea4f 4127 	mov.w	r1, r7, asr #16
 802a5e8:	d405      	bmi.n	802a5f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802a5ea:	42a3      	cmp	r3, r4
 802a5ec:	da03      	bge.n	802a5f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802a5ee:	2900      	cmp	r1, #0
 802a5f0:	db01      	blt.n	802a5f6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802a5f2:	4561      	cmp	r1, ip
 802a5f4:	db54      	blt.n	802a6a0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802a5f6:	f113 0e01 	adds.w	lr, r3, #1
 802a5fa:	d407      	bmi.n	802a60c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802a5fc:	4586      	cmp	lr, r0
 802a5fe:	dc05      	bgt.n	802a60c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802a600:	f111 0e01 	adds.w	lr, r1, #1
 802a604:	d402      	bmi.n	802a60c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802a606:	45b6      	cmp	lr, r6
 802a608:	f340 8189 	ble.w	802a91e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 802a60c:	f1bb 0b01 	subs.w	fp, fp, #1
 802a610:	44c2      	add	sl, r8
 802a612:	444f      	add	r7, r9
 802a614:	f102 0204 	add.w	r2, r2, #4
 802a618:	d1e2      	bne.n	802a5e0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a61a:	920d      	str	r2, [sp, #52]	@ 0x34
 802a61c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a61e:	2b00      	cmp	r3, #0
 802a620:	dd39      	ble.n	802a696 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802a622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a626:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a62a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a62e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a632:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a636:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802a63a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a63e:	ee76 6a68 	vsub.f32	s13, s12, s17
 802a642:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802a646:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a64a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802a64e:	ee16 2a90 	vmov	r2, s13
 802a652:	3b01      	subs	r3, #1
 802a654:	930e      	str	r3, [sp, #56]	@ 0x38
 802a656:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a658:	fb92 f3f3 	sdiv	r3, r2, r3
 802a65c:	ee17 2a10 	vmov	r2, s14
 802a660:	eeb0 7a48 	vmov.f32	s14, s16
 802a664:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802a668:	ee17 7a10 	vmov	r7, s14
 802a66c:	eeb0 7a68 	vmov.f32	s14, s17
 802a670:	9329      	str	r3, [sp, #164]	@ 0xa4
 802a672:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a674:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802a678:	fb92 f3f3 	sdiv	r3, r2, r3
 802a67c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a67e:	932a      	str	r3, [sp, #168]	@ 0xa8
 802a680:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802a682:	ee17 aa10 	vmov	sl, s14
 802a686:	eeb0 8a67 	vmov.f32	s16, s15
 802a68a:	eef0 8a46 	vmov.f32	s17, s12
 802a68e:	bf14      	ite	ne
 802a690:	469b      	movne	fp, r3
 802a692:	4693      	moveq	fp, r2
 802a694:	e78c      	b.n	802a5b0 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802a696:	b015      	add	sp, #84	@ 0x54
 802a698:	ecbd 8b08 	vpop	{d8-d11}
 802a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6a0:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802a6a4:	920d      	str	r2, [sp, #52]	@ 0x34
 802a6a6:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 802a6a8:	f10b 32ff 	add.w	r2, fp, #4294967295
 802a6ac:	fb01 a302 	mla	r3, r1, r2, sl
 802a6b0:	141b      	asrs	r3, r3, #16
 802a6b2:	9209      	str	r2, [sp, #36]	@ 0x24
 802a6b4:	f100 80d3 	bmi.w	802a85e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802a6b8:	42a3      	cmp	r3, r4
 802a6ba:	f280 80d0 	bge.w	802a85e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802a6be:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802a6c0:	fb03 7302 	mla	r3, r3, r2, r7
 802a6c4:	141b      	asrs	r3, r3, #16
 802a6c6:	f100 80ca 	bmi.w	802a85e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802a6ca:	3e01      	subs	r6, #1
 802a6cc:	42b3      	cmp	r3, r6
 802a6ce:	f280 80c6 	bge.w	802a85e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802a6d2:	f1bb 0f00 	cmp.w	fp, #0
 802a6d6:	dda1      	ble.n	802a61c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802a6d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 802a6dc:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 802a6e0:	930c      	str	r3, [sp, #48]	@ 0x30
 802a6e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a6e4:	f103 0804 	add.w	r8, r3, #4
 802a6e8:	e08f      	b.n	802a80a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802a6ea:	7861      	ldrb	r1, [r4, #1]
 802a6ec:	eb04 0c00 	add.w	ip, r4, r0
 802a6f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802a6f4:	4431      	add	r1, r6
 802a6f6:	2a00      	cmp	r2, #0
 802a6f8:	f000 80a3 	beq.w	802a842 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f6>
 802a6fc:	5c20      	ldrb	r0, [r4, r0]
 802a6fe:	f89c c001 	ldrb.w	ip, [ip, #1]
 802a702:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802a706:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802a70a:	4430      	add	r0, r6
 802a70c:	44b4      	add	ip, r6
 802a70e:	b29b      	uxth	r3, r3
 802a710:	b292      	uxth	r2, r2
 802a712:	fb03 f402 	mul.w	r4, r3, r2
 802a716:	011b      	lsls	r3, r3, #4
 802a718:	f891 b001 	ldrb.w	fp, [r1, #1]
 802a71c:	1b1e      	subs	r6, r3, r4
 802a71e:	f891 9002 	ldrb.w	r9, [r1, #2]
 802a722:	b2b6      	uxth	r6, r6
 802a724:	7809      	ldrb	r1, [r1, #0]
 802a726:	fb06 fb0b 	mul.w	fp, r6, fp
 802a72a:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802a72e:	b292      	uxth	r2, r2
 802a730:	fb06 f909 	mul.w	r9, r6, r9
 802a734:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802a738:	fb06 f601 	mul.w	r6, r6, r1
 802a73c:	1a9b      	subs	r3, r3, r2
 802a73e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802a742:	b29b      	uxth	r3, r3
 802a744:	f89e e002 	ldrb.w	lr, [lr, #2]
 802a748:	fb03 bb01 	mla	fp, r3, r1, fp
 802a74c:	9908      	ldr	r1, [sp, #32]
 802a74e:	fb03 990e 	mla	r9, r3, lr, r9
 802a752:	5d49      	ldrb	r1, [r1, r5]
 802a754:	7885      	ldrb	r5, [r0, #2]
 802a756:	fb03 6301 	mla	r3, r3, r1, r6
 802a75a:	f890 e001 	ldrb.w	lr, [r0, #1]
 802a75e:	fb02 9905 	mla	r9, r2, r5, r9
 802a762:	7801      	ldrb	r1, [r0, #0]
 802a764:	fb02 bb0e 	mla	fp, r2, lr, fp
 802a768:	f89c 0002 	ldrb.w	r0, [ip, #2]
 802a76c:	fb02 3301 	mla	r3, r2, r1, r3
 802a770:	f89c e001 	ldrb.w	lr, [ip, #1]
 802a774:	fb04 9900 	mla	r9, r4, r0, r9
 802a778:	f89c 1000 	ldrb.w	r1, [ip]
 802a77c:	fb04 bb0e 	mla	fp, r4, lr, fp
 802a780:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802a782:	f818 cc04 	ldrb.w	ip, [r8, #-4]
 802a786:	fb04 3301 	mla	r3, r4, r1, r3
 802a78a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a78c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802a790:	fb19 f902 	smulbb	r9, r9, r2
 802a794:	fb1c fc01 	smulbb	ip, ip, r1
 802a798:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802a79c:	f818 5c02 	ldrb.w	r5, [r8, #-2]
 802a7a0:	fb1b fb02 	smulbb	fp, fp, r2
 802a7a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a7a8:	f818 6c03 	ldrb.w	r6, [r8, #-3]
 802a7ac:	fb05 9901 	mla	r9, r5, r1, r9
 802a7b0:	fb03 c302 	mla	r3, r3, r2, ip
 802a7b4:	fb06 bb01 	mla	fp, r6, r1, fp
 802a7b8:	fa1f f989 	uxth.w	r9, r9
 802a7bc:	b29b      	uxth	r3, r3
 802a7be:	f109 0101 	add.w	r1, r9, #1
 802a7c2:	1c5a      	adds	r2, r3, #1
 802a7c4:	fa1f fb8b 	uxth.w	fp, fp
 802a7c8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 802a7cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a7d0:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 802a7d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a7d4:	f10b 0001 	add.w	r0, fp, #1
 802a7d8:	3a01      	subs	r2, #1
 802a7da:	eb00 2b1b 	add.w	fp, r0, fp, lsr #8
 802a7de:	448a      	add	sl, r1
 802a7e0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 802a7e2:	9209      	str	r2, [sp, #36]	@ 0x24
 802a7e4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 802a7e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 802a7ec:	121b      	asrs	r3, r3, #8
 802a7ee:	3201      	adds	r2, #1
 802a7f0:	f808 bc03 	strb.w	fp, [r8, #-3]
 802a7f4:	f808 9c02 	strb.w	r9, [r8, #-2]
 802a7f8:	f808 3c04 	strb.w	r3, [r8, #-4]
 802a7fc:	440f      	add	r7, r1
 802a7fe:	f108 0804 	add.w	r8, r8, #4
 802a802:	d025      	beq.n	802a850 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802a804:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802a806:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802a80a:	ea4f 432a 	mov.w	r3, sl, asr #16
 802a80e:	143c      	asrs	r4, r7, #16
 802a810:	fb00 3404 	mla	r4, r0, r4, r3
 802a814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a816:	9e08      	ldr	r6, [sp, #32]
 802a818:	5d15      	ldrb	r5, [r2, r4]
 802a81a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 802a81e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802a822:	4414      	add	r4, r2
 802a824:	eb06 0e05 	add.w	lr, r6, r5
 802a828:	f3c7 3203 	ubfx	r2, r7, #12, #4
 802a82c:	2b00      	cmp	r3, #0
 802a82e:	f47f af5c 	bne.w	802a6ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802a832:	b14a      	cbz	r2, 802a848 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802a834:	5c20      	ldrb	r0, [r4, r0]
 802a836:	46f4      	mov	ip, lr
 802a838:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802a83c:	4430      	add	r0, r6
 802a83e:	4671      	mov	r1, lr
 802a840:	e765      	b.n	802a70e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a842:	46f4      	mov	ip, lr
 802a844:	4670      	mov	r0, lr
 802a846:	e762      	b.n	802a70e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a848:	46f4      	mov	ip, lr
 802a84a:	4670      	mov	r0, lr
 802a84c:	4671      	mov	r1, lr
 802a84e:	e75e      	b.n	802a70e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802a850:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a852:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 802a856:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 802a85a:	930d      	str	r3, [sp, #52]	@ 0x34
 802a85c:	e6de      	b.n	802a61c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802a85e:	f1bb 0f00 	cmp.w	fp, #0
 802a862:	f77f aedb 	ble.w	802a61c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802a866:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 802a86a:	ea4f 432a 	mov.w	r3, sl, asr #16
 802a86e:	1439      	asrs	r1, r7, #16
 802a870:	4676      	mov	r6, lr
 802a872:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 802a876:	f8dd 80b8 	ldr.w	r8, [sp, #184]	@ 0xb8
 802a87a:	2b00      	cmp	r3, #0
 802a87c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802a880:	f3c7 3203 	ubfx	r2, r7, #12, #4
 802a884:	db29      	blt.n	802a8da <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802a886:	1e6c      	subs	r4, r5, #1
 802a888:	42a3      	cmp	r3, r4
 802a88a:	da26      	bge.n	802a8da <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802a88c:	2900      	cmp	r1, #0
 802a88e:	db24      	blt.n	802a8da <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802a890:	1e74      	subs	r4, r6, #1
 802a892:	42a1      	cmp	r1, r4
 802a894:	da21      	bge.n	802a8da <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802a896:	b22c      	sxth	r4, r5
 802a898:	fb01 3304 	mla	r3, r1, r4, r3
 802a89c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802a89e:	5ce9      	ldrb	r1, [r5, r3]
 802a8a0:	442b      	add	r3, r5
 802a8a2:	9d08      	ldr	r5, [sp, #32]
 802a8a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802a8a8:	9112      	str	r1, [sp, #72]	@ 0x48
 802a8aa:	eb05 0c01 	add.w	ip, r5, r1
 802a8ae:	2800      	cmp	r0, #0
 802a8b0:	d04e      	beq.n	802a950 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 802a8b2:	f893 e001 	ldrb.w	lr, [r3, #1]
 802a8b6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802a8ba:	44ae      	add	lr, r5
 802a8bc:	2a00      	cmp	r2, #0
 802a8be:	f000 80c7 	beq.w	802aa50 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802a8c2:	1919      	adds	r1, r3, r4
 802a8c4:	7849      	ldrb	r1, [r1, #1]
 802a8c6:	5d1c      	ldrb	r4, [r3, r4]
 802a8c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802a8cc:	186b      	adds	r3, r5, r1
 802a8ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802a8d2:	930c      	str	r3, [sp, #48]	@ 0x30
 802a8d4:	1963      	adds	r3, r4, r5
 802a8d6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a8d8:	e041      	b.n	802a95e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802a8da:	1c5c      	adds	r4, r3, #1
 802a8dc:	d405      	bmi.n	802a8ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802a8de:	42ac      	cmp	r4, r5
 802a8e0:	dc03      	bgt.n	802a8ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802a8e2:	1c4c      	adds	r4, r1, #1
 802a8e4:	d401      	bmi.n	802a8ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802a8e6:	42b4      	cmp	r4, r6
 802a8e8:	dd21      	ble.n	802a92e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802a8ea:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802a8ec:	f1b9 0f00 	cmp.w	r9, #0
 802a8f0:	449a      	add	sl, r3
 802a8f2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802a8f4:	f10b 0b04 	add.w	fp, fp, #4
 802a8f8:	441f      	add	r7, r3
 802a8fa:	dd07      	ble.n	802a90c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802a8fc:	e9d8 5602 	ldrd	r5, r6, [r8, #8]
 802a900:	f109 39ff 	add.w	r9, r9, #4294967295
 802a904:	ea4f 432a 	mov.w	r3, sl, asr #16
 802a908:	1439      	asrs	r1, r7, #16
 802a90a:	e7b6      	b.n	802a87a <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802a90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a90e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802a914:	3301      	adds	r3, #1
 802a916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a91a:	930d      	str	r3, [sp, #52]	@ 0x34
 802a91c:	e67e      	b.n	802a61c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802a91e:	920d      	str	r2, [sp, #52]	@ 0x34
 802a920:	f10b 32ff 	add.w	r2, fp, #4294967295
 802a924:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 802a928:	4691      	mov	r9, r2
 802a92a:	9209      	str	r2, [sp, #36]	@ 0x24
 802a92c:	e7a0      	b.n	802a870 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802a92e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802a930:	b236      	sxth	r6, r6
 802a932:	b22d      	sxth	r5, r5
 802a934:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802a938:	e9cd 2405 	strd	r2, r4, [sp, #20]
 802a93c:	9302      	str	r3, [sp, #8]
 802a93e:	e9cd 5600 	strd	r5, r6, [sp]
 802a942:	9b08      	ldr	r3, [sp, #32]
 802a944:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a946:	4659      	mov	r1, fp
 802a948:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a94a:	f7ff fcf3 	bl	802a334 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 802a94e:	e7cc      	b.n	802a8ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802a950:	2a00      	cmp	r2, #0
 802a952:	d173      	bne.n	802aa3c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802a954:	46e6      	mov	lr, ip
 802a956:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 802a95a:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 802a95e:	b283      	uxth	r3, r0
 802a960:	b292      	uxth	r2, r2
 802a962:	fb03 f002 	mul.w	r0, r3, r2
 802a966:	011b      	lsls	r3, r3, #4
 802a968:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802a96c:	f89e 5002 	ldrb.w	r5, [lr, #2]
 802a970:	1a19      	subs	r1, r3, r0
 802a972:	b289      	uxth	r1, r1
 802a974:	f89e e000 	ldrb.w	lr, [lr]
 802a978:	fb01 f505 	mul.w	r5, r1, r5
 802a97c:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 802a980:	fb01 f606 	mul.w	r6, r1, r6
 802a984:	b292      	uxth	r2, r2
 802a986:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802a98a:	fb01 f40e 	mul.w	r4, r1, lr
 802a98e:	1a9b      	subs	r3, r3, r2
 802a990:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802a994:	f89c e002 	ldrb.w	lr, [ip, #2]
 802a998:	b29b      	uxth	r3, r3
 802a99a:	fb03 6601 	mla	r6, r3, r1, r6
 802a99e:	fb03 5e0e 	mla	lr, r3, lr, r5
 802a9a2:	9908      	ldr	r1, [sp, #32]
 802a9a4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a9a6:	5d49      	ldrb	r1, [r1, r5]
 802a9a8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a9aa:	fb03 4301 	mla	r3, r3, r1, r4
 802a9ae:	f895 c001 	ldrb.w	ip, [r5, #1]
 802a9b2:	78ad      	ldrb	r5, [r5, #2]
 802a9b4:	fb02 6c0c 	mla	ip, r2, ip, r6
 802a9b8:	fb02 e505 	mla	r5, r2, r5, lr
 802a9bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a9be:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802a9c0:	784e      	ldrb	r6, [r1, #1]
 802a9c2:	7824      	ldrb	r4, [r4, #0]
 802a9c4:	7889      	ldrb	r1, [r1, #2]
 802a9c6:	fb02 3204 	mla	r2, r2, r4, r3
 802a9ca:	fb00 cc06 	mla	ip, r0, r6, ip
 802a9ce:	fb00 5501 	mla	r5, r0, r1, r5
 802a9d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a9d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802a9d6:	780b      	ldrb	r3, [r1, #0]
 802a9d8:	f89b 4000 	ldrb.w	r4, [fp]
 802a9dc:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 802a9e0:	fb00 2003 	mla	r0, r0, r3, r2
 802a9e4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802a9e8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802a9ec:	fb15 f501 	smulbb	r5, r5, r1
 802a9f0:	fb14 f406 	smulbb	r4, r4, r6
 802a9f4:	fb1c fc01 	smulbb	ip, ip, r1
 802a9f8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 802a9fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802aa00:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802aa04:	fb00 4001 	mla	r0, r0, r1, r4
 802aa08:	fb03 5306 	mla	r3, r3, r6, r5
 802aa0c:	fb02 c106 	mla	r1, r2, r6, ip
 802aa10:	b29b      	uxth	r3, r3
 802aa12:	b280      	uxth	r0, r0
 802aa14:	b289      	uxth	r1, r1
 802aa16:	1c5a      	adds	r2, r3, #1
 802aa18:	1c4d      	adds	r5, r1, #1
 802aa1a:	1c44      	adds	r4, r0, #1
 802aa1c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802aa20:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802aa24:	eb04 2310 	add.w	r3, r4, r0, lsr #8
 802aa28:	1209      	asrs	r1, r1, #8
 802aa2a:	1212      	asrs	r2, r2, #8
 802aa2c:	121b      	asrs	r3, r3, #8
 802aa2e:	f88b 1001 	strb.w	r1, [fp, #1]
 802aa32:	f88b 2002 	strb.w	r2, [fp, #2]
 802aa36:	f88b 3000 	strb.w	r3, [fp]
 802aa3a:	e756      	b.n	802a8ea <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802aa3c:	5d1c      	ldrb	r4, [r3, r4]
 802aa3e:	9b08      	ldr	r3, [sp, #32]
 802aa40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802aa44:	18e3      	adds	r3, r4, r3
 802aa46:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 802aa4a:	9310      	str	r3, [sp, #64]	@ 0x40
 802aa4c:	46e6      	mov	lr, ip
 802aa4e:	e786      	b.n	802a95e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802aa50:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 802aa54:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 802aa58:	e781      	b.n	802a95e <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802aa5a:	f43f addf 	beq.w	802a61c <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 802aa5e:	1e44      	subs	r4, r0, #1
 802aa60:	e621      	b.n	802a6a6 <_ZN8touchgfx8LCDGPU2D61TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 802aa62:	bf00      	nop

0802aa64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 802aa64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa68:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802aa6c:	e9dd 640c 	ldrd	r6, r4, [sp, #48]	@ 0x30
 802aa70:	fb04 6e0c 	mla	lr, r4, ip, r6
 802aa74:	2c00      	cmp	r4, #0
 802aa76:	461f      	mov	r7, r3
 802aa78:	eb02 0a0e 	add.w	sl, r2, lr
 802aa7c:	f104 0801 	add.w	r8, r4, #1
 802aa80:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 802aa84:	f89d 5038 	ldrb.w	r5, [sp, #56]	@ 0x38
 802aa88:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 802aa8c:	db01      	blt.n	802aa92 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x2e>
 802aa8e:	45a1      	cmp	r9, r4
 802aa90:	dc6f      	bgt.n	802ab72 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x10e>
 802aa92:	f891 b000 	ldrb.w	fp, [r1]
 802aa96:	460b      	mov	r3, r1
 802aa98:	465c      	mov	r4, fp
 802aa9a:	468e      	mov	lr, r1
 802aa9c:	f1b8 0f00 	cmp.w	r8, #0
 802aaa0:	db01      	blt.n	802aaa6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x42>
 802aaa2:	45c1      	cmp	r9, r8
 802aaa4:	dc4a      	bgt.n	802ab3c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xd8>
 802aaa6:	f891 9000 	ldrb.w	r9, [r1]
 802aaaa:	460f      	mov	r7, r1
 802aaac:	46ca      	mov	sl, r9
 802aaae:	4688      	mov	r8, r1
 802aab0:	2d0f      	cmp	r5, #15
 802aab2:	f200 8097 	bhi.w	802abe4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 802aab6:	280f      	cmp	r0, #15
 802aab8:	f200 8094 	bhi.w	802abe4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 802aabc:	b2aa      	uxth	r2, r5
 802aabe:	b280      	uxth	r0, r0
 802aac0:	fb02 f600 	mul.w	r6, r2, r0
 802aac4:	0112      	lsls	r2, r2, #4
 802aac6:	1b95      	subs	r5, r2, r6
 802aac8:	f893 c001 	ldrb.w	ip, [r3, #1]
 802aacc:	789b      	ldrb	r3, [r3, #2]
 802aace:	b2ad      	uxth	r5, r5
 802aad0:	ebc6 1000 	rsb	r0, r6, r0, lsl #4
 802aad4:	fb05 f404 	mul.w	r4, r5, r4
 802aad8:	fb05 fc0c 	mul.w	ip, r5, ip
 802aadc:	fb05 f503 	mul.w	r5, r5, r3
 802aae0:	b280      	uxth	r0, r0
 802aae2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802aae6:	f89e 3001 	ldrb.w	r3, [lr, #1]
 802aaea:	1a12      	subs	r2, r2, r0
 802aaec:	f89e e002 	ldrb.w	lr, [lr, #2]
 802aaf0:	b292      	uxth	r2, r2
 802aaf2:	fb02 cc03 	mla	ip, r2, r3, ip
 802aaf6:	fb02 440b 	mla	r4, r2, fp, r4
 802aafa:	fb02 520e 	mla	r2, r2, lr, r5
 802aafe:	f898 3001 	ldrb.w	r3, [r8, #1]
 802ab02:	f898 8002 	ldrb.w	r8, [r8, #2]
 802ab06:	fb00 cc03 	mla	ip, r0, r3, ip
 802ab0a:	fb00 4909 	mla	r9, r0, r9, r4
 802ab0e:	fb00 2008 	mla	r0, r0, r8, r2
 802ab12:	787b      	ldrb	r3, [r7, #1]
 802ab14:	78ba      	ldrb	r2, [r7, #2]
 802ab16:	fb06 9a0a 	mla	sl, r6, sl, r9
 802ab1a:	fb06 c303 	mla	r3, r6, r3, ip
 802ab1e:	fb06 0602 	mla	r6, r6, r2, r0
 802ab22:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802ab26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802ab2a:	0236      	lsls	r6, r6, #8
 802ab2c:	ea43 030a 	orr.w	r3, r3, sl
 802ab30:	f406 067f 	and.w	r6, r6, #16711680	@ 0xff0000
 802ab34:	4333      	orrs	r3, r6
 802ab36:	600b      	str	r3, [r1, #0]
 802ab38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab3c:	b378      	cbz	r0, 802ab9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x13a>
 802ab3e:	2e00      	cmp	r6, #0
 802ab40:	db3f      	blt.n	802abc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 802ab42:	45b4      	cmp	ip, r6
 802ab44:	dd3d      	ble.n	802abc2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15e>
 802ab46:	f81a 800c 	ldrb.w	r8, [sl, ip]
 802ab4a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802ab4e:	44b8      	add	r8, r7
 802ab50:	3601      	adds	r6, #1
 802ab52:	f898 9000 	ldrb.w	r9, [r8]
 802ab56:	d430      	bmi.n	802abba <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 802ab58:	45b4      	cmp	ip, r6
 802ab5a:	dd2e      	ble.n	802abba <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x156>
 802ab5c:	2d00      	cmp	r5, #0
 802ab5e:	d03d      	beq.n	802abdc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x178>
 802ab60:	44d4      	add	ip, sl
 802ab62:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802ab66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802ab6a:	f817 a002 	ldrb.w	sl, [r7, r2]
 802ab6e:	4417      	add	r7, r2
 802ab70:	e79e      	b.n	802aab0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 802ab72:	2e00      	cmp	r6, #0
 802ab74:	db01      	blt.n	802ab7a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x116>
 802ab76:	45b4      	cmp	ip, r6
 802ab78:	dc19      	bgt.n	802abae <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x14a>
 802ab7a:	468e      	mov	lr, r1
 802ab7c:	1c73      	adds	r3, r6, #1
 802ab7e:	f89e b000 	ldrb.w	fp, [lr]
 802ab82:	d409      	bmi.n	802ab98 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 802ab84:	459c      	cmp	ip, r3
 802ab86:	dd07      	ble.n	802ab98 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x134>
 802ab88:	b1ed      	cbz	r5, 802abc6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 802ab8a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 802ab8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802ab92:	5cfc      	ldrb	r4, [r7, r3]
 802ab94:	443b      	add	r3, r7
 802ab96:	e781      	b.n	802aa9c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 802ab98:	780c      	ldrb	r4, [r1, #0]
 802ab9a:	460b      	mov	r3, r1
 802ab9c:	e77e      	b.n	802aa9c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x38>
 802ab9e:	2d0f      	cmp	r5, #15
 802aba0:	f891 9000 	ldrb.w	r9, [r1]
 802aba4:	d81e      	bhi.n	802abe4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x180>
 802aba6:	460f      	mov	r7, r1
 802aba8:	4688      	mov	r8, r1
 802abaa:	46ca      	mov	sl, r9
 802abac:	e786      	b.n	802aabc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x58>
 802abae:	f812 e00e 	ldrb.w	lr, [r2, lr]
 802abb2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802abb6:	449e      	add	lr, r3
 802abb8:	e7e0      	b.n	802ab7c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x118>
 802abba:	f891 a000 	ldrb.w	sl, [r1]
 802abbe:	460f      	mov	r7, r1
 802abc0:	e776      	b.n	802aab0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x4c>
 802abc2:	4688      	mov	r8, r1
 802abc4:	e7c4      	b.n	802ab50 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xec>
 802abc6:	f1b8 0f00 	cmp.w	r8, #0
 802abca:	780c      	ldrb	r4, [r1, #0]
 802abcc:	460b      	mov	r3, r1
 802abce:	f6bf af68 	bge.w	802aaa2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x3e>
 802abd2:	460f      	mov	r7, r1
 802abd4:	4688      	mov	r8, r1
 802abd6:	46a2      	mov	sl, r4
 802abd8:	46a1      	mov	r9, r4
 802abda:	e76c      	b.n	802aab6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 802abdc:	f891 a000 	ldrb.w	sl, [r1]
 802abe0:	460f      	mov	r7, r1
 802abe2:	e768      	b.n	802aab6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 802abe4:	4b03      	ldr	r3, [pc, #12]	@ (802abf4 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x190>)
 802abe6:	4a04      	ldr	r2, [pc, #16]	@ (802abf8 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x194>)
 802abe8:	f240 31ca 	movw	r1, #970	@ 0x3ca
 802abec:	4803      	ldr	r0, [pc, #12]	@ (802abfc <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x198>)
 802abee:	f000 ffe3 	bl	802bbb8 <__assert_func>
 802abf2:	bf00      	nop
 802abf4:	0802ef50 	.word	0x0802ef50
 802abf8:	0802f5cc 	.word	0x0802f5cc
 802abfc:	0802f0d8 	.word	0x0802f0d8

0802ac00 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac04:	ed2d 8b0a 	vpush	{d8-d12}
 802ac08:	eeb0 aa40 	vmov.f32	s20, s0
 802ac0c:	eef0 9a60 	vmov.f32	s19, s1
 802ac10:	eeb0 9a41 	vmov.f32	s18, s2
 802ac14:	eef0 8a62 	vmov.f32	s17, s5
 802ac18:	eeb0 8a43 	vmov.f32	s16, s6
 802ac1c:	eeb0 ca44 	vmov.f32	s24, s8
 802ac20:	eef0 ba64 	vmov.f32	s23, s9
 802ac24:	eeb0 ba45 	vmov.f32	s22, s10
 802ac28:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 802ac2c:	b091      	sub	sp, #68	@ 0x44
 802ac2e:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 802ac32:	e9dd 9525 	ldrd	r9, r5, [sp, #148]	@ 0x94
 802ac36:	900f      	str	r0, [sp, #60]	@ 0x3c
 802ac38:	4698      	mov	r8, r3
 802ac3a:	e9dd 0229 	ldrd	r0, r2, [sp, #164]	@ 0xa4
 802ac3e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802ac40:	6841      	ldr	r1, [r0, #4]
 802ac42:	fb01 2303 	mla	r3, r1, r3, r2
 802ac46:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802ac48:	6801      	ldr	r1, [r0, #0]
 802ac4a:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 802ac4c:	6852      	ldr	r2, [r2, #4]
 802ac4e:	6800      	ldr	r0, [r0, #0]
 802ac50:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
 802ac54:	1d13      	adds	r3, r2, #4
 802ac56:	9009      	str	r0, [sp, #36]	@ 0x24
 802ac58:	930c      	str	r3, [sp, #48]	@ 0x30
 802ac5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ac5c:	2b00      	cmp	r3, #0
 802ac5e:	dc02      	bgt.n	802ac66 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802ac60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802ac62:	2b00      	cmp	r3, #0
 802ac64:	dd66      	ble.n	802ad34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802ac66:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802ac68:	f1b8 0f00 	cmp.w	r8, #0
 802ac6c:	e9d3 4e02 	ldrd	r4, lr, [r3, #8]
 802ac70:	b221      	sxth	r1, r4
 802ac72:	fa0f f78e 	sxth.w	r7, lr
 802ac76:	f340 81df 	ble.w	802b038 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802ac7a:	1e4e      	subs	r6, r1, #1
 802ac7c:	f107 3cff 	add.w	ip, r7, #4294967295
 802ac80:	f8cd e01c 	str.w	lr, [sp, #28]
 802ac84:	e9dd eb27 	ldrd	lr, fp, [sp, #156]	@ 0x9c
 802ac88:	ea5f 4329 	movs.w	r3, r9, asr #16
 802ac8c:	ea4f 4025 	mov.w	r0, r5, asr #16
 802ac90:	d405      	bmi.n	802ac9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802ac92:	42b3      	cmp	r3, r6
 802ac94:	da03      	bge.n	802ac9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802ac96:	2800      	cmp	r0, #0
 802ac98:	db01      	blt.n	802ac9e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802ac9a:	4560      	cmp	r0, ip
 802ac9c:	db4f      	blt.n	802ad3e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802ac9e:	1c5a      	adds	r2, r3, #1
 802aca0:	d406      	bmi.n	802acb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802aca2:	428a      	cmp	r2, r1
 802aca4:	dc04      	bgt.n	802acb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802aca6:	1c42      	adds	r2, r0, #1
 802aca8:	d402      	bmi.n	802acb0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802acaa:	42ba      	cmp	r2, r7
 802acac:	f340 8157 	ble.w	802af5e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802acb0:	f1b8 0801 	subs.w	r8, r8, #1
 802acb4:	44f1      	add	r9, lr
 802acb6:	445d      	add	r5, fp
 802acb8:	f10a 0a04 	add.w	sl, sl, #4
 802acbc:	d1e4      	bne.n	802ac88 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802acbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802acc0:	2b00      	cmp	r3, #0
 802acc2:	dd37      	ble.n	802ad34 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802acc4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802acc8:	ee79 9aab 	vadd.f32	s19, s19, s23
 802accc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802acd0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802acd4:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802acd8:	ee69 7a27 	vmul.f32	s15, s18, s15
 802acdc:	ee76 6a68 	vsub.f32	s13, s12, s17
 802ace0:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802ace4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ace8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802acec:	ee16 2a90 	vmov	r2, s13
 802acf0:	3b01      	subs	r3, #1
 802acf2:	930a      	str	r3, [sp, #40]	@ 0x28
 802acf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802acf6:	fb92 f3f3 	sdiv	r3, r2, r3
 802acfa:	ee17 2a10 	vmov	r2, s14
 802acfe:	eeb0 7a48 	vmov.f32	s14, s16
 802ad02:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802ad06:	ee17 5a10 	vmov	r5, s14
 802ad0a:	eeb0 7a68 	vmov.f32	s14, s17
 802ad0e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ad12:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802ad16:	fb92 f3f3 	sdiv	r3, r2, r3
 802ad1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802ad1c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad1e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ad20:	ee17 9a10 	vmov	r9, s14
 802ad24:	eeb0 8a67 	vmov.f32	s16, s15
 802ad28:	eef0 8a46 	vmov.f32	s17, s12
 802ad2c:	bf14      	ite	ne
 802ad2e:	4698      	movne	r8, r3
 802ad30:	4690      	moveq	r8, r2
 802ad32:	e792      	b.n	802ac5a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802ad34:	b011      	add	sp, #68	@ 0x44
 802ad36:	ecbd 8b0a 	vpop	{d8-d12}
 802ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ad3e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802ad42:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802ad44:	f108 32ff 	add.w	r2, r8, #4294967295
 802ad48:	fb00 9302 	mla	r3, r0, r2, r9
 802ad4c:	141b      	asrs	r3, r3, #16
 802ad4e:	9207      	str	r2, [sp, #28]
 802ad50:	f100 80a6 	bmi.w	802aea0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802ad54:	42b3      	cmp	r3, r6
 802ad56:	f280 80a3 	bge.w	802aea0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802ad5a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad5c:	fb03 5302 	mla	r3, r3, r2, r5
 802ad60:	141b      	asrs	r3, r3, #16
 802ad62:	f100 809d 	bmi.w	802aea0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802ad66:	3f01      	subs	r7, #1
 802ad68:	42bb      	cmp	r3, r7
 802ad6a:	f280 8099 	bge.w	802aea0 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802ad6e:	f1b8 0f00 	cmp.w	r8, #0
 802ad72:	dda4      	ble.n	802acbe <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802ad74:	f8cd a020 	str.w	sl, [sp, #32]
 802ad78:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 802ad7c:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802ad80:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 802ad84:	e065      	b.n	802ae52 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802ad86:	f890 c001 	ldrb.w	ip, [r0, #1]
 802ad8a:	1844      	adds	r4, r0, r1
 802ad8c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802ad90:	44d4      	add	ip, sl
 802ad92:	2a00      	cmp	r2, #0
 802ad94:	d078      	beq.n	802ae88 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802ad96:	5c40      	ldrb	r0, [r0, r1]
 802ad98:	7866      	ldrb	r6, [r4, #1]
 802ad9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802ad9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802ada2:	4450      	add	r0, sl
 802ada4:	4456      	add	r6, sl
 802ada6:	b29b      	uxth	r3, r3
 802ada8:	b292      	uxth	r2, r2
 802adaa:	fb03 f402 	mul.w	r4, r3, r2
 802adae:	011b      	lsls	r3, r3, #4
 802adb0:	f89c 8000 	ldrb.w	r8, [ip]
 802adb4:	f89c e001 	ldrb.w	lr, [ip, #1]
 802adb8:	1b19      	subs	r1, r3, r4
 802adba:	f89c c002 	ldrb.w	ip, [ip, #2]
 802adbe:	b289      	uxth	r1, r1
 802adc0:	fb01 fe0e 	mul.w	lr, r1, lr
 802adc4:	fb01 f808 	mul.w	r8, r1, r8
 802adc8:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802adcc:	fb01 f10c 	mul.w	r1, r1, ip
 802add0:	b292      	uxth	r2, r2
 802add2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802add6:	f81a b00b 	ldrb.w	fp, [sl, fp]
 802adda:	f897 c001 	ldrb.w	ip, [r7, #1]
 802adde:	1a9b      	subs	r3, r3, r2
 802ade0:	78bf      	ldrb	r7, [r7, #2]
 802ade2:	b29b      	uxth	r3, r3
 802ade4:	fb03 880b 	mla	r8, r3, fp, r8
 802ade8:	fb03 ec0c 	mla	ip, r3, ip, lr
 802adec:	fb03 1307 	mla	r3, r3, r7, r1
 802adf0:	7881      	ldrb	r1, [r0, #2]
 802adf2:	f890 b000 	ldrb.w	fp, [r0]
 802adf6:	fb02 3301 	mla	r3, r2, r1, r3
 802adfa:	f890 e001 	ldrb.w	lr, [r0, #1]
 802adfe:	78b1      	ldrb	r1, [r6, #2]
 802ae00:	fb02 880b 	mla	r8, r2, fp, r8
 802ae04:	fb02 cc0e 	mla	ip, r2, lr, ip
 802ae08:	fb04 3301 	mla	r3, r4, r1, r3
 802ae0c:	f896 b000 	ldrb.w	fp, [r6]
 802ae10:	f896 e001 	ldrb.w	lr, [r6, #1]
 802ae14:	0219      	lsls	r1, r3, #8
 802ae16:	fb04 880b 	mla	r8, r4, fp, r8
 802ae1a:	fb04 cc0e 	mla	ip, r4, lr, ip
 802ae1e:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
 802ae22:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 802ae24:	9a07      	ldr	r2, [sp, #28]
 802ae26:	4489      	add	r9, r1
 802ae28:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802ae2a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802ae2e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802ae32:	ea48 080c 	orr.w	r8, r8, ip
 802ae36:	440d      	add	r5, r1
 802ae38:	9908      	ldr	r1, [sp, #32]
 802ae3a:	3a01      	subs	r2, #1
 802ae3c:	ea48 0303 	orr.w	r3, r8, r3
 802ae40:	9207      	str	r2, [sp, #28]
 802ae42:	f841 3b04 	str.w	r3, [r1], #4
 802ae46:	3201      	adds	r2, #1
 802ae48:	9108      	str	r1, [sp, #32]
 802ae4a:	d024      	beq.n	802ae96 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802ae4c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802ae4e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802ae52:	ea4f 4329 	mov.w	r3, r9, asr #16
 802ae56:	1428      	asrs	r0, r5, #16
 802ae58:	fb01 3000 	mla	r0, r1, r0, r3
 802ae5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ae5e:	f3c9 3303 	ubfx	r3, r9, #12, #4
 802ae62:	f812 b000 	ldrb.w	fp, [r2, r0]
 802ae66:	4410      	add	r0, r2
 802ae68:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 802ae6c:	eb0a 070b 	add.w	r7, sl, fp
 802ae70:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802ae74:	2b00      	cmp	r3, #0
 802ae76:	d186      	bne.n	802ad86 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802ae78:	b14a      	cbz	r2, 802ae8e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 802ae7a:	5c40      	ldrb	r0, [r0, r1]
 802ae7c:	463e      	mov	r6, r7
 802ae7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802ae82:	4450      	add	r0, sl
 802ae84:	46bc      	mov	ip, r7
 802ae86:	e78e      	b.n	802ada6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802ae88:	463e      	mov	r6, r7
 802ae8a:	4638      	mov	r0, r7
 802ae8c:	e78b      	b.n	802ada6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802ae8e:	463e      	mov	r6, r7
 802ae90:	4638      	mov	r0, r7
 802ae92:	46bc      	mov	ip, r7
 802ae94:	e787      	b.n	802ada6 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802ae96:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	@ 0x34
 802ae9a:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
 802ae9e:	e70e      	b.n	802acbe <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802aea0:	f1b8 0f00 	cmp.w	r8, #0
 802aea4:	f77f af0b 	ble.w	802acbe <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802aea8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802aeac:	ea4f 4329 	mov.w	r3, r9, asr #16
 802aeb0:	1428      	asrs	r0, r5, #16
 802aeb2:	4677      	mov	r7, lr
 802aeb4:	46d0      	mov	r8, sl
 802aeb6:	f8cd a020 	str.w	sl, [sp, #32]
 802aeba:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 802aebe:	2b00      	cmp	r3, #0
 802aec0:	f3c9 3103 	ubfx	r1, r9, #12, #4
 802aec4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802aec8:	db28      	blt.n	802af1c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802aeca:	1e66      	subs	r6, r4, #1
 802aecc:	42b3      	cmp	r3, r6
 802aece:	da25      	bge.n	802af1c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802aed0:	2800      	cmp	r0, #0
 802aed2:	db23      	blt.n	802af1c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802aed4:	1e7e      	subs	r6, r7, #1
 802aed6:	42b0      	cmp	r0, r6
 802aed8:	da20      	bge.n	802af1c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802aeda:	b224      	sxth	r4, r4
 802aedc:	fb00 3304 	mla	r3, r0, r4, r3
 802aee0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802aee2:	5cc7      	ldrb	r7, [r0, r3]
 802aee4:	4403      	add	r3, r0
 802aee6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802aee8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802aeec:	eb00 0c07 	add.w	ip, r0, r7
 802aef0:	2900      	cmp	r1, #0
 802aef2:	d04a      	beq.n	802af8a <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802aef4:	785e      	ldrb	r6, [r3, #1]
 802aef6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802aefa:	4406      	add	r6, r0
 802aefc:	2a00      	cmp	r2, #0
 802aefe:	f000 8098 	beq.w	802b032 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 802af02:	1918      	adds	r0, r3, r4
 802af04:	7840      	ldrb	r0, [r0, #1]
 802af06:	5d1c      	ldrb	r4, [r3, r4]
 802af08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802af0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802af0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802af12:	1818      	adds	r0, r3, r0
 802af14:	18e3      	adds	r3, r4, r3
 802af16:	900d      	str	r0, [sp, #52]	@ 0x34
 802af18:	930e      	str	r3, [sp, #56]	@ 0x38
 802af1a:	e03b      	b.n	802af94 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802af1c:	1c5e      	adds	r6, r3, #1
 802af1e:	d405      	bmi.n	802af2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802af20:	42a6      	cmp	r6, r4
 802af22:	dc03      	bgt.n	802af2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802af24:	1c46      	adds	r6, r0, #1
 802af26:	d401      	bmi.n	802af2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802af28:	42be      	cmp	r6, r7
 802af2a:	dd1f      	ble.n	802af6c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802af2c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af2e:	f1bb 0f00 	cmp.w	fp, #0
 802af32:	4499      	add	r9, r3
 802af34:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802af36:	f108 0804 	add.w	r8, r8, #4
 802af3a:	441d      	add	r5, r3
 802af3c:	dd07      	ble.n	802af4e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802af3e:	e9da 4702 	ldrd	r4, r7, [sl, #8]
 802af42:	f10b 3bff 	add.w	fp, fp, #4294967295
 802af46:	ea4f 4329 	mov.w	r3, r9, asr #16
 802af4a:	1428      	asrs	r0, r5, #16
 802af4c:	e7b7      	b.n	802aebe <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 802af4e:	e9dd 3a07 	ldrd	r3, sl, [sp, #28]
 802af52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802af56:	3301      	adds	r3, #1
 802af58:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
 802af5c:	e6af      	b.n	802acbe <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802af5e:	f108 32ff 	add.w	r2, r8, #4294967295
 802af62:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802af66:	4693      	mov	fp, r2
 802af68:	9207      	str	r2, [sp, #28]
 802af6a:	e7a2      	b.n	802aeb2 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802af6c:	b23f      	sxth	r7, r7
 802af6e:	b224      	sxth	r4, r4
 802af70:	e9cd 1204 	strd	r1, r2, [sp, #16]
 802af74:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802af78:	e9cd 4700 	strd	r4, r7, [sp]
 802af7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802af7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802af80:	4641      	mov	r1, r8
 802af82:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802af84:	f7ff fd6e 	bl	802aa64 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 802af88:	e7d0      	b.n	802af2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802af8a:	2a00      	cmp	r2, #0
 802af8c:	d147      	bne.n	802b01e <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41e>
 802af8e:	4666      	mov	r6, ip
 802af90:	e9cd cc0d 	strd	ip, ip, [sp, #52]	@ 0x34
 802af94:	b28b      	uxth	r3, r1
 802af96:	b292      	uxth	r2, r2
 802af98:	fb03 f002 	mul.w	r0, r3, r2
 802af9c:	011b      	lsls	r3, r3, #4
 802af9e:	f896 e000 	ldrb.w	lr, [r6]
 802afa2:	7874      	ldrb	r4, [r6, #1]
 802afa4:	1a19      	subs	r1, r3, r0
 802afa6:	78b6      	ldrb	r6, [r6, #2]
 802afa8:	b289      	uxth	r1, r1
 802afaa:	fb01 f404 	mul.w	r4, r1, r4
 802afae:	fb01 fe0e 	mul.w	lr, r1, lr
 802afb2:	ebc0 1202 	rsb	r2, r0, r2, lsl #4
 802afb6:	fb01 f106 	mul.w	r1, r1, r6
 802afba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802afbc:	b292      	uxth	r2, r2
 802afbe:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802afc2:	5df7      	ldrb	r7, [r6, r7]
 802afc4:	1a9b      	subs	r3, r3, r2
 802afc6:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802afca:	f89c c002 	ldrb.w	ip, [ip, #2]
 802afce:	b29b      	uxth	r3, r3
 802afd0:	fb03 4606 	mla	r6, r3, r6, r4
 802afd4:	fb03 e707 	mla	r7, r3, r7, lr
 802afd8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802afda:	fb03 130c 	mla	r3, r3, ip, r1
 802afde:	7861      	ldrb	r1, [r4, #1]
 802afe0:	f894 c000 	ldrb.w	ip, [r4]
 802afe4:	78a4      	ldrb	r4, [r4, #2]
 802afe6:	fb02 6601 	mla	r6, r2, r1, r6
 802afea:	fb02 770c 	mla	r7, r2, ip, r7
 802afee:	fb02 3104 	mla	r1, r2, r4, r3
 802aff2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802aff4:	7862      	ldrb	r2, [r4, #1]
 802aff6:	7823      	ldrb	r3, [r4, #0]
 802aff8:	78a4      	ldrb	r4, [r4, #2]
 802affa:	fb00 6602 	mla	r6, r0, r2, r6
 802affe:	fb00 7303 	mla	r3, r0, r3, r7
 802b002:	fb00 1204 	mla	r2, r0, r4, r1
 802b006:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b00a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802b00e:	0212      	lsls	r2, r2, #8
 802b010:	4333      	orrs	r3, r6
 802b012:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 802b016:	4313      	orrs	r3, r2
 802b018:	f8c8 3000 	str.w	r3, [r8]
 802b01c:	e786      	b.n	802af2c <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802b01e:	5d1c      	ldrb	r4, [r3, r4]
 802b020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b022:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802b026:	18e3      	adds	r3, r4, r3
 802b028:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 802b02c:	930e      	str	r3, [sp, #56]	@ 0x38
 802b02e:	4666      	mov	r6, ip
 802b030:	e7b0      	b.n	802af94 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802b032:	e9cd cc0d 	strd	ip, ip, [sp, #52]	@ 0x34
 802b036:	e7ad      	b.n	802af94 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802b038:	f43f ae41 	beq.w	802acbe <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802b03c:	1e4e      	subs	r6, r1, #1
 802b03e:	e680      	b.n	802ad42 <_ZN8touchgfx8LCDGPU2D63TextureMapper_32BPP_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>

0802b040 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 802b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b044:	b087      	sub	sp, #28
 802b046:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 802b04a:	e9dd 0412 	ldrd	r0, r4, [sp, #72]	@ 0x48
 802b04e:	fb04 070c 	mla	r7, r4, ip, r0
 802b052:	9100      	str	r1, [sp, #0]
 802b054:	f89d 1058 	ldrb.w	r1, [sp, #88]	@ 0x58
 802b058:	2c00      	cmp	r4, #0
 802b05a:	eb02 0b07 	add.w	fp, r2, r7
 802b05e:	f104 0501 	add.w	r5, r4, #1
 802b062:	f9bd 8044 	ldrsh.w	r8, [sp, #68]	@ 0x44
 802b066:	f89d a050 	ldrb.w	sl, [sp, #80]	@ 0x50
 802b06a:	f89d 6054 	ldrb.w	r6, [sp, #84]	@ 0x54
 802b06e:	9101      	str	r1, [sp, #4]
 802b070:	db02      	blt.n	802b078 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x38>
 802b072:	45a0      	cmp	r8, r4
 802b074:	f300 811a 	bgt.w	802b2ac <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x26c>
 802b078:	2700      	movs	r7, #0
 802b07a:	46be      	mov	lr, r7
 802b07c:	46b9      	mov	r9, r7
 802b07e:	463c      	mov	r4, r7
 802b080:	2d00      	cmp	r5, #0
 802b082:	db02      	blt.n	802b08a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x4a>
 802b084:	45a8      	cmp	r8, r5
 802b086:	f300 812b 	bgt.w	802b2e0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2a0>
 802b08a:	f04f 0c00 	mov.w	ip, #0
 802b08e:	46e0      	mov	r8, ip
 802b090:	4665      	mov	r5, ip
 802b092:	f8cd c010 	str.w	ip, [sp, #16]
 802b096:	f1ba 0f0f 	cmp.w	sl, #15
 802b09a:	f200 8167 	bhi.w	802b36c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 802b09e:	2e0f      	cmp	r6, #15
 802b0a0:	f200 8164 	bhi.w	802b36c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 802b0a4:	b2b2      	uxth	r2, r6
 802b0a6:	fa1f f38a 	uxth.w	r3, sl
 802b0aa:	fb02 f603 	mul.w	r6, r2, r3
 802b0ae:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802b0b2:	b292      	uxth	r2, r2
 802b0b4:	fb02 fa08 	mul.w	sl, r2, r8
 802b0b8:	fb06 fb0c 	mul.w	fp, r6, ip
 802b0bc:	011b      	lsls	r3, r3, #4
 802b0be:	1b98      	subs	r0, r3, r6
 802b0c0:	b280      	uxth	r0, r0
 802b0c2:	9002      	str	r0, [sp, #8]
 802b0c4:	fb00 f007 	mul.w	r0, r0, r7
 802b0c8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 802b0cc:	1a9b      	subs	r3, r3, r2
 802b0ce:	b29b      	uxth	r3, r3
 802b0d0:	fb03 000e 	mla	r0, r3, lr, r0
 802b0d4:	4450      	add	r0, sl
 802b0d6:	4458      	add	r0, fp
 802b0d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802b0dc:	9003      	str	r0, [sp, #12]
 802b0de:	2800      	cmp	r0, #0
 802b0e0:	f000 80e1 	beq.w	802b2a6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x266>
 802b0e4:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802b0e8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802b0ec:	f009 1bff 	and.w	fp, r9, #16711935	@ 0xff00ff
 802b0f0:	9105      	str	r1, [sp, #20]
 802b0f2:	d01d      	beq.n	802b130 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xf0>
 802b0f4:	fb0b fb0e 	mul.w	fp, fp, lr
 802b0f8:	fb01 fe0e 	mul.w	lr, r1, lr
 802b0fc:	ea4f 2a1b 	mov.w	sl, fp, lsr #8
 802b100:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 802b104:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802b108:	f50e 7080 	add.w	r0, lr, #256	@ 0x100
 802b10c:	44d3      	add	fp, sl
 802b10e:	eb00 2e1e 	add.w	lr, r0, lr, lsr #8
 802b112:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802b116:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b11a:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802b11e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802b122:	ea4b 0e0e 	orr.w	lr, fp, lr
 802b126:	f40e 417f 	and.w	r1, lr, #65280	@ 0xff00
 802b12a:	f00e 1bff 	and.w	fp, lr, #16711935	@ 0xff00ff
 802b12e:	9105      	str	r1, [sp, #20]
 802b130:	2fff      	cmp	r7, #255	@ 0xff
 802b132:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802b136:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802b13a:	d01b      	beq.n	802b174 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x134>
 802b13c:	fb0e fe07 	mul.w	lr, lr, r7
 802b140:	fb04 f407 	mul.w	r4, r4, r7
 802b144:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 802b148:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 802b14c:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802b150:	f504 7080 	add.w	r0, r4, #256	@ 0x100
 802b154:	44d6      	add	lr, sl
 802b156:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802b15a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b15e:	0a24      	lsrs	r4, r4, #8
 802b160:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b164:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802b168:	ea4e 0404 	orr.w	r4, lr, r4
 802b16c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802b170:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802b174:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802b178:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 802b17c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802b180:	d019      	beq.n	802b1b6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x176>
 802b182:	fb00 f008 	mul.w	r0, r0, r8
 802b186:	fb05 f508 	mul.w	r5, r5, r8
 802b18a:	ea4f 2910 	mov.w	r9, r0, lsr #8
 802b18e:	f009 19ff 	and.w	r9, r9, #16711935	@ 0xff00ff
 802b192:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802b196:	f505 7780 	add.w	r7, r5, #256	@ 0x100
 802b19a:	4448      	add	r0, r9
 802b19c:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802b1a0:	0a00      	lsrs	r0, r0, #8
 802b1a2:	0a2d      	lsrs	r5, r5, #8
 802b1a4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802b1a8:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802b1ac:	4305      	orrs	r5, r0
 802b1ae:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 802b1b2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802b1b6:	9904      	ldr	r1, [sp, #16]
 802b1b8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802b1bc:	f001 1aff 	and.w	sl, r1, #16711935	@ 0xff00ff
 802b1c0:	f401 497f 	and.w	r9, r1, #65280	@ 0xff00
 802b1c4:	d01c      	beq.n	802b200 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x1c0>
 802b1c6:	fb0a fa0c 	mul.w	sl, sl, ip
 802b1ca:	fb09 fc0c 	mul.w	ip, r9, ip
 802b1ce:	ea4f 281a 	mov.w	r8, sl, lsr #8
 802b1d2:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802b1d6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802b1da:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802b1de:	44c2      	add	sl, r8
 802b1e0:	eb07 2c1c 	add.w	ip, r7, ip, lsr #8
 802b1e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b1e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b1ec:	f00a 1aff 	and.w	sl, sl, #16711935	@ 0xff00ff
 802b1f0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802b1f4:	ea4a 090c 	orr.w	r9, sl, ip
 802b1f8:	f009 1aff 	and.w	sl, r9, #16711935	@ 0xff00ff
 802b1fc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802b200:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 802b204:	9903      	ldr	r1, [sp, #12]
 802b206:	fb01 fc08 	mul.w	ip, r1, r8
 802b20a:	f10c 0701 	add.w	r7, ip, #1
 802b20e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802b212:	ea6f 2c17 	mvn.w	ip, r7, lsr #8
 802b216:	9902      	ldr	r1, [sp, #8]
 802b218:	fa5f f78c 	uxtb.w	r7, ip
 802b21c:	fb04 f401 	mul.w	r4, r4, r1
 802b220:	fb0e fe01 	mul.w	lr, lr, r1
 802b224:	9905      	ldr	r1, [sp, #20]
 802b226:	fb0b ee03 	mla	lr, fp, r3, lr
 802b22a:	fb01 4303 	mla	r3, r1, r3, r4
 802b22e:	fb00 e002 	mla	r0, r0, r2, lr
 802b232:	fb05 3502 	mla	r5, r5, r2, r3
 802b236:	fb0a 0a06 	mla	sl, sl, r6, r0
 802b23a:	fb09 5906 	mla	r9, r9, r6, r5
 802b23e:	ea4f 261a 	mov.w	r6, sl, lsr #8
 802b242:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802b246:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 802b24a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802b24e:	ea46 0609 	orr.w	r6, r6, r9
 802b252:	b2f2      	uxtb	r2, r6
 802b254:	f3c6 2307 	ubfx	r3, r6, #8, #8
 802b258:	0c36      	lsrs	r6, r6, #16
 802b25a:	9900      	ldr	r1, [sp, #0]
 802b25c:	fb12 f408 	smulbb	r4, r2, r8
 802b260:	fb13 f008 	smulbb	r0, r3, r8
 802b264:	fb16 f808 	smulbb	r8, r6, r8
 802b268:	780a      	ldrb	r2, [r1, #0]
 802b26a:	784b      	ldrb	r3, [r1, #1]
 802b26c:	788e      	ldrb	r6, [r1, #2]
 802b26e:	fb02 4207 	mla	r2, r2, r7, r4
 802b272:	fb03 0307 	mla	r3, r3, r7, r0
 802b276:	fb06 8807 	mla	r8, r6, r7, r8
 802b27a:	b292      	uxth	r2, r2
 802b27c:	b29b      	uxth	r3, r3
 802b27e:	fa1f f888 	uxth.w	r8, r8
 802b282:	1c54      	adds	r4, r2, #1
 802b284:	1c58      	adds	r0, r3, #1
 802b286:	f108 0701 	add.w	r7, r8, #1
 802b28a:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 802b28e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802b292:	eb07 2818 	add.w	r8, r7, r8, lsr #8
 802b296:	1212      	asrs	r2, r2, #8
 802b298:	121b      	asrs	r3, r3, #8
 802b29a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802b29e:	700a      	strb	r2, [r1, #0]
 802b2a0:	704b      	strb	r3, [r1, #1]
 802b2a2:	f881 8002 	strb.w	r8, [r1, #2]
 802b2a6:	b007      	add	sp, #28
 802b2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b2ac:	2800      	cmp	r0, #0
 802b2ae:	db01      	blt.n	802b2b4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x274>
 802b2b0:	4584      	cmp	ip, r0
 802b2b2:	dc40      	bgt.n	802b336 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2f6>
 802b2b4:	f04f 0e00 	mov.w	lr, #0
 802b2b8:	46f1      	mov	r9, lr
 802b2ba:	1c42      	adds	r2, r0, #1
 802b2bc:	d42b      	bmi.n	802b316 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 802b2be:	4594      	cmp	ip, r2
 802b2c0:	dd29      	ble.n	802b316 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2d6>
 802b2c2:	f1ba 0f00 	cmp.w	sl, #0
 802b2c6:	d005      	beq.n	802b2d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x294>
 802b2c8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 802b2cc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802b2d0:	0e27      	lsrs	r7, r4, #24
 802b2d2:	e6d5      	b.n	802b080 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 802b2d4:	2d00      	cmp	r5, #0
 802b2d6:	db41      	blt.n	802b35c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 802b2d8:	45a8      	cmp	r8, r5
 802b2da:	dd3f      	ble.n	802b35c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x31c>
 802b2dc:	4657      	mov	r7, sl
 802b2de:	4654      	mov	r4, sl
 802b2e0:	b1e6      	cbz	r6, 802b31c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2dc>
 802b2e2:	2800      	cmp	r0, #0
 802b2e4:	db32      	blt.n	802b34c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 802b2e6:	4584      	cmp	ip, r0
 802b2e8:	dd30      	ble.n	802b34c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x30c>
 802b2ea:	f81b 200c 	ldrb.w	r2, [fp, ip]
 802b2ee:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802b2f2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802b2f6:	3001      	adds	r0, #1
 802b2f8:	d423      	bmi.n	802b342 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 802b2fa:	4584      	cmp	ip, r0
 802b2fc:	dd21      	ble.n	802b342 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x302>
 802b2fe:	f1ba 0f00 	cmp.w	sl, #0
 802b302:	d027      	beq.n	802b354 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x314>
 802b304:	44dc      	add	ip, fp
 802b306:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802b30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802b30e:	9304      	str	r3, [sp, #16]
 802b310:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802b314:	e6bf      	b.n	802b096 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 802b316:	2700      	movs	r7, #0
 802b318:	463c      	mov	r4, r7
 802b31a:	e6b1      	b.n	802b080 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x40>
 802b31c:	f1ba 0f0f 	cmp.w	sl, #15
 802b320:	d824      	bhi.n	802b36c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x32c>
 802b322:	fa1f f38a 	uxth.w	r3, sl
 802b326:	4632      	mov	r2, r6
 802b328:	46b3      	mov	fp, r6
 802b32a:	46b2      	mov	sl, r6
 802b32c:	9604      	str	r6, [sp, #16]
 802b32e:	4635      	mov	r5, r6
 802b330:	46b4      	mov	ip, r6
 802b332:	46b0      	mov	r8, r6
 802b334:	e6c2      	b.n	802b0bc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x7c>
 802b336:	5dd2      	ldrb	r2, [r2, r7]
 802b338:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 802b33c:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 802b340:	e7bb      	b.n	802b2ba <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x27a>
 802b342:	f04f 0c00 	mov.w	ip, #0
 802b346:	f8cd c010 	str.w	ip, [sp, #16]
 802b34a:	e6a4      	b.n	802b096 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x56>
 802b34c:	f04f 0800 	mov.w	r8, #0
 802b350:	4645      	mov	r5, r8
 802b352:	e7d0      	b.n	802b2f6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x2b6>
 802b354:	f8cd a010 	str.w	sl, [sp, #16]
 802b358:	46d4      	mov	ip, sl
 802b35a:	e6a0      	b.n	802b09e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 802b35c:	4654      	mov	r4, sl
 802b35e:	f8cd a010 	str.w	sl, [sp, #16]
 802b362:	4655      	mov	r5, sl
 802b364:	46d4      	mov	ip, sl
 802b366:	46d0      	mov	r8, sl
 802b368:	4657      	mov	r7, sl
 802b36a:	e698      	b.n	802b09e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x5e>
 802b36c:	4b03      	ldr	r3, [pc, #12]	@ (802b37c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x33c>)
 802b36e:	4a04      	ldr	r2, [pc, #16]	@ (802b380 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x340>)
 802b370:	f240 31ca 	movw	r1, #970	@ 0x3ca
 802b374:	4803      	ldr	r0, [pc, #12]	@ (802b384 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x344>)
 802b376:	f000 fc1f 	bl	802bbb8 <__assert_func>
 802b37a:	bf00      	nop
 802b37c:	0802ef50 	.word	0x0802ef50
 802b380:	0802f5cc 	.word	0x0802f5cc
 802b384:	0802f0d8 	.word	0x0802f0d8

0802b388 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b38c:	ed2d 8b08 	vpush	{d8-d11}
 802b390:	b0a9      	sub	sp, #164	@ 0xa4
 802b392:	e9dd ba3b 	ldrd	fp, sl, [sp, #236]	@ 0xec
 802b396:	eeb0 aa40 	vmov.f32	s20, s0
 802b39a:	46d9      	mov	r9, fp
 802b39c:	eef0 9a60 	vmov.f32	s19, s1
 802b3a0:	eeb0 9a41 	vmov.f32	s18, s2
 802b3a4:	eef0 8a62 	vmov.f32	s17, s5
 802b3a8:	eeb0 8a43 	vmov.f32	s16, s6
 802b3ac:	eef0 ba44 	vmov.f32	s23, s8
 802b3b0:	eeb0 ba64 	vmov.f32	s22, s9
 802b3b4:	eef0 aa45 	vmov.f32	s21, s10
 802b3b8:	46d3      	mov	fp, sl
 802b3ba:	9022      	str	r0, [sp, #136]	@ 0x88
 802b3bc:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 802b3be:	9115      	str	r1, [sp, #84]	@ 0x54
 802b3c0:	9218      	str	r2, [sp, #96]	@ 0x60
 802b3c2:	6841      	ldr	r1, [r0, #4]
 802b3c4:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 802b3c6:	469e      	mov	lr, r3
 802b3c8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802b3ca:	6807      	ldr	r7, [r0, #0]
 802b3cc:	fb01 2303 	mla	r3, r1, r3, r2
 802b3d0:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 802b3d2:	9842      	ldr	r0, [sp, #264]	@ 0x108
 802b3d4:	6852      	ldr	r2, [r2, #4]
 802b3d6:	f89d 110c 	ldrb.w	r1, [sp, #268]	@ 0x10c
 802b3da:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 802b3de:	6800      	ldr	r0, [r0, #0]
 802b3e0:	1d13      	adds	r3, r2, #4
 802b3e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b3e4:	b28b      	uxth	r3, r1
 802b3e6:	9123      	str	r1, [sp, #140]	@ 0x8c
 802b3e8:	9011      	str	r0, [sp, #68]	@ 0x44
 802b3ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 802b3ec:	9712      	str	r7, [sp, #72]	@ 0x48
 802b3ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802b3f0:	2b00      	cmp	r3, #0
 802b3f2:	dc02      	bgt.n	802b3fa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802b3f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b3f6:	2b00      	cmp	r3, #0
 802b3f8:	dd68      	ble.n	802b4cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802b3fa:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802b3fc:	f1be 0f00 	cmp.w	lr, #0
 802b400:	e9d3 5702 	ldrd	r5, r7, [r3, #8]
 802b404:	b228      	sxth	r0, r5
 802b406:	b23e      	sxth	r6, r7
 802b408:	f340 83a0 	ble.w	802bb4c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c4>
 802b40c:	e9dd 8a3d 	ldrd	r8, sl, [sp, #244]	@ 0xf4
 802b410:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802b412:	1e44      	subs	r4, r0, #1
 802b414:	f106 3cff 	add.w	ip, r6, #4294967295
 802b418:	9709      	str	r7, [sp, #36]	@ 0x24
 802b41a:	ea5f 4329 	movs.w	r3, r9, asr #16
 802b41e:	ea4f 422b 	mov.w	r2, fp, asr #16
 802b422:	d405      	bmi.n	802b430 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802b424:	42a3      	cmp	r3, r4
 802b426:	da03      	bge.n	802b430 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802b428:	2a00      	cmp	r2, #0
 802b42a:	db01      	blt.n	802b430 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802b42c:	4562      	cmp	r2, ip
 802b42e:	db52      	blt.n	802b4d6 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802b430:	1c5f      	adds	r7, r3, #1
 802b432:	d406      	bmi.n	802b442 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802b434:	4287      	cmp	r7, r0
 802b436:	dc04      	bgt.n	802b442 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802b438:	1c57      	adds	r7, r2, #1
 802b43a:	d402      	bmi.n	802b442 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802b43c:	42b7      	cmp	r7, r6
 802b43e:	f340 835f 	ble.w	802bb00 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>
 802b442:	f1be 0e01 	subs.w	lr, lr, #1
 802b446:	44c1      	add	r9, r8
 802b448:	44d3      	add	fp, sl
 802b44a:	f101 0104 	add.w	r1, r1, #4
 802b44e:	d1e4      	bne.n	802b41a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b450:	9112      	str	r1, [sp, #72]	@ 0x48
 802b452:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802b454:	2b00      	cmp	r3, #0
 802b456:	dd39      	ble.n	802b4cc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 802b458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802b45c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b460:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b464:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b468:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b46c:	ee29 6aa7 	vmul.f32	s12, s19, s15
 802b470:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b474:	ee76 6a68 	vsub.f32	s13, s12, s17
 802b478:	ee37 7ac8 	vsub.f32	s14, s15, s16
 802b47c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b480:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802b484:	ee16 2a90 	vmov	r2, s13
 802b488:	3b01      	subs	r3, #1
 802b48a:	9315      	str	r3, [sp, #84]	@ 0x54
 802b48c:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802b48e:	fb92 f3f3 	sdiv	r3, r2, r3
 802b492:	ee17 2a10 	vmov	r2, s14
 802b496:	eeb0 7a48 	vmov.f32	s14, s16
 802b49a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802b49e:	ee17 ba10 	vmov	fp, s14
 802b4a2:	eeb0 7a68 	vmov.f32	s14, s17
 802b4a6:	933d      	str	r3, [sp, #244]	@ 0xf4
 802b4a8:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802b4aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 802b4ae:	fb92 f3f3 	sdiv	r3, r2, r3
 802b4b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b4b4:	933e      	str	r3, [sp, #248]	@ 0xf8
 802b4b6:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802b4b8:	ee17 9a10 	vmov	r9, s14
 802b4bc:	eeb0 8a67 	vmov.f32	s16, s15
 802b4c0:	eef0 8a46 	vmov.f32	s17, s12
 802b4c4:	bf14      	ite	ne
 802b4c6:	469e      	movne	lr, r3
 802b4c8:	4696      	moveq	lr, r2
 802b4ca:	e790      	b.n	802b3ee <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802b4cc:	b029      	add	sp, #164	@ 0xa4
 802b4ce:	ecbd 8b08 	vpop	{d8-d11}
 802b4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b4d6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802b4d8:	9112      	str	r1, [sp, #72]	@ 0x48
 802b4da:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 802b4dc:	f10e 32ff 	add.w	r2, lr, #4294967295
 802b4e0:	fb01 9302 	mla	r3, r1, r2, r9
 802b4e4:	141b      	asrs	r3, r3, #16
 802b4e6:	920a      	str	r2, [sp, #40]	@ 0x28
 802b4e8:	f100 816a 	bmi.w	802b7c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802b4ec:	42a3      	cmp	r3, r4
 802b4ee:	f280 8167 	bge.w	802b7c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802b4f2:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 802b4f4:	fb03 b302 	mla	r3, r3, r2, fp
 802b4f8:	141b      	asrs	r3, r3, #16
 802b4fa:	f100 8161 	bmi.w	802b7c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802b4fe:	3e01      	subs	r6, #1
 802b500:	42b3      	cmp	r3, r6
 802b502:	f280 815d 	bge.w	802b7c0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802b506:	f1be 0f00 	cmp.w	lr, #0
 802b50a:	dda2      	ble.n	802b452 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802b50c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b50e:	f8cd e064 	str.w	lr, [sp, #100]	@ 0x64
 802b512:	3304      	adds	r3, #4
 802b514:	9309      	str	r3, [sp, #36]	@ 0x24
 802b516:	f8cd b0f0 	str.w	fp, [sp, #240]	@ 0xf0
 802b51a:	4606      	mov	r6, r0
 802b51c:	465b      	mov	r3, fp
 802b51e:	e12a      	b.n	802b776 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802b520:	785f      	ldrb	r7, [r3, #1]
 802b522:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 802b526:	9713      	str	r7, [sp, #76]	@ 0x4c
 802b528:	0e3f      	lsrs	r7, r7, #24
 802b52a:	970c      	str	r7, [sp, #48]	@ 0x30
 802b52c:	b16a      	cbz	r2, 802b54a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b52e:	199f      	adds	r7, r3, r6
 802b530:	5d9b      	ldrb	r3, [r3, r6]
 802b532:	462e      	mov	r6, r5
 802b534:	787f      	ldrb	r7, [r7, #1]
 802b536:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802b53a:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 802b53e:	9314      	str	r3, [sp, #80]	@ 0x50
 802b540:	9516      	str	r5, [sp, #88]	@ 0x58
 802b542:	0e1b      	lsrs	r3, r3, #24
 802b544:	0e2d      	lsrs	r5, r5, #24
 802b546:	950e      	str	r5, [sp, #56]	@ 0x38
 802b548:	930d      	str	r3, [sp, #52]	@ 0x34
 802b54a:	fa1f fc81 	uxth.w	ip, r1
 802b54e:	b292      	uxth	r2, r2
 802b550:	fb0c f602 	mul.w	r6, ip, r2
 802b554:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802b558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b55a:	ebac 0706 	sub.w	r7, ip, r6
 802b55e:	b2bf      	uxth	r7, r7
 802b560:	fb07 f103 	mul.w	r1, r7, r3
 802b564:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802b568:	b292      	uxth	r2, r2
 802b56a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802b56e:	1a9b      	subs	r3, r3, r2
 802b570:	b29b      	uxth	r3, r3
 802b572:	fb03 1104 	mla	r1, r3, r4, r1
 802b576:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802b578:	fb02 1105 	mla	r1, r2, r5, r1
 802b57c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802b57e:	fb06 1105 	mla	r1, r6, r5, r1
 802b582:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802b586:	2900      	cmp	r1, #0
 802b588:	f000 80e3 	beq.w	802b752 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802b58c:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802b590:	2cff      	cmp	r4, #255	@ 0xff
 802b592:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802b596:	950f      	str	r5, [sp, #60]	@ 0x3c
 802b598:	9010      	str	r0, [sp, #64]	@ 0x40
 802b59a:	d01e      	beq.n	802b5da <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802b59c:	fb00 f004 	mul.w	r0, r0, r4
 802b5a0:	fb05 fe04 	mul.w	lr, r5, r4
 802b5a4:	4604      	mov	r4, r0
 802b5a6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802b5aa:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 802b5ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802b5b2:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802b5b6:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802b5ba:	44e6      	add	lr, ip
 802b5bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b5c0:	0a24      	lsrs	r4, r4, #8
 802b5c2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b5c6:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802b5ca:	ea4e 0e04 	orr.w	lr, lr, r4
 802b5ce:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802b5d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 802b5d4:	f40e 407f 	and.w	r0, lr, #65280	@ 0xff00
 802b5d8:	9010      	str	r0, [sp, #64]	@ 0x40
 802b5da:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802b5dc:	f000 1eff 	and.w	lr, r0, #16711935	@ 0xff00ff
 802b5e0:	f400 487f 	and.w	r8, r0, #65280	@ 0xff00
 802b5e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802b5e6:	28ff      	cmp	r0, #255	@ 0xff
 802b5e8:	d01c      	beq.n	802b624 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802b5ea:	fb0e fe00 	mul.w	lr, lr, r0
 802b5ee:	fb08 f800 	mul.w	r8, r8, r0
 802b5f2:	ea4f 241e 	mov.w	r4, lr, lsr #8
 802b5f6:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802b5fa:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802b5fe:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 802b602:	44a6      	add	lr, r4
 802b604:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802b608:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b60c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802b610:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b614:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802b618:	ea4e 0808 	orr.w	r8, lr, r8
 802b61c:	f008 1eff 	and.w	lr, r8, #16711935	@ 0xff00ff
 802b620:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802b624:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802b626:	f000 1cff 	and.w	ip, r0, #16711935	@ 0xff00ff
 802b62a:	f400 4a7f 	and.w	sl, r0, #65280	@ 0xff00
 802b62e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802b630:	28ff      	cmp	r0, #255	@ 0xff
 802b632:	d01c      	beq.n	802b66e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802b634:	fb0c fc00 	mul.w	ip, ip, r0
 802b638:	fb0a fa00 	mul.w	sl, sl, r0
 802b63c:	ea4f 241c 	mov.w	r4, ip, lsr #8
 802b640:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802b644:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802b648:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802b64c:	44a4      	add	ip, r4
 802b64e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802b652:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b656:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b65a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802b65e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802b662:	ea4c 0a0a 	orr.w	sl, ip, sl
 802b666:	f00a 1cff 	and.w	ip, sl, #16711935	@ 0xff00ff
 802b66a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802b66e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802b670:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 802b674:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802b678:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802b67a:	2cff      	cmp	r4, #255	@ 0xff
 802b67c:	d019      	beq.n	802b6b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802b67e:	fb00 f004 	mul.w	r0, r0, r4
 802b682:	fb0b fb04 	mul.w	fp, fp, r4
 802b686:	0a04      	lsrs	r4, r0, #8
 802b688:	f004 15ff 	and.w	r5, r4, #16711935	@ 0xff00ff
 802b68c:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802b690:	f50b 7480 	add.w	r4, fp, #256	@ 0x100
 802b694:	eb04 241b 	add.w	r4, r4, fp, lsr #8
 802b698:	4428      	add	r0, r5
 802b69a:	0a00      	lsrs	r0, r0, #8
 802b69c:	0a24      	lsrs	r4, r4, #8
 802b69e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802b6a2:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802b6a6:	ea40 0b0b 	orr.w	fp, r0, fp
 802b6aa:	f00b 10ff 	and.w	r0, fp, #16711935	@ 0xff00ff
 802b6ae:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802b6b2:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 802b6b4:	fb0e fe07 	mul.w	lr, lr, r7
 802b6b8:	fb01 f105 	mul.w	r1, r1, r5
 802b6bc:	1c4c      	adds	r4, r1, #1
 802b6be:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 802b6c2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802b6c6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802b6c8:	fb08 f707 	mul.w	r7, r8, r7
 802b6cc:	fb04 ee03 	mla	lr, r4, r3, lr
 802b6d0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802b6d2:	fb0c ee02 	mla	lr, ip, r2, lr
 802b6d6:	fb04 7703 	mla	r7, r4, r3, r7
 802b6da:	fb0a 7702 	mla	r7, sl, r2, r7
 802b6de:	fb00 ee06 	mla	lr, r0, r6, lr
 802b6e2:	fb0b 7706 	mla	r7, fp, r6, r7
 802b6e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b6ea:	0a3f      	lsrs	r7, r7, #8
 802b6ec:	f407 437f 	and.w	r3, r7, #65280	@ 0xff00
 802b6f0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802b6f4:	ea4e 0303 	orr.w	r3, lr, r3
 802b6f8:	b2df      	uxtb	r7, r3
 802b6fa:	f3c3 2607 	ubfx	r6, r3, #8, #8
 802b6fe:	0c1b      	lsrs	r3, r3, #16
 802b700:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802b702:	fb17 f705 	smulbb	r7, r7, r5
 802b706:	fb16 f605 	smulbb	r6, r6, r5
 802b70a:	fb13 f305 	smulbb	r3, r3, r5
 802b70e:	f814 0c04 	ldrb.w	r0, [r4, #-4]
 802b712:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 802b716:	f814 cc02 	ldrb.w	ip, [r4, #-2]
 802b71a:	b2c9      	uxtb	r1, r1
 802b71c:	fb00 7001 	mla	r0, r0, r1, r7
 802b720:	fb02 6201 	mla	r2, r2, r1, r6
 802b724:	fb0c 3101 	mla	r1, ip, r1, r3
 802b728:	b280      	uxth	r0, r0
 802b72a:	b292      	uxth	r2, r2
 802b72c:	b289      	uxth	r1, r1
 802b72e:	1c47      	adds	r7, r0, #1
 802b730:	1c56      	adds	r6, r2, #1
 802b732:	1c4b      	adds	r3, r1, #1
 802b734:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802b738:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802b73c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b740:	1200      	asrs	r0, r0, #8
 802b742:	1212      	asrs	r2, r2, #8
 802b744:	1209      	asrs	r1, r1, #8
 802b746:	f804 0c04 	strb.w	r0, [r4, #-4]
 802b74a:	f804 2c03 	strb.w	r2, [r4, #-3]
 802b74e:	f804 1c02 	strb.w	r1, [r4, #-2]
 802b752:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 802b754:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 802b756:	4491      	add	r9, r2
 802b758:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 802b75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b75c:	440a      	add	r2, r1
 802b75e:	923c      	str	r2, [sp, #240]	@ 0xf0
 802b760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b762:	3b01      	subs	r3, #1
 802b764:	930a      	str	r3, [sp, #40]	@ 0x28
 802b766:	3204      	adds	r2, #4
 802b768:	3301      	adds	r3, #1
 802b76a:	9209      	str	r2, [sp, #36]	@ 0x24
 802b76c:	d021      	beq.n	802b7b2 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802b76e:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 802b770:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 802b774:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 802b776:	ea4f 4229 	mov.w	r2, r9, asr #16
 802b77a:	141b      	asrs	r3, r3, #16
 802b77c:	fb06 2303 	mla	r3, r6, r3, r2
 802b780:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802b782:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802b784:	5ce2      	ldrb	r2, [r4, r3]
 802b786:	f3c9 3103 	ubfx	r1, r9, #12, #4
 802b78a:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 802b78e:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 802b790:	4423      	add	r3, r4
 802b792:	f3c2 3203 	ubfx	r2, r2, #12, #4
 802b796:	0e04      	lsrs	r4, r0, #24
 802b798:	2900      	cmp	r1, #0
 802b79a:	f47f aec1 	bne.w	802b520 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802b79e:	2a00      	cmp	r2, #0
 802b7a0:	f43f aed3 	beq.w	802b54a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b7a4:	5d9b      	ldrb	r3, [r3, r6]
 802b7a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802b7aa:	9314      	str	r3, [sp, #80]	@ 0x50
 802b7ac:	0e1b      	lsrs	r3, r3, #24
 802b7ae:	930d      	str	r3, [sp, #52]	@ 0x34
 802b7b0:	e6cb      	b.n	802b54a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b7b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b7b4:	f8dd e064 	ldr.w	lr, [sp, #100]	@ 0x64
 802b7b8:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 802b7bc:	9312      	str	r3, [sp, #72]	@ 0x48
 802b7be:	e648      	b.n	802b452 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802b7c0:	f1be 0f00 	cmp.w	lr, #0
 802b7c4:	f77f ae45 	ble.w	802b452 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802b7c8:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802b7cc:	ea4f 4329 	mov.w	r3, r9, asr #16
 802b7d0:	ea4f 422b 	mov.w	r2, fp, asr #16
 802b7d4:	2b00      	cmp	r3, #0
 802b7d6:	46be      	mov	lr, r7
 802b7d8:	4629      	mov	r1, r5
 802b7da:	e9dd 653d 	ldrd	r6, r5, [sp, #244]	@ 0xf4
 802b7de:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 802b7e2:	9c42      	ldr	r4, [sp, #264]	@ 0x108
 802b7e4:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802b7e8:	f3cb 3703 	ubfx	r7, fp, #12, #4
 802b7ec:	f2c0 815d 	blt.w	802baaa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802b7f0:	f101 3cff 	add.w	ip, r1, #4294967295
 802b7f4:	4563      	cmp	r3, ip
 802b7f6:	f280 8158 	bge.w	802baaa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802b7fa:	2a00      	cmp	r2, #0
 802b7fc:	f2c0 8155 	blt.w	802baaa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802b800:	f10e 3cff 	add.w	ip, lr, #4294967295
 802b804:	4562      	cmp	r2, ip
 802b806:	f280 8150 	bge.w	802baaa <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x722>
 802b80a:	fa0f fc81 	sxth.w	ip, r1
 802b80e:	fb02 330c 	mla	r3, r2, ip, r3
 802b812:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b814:	5cd1      	ldrb	r1, [r2, r3]
 802b816:	18d3      	adds	r3, r2, r3
 802b818:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802b81a:	469e      	mov	lr, r3
 802b81c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b820:	0e19      	lsrs	r1, r3, #24
 802b822:	9309      	str	r3, [sp, #36]	@ 0x24
 802b824:	910f      	str	r1, [sp, #60]	@ 0x3c
 802b826:	2800      	cmp	r0, #0
 802b828:	f000 8171 	beq.w	802bb0e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x786>
 802b82c:	4671      	mov	r1, lr
 802b82e:	f89e e001 	ldrb.w	lr, [lr, #1]
 802b832:	4613      	mov	r3, r2
 802b834:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 802b838:	9224      	str	r2, [sp, #144]	@ 0x90
 802b83a:	0e12      	lsrs	r2, r2, #24
 802b83c:	921a      	str	r2, [sp, #104]	@ 0x68
 802b83e:	2f00      	cmp	r7, #0
 802b840:	f040 8171 	bne.w	802bb26 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79e>
 802b844:	b280      	uxth	r0, r0
 802b846:	b2bf      	uxth	r7, r7
 802b848:	fb00 f207 	mul.w	r2, r0, r7
 802b84c:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 802b850:	ebac 0002 	sub.w	r0, ip, r2
 802b854:	b280      	uxth	r0, r0
 802b856:	4603      	mov	r3, r0
 802b858:	9010      	str	r0, [sp, #64]	@ 0x40
 802b85a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802b85c:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 802b860:	fb03 f000 	mul.w	r0, r3, r0
 802b864:	fa1f fe87 	uxth.w	lr, r7
 802b868:	f5cc 7780 	rsb	r7, ip, #256	@ 0x100
 802b86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b86e:	eba7 070e 	sub.w	r7, r7, lr
 802b872:	b2bf      	uxth	r7, r7
 802b874:	fb07 0003 	mla	r0, r7, r3, r0
 802b878:	9719      	str	r7, [sp, #100]	@ 0x64
 802b87a:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 802b87c:	fb0e 0007 	mla	r0, lr, r7, r0
 802b880:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 802b882:	fb02 0007 	mla	r0, r2, r7, r0
 802b886:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802b88a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802b88c:	2800      	cmp	r0, #0
 802b88e:	f000 80f6 	beq.w	802ba7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802b892:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802b894:	2bff      	cmp	r3, #255	@ 0xff
 802b896:	f001 10ff 	and.w	r0, r1, #16711935	@ 0xff00ff
 802b89a:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802b89e:	901d      	str	r0, [sp, #116]	@ 0x74
 802b8a0:	9109      	str	r1, [sp, #36]	@ 0x24
 802b8a2:	d01b      	beq.n	802b8dc <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x554>
 802b8a4:	fb01 f103 	mul.w	r1, r1, r3
 802b8a8:	fb00 f003 	mul.w	r0, r0, r3
 802b8ac:	460b      	mov	r3, r1
 802b8ae:	0a01      	lsrs	r1, r0, #8
 802b8b0:	f100 1701 	add.w	r7, r0, #65537	@ 0x10001
 802b8b4:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802b8b8:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 802b8bc:	4439      	add	r1, r7
 802b8be:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802b8c2:	0a09      	lsrs	r1, r1, #8
 802b8c4:	0a1b      	lsrs	r3, r3, #8
 802b8c6:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802b8ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802b8ce:	430b      	orrs	r3, r1
 802b8d0:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 802b8d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802b8d8:	911d      	str	r1, [sp, #116]	@ 0x74
 802b8da:	9309      	str	r3, [sp, #36]	@ 0x24
 802b8dc:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802b8de:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802b8e0:	f001 13ff 	and.w	r3, r1, #16711935	@ 0xff00ff
 802b8e4:	2fff      	cmp	r7, #255	@ 0xff
 802b8e6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802b8ea:	931e      	str	r3, [sp, #120]	@ 0x78
 802b8ec:	911f      	str	r1, [sp, #124]	@ 0x7c
 802b8ee:	d01c      	beq.n	802b92a <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 802b8f0:	fb01 f107 	mul.w	r1, r1, r7
 802b8f4:	fb03 f307 	mul.w	r3, r3, r7
 802b8f8:	460f      	mov	r7, r1
 802b8fa:	0a19      	lsrs	r1, r3, #8
 802b8fc:	f103 1001 	add.w	r0, r3, #65537	@ 0x10001
 802b900:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802b904:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 802b908:	4401      	add	r1, r0
 802b90a:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802b90e:	0a09      	lsrs	r1, r1, #8
 802b910:	0a1b      	lsrs	r3, r3, #8
 802b912:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802b916:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802b91a:	ea41 0003 	orr.w	r0, r1, r3
 802b91e:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 802b922:	931e      	str	r3, [sp, #120]	@ 0x78
 802b924:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 802b928:	931f      	str	r3, [sp, #124]	@ 0x7c
 802b92a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802b92c:	f003 11ff 	and.w	r1, r3, #16711935	@ 0xff00ff
 802b930:	f403 4c7f 	and.w	ip, r3, #65280	@ 0xff00
 802b934:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802b936:	9120      	str	r1, [sp, #128]	@ 0x80
 802b938:	2bff      	cmp	r3, #255	@ 0xff
 802b93a:	d01b      	beq.n	802b974 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802b93c:	fb01 f103 	mul.w	r1, r1, r3
 802b940:	fb0c fc03 	mul.w	ip, ip, r3
 802b944:	0a08      	lsrs	r0, r1, #8
 802b946:	f50c 7380 	add.w	r3, ip, #256	@ 0x100
 802b94a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802b94e:	f101 1101 	add.w	r1, r1, #65537	@ 0x10001
 802b952:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802b956:	4401      	add	r1, r0
 802b958:	0a09      	lsrs	r1, r1, #8
 802b95a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b95e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802b962:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802b966:	ea41 0c0c 	orr.w	ip, r1, ip
 802b96a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 802b96e:	9320      	str	r3, [sp, #128]	@ 0x80
 802b970:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802b974:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802b976:	f000 13ff 	and.w	r3, r0, #16711935	@ 0xff00ff
 802b97a:	f400 477f 	and.w	r7, r0, #65280	@ 0xff00
 802b97e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802b980:	9321      	str	r3, [sp, #132]	@ 0x84
 802b982:	28ff      	cmp	r0, #255	@ 0xff
 802b984:	d019      	beq.n	802b9ba <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 802b986:	fb03 f300 	mul.w	r3, r3, r0
 802b98a:	fb07 f700 	mul.w	r7, r7, r0
 802b98e:	0a18      	lsrs	r0, r3, #8
 802b990:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802b994:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 802b998:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 802b99c:	4418      	add	r0, r3
 802b99e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802b9a2:	0a00      	lsrs	r0, r0, #8
 802b9a4:	0a3f      	lsrs	r7, r7, #8
 802b9a6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802b9aa:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802b9ae:	4307      	orrs	r7, r0
 802b9b0:	f007 13ff 	and.w	r3, r7, #16711935	@ 0xff00ff
 802b9b4:	9321      	str	r3, [sp, #132]	@ 0x84
 802b9b6:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802b9ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802b9bc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802b9be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802b9c0:	fb01 f100 	mul.w	r1, r1, r0
 802b9c4:	4608      	mov	r0, r1
 802b9c6:	3101      	adds	r1, #1
 802b9c8:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802b9cc:	ea6f 2110 	mvn.w	r1, r0, lsr #8
 802b9d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802b9d2:	9125      	str	r1, [sp, #148]	@ 0x94
 802b9d4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802b9d6:	fb01 f100 	mul.w	r1, r1, r0
 802b9da:	910f      	str	r1, [sp, #60]	@ 0x3c
 802b9dc:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 802b9de:	fb01 f100 	mul.w	r1, r1, r0
 802b9e2:	9110      	str	r1, [sp, #64]	@ 0x40
 802b9e4:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802b9e6:	4608      	mov	r0, r1
 802b9e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802b9ea:	fb00 1103 	mla	r1, r0, r3, r1
 802b9ee:	910f      	str	r1, [sp, #60]	@ 0x3c
 802b9f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802b9f2:	4608      	mov	r0, r1
 802b9f4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802b9f6:	fb00 1003 	mla	r0, r0, r3, r1
 802b9fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b9fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802b9fe:	fb0c 000e 	mla	r0, ip, lr, r0
 802ba02:	fb03 110e 	mla	r1, r3, lr, r1
 802ba06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802ba08:	f89a c002 	ldrb.w	ip, [sl, #2]
 802ba0c:	fb03 1102 	mla	r1, r3, r2, r1
 802ba10:	fb07 0302 	mla	r3, r7, r2, r0
 802ba14:	0a0a      	lsrs	r2, r1, #8
 802ba16:	0a1b      	lsrs	r3, r3, #8
 802ba18:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802ba1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802ba20:	4313      	orrs	r3, r2
 802ba22:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802ba24:	b2df      	uxtb	r7, r3
 802ba26:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802ba2a:	0c1b      	lsrs	r3, r3, #16
 802ba2c:	fb17 f702 	smulbb	r7, r7, r2
 802ba30:	fb10 f002 	smulbb	r0, r0, r2
 802ba34:	fb13 f302 	smulbb	r3, r3, r2
 802ba38:	f89d e094 	ldrb.w	lr, [sp, #148]	@ 0x94
 802ba3c:	f89a 1000 	ldrb.w	r1, [sl]
 802ba40:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802ba44:	fb01 710e 	mla	r1, r1, lr, r7
 802ba48:	fb02 020e 	mla	r2, r2, lr, r0
 802ba4c:	fb0c 330e 	mla	r3, ip, lr, r3
 802ba50:	b297      	uxth	r7, r2
 802ba52:	fa1f fc81 	uxth.w	ip, r1
 802ba56:	b298      	uxth	r0, r3
 802ba58:	f10c 0101 	add.w	r1, ip, #1
 802ba5c:	1c7a      	adds	r2, r7, #1
 802ba5e:	1c43      	adds	r3, r0, #1
 802ba60:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 802ba64:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802ba68:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802ba6c:	1209      	asrs	r1, r1, #8
 802ba6e:	1212      	asrs	r2, r2, #8
 802ba70:	121b      	asrs	r3, r3, #8
 802ba72:	f88a 1000 	strb.w	r1, [sl]
 802ba76:	f88a 2001 	strb.w	r2, [sl, #1]
 802ba7a:	f88a 3002 	strb.w	r3, [sl, #2]
 802ba7e:	f1b8 0f00 	cmp.w	r8, #0
 802ba82:	f10a 0a04 	add.w	sl, sl, #4
 802ba86:	44b1      	add	r9, r6
 802ba88:	44ab      	add	fp, r5
 802ba8a:	dd30      	ble.n	802baee <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x766>
 802ba8c:	e9d4 1e02 	ldrd	r1, lr, [r4, #8]
 802ba90:	ea4f 4329 	mov.w	r3, r9, asr #16
 802ba94:	2b00      	cmp	r3, #0
 802ba96:	f108 38ff 	add.w	r8, r8, #4294967295
 802ba9a:	ea4f 422b 	mov.w	r2, fp, asr #16
 802ba9e:	f3c9 3003 	ubfx	r0, r9, #12, #4
 802baa2:	f3cb 3703 	ubfx	r7, fp, #12, #4
 802baa6:	f6bf aea3 	bge.w	802b7f0 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802baaa:	f113 0c01 	adds.w	ip, r3, #1
 802baae:	d4e6      	bmi.n	802ba7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802bab0:	458c      	cmp	ip, r1
 802bab2:	dce4      	bgt.n	802ba7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802bab4:	f112 0c01 	adds.w	ip, r2, #1
 802bab8:	d4e1      	bmi.n	802ba7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802baba:	45f4      	cmp	ip, lr
 802babc:	dcdf      	bgt.n	802ba7e <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f6>
 802babe:	fa0f fe8e 	sxth.w	lr, lr
 802bac2:	b209      	sxth	r1, r1
 802bac4:	e9cd 1e00 	strd	r1, lr, [sp]
 802bac8:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 802baca:	e9cd 2003 	strd	r2, r0, [sp, #12]
 802bace:	e9cd 7105 	strd	r7, r1, [sp, #20]
 802bad2:	9302      	str	r3, [sp, #8]
 802bad4:	4651      	mov	r1, sl
 802bad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802bad8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802bada:	9822      	ldr	r0, [sp, #136]	@ 0x88
 802badc:	f7ff fab0 	bl	802b040 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 802bae0:	f1b8 0f00 	cmp.w	r8, #0
 802bae4:	f10a 0a04 	add.w	sl, sl, #4
 802bae8:	44b1      	add	r9, r6
 802baea:	44ab      	add	fp, r5
 802baec:	dcce      	bgt.n	802ba8c <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802baee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802baf0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802baf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802baf6:	3301      	adds	r3, #1
 802baf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802bafc:	9312      	str	r3, [sp, #72]	@ 0x48
 802bafe:	e4a8      	b.n	802b452 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802bb00:	9112      	str	r1, [sp, #72]	@ 0x48
 802bb02:	f10e 31ff 	add.w	r1, lr, #4294967295
 802bb06:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802bb08:	910a      	str	r1, [sp, #40]	@ 0x28
 802bb0a:	4688      	mov	r8, r1
 802bb0c:	e662      	b.n	802b7d4 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802bb0e:	2f00      	cmp	r7, #0
 802bb10:	f43f ae98 	beq.w	802b844 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802bb14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802bb16:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802bb1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bb1e:	0e13      	lsrs	r3, r2, #24
 802bb20:	9226      	str	r2, [sp, #152]	@ 0x98
 802bb22:	931b      	str	r3, [sp, #108]	@ 0x6c
 802bb24:	e68e      	b.n	802b844 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802bb26:	eb01 0e0c 	add.w	lr, r1, ip
 802bb2a:	f89e e001 	ldrb.w	lr, [lr, #1]
 802bb2e:	f811 c00c 	ldrb.w	ip, [r1, ip]
 802bb32:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 802bb36:	4611      	mov	r1, r2
 802bb38:	9227      	str	r2, [sp, #156]	@ 0x9c
 802bb3a:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 802bb3e:	4613      	mov	r3, r2
 802bb40:	9226      	str	r2, [sp, #152]	@ 0x98
 802bb42:	0e0a      	lsrs	r2, r1, #24
 802bb44:	921c      	str	r2, [sp, #112]	@ 0x70
 802bb46:	0e1a      	lsrs	r2, r3, #24
 802bb48:	921b      	str	r2, [sp, #108]	@ 0x6c
 802bb4a:	e67b      	b.n	802b844 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802bb4c:	f43f ac81 	beq.w	802b452 <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 802bb50:	1e44      	subs	r4, r0, #1
 802bb52:	e4c2      	b.n	802b4da <_ZN8touchgfx8LCDGPU2D66TextureMapper_32BPP_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>

0802bb54 <__aeabi_atexit>:
 802bb54:	460b      	mov	r3, r1
 802bb56:	4601      	mov	r1, r0
 802bb58:	4618      	mov	r0, r3
 802bb5a:	f000 b90f 	b.w	802bd7c <__cxa_atexit>

0802bb5e <_ZdlPvj>:
 802bb5e:	f000 b812 	b.w	802bb86 <_ZdlPv>

0802bb62 <__cxa_guard_acquire>:
 802bb62:	6802      	ldr	r2, [r0, #0]
 802bb64:	4603      	mov	r3, r0
 802bb66:	07d2      	lsls	r2, r2, #31
 802bb68:	d405      	bmi.n	802bb76 <__cxa_guard_acquire+0x14>
 802bb6a:	7842      	ldrb	r2, [r0, #1]
 802bb6c:	b102      	cbz	r2, 802bb70 <__cxa_guard_acquire+0xe>
 802bb6e:	deff      	udf	#255	@ 0xff
 802bb70:	2001      	movs	r0, #1
 802bb72:	7058      	strb	r0, [r3, #1]
 802bb74:	4770      	bx	lr
 802bb76:	2000      	movs	r0, #0
 802bb78:	4770      	bx	lr

0802bb7a <__cxa_guard_release>:
 802bb7a:	2301      	movs	r3, #1
 802bb7c:	6003      	str	r3, [r0, #0]
 802bb7e:	4770      	bx	lr

0802bb80 <__cxa_pure_virtual>:
 802bb80:	b508      	push	{r3, lr}
 802bb82:	f000 f80d 	bl	802bba0 <_ZSt9terminatev>

0802bb86 <_ZdlPv>:
 802bb86:	f000 b843 	b.w	802bc10 <free>

0802bb8a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802bb8a:	b508      	push	{r3, lr}
 802bb8c:	4780      	blx	r0
 802bb8e:	f000 f80c 	bl	802bbaa <abort>
	...

0802bb94 <_ZSt13get_terminatev>:
 802bb94:	4b01      	ldr	r3, [pc, #4]	@ (802bb9c <_ZSt13get_terminatev+0x8>)
 802bb96:	e8d3 0faf 	lda	r0, [r3]
 802bb9a:	4770      	bx	lr
 802bb9c:	20000154 	.word	0x20000154

0802bba0 <_ZSt9terminatev>:
 802bba0:	b508      	push	{r3, lr}
 802bba2:	f7ff fff7 	bl	802bb94 <_ZSt13get_terminatev>
 802bba6:	f7ff fff0 	bl	802bb8a <_ZN10__cxxabiv111__terminateEPFvvE>

0802bbaa <abort>:
 802bbaa:	2006      	movs	r0, #6
 802bbac:	b508      	push	{r3, lr}
 802bbae:	f000 fa3b 	bl	802c028 <raise>
 802bbb2:	2001      	movs	r0, #1
 802bbb4:	f7d6 fc4a 	bl	800244c <_exit>

0802bbb8 <__assert_func>:
 802bbb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802bbba:	4614      	mov	r4, r2
 802bbbc:	461a      	mov	r2, r3
 802bbbe:	4b09      	ldr	r3, [pc, #36]	@ (802bbe4 <__assert_func+0x2c>)
 802bbc0:	4605      	mov	r5, r0
 802bbc2:	681b      	ldr	r3, [r3, #0]
 802bbc4:	68d8      	ldr	r0, [r3, #12]
 802bbc6:	b954      	cbnz	r4, 802bbde <__assert_func+0x26>
 802bbc8:	4b07      	ldr	r3, [pc, #28]	@ (802bbe8 <__assert_func+0x30>)
 802bbca:	461c      	mov	r4, r3
 802bbcc:	9100      	str	r1, [sp, #0]
 802bbce:	4907      	ldr	r1, [pc, #28]	@ (802bbec <__assert_func+0x34>)
 802bbd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802bbd4:	462b      	mov	r3, r5
 802bbd6:	f000 f983 	bl	802bee0 <fiprintf>
 802bbda:	f7ff ffe6 	bl	802bbaa <abort>
 802bbde:	4b04      	ldr	r3, [pc, #16]	@ (802bbf0 <__assert_func+0x38>)
 802bbe0:	e7f4      	b.n	802bbcc <__assert_func+0x14>
 802bbe2:	bf00      	nop
 802bbe4:	20000164 	.word	0x20000164
 802bbe8:	080308cd 	.word	0x080308cd
 802bbec:	0803089f 	.word	0x0803089f
 802bbf0:	08030892 	.word	0x08030892

0802bbf4 <atexit>:
 802bbf4:	2300      	movs	r3, #0
 802bbf6:	4601      	mov	r1, r0
 802bbf8:	461a      	mov	r2, r3
 802bbfa:	4618      	mov	r0, r3
 802bbfc:	f000 bac0 	b.w	802c180 <__register_exitproc>

0802bc00 <malloc>:
 802bc00:	4b02      	ldr	r3, [pc, #8]	@ (802bc0c <malloc+0xc>)
 802bc02:	4601      	mov	r1, r0
 802bc04:	6818      	ldr	r0, [r3, #0]
 802bc06:	f000 b82d 	b.w	802bc64 <_malloc_r>
 802bc0a:	bf00      	nop
 802bc0c:	20000164 	.word	0x20000164

0802bc10 <free>:
 802bc10:	4b02      	ldr	r3, [pc, #8]	@ (802bc1c <free+0xc>)
 802bc12:	4601      	mov	r1, r0
 802bc14:	6818      	ldr	r0, [r3, #0]
 802bc16:	f000 bb11 	b.w	802c23c <_free_r>
 802bc1a:	bf00      	nop
 802bc1c:	20000164 	.word	0x20000164

0802bc20 <sbrk_aligned>:
 802bc20:	b570      	push	{r4, r5, r6, lr}
 802bc22:	4e0f      	ldr	r6, [pc, #60]	@ (802bc60 <sbrk_aligned+0x40>)
 802bc24:	460c      	mov	r4, r1
 802bc26:	4605      	mov	r5, r0
 802bc28:	6831      	ldr	r1, [r6, #0]
 802bc2a:	b911      	cbnz	r1, 802bc32 <sbrk_aligned+0x12>
 802bc2c:	f000 fa4c 	bl	802c0c8 <_sbrk_r>
 802bc30:	6030      	str	r0, [r6, #0]
 802bc32:	4621      	mov	r1, r4
 802bc34:	4628      	mov	r0, r5
 802bc36:	f000 fa47 	bl	802c0c8 <_sbrk_r>
 802bc3a:	1c43      	adds	r3, r0, #1
 802bc3c:	d103      	bne.n	802bc46 <sbrk_aligned+0x26>
 802bc3e:	f04f 34ff 	mov.w	r4, #4294967295
 802bc42:	4620      	mov	r0, r4
 802bc44:	bd70      	pop	{r4, r5, r6, pc}
 802bc46:	1cc4      	adds	r4, r0, #3
 802bc48:	f024 0403 	bic.w	r4, r4, #3
 802bc4c:	42a0      	cmp	r0, r4
 802bc4e:	d0f8      	beq.n	802bc42 <sbrk_aligned+0x22>
 802bc50:	1a21      	subs	r1, r4, r0
 802bc52:	4628      	mov	r0, r5
 802bc54:	f000 fa38 	bl	802c0c8 <_sbrk_r>
 802bc58:	3001      	adds	r0, #1
 802bc5a:	d1f2      	bne.n	802bc42 <sbrk_aligned+0x22>
 802bc5c:	e7ef      	b.n	802bc3e <sbrk_aligned+0x1e>
 802bc5e:	bf00      	nop
 802bc60:	2015a240 	.word	0x2015a240

0802bc64 <_malloc_r>:
 802bc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bc68:	1ccd      	adds	r5, r1, #3
 802bc6a:	4606      	mov	r6, r0
 802bc6c:	f025 0503 	bic.w	r5, r5, #3
 802bc70:	3508      	adds	r5, #8
 802bc72:	2d0c      	cmp	r5, #12
 802bc74:	bf38      	it	cc
 802bc76:	250c      	movcc	r5, #12
 802bc78:	2d00      	cmp	r5, #0
 802bc7a:	db01      	blt.n	802bc80 <_malloc_r+0x1c>
 802bc7c:	42a9      	cmp	r1, r5
 802bc7e:	d904      	bls.n	802bc8a <_malloc_r+0x26>
 802bc80:	230c      	movs	r3, #12
 802bc82:	6033      	str	r3, [r6, #0]
 802bc84:	2000      	movs	r0, #0
 802bc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bc8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802bd60 <_malloc_r+0xfc>
 802bc8e:	f000 f869 	bl	802bd64 <__malloc_lock>
 802bc92:	f8d8 3000 	ldr.w	r3, [r8]
 802bc96:	461c      	mov	r4, r3
 802bc98:	bb44      	cbnz	r4, 802bcec <_malloc_r+0x88>
 802bc9a:	4629      	mov	r1, r5
 802bc9c:	4630      	mov	r0, r6
 802bc9e:	f7ff ffbf 	bl	802bc20 <sbrk_aligned>
 802bca2:	1c43      	adds	r3, r0, #1
 802bca4:	4604      	mov	r4, r0
 802bca6:	d158      	bne.n	802bd5a <_malloc_r+0xf6>
 802bca8:	f8d8 4000 	ldr.w	r4, [r8]
 802bcac:	4627      	mov	r7, r4
 802bcae:	2f00      	cmp	r7, #0
 802bcb0:	d143      	bne.n	802bd3a <_malloc_r+0xd6>
 802bcb2:	2c00      	cmp	r4, #0
 802bcb4:	d04b      	beq.n	802bd4e <_malloc_r+0xea>
 802bcb6:	6823      	ldr	r3, [r4, #0]
 802bcb8:	4639      	mov	r1, r7
 802bcba:	4630      	mov	r0, r6
 802bcbc:	eb04 0903 	add.w	r9, r4, r3
 802bcc0:	f000 fa02 	bl	802c0c8 <_sbrk_r>
 802bcc4:	4581      	cmp	r9, r0
 802bcc6:	d142      	bne.n	802bd4e <_malloc_r+0xea>
 802bcc8:	6821      	ldr	r1, [r4, #0]
 802bcca:	4630      	mov	r0, r6
 802bccc:	1a6d      	subs	r5, r5, r1
 802bcce:	4629      	mov	r1, r5
 802bcd0:	f7ff ffa6 	bl	802bc20 <sbrk_aligned>
 802bcd4:	3001      	adds	r0, #1
 802bcd6:	d03a      	beq.n	802bd4e <_malloc_r+0xea>
 802bcd8:	6823      	ldr	r3, [r4, #0]
 802bcda:	442b      	add	r3, r5
 802bcdc:	6023      	str	r3, [r4, #0]
 802bcde:	f8d8 3000 	ldr.w	r3, [r8]
 802bce2:	685a      	ldr	r2, [r3, #4]
 802bce4:	bb62      	cbnz	r2, 802bd40 <_malloc_r+0xdc>
 802bce6:	f8c8 7000 	str.w	r7, [r8]
 802bcea:	e00f      	b.n	802bd0c <_malloc_r+0xa8>
 802bcec:	6822      	ldr	r2, [r4, #0]
 802bcee:	1b52      	subs	r2, r2, r5
 802bcf0:	d420      	bmi.n	802bd34 <_malloc_r+0xd0>
 802bcf2:	2a0b      	cmp	r2, #11
 802bcf4:	d917      	bls.n	802bd26 <_malloc_r+0xc2>
 802bcf6:	1961      	adds	r1, r4, r5
 802bcf8:	42a3      	cmp	r3, r4
 802bcfa:	6025      	str	r5, [r4, #0]
 802bcfc:	bf18      	it	ne
 802bcfe:	6059      	strne	r1, [r3, #4]
 802bd00:	6863      	ldr	r3, [r4, #4]
 802bd02:	bf08      	it	eq
 802bd04:	f8c8 1000 	streq.w	r1, [r8]
 802bd08:	5162      	str	r2, [r4, r5]
 802bd0a:	604b      	str	r3, [r1, #4]
 802bd0c:	4630      	mov	r0, r6
 802bd0e:	f000 f82f 	bl	802bd70 <__malloc_unlock>
 802bd12:	f104 000b 	add.w	r0, r4, #11
 802bd16:	1d23      	adds	r3, r4, #4
 802bd18:	f020 0007 	bic.w	r0, r0, #7
 802bd1c:	1ac2      	subs	r2, r0, r3
 802bd1e:	bf1c      	itt	ne
 802bd20:	1a1b      	subne	r3, r3, r0
 802bd22:	50a3      	strne	r3, [r4, r2]
 802bd24:	e7af      	b.n	802bc86 <_malloc_r+0x22>
 802bd26:	6862      	ldr	r2, [r4, #4]
 802bd28:	42a3      	cmp	r3, r4
 802bd2a:	bf0c      	ite	eq
 802bd2c:	f8c8 2000 	streq.w	r2, [r8]
 802bd30:	605a      	strne	r2, [r3, #4]
 802bd32:	e7eb      	b.n	802bd0c <_malloc_r+0xa8>
 802bd34:	4623      	mov	r3, r4
 802bd36:	6864      	ldr	r4, [r4, #4]
 802bd38:	e7ae      	b.n	802bc98 <_malloc_r+0x34>
 802bd3a:	463c      	mov	r4, r7
 802bd3c:	687f      	ldr	r7, [r7, #4]
 802bd3e:	e7b6      	b.n	802bcae <_malloc_r+0x4a>
 802bd40:	461a      	mov	r2, r3
 802bd42:	685b      	ldr	r3, [r3, #4]
 802bd44:	42a3      	cmp	r3, r4
 802bd46:	d1fb      	bne.n	802bd40 <_malloc_r+0xdc>
 802bd48:	2300      	movs	r3, #0
 802bd4a:	6053      	str	r3, [r2, #4]
 802bd4c:	e7de      	b.n	802bd0c <_malloc_r+0xa8>
 802bd4e:	230c      	movs	r3, #12
 802bd50:	4630      	mov	r0, r6
 802bd52:	6033      	str	r3, [r6, #0]
 802bd54:	f000 f80c 	bl	802bd70 <__malloc_unlock>
 802bd58:	e794      	b.n	802bc84 <_malloc_r+0x20>
 802bd5a:	6005      	str	r5, [r0, #0]
 802bd5c:	e7d6      	b.n	802bd0c <_malloc_r+0xa8>
 802bd5e:	bf00      	nop
 802bd60:	2015a244 	.word	0x2015a244

0802bd64 <__malloc_lock>:
 802bd64:	4801      	ldr	r0, [pc, #4]	@ (802bd6c <__malloc_lock+0x8>)
 802bd66:	f000 b9fc 	b.w	802c162 <__retarget_lock_acquire_recursive>
 802bd6a:	bf00      	nop
 802bd6c:	2015a388 	.word	0x2015a388

0802bd70 <__malloc_unlock>:
 802bd70:	4801      	ldr	r0, [pc, #4]	@ (802bd78 <__malloc_unlock+0x8>)
 802bd72:	f000 b9f7 	b.w	802c164 <__retarget_lock_release_recursive>
 802bd76:	bf00      	nop
 802bd78:	2015a388 	.word	0x2015a388

0802bd7c <__cxa_atexit>:
 802bd7c:	b510      	push	{r4, lr}
 802bd7e:	4604      	mov	r4, r0
 802bd80:	4804      	ldr	r0, [pc, #16]	@ (802bd94 <__cxa_atexit+0x18>)
 802bd82:	4613      	mov	r3, r2
 802bd84:	b120      	cbz	r0, 802bd90 <__cxa_atexit+0x14>
 802bd86:	460a      	mov	r2, r1
 802bd88:	2002      	movs	r0, #2
 802bd8a:	4621      	mov	r1, r4
 802bd8c:	f000 f9f8 	bl	802c180 <__register_exitproc>
 802bd90:	bd10      	pop	{r4, pc}
 802bd92:	bf00      	nop
 802bd94:	0802c181 	.word	0x0802c181

0802bd98 <std>:
 802bd98:	2300      	movs	r3, #0
 802bd9a:	b510      	push	{r4, lr}
 802bd9c:	4604      	mov	r4, r0
 802bd9e:	6083      	str	r3, [r0, #8]
 802bda0:	8181      	strh	r1, [r0, #12]
 802bda2:	4619      	mov	r1, r3
 802bda4:	6643      	str	r3, [r0, #100]	@ 0x64
 802bda6:	81c2      	strh	r2, [r0, #14]
 802bda8:	2208      	movs	r2, #8
 802bdaa:	6183      	str	r3, [r0, #24]
 802bdac:	e9c0 3300 	strd	r3, r3, [r0]
 802bdb0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bdb4:	305c      	adds	r0, #92	@ 0x5c
 802bdb6:	f000 f906 	bl	802bfc6 <memset>
 802bdba:	4b0d      	ldr	r3, [pc, #52]	@ (802bdf0 <std+0x58>)
 802bdbc:	6224      	str	r4, [r4, #32]
 802bdbe:	6263      	str	r3, [r4, #36]	@ 0x24
 802bdc0:	4b0c      	ldr	r3, [pc, #48]	@ (802bdf4 <std+0x5c>)
 802bdc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 802bdc4:	4b0c      	ldr	r3, [pc, #48]	@ (802bdf8 <std+0x60>)
 802bdc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802bdc8:	4b0c      	ldr	r3, [pc, #48]	@ (802bdfc <std+0x64>)
 802bdca:	6323      	str	r3, [r4, #48]	@ 0x30
 802bdcc:	4b0c      	ldr	r3, [pc, #48]	@ (802be00 <std+0x68>)
 802bdce:	429c      	cmp	r4, r3
 802bdd0:	d006      	beq.n	802bde0 <std+0x48>
 802bdd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802bdd6:	4294      	cmp	r4, r2
 802bdd8:	d002      	beq.n	802bde0 <std+0x48>
 802bdda:	33d0      	adds	r3, #208	@ 0xd0
 802bddc:	429c      	cmp	r4, r3
 802bdde:	d105      	bne.n	802bdec <std+0x54>
 802bde0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802bde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bde8:	f000 b9ba 	b.w	802c160 <__retarget_lock_init_recursive>
 802bdec:	bd10      	pop	{r4, pc}
 802bdee:	bf00      	nop
 802bdf0:	0802bf41 	.word	0x0802bf41
 802bdf4:	0802bf63 	.word	0x0802bf63
 802bdf8:	0802bf9b 	.word	0x0802bf9b
 802bdfc:	0802bfbf 	.word	0x0802bfbf
 802be00:	2015a248 	.word	0x2015a248

0802be04 <stdio_exit_handler>:
 802be04:	4a02      	ldr	r2, [pc, #8]	@ (802be10 <stdio_exit_handler+0xc>)
 802be06:	4903      	ldr	r1, [pc, #12]	@ (802be14 <stdio_exit_handler+0x10>)
 802be08:	4803      	ldr	r0, [pc, #12]	@ (802be18 <stdio_exit_handler+0x14>)
 802be0a:	f000 b87b 	b.w	802bf04 <_fwalk_sglue>
 802be0e:	bf00      	nop
 802be10:	20000158 	.word	0x20000158
 802be14:	0802c981 	.word	0x0802c981
 802be18:	20000168 	.word	0x20000168

0802be1c <cleanup_stdio>:
 802be1c:	6841      	ldr	r1, [r0, #4]
 802be1e:	4b0c      	ldr	r3, [pc, #48]	@ (802be50 <cleanup_stdio+0x34>)
 802be20:	4299      	cmp	r1, r3
 802be22:	b510      	push	{r4, lr}
 802be24:	4604      	mov	r4, r0
 802be26:	d001      	beq.n	802be2c <cleanup_stdio+0x10>
 802be28:	f000 fdaa 	bl	802c980 <_fflush_r>
 802be2c:	68a1      	ldr	r1, [r4, #8]
 802be2e:	4b09      	ldr	r3, [pc, #36]	@ (802be54 <cleanup_stdio+0x38>)
 802be30:	4299      	cmp	r1, r3
 802be32:	d002      	beq.n	802be3a <cleanup_stdio+0x1e>
 802be34:	4620      	mov	r0, r4
 802be36:	f000 fda3 	bl	802c980 <_fflush_r>
 802be3a:	68e1      	ldr	r1, [r4, #12]
 802be3c:	4b06      	ldr	r3, [pc, #24]	@ (802be58 <cleanup_stdio+0x3c>)
 802be3e:	4299      	cmp	r1, r3
 802be40:	d004      	beq.n	802be4c <cleanup_stdio+0x30>
 802be42:	4620      	mov	r0, r4
 802be44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802be48:	f000 bd9a 	b.w	802c980 <_fflush_r>
 802be4c:	bd10      	pop	{r4, pc}
 802be4e:	bf00      	nop
 802be50:	2015a248 	.word	0x2015a248
 802be54:	2015a2b0 	.word	0x2015a2b0
 802be58:	2015a318 	.word	0x2015a318

0802be5c <global_stdio_init.part.0>:
 802be5c:	b510      	push	{r4, lr}
 802be5e:	4b0b      	ldr	r3, [pc, #44]	@ (802be8c <global_stdio_init.part.0+0x30>)
 802be60:	2104      	movs	r1, #4
 802be62:	4c0b      	ldr	r4, [pc, #44]	@ (802be90 <global_stdio_init.part.0+0x34>)
 802be64:	4a0b      	ldr	r2, [pc, #44]	@ (802be94 <global_stdio_init.part.0+0x38>)
 802be66:	4620      	mov	r0, r4
 802be68:	601a      	str	r2, [r3, #0]
 802be6a:	2200      	movs	r2, #0
 802be6c:	f7ff ff94 	bl	802bd98 <std>
 802be70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802be74:	2201      	movs	r2, #1
 802be76:	2109      	movs	r1, #9
 802be78:	f7ff ff8e 	bl	802bd98 <std>
 802be7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802be80:	2202      	movs	r2, #2
 802be82:	2112      	movs	r1, #18
 802be84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802be88:	f7ff bf86 	b.w	802bd98 <std>
 802be8c:	2015a380 	.word	0x2015a380
 802be90:	2015a248 	.word	0x2015a248
 802be94:	0802be05 	.word	0x0802be05

0802be98 <__sfp_lock_acquire>:
 802be98:	4801      	ldr	r0, [pc, #4]	@ (802bea0 <__sfp_lock_acquire+0x8>)
 802be9a:	f000 b962 	b.w	802c162 <__retarget_lock_acquire_recursive>
 802be9e:	bf00      	nop
 802bea0:	2015a38a 	.word	0x2015a38a

0802bea4 <__sfp_lock_release>:
 802bea4:	4801      	ldr	r0, [pc, #4]	@ (802beac <__sfp_lock_release+0x8>)
 802bea6:	f000 b95d 	b.w	802c164 <__retarget_lock_release_recursive>
 802beaa:	bf00      	nop
 802beac:	2015a38a 	.word	0x2015a38a

0802beb0 <__sinit>:
 802beb0:	b510      	push	{r4, lr}
 802beb2:	4604      	mov	r4, r0
 802beb4:	f7ff fff0 	bl	802be98 <__sfp_lock_acquire>
 802beb8:	6a23      	ldr	r3, [r4, #32]
 802beba:	b11b      	cbz	r3, 802bec4 <__sinit+0x14>
 802bebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bec0:	f7ff bff0 	b.w	802bea4 <__sfp_lock_release>
 802bec4:	4b04      	ldr	r3, [pc, #16]	@ (802bed8 <__sinit+0x28>)
 802bec6:	6223      	str	r3, [r4, #32]
 802bec8:	4b04      	ldr	r3, [pc, #16]	@ (802bedc <__sinit+0x2c>)
 802beca:	681b      	ldr	r3, [r3, #0]
 802becc:	2b00      	cmp	r3, #0
 802bece:	d1f5      	bne.n	802bebc <__sinit+0xc>
 802bed0:	f7ff ffc4 	bl	802be5c <global_stdio_init.part.0>
 802bed4:	e7f2      	b.n	802bebc <__sinit+0xc>
 802bed6:	bf00      	nop
 802bed8:	0802be1d 	.word	0x0802be1d
 802bedc:	2015a380 	.word	0x2015a380

0802bee0 <fiprintf>:
 802bee0:	b40e      	push	{r1, r2, r3}
 802bee2:	b503      	push	{r0, r1, lr}
 802bee4:	ab03      	add	r3, sp, #12
 802bee6:	4601      	mov	r1, r0
 802bee8:	4805      	ldr	r0, [pc, #20]	@ (802bf00 <fiprintf+0x20>)
 802beea:	f853 2b04 	ldr.w	r2, [r3], #4
 802beee:	6800      	ldr	r0, [r0, #0]
 802bef0:	9301      	str	r3, [sp, #4]
 802bef2:	f000 fa17 	bl	802c324 <_vfiprintf_r>
 802bef6:	b002      	add	sp, #8
 802bef8:	f85d eb04 	ldr.w	lr, [sp], #4
 802befc:	b003      	add	sp, #12
 802befe:	4770      	bx	lr
 802bf00:	20000164 	.word	0x20000164

0802bf04 <_fwalk_sglue>:
 802bf04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bf08:	4607      	mov	r7, r0
 802bf0a:	4688      	mov	r8, r1
 802bf0c:	4614      	mov	r4, r2
 802bf0e:	2600      	movs	r6, #0
 802bf10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802bf14:	f1b9 0901 	subs.w	r9, r9, #1
 802bf18:	d505      	bpl.n	802bf26 <_fwalk_sglue+0x22>
 802bf1a:	6824      	ldr	r4, [r4, #0]
 802bf1c:	2c00      	cmp	r4, #0
 802bf1e:	d1f7      	bne.n	802bf10 <_fwalk_sglue+0xc>
 802bf20:	4630      	mov	r0, r6
 802bf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bf26:	89ab      	ldrh	r3, [r5, #12]
 802bf28:	2b01      	cmp	r3, #1
 802bf2a:	d907      	bls.n	802bf3c <_fwalk_sglue+0x38>
 802bf2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bf30:	3301      	adds	r3, #1
 802bf32:	d003      	beq.n	802bf3c <_fwalk_sglue+0x38>
 802bf34:	4629      	mov	r1, r5
 802bf36:	4638      	mov	r0, r7
 802bf38:	47c0      	blx	r8
 802bf3a:	4306      	orrs	r6, r0
 802bf3c:	3568      	adds	r5, #104	@ 0x68
 802bf3e:	e7e9      	b.n	802bf14 <_fwalk_sglue+0x10>

0802bf40 <__sread>:
 802bf40:	b510      	push	{r4, lr}
 802bf42:	460c      	mov	r4, r1
 802bf44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bf48:	f000 f898 	bl	802c07c <_read_r>
 802bf4c:	2800      	cmp	r0, #0
 802bf4e:	bfab      	itete	ge
 802bf50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802bf52:	89a3      	ldrhlt	r3, [r4, #12]
 802bf54:	181b      	addge	r3, r3, r0
 802bf56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802bf5a:	bfac      	ite	ge
 802bf5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802bf5e:	81a3      	strhlt	r3, [r4, #12]
 802bf60:	bd10      	pop	{r4, pc}

0802bf62 <__swrite>:
 802bf62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bf66:	461f      	mov	r7, r3
 802bf68:	898b      	ldrh	r3, [r1, #12]
 802bf6a:	4605      	mov	r5, r0
 802bf6c:	460c      	mov	r4, r1
 802bf6e:	05db      	lsls	r3, r3, #23
 802bf70:	4616      	mov	r6, r2
 802bf72:	d505      	bpl.n	802bf80 <__swrite+0x1e>
 802bf74:	2302      	movs	r3, #2
 802bf76:	2200      	movs	r2, #0
 802bf78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bf7c:	f000 f86c 	bl	802c058 <_lseek_r>
 802bf80:	89a3      	ldrh	r3, [r4, #12]
 802bf82:	4632      	mov	r2, r6
 802bf84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bf88:	4628      	mov	r0, r5
 802bf8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802bf8e:	81a3      	strh	r3, [r4, #12]
 802bf90:	463b      	mov	r3, r7
 802bf92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bf96:	f000 b8a7 	b.w	802c0e8 <_write_r>

0802bf9a <__sseek>:
 802bf9a:	b510      	push	{r4, lr}
 802bf9c:	460c      	mov	r4, r1
 802bf9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bfa2:	f000 f859 	bl	802c058 <_lseek_r>
 802bfa6:	1c43      	adds	r3, r0, #1
 802bfa8:	89a3      	ldrh	r3, [r4, #12]
 802bfaa:	bf15      	itete	ne
 802bfac:	6560      	strne	r0, [r4, #84]	@ 0x54
 802bfae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802bfb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802bfb6:	81a3      	strheq	r3, [r4, #12]
 802bfb8:	bf18      	it	ne
 802bfba:	81a3      	strhne	r3, [r4, #12]
 802bfbc:	bd10      	pop	{r4, pc}

0802bfbe <__sclose>:
 802bfbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bfc2:	f000 b839 	b.w	802c038 <_close_r>

0802bfc6 <memset>:
 802bfc6:	4402      	add	r2, r0
 802bfc8:	4603      	mov	r3, r0
 802bfca:	4293      	cmp	r3, r2
 802bfcc:	d100      	bne.n	802bfd0 <memset+0xa>
 802bfce:	4770      	bx	lr
 802bfd0:	f803 1b01 	strb.w	r1, [r3], #1
 802bfd4:	e7f9      	b.n	802bfca <memset+0x4>

0802bfd6 <_raise_r>:
 802bfd6:	291f      	cmp	r1, #31
 802bfd8:	b538      	push	{r3, r4, r5, lr}
 802bfda:	4605      	mov	r5, r0
 802bfdc:	460c      	mov	r4, r1
 802bfde:	d904      	bls.n	802bfea <_raise_r+0x14>
 802bfe0:	2316      	movs	r3, #22
 802bfe2:	6003      	str	r3, [r0, #0]
 802bfe4:	f04f 30ff 	mov.w	r0, #4294967295
 802bfe8:	bd38      	pop	{r3, r4, r5, pc}
 802bfea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802bfec:	b112      	cbz	r2, 802bff4 <_raise_r+0x1e>
 802bfee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802bff2:	b94b      	cbnz	r3, 802c008 <_raise_r+0x32>
 802bff4:	4628      	mov	r0, r5
 802bff6:	f000 f865 	bl	802c0c4 <_getpid_r>
 802bffa:	4622      	mov	r2, r4
 802bffc:	4601      	mov	r1, r0
 802bffe:	4628      	mov	r0, r5
 802c000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c004:	f000 b84c 	b.w	802c0a0 <_kill_r>
 802c008:	2b01      	cmp	r3, #1
 802c00a:	d00a      	beq.n	802c022 <_raise_r+0x4c>
 802c00c:	1c59      	adds	r1, r3, #1
 802c00e:	d103      	bne.n	802c018 <_raise_r+0x42>
 802c010:	2316      	movs	r3, #22
 802c012:	6003      	str	r3, [r0, #0]
 802c014:	2001      	movs	r0, #1
 802c016:	e7e7      	b.n	802bfe8 <_raise_r+0x12>
 802c018:	2100      	movs	r1, #0
 802c01a:	4620      	mov	r0, r4
 802c01c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802c020:	4798      	blx	r3
 802c022:	2000      	movs	r0, #0
 802c024:	e7e0      	b.n	802bfe8 <_raise_r+0x12>
	...

0802c028 <raise>:
 802c028:	4b02      	ldr	r3, [pc, #8]	@ (802c034 <raise+0xc>)
 802c02a:	4601      	mov	r1, r0
 802c02c:	6818      	ldr	r0, [r3, #0]
 802c02e:	f7ff bfd2 	b.w	802bfd6 <_raise_r>
 802c032:	bf00      	nop
 802c034:	20000164 	.word	0x20000164

0802c038 <_close_r>:
 802c038:	b538      	push	{r3, r4, r5, lr}
 802c03a:	2300      	movs	r3, #0
 802c03c:	4d05      	ldr	r5, [pc, #20]	@ (802c054 <_close_r+0x1c>)
 802c03e:	4604      	mov	r4, r0
 802c040:	4608      	mov	r0, r1
 802c042:	602b      	str	r3, [r5, #0]
 802c044:	f7d6 fa46 	bl	80024d4 <_close>
 802c048:	1c43      	adds	r3, r0, #1
 802c04a:	d102      	bne.n	802c052 <_close_r+0x1a>
 802c04c:	682b      	ldr	r3, [r5, #0]
 802c04e:	b103      	cbz	r3, 802c052 <_close_r+0x1a>
 802c050:	6023      	str	r3, [r4, #0]
 802c052:	bd38      	pop	{r3, r4, r5, pc}
 802c054:	2015a384 	.word	0x2015a384

0802c058 <_lseek_r>:
 802c058:	b538      	push	{r3, r4, r5, lr}
 802c05a:	4604      	mov	r4, r0
 802c05c:	4d06      	ldr	r5, [pc, #24]	@ (802c078 <_lseek_r+0x20>)
 802c05e:	4608      	mov	r0, r1
 802c060:	4611      	mov	r1, r2
 802c062:	2200      	movs	r2, #0
 802c064:	602a      	str	r2, [r5, #0]
 802c066:	461a      	mov	r2, r3
 802c068:	f7d6 fa5b 	bl	8002522 <_lseek>
 802c06c:	1c43      	adds	r3, r0, #1
 802c06e:	d102      	bne.n	802c076 <_lseek_r+0x1e>
 802c070:	682b      	ldr	r3, [r5, #0]
 802c072:	b103      	cbz	r3, 802c076 <_lseek_r+0x1e>
 802c074:	6023      	str	r3, [r4, #0]
 802c076:	bd38      	pop	{r3, r4, r5, pc}
 802c078:	2015a384 	.word	0x2015a384

0802c07c <_read_r>:
 802c07c:	b538      	push	{r3, r4, r5, lr}
 802c07e:	4604      	mov	r4, r0
 802c080:	4d06      	ldr	r5, [pc, #24]	@ (802c09c <_read_r+0x20>)
 802c082:	4608      	mov	r0, r1
 802c084:	4611      	mov	r1, r2
 802c086:	2200      	movs	r2, #0
 802c088:	602a      	str	r2, [r5, #0]
 802c08a:	461a      	mov	r2, r3
 802c08c:	f7d6 f9e9 	bl	8002462 <_read>
 802c090:	1c43      	adds	r3, r0, #1
 802c092:	d102      	bne.n	802c09a <_read_r+0x1e>
 802c094:	682b      	ldr	r3, [r5, #0]
 802c096:	b103      	cbz	r3, 802c09a <_read_r+0x1e>
 802c098:	6023      	str	r3, [r4, #0]
 802c09a:	bd38      	pop	{r3, r4, r5, pc}
 802c09c:	2015a384 	.word	0x2015a384

0802c0a0 <_kill_r>:
 802c0a0:	b538      	push	{r3, r4, r5, lr}
 802c0a2:	2300      	movs	r3, #0
 802c0a4:	4d06      	ldr	r5, [pc, #24]	@ (802c0c0 <_kill_r+0x20>)
 802c0a6:	4604      	mov	r4, r0
 802c0a8:	4608      	mov	r0, r1
 802c0aa:	4611      	mov	r1, r2
 802c0ac:	602b      	str	r3, [r5, #0]
 802c0ae:	f7d6 f9bd 	bl	800242c <_kill>
 802c0b2:	1c43      	adds	r3, r0, #1
 802c0b4:	d102      	bne.n	802c0bc <_kill_r+0x1c>
 802c0b6:	682b      	ldr	r3, [r5, #0]
 802c0b8:	b103      	cbz	r3, 802c0bc <_kill_r+0x1c>
 802c0ba:	6023      	str	r3, [r4, #0]
 802c0bc:	bd38      	pop	{r3, r4, r5, pc}
 802c0be:	bf00      	nop
 802c0c0:	2015a384 	.word	0x2015a384

0802c0c4 <_getpid_r>:
 802c0c4:	f7d6 b9aa 	b.w	800241c <_getpid>

0802c0c8 <_sbrk_r>:
 802c0c8:	b538      	push	{r3, r4, r5, lr}
 802c0ca:	2300      	movs	r3, #0
 802c0cc:	4d05      	ldr	r5, [pc, #20]	@ (802c0e4 <_sbrk_r+0x1c>)
 802c0ce:	4604      	mov	r4, r0
 802c0d0:	4608      	mov	r0, r1
 802c0d2:	602b      	str	r3, [r5, #0]
 802c0d4:	f7d6 fa32 	bl	800253c <_sbrk>
 802c0d8:	1c43      	adds	r3, r0, #1
 802c0da:	d102      	bne.n	802c0e2 <_sbrk_r+0x1a>
 802c0dc:	682b      	ldr	r3, [r5, #0]
 802c0de:	b103      	cbz	r3, 802c0e2 <_sbrk_r+0x1a>
 802c0e0:	6023      	str	r3, [r4, #0]
 802c0e2:	bd38      	pop	{r3, r4, r5, pc}
 802c0e4:	2015a384 	.word	0x2015a384

0802c0e8 <_write_r>:
 802c0e8:	b538      	push	{r3, r4, r5, lr}
 802c0ea:	4604      	mov	r4, r0
 802c0ec:	4d06      	ldr	r5, [pc, #24]	@ (802c108 <_write_r+0x20>)
 802c0ee:	4608      	mov	r0, r1
 802c0f0:	4611      	mov	r1, r2
 802c0f2:	2200      	movs	r2, #0
 802c0f4:	602a      	str	r2, [r5, #0]
 802c0f6:	461a      	mov	r2, r3
 802c0f8:	f7d6 f9d0 	bl	800249c <_write>
 802c0fc:	1c43      	adds	r3, r0, #1
 802c0fe:	d102      	bne.n	802c106 <_write_r+0x1e>
 802c100:	682b      	ldr	r3, [r5, #0]
 802c102:	b103      	cbz	r3, 802c106 <_write_r+0x1e>
 802c104:	6023      	str	r3, [r4, #0]
 802c106:	bd38      	pop	{r3, r4, r5, pc}
 802c108:	2015a384 	.word	0x2015a384

0802c10c <__errno>:
 802c10c:	4b01      	ldr	r3, [pc, #4]	@ (802c114 <__errno+0x8>)
 802c10e:	6818      	ldr	r0, [r3, #0]
 802c110:	4770      	bx	lr
 802c112:	bf00      	nop
 802c114:	20000164 	.word	0x20000164

0802c118 <__libc_init_array>:
 802c118:	b570      	push	{r4, r5, r6, lr}
 802c11a:	4d0d      	ldr	r5, [pc, #52]	@ (802c150 <__libc_init_array+0x38>)
 802c11c:	2600      	movs	r6, #0
 802c11e:	4c0d      	ldr	r4, [pc, #52]	@ (802c154 <__libc_init_array+0x3c>)
 802c120:	1b64      	subs	r4, r4, r5
 802c122:	10a4      	asrs	r4, r4, #2
 802c124:	42a6      	cmp	r6, r4
 802c126:	d109      	bne.n	802c13c <__libc_init_array+0x24>
 802c128:	4d0b      	ldr	r5, [pc, #44]	@ (802c158 <__libc_init_array+0x40>)
 802c12a:	2600      	movs	r6, #0
 802c12c:	4c0b      	ldr	r4, [pc, #44]	@ (802c15c <__libc_init_array+0x44>)
 802c12e:	f000 fd75 	bl	802cc1c <_init>
 802c132:	1b64      	subs	r4, r4, r5
 802c134:	10a4      	asrs	r4, r4, #2
 802c136:	42a6      	cmp	r6, r4
 802c138:	d105      	bne.n	802c146 <__libc_init_array+0x2e>
 802c13a:	bd70      	pop	{r4, r5, r6, pc}
 802c13c:	f855 3b04 	ldr.w	r3, [r5], #4
 802c140:	3601      	adds	r6, #1
 802c142:	4798      	blx	r3
 802c144:	e7ee      	b.n	802c124 <__libc_init_array+0xc>
 802c146:	f855 3b04 	ldr.w	r3, [r5], #4
 802c14a:	3601      	adds	r6, #1
 802c14c:	4798      	blx	r3
 802c14e:	e7f2      	b.n	802c136 <__libc_init_array+0x1e>
 802c150:	08030ae0 	.word	0x08030ae0
 802c154:	08030ae0 	.word	0x08030ae0
 802c158:	08030ae0 	.word	0x08030ae0
 802c15c:	08030af4 	.word	0x08030af4

0802c160 <__retarget_lock_init_recursive>:
 802c160:	4770      	bx	lr

0802c162 <__retarget_lock_acquire_recursive>:
 802c162:	4770      	bx	lr

0802c164 <__retarget_lock_release_recursive>:
 802c164:	4770      	bx	lr

0802c166 <memcpy>:
 802c166:	440a      	add	r2, r1
 802c168:	1e43      	subs	r3, r0, #1
 802c16a:	4291      	cmp	r1, r2
 802c16c:	d100      	bne.n	802c170 <memcpy+0xa>
 802c16e:	4770      	bx	lr
 802c170:	b510      	push	{r4, lr}
 802c172:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c176:	4291      	cmp	r1, r2
 802c178:	f803 4f01 	strb.w	r4, [r3, #1]!
 802c17c:	d1f9      	bne.n	802c172 <memcpy+0xc>
 802c17e:	bd10      	pop	{r4, pc}

0802c180 <__register_exitproc>:
 802c180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c184:	4d28      	ldr	r5, [pc, #160]	@ (802c228 <__register_exitproc+0xa8>)
 802c186:	4607      	mov	r7, r0
 802c188:	4691      	mov	r9, r2
 802c18a:	460e      	mov	r6, r1
 802c18c:	6828      	ldr	r0, [r5, #0]
 802c18e:	4698      	mov	r8, r3
 802c190:	f7ff ffe7 	bl	802c162 <__retarget_lock_acquire_recursive>
 802c194:	4a25      	ldr	r2, [pc, #148]	@ (802c22c <__register_exitproc+0xac>)
 802c196:	6814      	ldr	r4, [r2, #0]
 802c198:	b93c      	cbnz	r4, 802c1aa <__register_exitproc+0x2a>
 802c19a:	4b25      	ldr	r3, [pc, #148]	@ (802c230 <__register_exitproc+0xb0>)
 802c19c:	6013      	str	r3, [r2, #0]
 802c19e:	4a25      	ldr	r2, [pc, #148]	@ (802c234 <__register_exitproc+0xb4>)
 802c1a0:	b112      	cbz	r2, 802c1a8 <__register_exitproc+0x28>
 802c1a2:	6812      	ldr	r2, [r2, #0]
 802c1a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802c1a8:	4c21      	ldr	r4, [pc, #132]	@ (802c230 <__register_exitproc+0xb0>)
 802c1aa:	6863      	ldr	r3, [r4, #4]
 802c1ac:	2b1f      	cmp	r3, #31
 802c1ae:	dd06      	ble.n	802c1be <__register_exitproc+0x3e>
 802c1b0:	6828      	ldr	r0, [r5, #0]
 802c1b2:	f7ff ffd7 	bl	802c164 <__retarget_lock_release_recursive>
 802c1b6:	f04f 30ff 	mov.w	r0, #4294967295
 802c1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c1be:	b33f      	cbz	r7, 802c210 <__register_exitproc+0x90>
 802c1c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802c1c4:	b968      	cbnz	r0, 802c1e2 <__register_exitproc+0x62>
 802c1c6:	4b1c      	ldr	r3, [pc, #112]	@ (802c238 <__register_exitproc+0xb8>)
 802c1c8:	2b00      	cmp	r3, #0
 802c1ca:	d0f1      	beq.n	802c1b0 <__register_exitproc+0x30>
 802c1cc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802c1d0:	f7ff fd16 	bl	802bc00 <malloc>
 802c1d4:	2800      	cmp	r0, #0
 802c1d6:	d0eb      	beq.n	802c1b0 <__register_exitproc+0x30>
 802c1d8:	2300      	movs	r3, #0
 802c1da:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802c1de:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802c1e2:	6863      	ldr	r3, [r4, #4]
 802c1e4:	2201      	movs	r2, #1
 802c1e6:	2f02      	cmp	r7, #2
 802c1e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802c1ec:	fa02 f203 	lsl.w	r2, r2, r3
 802c1f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802c1f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802c1f8:	ea43 0302 	orr.w	r3, r3, r2
 802c1fc:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802c200:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802c204:	bf02      	ittt	eq
 802c206:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802c20a:	4313      	orreq	r3, r2
 802c20c:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802c210:	6863      	ldr	r3, [r4, #4]
 802c212:	6828      	ldr	r0, [r5, #0]
 802c214:	1c5a      	adds	r2, r3, #1
 802c216:	3302      	adds	r3, #2
 802c218:	6062      	str	r2, [r4, #4]
 802c21a:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802c21e:	f7ff ffa1 	bl	802c164 <__retarget_lock_release_recursive>
 802c222:	2000      	movs	r0, #0
 802c224:	e7c9      	b.n	802c1ba <__register_exitproc+0x3a>
 802c226:	bf00      	nop
 802c228:	200001b4 	.word	0x200001b4
 802c22c:	2015a418 	.word	0x2015a418
 802c230:	2015a38c 	.word	0x2015a38c
 802c234:	080308d0 	.word	0x080308d0
 802c238:	0802bc01 	.word	0x0802bc01

0802c23c <_free_r>:
 802c23c:	b538      	push	{r3, r4, r5, lr}
 802c23e:	4605      	mov	r5, r0
 802c240:	2900      	cmp	r1, #0
 802c242:	d041      	beq.n	802c2c8 <_free_r+0x8c>
 802c244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c248:	1f0c      	subs	r4, r1, #4
 802c24a:	2b00      	cmp	r3, #0
 802c24c:	bfb8      	it	lt
 802c24e:	18e4      	addlt	r4, r4, r3
 802c250:	f7ff fd88 	bl	802bd64 <__malloc_lock>
 802c254:	4a1d      	ldr	r2, [pc, #116]	@ (802c2cc <_free_r+0x90>)
 802c256:	6813      	ldr	r3, [r2, #0]
 802c258:	b933      	cbnz	r3, 802c268 <_free_r+0x2c>
 802c25a:	6063      	str	r3, [r4, #4]
 802c25c:	6014      	str	r4, [r2, #0]
 802c25e:	4628      	mov	r0, r5
 802c260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c264:	f7ff bd84 	b.w	802bd70 <__malloc_unlock>
 802c268:	42a3      	cmp	r3, r4
 802c26a:	d908      	bls.n	802c27e <_free_r+0x42>
 802c26c:	6820      	ldr	r0, [r4, #0]
 802c26e:	1821      	adds	r1, r4, r0
 802c270:	428b      	cmp	r3, r1
 802c272:	bf01      	itttt	eq
 802c274:	6819      	ldreq	r1, [r3, #0]
 802c276:	685b      	ldreq	r3, [r3, #4]
 802c278:	1809      	addeq	r1, r1, r0
 802c27a:	6021      	streq	r1, [r4, #0]
 802c27c:	e7ed      	b.n	802c25a <_free_r+0x1e>
 802c27e:	461a      	mov	r2, r3
 802c280:	685b      	ldr	r3, [r3, #4]
 802c282:	b10b      	cbz	r3, 802c288 <_free_r+0x4c>
 802c284:	42a3      	cmp	r3, r4
 802c286:	d9fa      	bls.n	802c27e <_free_r+0x42>
 802c288:	6811      	ldr	r1, [r2, #0]
 802c28a:	1850      	adds	r0, r2, r1
 802c28c:	42a0      	cmp	r0, r4
 802c28e:	d10b      	bne.n	802c2a8 <_free_r+0x6c>
 802c290:	6820      	ldr	r0, [r4, #0]
 802c292:	4401      	add	r1, r0
 802c294:	1850      	adds	r0, r2, r1
 802c296:	6011      	str	r1, [r2, #0]
 802c298:	4283      	cmp	r3, r0
 802c29a:	d1e0      	bne.n	802c25e <_free_r+0x22>
 802c29c:	6818      	ldr	r0, [r3, #0]
 802c29e:	685b      	ldr	r3, [r3, #4]
 802c2a0:	4408      	add	r0, r1
 802c2a2:	6053      	str	r3, [r2, #4]
 802c2a4:	6010      	str	r0, [r2, #0]
 802c2a6:	e7da      	b.n	802c25e <_free_r+0x22>
 802c2a8:	d902      	bls.n	802c2b0 <_free_r+0x74>
 802c2aa:	230c      	movs	r3, #12
 802c2ac:	602b      	str	r3, [r5, #0]
 802c2ae:	e7d6      	b.n	802c25e <_free_r+0x22>
 802c2b0:	6820      	ldr	r0, [r4, #0]
 802c2b2:	1821      	adds	r1, r4, r0
 802c2b4:	428b      	cmp	r3, r1
 802c2b6:	bf02      	ittt	eq
 802c2b8:	6819      	ldreq	r1, [r3, #0]
 802c2ba:	685b      	ldreq	r3, [r3, #4]
 802c2bc:	1809      	addeq	r1, r1, r0
 802c2be:	6063      	str	r3, [r4, #4]
 802c2c0:	bf08      	it	eq
 802c2c2:	6021      	streq	r1, [r4, #0]
 802c2c4:	6054      	str	r4, [r2, #4]
 802c2c6:	e7ca      	b.n	802c25e <_free_r+0x22>
 802c2c8:	bd38      	pop	{r3, r4, r5, pc}
 802c2ca:	bf00      	nop
 802c2cc:	2015a244 	.word	0x2015a244

0802c2d0 <__sfputc_r>:
 802c2d0:	6893      	ldr	r3, [r2, #8]
 802c2d2:	3b01      	subs	r3, #1
 802c2d4:	2b00      	cmp	r3, #0
 802c2d6:	6093      	str	r3, [r2, #8]
 802c2d8:	b410      	push	{r4}
 802c2da:	da08      	bge.n	802c2ee <__sfputc_r+0x1e>
 802c2dc:	6994      	ldr	r4, [r2, #24]
 802c2de:	42a3      	cmp	r3, r4
 802c2e0:	db01      	blt.n	802c2e6 <__sfputc_r+0x16>
 802c2e2:	290a      	cmp	r1, #10
 802c2e4:	d103      	bne.n	802c2ee <__sfputc_r+0x1e>
 802c2e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c2ea:	f000 bb71 	b.w	802c9d0 <__swbuf_r>
 802c2ee:	6813      	ldr	r3, [r2, #0]
 802c2f0:	1c58      	adds	r0, r3, #1
 802c2f2:	6010      	str	r0, [r2, #0]
 802c2f4:	4608      	mov	r0, r1
 802c2f6:	7019      	strb	r1, [r3, #0]
 802c2f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c2fc:	4770      	bx	lr

0802c2fe <__sfputs_r>:
 802c2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c300:	4606      	mov	r6, r0
 802c302:	460f      	mov	r7, r1
 802c304:	4614      	mov	r4, r2
 802c306:	18d5      	adds	r5, r2, r3
 802c308:	42ac      	cmp	r4, r5
 802c30a:	d101      	bne.n	802c310 <__sfputs_r+0x12>
 802c30c:	2000      	movs	r0, #0
 802c30e:	e007      	b.n	802c320 <__sfputs_r+0x22>
 802c310:	463a      	mov	r2, r7
 802c312:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c316:	4630      	mov	r0, r6
 802c318:	f7ff ffda 	bl	802c2d0 <__sfputc_r>
 802c31c:	1c43      	adds	r3, r0, #1
 802c31e:	d1f3      	bne.n	802c308 <__sfputs_r+0xa>
 802c320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c324 <_vfiprintf_r>:
 802c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c328:	460d      	mov	r5, r1
 802c32a:	b09d      	sub	sp, #116	@ 0x74
 802c32c:	4614      	mov	r4, r2
 802c32e:	4698      	mov	r8, r3
 802c330:	4606      	mov	r6, r0
 802c332:	b118      	cbz	r0, 802c33c <_vfiprintf_r+0x18>
 802c334:	6a03      	ldr	r3, [r0, #32]
 802c336:	b90b      	cbnz	r3, 802c33c <_vfiprintf_r+0x18>
 802c338:	f7ff fdba 	bl	802beb0 <__sinit>
 802c33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c33e:	07d9      	lsls	r1, r3, #31
 802c340:	d405      	bmi.n	802c34e <_vfiprintf_r+0x2a>
 802c342:	89ab      	ldrh	r3, [r5, #12]
 802c344:	059a      	lsls	r2, r3, #22
 802c346:	d402      	bmi.n	802c34e <_vfiprintf_r+0x2a>
 802c348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c34a:	f7ff ff0a 	bl	802c162 <__retarget_lock_acquire_recursive>
 802c34e:	89ab      	ldrh	r3, [r5, #12]
 802c350:	071b      	lsls	r3, r3, #28
 802c352:	d501      	bpl.n	802c358 <_vfiprintf_r+0x34>
 802c354:	692b      	ldr	r3, [r5, #16]
 802c356:	b99b      	cbnz	r3, 802c380 <_vfiprintf_r+0x5c>
 802c358:	4629      	mov	r1, r5
 802c35a:	4630      	mov	r0, r6
 802c35c:	f000 fb76 	bl	802ca4c <__swsetup_r>
 802c360:	b170      	cbz	r0, 802c380 <_vfiprintf_r+0x5c>
 802c362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c364:	07dc      	lsls	r4, r3, #31
 802c366:	d504      	bpl.n	802c372 <_vfiprintf_r+0x4e>
 802c368:	f04f 30ff 	mov.w	r0, #4294967295
 802c36c:	b01d      	add	sp, #116	@ 0x74
 802c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c372:	89ab      	ldrh	r3, [r5, #12]
 802c374:	0598      	lsls	r0, r3, #22
 802c376:	d4f7      	bmi.n	802c368 <_vfiprintf_r+0x44>
 802c378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c37a:	f7ff fef3 	bl	802c164 <__retarget_lock_release_recursive>
 802c37e:	e7f3      	b.n	802c368 <_vfiprintf_r+0x44>
 802c380:	2300      	movs	r3, #0
 802c382:	f8cd 800c 	str.w	r8, [sp, #12]
 802c386:	f04f 0901 	mov.w	r9, #1
 802c38a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802c540 <_vfiprintf_r+0x21c>
 802c38e:	9309      	str	r3, [sp, #36]	@ 0x24
 802c390:	2320      	movs	r3, #32
 802c392:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802c396:	2330      	movs	r3, #48	@ 0x30
 802c398:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802c39c:	4623      	mov	r3, r4
 802c39e:	469a      	mov	sl, r3
 802c3a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c3a4:	b10a      	cbz	r2, 802c3aa <_vfiprintf_r+0x86>
 802c3a6:	2a25      	cmp	r2, #37	@ 0x25
 802c3a8:	d1f9      	bne.n	802c39e <_vfiprintf_r+0x7a>
 802c3aa:	ebba 0b04 	subs.w	fp, sl, r4
 802c3ae:	d00b      	beq.n	802c3c8 <_vfiprintf_r+0xa4>
 802c3b0:	465b      	mov	r3, fp
 802c3b2:	4622      	mov	r2, r4
 802c3b4:	4629      	mov	r1, r5
 802c3b6:	4630      	mov	r0, r6
 802c3b8:	f7ff ffa1 	bl	802c2fe <__sfputs_r>
 802c3bc:	3001      	adds	r0, #1
 802c3be:	f000 80a7 	beq.w	802c510 <_vfiprintf_r+0x1ec>
 802c3c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802c3c4:	445a      	add	r2, fp
 802c3c6:	9209      	str	r2, [sp, #36]	@ 0x24
 802c3c8:	f89a 3000 	ldrb.w	r3, [sl]
 802c3cc:	2b00      	cmp	r3, #0
 802c3ce:	f000 809f 	beq.w	802c510 <_vfiprintf_r+0x1ec>
 802c3d2:	2300      	movs	r3, #0
 802c3d4:	f04f 32ff 	mov.w	r2, #4294967295
 802c3d8:	f10a 0a01 	add.w	sl, sl, #1
 802c3dc:	9304      	str	r3, [sp, #16]
 802c3de:	9307      	str	r3, [sp, #28]
 802c3e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802c3e4:	931a      	str	r3, [sp, #104]	@ 0x68
 802c3e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c3ea:	4654      	mov	r4, sl
 802c3ec:	2205      	movs	r2, #5
 802c3ee:	4854      	ldr	r0, [pc, #336]	@ (802c540 <_vfiprintf_r+0x21c>)
 802c3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c3f4:	f000 fb80 	bl	802caf8 <memchr>
 802c3f8:	9a04      	ldr	r2, [sp, #16]
 802c3fa:	b9d8      	cbnz	r0, 802c434 <_vfiprintf_r+0x110>
 802c3fc:	06d1      	lsls	r1, r2, #27
 802c3fe:	bf44      	itt	mi
 802c400:	2320      	movmi	r3, #32
 802c402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c406:	0713      	lsls	r3, r2, #28
 802c408:	bf44      	itt	mi
 802c40a:	232b      	movmi	r3, #43	@ 0x2b
 802c40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802c410:	f89a 3000 	ldrb.w	r3, [sl]
 802c414:	2b2a      	cmp	r3, #42	@ 0x2a
 802c416:	d015      	beq.n	802c444 <_vfiprintf_r+0x120>
 802c418:	9a07      	ldr	r2, [sp, #28]
 802c41a:	4654      	mov	r4, sl
 802c41c:	2000      	movs	r0, #0
 802c41e:	f04f 0c0a 	mov.w	ip, #10
 802c422:	4621      	mov	r1, r4
 802c424:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c428:	3b30      	subs	r3, #48	@ 0x30
 802c42a:	2b09      	cmp	r3, #9
 802c42c:	d94b      	bls.n	802c4c6 <_vfiprintf_r+0x1a2>
 802c42e:	b1b0      	cbz	r0, 802c45e <_vfiprintf_r+0x13a>
 802c430:	9207      	str	r2, [sp, #28]
 802c432:	e014      	b.n	802c45e <_vfiprintf_r+0x13a>
 802c434:	eba0 0308 	sub.w	r3, r0, r8
 802c438:	46a2      	mov	sl, r4
 802c43a:	fa09 f303 	lsl.w	r3, r9, r3
 802c43e:	4313      	orrs	r3, r2
 802c440:	9304      	str	r3, [sp, #16]
 802c442:	e7d2      	b.n	802c3ea <_vfiprintf_r+0xc6>
 802c444:	9b03      	ldr	r3, [sp, #12]
 802c446:	1d19      	adds	r1, r3, #4
 802c448:	681b      	ldr	r3, [r3, #0]
 802c44a:	2b00      	cmp	r3, #0
 802c44c:	9103      	str	r1, [sp, #12]
 802c44e:	bfbb      	ittet	lt
 802c450:	425b      	neglt	r3, r3
 802c452:	f042 0202 	orrlt.w	r2, r2, #2
 802c456:	9307      	strge	r3, [sp, #28]
 802c458:	9307      	strlt	r3, [sp, #28]
 802c45a:	bfb8      	it	lt
 802c45c:	9204      	strlt	r2, [sp, #16]
 802c45e:	7823      	ldrb	r3, [r4, #0]
 802c460:	2b2e      	cmp	r3, #46	@ 0x2e
 802c462:	d10a      	bne.n	802c47a <_vfiprintf_r+0x156>
 802c464:	7863      	ldrb	r3, [r4, #1]
 802c466:	2b2a      	cmp	r3, #42	@ 0x2a
 802c468:	d132      	bne.n	802c4d0 <_vfiprintf_r+0x1ac>
 802c46a:	9b03      	ldr	r3, [sp, #12]
 802c46c:	3402      	adds	r4, #2
 802c46e:	1d1a      	adds	r2, r3, #4
 802c470:	681b      	ldr	r3, [r3, #0]
 802c472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802c476:	9203      	str	r2, [sp, #12]
 802c478:	9305      	str	r3, [sp, #20]
 802c47a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802c550 <_vfiprintf_r+0x22c>
 802c47e:	2203      	movs	r2, #3
 802c480:	7821      	ldrb	r1, [r4, #0]
 802c482:	4650      	mov	r0, sl
 802c484:	f000 fb38 	bl	802caf8 <memchr>
 802c488:	b138      	cbz	r0, 802c49a <_vfiprintf_r+0x176>
 802c48a:	eba0 000a 	sub.w	r0, r0, sl
 802c48e:	2240      	movs	r2, #64	@ 0x40
 802c490:	9b04      	ldr	r3, [sp, #16]
 802c492:	3401      	adds	r4, #1
 802c494:	4082      	lsls	r2, r0
 802c496:	4313      	orrs	r3, r2
 802c498:	9304      	str	r3, [sp, #16]
 802c49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c49e:	2206      	movs	r2, #6
 802c4a0:	4828      	ldr	r0, [pc, #160]	@ (802c544 <_vfiprintf_r+0x220>)
 802c4a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802c4a6:	f000 fb27 	bl	802caf8 <memchr>
 802c4aa:	2800      	cmp	r0, #0
 802c4ac:	d03f      	beq.n	802c52e <_vfiprintf_r+0x20a>
 802c4ae:	4b26      	ldr	r3, [pc, #152]	@ (802c548 <_vfiprintf_r+0x224>)
 802c4b0:	bb1b      	cbnz	r3, 802c4fa <_vfiprintf_r+0x1d6>
 802c4b2:	9b03      	ldr	r3, [sp, #12]
 802c4b4:	3307      	adds	r3, #7
 802c4b6:	f023 0307 	bic.w	r3, r3, #7
 802c4ba:	3308      	adds	r3, #8
 802c4bc:	9303      	str	r3, [sp, #12]
 802c4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c4c0:	443b      	add	r3, r7
 802c4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 802c4c4:	e76a      	b.n	802c39c <_vfiprintf_r+0x78>
 802c4c6:	fb0c 3202 	mla	r2, ip, r2, r3
 802c4ca:	460c      	mov	r4, r1
 802c4cc:	2001      	movs	r0, #1
 802c4ce:	e7a8      	b.n	802c422 <_vfiprintf_r+0xfe>
 802c4d0:	2300      	movs	r3, #0
 802c4d2:	3401      	adds	r4, #1
 802c4d4:	f04f 0c0a 	mov.w	ip, #10
 802c4d8:	4619      	mov	r1, r3
 802c4da:	9305      	str	r3, [sp, #20]
 802c4dc:	4620      	mov	r0, r4
 802c4de:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c4e2:	3a30      	subs	r2, #48	@ 0x30
 802c4e4:	2a09      	cmp	r2, #9
 802c4e6:	d903      	bls.n	802c4f0 <_vfiprintf_r+0x1cc>
 802c4e8:	2b00      	cmp	r3, #0
 802c4ea:	d0c6      	beq.n	802c47a <_vfiprintf_r+0x156>
 802c4ec:	9105      	str	r1, [sp, #20]
 802c4ee:	e7c4      	b.n	802c47a <_vfiprintf_r+0x156>
 802c4f0:	fb0c 2101 	mla	r1, ip, r1, r2
 802c4f4:	4604      	mov	r4, r0
 802c4f6:	2301      	movs	r3, #1
 802c4f8:	e7f0      	b.n	802c4dc <_vfiprintf_r+0x1b8>
 802c4fa:	ab03      	add	r3, sp, #12
 802c4fc:	462a      	mov	r2, r5
 802c4fe:	a904      	add	r1, sp, #16
 802c500:	4630      	mov	r0, r6
 802c502:	9300      	str	r3, [sp, #0]
 802c504:	4b11      	ldr	r3, [pc, #68]	@ (802c54c <_vfiprintf_r+0x228>)
 802c506:	f3af 8000 	nop.w
 802c50a:	4607      	mov	r7, r0
 802c50c:	1c78      	adds	r0, r7, #1
 802c50e:	d1d6      	bne.n	802c4be <_vfiprintf_r+0x19a>
 802c510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802c512:	07d9      	lsls	r1, r3, #31
 802c514:	d405      	bmi.n	802c522 <_vfiprintf_r+0x1fe>
 802c516:	89ab      	ldrh	r3, [r5, #12]
 802c518:	059a      	lsls	r2, r3, #22
 802c51a:	d402      	bmi.n	802c522 <_vfiprintf_r+0x1fe>
 802c51c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802c51e:	f7ff fe21 	bl	802c164 <__retarget_lock_release_recursive>
 802c522:	89ab      	ldrh	r3, [r5, #12]
 802c524:	065b      	lsls	r3, r3, #25
 802c526:	f53f af1f 	bmi.w	802c368 <_vfiprintf_r+0x44>
 802c52a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c52c:	e71e      	b.n	802c36c <_vfiprintf_r+0x48>
 802c52e:	ab03      	add	r3, sp, #12
 802c530:	462a      	mov	r2, r5
 802c532:	a904      	add	r1, sp, #16
 802c534:	4630      	mov	r0, r6
 802c536:	9300      	str	r3, [sp, #0]
 802c538:	4b04      	ldr	r3, [pc, #16]	@ (802c54c <_vfiprintf_r+0x228>)
 802c53a:	f000 f87d 	bl	802c638 <_printf_i>
 802c53e:	e7e4      	b.n	802c50a <_vfiprintf_r+0x1e6>
 802c540:	080308d4 	.word	0x080308d4
 802c544:	080308de 	.word	0x080308de
 802c548:	00000000 	.word	0x00000000
 802c54c:	0802c2ff 	.word	0x0802c2ff
 802c550:	080308da 	.word	0x080308da

0802c554 <_printf_common>:
 802c554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c558:	4616      	mov	r6, r2
 802c55a:	4698      	mov	r8, r3
 802c55c:	688a      	ldr	r2, [r1, #8]
 802c55e:	4607      	mov	r7, r0
 802c560:	690b      	ldr	r3, [r1, #16]
 802c562:	460c      	mov	r4, r1
 802c564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802c568:	4293      	cmp	r3, r2
 802c56a:	bfb8      	it	lt
 802c56c:	4613      	movlt	r3, r2
 802c56e:	6033      	str	r3, [r6, #0]
 802c570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802c574:	b10a      	cbz	r2, 802c57a <_printf_common+0x26>
 802c576:	3301      	adds	r3, #1
 802c578:	6033      	str	r3, [r6, #0]
 802c57a:	6823      	ldr	r3, [r4, #0]
 802c57c:	0699      	lsls	r1, r3, #26
 802c57e:	bf42      	ittt	mi
 802c580:	6833      	ldrmi	r3, [r6, #0]
 802c582:	3302      	addmi	r3, #2
 802c584:	6033      	strmi	r3, [r6, #0]
 802c586:	6825      	ldr	r5, [r4, #0]
 802c588:	f015 0506 	ands.w	r5, r5, #6
 802c58c:	d106      	bne.n	802c59c <_printf_common+0x48>
 802c58e:	f104 0a19 	add.w	sl, r4, #25
 802c592:	68e3      	ldr	r3, [r4, #12]
 802c594:	6832      	ldr	r2, [r6, #0]
 802c596:	1a9b      	subs	r3, r3, r2
 802c598:	42ab      	cmp	r3, r5
 802c59a:	dc2b      	bgt.n	802c5f4 <_printf_common+0xa0>
 802c59c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802c5a0:	6822      	ldr	r2, [r4, #0]
 802c5a2:	3b00      	subs	r3, #0
 802c5a4:	bf18      	it	ne
 802c5a6:	2301      	movne	r3, #1
 802c5a8:	0692      	lsls	r2, r2, #26
 802c5aa:	d430      	bmi.n	802c60e <_printf_common+0xba>
 802c5ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802c5b0:	4641      	mov	r1, r8
 802c5b2:	4638      	mov	r0, r7
 802c5b4:	47c8      	blx	r9
 802c5b6:	3001      	adds	r0, #1
 802c5b8:	d023      	beq.n	802c602 <_printf_common+0xae>
 802c5ba:	6823      	ldr	r3, [r4, #0]
 802c5bc:	341a      	adds	r4, #26
 802c5be:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802c5c2:	f003 0306 	and.w	r3, r3, #6
 802c5c6:	2b04      	cmp	r3, #4
 802c5c8:	bf0a      	itet	eq
 802c5ca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802c5ce:	2500      	movne	r5, #0
 802c5d0:	6833      	ldreq	r3, [r6, #0]
 802c5d2:	f04f 0600 	mov.w	r6, #0
 802c5d6:	bf08      	it	eq
 802c5d8:	1aed      	subeq	r5, r5, r3
 802c5da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802c5de:	bf08      	it	eq
 802c5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c5e4:	4293      	cmp	r3, r2
 802c5e6:	bfc4      	itt	gt
 802c5e8:	1a9b      	subgt	r3, r3, r2
 802c5ea:	18ed      	addgt	r5, r5, r3
 802c5ec:	42b5      	cmp	r5, r6
 802c5ee:	d11a      	bne.n	802c626 <_printf_common+0xd2>
 802c5f0:	2000      	movs	r0, #0
 802c5f2:	e008      	b.n	802c606 <_printf_common+0xb2>
 802c5f4:	2301      	movs	r3, #1
 802c5f6:	4652      	mov	r2, sl
 802c5f8:	4641      	mov	r1, r8
 802c5fa:	4638      	mov	r0, r7
 802c5fc:	47c8      	blx	r9
 802c5fe:	3001      	adds	r0, #1
 802c600:	d103      	bne.n	802c60a <_printf_common+0xb6>
 802c602:	f04f 30ff 	mov.w	r0, #4294967295
 802c606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c60a:	3501      	adds	r5, #1
 802c60c:	e7c1      	b.n	802c592 <_printf_common+0x3e>
 802c60e:	18e1      	adds	r1, r4, r3
 802c610:	1c5a      	adds	r2, r3, #1
 802c612:	2030      	movs	r0, #48	@ 0x30
 802c614:	3302      	adds	r3, #2
 802c616:	4422      	add	r2, r4
 802c618:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802c61c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802c620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802c624:	e7c2      	b.n	802c5ac <_printf_common+0x58>
 802c626:	2301      	movs	r3, #1
 802c628:	4622      	mov	r2, r4
 802c62a:	4641      	mov	r1, r8
 802c62c:	4638      	mov	r0, r7
 802c62e:	47c8      	blx	r9
 802c630:	3001      	adds	r0, #1
 802c632:	d0e6      	beq.n	802c602 <_printf_common+0xae>
 802c634:	3601      	adds	r6, #1
 802c636:	e7d9      	b.n	802c5ec <_printf_common+0x98>

0802c638 <_printf_i>:
 802c638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c63c:	7e0f      	ldrb	r7, [r1, #24]
 802c63e:	4691      	mov	r9, r2
 802c640:	4680      	mov	r8, r0
 802c642:	460c      	mov	r4, r1
 802c644:	2f78      	cmp	r7, #120	@ 0x78
 802c646:	469a      	mov	sl, r3
 802c648:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802c64a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802c64e:	d807      	bhi.n	802c660 <_printf_i+0x28>
 802c650:	2f62      	cmp	r7, #98	@ 0x62
 802c652:	d80a      	bhi.n	802c66a <_printf_i+0x32>
 802c654:	2f00      	cmp	r7, #0
 802c656:	f000 80d2 	beq.w	802c7fe <_printf_i+0x1c6>
 802c65a:	2f58      	cmp	r7, #88	@ 0x58
 802c65c:	f000 80b9 	beq.w	802c7d2 <_printf_i+0x19a>
 802c660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802c668:	e03a      	b.n	802c6e0 <_printf_i+0xa8>
 802c66a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802c66e:	2b15      	cmp	r3, #21
 802c670:	d8f6      	bhi.n	802c660 <_printf_i+0x28>
 802c672:	a101      	add	r1, pc, #4	@ (adr r1, 802c678 <_printf_i+0x40>)
 802c674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c678:	0802c6d1 	.word	0x0802c6d1
 802c67c:	0802c6e5 	.word	0x0802c6e5
 802c680:	0802c661 	.word	0x0802c661
 802c684:	0802c661 	.word	0x0802c661
 802c688:	0802c661 	.word	0x0802c661
 802c68c:	0802c661 	.word	0x0802c661
 802c690:	0802c6e5 	.word	0x0802c6e5
 802c694:	0802c661 	.word	0x0802c661
 802c698:	0802c661 	.word	0x0802c661
 802c69c:	0802c661 	.word	0x0802c661
 802c6a0:	0802c661 	.word	0x0802c661
 802c6a4:	0802c7e5 	.word	0x0802c7e5
 802c6a8:	0802c70f 	.word	0x0802c70f
 802c6ac:	0802c79f 	.word	0x0802c79f
 802c6b0:	0802c661 	.word	0x0802c661
 802c6b4:	0802c661 	.word	0x0802c661
 802c6b8:	0802c807 	.word	0x0802c807
 802c6bc:	0802c661 	.word	0x0802c661
 802c6c0:	0802c70f 	.word	0x0802c70f
 802c6c4:	0802c661 	.word	0x0802c661
 802c6c8:	0802c661 	.word	0x0802c661
 802c6cc:	0802c7a7 	.word	0x0802c7a7
 802c6d0:	6833      	ldr	r3, [r6, #0]
 802c6d2:	1d1a      	adds	r2, r3, #4
 802c6d4:	681b      	ldr	r3, [r3, #0]
 802c6d6:	6032      	str	r2, [r6, #0]
 802c6d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802c6dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802c6e0:	2301      	movs	r3, #1
 802c6e2:	e09d      	b.n	802c820 <_printf_i+0x1e8>
 802c6e4:	6833      	ldr	r3, [r6, #0]
 802c6e6:	6820      	ldr	r0, [r4, #0]
 802c6e8:	1d19      	adds	r1, r3, #4
 802c6ea:	6031      	str	r1, [r6, #0]
 802c6ec:	0606      	lsls	r6, r0, #24
 802c6ee:	d501      	bpl.n	802c6f4 <_printf_i+0xbc>
 802c6f0:	681d      	ldr	r5, [r3, #0]
 802c6f2:	e003      	b.n	802c6fc <_printf_i+0xc4>
 802c6f4:	0645      	lsls	r5, r0, #25
 802c6f6:	d5fb      	bpl.n	802c6f0 <_printf_i+0xb8>
 802c6f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 802c6fc:	2d00      	cmp	r5, #0
 802c6fe:	da03      	bge.n	802c708 <_printf_i+0xd0>
 802c700:	232d      	movs	r3, #45	@ 0x2d
 802c702:	426d      	negs	r5, r5
 802c704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c708:	4859      	ldr	r0, [pc, #356]	@ (802c870 <_printf_i+0x238>)
 802c70a:	230a      	movs	r3, #10
 802c70c:	e011      	b.n	802c732 <_printf_i+0xfa>
 802c70e:	6821      	ldr	r1, [r4, #0]
 802c710:	6833      	ldr	r3, [r6, #0]
 802c712:	0608      	lsls	r0, r1, #24
 802c714:	f853 5b04 	ldr.w	r5, [r3], #4
 802c718:	d402      	bmi.n	802c720 <_printf_i+0xe8>
 802c71a:	0649      	lsls	r1, r1, #25
 802c71c:	bf48      	it	mi
 802c71e:	b2ad      	uxthmi	r5, r5
 802c720:	2f6f      	cmp	r7, #111	@ 0x6f
 802c722:	6033      	str	r3, [r6, #0]
 802c724:	4852      	ldr	r0, [pc, #328]	@ (802c870 <_printf_i+0x238>)
 802c726:	bf14      	ite	ne
 802c728:	230a      	movne	r3, #10
 802c72a:	2308      	moveq	r3, #8
 802c72c:	2100      	movs	r1, #0
 802c72e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802c732:	6866      	ldr	r6, [r4, #4]
 802c734:	2e00      	cmp	r6, #0
 802c736:	60a6      	str	r6, [r4, #8]
 802c738:	bfa2      	ittt	ge
 802c73a:	6821      	ldrge	r1, [r4, #0]
 802c73c:	f021 0104 	bicge.w	r1, r1, #4
 802c740:	6021      	strge	r1, [r4, #0]
 802c742:	b90d      	cbnz	r5, 802c748 <_printf_i+0x110>
 802c744:	2e00      	cmp	r6, #0
 802c746:	d04b      	beq.n	802c7e0 <_printf_i+0x1a8>
 802c748:	4616      	mov	r6, r2
 802c74a:	fbb5 f1f3 	udiv	r1, r5, r3
 802c74e:	fb03 5711 	mls	r7, r3, r1, r5
 802c752:	5dc7      	ldrb	r7, [r0, r7]
 802c754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802c758:	462f      	mov	r7, r5
 802c75a:	460d      	mov	r5, r1
 802c75c:	42bb      	cmp	r3, r7
 802c75e:	d9f4      	bls.n	802c74a <_printf_i+0x112>
 802c760:	2b08      	cmp	r3, #8
 802c762:	d10b      	bne.n	802c77c <_printf_i+0x144>
 802c764:	6823      	ldr	r3, [r4, #0]
 802c766:	07df      	lsls	r7, r3, #31
 802c768:	d508      	bpl.n	802c77c <_printf_i+0x144>
 802c76a:	6923      	ldr	r3, [r4, #16]
 802c76c:	6861      	ldr	r1, [r4, #4]
 802c76e:	4299      	cmp	r1, r3
 802c770:	bfde      	ittt	le
 802c772:	2330      	movle	r3, #48	@ 0x30
 802c774:	f806 3c01 	strble.w	r3, [r6, #-1]
 802c778:	f106 36ff 	addle.w	r6, r6, #4294967295
 802c77c:	1b92      	subs	r2, r2, r6
 802c77e:	6122      	str	r2, [r4, #16]
 802c780:	464b      	mov	r3, r9
 802c782:	aa03      	add	r2, sp, #12
 802c784:	4621      	mov	r1, r4
 802c786:	4640      	mov	r0, r8
 802c788:	f8cd a000 	str.w	sl, [sp]
 802c78c:	f7ff fee2 	bl	802c554 <_printf_common>
 802c790:	3001      	adds	r0, #1
 802c792:	d14a      	bne.n	802c82a <_printf_i+0x1f2>
 802c794:	f04f 30ff 	mov.w	r0, #4294967295
 802c798:	b004      	add	sp, #16
 802c79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c79e:	6823      	ldr	r3, [r4, #0]
 802c7a0:	f043 0320 	orr.w	r3, r3, #32
 802c7a4:	6023      	str	r3, [r4, #0]
 802c7a6:	2778      	movs	r7, #120	@ 0x78
 802c7a8:	4832      	ldr	r0, [pc, #200]	@ (802c874 <_printf_i+0x23c>)
 802c7aa:	6823      	ldr	r3, [r4, #0]
 802c7ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802c7b0:	061f      	lsls	r7, r3, #24
 802c7b2:	6831      	ldr	r1, [r6, #0]
 802c7b4:	f851 5b04 	ldr.w	r5, [r1], #4
 802c7b8:	d402      	bmi.n	802c7c0 <_printf_i+0x188>
 802c7ba:	065f      	lsls	r7, r3, #25
 802c7bc:	bf48      	it	mi
 802c7be:	b2ad      	uxthmi	r5, r5
 802c7c0:	6031      	str	r1, [r6, #0]
 802c7c2:	07d9      	lsls	r1, r3, #31
 802c7c4:	bf44      	itt	mi
 802c7c6:	f043 0320 	orrmi.w	r3, r3, #32
 802c7ca:	6023      	strmi	r3, [r4, #0]
 802c7cc:	b11d      	cbz	r5, 802c7d6 <_printf_i+0x19e>
 802c7ce:	2310      	movs	r3, #16
 802c7d0:	e7ac      	b.n	802c72c <_printf_i+0xf4>
 802c7d2:	4827      	ldr	r0, [pc, #156]	@ (802c870 <_printf_i+0x238>)
 802c7d4:	e7e9      	b.n	802c7aa <_printf_i+0x172>
 802c7d6:	6823      	ldr	r3, [r4, #0]
 802c7d8:	f023 0320 	bic.w	r3, r3, #32
 802c7dc:	6023      	str	r3, [r4, #0]
 802c7de:	e7f6      	b.n	802c7ce <_printf_i+0x196>
 802c7e0:	4616      	mov	r6, r2
 802c7e2:	e7bd      	b.n	802c760 <_printf_i+0x128>
 802c7e4:	6833      	ldr	r3, [r6, #0]
 802c7e6:	6825      	ldr	r5, [r4, #0]
 802c7e8:	1d18      	adds	r0, r3, #4
 802c7ea:	6961      	ldr	r1, [r4, #20]
 802c7ec:	6030      	str	r0, [r6, #0]
 802c7ee:	062e      	lsls	r6, r5, #24
 802c7f0:	681b      	ldr	r3, [r3, #0]
 802c7f2:	d501      	bpl.n	802c7f8 <_printf_i+0x1c0>
 802c7f4:	6019      	str	r1, [r3, #0]
 802c7f6:	e002      	b.n	802c7fe <_printf_i+0x1c6>
 802c7f8:	0668      	lsls	r0, r5, #25
 802c7fa:	d5fb      	bpl.n	802c7f4 <_printf_i+0x1bc>
 802c7fc:	8019      	strh	r1, [r3, #0]
 802c7fe:	2300      	movs	r3, #0
 802c800:	4616      	mov	r6, r2
 802c802:	6123      	str	r3, [r4, #16]
 802c804:	e7bc      	b.n	802c780 <_printf_i+0x148>
 802c806:	6833      	ldr	r3, [r6, #0]
 802c808:	2100      	movs	r1, #0
 802c80a:	1d1a      	adds	r2, r3, #4
 802c80c:	6032      	str	r2, [r6, #0]
 802c80e:	681e      	ldr	r6, [r3, #0]
 802c810:	6862      	ldr	r2, [r4, #4]
 802c812:	4630      	mov	r0, r6
 802c814:	f000 f970 	bl	802caf8 <memchr>
 802c818:	b108      	cbz	r0, 802c81e <_printf_i+0x1e6>
 802c81a:	1b80      	subs	r0, r0, r6
 802c81c:	6060      	str	r0, [r4, #4]
 802c81e:	6863      	ldr	r3, [r4, #4]
 802c820:	6123      	str	r3, [r4, #16]
 802c822:	2300      	movs	r3, #0
 802c824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802c828:	e7aa      	b.n	802c780 <_printf_i+0x148>
 802c82a:	6923      	ldr	r3, [r4, #16]
 802c82c:	4632      	mov	r2, r6
 802c82e:	4649      	mov	r1, r9
 802c830:	4640      	mov	r0, r8
 802c832:	47d0      	blx	sl
 802c834:	3001      	adds	r0, #1
 802c836:	d0ad      	beq.n	802c794 <_printf_i+0x15c>
 802c838:	6823      	ldr	r3, [r4, #0]
 802c83a:	079b      	lsls	r3, r3, #30
 802c83c:	d413      	bmi.n	802c866 <_printf_i+0x22e>
 802c83e:	68e0      	ldr	r0, [r4, #12]
 802c840:	9b03      	ldr	r3, [sp, #12]
 802c842:	4298      	cmp	r0, r3
 802c844:	bfb8      	it	lt
 802c846:	4618      	movlt	r0, r3
 802c848:	e7a6      	b.n	802c798 <_printf_i+0x160>
 802c84a:	2301      	movs	r3, #1
 802c84c:	4632      	mov	r2, r6
 802c84e:	4649      	mov	r1, r9
 802c850:	4640      	mov	r0, r8
 802c852:	47d0      	blx	sl
 802c854:	3001      	adds	r0, #1
 802c856:	d09d      	beq.n	802c794 <_printf_i+0x15c>
 802c858:	3501      	adds	r5, #1
 802c85a:	68e3      	ldr	r3, [r4, #12]
 802c85c:	9903      	ldr	r1, [sp, #12]
 802c85e:	1a5b      	subs	r3, r3, r1
 802c860:	42ab      	cmp	r3, r5
 802c862:	dcf2      	bgt.n	802c84a <_printf_i+0x212>
 802c864:	e7eb      	b.n	802c83e <_printf_i+0x206>
 802c866:	2500      	movs	r5, #0
 802c868:	f104 0619 	add.w	r6, r4, #25
 802c86c:	e7f5      	b.n	802c85a <_printf_i+0x222>
 802c86e:	bf00      	nop
 802c870:	080308e5 	.word	0x080308e5
 802c874:	080308f6 	.word	0x080308f6

0802c878 <__sflush_r>:
 802c878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c880:	0716      	lsls	r6, r2, #28
 802c882:	4605      	mov	r5, r0
 802c884:	460c      	mov	r4, r1
 802c886:	d454      	bmi.n	802c932 <__sflush_r+0xba>
 802c888:	684b      	ldr	r3, [r1, #4]
 802c88a:	2b00      	cmp	r3, #0
 802c88c:	dc02      	bgt.n	802c894 <__sflush_r+0x1c>
 802c88e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802c890:	2b00      	cmp	r3, #0
 802c892:	dd48      	ble.n	802c926 <__sflush_r+0xae>
 802c894:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c896:	2e00      	cmp	r6, #0
 802c898:	d045      	beq.n	802c926 <__sflush_r+0xae>
 802c89a:	2300      	movs	r3, #0
 802c89c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802c8a0:	682f      	ldr	r7, [r5, #0]
 802c8a2:	6a21      	ldr	r1, [r4, #32]
 802c8a4:	602b      	str	r3, [r5, #0]
 802c8a6:	d030      	beq.n	802c90a <__sflush_r+0x92>
 802c8a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802c8aa:	89a3      	ldrh	r3, [r4, #12]
 802c8ac:	0759      	lsls	r1, r3, #29
 802c8ae:	d505      	bpl.n	802c8bc <__sflush_r+0x44>
 802c8b0:	6863      	ldr	r3, [r4, #4]
 802c8b2:	1ad2      	subs	r2, r2, r3
 802c8b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802c8b6:	b10b      	cbz	r3, 802c8bc <__sflush_r+0x44>
 802c8b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802c8ba:	1ad2      	subs	r2, r2, r3
 802c8bc:	2300      	movs	r3, #0
 802c8be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802c8c0:	6a21      	ldr	r1, [r4, #32]
 802c8c2:	4628      	mov	r0, r5
 802c8c4:	47b0      	blx	r6
 802c8c6:	1c43      	adds	r3, r0, #1
 802c8c8:	89a3      	ldrh	r3, [r4, #12]
 802c8ca:	d106      	bne.n	802c8da <__sflush_r+0x62>
 802c8cc:	6829      	ldr	r1, [r5, #0]
 802c8ce:	291d      	cmp	r1, #29
 802c8d0:	d82b      	bhi.n	802c92a <__sflush_r+0xb2>
 802c8d2:	4a2a      	ldr	r2, [pc, #168]	@ (802c97c <__sflush_r+0x104>)
 802c8d4:	410a      	asrs	r2, r1
 802c8d6:	07d6      	lsls	r6, r2, #31
 802c8d8:	d427      	bmi.n	802c92a <__sflush_r+0xb2>
 802c8da:	2200      	movs	r2, #0
 802c8dc:	04d9      	lsls	r1, r3, #19
 802c8de:	6062      	str	r2, [r4, #4]
 802c8e0:	6922      	ldr	r2, [r4, #16]
 802c8e2:	6022      	str	r2, [r4, #0]
 802c8e4:	d504      	bpl.n	802c8f0 <__sflush_r+0x78>
 802c8e6:	1c42      	adds	r2, r0, #1
 802c8e8:	d101      	bne.n	802c8ee <__sflush_r+0x76>
 802c8ea:	682b      	ldr	r3, [r5, #0]
 802c8ec:	b903      	cbnz	r3, 802c8f0 <__sflush_r+0x78>
 802c8ee:	6560      	str	r0, [r4, #84]	@ 0x54
 802c8f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802c8f2:	602f      	str	r7, [r5, #0]
 802c8f4:	b1b9      	cbz	r1, 802c926 <__sflush_r+0xae>
 802c8f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802c8fa:	4299      	cmp	r1, r3
 802c8fc:	d002      	beq.n	802c904 <__sflush_r+0x8c>
 802c8fe:	4628      	mov	r0, r5
 802c900:	f7ff fc9c 	bl	802c23c <_free_r>
 802c904:	2300      	movs	r3, #0
 802c906:	6363      	str	r3, [r4, #52]	@ 0x34
 802c908:	e00d      	b.n	802c926 <__sflush_r+0xae>
 802c90a:	2301      	movs	r3, #1
 802c90c:	4628      	mov	r0, r5
 802c90e:	47b0      	blx	r6
 802c910:	4602      	mov	r2, r0
 802c912:	1c50      	adds	r0, r2, #1
 802c914:	d1c9      	bne.n	802c8aa <__sflush_r+0x32>
 802c916:	682b      	ldr	r3, [r5, #0]
 802c918:	2b00      	cmp	r3, #0
 802c91a:	d0c6      	beq.n	802c8aa <__sflush_r+0x32>
 802c91c:	2b1d      	cmp	r3, #29
 802c91e:	d001      	beq.n	802c924 <__sflush_r+0xac>
 802c920:	2b16      	cmp	r3, #22
 802c922:	d11d      	bne.n	802c960 <__sflush_r+0xe8>
 802c924:	602f      	str	r7, [r5, #0]
 802c926:	2000      	movs	r0, #0
 802c928:	e021      	b.n	802c96e <__sflush_r+0xf6>
 802c92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c92e:	b21b      	sxth	r3, r3
 802c930:	e01a      	b.n	802c968 <__sflush_r+0xf0>
 802c932:	690f      	ldr	r7, [r1, #16]
 802c934:	2f00      	cmp	r7, #0
 802c936:	d0f6      	beq.n	802c926 <__sflush_r+0xae>
 802c938:	0793      	lsls	r3, r2, #30
 802c93a:	680e      	ldr	r6, [r1, #0]
 802c93c:	600f      	str	r7, [r1, #0]
 802c93e:	bf0c      	ite	eq
 802c940:	694b      	ldreq	r3, [r1, #20]
 802c942:	2300      	movne	r3, #0
 802c944:	eba6 0807 	sub.w	r8, r6, r7
 802c948:	608b      	str	r3, [r1, #8]
 802c94a:	f1b8 0f00 	cmp.w	r8, #0
 802c94e:	ddea      	ble.n	802c926 <__sflush_r+0xae>
 802c950:	4643      	mov	r3, r8
 802c952:	463a      	mov	r2, r7
 802c954:	6a21      	ldr	r1, [r4, #32]
 802c956:	4628      	mov	r0, r5
 802c958:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802c95a:	47b0      	blx	r6
 802c95c:	2800      	cmp	r0, #0
 802c95e:	dc08      	bgt.n	802c972 <__sflush_r+0xfa>
 802c960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802c968:	f04f 30ff 	mov.w	r0, #4294967295
 802c96c:	81a3      	strh	r3, [r4, #12]
 802c96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c972:	4407      	add	r7, r0
 802c974:	eba8 0800 	sub.w	r8, r8, r0
 802c978:	e7e7      	b.n	802c94a <__sflush_r+0xd2>
 802c97a:	bf00      	nop
 802c97c:	dfbffffe 	.word	0xdfbffffe

0802c980 <_fflush_r>:
 802c980:	b538      	push	{r3, r4, r5, lr}
 802c982:	690b      	ldr	r3, [r1, #16]
 802c984:	4605      	mov	r5, r0
 802c986:	460c      	mov	r4, r1
 802c988:	b913      	cbnz	r3, 802c990 <_fflush_r+0x10>
 802c98a:	2500      	movs	r5, #0
 802c98c:	4628      	mov	r0, r5
 802c98e:	bd38      	pop	{r3, r4, r5, pc}
 802c990:	b118      	cbz	r0, 802c99a <_fflush_r+0x1a>
 802c992:	6a03      	ldr	r3, [r0, #32]
 802c994:	b90b      	cbnz	r3, 802c99a <_fflush_r+0x1a>
 802c996:	f7ff fa8b 	bl	802beb0 <__sinit>
 802c99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c99e:	2b00      	cmp	r3, #0
 802c9a0:	d0f3      	beq.n	802c98a <_fflush_r+0xa>
 802c9a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802c9a4:	07d0      	lsls	r0, r2, #31
 802c9a6:	d404      	bmi.n	802c9b2 <_fflush_r+0x32>
 802c9a8:	0599      	lsls	r1, r3, #22
 802c9aa:	d402      	bmi.n	802c9b2 <_fflush_r+0x32>
 802c9ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c9ae:	f7ff fbd8 	bl	802c162 <__retarget_lock_acquire_recursive>
 802c9b2:	4628      	mov	r0, r5
 802c9b4:	4621      	mov	r1, r4
 802c9b6:	f7ff ff5f 	bl	802c878 <__sflush_r>
 802c9ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c9bc:	4605      	mov	r5, r0
 802c9be:	07da      	lsls	r2, r3, #31
 802c9c0:	d4e4      	bmi.n	802c98c <_fflush_r+0xc>
 802c9c2:	89a3      	ldrh	r3, [r4, #12]
 802c9c4:	059b      	lsls	r3, r3, #22
 802c9c6:	d4e1      	bmi.n	802c98c <_fflush_r+0xc>
 802c9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c9ca:	f7ff fbcb 	bl	802c164 <__retarget_lock_release_recursive>
 802c9ce:	e7dd      	b.n	802c98c <_fflush_r+0xc>

0802c9d0 <__swbuf_r>:
 802c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c9d2:	460e      	mov	r6, r1
 802c9d4:	4614      	mov	r4, r2
 802c9d6:	4605      	mov	r5, r0
 802c9d8:	b118      	cbz	r0, 802c9e2 <__swbuf_r+0x12>
 802c9da:	6a03      	ldr	r3, [r0, #32]
 802c9dc:	b90b      	cbnz	r3, 802c9e2 <__swbuf_r+0x12>
 802c9de:	f7ff fa67 	bl	802beb0 <__sinit>
 802c9e2:	69a3      	ldr	r3, [r4, #24]
 802c9e4:	60a3      	str	r3, [r4, #8]
 802c9e6:	89a3      	ldrh	r3, [r4, #12]
 802c9e8:	071a      	lsls	r2, r3, #28
 802c9ea:	d501      	bpl.n	802c9f0 <__swbuf_r+0x20>
 802c9ec:	6923      	ldr	r3, [r4, #16]
 802c9ee:	b943      	cbnz	r3, 802ca02 <__swbuf_r+0x32>
 802c9f0:	4621      	mov	r1, r4
 802c9f2:	4628      	mov	r0, r5
 802c9f4:	f000 f82a 	bl	802ca4c <__swsetup_r>
 802c9f8:	b118      	cbz	r0, 802ca02 <__swbuf_r+0x32>
 802c9fa:	f04f 37ff 	mov.w	r7, #4294967295
 802c9fe:	4638      	mov	r0, r7
 802ca00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ca02:	6823      	ldr	r3, [r4, #0]
 802ca04:	b2f6      	uxtb	r6, r6
 802ca06:	6922      	ldr	r2, [r4, #16]
 802ca08:	4637      	mov	r7, r6
 802ca0a:	1a98      	subs	r0, r3, r2
 802ca0c:	6963      	ldr	r3, [r4, #20]
 802ca0e:	4283      	cmp	r3, r0
 802ca10:	dc05      	bgt.n	802ca1e <__swbuf_r+0x4e>
 802ca12:	4621      	mov	r1, r4
 802ca14:	4628      	mov	r0, r5
 802ca16:	f7ff ffb3 	bl	802c980 <_fflush_r>
 802ca1a:	2800      	cmp	r0, #0
 802ca1c:	d1ed      	bne.n	802c9fa <__swbuf_r+0x2a>
 802ca1e:	68a3      	ldr	r3, [r4, #8]
 802ca20:	3b01      	subs	r3, #1
 802ca22:	60a3      	str	r3, [r4, #8]
 802ca24:	6823      	ldr	r3, [r4, #0]
 802ca26:	1c5a      	adds	r2, r3, #1
 802ca28:	6022      	str	r2, [r4, #0]
 802ca2a:	701e      	strb	r6, [r3, #0]
 802ca2c:	1c43      	adds	r3, r0, #1
 802ca2e:	6962      	ldr	r2, [r4, #20]
 802ca30:	429a      	cmp	r2, r3
 802ca32:	d004      	beq.n	802ca3e <__swbuf_r+0x6e>
 802ca34:	89a3      	ldrh	r3, [r4, #12]
 802ca36:	07db      	lsls	r3, r3, #31
 802ca38:	d5e1      	bpl.n	802c9fe <__swbuf_r+0x2e>
 802ca3a:	2e0a      	cmp	r6, #10
 802ca3c:	d1df      	bne.n	802c9fe <__swbuf_r+0x2e>
 802ca3e:	4621      	mov	r1, r4
 802ca40:	4628      	mov	r0, r5
 802ca42:	f7ff ff9d 	bl	802c980 <_fflush_r>
 802ca46:	2800      	cmp	r0, #0
 802ca48:	d0d9      	beq.n	802c9fe <__swbuf_r+0x2e>
 802ca4a:	e7d6      	b.n	802c9fa <__swbuf_r+0x2a>

0802ca4c <__swsetup_r>:
 802ca4c:	b538      	push	{r3, r4, r5, lr}
 802ca4e:	4b29      	ldr	r3, [pc, #164]	@ (802caf4 <__swsetup_r+0xa8>)
 802ca50:	4605      	mov	r5, r0
 802ca52:	460c      	mov	r4, r1
 802ca54:	6818      	ldr	r0, [r3, #0]
 802ca56:	b118      	cbz	r0, 802ca60 <__swsetup_r+0x14>
 802ca58:	6a03      	ldr	r3, [r0, #32]
 802ca5a:	b90b      	cbnz	r3, 802ca60 <__swsetup_r+0x14>
 802ca5c:	f7ff fa28 	bl	802beb0 <__sinit>
 802ca60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ca64:	0719      	lsls	r1, r3, #28
 802ca66:	d422      	bmi.n	802caae <__swsetup_r+0x62>
 802ca68:	06da      	lsls	r2, r3, #27
 802ca6a:	d407      	bmi.n	802ca7c <__swsetup_r+0x30>
 802ca6c:	2209      	movs	r2, #9
 802ca6e:	602a      	str	r2, [r5, #0]
 802ca70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ca74:	f04f 30ff 	mov.w	r0, #4294967295
 802ca78:	81a3      	strh	r3, [r4, #12]
 802ca7a:	e033      	b.n	802cae4 <__swsetup_r+0x98>
 802ca7c:	0758      	lsls	r0, r3, #29
 802ca7e:	d512      	bpl.n	802caa6 <__swsetup_r+0x5a>
 802ca80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ca82:	b141      	cbz	r1, 802ca96 <__swsetup_r+0x4a>
 802ca84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802ca88:	4299      	cmp	r1, r3
 802ca8a:	d002      	beq.n	802ca92 <__swsetup_r+0x46>
 802ca8c:	4628      	mov	r0, r5
 802ca8e:	f7ff fbd5 	bl	802c23c <_free_r>
 802ca92:	2300      	movs	r3, #0
 802ca94:	6363      	str	r3, [r4, #52]	@ 0x34
 802ca96:	89a3      	ldrh	r3, [r4, #12]
 802ca98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802ca9c:	81a3      	strh	r3, [r4, #12]
 802ca9e:	2300      	movs	r3, #0
 802caa0:	6063      	str	r3, [r4, #4]
 802caa2:	6923      	ldr	r3, [r4, #16]
 802caa4:	6023      	str	r3, [r4, #0]
 802caa6:	89a3      	ldrh	r3, [r4, #12]
 802caa8:	f043 0308 	orr.w	r3, r3, #8
 802caac:	81a3      	strh	r3, [r4, #12]
 802caae:	6923      	ldr	r3, [r4, #16]
 802cab0:	b94b      	cbnz	r3, 802cac6 <__swsetup_r+0x7a>
 802cab2:	89a3      	ldrh	r3, [r4, #12]
 802cab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802cab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802cabc:	d003      	beq.n	802cac6 <__swsetup_r+0x7a>
 802cabe:	4621      	mov	r1, r4
 802cac0:	4628      	mov	r0, r5
 802cac2:	f000 f84c 	bl	802cb5e <__smakebuf_r>
 802cac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802caca:	f013 0201 	ands.w	r2, r3, #1
 802cace:	d00a      	beq.n	802cae6 <__swsetup_r+0x9a>
 802cad0:	2200      	movs	r2, #0
 802cad2:	60a2      	str	r2, [r4, #8]
 802cad4:	6962      	ldr	r2, [r4, #20]
 802cad6:	4252      	negs	r2, r2
 802cad8:	61a2      	str	r2, [r4, #24]
 802cada:	6922      	ldr	r2, [r4, #16]
 802cadc:	b942      	cbnz	r2, 802caf0 <__swsetup_r+0xa4>
 802cade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802cae2:	d1c5      	bne.n	802ca70 <__swsetup_r+0x24>
 802cae4:	bd38      	pop	{r3, r4, r5, pc}
 802cae6:	0799      	lsls	r1, r3, #30
 802cae8:	bf58      	it	pl
 802caea:	6962      	ldrpl	r2, [r4, #20]
 802caec:	60a2      	str	r2, [r4, #8]
 802caee:	e7f4      	b.n	802cada <__swsetup_r+0x8e>
 802caf0:	2000      	movs	r0, #0
 802caf2:	e7f7      	b.n	802cae4 <__swsetup_r+0x98>
 802caf4:	20000164 	.word	0x20000164

0802caf8 <memchr>:
 802caf8:	b2c9      	uxtb	r1, r1
 802cafa:	4603      	mov	r3, r0
 802cafc:	4402      	add	r2, r0
 802cafe:	b510      	push	{r4, lr}
 802cb00:	4293      	cmp	r3, r2
 802cb02:	4618      	mov	r0, r3
 802cb04:	d101      	bne.n	802cb0a <memchr+0x12>
 802cb06:	2000      	movs	r0, #0
 802cb08:	e003      	b.n	802cb12 <memchr+0x1a>
 802cb0a:	7804      	ldrb	r4, [r0, #0]
 802cb0c:	3301      	adds	r3, #1
 802cb0e:	428c      	cmp	r4, r1
 802cb10:	d1f6      	bne.n	802cb00 <memchr+0x8>
 802cb12:	bd10      	pop	{r4, pc}

0802cb14 <__swhatbuf_r>:
 802cb14:	b570      	push	{r4, r5, r6, lr}
 802cb16:	460c      	mov	r4, r1
 802cb18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cb1c:	b096      	sub	sp, #88	@ 0x58
 802cb1e:	4615      	mov	r5, r2
 802cb20:	2900      	cmp	r1, #0
 802cb22:	461e      	mov	r6, r3
 802cb24:	da0c      	bge.n	802cb40 <__swhatbuf_r+0x2c>
 802cb26:	89a3      	ldrh	r3, [r4, #12]
 802cb28:	2100      	movs	r1, #0
 802cb2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802cb2e:	bf14      	ite	ne
 802cb30:	2340      	movne	r3, #64	@ 0x40
 802cb32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802cb36:	2000      	movs	r0, #0
 802cb38:	6031      	str	r1, [r6, #0]
 802cb3a:	602b      	str	r3, [r5, #0]
 802cb3c:	b016      	add	sp, #88	@ 0x58
 802cb3e:	bd70      	pop	{r4, r5, r6, pc}
 802cb40:	466a      	mov	r2, sp
 802cb42:	f000 f849 	bl	802cbd8 <_fstat_r>
 802cb46:	2800      	cmp	r0, #0
 802cb48:	dbed      	blt.n	802cb26 <__swhatbuf_r+0x12>
 802cb4a:	9901      	ldr	r1, [sp, #4]
 802cb4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802cb50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802cb54:	4259      	negs	r1, r3
 802cb56:	4159      	adcs	r1, r3
 802cb58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802cb5c:	e7eb      	b.n	802cb36 <__swhatbuf_r+0x22>

0802cb5e <__smakebuf_r>:
 802cb5e:	898b      	ldrh	r3, [r1, #12]
 802cb60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802cb62:	079d      	lsls	r5, r3, #30
 802cb64:	4606      	mov	r6, r0
 802cb66:	460c      	mov	r4, r1
 802cb68:	d507      	bpl.n	802cb7a <__smakebuf_r+0x1c>
 802cb6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802cb6e:	6023      	str	r3, [r4, #0]
 802cb70:	6123      	str	r3, [r4, #16]
 802cb72:	2301      	movs	r3, #1
 802cb74:	6163      	str	r3, [r4, #20]
 802cb76:	b003      	add	sp, #12
 802cb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cb7a:	ab01      	add	r3, sp, #4
 802cb7c:	466a      	mov	r2, sp
 802cb7e:	f7ff ffc9 	bl	802cb14 <__swhatbuf_r>
 802cb82:	9f00      	ldr	r7, [sp, #0]
 802cb84:	4605      	mov	r5, r0
 802cb86:	4630      	mov	r0, r6
 802cb88:	4639      	mov	r1, r7
 802cb8a:	f7ff f86b 	bl	802bc64 <_malloc_r>
 802cb8e:	b948      	cbnz	r0, 802cba4 <__smakebuf_r+0x46>
 802cb90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802cb94:	059a      	lsls	r2, r3, #22
 802cb96:	d4ee      	bmi.n	802cb76 <__smakebuf_r+0x18>
 802cb98:	f023 0303 	bic.w	r3, r3, #3
 802cb9c:	f043 0302 	orr.w	r3, r3, #2
 802cba0:	81a3      	strh	r3, [r4, #12]
 802cba2:	e7e2      	b.n	802cb6a <__smakebuf_r+0xc>
 802cba4:	89a3      	ldrh	r3, [r4, #12]
 802cba6:	6020      	str	r0, [r4, #0]
 802cba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802cbac:	81a3      	strh	r3, [r4, #12]
 802cbae:	9b01      	ldr	r3, [sp, #4]
 802cbb0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802cbb4:	b15b      	cbz	r3, 802cbce <__smakebuf_r+0x70>
 802cbb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802cbba:	4630      	mov	r0, r6
 802cbbc:	f000 f81e 	bl	802cbfc <_isatty_r>
 802cbc0:	b128      	cbz	r0, 802cbce <__smakebuf_r+0x70>
 802cbc2:	89a3      	ldrh	r3, [r4, #12]
 802cbc4:	f023 0303 	bic.w	r3, r3, #3
 802cbc8:	f043 0301 	orr.w	r3, r3, #1
 802cbcc:	81a3      	strh	r3, [r4, #12]
 802cbce:	89a3      	ldrh	r3, [r4, #12]
 802cbd0:	431d      	orrs	r5, r3
 802cbd2:	81a5      	strh	r5, [r4, #12]
 802cbd4:	e7cf      	b.n	802cb76 <__smakebuf_r+0x18>
	...

0802cbd8 <_fstat_r>:
 802cbd8:	b538      	push	{r3, r4, r5, lr}
 802cbda:	2300      	movs	r3, #0
 802cbdc:	4d06      	ldr	r5, [pc, #24]	@ (802cbf8 <_fstat_r+0x20>)
 802cbde:	4604      	mov	r4, r0
 802cbe0:	4608      	mov	r0, r1
 802cbe2:	4611      	mov	r1, r2
 802cbe4:	602b      	str	r3, [r5, #0]
 802cbe6:	f7d5 fc81 	bl	80024ec <_fstat>
 802cbea:	1c43      	adds	r3, r0, #1
 802cbec:	d102      	bne.n	802cbf4 <_fstat_r+0x1c>
 802cbee:	682b      	ldr	r3, [r5, #0]
 802cbf0:	b103      	cbz	r3, 802cbf4 <_fstat_r+0x1c>
 802cbf2:	6023      	str	r3, [r4, #0]
 802cbf4:	bd38      	pop	{r3, r4, r5, pc}
 802cbf6:	bf00      	nop
 802cbf8:	2015a384 	.word	0x2015a384

0802cbfc <_isatty_r>:
 802cbfc:	b538      	push	{r3, r4, r5, lr}
 802cbfe:	2300      	movs	r3, #0
 802cc00:	4d05      	ldr	r5, [pc, #20]	@ (802cc18 <_isatty_r+0x1c>)
 802cc02:	4604      	mov	r4, r0
 802cc04:	4608      	mov	r0, r1
 802cc06:	602b      	str	r3, [r5, #0]
 802cc08:	f7d5 fc80 	bl	800250c <_isatty>
 802cc0c:	1c43      	adds	r3, r0, #1
 802cc0e:	d102      	bne.n	802cc16 <_isatty_r+0x1a>
 802cc10:	682b      	ldr	r3, [r5, #0]
 802cc12:	b103      	cbz	r3, 802cc16 <_isatty_r+0x1a>
 802cc14:	6023      	str	r3, [r4, #0]
 802cc16:	bd38      	pop	{r3, r4, r5, pc}
 802cc18:	2015a384 	.word	0x2015a384

0802cc1c <_init>:
 802cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cc1e:	bf00      	nop
 802cc20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cc22:	bc08      	pop	{r3}
 802cc24:	469e      	mov	lr, r3
 802cc26:	4770      	bx	lr

0802cc28 <_fini>:
 802cc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cc2a:	bf00      	nop
 802cc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cc2e:	bc08      	pop	{r3}
 802cc30:	469e      	mov	lr, r3
 802cc32:	4770      	bx	lr
