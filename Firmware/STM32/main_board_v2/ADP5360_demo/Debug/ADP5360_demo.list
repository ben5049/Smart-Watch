
ADP5360_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000026c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e058  08000270  08000270  00010270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800e2c8  0800e2c8  0001e2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e3c8  0800e3c8  0001e3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e3d0  0800e3d0  0001e3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e3d4  0800e3d4  0001e3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800e3d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000848  2000000c  0800e3e1  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000854  0800e3e1  00020854  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031083  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000525e  00000000  00000000  00051105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002890  00000000  00000000  00056368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f9c  00000000  00000000  00058bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045004  00000000  00000000  0005ab94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00035f0e  00000000  00000000  0009fb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a27cf  00000000  00000000  000d5aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b200  00000000  00000000  00278278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  00283478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000270 <__do_global_dtors_aux>:
 8000270:	b510      	push	{r4, lr}
 8000272:	4c05      	ldr	r4, [pc, #20]	; (8000288 <__do_global_dtors_aux+0x18>)
 8000274:	7823      	ldrb	r3, [r4, #0]
 8000276:	b933      	cbnz	r3, 8000286 <__do_global_dtors_aux+0x16>
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__do_global_dtors_aux+0x1c>)
 800027a:	b113      	cbz	r3, 8000282 <__do_global_dtors_aux+0x12>
 800027c:	4804      	ldr	r0, [pc, #16]	; (8000290 <__do_global_dtors_aux+0x20>)
 800027e:	f3af 8000 	nop.w
 8000282:	2301      	movs	r3, #1
 8000284:	7023      	strb	r3, [r4, #0]
 8000286:	bd10      	pop	{r4, pc}
 8000288:	2000000c 	.word	0x2000000c
 800028c:	00000000 	.word	0x00000000
 8000290:	0800e2b0 	.word	0x0800e2b0

08000294 <frame_dummy>:
 8000294:	b508      	push	{r3, lr}
 8000296:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <frame_dummy+0x10>)
 8000298:	b11b      	cbz	r3, 80002a2 <frame_dummy+0xe>
 800029a:	4903      	ldr	r1, [pc, #12]	; (80002a8 <frame_dummy+0x14>)
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <frame_dummy+0x18>)
 800029e:	f3af 8000 	nop.w
 80002a2:	bd08      	pop	{r3, pc}
 80002a4:	00000000 	.word	0x00000000
 80002a8:	20000010 	.word	0x20000010
 80002ac:	0800e2b0 	.word	0x0800e2b0

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b982 	b.w	8000bd8 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80008f2:	460d      	mov	r5, r1
 80008f4:	4604      	mov	r4, r0
 80008f6:	460f      	mov	r7, r1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d146      	bne.n	800098a <__udivmoddi4+0x9e>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4694      	mov	ip, r2
 8000900:	d95e      	bls.n	80009c0 <__udivmoddi4+0xd4>
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	b143      	cbz	r3, 800091a <__udivmoddi4+0x2e>
 8000908:	fa02 fc03 	lsl.w	ip, r2, r3
 800090c:	f1c3 0220 	rsb	r2, r3, #32
 8000910:	409f      	lsls	r7, r3
 8000912:	409c      	lsls	r4, r3
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	4317      	orrs	r7, r2
 800091a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800091e:	fa1f f58c 	uxth.w	r5, ip
 8000922:	0c22      	lsrs	r2, r4, #16
 8000924:	fbb7 f1fe 	udiv	r1, r7, lr
 8000928:	fb0e 7711 	mls	r7, lr, r1, r7
 800092c:	fb01 f005 	mul.w	r0, r1, r5
 8000930:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000934:	4290      	cmp	r0, r2
 8000936:	d908      	bls.n	800094a <__udivmoddi4+0x5e>
 8000938:	eb1c 0202 	adds.w	r2, ip, r2
 800093c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x5c>
 8000942:	4290      	cmp	r0, r2
 8000944:	f200 8134 	bhi.w	8000bb0 <__udivmoddi4+0x2c4>
 8000948:	4639      	mov	r1, r7
 800094a:	1a12      	subs	r2, r2, r0
 800094c:	b2a4      	uxth	r4, r4
 800094e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000952:	fb0e 2210 	mls	r2, lr, r0, r2
 8000956:	fb00 f505 	mul.w	r5, r0, r5
 800095a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800095e:	42a5      	cmp	r5, r4
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x88>
 8000962:	eb1c 0404 	adds.w	r4, ip, r4
 8000966:	f100 32ff 	add.w	r2, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x86>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f200 8119 	bhi.w	8000ba4 <__udivmoddi4+0x2b8>
 8000972:	4610      	mov	r0, r2
 8000974:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	2100      	movs	r1, #0
 800097c:	b11e      	cbz	r6, 8000986 <__udivmoddi4+0x9a>
 800097e:	40dc      	lsrs	r4, r3
 8000980:	2300      	movs	r3, #0
 8000982:	e9c6 4300 	strd	r4, r3, [r6]
 8000986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800098a:	428b      	cmp	r3, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0xb4>
 800098e:	2e00      	cmp	r6, #0
 8000990:	f000 80fc 	beq.w	8000b8c <__udivmoddi4+0x2a0>
 8000994:	2100      	movs	r1, #0
 8000996:	e9c6 0500 	strd	r0, r5, [r6]
 800099a:	4608      	mov	r0, r1
 800099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a0:	fab3 f183 	clz	r1, r3
 80009a4:	2900      	cmp	r1, #0
 80009a6:	d14c      	bne.n	8000a42 <__udivmoddi4+0x156>
 80009a8:	42ab      	cmp	r3, r5
 80009aa:	f0c0 80f2 	bcc.w	8000b92 <__udivmoddi4+0x2a6>
 80009ae:	4282      	cmp	r2, r0
 80009b0:	f240 80ef 	bls.w	8000b92 <__udivmoddi4+0x2a6>
 80009b4:	4608      	mov	r0, r1
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d0e5      	beq.n	8000986 <__udivmoddi4+0x9a>
 80009ba:	e9c6 4700 	strd	r4, r7, [r6]
 80009be:	e7e2      	b.n	8000986 <__udivmoddi4+0x9a>
 80009c0:	b902      	cbnz	r2, 80009c4 <__udivmoddi4+0xd8>
 80009c2:	deff      	udf	#255	; 0xff
 80009c4:	fab2 f382 	clz	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f040 809f 	bne.w	8000b0c <__udivmoddi4+0x220>
 80009ce:	1a8a      	subs	r2, r1, r2
 80009d0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009d4:	fa1f f78c 	uxth.w	r7, ip
 80009d8:	2101      	movs	r1, #1
 80009da:	fbb2 f5fe 	udiv	r5, r2, lr
 80009de:	fb0e 2015 	mls	r0, lr, r5, r2
 80009e2:	0c22      	lsrs	r2, r4, #16
 80009e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009e8:	fb07 f005 	mul.w	r0, r7, r5
 80009ec:	4290      	cmp	r0, r2
 80009ee:	d90f      	bls.n	8000a10 <__udivmoddi4+0x124>
 80009f0:	eb1c 0202 	adds.w	r2, ip, r2
 80009f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80009f8:	bf2c      	ite	cs
 80009fa:	f04f 0901 	movcs.w	r9, #1
 80009fe:	f04f 0900 	movcc.w	r9, #0
 8000a02:	4290      	cmp	r0, r2
 8000a04:	d903      	bls.n	8000a0e <__udivmoddi4+0x122>
 8000a06:	f1b9 0f00 	cmp.w	r9, #0
 8000a0a:	f000 80ce 	beq.w	8000baa <__udivmoddi4+0x2be>
 8000a0e:	4645      	mov	r5, r8
 8000a10:	1a12      	subs	r2, r2, r0
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a18:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a1c:	fb00 f707 	mul.w	r7, r0, r7
 8000a20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a24:	42a7      	cmp	r7, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x14e>
 8000a28:	eb1c 0404 	adds.w	r4, ip, r4
 8000a2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a30:	d202      	bcs.n	8000a38 <__udivmoddi4+0x14c>
 8000a32:	42a7      	cmp	r7, r4
 8000a34:	f200 80b3 	bhi.w	8000b9e <__udivmoddi4+0x2b2>
 8000a38:	4610      	mov	r0, r2
 8000a3a:	1be4      	subs	r4, r4, r7
 8000a3c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a40:	e79c      	b.n	800097c <__udivmoddi4+0x90>
 8000a42:	f1c1 0420 	rsb	r4, r1, #32
 8000a46:	408b      	lsls	r3, r1
 8000a48:	fa05 fc01 	lsl.w	ip, r5, r1
 8000a4c:	fa22 f704 	lsr.w	r7, r2, r4
 8000a50:	40e5      	lsrs	r5, r4
 8000a52:	408a      	lsls	r2, r1
 8000a54:	431f      	orrs	r7, r3
 8000a56:	fa20 f304 	lsr.w	r3, r0, r4
 8000a5a:	4088      	lsls	r0, r1
 8000a5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a6c:	fbb5 fef8 	udiv	lr, r5, r8
 8000a70:	fb08 551e 	mls	r5, r8, lr, r5
 8000a74:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000a78:	fb0e f90c 	mul.w	r9, lr, ip
 8000a7c:	45a9      	cmp	r9, r5
 8000a7e:	d90e      	bls.n	8000a9e <__udivmoddi4+0x1b2>
 8000a80:	197d      	adds	r5, r7, r5
 8000a82:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a86:	bf2c      	ite	cs
 8000a88:	f04f 0b01 	movcs.w	fp, #1
 8000a8c:	f04f 0b00 	movcc.w	fp, #0
 8000a90:	45a9      	cmp	r9, r5
 8000a92:	d903      	bls.n	8000a9c <__udivmoddi4+0x1b0>
 8000a94:	f1bb 0f00 	cmp.w	fp, #0
 8000a98:	f000 808d 	beq.w	8000bb6 <__udivmoddi4+0x2ca>
 8000a9c:	46d6      	mov	lr, sl
 8000a9e:	eba5 0509 	sub.w	r5, r5, r9
 8000aa2:	fa1f f983 	uxth.w	r9, r3
 8000aa6:	fbb5 f3f8 	udiv	r3, r5, r8
 8000aaa:	fb08 5513 	mls	r5, r8, r3, r5
 8000aae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ab2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000ab6:	45ac      	cmp	ip, r5
 8000ab8:	d906      	bls.n	8000ac8 <__udivmoddi4+0x1dc>
 8000aba:	197d      	adds	r5, r7, r5
 8000abc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac0:	d201      	bcs.n	8000ac6 <__udivmoddi4+0x1da>
 8000ac2:	45ac      	cmp	ip, r5
 8000ac4:	d87e      	bhi.n	8000bc4 <__udivmoddi4+0x2d8>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000acc:	eba5 050c 	sub.w	r5, r5, ip
 8000ad0:	fba3 9802 	umull	r9, r8, r3, r2
 8000ad4:	4545      	cmp	r5, r8
 8000ad6:	46ce      	mov	lr, r9
 8000ad8:	46c4      	mov	ip, r8
 8000ada:	d302      	bcc.n	8000ae2 <__udivmoddi4+0x1f6>
 8000adc:	d106      	bne.n	8000aec <__udivmoddi4+0x200>
 8000ade:	4548      	cmp	r0, r9
 8000ae0:	d204      	bcs.n	8000aec <__udivmoddi4+0x200>
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ae8:	eb68 0c07 	sbc.w	ip, r8, r7
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d06f      	beq.n	8000bd0 <__udivmoddi4+0x2e4>
 8000af0:	ebb0 020e 	subs.w	r2, r0, lr
 8000af4:	eb65 050c 	sbc.w	r5, r5, ip
 8000af8:	40ca      	lsrs	r2, r1
 8000afa:	fa05 f404 	lsl.w	r4, r5, r4
 8000afe:	40cd      	lsrs	r5, r1
 8000b00:	4618      	mov	r0, r3
 8000b02:	4314      	orrs	r4, r2
 8000b04:	2100      	movs	r1, #0
 8000b06:	e9c6 4500 	strd	r4, r5, [r6]
 8000b0a:	e73c      	b.n	8000986 <__udivmoddi4+0x9a>
 8000b0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b10:	f1c3 0220 	rsb	r2, r3, #32
 8000b14:	4099      	lsls	r1, r3
 8000b16:	409c      	lsls	r4, r3
 8000b18:	40d5      	lsrs	r5, r2
 8000b1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b22:	fa1f f78c 	uxth.w	r7, ip
 8000b26:	fbb5 f0fe 	udiv	r0, r5, lr
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f507 	mul.w	r5, r0, r7
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	d90e      	bls.n	8000b5c <__udivmoddi4+0x270>
 8000b3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b46:	bf2c      	ite	cs
 8000b48:	f04f 0901 	movcs.w	r9, #1
 8000b4c:	f04f 0900 	movcc.w	r9, #0
 8000b50:	428d      	cmp	r5, r1
 8000b52:	d902      	bls.n	8000b5a <__udivmoddi4+0x26e>
 8000b54:	f1b9 0f00 	cmp.w	r9, #0
 8000b58:	d031      	beq.n	8000bbe <__udivmoddi4+0x2d2>
 8000b5a:	4640      	mov	r0, r8
 8000b5c:	1b49      	subs	r1, r1, r5
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	fbb1 f5fe 	udiv	r5, r1, lr
 8000b64:	fb0e 1115 	mls	r1, lr, r5, r1
 8000b68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b6c:	fb05 f107 	mul.w	r1, r5, r7
 8000b70:	4291      	cmp	r1, r2
 8000b72:	d907      	bls.n	8000b84 <__udivmoddi4+0x298>
 8000b74:	eb1c 0202 	adds.w	r2, ip, r2
 8000b78:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b7c:	d201      	bcs.n	8000b82 <__udivmoddi4+0x296>
 8000b7e:	4291      	cmp	r1, r2
 8000b80:	d823      	bhi.n	8000bca <__udivmoddi4+0x2de>
 8000b82:	4645      	mov	r5, r8
 8000b84:	1a52      	subs	r2, r2, r1
 8000b86:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b8a:	e726      	b.n	80009da <__udivmoddi4+0xee>
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	4630      	mov	r0, r6
 8000b90:	e6f9      	b.n	8000986 <__udivmoddi4+0x9a>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	e70b      	b.n	80009b6 <__udivmoddi4+0xca>
 8000b9e:	4464      	add	r4, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	e74a      	b.n	8000a3a <__udivmoddi4+0x14e>
 8000ba4:	4464      	add	r4, ip
 8000ba6:	3802      	subs	r0, #2
 8000ba8:	e6e4      	b.n	8000974 <__udivmoddi4+0x88>
 8000baa:	3d02      	subs	r5, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	e72f      	b.n	8000a10 <__udivmoddi4+0x124>
 8000bb0:	3902      	subs	r1, #2
 8000bb2:	4462      	add	r2, ip
 8000bb4:	e6c9      	b.n	800094a <__udivmoddi4+0x5e>
 8000bb6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bba:	443d      	add	r5, r7
 8000bbc:	e76f      	b.n	8000a9e <__udivmoddi4+0x1b2>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	4461      	add	r1, ip
 8000bc2:	e7cb      	b.n	8000b5c <__udivmoddi4+0x270>
 8000bc4:	3b02      	subs	r3, #2
 8000bc6:	443d      	add	r5, r7
 8000bc8:	e77e      	b.n	8000ac8 <__udivmoddi4+0x1dc>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	e7d9      	b.n	8000b84 <__udivmoddi4+0x298>
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	4631      	mov	r1, r6
 8000bd4:	e6d7      	b.n	8000986 <__udivmoddi4+0x9a>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <ADP5360_Init>:
 */

#include "ADP5360.h"


ADP5360_StatusTypeDef ADP5360_Init(ADP5360_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Assign I2C handle */
	dev->i2cHandle = i2cHandle;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	601a      	str	r2, [r3, #0]

	/* Set default values, can be changed with functions if needed */
	dev->originalBatteryCapacity = ADP5360_DEFAULT_BATTERY_CAPACITY;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bf6:	811a      	strh	r2, [r3, #8]
	dev->batterySOCACMOverflows = 0;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	729a      	strb	r2, [r3, #10]
	dev->buckVoltage = ADP5360_DEFAULT_BUCK_VOLTAGE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000c04:	821a      	strh	r2, [r3, #16]
	dev->buckBoostVoltage = ADP5360_DEFAULT_BUCK_BOOST_VOLTAGE;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000c0c:	825a      	strh	r2, [r3, #18]
	dev->chargingEnabled = false;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	711a      	strb	r2, [r3, #4]
	dev->buckEnabled = true;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2201      	movs	r2, #1
 8000c18:	751a      	strb	r2, [r3, #20]
	dev->buckBoostEnabled = false;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	755a      	strb	r2, [r3, #21]


	/* Check the manufacturer and model IDs */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_MANUFACTURER_AND_MODEL_ID, &regData);
 8000c20:	f107 030e 	add.w	r3, r7, #14
 8000c24:	461a      	mov	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fa51 	bl	80010d0 <ADP5360_ReadRegister>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <ADP5360_Init+0x60>
		return status;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	e04b      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	if (regData != ((ADP5360_MANUFACTURER_ID << 4) | (ADP5360_MODEL_ID))){
 8000c3c:	7bbb      	ldrb	r3, [r7, #14]
 8000c3e:	2b10      	cmp	r3, #16
 8000c40:	d003      	beq.n	8000c4a <ADP5360_Init+0x6e>
		status = ADP5360_ERROR_WRONG_ID;
 8000c42:	2304      	movs	r3, #4
 8000c44:	73fb      	strb	r3, [r7, #15]
		return status;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	e044      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Turn off the buck boost converter */
	status = ADP5360_DisableBuckBoost(dev);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f9c0 	bl	8000fd0 <ADP5360_DisableBuckBoost>
 8000c50:	4603      	mov	r3, r0
 8000c52:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <ADP5360_Init+0x82>
		return status;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	e03a      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Write the battery capacity */
	status = ADP5360_SetBatteryCapacity(dev, dev->originalBatteryCapacity);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	891b      	ldrh	r3, [r3, #8]
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f913 	bl	8000e90 <ADP5360_SetBatteryCapacity>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <ADP5360_Init+0x9c>
		return status;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	e02d      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Enable interrupts */
	status = ADP5360_EnableInterrupts(dev);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f9d8 	bl	800102e <ADP5360_EnableInterrupts>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <ADP5360_Init+0xb0>
		return status;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	e023      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Set charging on/off */
	status = ADP5360_UpdateCharging(dev);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 f883 	bl	8000d98 <ADP5360_UpdateCharging>
 8000c92:	4603      	mov	r3, r0
 8000c94:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <ADP5360_Init+0xc4>
		return status;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	e019      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Read the battery charge */
	status = ADP5360_GetBatteryCharge(dev);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f947 	bl	8000f34 <ADP5360_GetBatteryCharge>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <ADP5360_Init+0xd8>
		return status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	e00f      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Read the charging status/mode */
	status = ADP5360_GetChargingStatus(dev);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 f8ac 	bl	8000e12 <ADP5360_GetChargingStatus>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <ADP5360_Init+0xec>
		return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	e005      	b.n	8000cd4 <ADP5360_Init+0xf8>
	}

	/* Read the battery charger status/mode */
	status = ADP5360_GetBatteryChargerStatus(dev);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f8c1 	bl	8000e50 <ADP5360_GetBatteryChargerStatus>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	73fb      	strb	r3, [r7, #15]

	return status;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <ADP5360_EnableCharging>:

ADP5360_StatusTypeDef ADP5360_EnableCharging(ADP5360_HandleTypeDef *dev){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000ce8:	f107 030e 	add.w	r3, r7, #14
 8000cec:	461a      	mov	r2, r3
 8000cee:	2107      	movs	r1, #7
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f9ed 	bl	80010d0 <ADP5360_ReadRegister>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <ADP5360_EnableCharging+0x28>
		return status;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	e016      	b.n	8000d32 <ADP5360_EnableCharging+0x56>
	}

	/* Set the "EN_LDO" and "EN_CHG" bits high */
	regData = regData | ADP5360_BIT_EN_LDO | ADP5360_BIT_EN_CHG;
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	f043 0309 	orr.w	r3, r3, #9
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d0e:	f107 030e 	add.w	r3, r7, #14
 8000d12:	461a      	mov	r2, r3
 8000d14:	2107      	movs	r1, #7
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f9f5 	bl	8001106 <ADP5360_WriteRegister>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <ADP5360_EnableCharging+0x4e>
		return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	e003      	b.n	8000d32 <ADP5360_EnableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = true;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	711a      	strb	r2, [r3, #4]

	return status;
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <ADP5360_DisableCharging>:


ADP5360_StatusTypeDef ADP5360_DisableCharging(ADP5360_HandleTypeDef *dev){
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d46:	f107 030e 	add.w	r3, r7, #14
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f9be 	bl	80010d0 <ADP5360_ReadRegister>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <ADP5360_DisableCharging+0x28>
		return status;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	e016      	b.n	8000d90 <ADP5360_DisableCharging+0x56>
	}

	/* Set the "EN_CHG" bit low */
	regData &= ~ADP5360_BIT_EN_CHG;
 8000d62:	7bbb      	ldrb	r3, [r7, #14]
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	73bb      	strb	r3, [r7, #14]

	/* Write the "CHARGER_FUNCTION_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_CHARGER_FUNCTION_SETTING, &regData);
 8000d6c:	f107 030e 	add.w	r3, r7, #14
 8000d70:	461a      	mov	r2, r3
 8000d72:	2107      	movs	r1, #7
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f9c6 	bl	8001106 <ADP5360_WriteRegister>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <ADP5360_DisableCharging+0x4e>
		return status;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	e003      	b.n	8000d90 <ADP5360_DisableCharging+0x56>
	}

	/* Update the device struct */
	dev->chargingEnabled = false;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	711a      	strb	r2, [r3, #4]

	return status;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <ADP5360_UpdateCharging>:

ADP5360_StatusTypeDef ADP5360_UpdateCharging(ADP5360_HandleTypeDef *dev){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_PGOOD_STATUS" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_PGOOD_STATUS, &regData);
 8000da4:	f107 030e 	add.w	r3, r7, #14
 8000da8:	461a      	mov	r2, r3
 8000daa:	212f      	movs	r1, #47	; 0x2f
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f98f 	bl	80010d0 <ADP5360_ReadRegister>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <ADP5360_UpdateCharging+0x28>
		return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	e024      	b.n	8000e0a <ADP5360_UpdateCharging+0x72>
	}

	/* If VBUS present, enable charging */
	if (regData & ADP5360_BIT_VBUSOK){
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d010      	beq.n	8000dec <ADP5360_UpdateCharging+0x54>
		if (dev->chargingEnabled == false){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	791b      	ldrb	r3, [r3, #4]
 8000dce:	f083 0301 	eor.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d017      	beq.n	8000e08 <ADP5360_UpdateCharging+0x70>
			status = ADP5360_EnableCharging(dev);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff7f 	bl	8000cdc <ADP5360_EnableCharging>
 8000dde:	4603      	mov	r3, r0
 8000de0:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00f      	beq.n	8000e08 <ADP5360_UpdateCharging+0x70>
				return status;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	e00e      	b.n	8000e0a <ADP5360_UpdateCharging+0x72>
			}
		}
	}
	/* If VBUS absent, disable charging */
	else{
		if (dev->chargingEnabled == true){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	791b      	ldrb	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d009      	beq.n	8000e08 <ADP5360_UpdateCharging+0x70>
			status = ADP5360_DisableCharging(dev);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffa0 	bl	8000d3a <ADP5360_DisableCharging>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	73fb      	strb	r3, [r7, #15]
			if (status != ADP5360_OK){
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <ADP5360_UpdateCharging+0x70>
				return status;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	e000      	b.n	8000e0a <ADP5360_UpdateCharging+0x72>
			}
		}
	}

	return status;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <ADP5360_GetChargingStatus>:

ADP5360_StatusTypeDef ADP5360_GetChargingStatus(ADP5360_HandleTypeDef *dev){
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS1" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS1, &regData);
 8000e1e:	f107 030e 	add.w	r3, r7, #14
 8000e22:	461a      	mov	r2, r3
 8000e24:	2108      	movs	r1, #8
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f952 	bl	80010d0 <ADP5360_ReadRegister>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <ADP5360_GetChargingStatus+0x28>
		return status;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	e006      	b.n	8000e48 <ADP5360_GetChargingStatus+0x36>
	}

	/* Extract the "CHARGE_STATUS" bits and update the device struct */
	dev->chargeStatus = regData & ADP5360_BITS_CHARGER_STATUS;
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	715a      	strb	r2, [r3, #5]

	return status;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <ADP5360_GetBatteryChargerStatus>:

	return status;
}


ADP5360_StatusTypeDef ADP5360_GetBatteryChargerStatus(ADP5360_HandleTypeDef *dev){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_CHARGER_STATUS2" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_CHARGER_STATUS2, &regData);
 8000e5c:	f107 030e 	add.w	r3, r7, #14
 8000e60:	461a      	mov	r2, r3
 8000e62:	2109      	movs	r1, #9
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f933 	bl	80010d0 <ADP5360_ReadRegister>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <ADP5360_GetBatteryChargerStatus+0x28>
		return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	e006      	b.n	8000e86 <ADP5360_GetBatteryChargerStatus+0x36>
	}

	/* Extract the "BAT_CHG_STATUS" bits and update the device struct */
	dev->batteryChargerStatus = regData & ADP5360_BITS_BAT_CHG_STATUS;
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	719a      	strb	r2, [r3, #6]

	return status;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <ADP5360_SetBatteryCapacity>:


ADP5360_StatusTypeDef ADP5360_SetBatteryCapacity(ADP5360_HandleTypeDef *dev, uint16_t originalBatteryCapacity){
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

	/* Update the device struct */
	dev->originalBatteryCapacity = originalBatteryCapacity;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	811a      	strh	r2, [r3, #8]
	dev->effectiveBatteryCapacity = (dev->originalBatteryCapacity * (1.0 - (ADP5360_BATTERY_DEGRADATION_PER_OVERFLOW * dev->batterySOCACMOverflows)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	891b      	ldrh	r3, [r3, #8]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fc7c 	bl	80007a8 <__aeabi_i2d>
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	460d      	mov	r5, r1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a9b      	ldrb	r3, [r3, #10]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fc75 	bl	80007a8 <__aeabi_i2d>
 8000ebe:	a31b      	add	r3, pc, #108	; (adr r3, 8000f2c <ADP5360_SetBatteryCapacity+0x9c>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff f9f4 	bl	80002b0 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	f04f 0000 	mov.w	r0, #0
 8000ed0:	4915      	ldr	r1, [pc, #84]	; (8000f28 <ADP5360_SetBatteryCapacity+0x98>)
 8000ed2:	f7ff fb1b 	bl	800050c <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4620      	mov	r0, r4
 8000edc:	4629      	mov	r1, r5
 8000ede:	f7ff f9e7 	bl	80002b0 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fcc7 	bl	800087c <__aeabi_d2uiz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	819a      	strh	r2, [r3, #12]

	/* Convert  BAT_CAP (p. 46) */
	uint8_t regData = dev->effectiveBatteryCapacity / 2;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	899b      	ldrh	r3, [r3, #12]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BAT_CAP" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BAT_CAP, &regData);
 8000f02:	f107 030e 	add.w	r3, r7, #14
 8000f06:	461a      	mov	r2, r3
 8000f08:	2120      	movs	r1, #32
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f8fb 	bl	8001106 <ADP5360_WriteRegister>
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <ADP5360_SetBatteryCapacity+0x8e>
		return status;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	e000      	b.n	8000f20 <ADP5360_SetBatteryCapacity+0x90>
	}

	return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bdb0      	pop	{r4, r5, r7, pc}
 8000f28:	3ff00000 	.word	0x3ff00000
 8000f2c:	eb851eb8 	.word	0xeb851eb8
 8000f30:	3f8eb851 	.word	0x3f8eb851

08000f34 <ADP5360_GetBatteryCharge>:

	return status;

}

ADP5360_StatusTypeDef ADP5360_GetBatteryCharge(ADP5360_HandleTypeDef *dev){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BAT_SOC" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BAT_SOC, &regData);
 8000f40:	f107 030e 	add.w	r3, r7, #14
 8000f44:	461a      	mov	r2, r3
 8000f46:	2121      	movs	r1, #33	; 0x21
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f8c1 	bl	80010d0 <ADP5360_ReadRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <ADP5360_GetBatteryCharge+0x28>
		return status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	e006      	b.n	8000f6a <ADP5360_GetBatteryCharge+0x36>
	}

	/* Extract "BAT_SOC" bits and update the device struct */
	dev->batteryChargePercentage = regData & ADP5360_BITS_BAT_SOC;
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
 8000f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	71da      	strb	r2, [r3, #7]

	return status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <ADP5360_EnableBuckBoost>:

	return status;
}


ADP5360_StatusTypeDef ADP5360_EnableBuckBoost(ADP5360_HandleTypeDef *dev){
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000f7e:	f107 030e 	add.w	r3, r7, #14
 8000f82:	461a      	mov	r2, r3
 8000f84:	212b      	movs	r1, #43	; 0x2b
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f8a2 	bl	80010d0 <ADP5360_ReadRegister>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <ADP5360_EnableBuckBoost+0x28>
		return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	e016      	b.n	8000fc8 <ADP5360_EnableBuckBoost+0x56>
	}

	/* Set the "EN_BUCKBST" bit high */
	regData |= ADP5360_BIT_EN_BUCKBST;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000fa4:	f107 030e 	add.w	r3, r7, #14
 8000fa8:	461a      	mov	r2, r3
 8000faa:	212b      	movs	r1, #43	; 0x2b
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f8aa 	bl	8001106 <ADP5360_WriteRegister>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <ADP5360_EnableBuckBoost+0x4e>
		return status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	e003      	b.n	8000fc8 <ADP5360_EnableBuckBoost+0x56>
	}

	/* Update the device struct */
	dev->buckBoostEnabled = true;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	755a      	strb	r2, [r3, #21]

	return status;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <ADP5360_DisableBuckBoost>:

ADP5360_StatusTypeDef ADP5360_DisableBuckBoost(ADP5360_HandleTypeDef *dev){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8000fdc:	f107 030e 	add.w	r3, r7, #14
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	212b      	movs	r1, #43	; 0x2b
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f873 	bl	80010d0 <ADP5360_ReadRegister>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <ADP5360_DisableBuckBoost+0x28>
		return status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	e016      	b.n	8001026 <ADP5360_DisableBuckBoost+0x56>
	}

	/* Set the "EN_BUCKBST" bit low */
	regData &= ~ADP5360_BIT_EN_BUCKBST;
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_BUCK_BOOST_CONFIG" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_BUCK_BOOST_CONFIG, &regData);
 8001002:	f107 030e 	add.w	r3, r7, #14
 8001006:	461a      	mov	r2, r3
 8001008:	212b      	movs	r1, #43	; 0x2b
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f87b 	bl	8001106 <ADP5360_WriteRegister>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <ADP5360_DisableBuckBoost+0x4e>
		return status;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	e003      	b.n	8001026 <ADP5360_DisableBuckBoost+0x56>
	}

	/* Update the device struct */
	dev->buckBoostEnabled = false;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	755a      	strb	r2, [r3, #21]

	return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <ADP5360_EnableInterrupts>:

ADP5360_StatusTypeDef ADP5360_EnableInterrupts(ADP5360_HandleTypeDef *dev){
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = 0x00;
 800103a:	2300      	movs	r3, #0
 800103c:	73bb      	strb	r3, [r7, #14]

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE1" */
	regData = ADP5360_VBUS_INT | ADP5360_CHG_INT | ADP5360_BAT_INT | ADP5360_THR_INT | ADP5360_BATPRO_INT | ADP5360_ADPICHG_INT | ADP5360_SOCACM_INT | ADP5360_SOCLOW_INT;
 800103e:	23c7      	movs	r3, #199	; 0xc7
 8001040:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE1" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE1, &regData);
 8001042:	f107 030e 	add.w	r3, r7, #14
 8001046:	461a      	mov	r2, r3
 8001048:	2132      	movs	r1, #50	; 0x32
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f85b 	bl	8001106 <ADP5360_WriteRegister>
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <ADP5360_EnableInterrupts+0x30>
		return status;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	e00d      	b.n	800107a <ADP5360_EnableInterrupts+0x4c>
	}

	/* Configure "ADP5360_REG_INTERRUPT_ENABLE2" */
	regData = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	73bb      	strb	r3, [r7, #14]
	regData = ADP5360_BUCKBSTPG_INT | ADP5360_BUCKPG_INT | ADP5360_WD_INT | ADP5360_MR_INT;
 8001062:	2300      	movs	r3, #0
 8001064:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_INTERRUPT_ENABLE2" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_INTERRUPT_ENABLE2, &regData);
 8001066:	f107 030e 	add.w	r3, r7, #14
 800106a:	461a      	mov	r2, r3
 800106c:	2133      	movs	r1, #51	; 0x33
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f849 	bl	8001106 <ADP5360_WriteRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]

	return status;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <ADP5360_EnableMRShipmentMode>:
	status = ADP5360_WriteRegister(dev, ADP5360_REG_SHIPMODE, &regData);

	return status;
}

ADP5360_StatusTypeDef ADP5360_EnableMRShipmentMode(ADP5360_HandleTypeDef *dev){
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]

	ADP5360_StatusTypeDef status = ADP5360_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
	uint8_t regData;

	/* Read the "ADP5360_REG_SUPERVISORY_SETTING" register */
	status = ADP5360_ReadRegister(dev, ADP5360_REG_SUPERVISORY_SETTING, &regData);
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	461a      	mov	r2, r3
 8001094:	212d      	movs	r1, #45	; 0x2d
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f81a 	bl	80010d0 <ADP5360_ReadRegister>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
	if (status != ADP5360_OK){
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <ADP5360_EnableMRShipmentMode+0x28>
		return status;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	e00e      	b.n	80010c8 <ADP5360_EnableMRShipmentMode+0x46>
	}

	/* Set the */
	regData |= ADP5360_BIT_EN_MR_SD;
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	73bb      	strb	r3, [r7, #14]

	/* Write the "ADP5360_REG_SUPERVISORY_SETTING" register */
	status = ADP5360_WriteRegister(dev, ADP5360_REG_SUPERVISORY_SETTING, &regData);
 80010b4:	f107 030e 	add.w	r3, r7, #14
 80010b8:	461a      	mov	r2, r3
 80010ba:	212d      	movs	r1, #45	; 0x2d
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f822 	bl	8001106 <ADP5360_WriteRegister>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]

	return status;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <ADP5360_ReadRegister>:

ADP5360_StatusTypeDef ADP5360_ReadRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	460b      	mov	r3, r1
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	218c      	movs	r1, #140	; 0x8c
 80010f8:	f004 fdcc 	bl	8005c94 <HAL_I2C_Mem_Read>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <ADP5360_WriteRegister>:

ADP5360_StatusTypeDef ADP5360_WriteRegister(ADP5360_HandleTypeDef *dev, uint8_t reg, uint8_t *data){
 8001106:	b580      	push	{r7, lr}
 8001108:	b088      	sub	sp, #32
 800110a:	af04      	add	r7, sp, #16
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	460b      	mov	r3, r1
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write(dev->i2cHandle, ADP5360_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	7afb      	ldrb	r3, [r7, #11]
 800111a:	b29a      	uxth	r2, r3
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2301      	movs	r3, #1
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	218c      	movs	r1, #140	; 0x8c
 800112e:	f004 fc9d 	bl	8005a6c <HAL_I2C_Mem_Write>
 8001132:	4603      	mov	r3, r0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f002 fca0 	bl	8003a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f840 	bl	80011c8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001148:	f000 f8a8 	bl	800129c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114c:	f000 ffea 	bl	8002124 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 8001150:	f000 f922 	bl	8001398 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 8001154:	f000 f936 	bl	80013c4 <MX_DCACHE2_Init>
  MX_ICACHE_Init();
 8001158:	f000 fc28 	bl	80019ac <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 800115c:	f000 fc58 	bl	8001a10 <MX_LPUART1_UART_Init>
  MX_OCTOSPI1_Init();
 8001160:	f000 fdbe 	bl	8001ce0 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 8001164:	f000 f8f6 	bl	8001354 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001168:	f000 f942 	bl	80013f0 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800116c:	f000 f97e 	bl	800146c <MX_DSIHOST_DSI_Init>
  MX_GFXMMU_Init();
 8001170:	f000 fa78 	bl	8001664 <MX_GFXMMU_Init>
  MX_GPU2D_Init();
 8001174:	f000 fac6 	bl	8001704 <MX_GPU2D_Init>
  MX_LTDC_Init();
 8001178:	f000 fd2e 	bl	8001bd8 <MX_LTDC_Init>
  MX_RTC_Init();
 800117c:	f000 fee2 	bl	8001f44 <MX_RTC_Init>
  MX_OCTOSPI2_Init();
 8001180:	f000 fe48 	bl	8001e14 <MX_OCTOSPI2_Init>
  MX_ADF1_Init();
 8001184:	f000 f898 	bl	80012b8 <MX_ADF1_Init>
  MX_I2C1_Init();
 8001188:	f000 fad0 	bl	800172c <MX_I2C1_Init>
  MX_I2C2_Init();
 800118c:	f000 fb0e 	bl	80017ac <MX_I2C2_Init>
  MX_I2C4_Init();
 8001190:	f000 fb8c 	bl	80018ac <MX_I2C4_Init>
  MX_I2C6_Init();
 8001194:	f000 fbca 	bl	800192c <MX_I2C6_Init>
  MX_USART1_UART_Init();
 8001198:	f000 fc86 	bl	8001aa8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800119c:	f000 fcd0 	bl	8001b40 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80011a0:	f000 ff52 	bl	8002048 <MX_SPI1_Init>
  MX_I2C3_Init();
 80011a4:	f000 fb42 	bl	800182c <MX_I2C3_Init>

  /* USER CODE BEGIN 2 */
  ADP5360_Init(&hadp5360, &hi2c2);
 80011a8:	4905      	ldr	r1, [pc, #20]	; (80011c0 <main+0x84>)
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <main+0x88>)
 80011ac:	f7ff fd16 	bl	8000bdc <ADP5360_Init>
  ADP5360_EnableMRShipmentMode(&hadp5360);
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <main+0x88>)
 80011b2:	f7ff ff66 	bl	8001082 <ADP5360_EnableMRShipmentMode>
  ADP5360_EnableBuckBoost(&hadp5360);
 80011b6:	4803      	ldr	r0, [pc, #12]	; (80011c4 <main+0x88>)
 80011b8:	f7ff fedb 	bl	8000f72 <ADP5360_EnableBuckBoost>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <main+0x80>
 80011be:	bf00      	nop
 80011c0:	20000298 	.word	0x20000298
 80011c4:	200007c4 	.word	0x200007c4

080011c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09e      	sub	sp, #120	; 0x78
 80011cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	2260      	movs	r2, #96	; 0x60
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00d f83d 	bl	800e256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ec:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80011f0:	f006 ff24 	bl	800803c <HAL_PWREx_ControlVoltageScaling>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x36>
  {
    Error_Handler();
 80011fa:	f001 fa1d 	bl	8002638 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011fe:	f006 ff0d 	bl	800801c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <SystemClock_Config+0xd0>)
 8001204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <SystemClock_Config+0xd0>)
 800120a:	f023 0318 	bic.w	r3, r3, #24
 800120e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001212:	2305      	movs	r3, #5
 8001214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800121c:	2381      	movs	r3, #129	; 0x81
 800121e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001220:	2302      	movs	r3, #2
 8001222:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001224:	2303      	movs	r3, #3
 8001226:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001230:	230a      	movs	r3, #10
 8001232:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001234:	2302      	movs	r3, #2
 8001236:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001240:	230c      	movs	r3, #12
 8001242:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4618      	mov	r0, r3
 800124e:	f006 ffe1 	bl	8008214 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001258:	f001 f9ee 	bl	8002638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	231f      	movs	r3, #31
 800125e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	2303      	movs	r3, #3
 8001262:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2104      	movs	r1, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f007 fea7 	bl	8008fcc <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001284:	f001 f9d8 	bl	8002638 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001288:	f008 fa22 	bl	80096d0 <HAL_RCC_EnableCSS>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 800128c:	f00b f99e 	bl	800c5cc <HAL_RCCEx_EnableLSECSS>
}
 8001290:	bf00      	nop
 8001292:	3778      	adds	r7, #120	; 0x78
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	46020c00 	.word	0x46020c00

0800129c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80012a0:	f006 ffa8 	bl	80081f4 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80012a4:	2002      	movs	r0, #2
 80012a6:	f006 ff55 	bl	8008154 <HAL_PWREx_ConfigSupply>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80012b0:	f001 f9c2 	bl	8002638 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_ADF1_Init+0x90>)
 80012be:	4a23      	ldr	r2, [pc, #140]	; (800134c <MX_ADF1_Init+0x94>)
 80012c0:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_ADF1_Init+0x90>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_ADF1_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_ADF1_Init+0x90>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_ADF1_Init+0x90>)
 80012d8:	2210      	movs	r2, #16
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_ADF1_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_ADF1_Init+0x90>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_ADF1_Init+0x90>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80012ee:	4816      	ldr	r0, [pc, #88]	; (8001348 <MX_ADF1_Init+0x90>)
 80012f0:	f005 fd34 	bl	8006d5c <HAL_MDF_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADF1_Init+0x46>
  {
    Error_Handler();
 80012fa:	f001 f99d 	bl	8002638 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_ADF1_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_ADF1_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_ADF1_Init+0x98>)
 800130c:	2240      	movs	r2, #64	; 0x40
 800130e:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_ADF1_Init+0x98>)
 8001312:	2202      	movs	r2, #2
 8001314:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_ADF1_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_ADF1_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_ADF1_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_ADF1_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_ADF1_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <MX_ADF1_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <MX_ADF1_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000030 	.word	0x20000030
 800134c:	46024080 	.word	0x46024080
 8001350:	20000074 	.word	0x20000074

08001354 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MX_CRC_Init+0x3c>)
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <MX_CRC_Init+0x40>)
 800135c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_CRC_Init+0x3c>)
 8001360:	2200      	movs	r2, #0
 8001362:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_CRC_Init+0x3c>)
 8001366:	2200      	movs	r2, #0
 8001368:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_CRC_Init+0x3c>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_CRC_Init+0x3c>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_CRC_Init+0x3c>)
 8001378:	2201      	movs	r2, #1
 800137a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_CRC_Init+0x3c>)
 800137e:	f002 fcd3 	bl	8003d28 <HAL_CRC_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001388:	f001 f956 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200000f0 	.word	0x200000f0
 8001394:	40023000 	.word	0x40023000

08001398 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_DCACHE1_Init+0x24>)
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <MX_DCACHE1_Init+0x28>)
 80013a0:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_DCACHE1_Init+0x24>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_DCACHE1_Init+0x24>)
 80013aa:	f002 fdaf 	bl	8003f0c <HAL_DCACHE_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80013b4:	f001 f940 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000114 	.word	0x20000114
 80013c0:	40031400 	.word	0x40031400

080013c4 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_DCACHE2_Init+0x24>)
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <MX_DCACHE2_Init+0x28>)
 80013cc:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_DCACHE2_Init+0x24>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_DCACHE2_Init+0x24>)
 80013d6:	f002 fd99 	bl	8003f0c <HAL_DCACHE_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_DCACHE2_Init+0x20>
  {
    Error_Handler();
 80013e0:	f001 f92a 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000140 	.word	0x20000140
 80013ec:	40031800 	.word	0x40031800

080013f0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_DMA2D_Init+0x74>)
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <MX_DMA2D_Init+0x78>)
 80013f8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_DMA2D_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_DMA2D_Init+0x74>)
 8001402:	2201      	movs	r2, #1
 8001404:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_DMA2D_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_DMA2D_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_DMA2D_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_DMA2D_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_DMA2D_Init+0x74>)
 8001420:	2201      	movs	r2, #1
 8001422:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_DMA2D_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_DMA2D_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_DMA2D_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_DMA2D_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <MX_DMA2D_Init+0x74>)
 800143e:	f002 fe8c 	bl	800415a <HAL_DMA2D_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8001448:	f001 f8f6 	bl	8002638 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800144c:	2101      	movs	r1, #1
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_DMA2D_Init+0x74>)
 8001450:	f002 fff4 	bl	800443c <HAL_DMA2D_ConfigLayer>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 800145a:	f001 f8ed 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000016c 	.word	0x2000016c
 8001468:	4002b000 	.word	0x4002b000

0800146c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ae      	sub	sp, #184	; 0xb8
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8001472:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001484:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001488:	2224      	movs	r2, #36	; 0x24
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f00c fee2 	bl	800e256 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001492:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80014a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a8:	2234      	movs	r2, #52	; 0x34
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c fed2 	bl	800e256 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	222c      	movs	r2, #44	; 0x2c
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00c fecc 	bl	800e256 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80014be:	4b67      	ldr	r3, [pc, #412]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014c0:	4a67      	ldr	r2, [pc, #412]	; (8001660 <MX_DSIHOST_DSI_Init+0x1f4>)
 80014c2:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80014c4:	4b65      	ldr	r3, [pc, #404]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80014ca:	4b64      	ldr	r3, [pc, #400]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014cc:	2204      	movs	r2, #4
 80014ce:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80014d0:	4b62      	ldr	r3, [pc, #392]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  hdsi.Init.PHYFrequencyRange = DSI_DPHY_FRANGE_450MHZ_510MHZ;
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014d8:	2208      	movs	r2, #8
 80014da:	611a      	str	r2, [r3, #16]
  hdsi.Init.PHYLowPowerOffset = PHY_LP_OFFSSET_0_CLKP;
 80014dc:	4b5f      	ldr	r3, [pc, #380]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  PLLInit.PLLNDIV = 125;
 80014e2:	237d      	movs	r3, #125	; 0x7d
 80014e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLIDF = DSI_PLL_IN_DIV4;
 80014e8:	2304      	movs	r3, #4
 80014ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PLLInit.PLLVCORange = DSI_DPHY_VCO_FRANGE_800MHZ_1GHZ;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLChargePump = DSI_PLL_CHARGE_PUMP_2000HZ_4400HZ;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLTuning = DSI_PLL_LOOP_FILTER_2000HZ_4400HZ;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001506:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800150a:	4619      	mov	r1, r3
 800150c:	4853      	ldr	r0, [pc, #332]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 800150e:	f003 f93d 	bl	800478c <HAL_DSI_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 8001518:	f001 f88e 	bl	8002638 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800151c:	2301      	movs	r3, #1
 800151e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.HighSpeedReadTimeout = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.LowPowerReadTimeout = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.BTATimeout = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001550:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001554:	4619      	mov	r1, r3
 8001556:	4841      	ldr	r0, [pc, #260]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001558:	f003 fdc8 	bl	80050ec <HAL_DSI_ConfigHostTimeouts>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_DSIHOST_DSI_Init+0xfa>
  {
    Error_Handler();
 8001562:	f001 f869 	bl	8002638 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 10;
 8001566:	230a      	movs	r3, #10
 8001568:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.ClockLaneLP2HSTime = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneHS2LPTime = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneLP2HSTime = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.DataLaneMaxReadTime = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.StopWaitTime = 10;
 800157a:	230a      	movs	r3, #10
 800157c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800157e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001582:	4619      	mov	r1, r3
 8001584:	4835      	ldr	r0, [pc, #212]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001586:	f003 fd1b 	bl	8004fc0 <HAL_DSI_ConfigPhyTimer>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8001590:	f001 f852 	bl	8002638 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001594:	2104      	movs	r1, #4
 8001596:	4831      	ldr	r0, [pc, #196]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001598:	f003 fcea 	bl	8004f70 <HAL_DSI_ConfigFlowControl>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80015a2:	f001 f849 	bl	8002638 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80015a6:	2100      	movs	r1, #0
 80015a8:	482c      	ldr	r0, [pc, #176]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 80015aa:	f003 f9c3 	bl	8004934 <HAL_DSI_ConfigErrorMonitor>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 80015b4:	f001 f840 	bl	8002638 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80015ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f0:	4619      	mov	r1, r3
 80015f2:	481a      	ldr	r0, [pc, #104]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 80015f4:	f003 fc5e 	bl	8004eb4 <HAL_DSI_ConfigCommand>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_DSIHOST_DSI_Init+0x196>
  {
    Error_Handler();
 80015fe:	f001 f81b 	bl	8002638 <Error_Handler>
  }
  CmdCfg.ColorCoding = DSI_RGB888;
 8001602:	2305      	movs	r3, #5
 8001604:	60bb      	str	r3, [r7, #8]
  CmdCfg.CommandSize = 416;
 8001606:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800160a:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800160c:	2310      	movs	r3, #16
 800160e:	613b      	str	r3, [r7, #16]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001624:	2340      	movs	r3, #64	; 0x40
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001632:	f003 fb68 	bl	8004d06 <HAL_DSI_ConfigAdaptedCommandMode>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_DSIHOST_DSI_Init+0x1d4>
  {
    Error_Handler();
 800163c:	f000 fffc 	bl	8002638 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001640:	2100      	movs	r1, #0
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_DSIHOST_DSI_Init+0x1f0>)
 8001644:	f003 fb34 	bl	8004cb0 <HAL_DSI_SetGenericVCID>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_DSIHOST_DSI_Init+0x1e6>
  {
    Error_Handler();
 800164e:	f000 fff3 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	37b8      	adds	r7, #184	; 0xb8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001cc 	.word	0x200001cc
 8001660:	40016c00 	.word	0x40016c00

08001664 <MX_GFXMMU_Init>:
  * @brief GFXMMU Initialization Function
  * @param None
  * @retval None
  */
static void MX_GFXMMU_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END GFXMMU_Init 0 */

  /* USER CODE BEGIN GFXMMU_Init 1 */

  /* USER CODE END GFXMMU_Init 1 */
  hgfxmmu.Instance = GFXMMU;
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 800166a:	4a24      	ldr	r2, [pc, #144]	; (80016fc <MX_GFXMMU_Init+0x98>)
 800166c:	601a      	str	r2, [r3, #0]
  hgfxmmu.Init.BlocksPerLine = GFXMMU_192BLOCKS;
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	605a      	str	r2, [r3, #4]
  hgfxmmu.Init.DefaultValue = 0;
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  hgfxmmu.Init.Buffers.Buf0Address = 0;
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
  hgfxmmu.Init.Buffers.Buf1Address = 0;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  hgfxmmu.Init.Buffers.Buf2Address = 0;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  hgfxmmu.Init.Buffers.Buf3Address = 0;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  hgfxmmu.Init.CachePrefetch.Activation = ENABLE;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 8001694:	2201      	movs	r2, #1
 8001696:	771a      	strb	r2, [r3, #28]
  hgfxmmu.Init.CachePrefetch.CacheLock = GFXMMU_CACHE_LOCK_ENABLE;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 800169a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169e:	621a      	str	r2, [r3, #32]
  hgfxmmu.Init.CachePrefetch.CacheLockBuffer = GFXMMU_CACHE_LOCK_BUFFER0;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  hgfxmmu.Init.CachePrefetch.CacheForce = GFXMMU_CACHE_FORCE_ENABLE;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 80016a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
  hgfxmmu.Init.CachePrefetch.OutterBufferability = GFXMMU_OUTTER_BUFFERABILITY_ENABLE;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 80016b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hgfxmmu.Init.CachePrefetch.OutterCachability = GFXMMU_OUTTER_CACHABILITY_ENABLE;
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 80016b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
  hgfxmmu.Init.CachePrefetch.Prefetch = GFXMMU_PREFETCH_ENABLE;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
  hgfxmmu.Init.Interrupts.Activation = ENABLE;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_GFXMMU_Init(&hgfxmmu) != HAL_OK)
 80016cc:	480a      	ldr	r0, [pc, #40]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 80016ce:	f003 fdd3 	bl	8005278 <HAL_GFXMMU_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_GFXMMU_Init+0x78>
  {
    Error_Handler();
 80016d8:	f000 ffae 	bl	8002638 <Error_Handler>
  }
  if (HAL_GFXMMU_ConfigLut(&hgfxmmu, GFXMMU_LUT_FIRST, GFXMMU_LUT_SIZE, (uint32_t)gfxmmu_lut_config) != HAL_OK)
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_GFXMMU_Init+0x9c>)
 80016de:	2201      	movs	r2, #1
 80016e0:	2100      	movs	r1, #0
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_GFXMMU_Init+0x94>)
 80016e4:	f003 fe48 	bl	8005378 <HAL_GFXMMU_ConfigLut>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_GFXMMU_Init+0x8e>
  {
    Error_Handler();
 80016ee:	f000 ffa3 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN GFXMMU_Init 2 */

  /* USER CODE END GFXMMU_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001f0 	.word	0x200001f0
 80016fc:	4002c000 	.word	0x4002c000
 8001700:	20000028 	.word	0x20000028

08001704 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_GPU2D_Init+0x20>)
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <MX_GPU2D_Init+0x24>)
 800170c:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_GPU2D_Init+0x20>)
 8001710:	f004 f8a6 	bl	8005860 <HAL_GPU2D_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 800171a:	f000 ff8d 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000238 	.word	0x20000238
 8001728:	4002f000 	.word	0x4002f000

0800172c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_I2C1_Init+0x74>)
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_I2C1_Init+0x74>)
 8001738:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <MX_I2C1_Init+0x7c>)
 800173a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_I2C1_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_I2C1_Init+0x74>)
 8001744:	2201      	movs	r2, #1
 8001746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_I2C1_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_I2C1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_I2C1_Init+0x74>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_I2C1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_I2C1_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <MX_I2C1_Init+0x74>)
 8001768:	f004 f8e5 	bl	8005936 <HAL_I2C_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001772:	f000 ff61 	bl	8002638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <MX_I2C1_Init+0x74>)
 800177a:	f004 fe5d 	bl	8006438 <HAL_I2CEx_ConfigAnalogFilter>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001784:	f000 ff58 	bl	8002638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_I2C1_Init+0x74>)
 800178c:	f004 fe9f 	bl	80064ce <HAL_I2CEx_ConfigDigitalFilter>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001796:	f000 ff4f 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000244 	.word	0x20000244
 80017a4:	40005400 	.word	0x40005400
 80017a8:	30909dec 	.word	0x30909dec

080017ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_I2C2_Init+0x74>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <MX_I2C2_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_I2C2_Init+0x74>)
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <MX_I2C2_Init+0x7c>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_I2C2_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_I2C2_Init+0x74>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_I2C2_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_I2C2_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_I2C2_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_I2C2_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_I2C2_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <MX_I2C2_Init+0x74>)
 80017e8:	f004 f8a5 	bl	8005936 <HAL_I2C_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017f2:	f000 ff21 	bl	8002638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_I2C2_Init+0x74>)
 80017fa:	f004 fe1d 	bl	8006438 <HAL_I2CEx_ConfigAnalogFilter>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001804:	f000 ff18 	bl	8002638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001808:	2100      	movs	r1, #0
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_I2C2_Init+0x74>)
 800180c:	f004 fe5f 	bl	80064ce <HAL_I2CEx_ConfigDigitalFilter>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001816:	f000 ff0f 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000298 	.word	0x20000298
 8001824:	40005800 	.word	0x40005800
 8001828:	30909dec 	.word	0x30909dec

0800182c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_I2C3_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C3_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_I2C3_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C3_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_I2C3_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_I2C3_Init+0x74>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_I2C3_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_I2C3_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C3_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_I2C3_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C3_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <MX_I2C3_Init+0x74>)
 8001868:	f004 f865 	bl	8005936 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001872:	f000 fee1 	bl	8002638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_I2C3_Init+0x74>)
 800187a:	f004 fddd 	bl	8006438 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001884:	f000 fed8 	bl	8002638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_I2C3_Init+0x74>)
 800188c:	f004 fe1f 	bl	80064ce <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001896:	f000 fecf 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002ec 	.word	0x200002ec
 80018a4:	46002800 	.word	0x46002800
 80018a8:	30909dec 	.word	0x30909dec

080018ac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_I2C4_Init+0x74>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <MX_I2C4_Init+0x78>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_I2C4_Init+0x74>)
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <MX_I2C4_Init+0x7c>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_I2C4_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_I2C4_Init+0x74>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <MX_I2C4_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_I2C4_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_I2C4_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_I2C4_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_I2C4_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <MX_I2C4_Init+0x74>)
 80018e8:	f004 f825 	bl	8005936 <HAL_I2C_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80018f2:	f000 fea1 	bl	8002638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <MX_I2C4_Init+0x74>)
 80018fa:	f004 fd9d 	bl	8006438 <HAL_I2CEx_ConfigAnalogFilter>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001904:	f000 fe98 	bl	8002638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001908:	2100      	movs	r1, #0
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_I2C4_Init+0x74>)
 800190c:	f004 fddf 	bl	80064ce <HAL_I2CEx_ConfigDigitalFilter>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001916:	f000 fe8f 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000340 	.word	0x20000340
 8001924:	40008400 	.word	0x40008400
 8001928:	30909dec 	.word	0x30909dec

0800192c <MX_I2C6_Init>:
  * @brief I2C6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C6_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C6_Init 0 */

  /* USER CODE BEGIN I2C6_Init 1 */

  /* USER CODE END I2C6_Init 1 */
  hi2c6.Instance = I2C6;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_I2C6_Init+0x74>)
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <MX_I2C6_Init+0x78>)
 8001934:	601a      	str	r2, [r3, #0]
  hi2c6.Init.Timing = 0x30909DEC;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_I2C6_Init+0x74>)
 8001938:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <MX_I2C6_Init+0x7c>)
 800193a:	605a      	str	r2, [r3, #4]
  hi2c6.Init.OwnAddress1 = 0;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_I2C6_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hi2c6.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_I2C6_Init+0x74>)
 8001944:	2201      	movs	r2, #1
 8001946:	60da      	str	r2, [r3, #12]
  hi2c6.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_I2C6_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hi2c6.Init.OwnAddress2 = 0;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_I2C6_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  hi2c6.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_I2C6_Init+0x74>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  hi2c6.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_I2C6_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	61da      	str	r2, [r3, #28]
  hi2c6.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_I2C6_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c6) != HAL_OK)
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <MX_I2C6_Init+0x74>)
 8001968:	f003 ffe5 	bl	8005936 <HAL_I2C_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_I2C6_Init+0x4a>
  {
    Error_Handler();
 8001972:	f000 fe61 	bl	8002638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c6, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001976:	2100      	movs	r1, #0
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <MX_I2C6_Init+0x74>)
 800197a:	f004 fd5d 	bl	8006438 <HAL_I2CEx_ConfigAnalogFilter>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_I2C6_Init+0x5c>
  {
    Error_Handler();
 8001984:	f000 fe58 	bl	8002638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c6, 0) != HAL_OK)
 8001988:	2100      	movs	r1, #0
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_I2C6_Init+0x74>)
 800198c:	f004 fd9f 	bl	80064ce <HAL_I2CEx_ConfigDigitalFilter>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_I2C6_Init+0x6e>
  {
    Error_Handler();
 8001996:	f000 fe4f 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C6_Init 2 */

  /* USER CODE END I2C6_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000394 	.word	0x20000394
 80019a4:	40009c00 	.word	0x40009c00
 80019a8:	30909dec 	.word	0x30909dec

080019ac <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 80019c0:	f004 fde2 	bl	8006588 <HAL_ICACHE_Disable>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80019ca:	f000 fe35 	bl	8002638 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x10000000;
 80019ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019d2:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x60000000;
 80019d4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80019d8:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 80019da:	2301      	movs	r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(_NULL, &pRegionConfig) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	2000      	movs	r0, #0
 80019ec:	f004 fdfc 	bl	80065e8 <HAL_ICACHE_EnableRemapRegion>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_ICACHE_Init+0x4e>
  {
    Error_Handler();
 80019f6:	f000 fe1f 	bl	8002638 <Error_Handler>
  }

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80019fa:	f004 fdb5 	bl	8006568 <HAL_ICACHE_Enable>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ICACHE_Init+0x5c>
  {
    Error_Handler();
 8001a04:	f000 fe18 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a16:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <MX_LPUART1_UART_Init+0x90>)
 8001a18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <MX_LPUART1_UART_Init+0x94>)
 8001a1e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a34:	220c      	movs	r2, #12
 8001a36:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a52:	4812      	ldr	r0, [pc, #72]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a54:	f00b fec6 	bl	800d7e4 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f000 fdeb 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a62:	2100      	movs	r1, #0
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a66:	f00c fb0d 	bl	800e084 <HAL_UARTEx_SetTxFifoThreshold>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001a70:	f000 fde2 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a74:	2100      	movs	r1, #0
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a78:	f00c fb42 	bl	800e100 <HAL_UARTEx_SetRxFifoThreshold>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001a82:	f000 fdd9 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_LPUART1_UART_Init+0x8c>)
 8001a88:	f00c fac3 	bl	800e012 <HAL_UARTEx_DisableFifoMode>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001a92:	f000 fdd1 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200003e8 	.word	0x200003e8
 8001aa0:	46002400 	.word	0x46002400
 8001aa4:	00033324 	.word	0x00033324

08001aa8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <MX_USART1_UART_Init+0x94>)
 8001ab0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af0:	4811      	ldr	r0, [pc, #68]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001af2:	f00b fe77 	bl	800d7e4 <HAL_UART_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001afc:	f000 fd9c 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b00:	2100      	movs	r1, #0
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001b04:	f00c fabe 	bl	800e084 <HAL_UARTEx_SetTxFifoThreshold>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b0e:	f000 fd93 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4808      	ldr	r0, [pc, #32]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001b16:	f00c faf3 	bl	800e100 <HAL_UARTEx_SetRxFifoThreshold>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b20:	f000 fd8a 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_USART1_UART_Init+0x90>)
 8001b26:	f00c fa74 	bl	800e012 <HAL_UARTEx_DisableFifoMode>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b30:	f000 fd82 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000047c 	.word	0x2000047c
 8001b3c:	40013800 	.word	0x40013800

08001b40 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b46:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <MX_USART6_UART_Init+0x94>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b88:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b8a:	f00b fe2b 	bl	800d7e4 <HAL_UART_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001b94:	f000 fd50 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001b9c:	f00c fa72 	bl	800e084 <HAL_UARTEx_SetTxFifoThreshold>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001ba6:	f000 fd47 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001baa:	2100      	movs	r1, #0
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001bae:	f00c faa7 	bl	800e100 <HAL_UARTEx_SetRxFifoThreshold>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001bb8:	f000 fd3e 	bl	8002638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_USART6_UART_Init+0x90>)
 8001bbe:	f00c fa28 	bl	800e012 <HAL_UARTEx_DisableFifoMode>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001bc8:	f000 fd36 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000510 	.word	0x20000510
 8001bd4:	40006400 	.word	0x40006400

08001bd8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2234      	movs	r2, #52	; 0x34
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f00c fb36 	bl	800e256 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001bec:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <MX_LTDC_Init+0x104>)
 8001bee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001bf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bf6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001bf8:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c00:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 0;
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 0;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 416;
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c26:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 416;
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c2e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 416;
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c36:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 416;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c3e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001c54:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001c5c:	481e      	ldr	r0, [pc, #120]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001c5e:	f004 fd15 	bl	800668c <HAL_LTDC_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001c68:	f000 fce6 	bl	8002638 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 416;
 8001c70:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001c74:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 416;
 8001c7a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001c7e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001c84:	23ff      	movs	r3, #255	; 0xff
 8001c86:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c90:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c92:	2305      	movs	r3, #5
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = GFXMMU_VIRTUAL_BUFFER0_BASE;
 8001c96:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 416;
 8001c9c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 416;
 8001ca2:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_LTDC_Init+0x100>)
 8001cc2:	f004 fe75 	bl	80069b0 <HAL_LTDC_ConfigLayer>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8001ccc:	f000 fcb4 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3738      	adds	r7, #56	; 0x38
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200005a4 	.word	0x200005a4
 8001cdc:	40016800 	.word	0x40016800

08001ce0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001ce6:	f107 0318 	add.w	r3, r7, #24
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001d06:	463b      	mov	r3, r7
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d10:	4a3d      	ldr	r2, [pc, #244]	; (8001e08 <MX_OCTOSPI1_Init+0x128>)
 8001d12:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001d20:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d26:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d2a:	221a      	movs	r2, #26
 8001d2c:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001d3a:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8001d40:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d46:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 16;
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d62:	2208      	movs	r2, #8
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 16;
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d68:	2210      	movs	r2, #16
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001d72:	4824      	ldr	r0, [pc, #144]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001d74:	f005 f99e 	bl	80070b4 <HAL_OSPI_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_OCTOSPI1_Init+0xa2>
  {
    Error_Handler();
 8001d7e:	f000 fc5b 	bl	8002638 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_OCTOSPI1_Init+0x12c>)
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <MX_OCTOSPI1_Init+0x130>)
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d9a:	f107 0318 	add.w	r3, r7, #24
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4619      	mov	r1, r3
 8001da4:	4817      	ldr	r0, [pc, #92]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001da6:	f005 fb05 	bl	80073b4 <HAL_OSPIM_Config>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_OCTOSPI1_Init+0xd4>
  {
    Error_Handler();
 8001db0:	f000 fc42 	bl	8002638 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480d      	ldr	r0, [pc, #52]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001dd0:	f005 fa2c 	bl	800722c <HAL_OSPI_HyperbusCfg>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_OCTOSPI1_Init+0xfe>
  {
    Error_Handler();
 8001dda:	f000 fc2d 	bl	8002638 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001de6:	463b      	mov	r3, r7
 8001de8:	4619      	mov	r1, r3
 8001dea:	4806      	ldr	r0, [pc, #24]	; (8001e04 <MX_OCTOSPI1_Init+0x124>)
 8001dec:	f006 f8ce 	bl	8007f8c <HAL_OSPI_DLYB_SetConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_OCTOSPI1_Init+0x11a>
  {
    Error_Handler();
 8001df6:	f000 fc1f 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	3730      	adds	r7, #48	; 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000064c 	.word	0x2000064c
 8001e08:	420d1400 	.word	0x420d1400
 8001e0c:	00010002 	.word	0x00010002
 8001e10:	01000002 	.word	0x01000002

08001e14 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8001e42:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e44:	4a3c      	ldr	r2, [pc, #240]	; (8001f38 <MX_OCTOSPI2_Init+0x124>)
 8001e46:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001e48:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001e4e:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001e54:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e5a:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e5e:	2220      	movs	r2, #32
 8001e60:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001e62:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001e68:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001e92:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e94:	2208      	movs	r2, #8
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001ea4:	4823      	ldr	r0, [pc, #140]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001ea6:	f005 f905 	bl	80070b4 <HAL_OSPI_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_OCTOSPI2_Init+0xa0>
  {
    Error_Handler();
 8001eb0:	f000 fbc2 	bl	8002638 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.DQSPort = 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.NCSPort = 2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <MX_OCTOSPI2_Init+0x128>)
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <MX_OCTOSPI2_Init+0x12c>)
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  sOspiManagerCfg.Req2AckTime = 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4817      	ldr	r0, [pc, #92]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001ed8:	f005 fa6c 	bl	80073b4 <HAL_OSPIM_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_OCTOSPI2_Init+0xd2>
  {
    Error_Handler();
 8001ee2:	f000 fba9 	bl	8002638 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.AccessTime = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	613b      	str	r3, [r7, #16]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4619      	mov	r1, r3
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001f02:	f005 f993 	bl	800722c <HAL_OSPI_HyperbusCfg>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_OCTOSPI2_Init+0xfc>
  {
    Error_Handler();
 8001f0c:	f000 fb94 	bl	8002638 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001f18:	463b      	mov	r3, r7
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_OCTOSPI2_Init+0x120>)
 8001f1e:	f006 f835 	bl	8007f8c <HAL_OSPI_DLYB_SetConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_OCTOSPI2_Init+0x118>
  {
    Error_Handler();
 8001f28:	f000 fb86 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200006a8 	.word	0x200006a8
 8001f38:	420d2400 	.word	0x420d2400
 8001f3c:	00010002 	.word	0x00010002
 8001f40:	01000002 	.word	0x01000002

08001f44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08e      	sub	sp, #56	; 0x38
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f72:	4b33      	ldr	r3, [pc, #204]	; (8002040 <MX_RTC_Init+0xfc>)
 8001f74:	4a33      	ldr	r2, [pc, #204]	; (8002044 <MX_RTC_Init+0x100>)
 8001f76:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <MX_RTC_Init+0xfc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <MX_RTC_Init+0xfc>)
 8001f80:	227f      	movs	r2, #127	; 0x7f
 8001f82:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f84:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <MX_RTC_Init+0xfc>)
 8001f86:	22ff      	movs	r2, #255	; 0xff
 8001f88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <MX_RTC_Init+0xfc>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <MX_RTC_Init+0xfc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <MX_RTC_Init+0xfc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <MX_RTC_Init+0xfc>)
 8001f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001fa4:	4b26      	ldr	r3, [pc, #152]	; (8002040 <MX_RTC_Init+0xfc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <MX_RTC_Init+0xfc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fb0:	4823      	ldr	r0, [pc, #140]	; (8002040 <MX_RTC_Init+0xfc>)
 8001fb2:	f00a fc4d 	bl	800c850 <HAL_RTC_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001fbc:	f000 fb3c 	bl	8002638 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481a      	ldr	r0, [pc, #104]	; (8002040 <MX_RTC_Init+0xfc>)
 8001fd8:	f00a feaa 	bl	800cd30 <HAL_RTCEx_PrivilegeModeSet>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001fe2:	f000 fb29 	bl	8002638 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	2201      	movs	r2, #1
 8002000:	4619      	mov	r1, r3
 8002002:	480f      	ldr	r0, [pc, #60]	; (8002040 <MX_RTC_Init+0xfc>)
 8002004:	f00a fca6 	bl	800c954 <HAL_RTC_SetTime>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800200e:	f000 fb13 	bl	8002638 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002012:	2301      	movs	r3, #1
 8002014:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8002016:	2301      	movs	r3, #1
 8002018:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800201a:	2301      	movs	r3, #1
 800201c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2201      	movs	r2, #1
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_RTC_Init+0xfc>)
 800202a:	f00a fd2f 	bl	800ca8c <HAL_RTC_SetDate>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8002034:	f000 fb00 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002038:	bf00      	nop
 800203a:	3738      	adds	r7, #56	; 0x38
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000704 	.word	0x20000704
 8002044:	46007800 	.word	0x46007800

08002048 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <MX_SPI1_Init+0xd4>)
 800205a:	4a31      	ldr	r2, [pc, #196]	; (8002120 <MX_SPI1_Init+0xd8>)
 800205c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <MX_SPI1_Init+0xd4>)
 8002060:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <MX_SPI1_Init+0xd4>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <MX_SPI1_Init+0xd4>)
 800206e:	2203      	movs	r2, #3
 8002070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <MX_SPI1_Init+0xd4>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002078:	4b28      	ldr	r3, [pc, #160]	; (800211c <MX_SPI1_Init+0xd4>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800207e:	4b27      	ldr	r3, [pc, #156]	; (800211c <MX_SPI1_Init+0xd4>)
 8002080:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <MX_SPI1_Init+0xd4>)
 8002088:	2200      	movs	r2, #0
 800208a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <MX_SPI1_Init+0xd4>)
 800208e:	2200      	movs	r2, #0
 8002090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <MX_SPI1_Init+0xd4>)
 8002094:	2200      	movs	r2, #0
 8002096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002098:	4b20      	ldr	r3, [pc, #128]	; (800211c <MX_SPI1_Init+0xd4>)
 800209a:	2200      	movs	r2, #0
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <MX_SPI1_Init+0xd4>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <MX_SPI1_Init+0xd4>)
 80020a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <MX_SPI1_Init+0xd4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_SPI1_Init+0xd4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <MX_SPI1_Init+0xd4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_SPI1_Init+0xd4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <MX_SPI1_Init+0xd4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <MX_SPI1_Init+0xd4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <MX_SPI1_Init+0xd4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_SPI1_Init+0xd4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <MX_SPI1_Init+0xd4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020e2:	480e      	ldr	r0, [pc, #56]	; (800211c <MX_SPI1_Init+0xd4>)
 80020e4:	f00a fe52 	bl	800cd8c <HAL_SPI_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80020ee:	f000 faa3 	bl	8002638 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80020f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020fa:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_SPI1_Init+0xd4>)
 8002106:	f00a ff72 	bl	800cfee <HAL_SPIEx_SetConfigAutonomousMode>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8002110:	f000 fa92 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000734 	.word	0x20000734
 8002120:	40013000 	.word	0x40013000

08002124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b090      	sub	sp, #64	; 0x40
 8002128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213a:	4bbf      	ldr	r3, [pc, #764]	; (8002438 <MX_GPIO_Init+0x314>)
 800213c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002140:	4abd      	ldr	r2, [pc, #756]	; (8002438 <MX_GPIO_Init+0x314>)
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800214a:	4bbb      	ldr	r3, [pc, #748]	; (8002438 <MX_GPIO_Init+0x314>)
 800214c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002158:	4bb7      	ldr	r3, [pc, #732]	; (8002438 <MX_GPIO_Init+0x314>)
 800215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800215e:	4ab6      	ldr	r2, [pc, #728]	; (8002438 <MX_GPIO_Init+0x314>)
 8002160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002164:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002168:	4bb3      	ldr	r3, [pc, #716]	; (8002438 <MX_GPIO_Init+0x314>)
 800216a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	4bb0      	ldr	r3, [pc, #704]	; (8002438 <MX_GPIO_Init+0x314>)
 8002178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800217c:	4aae      	ldr	r2, [pc, #696]	; (8002438 <MX_GPIO_Init+0x314>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002186:	4bac      	ldr	r3, [pc, #688]	; (8002438 <MX_GPIO_Init+0x314>)
 8002188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002194:	4ba8      	ldr	r3, [pc, #672]	; (8002438 <MX_GPIO_Init+0x314>)
 8002196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219a:	4aa7      	ldr	r2, [pc, #668]	; (8002438 <MX_GPIO_Init+0x314>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021a4:	4ba4      	ldr	r3, [pc, #656]	; (8002438 <MX_GPIO_Init+0x314>)
 80021a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4ba1      	ldr	r3, [pc, #644]	; (8002438 <MX_GPIO_Init+0x314>)
 80021b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b8:	4a9f      	ldr	r2, [pc, #636]	; (8002438 <MX_GPIO_Init+0x314>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021c2:	4b9d      	ldr	r3, [pc, #628]	; (8002438 <MX_GPIO_Init+0x314>)
 80021c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021d0:	4b99      	ldr	r3, [pc, #612]	; (8002438 <MX_GPIO_Init+0x314>)
 80021d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d6:	4a98      	ldr	r2, [pc, #608]	; (8002438 <MX_GPIO_Init+0x314>)
 80021d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021e0:	4b95      	ldr	r3, [pc, #596]	; (8002438 <MX_GPIO_Init+0x314>)
 80021e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ee:	4b92      	ldr	r3, [pc, #584]	; (8002438 <MX_GPIO_Init+0x314>)
 80021f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f4:	4a90      	ldr	r2, [pc, #576]	; (8002438 <MX_GPIO_Init+0x314>)
 80021f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021fe:	4b8e      	ldr	r3, [pc, #568]	; (8002438 <MX_GPIO_Init+0x314>)
 8002200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800220c:	4b8a      	ldr	r3, [pc, #552]	; (8002438 <MX_GPIO_Init+0x314>)
 800220e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002212:	4a89      	ldr	r2, [pc, #548]	; (8002438 <MX_GPIO_Init+0x314>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002218:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800221c:	4b86      	ldr	r3, [pc, #536]	; (8002438 <MX_GPIO_Init+0x314>)
 800221e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800222a:	4b83      	ldr	r3, [pc, #524]	; (8002438 <MX_GPIO_Init+0x314>)
 800222c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002230:	4a81      	ldr	r2, [pc, #516]	; (8002438 <MX_GPIO_Init+0x314>)
 8002232:	f043 0320 	orr.w	r3, r3, #32
 8002236:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800223a:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <MX_GPIO_Init+0x314>)
 800223c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002248:	4b7b      	ldr	r3, [pc, #492]	; (8002438 <MX_GPIO_Init+0x314>)
 800224a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224e:	4a7a      	ldr	r2, [pc, #488]	; (8002438 <MX_GPIO_Init+0x314>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002258:	4b77      	ldr	r3, [pc, #476]	; (8002438 <MX_GPIO_Init+0x314>)
 800225a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AVDDEN_GPIO_Port, AVDDEN_Pin, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800226c:	4873      	ldr	r0, [pc, #460]	; (800243c <MX_GPIO_Init+0x318>)
 800226e:	f003 fadf 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SDMMC_EN_Pin|LRA_EN_Pin, GPIO_PIN_RESET);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002278:	4871      	ldr	r0, [pc, #452]	; (8002440 <MX_GPIO_Init+0x31c>)
 800227a:	f003 fad9 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO3_Pin|PWR_ENCHG_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f248 0120 	movw	r1, #32800	; 0x8020
 8002284:	486f      	ldr	r0, [pc, #444]	; (8002444 <MX_GPIO_Init+0x320>)
 8002286:	f003 fad3 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GNSS_RST_Pin|TP_RST_Pin|GNSS_WAKEUP_Pin, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	21c8      	movs	r1, #200	; 0xc8
 800228e:	486e      	ldr	r0, [pc, #440]	; (8002448 <MX_GPIO_Init+0x324>)
 8002290:	f003 face 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RST_GPIO_Port, FLASH_RST_Pin, GPIO_PIN_RESET);
 8002294:	2200      	movs	r2, #0
 8002296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800229a:	486c      	ldr	r0, [pc, #432]	; (800244c <MX_GPIO_Init+0x328>)
 800229c:	f003 fac8 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_RST_GPIO_Port, DISPLAY_RST_Pin, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	486a      	ldr	r0, [pc, #424]	; (8002450 <MX_GPIO_Init+0x32c>)
 80022a6:	f003 fac3 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b0:	4868      	ldr	r0, [pc, #416]	; (8002454 <MX_GPIO_Init+0x330>)
 80022b2:	f003 fabd 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISPLAY_SWIRE_IN_Pin DISPLAY_SWIRE_OUT_Pin */
  GPIO_InitStruct.Pin = DISPLAY_SWIRE_IN_Pin|DISPLAY_SWIRE_OUT_Pin;
 80022b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c8:	4619      	mov	r1, r3
 80022ca:	485c      	ldr	r0, [pc, #368]	; (800243c <MX_GPIO_Init+0x318>)
 80022cc:	f003 f8d8 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : AVDDEN_Pin */
  GPIO_InitStruct.Pin = AVDDEN_Pin;
 80022d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022da:	2302      	movs	r3, #2
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(AVDDEN_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e6:	4619      	mov	r1, r3
 80022e8:	4854      	ldr	r0, [pc, #336]	; (800243c <MX_GPIO_Init+0x318>)
 80022ea:	f003 f8c9 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_EN_Pin */
  GPIO_InitStruct.Pin = SDMMC_EN_Pin;
 80022ee:	2310      	movs	r3, #16
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SDMMC_EN_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002302:	4619      	mov	r1, r3
 8002304:	484e      	ldr	r0, [pc, #312]	; (8002440 <MX_GPIO_Init+0x31c>)
 8002306:	f003 f8bb 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC1_CD_Pin PWR_INT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin|PWR_INT_Pin;
 800230a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002310:	2300      	movs	r3, #0
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002314:	2301      	movs	r3, #1
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231c:	4619      	mov	r1, r3
 800231e:	4848      	ldr	r0, [pc, #288]	; (8002440 <MX_GPIO_Init+0x31c>)
 8002320:	f003 f8ae 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC8 PC11 PC12
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
 8002324:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002332:	2302      	movs	r3, #2
 8002334:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002336:	230c      	movs	r3, #12
 8002338:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800233e:	4619      	mov	r1, r3
 8002340:	4845      	ldr	r0, [pc, #276]	; (8002458 <MX_GPIO_Init+0x334>)
 8002342:	f003 f89d 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin PWR_ENCHG_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|PWR_ENCHG_Pin;
 8002346:	f248 0320 	movw	r3, #32800	; 0x8020
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002350:	2302      	movs	r3, #2
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2300      	movs	r3, #0
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235c:	4619      	mov	r1, r3
 800235e:	4839      	ldr	r0, [pc, #228]	; (8002444 <MX_GPIO_Init+0x320>)
 8002360:	f003 f88e 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002364:	2304      	movs	r3, #4
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002370:	2302      	movs	r3, #2
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002374:	230c      	movs	r3, #12
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237c:	4619      	mov	r1, r3
 800237e:	4830      	ldr	r0, [pc, #192]	; (8002440 <MX_GPIO_Init+0x31c>)
 8002380:	f003 f87e 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002384:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239a:	4619      	mov	r1, r3
 800239c:	482f      	ldr	r0, [pc, #188]	; (800245c <MX_GPIO_Init+0x338>)
 800239e:	f003 f86f 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT2_Pin */
  GPIO_InitStruct.Pin = BT_INT2_Pin;
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a6:	2300      	movs	r3, #0
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023aa:	2302      	movs	r3, #2
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT2_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b2:	4619      	mov	r1, r3
 80023b4:	4828      	ldr	r0, [pc, #160]	; (8002458 <MX_GPIO_Init+0x334>)
 80023b6:	f003 f863 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c8:	2302      	movs	r3, #2
 80023ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80023cc:	2308      	movs	r3, #8
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d4:	4619      	mov	r1, r3
 80023d6:	481b      	ldr	r0, [pc, #108]	; (8002444 <MX_GPIO_Init+0x320>)
 80023d8:	f003 f852 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|GPIO1_Pin;
 80023dc:	2303      	movs	r3, #3
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023e4:	2302      	movs	r3, #2
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ec:	4619      	mov	r1, r3
 80023ee:	4814      	ldr	r0, [pc, #80]	; (8002440 <MX_GPIO_Init+0x31c>)
 80023f0:	f003 f846 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_INT1_Pin */
  GPIO_InitStruct.Pin = BT_INT1_Pin;
 80023f4:	2340      	movs	r3, #64	; 0x40
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <MX_GPIO_Init+0x33c>)
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023fc:	2302      	movs	r3, #2
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT_INT1_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002404:	4619      	mov	r1, r3
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <MX_GPIO_Init+0x334>)
 8002408:	f003 f83a 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin|TP_RST_Pin;
 800240c:	2388      	movs	r3, #136	; 0x88
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002414:	2301      	movs	r3, #1
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800241c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002420:	4619      	mov	r1, r3
 8002422:	4809      	ldr	r0, [pc, #36]	; (8002448 <MX_GPIO_Init+0x324>)
 8002424:	f003 f82c 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_PPS_Pin */
  GPIO_InitStruct.Pin = GNSS_PPS_Pin;
 8002428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_GPIO_Init+0x33c>)
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
 8002436:	e015      	b.n	8002464 <MX_GPIO_Init+0x340>
 8002438:	46020c00 	.word	0x46020c00
 800243c:	42021800 	.word	0x42021800
 8002440:	42020c00 	.word	0x42020c00
 8002444:	42020400 	.word	0x42020400
 8002448:	42022400 	.word	0x42022400
 800244c:	42022000 	.word	0x42022000
 8002450:	42021400 	.word	0x42021400
 8002454:	42021000 	.word	0x42021000
 8002458:	42020800 	.word	0x42020800
 800245c:	42020000 	.word	0x42020000
 8002460:	10110000 	.word	0x10110000
  HAL_GPIO_Init(GNSS_PPS_GPIO_Port, &GPIO_InitStruct);
 8002464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002468:	4619      	mov	r1, r3
 800246a:	4860      	ldr	r0, [pc, #384]	; (80025ec <MX_GPIO_Init+0x4c8>)
 800246c:	f003 f808 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_WAKEUP_Pin */
  GPIO_InitStruct.Pin = GNSS_WAKEUP_Pin;
 8002470:	2340      	movs	r3, #64	; 0x40
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GNSS_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002484:	4619      	mov	r1, r3
 8002486:	485a      	ldr	r0, [pc, #360]	; (80025f0 <MX_GPIO_Init+0x4cc>)
 8002488:	f002 fffa 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 800248c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002492:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <MX_GPIO_Init+0x4d0>)
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002496:	2301      	movs	r3, #1
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249e:	4619      	mov	r1, r3
 80024a0:	4853      	ldr	r0, [pc, #332]	; (80025f0 <MX_GPIO_Init+0x4cc>)
 80024a2:	f002 ffed 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RST_Pin */
  GPIO_InitStruct.Pin = FLASH_RST_Pin;
 80024a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b0:	2301      	movs	r3, #1
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FLASH_RST_GPIO_Port, &GPIO_InitStruct);
 80024b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024bc:	4619      	mov	r1, r3
 80024be:	484e      	ldr	r0, [pc, #312]	; (80025f8 <MX_GPIO_Init+0x4d4>)
 80024c0:	f002 ffde 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_INT_Pin */
  GPIO_InitStruct.Pin = FLASH_INT_Pin;
 80024c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024ca:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <MX_GPIO_Init+0x4d0>)
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ce:	2301      	movs	r3, #1
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_INT_GPIO_Port, &GPIO_InitStruct);
 80024d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d6:	4619      	mov	r1, r3
 80024d8:	4847      	ldr	r0, [pc, #284]	; (80025f8 <MX_GPIO_Init+0x4d4>)
 80024da:	f002 ffd1 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RSTO_Pin */
  GPIO_InitStruct.Pin = FLASH_RSTO_Pin;
 80024de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(FLASH_RSTO_GPIO_Port, &GPIO_InitStruct);
 80024ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4841      	ldr	r0, [pc, #260]	; (80025f8 <MX_GPIO_Init+0x4d4>)
 80024f4:	f002 ffc4 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = DISPLAY_RST_Pin;
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002500:	2301      	movs	r3, #1
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002504:	2300      	movs	r3, #0
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DISPLAY_RST_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250c:	4619      	mov	r1, r3
 800250e:	483b      	ldr	r0, [pc, #236]	; (80025fc <MX_GPIO_Init+0x4d8>)
 8002510:	f002 ffb6 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_INT_Pin */
  GPIO_InitStruct.Pin = ALS_INT_Pin;
 8002514:	2340      	movs	r3, #64	; 0x40
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800251c:	2301      	movs	r3, #1
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ALS_INT_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002524:	4619      	mov	r1, r3
 8002526:	4835      	ldr	r0, [pc, #212]	; (80025fc <MX_GPIO_Init+0x4d8>)
 8002528:	f002 ffaa 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <MX_GPIO_Init+0x4d0>)
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002534:	2301      	movs	r3, #1
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253c:	4619      	mov	r1, r3
 800253e:	4830      	ldr	r0, [pc, #192]	; (8002600 <MX_GPIO_Init+0x4dc>)
 8002540:	f002 ff9e 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8002544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254e:	2301      	movs	r3, #1
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8002556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255a:	4619      	mov	r1, r3
 800255c:	4828      	ldr	r0, [pc, #160]	; (8002600 <MX_GPIO_Init+0x4dc>)
 800255e:	f002 ff8f 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : HR_INT_Pin */
  GPIO_InitStruct.Pin = HR_INT_Pin;
 8002562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <MX_GPIO_Init+0x4d0>)
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256c:	2301      	movs	r3, #1
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HR_INT_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002574:	4619      	mov	r1, r3
 8002576:	4823      	ldr	r0, [pc, #140]	; (8002604 <MX_GPIO_Init+0x4e0>)
 8002578:	f002 ff82 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LRA_EN_Pin */
  GPIO_InitStruct.Pin = LRA_EN_Pin;
 800257c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002586:	2302      	movs	r3, #2
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LRA_EN_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002592:	4619      	mov	r1, r3
 8002594:	481b      	ldr	r0, [pc, #108]	; (8002604 <MX_GPIO_Init+0x4e0>)
 8002596:	f002 ff73 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAG_INT_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin;
 800259a:	2310      	movs	r3, #16
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <MX_GPIO_Init+0x4d0>)
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MAG_INT_GPIO_Port, &GPIO_InitStruct);
 80025a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025aa:	4619      	mov	r1, r3
 80025ac:	4816      	ldr	r0, [pc, #88]	; (8002608 <MX_GPIO_Init+0x4e4>)
 80025ae:	f002 ff67 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 80025b2:	2304      	movs	r3, #4
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_GPIO_Init+0x4e8>)
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 80025be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c2:	4619      	mov	r1, r3
 80025c4:	4812      	ldr	r0, [pc, #72]	; (8002610 <MX_GPIO_Init+0x4ec>)
 80025c6:	f002 ff5b 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 80025ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d0:	2300      	movs	r3, #0
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025dc:	4619      	mov	r1, r3
 80025de:	4807      	ldr	r0, [pc, #28]	; (80025fc <MX_GPIO_Init+0x4d8>)
 80025e0:	f002 ff4e 	bl	8005480 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025e4:	bf00      	nop
 80025e6:	3740      	adds	r7, #64	; 0x40
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	42020000 	.word	0x42020000
 80025f0:	42022400 	.word	0x42022400
 80025f4:	10210000 	.word	0x10210000
 80025f8:	42022000 	.word	0x42022000
 80025fc:	42021400 	.word	0x42021400
 8002600:	42021000 	.word	0x42021000
 8002604:	42020c00 	.word	0x42020c00
 8002608:	42020800 	.word	0x42020800
 800260c:	10110000 	.word	0x10110000
 8002610:	42020400 	.word	0x42020400

08002614 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002626:	f001 fa5b 	bl	8003ae0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40001000 	.word	0x40001000

08002638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800263c:	b672      	cpsid	i
}
 800263e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002640:	e7fe      	b.n	8002640 <Error_Handler+0x8>
	...

08002644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_MspInit+0x30>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002650:	4a08      	ldr	r2, [pc, #32]	; (8002674 <HAL_MspInit+0x30>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_MspInit+0x30>)
 800265c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	46020c00 	.word	0x46020c00

08002678 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0c2      	sub	sp, #264	; 0x108
 800267c:	af00      	add	r7, sp, #0
 800267e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002686:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	22e0      	movs	r2, #224	; 0xe0
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00b fdd8 	bl	800e256 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 80026a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <HAL_MDF_MspInit+0xe8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d14e      	bne.n	8002756 <HAL_MDF_MspInit+0xde>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 80026b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	4618      	mov	r0, r3
 80026d0:	f007 f8b0 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_MDF_MspInit+0x66>
    {
      Error_Handler();
 80026da:	f7ff ffad 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <HAL_MDF_MspInit+0xec>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <HAL_MDF_MspInit+0xec>)
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_MDF_MspInit+0xec>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_MDF_MspInit+0xec>)
 80026fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_MDF_MspInit+0xec>)
 8002704:	f043 0310 	orr.w	r3, r3, #16
 8002708:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_MDF_MspInit+0xec>)
 800270e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002712:	f003 0210 	and.w	r2, r3, #16
 8002716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800271a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002724:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002728:	681b      	ldr	r3, [r3, #0]
    /**ADF1 GPIO Configuration
    PE9     ------> ADF1_CCK0
    PE10     ------> ADF1_SDI0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800272a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800272e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8002744:	2303      	movs	r3, #3
 8002746:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800274e:	4619      	mov	r1, r3
 8002750:	4805      	ldr	r0, [pc, #20]	; (8002768 <HAL_MDF_MspInit+0xf0>)
 8002752:	f002 fe95 	bl	8005480 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	46024080 	.word	0x46024080
 8002764:	46020c00 	.word	0x46020c00
 8002768:	42021000 	.word	0x42021000

0800276c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <HAL_CRC_MspInit+0x3c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_CRC_MspInit+0x40>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_CRC_MspInit+0x40>)
 8002786:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800278a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_CRC_MspInit+0x40>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40023000 	.word	0x40023000
 80027ac:	46020c00 	.word	0x46020c00

080027b0 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a16      	ldr	r2, [pc, #88]	; (8002818 <HAL_DCACHE_MspInit+0x68>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10f      	bne.n	80027e2 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_DCACHE_MspInit+0x6c>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <HAL_DCACHE_MspInit+0x6c>)
 80027ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_DCACHE_MspInit+0x6c>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 80027e0:	e013      	b.n	800280a <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_DCACHE_MspInit+0x70>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10e      	bne.n	800280a <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_DCACHE_MspInit+0x6c>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_DCACHE_MspInit+0x6c>)
 80027f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <HAL_DCACHE_MspInit+0x6c>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40031400 	.word	0x40031400
 800281c:	46020c00 	.word	0x46020c00
 8002820:	40031800 	.word	0x40031800

08002824 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0e      	ldr	r2, [pc, #56]	; (800286c <HAL_DMA2D_MspInit+0x48>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d116      	bne.n	8002864 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_DMA2D_MspInit+0x4c>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <HAL_DMA2D_MspInit+0x4c>)
 800283e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002842:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_DMA2D_MspInit+0x4c>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	2076      	movs	r0, #118	; 0x76
 800285a:	f001 fa3d 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800285e:	2076      	movs	r0, #118	; 0x76
 8002860:	f001 fa54 	bl	8003d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	4002b000 	.word	0x4002b000
 8002870:	46020c00 	.word	0x46020c00

08002874 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b0c2      	sub	sp, #264	; 0x108
 8002878:	af00      	add	r7, sp, #0
 800287a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800287e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002882:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	22e0      	movs	r2, #224	; 0xe0
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f00b fcda 	bl	800e256 <memset>
  if(hdsi->Instance==DSI)
 80028a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80028a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a30      	ldr	r2, [pc, #192]	; (8002970 <HAL_DSI_MspInit+0xfc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d157      	bne.n	8002964 <HAL_DSI_MspInit+0xf0>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0304 	mov.w	r3, #4
 80028bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 80028c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4618      	mov	r0, r3
 80028ce:	f006 ffb1 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_DSI_MspInit+0x68>
    {
      Error_Handler();
 80028d8:	f7ff feae 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_DSI_MspInit+0x100>)
 80028de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028e2:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_DSI_MspInit+0x100>)
 80028e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028e8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_DSI_MspInit+0x100>)
 80028ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028fa:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_DSI_MspInit+0x100>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_DSI_MspInit+0x100>)
 8002902:	f043 0320 	orr.w	r3, r3, #32
 8002906:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_DSI_MspInit+0x100>)
 800290c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002910:	f003 0220 	and.w	r2, r3, #32
 8002914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002918:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002922:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002926:	681b      	ldr	r3, [r3, #0]
    DSI_CKN     ------> DSIHOST_CKN
    DSI_D1N     ------> DSIHOST_D1N
    DSI_D1P     ------> DSIHOST_D1P
    PF10     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800292c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8002942:	230b      	movs	r3, #11
 8002944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002948:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800294c:	4619      	mov	r1, r3
 800294e:	480a      	ldr	r0, [pc, #40]	; (8002978 <HAL_DSI_MspInit+0x104>)
 8002950:	f002 fd96 	bl	8005480 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	2089      	movs	r0, #137	; 0x89
 800295a:	f001 f9bd 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800295e:	2089      	movs	r0, #137	; 0x89
 8002960:	f001 f9d4 	bl	8003d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40016c00 	.word	0x40016c00
 8002974:	46020c00 	.word	0x46020c00
 8002978:	42021400 	.word	0x42021400

0800297c <HAL_GFXMMU_MspInit>:
* This function configures the hardware resources used in this example
* @param hgfxmmu: GFXMMU handle pointer
* @retval None
*/
void HAL_GFXMMU_MspInit(GFXMMU_HandleTypeDef* hgfxmmu)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if(hgfxmmu->Instance==GFXMMU)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0e      	ldr	r2, [pc, #56]	; (80029c4 <HAL_GFXMMU_MspInit+0x48>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d116      	bne.n	80029bc <HAL_GFXMMU_MspInit+0x40>
  {
  /* USER CODE BEGIN GFXMMU_MspInit 0 */

  /* USER CODE END GFXMMU_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GFXMMU_CLK_ENABLE();
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_GFXMMU_MspInit+0x4c>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <HAL_GFXMMU_MspInit+0x4c>)
 8002996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800299a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_GFXMMU_MspInit+0x4c>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    /* GFXMMU interrupt Init */
    HAL_NVIC_SetPriority(GFXMMU_IRQn, 0, 0);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2100      	movs	r1, #0
 80029b0:	2086      	movs	r0, #134	; 0x86
 80029b2:	f001 f991 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GFXMMU_IRQn);
 80029b6:	2086      	movs	r0, #134	; 0x86
 80029b8:	f001 f9a8 	bl	8003d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GFXMMU_MspInit 1 */

  /* USER CODE END GFXMMU_MspInit 1 */
  }

}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	4002c000 	.word	0x4002c000
 80029c8:	46020c00 	.word	0x46020c00

080029cc <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_GPU2D_MspInit+0x78>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d12d      	bne.n	8002a3a <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_GPU2D_MspInit+0x7c>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_GPU2D_MspInit+0x7c>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_GPU2D_MspInit+0x7c>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_GPU2D_MspInit+0x7c>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_GPU2D_MspInit+0x7c>)
 8002a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_GPU2D_MspInit+0x7c>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2084      	movs	r0, #132	; 0x84
 8002a20:	f001 f95a 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8002a24:	2084      	movs	r0, #132	; 0x84
 8002a26:	f001 f971 	bl	8003d0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2085      	movs	r0, #133	; 0x85
 8002a30:	f001 f952 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8002a34:	2085      	movs	r0, #133	; 0x85
 8002a36:	f001 f969 	bl	8003d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPU2D_MspInit 1 */

  /* USER CODE END GPU2D_MspInit 1 */
  }

}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	4002f000 	.word	0x4002f000
 8002a48:	46020c00 	.word	0x46020c00

08002a4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b0cc      	sub	sp, #304	; 0x130
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a5a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a70:	22e0      	movs	r2, #224	; 0xe0
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00b fbee 	bl	800e256 <memset>
  if(hi2c->Instance==I2C1)
 8002a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4aba      	ldr	r2, [pc, #744]	; (8002d70 <HAL_I2C_MspInit+0x324>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d14f      	bne.n	8002b2c <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a8c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f006 fec6 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8002aae:	f7ff fdc3 	bl	8002638 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ab2:	4bb0      	ldr	r3, [pc, #704]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab8:	4aae      	ldr	r2, [pc, #696]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ac2:	4bac      	ldr	r3, [pc, #688]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002ad0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002ad4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad8:	2312      	movs	r3, #18
 8002ada:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aea:	2304      	movs	r3, #4
 8002aec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002af0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002af4:	4619      	mov	r1, r3
 8002af6:	48a0      	ldr	r0, [pc, #640]	; (8002d78 <HAL_I2C_MspInit+0x32c>)
 8002af8:	f002 fcc2 	bl	8005480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002afc:	4b9d      	ldr	r3, [pc, #628]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b02:	4a9c      	ldr	r2, [pc, #624]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b0c:	4b99      	ldr	r3, [pc, #612]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b12:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002b28:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C6_MspInit 1 */

  /* USER CODE END I2C6_MspInit 1 */
  }

}
 8002b2a:	e1c0      	b.n	8002eae <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C2)
 8002b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a90      	ldr	r2, [pc, #576]	; (8002d7c <HAL_I2C_MspInit+0x330>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d157      	bne.n	8002bee <HAL_I2C_MspInit+0x1a2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b3e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b54:	4618      	mov	r0, r3
 8002b56:	f006 fe6d 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8002b60:	f7ff fd6a 	bl	8002638 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b64:	4b83      	ldr	r3, [pc, #524]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b6a:	4a82      	ldr	r2, [pc, #520]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b74:	4b7f      	ldr	r3, [pc, #508]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7a:	f003 0202 	and.w	r2, r3, #2
 8002b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b90:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002b92:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002b96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9a:	2312      	movs	r3, #18
 8002b9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bac:	2304      	movs	r3, #4
 8002bae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4871      	ldr	r0, [pc, #452]	; (8002d80 <HAL_I2C_MspInit+0x334>)
 8002bba:	f002 fc61 	bl	8005480 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bbe:	4b6d      	ldr	r3, [pc, #436]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc4:	4a6b      	ldr	r2, [pc, #428]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002bc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002bce:	4b69      	ldr	r3, [pc, #420]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	e15f      	b.n	8002eae <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C3)
 8002bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a62      	ldr	r2, [pc, #392]	; (8002d84 <HAL_I2C_MspInit+0x338>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d156      	bne.n	8002cae <HAL_I2C_MspInit+0x262>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c16:	4618      	mov	r0, r3
 8002c18:	f006 fe0c 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_MspInit+0x1da>
      Error_Handler();
 8002c22:	f7ff fd09 	bl	8002638 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c26:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c2c:	4a51      	ldr	r2, [pc, #324]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002c2e:	f043 0304 	orr.w	r3, r3, #4
 8002c32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c36:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3c:	f003 0204 	and.w	r2, r3, #4
 8002c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c52:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002c54:	2303      	movs	r3, #3
 8002c56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c5a:	2312      	movs	r3, #18
 8002c5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c72:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002c76:	4619      	mov	r1, r3
 8002c78:	4843      	ldr	r0, [pc, #268]	; (8002d88 <HAL_I2C_MspInit+0x33c>)
 8002c7a:	f002 fc01 	bl	8005480 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002c80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c84:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002c90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002c94:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ca6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	e0ff      	b.n	8002eae <HAL_I2C_MspInit+0x462>
  else if(hi2c->Instance==I2C4)
 8002cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a34      	ldr	r2, [pc, #208]	; (8002d8c <HAL_I2C_MspInit+0x340>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d169      	bne.n	8002d94 <HAL_I2C_MspInit+0x348>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002cc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 fdac 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_MspInit+0x29a>
      Error_Handler();
 8002ce2:	f7ff fca9 	bl	8002638 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cec:	4a21      	ldr	r2, [pc, #132]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002cee:	f043 0308 	orr.w	r3, r3, #8
 8002cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfc:	f003 0208 	and.w	r2, r3, #8
 8002d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d12:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d14:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d34:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4815      	ldr	r0, [pc, #84]	; (8002d90 <HAL_I2C_MspInit+0x344>)
 8002d3c:	f002 fba0 	bl	8005480 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_I2C_MspInit+0x328>)
 8002d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d56:	f003 0202 	and.w	r2, r3, #2
 8002d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d5e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d6c:	681b      	ldr	r3, [r3, #0]
}
 8002d6e:	e09e      	b.n	8002eae <HAL_I2C_MspInit+0x462>
 8002d70:	40005400 	.word	0x40005400
 8002d74:	46020c00 	.word	0x46020c00
 8002d78:	42021800 	.word	0x42021800
 8002d7c:	40005800 	.word	0x40005800
 8002d80:	42020400 	.word	0x42020400
 8002d84:	46002800 	.word	0x46002800
 8002d88:	42020800 	.word	0x42020800
 8002d8c:	40008400 	.word	0x40008400
 8002d90:	42020c00 	.word	0x42020c00
  else if(hi2c->Instance==I2C6)
 8002d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a45      	ldr	r2, [pc, #276]	; (8002eb8 <HAL_I2C_MspInit+0x46c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	f040 8083 	bne.w	8002eae <HAL_I2C_MspInit+0x462>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C6;
 8002da8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.I2c6ClockSelection = RCC_I2C6CLKSOURCE_PCLK1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f006 fd38 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_MspInit+0x382>
      Error_Handler();
 8002dca:	f7ff fc35 	bl	8002638 <Error_Handler>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dce:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd4:	4a39      	ldr	r2, [pc, #228]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dde:	4b37      	ldr	r3, [pc, #220]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de4:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002dec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002df6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dfa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e02:	4a2e      	ldr	r2, [pc, #184]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002e04:	f043 0320 	orr.w	r3, r3, #32
 8002e08:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e12:	f003 0220 	and.w	r2, r3, #32
 8002e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e28:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e32:	2312      	movs	r3, #18
 8002e34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e4a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002e4e:	4619      	mov	r1, r3
 8002e50:	481b      	ldr	r0, [pc, #108]	; (8002ec0 <HAL_I2C_MspInit+0x474>)
 8002e52:	f002 fb15 	bl	8005480 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e5c:	2312      	movs	r3, #18
 8002e5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C6;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e74:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4812      	ldr	r0, [pc, #72]	; (8002ec4 <HAL_I2C_MspInit+0x478>)
 8002e7c:	f002 fb00 	bl	8005480 <HAL_GPIO_Init>
    __HAL_RCC_I2C6_CLK_ENABLE();
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e86:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_I2C_MspInit+0x470>)
 8002e92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e96:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e9e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ea8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002eac:	681b      	ldr	r3, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40009c00 	.word	0x40009c00
 8002ebc:	46020c00 	.word	0x46020c00
 8002ec0:	42022400 	.word	0x42022400
 8002ec4:	42021400 	.word	0x42021400

08002ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b0c8      	sub	sp, #288	; 0x120
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ed2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ed6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eec:	22e0      	movs	r2, #224	; 0xe0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f00b f9b0 	bl	800e256 <memset>
  if(huart->Instance==LPUART1)
 8002ef6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002efa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4aa1      	ldr	r2, [pc, #644]	; (8003188 <HAL_UART_MspInit+0x2c0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d17b      	bne.n	8003000 <HAL_UART_MspInit+0x138>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002f08:	f04f 0220 	mov.w	r2, #32
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f006 fc88 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002f2a:	f7ff fb85 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f2e:	4b97      	ldr	r3, [pc, #604]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f34:	4a95      	ldr	r2, [pc, #596]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002f3e:	4b93      	ldr	r3, [pc, #588]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f4c:	4b8f      	ldr	r3, [pc, #572]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f52:	4a8e      	ldr	r2, [pc, #568]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f5c:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f62:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002f66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f78:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7a:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f80:	4a82      	ldr	r2, [pc, #520]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f8a:	4b80      	ldr	r3, [pc, #512]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8002f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f90:	f003 0202 	and.w	r2, r3, #2
 8002f94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fa6:	681b      	ldr	r3, [r3, #0]
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    PG5     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_5;
 8002fa8:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8002fac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fc8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4870      	ldr	r0, [pc, #448]	; (8003190 <HAL_UART_MspInit+0x2c8>)
 8002fd0:	f002 fa56 	bl	8005480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002fec:	2308      	movs	r3, #8
 8002fee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4866      	ldr	r0, [pc, #408]	; (8003194 <HAL_UART_MspInit+0x2cc>)
 8002ffa:	f002 fa41 	bl	8005480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ffe:	e0bd      	b.n	800317c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART1)
 8003000:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003004:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a62      	ldr	r2, [pc, #392]	; (8003198 <HAL_UART_MspInit+0x2d0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d155      	bne.n	80030be <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003012:	f04f 0201 	mov.w	r2, #1
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800301e:	2300      	movs	r3, #0
 8003020:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003026:	4618      	mov	r0, r3
 8003028:	f006 fc04 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8003032:	f7ff fb01 	bl	8002638 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003036:	4b55      	ldr	r3, [pc, #340]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8003038:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800303c:	4a53      	ldr	r2, [pc, #332]	; (800318c <HAL_UART_MspInit+0x2c4>)
 800303e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003042:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003046:	4b51      	ldr	r3, [pc, #324]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8003048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800304c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003050:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800305e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003062:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003064:	4b49      	ldr	r3, [pc, #292]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8003066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800306a:	4a48      	ldr	r2, [pc, #288]	; (800318c <HAL_UART_MspInit+0x2c4>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003074:	4b45      	ldr	r3, [pc, #276]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8003076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800307a:	f003 0202 	and.w	r2, r3, #2
 800307e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003082:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800308c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003090:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003092:	23c0      	movs	r3, #192	; 0xc0
 8003094:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030aa:	2307      	movs	r3, #7
 80030ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80030b4:	4619      	mov	r1, r3
 80030b6:	4837      	ldr	r0, [pc, #220]	; (8003194 <HAL_UART_MspInit+0x2cc>)
 80030b8:	f002 f9e2 	bl	8005480 <HAL_GPIO_Init>
}
 80030bc:	e05e      	b.n	800317c <HAL_UART_MspInit+0x2b4>
  else if(huart->Instance==USART6)
 80030be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a34      	ldr	r2, [pc, #208]	; (800319c <HAL_UART_MspInit+0x2d4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d155      	bne.n	800317c <HAL_UART_MspInit+0x2b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80030d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030e6:	4618      	mov	r0, r3
 80030e8:	f006 fba4 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80030f2:	f7ff faa1 	bl	8002638 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_UART_MspInit+0x2c4>)
 80030f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030fc:	4a23      	ldr	r2, [pc, #140]	; (800318c <HAL_UART_MspInit+0x2c4>)
 80030fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003102:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003106:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8003108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800310c:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8003110:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003114:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800311e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003122:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8003126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312a:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_UART_MspInit+0x2c4>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_UART_MspInit+0x2c4>)
 8003136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313a:	f003 0204 	and.w	r2, r3, #4
 800313e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003142:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800314c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003150:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003152:	230c      	movs	r3, #12
 8003154:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800316a:	2307      	movs	r3, #7
 800316c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003170:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003174:	4619      	mov	r1, r3
 8003176:	480a      	ldr	r0, [pc, #40]	; (80031a0 <HAL_UART_MspInit+0x2d8>)
 8003178:	f002 f982 	bl	8005480 <HAL_GPIO_Init>
}
 800317c:	bf00      	nop
 800317e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	46002400 	.word	0x46002400
 800318c:	46020c00 	.word	0x46020c00
 8003190:	42021800 	.word	0x42021800
 8003194:	42020400 	.word	0x42020400
 8003198:	40013800 	.word	0x40013800
 800319c:	40006400 	.word	0x40006400
 80031a0:	42020800 	.word	0x42020800

080031a4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b0bc      	sub	sp, #240	; 0xf0
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031ac:	f107 0310 	add.w	r3, r7, #16
 80031b0:	22e0      	movs	r2, #224	; 0xe0
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00b f84e 	bl	800e256 <memset>
  if(hltdc->Instance==LTDC)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a22      	ldr	r2, [pc, #136]	; (8003248 <HAL_LTDC_MspInit+0xa4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d13d      	bne.n	8003240 <HAL_LTDC_MspInit+0x9c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0302 	mov.w	r3, #2
 80031cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 80031d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80031d8:	2303      	movs	r3, #3
 80031da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLL2.PLL2M = 1;
 80031dc:	2301      	movs	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLL2.PLL2N = 20;
 80031e0:	2314      	movs	r3, #20
 80031e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2P = 2;
 80031e4:	2302      	movs	r3, #2
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLL2.PLL2Q = 2;
 80031e8:	2302      	movs	r3, #2
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLL2.PLL2R = 2;
 80031ec:	2302      	movs	r3, #2
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80031f0:	230c      	movs	r3, #12
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80031f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031fc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	4618      	mov	r0, r3
 8003204:	f006 fb16 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800320e:	f7ff fa13 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_LTDC_MspInit+0xa8>)
 8003214:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <HAL_LTDC_MspInit+0xa8>)
 800321a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800321e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_LTDC_MspInit+0xa8>)
 8003224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2100      	movs	r1, #0
 8003234:	2087      	movs	r0, #135	; 0x87
 8003236:	f000 fd4f 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800323a:	2087      	movs	r0, #135	; 0x87
 800323c:	f000 fd66 	bl	8003d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003240:	bf00      	nop
 8003242:	37f0      	adds	r7, #240	; 0xf0
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40016800 	.word	0x40016800
 800324c:	46020c00 	.word	0x46020c00

08003250 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b0ca      	sub	sp, #296	; 0x128
 8003254:	af00      	add	r7, sp, #0
 8003256:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800325a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800325e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003274:	22e0      	movs	r2, #224	; 0xe0
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f00a ffec 	bl	800e256 <memset>
  if(hospi->Instance==OCTOSPI1)
 800327e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003282:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a93      	ldr	r2, [pc, #588]	; (80034d8 <HAL_OSPI_MspInit+0x288>)
 800328c:	4293      	cmp	r3, r2
 800328e:	f040 8133 	bne.w	80034f8 <HAL_OSPI_MspInit+0x2a8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003292:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032a8:	4618      	mov	r0, r3
 80032aa:	f006 fac3 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80032b4:	f7ff f9c0 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80032b8:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_OSPI_MspInit+0x28c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	4a87      	ldr	r2, [pc, #540]	; (80034dc <HAL_OSPI_MspInit+0x28c>)
 80032c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80032c2:	4b86      	ldr	r3, [pc, #536]	; (80034dc <HAL_OSPI_MspInit+0x28c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d10e      	bne.n	80032e8 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80032ca:	4b85      	ldr	r3, [pc, #532]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80032cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d0:	4a83      	ldr	r2, [pc, #524]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80032d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032da:	4b81      	ldr	r3, [pc, #516]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80032dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80032e8:	4b7d      	ldr	r3, [pc, #500]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a7c      	ldr	r2, [pc, #496]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80032f0:	f043 0310 	orr.w	r3, r3, #16
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f8:	4b79      	ldr	r3, [pc, #484]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f003 0210 	and.w	r2, r3, #16
 8003302:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003306:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003310:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003314:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003316:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 8003318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331c:	4a70      	ldr	r2, [pc, #448]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003326:	4b6e      	ldr	r3, [pc, #440]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 8003328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800332c:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8003330:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800333e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003342:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003344:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 8003346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334a:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 800334c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003350:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003354:	4b62      	ldr	r3, [pc, #392]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 8003356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800335a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800335e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800336c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003370:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 8003374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003378:	4a59      	ldr	r2, [pc, #356]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 800337a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003382:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 8003384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003388:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800338c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003390:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800339a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800339e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a0:	4b4f      	ldr	r3, [pc, #316]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80033a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a6:	4a4e      	ldr	r2, [pc, #312]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80033b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b6:	f003 0202 	and.w	r2, r3, #2
 80033ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80033be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80033c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033cc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d4:	4a42      	ldr	r2, [pc, #264]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80033d6:	f043 0310 	orr.w	r3, r3, #16
 80033da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033de:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <HAL_OSPI_MspInit+0x290>)
 80033e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e4:	f003 0210 	and.w	r2, r3, #16
 80033e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80033ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80033f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033fa:	681b      	ldr	r3, [r3, #0]
    PH9     ------> OCTOSPIM_P2_IO4
    PH12     ------> OCTOSPIM_P2_IO7
    PB10     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
 80033fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003400:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003410:	2303      	movs	r3, #3
 8003412:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8003416:	2305      	movs	r3, #5
 8003418:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800341c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003420:	4619      	mov	r1, r3
 8003422:	4830      	ldr	r0, [pc, #192]	; (80034e4 <HAL_OSPI_MspInit+0x294>)
 8003424:	f002 f82c 	bl	8005480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003428:	2340      	movs	r3, #64	; 0x40
 800342a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8003440:	2303      	movs	r3, #3
 8003442:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003446:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800344a:	4619      	mov	r1, r3
 800344c:	4826      	ldr	r0, [pc, #152]	; (80034e8 <HAL_OSPI_MspInit+0x298>)
 800344e:	f002 f817 	bl	8005480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003452:	230e      	movs	r3, #14
 8003454:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	2303      	movs	r3, #3
 8003466:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPI2;
 800346a:	2306      	movs	r3, #6
 800346c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003470:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003474:	4619      	mov	r1, r3
 8003476:	481d      	ldr	r0, [pc, #116]	; (80034ec <HAL_OSPI_MspInit+0x29c>)
 8003478:	f002 f802 	bl	8005480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 800347c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003480:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8003496:	230a      	movs	r3, #10
 8003498:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800349c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80034a0:	4619      	mov	r1, r3
 80034a2:	4813      	ldr	r0, [pc, #76]	; (80034f0 <HAL_OSPI_MspInit+0x2a0>)
 80034a4:	f001 ffec 	bl	8005480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80034c2:	230a      	movs	r3, #10
 80034c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034c8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80034cc:	4619      	mov	r1, r3
 80034ce:	4809      	ldr	r0, [pc, #36]	; (80034f4 <HAL_OSPI_MspInit+0x2a4>)
 80034d0:	f001 ffd6 	bl	8005480 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80034d4:	e08f      	b.n	80035f6 <HAL_OSPI_MspInit+0x3a6>
 80034d6:	bf00      	nop
 80034d8:	420d1400 	.word	0x420d1400
 80034dc:	200007dc 	.word	0x200007dc
 80034e0:	46020c00 	.word	0x46020c00
 80034e4:	42021c00 	.word	0x42021c00
 80034e8:	42021800 	.word	0x42021800
 80034ec:	42022000 	.word	0x42022000
 80034f0:	42020400 	.word	0x42020400
 80034f4:	42021000 	.word	0x42021000
  else if(hospi->Instance==OCTOSPI2)
 80034f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80034fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a3e      	ldr	r2, [pc, #248]	; (8003600 <HAL_OSPI_MspInit+0x3b0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d175      	bne.n	80035f6 <HAL_OSPI_MspInit+0x3a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800350a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003516:	2300      	movs	r3, #0
 8003518:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800351c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003520:	4618      	mov	r0, r3
 8003522:	f006 f987 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_OSPI_MspInit+0x2e0>
      Error_Handler();
 800352c:	f7ff f884 	bl	8002638 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 8003530:	4b34      	ldr	r3, [pc, #208]	; (8003604 <HAL_OSPI_MspInit+0x3b4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	4a33      	ldr	r2, [pc, #204]	; (8003604 <HAL_OSPI_MspInit+0x3b4>)
 8003538:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 800353a:	4b32      	ldr	r3, [pc, #200]	; (8003604 <HAL_OSPI_MspInit+0x3b4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d116      	bne.n	8003570 <HAL_OSPI_MspInit+0x320>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 8003544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003548:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 800354a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800354e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003552:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003558:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800355c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003560:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800356a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800356e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8003570:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	4a24      	ldr	r2, [pc, #144]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003580:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800358a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800358e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003598:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800359c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_OSPI_MspInit+0x3b8>)
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	f003 0201 	and.w	r2, r3, #1
 80035b8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80035bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80035c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80035ca:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI2;
 80035e4:	230a      	movs	r3, #10
 80035e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80035ee:	4619      	mov	r1, r3
 80035f0:	4806      	ldr	r0, [pc, #24]	; (800360c <HAL_OSPI_MspInit+0x3bc>)
 80035f2:	f001 ff45 	bl	8005480 <HAL_GPIO_Init>
}
 80035f6:	bf00      	nop
 80035f8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	420d2400 	.word	0x420d2400
 8003604:	200007dc 	.word	0x200007dc
 8003608:	46020c00 	.word	0x46020c00
 800360c:	42020000 	.word	0x42020000

08003610 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b0bc      	sub	sp, #240	; 0xf0
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003618:	f107 0310 	add.w	r3, r7, #16
 800361c:	22e0      	movs	r2, #224	; 0xe0
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f00a fe18 	bl	800e256 <memset>
  if(hrtc->Instance==RTC)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <HAL_RTC_MspInit+0x90>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d132      	bne.n	8003696 <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003630:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800363c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003644:	f107 0310 	add.w	r3, r7, #16
 8003648:	4618      	mov	r0, r3
 800364a:	f006 f8f3 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003654:	f7fe fff0 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_RTC_MspInit+0x94>)
 800365a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800365e:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <HAL_RTC_MspInit+0x94>)
 8003660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003664:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_RTC_MspInit+0x94>)
 800366a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800366e:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <HAL_RTC_MspInit+0x94>)
 8003670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003674:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_RTC_MspInit+0x94>)
 800367a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800367e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_RTC_MspInit+0x94>)
 8003688:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800368c:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <HAL_RTC_MspInit+0x94>)
 800368e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003692:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003696:	bf00      	nop
 8003698:	37f0      	adds	r7, #240	; 0xf0
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	46007800 	.word	0x46007800
 80036a4:	46020c00 	.word	0x46020c00

080036a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b0c4      	sub	sp, #272	; 0x110
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036b6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036c8:	f107 0318 	add.w	r3, r7, #24
 80036cc:	22e0      	movs	r2, #224	; 0xe0
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f00a fdc0 	bl	800e256 <memset>
  if(hspi->Instance==SPI1)
 80036d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a41      	ldr	r2, [pc, #260]	; (80037e8 <HAL_SPI_MspInit+0x140>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d17a      	bne.n	80037de <HAL_SPI_MspInit+0x136>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80036e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80036f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036fc:	f107 0318 	add.w	r3, r7, #24
 8003700:	4618      	mov	r0, r3
 8003702:	f006 f897 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 800370c:	f7fe ff94 	bl	8002638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003710:	4b36      	ldr	r3, [pc, #216]	; (80037ec <HAL_SPI_MspInit+0x144>)
 8003712:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003716:	4a35      	ldr	r2, [pc, #212]	; (80037ec <HAL_SPI_MspInit+0x144>)
 8003718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800371c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003720:	4b32      	ldr	r3, [pc, #200]	; (80037ec <HAL_SPI_MspInit+0x144>)
 8003722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372e:	4b2f      	ldr	r3, [pc, #188]	; (80037ec <HAL_SPI_MspInit+0x144>)
 8003730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003734:	4a2d      	ldr	r2, [pc, #180]	; (80037ec <HAL_SPI_MspInit+0x144>)
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800373e:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_SPI_MspInit+0x144>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	f003 0202 	and.w	r2, r3, #2
 8003748:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800374c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003756:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800375a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_SPI_MspInit+0x144>)
 800375e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003762:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_SPI_MspInit+0x144>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_SPI_MspInit+0x144>)
 800376e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800377a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003788:	681b      	ldr	r3, [r3, #0]
    PB0     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800378a:	2301      	movs	r3, #1
 800378c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379c:	2300      	movs	r3, #0
 800379e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037a2:	2305      	movs	r3, #5
 80037a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80037ac:	4619      	mov	r1, r3
 80037ae:	4810      	ldr	r0, [pc, #64]	; (80037f0 <HAL_SPI_MspInit+0x148>)
 80037b0:	f001 fe66 	bl	8005480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80037b4:	23e0      	movs	r3, #224	; 0xe0
 80037b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037cc:	2305      	movs	r3, #5
 80037ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80037d6:	4619      	mov	r1, r3
 80037d8:	4806      	ldr	r0, [pc, #24]	; (80037f4 <HAL_SPI_MspInit+0x14c>)
 80037da:	f001 fe51 	bl	8005480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037de:	bf00      	nop
 80037e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40013000 	.word	0x40013000
 80037ec:	46020c00 	.word	0x46020c00
 80037f0:	42020400 	.word	0x42020400
 80037f4:	42020000 	.word	0x42020000

080037f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08e      	sub	sp, #56	; 0x38
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003808:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <HAL_InitTick+0xcc>)
 800380a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800380e:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <HAL_InitTick+0xcc>)
 8003810:	f043 0310 	orr.w	r3, r3, #16
 8003814:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003818:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_InitTick+0xcc>)
 800381a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003826:	f107 0210 	add.w	r2, r7, #16
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f005 ff15 	bl	8009660 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003836:	f005 fed7 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800383a:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_InitTick+0xd0>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	0c9b      	lsrs	r3, r3, #18
 8003846:	3b01      	subs	r3, #1
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_InitTick+0xd4>)
 800384c:	4a20      	ldr	r2, [pc, #128]	; (80038d0 <HAL_InitTick+0xd8>)
 800384e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003850:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_InitTick+0xd4>)
 8003852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003856:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003858:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <HAL_InitTick+0xd4>)
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_InitTick+0xd4>)
 8003860:	2200      	movs	r2, #0
 8003862:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_InitTick+0xd4>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800386a:	4818      	ldr	r0, [pc, #96]	; (80038cc <HAL_InitTick+0xd4>)
 800386c:	f009 fc00 	bl	800d070 <HAL_TIM_Base_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8003876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800387a:	2b00      	cmp	r3, #0
 800387c:	d118      	bne.n	80038b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800387e:	4813      	ldr	r0, [pc, #76]	; (80038cc <HAL_InitTick+0xd4>)
 8003880:	f009 fc58 	bl	800d134 <HAL_TIM_Base_Start_IT>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800388a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10e      	bne.n	80038b0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b0f      	cmp	r3, #15
 8003896:	d808      	bhi.n	80038aa <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8003898:	2200      	movs	r2, #0
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	2031      	movs	r0, #49	; 0x31
 800389e:	f000 fa1b 	bl	8003cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038a2:	4a0c      	ldr	r2, [pc, #48]	; (80038d4 <HAL_InitTick+0xdc>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e002      	b.n	80038b0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80038b0:	2031      	movs	r0, #49	; 0x31
 80038b2:	f000 fa2b 	bl	8003d0c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80038b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3738      	adds	r7, #56	; 0x38
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	46020c00 	.word	0x46020c00
 80038c8:	431bde83 	.word	0x431bde83
 80038cc:	200007e0 	.word	0x200007e0
 80038d0:	40001000 	.word	0x40001000
 80038d4:	20000004 	.word	0x20000004

080038d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80038dc:	f005 ff08 	bl	80096f0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038e0:	e7fe      	b.n	80038e0 <NMI_Handler+0x8>

080038e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <HardFault_Handler+0x4>

080038e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <MemManage_Handler+0x4>

080038ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038f2:	e7fe      	b.n	80038f2 <BusFault_Handler+0x4>

080038f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <UsageFault_Handler+0x4>

080038fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <TIM6_IRQHandler+0x10>)
 800393a:	f009 fc9b 	bl	800d274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200007e0 	.word	0x200007e0

08003948 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <DMA2D_IRQHandler+0x10>)
 800394e:	f000 fc65 	bl	800421c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	2000016c 	.word	0x2000016c

0800395c <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <GPU2D_IRQHandler+0x10>)
 8003962:	f001 ffa7 	bl	80058b4 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000238 	.word	0x20000238

08003970 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <GPU2D_ER_IRQHandler+0x10>)
 8003976:	f001 ffc3 	bl	8005900 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000238 	.word	0x20000238

08003984 <GFXMMU_IRQHandler>:

/**
  * @brief This function handles GFXMMU global interrupt.
  */
void GFXMMU_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GFXMMU_IRQn 0 */

  /* USER CODE END GFXMMU_IRQn 0 */
  HAL_GFXMMU_IRQHandler(&hgfxmmu);
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <GFXMMU_IRQHandler+0x10>)
 800398a:	f001 fd49 	bl	8005420 <HAL_GFXMMU_IRQHandler>
  /* USER CODE BEGIN GFXMMU_IRQn 1 */

  /* USER CODE END GFXMMU_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200001f0 	.word	0x200001f0

08003998 <LTDC_IRQHandler>:

/**
  * @brief This function handles LCD-TFT global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <LTDC_IRQHandler+0x10>)
 800399e:	f002 ff45 	bl	800682c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	200005a4 	.word	0x200005a4

080039ac <DSI_IRQHandler>:

/**
  * @brief This function handles DSIHOST global interrupt.
  */
void DSI_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <DSI_IRQHandler+0x10>)
 80039b2:	f001 f88b 	bl	8004acc <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200001cc 	.word	0x200001cc

080039c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039c4:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <SystemInit+0x68>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <SystemInit+0x68>)
 80039cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <SystemInit+0x6c>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80039da:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <SystemInit+0x6c>)
 80039dc:	2200      	movs	r2, #0
 80039de:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <SystemInit+0x6c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <SystemInit+0x6c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <SystemInit+0x6c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <SystemInit+0x6c>)
 80039f2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80039f6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80039fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <SystemInit+0x6c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <SystemInit+0x6c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <SystemInit+0x6c>)
 8003a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003a0e:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <SystemInit+0x6c>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <SystemInit+0x68>)
 8003a16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a1a:	609a      	str	r2, [r3, #8]
  #endif
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	e000ed00 	.word	0xe000ed00
 8003a2c:	46020c00 	.word	0x46020c00

08003a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a68 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a34:	f7ff ffc4 	bl	80039c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a3a:	e003      	b.n	8003a44 <LoopCopyDataInit>

08003a3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a42:	3104      	adds	r1, #4

08003a44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a44:	480a      	ldr	r0, [pc, #40]	; (8003a70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a4c:	d3f6      	bcc.n	8003a3c <CopyDataInit>
	ldr	r2, =_sbss
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a50:	e002      	b.n	8003a58 <LoopFillZerobss>

08003a52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a54:	f842 3b04 	str.w	r3, [r2], #4

08003a58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <LoopForever+0x16>)
	cmp	r2, r3
 8003a5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003a5c:	d3f9      	bcc.n	8003a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a5e:	f00a fc03 	bl	800e268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a62:	f7fd fb6b 	bl	800113c <main>

08003a66 <LoopForever>:

LoopForever:
    b LoopForever
 8003a66:	e7fe      	b.n	8003a66 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003a68:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003a6c:	0800e3d8 	.word	0x0800e3d8
	ldr	r0, =_sdata
 8003a70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a74:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8003a78:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003a7c:	20000854 	.word	0x20000854

08003a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a80:	e7fe      	b.n	8003a80 <ADC1_2_IRQHandler>
	...

08003a84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_Init+0x4c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <HAL_Init+0x4c>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f000 f914 	bl	8003cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003a9a:	f005 fc89 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <HAL_Init+0x50>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	490b      	ldr	r1, [pc, #44]	; (8003ad8 <HAL_Init+0x54>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <HAL_Init+0x58>)
 8003ab2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ab4:	200f      	movs	r0, #15
 8003ab6:	f7ff fe9f 	bl	80037f8 <HAL_InitTick>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e002      	b.n	8003aca <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac4:	f7fe fdbe 	bl	8002644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	46020c00 	.word	0x46020c00
 8003ad8:	0800e2c8 	.word	0x0800e2c8
 8003adc:	20000000 	.word	0x20000000

08003ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_IncTick+0x20>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_IncTick+0x24>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4413      	add	r3, r2
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_IncTick+0x24>)
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000008 	.word	0x20000008
 8003b04:	2000082c 	.word	0x2000082c

08003b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_GetTick+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	2000082c 	.word	0x2000082c

08003b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b28:	f7ff ffee 	bl	8003b08 <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d005      	beq.n	8003b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <HAL_Delay+0x44>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b46:	bf00      	nop
 8003b48:	f7ff ffde 	bl	8003b08 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d8f7      	bhi.n	8003b48 <HAL_Delay+0x28>
  {
  }
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000008 	.word	0x20000008

08003b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b84:	4013      	ands	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60d3      	str	r3, [r2, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	f003 0307 	and.w	r3, r3, #7
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db0b      	blt.n	8003bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	4907      	ldr	r1, [pc, #28]	; (8003c04 <__NVIC_EnableIRQ+0x38>)
 8003be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2001      	movs	r0, #1
 8003bee:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000e100 	.word	0xe000e100

08003c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	6039      	str	r1, [r7, #0]
 8003c12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	db0a      	blt.n	8003c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	490c      	ldr	r1, [pc, #48]	; (8003c54 <__NVIC_SetPriority+0x4c>)
 8003c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c26:	0112      	lsls	r2, r2, #4
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c30:	e00a      	b.n	8003c48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4908      	ldr	r1, [pc, #32]	; (8003c58 <__NVIC_SetPriority+0x50>)
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	0112      	lsls	r2, r2, #4
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	440b      	add	r3, r1
 8003c46:	761a      	strb	r2, [r3, #24]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000e100 	.word	0xe000e100
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f1c3 0307 	rsb	r3, r3, #7
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf28      	it	cs
 8003c7a:	2304      	movcs	r3, #4
 8003c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d902      	bls.n	8003c8c <NVIC_EncodePriority+0x30>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3b03      	subs	r3, #3
 8003c8a:	e000      	b.n	8003c8e <NVIC_EncodePriority+0x32>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c90:	f04f 32ff 	mov.w	r2, #4294967295
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	43d9      	mvns	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb4:	4313      	orrs	r3, r2
         );
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ff4c 	bl	8003b68 <__NVIC_SetPriorityGrouping>
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce6:	f7ff ff63 	bl	8003bb0 <__NVIC_GetPriorityGrouping>
 8003cea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	6978      	ldr	r0, [r7, #20]
 8003cf2:	f7ff ffb3 	bl	8003c5c <NVIC_EncodePriority>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ff82 	bl	8003c08 <__NVIC_SetPriority>
}
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff56 	bl	8003bcc <__NVIC_EnableIRQ>
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e054      	b.n	8003de4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7f5b      	ldrb	r3, [r3, #29]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe fd0e 	bl	800276c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	791b      	ldrb	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a22      	ldr	r2, [pc, #136]	; (8003dec <HAL_CRC_Init+0xc4>)
 8003d64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0218 	bic.w	r2, r2, #24
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	e00c      	b.n	8003d92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6899      	ldr	r1, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f834 	bl	8003df0 <HAL_CRCEx_Polynomial_Set>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e028      	b.n	8003de4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	795b      	ldrb	r3, [r3, #5]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003da2:	611a      	str	r2, [r3, #16]
 8003da4:	e004      	b.n	8003db0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6912      	ldr	r2, [r2, #16]
 8003dae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	04c11db7 	.word	0x04c11db7

08003df0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003e00:	231f      	movs	r3, #31
 8003e02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
 8003e12:	e063      	b.n	8003edc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e14:	bf00      	nop
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1e5a      	subs	r2, r3, #1
 8003e1a:	613a      	str	r2, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_CRCEx_Polynomial_Set+0x44>
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b18      	cmp	r3, #24
 8003e38:	d846      	bhi.n	8003ec8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003ecf 	.word	0x08003ecf
 8003e44:	08003ec9 	.word	0x08003ec9
 8003e48:	08003ec9 	.word	0x08003ec9
 8003e4c:	08003ec9 	.word	0x08003ec9
 8003e50:	08003ec9 	.word	0x08003ec9
 8003e54:	08003ec9 	.word	0x08003ec9
 8003e58:	08003ec9 	.word	0x08003ec9
 8003e5c:	08003ec9 	.word	0x08003ec9
 8003e60:	08003ebd 	.word	0x08003ebd
 8003e64:	08003ec9 	.word	0x08003ec9
 8003e68:	08003ec9 	.word	0x08003ec9
 8003e6c:	08003ec9 	.word	0x08003ec9
 8003e70:	08003ec9 	.word	0x08003ec9
 8003e74:	08003ec9 	.word	0x08003ec9
 8003e78:	08003ec9 	.word	0x08003ec9
 8003e7c:	08003ec9 	.word	0x08003ec9
 8003e80:	08003eb1 	.word	0x08003eb1
 8003e84:	08003ec9 	.word	0x08003ec9
 8003e88:	08003ec9 	.word	0x08003ec9
 8003e8c:	08003ec9 	.word	0x08003ec9
 8003e90:	08003ec9 	.word	0x08003ec9
 8003e94:	08003ec9 	.word	0x08003ec9
 8003e98:	08003ec9 	.word	0x08003ec9
 8003e9c:	08003ec9 	.word	0x08003ec9
 8003ea0:	08003ea5 	.word	0x08003ea5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d913      	bls.n	8003ed2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003eae:	e010      	b.n	8003ed2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b07      	cmp	r3, #7
 8003eb4:	d90f      	bls.n	8003ed6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003eba:	e00c      	b.n	8003ed6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	d90b      	bls.n	8003eda <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ec6:	e008      	b.n	8003eda <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
        break;
 8003ecc:	e006      	b.n	8003edc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e004      	b.n	8003edc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003eda:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10d      	bne.n	8003efe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 0118 	bic.w	r1, r3, #24
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e037      	b.n	8003f8e <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d119      	bne.n	8003f5e <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <HAL_DCACHE_Init+0x8c>)
 8003f2e:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_DCACHE_Init+0x90>)
 8003f34:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <HAL_DCACHE_Init+0x94>)
 8003f3a:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <HAL_DCACHE_Init+0x98>)
 8003f40:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_DCACHE_Init+0x9c>)
 8003f46:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a16      	ldr	r2, [pc, #88]	; (8003fac <HAL_DCACHE_Init+0xa0>)
 8003f54:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f814 	bl	8003fb0 <HAL_DCACHE_Enable>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]

  return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	0800404f 	.word	0x0800404f
 8003f9c:	08003fff 	.word	0x08003fff
 8003fa0:	08004013 	.word	0x08004013
 8003fa4:	0800403b 	.word	0x0800403b
 8003fa8:	08004027 	.word	0x08004027
 8003fac:	080027b1 	.word	0x080027b1

08003fb0 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e015      	b.n	8003ff2 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0309 	and.w	r3, r3, #9
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e00a      	b.n	8003ff0 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800406a:	f7ff fd4d 	bl	8003b08 <HAL_GetTick>
 800406e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06b      	b.n	8004152 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d008      	beq.n	8004098 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e05c      	b.n	8004152 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0204 	orr.w	r2, r2, #4
 80040a6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2205      	movs	r2, #5
 80040ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80040b0:	e020      	b.n	80040f4 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80040b2:	f7ff fd29 	bl	8003b08 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d919      	bls.n	80040f4 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	f043 0210 	orr.w	r2, r3, #16
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2203      	movs	r2, #3
 80040d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e4:	2201      	movs	r2, #1
 80040e6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e02e      	b.n	8004152 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0d7      	beq.n	80040b2 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0202 	orr.w	r2, r2, #2
 8004110:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2204      	movs	r2, #4
 8004116:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004122:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413c:	2201      	movs	r2, #1
 800413e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e053      	b.n	8004214 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fe fb4f 	bl	8002824 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6851      	ldr	r1, [r2, #4]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	69d2      	ldr	r2, [r2, #28]
 80041a4:	4311      	orrs	r1, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	430b      	orrs	r3, r1
 80041ac:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6891      	ldr	r1, [r2, #8]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6992      	ldr	r2, [r2, #24]
 80041c4:	4311      	orrs	r1, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68d1      	ldr	r1, [r2, #12]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	051a      	lsls	r2, r3, #20
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	055b      	lsls	r3, r3, #21
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d026      	beq.n	800428c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d021      	beq.n	800428c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004256:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	f043 0201 	orr.w	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2204      	movs	r2, #4
 8004270:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d026      	beq.n	80042e4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d021      	beq.n	80042e4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ae:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2220      	movs	r2, #32
 80042b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f043 0202 	orr.w	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2204      	movs	r2, #4
 80042c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d026      	beq.n	800433c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d021      	beq.n	800433c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004306:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	f043 0204 	orr.w	r2, r3, #4
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2204      	movs	r2, #4
 8004320:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferErrorCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d013      	beq.n	800436e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00e      	beq.n	800436e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2204      	movs	r2, #4
 8004366:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f853 	bl	8004414 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d024      	beq.n	80043c2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01f      	beq.n	80043c2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004390:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2202      	movs	r2, #2
 8004398:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      if (hdma2d->XferCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01f      	beq.n	800440c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01a      	beq.n	800440c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2210      	movs	r2, #16
 80043ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f80e 	bl	8004428 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800440c:	bf00      	nop
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_DMA2D_ConfigLayer+0x20>
 8004458:	2302      	movs	r3, #2
 800445a:	e084      	b.n	8004566 <HAL_DMA2D_ConfigLayer+0x12a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	3328      	adds	r3, #40	; 0x28
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004490:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <HAL_DMA2D_ConfigLayer+0x138>)
 800449e:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b0a      	cmp	r3, #10
 80044a6:	d003      	beq.n	80044b0 <HAL_DMA2D_ConfigLayer+0x74>
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b09      	cmp	r3, #9
 80044ae:	d107      	bne.n	80044c0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e005      	b.n	80044cc <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d120      	bne.n	8004514 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43db      	mvns	r3, r3
 80044dc:	ea02 0103 	and.w	r1, r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b0a      	cmp	r3, #10
 80044fa:	d003      	beq.n	8004504 <HAL_DMA2D_ConfigLayer+0xc8>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b09      	cmp	r3, #9
 8004502:	d127      	bne.n	8004554 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
 8004512:	e01f      	b.n	8004554 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	43db      	mvns	r3, r3
 800451e:	ea02 0103 	and.w	r1, r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	430a      	orrs	r2, r1
 800452a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b0a      	cmp	r3, #10
 800453c:	d003      	beq.n	8004546 <HAL_DMA2D_ConfigLayer+0x10a>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b09      	cmp	r3, #9
 8004544:	d106      	bne.n	8004554 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004552:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	ff33000f 	.word	0xff33000f

08004578 <DSI_ConfigBandControl>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
static void DSI_ConfigBandControl(DSI_HandleTypeDef *hdsi)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  /* Set Band Control Frequency for clock lane */
  hdsi->Instance->DPCBCR &= ~DSI_DPCBCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004590:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
  hdsi->Instance->DPCBCR |= (hdsi->Init.PHYFrequencyRange << DSI_DPCBCR_Pos);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8d3 1c04 	ldr.w	r1, [r3, #3076]	; 0xc04
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	00da      	lsls	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04

  /* Set the slew rate for clock lane */
  hdsi->Instance->DPCSRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	220e      	movs	r2, #14
 80045b2:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34

  /* Set Band Control Frequency for Data Lane0 */
  hdsi->Instance->DPDL0BCR &= ~DSI_DPDL0BCR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8d3 2c70 	ldr.w	r2, [r3, #3184]	; 0xc70
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 021f 	bic.w	r2, r2, #31
 80045c6:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
  hdsi->Instance->DPDL0BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL0BCR_Pos);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6912      	ldr	r2, [r2, #16]
 80045d2:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70

  /* Set the slew rate for data Lane0 */
  hdsi->Instance->DPDL0SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	220e      	movs	r2, #14
 80045dc:	f8c3 2ca0 	str.w	r2, [r3, #3232]	; 0xca0

  /* Set Band Control Frequency for Data Lane1 */
  hdsi->Instance->DPDL1BCR &= ~DSI_DPDL1BCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 021f 	bic.w	r2, r2, #31
 80045f0:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  hdsi->Instance->DPDL1BCR = (hdsi->Init.PHYFrequencyRange << DSI_DPDL1BCR_Pos);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6912      	ldr	r2, [r2, #16]
 80045fc:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08

  /* Set Slew rate for data Lane1 */
  hdsi->Instance->DPDL1SRCR = DSI_DPHY_SLEW_HS_TX_SPEED;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	220e      	movs	r2, #14
 8004606:	f8c3 2d38 	str.w	r2, [r3, #3384]	; 0xd38

  /* Set HS prepare offset for data lanes */
  hdsi->Instance->DPDL0HSOCR &= ~DSI_DPDL0HSOCR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8d3 2c5c 	ldr.w	r2, [r3, #3164]	; 0xc5c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800461a:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
  hdsi->Instance->DPDL1HSOCR &= ~DSI_DPDL1HSOCR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800462e:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4

  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d007      	beq.n	800464a <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
  if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_100MHZ_120MHZ) || \
 800463e:	2b02      	cmp	r3, #2
 8004640:	d003      	beq.n	800464a <DSI_ConfigBandControl+0xd2>
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_240MHZ_320MHZ))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
      (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_120MHZ_160MHZ) || \
 8004646:	2b05      	cmp	r3, #5
 8004648:	d10a      	bne.n	8004660 <DSI_ConfigBandControl+0xe8>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL0HSOCR_Pos);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET0 << DSI_DPDL1HSOCR_Pos);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 800465e:	e02c      	b.n	80046ba <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_80MHZ_100MHZ)  || \
 800466c:	2b03      	cmp	r3, #3
 800466e:	d007      	beq.n	8004680 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_160MHZ_200MHZ) || \
 8004674:	2b04      	cmp	r3, #4
 8004676:	d003      	beq.n	8004680 <DSI_ConfigBandControl+0x108>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_320MHZ_390MHZ))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_200MHZ_240MHZ) || \
 800467c:	2b06      	cmp	r3, #6
 800467e:	d10a      	bne.n	8004696 <DSI_ConfigBandControl+0x11e>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL0HSOCR_Pos);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2210      	movs	r2, #16
 8004686:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET1 << DSI_DPDL1HSOCR_Pos);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2210      	movs	r2, #16
 8004690:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
 8004694:	e011      	b.n	80046ba <DSI_ConfigBandControl+0x142>
  }
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b07      	cmp	r3, #7
 800469c:	d003      	beq.n	80046a6 <DSI_ConfigBandControl+0x12e>
           (hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_450MHZ_510MHZ))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
  else if ((hdsi->Init.PHYFrequencyRange == DSI_DPHY_FRANGE_390MHZ_450MHZ) || \
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d109      	bne.n	80046ba <DSI_ConfigBandControl+0x142>
  {
    hdsi->Instance->DPDL0HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL0HSOCR_Pos);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    hdsi->Instance->DPDL1HSOCR = (DSI_HS_PREPARE_OFFSET2 << DSI_DPDL1HSOCR_Pos);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  {
    /* Nothing to do */
  }

  /* Set LPXO value for data lanes */
  hdsi->Instance->DPDL0LPXOCR &= ~DSI_DPDL0LPXOCR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 020f 	bic.w	r2, r2, #15
 80046ca:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR &= ~DSI_DPDL1LPXOCR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8d3 2cf8 	ldr.w	r2, [r3, #3320]	; 0xcf8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 020f 	bic.w	r2, r2, #15
 80046de:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

  hdsi->Instance->DPDL0LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6952      	ldr	r2, [r2, #20]
 80046ea:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
  hdsi->Instance->DPDL1LPXOCR = hdsi->Init.PHYLowPowerOffset;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6952      	ldr	r2, [r2, #20]
 80046f6:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8

}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <DSI_SetWrapperPLLTuning>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
static void DSI_SetWrapperPLLTuning(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  /* Set the VCO Frequency */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_BC);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004720:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (PLLInit->PLLVCORange << DSI_WRPCR_BC_Pos);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	075a      	lsls	r2, r3, #29
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  hdsi->Instance->WPTR &= ~(DSI_WPTR_LPF | DSI_WPTR_CP);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800474c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL Tuning */
  hdsi->Instance->WPTR |= (PLLInit->PLLTuning << DSI_WPTR_LPF_Pos);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	031a      	lsls	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  /* Set PLL_Charge Value */
  hdsi->Instance->WPTR |= (PLLInit->PLLChargePump << DSI_WPTR_CP_Pos);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	021a      	lsls	r2, r3, #8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0c3      	b.n	8004928 <HAL_DSI_Init+0x19c>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	7e5b      	ldrb	r3, [r3, #25]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fe f862 	bl	8002874 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2203      	movs	r2, #3
 80047b4:	765a      	strb	r2, [r3, #25]

  /**************** Turn on the Reference Bias and enable the DSI PLL ****************/
  /* bias power up */
  hdsi->Instance->BCFGR |= DSI_BCFGR_PWRUP;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

  /* Requires min of 2ms delay, 2ms delay is inserted */
  HAL_Delay(2);
 80047ca:	2002      	movs	r0, #2
 80047cc:	f7ff f9a8 	bl	8003b20 <HAL_Delay>


  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b54      	ldr	r3, [pc, #336]	; (8004930 <HAL_DSI_Init+0x1a4>)
 80047de:	400b      	ands	r3, r1
 80047e0:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80047f8:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	051b      	lsls	r3, r3, #20
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004800:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /************************ Set D-PHY Band Control registers ******************************/
  /* Set Band Control Frequency and LPX Offset */
  DSI_ConfigBandControl(hdsi);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff feb3 	bl	8004578 <DSI_ConfigBandControl>

  /* Set PLL Tuning */
  DSI_SetWrapperPLLTuning(hdsi, PLLInit);
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff ff76 	bl	8004706 <DSI_SetWrapperPLLTuning>

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8004842:	2001      	movs	r0, #1
 8004844:	f7ff f96c 	bl	8003b20 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004848:	f7ff f95e 	bl	8003b08 <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800484e:	e008      	b.n	8004862 <HAL_DSI_Init+0xd6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004850:	f7ff f95a 	bl	8003b08 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_DSI_Init+0xd6>
    {
      return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e062      	b.n	8004928 <HAL_DSI_Init+0x19c>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0ee      	beq.n	8004850 <HAL_DSI_Init+0xc4>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0206 	orr.w	r2, r2, #6
 8004882:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0203 	bic.w	r2, r2, #3
 8004896:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0203 	bic.w	r2, r2, #3
 80048c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ec:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6899      	ldr	r1, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]


  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	621a      	str	r2, [r3, #32]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	61da      	str	r2, [r3, #28]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	765a      	strb	r2, [r3, #25]

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	e0000003 	.word	0xe0000003

08004934 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	7e1b      	ldrb	r3, [r3, #24]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_DSI_ConfigErrorMonitor+0x16>
 8004946:	2302      	movs	r3, #2
 8004948:	e0ba      	b.n	8004ac0 <HAL_DSI_ConfigErrorMonitor+0x18c>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	761a      	strb	r2, [r3, #24]

  hdsi->Instance->IER[0U] = 0U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2200      	movs	r2, #0
 8004956:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	621a      	str	r2, [r3, #32]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004984:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8004988:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80049a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0202 	orr.w	r2, r2, #2
 80049e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 020c 	orr.w	r2, r2, #12
 8004a00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0210 	orr.w	r2, r2, #16
 8004a1e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0220 	orr.w	r2, r2, #32
 8004a3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004a96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PBU) != 0U)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_DSI_ConfigErrorMonitor+0x184>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PBU_MASK;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004ab4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00f      	beq.n	8004b04 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f8b8 	bl	8004c74 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00f      	beq.n	8004b34 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f8aa 	bl	8004c88 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8097 	beq.w	8004c6c <HAL_DSI_IRQHandler+0x1a0>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004b46:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4013      	ands	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b5e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f043 0201 	orr.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f043 0202 	orr.w	r2, r3, #2
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f043 0204 	orr.w	r2, r3, #4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f043 0208 	orr.w	r2, r3, #8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f043 0210 	orr.w	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	61da      	str	r2, [r3, #28]
    }

    if ((ErrorStatus1 & DSI_ERROR_PBU_MASK) != 0U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_DSI_IRQHandler+0x192>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PBU;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	61da      	str	r2, [r3, #28]
    }
    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_DSI_IRQHandler+0x1a0>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f818 	bl	8004c9c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7e1b      	ldrb	r3, [r3, #24]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_DSI_SetGenericVCID+0x16>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e019      	b.n	8004cfa <HAL_DSI_SetGenericVCID+0x4a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	761a      	strb	r2, [r3, #24]

  /* Update the GVCIDR register with the Tx and Rx Virtual channel ID */
  hdsi->Instance->GVCIDR &= ~(DSI_GVCIDR_VCIDRX | DSI_GVCIDR_VCIDTX);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6b19      	ldr	r1, [r3, #48]	; 0x30
                             (VirtualChannelID << DSI_GVCIDR_VCIDTX_Pos));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	041a      	lsls	r2, r3, #16
  hdsi->Instance->GVCIDR |= ((VirtualChannelID << DSI_GVCIDR_VCIDRX_Pos) | \
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7e1b      	ldrb	r3, [r3, #24]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0c5      	b.n	8004ea8 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0201 	orr.w	r2, r2, #1
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0203 	bic.w	r2, r2, #3
 8004d68:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68d9      	ldr	r1, [r3, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0207 	bic.w	r2, r2, #7
 8004d8a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6959      	ldr	r1, [r3, #20]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 020f 	bic.w	r2, r2, #15
 8004db8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6919      	ldr	r1, [r3, #16]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 020e 	bic.w	r2, r2, #14
 8004ddc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	005a      	lsls	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	0c1b      	lsrs	r3, r3, #16
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004e2a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0202 	orr.w	r2, r2, #2
 8004e9c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7e1b      	ldrb	r3, [r3, #24]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_DSI_ConfigCommand+0x16>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e049      	b.n	8004f5e <HAL_DSI_ConfigCommand+0xaa>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	761a      	strb	r2, [r3, #24]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <HAL_DSI_ConfigCommand+0xb8>)
 8004edc:	400b      	ands	r3, r1
 8004ede:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004eee:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004ef4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004efa:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004f00:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004f06:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004f0c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004f12:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004f18:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004f1e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004f24:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004f2a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0202 	bic.w	r2, r2, #2
 8004f42:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	fef080ff 	.word	0xfef080ff

08004f70 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	7e1b      	ldrb	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_DSI_ConfigFlowControl+0x16>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e016      	b.n	8004fb4 <HAL_DSI_ConfigFlowControl+0x44>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	7e1b      	ldrb	r3, [r3, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_DSI_ConfigPhyTimer+0x16>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e084      	b.n	80050e0 <HAL_DSI_ConfigPhyTimer+0x120>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	761a      	strb	r2, [r3, #24]

  /* Insert LPX Offset into the timings */
  PhyTimers->ClockLaneHS2LPTime = PhyTimers->ClockLaneHS2LPTime + hdsi->Init.PHYLowPowerOffset;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	601a      	str	r2, [r3, #0]
  PhyTimers->ClockLaneLP2HSTime = PhyTimers->ClockLaneLP2HSTime + (3U * hdsi->Init.PHYLowPowerOffset);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	18ca      	adds	r2, r1, r3
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
  PhyTimers->DataLaneLP2HSTime  = PhyTimers->DataLaneLP2HSTime + (2U * hdsi->Init.PHYLowPowerOffset);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	441a      	add	r2, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	60da      	str	r2, [r3, #12]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4293      	cmp	r3, r2
 8005018:	bf38      	it	cc
 800501a:	4613      	movcc	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800502e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	041a      	lsls	r2, r3, #16
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800505c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneLP2HSTime | ((PhyTimers->DataLaneHS2LPTime) << 16U));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTRCR &= ~DSI_DLTRCR_MRD_TIME;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800508e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005092:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  hdsi->Instance->DLTRCR |= PhyTimers->DataLaneMaxReadTime;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80050bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	021a      	lsls	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	7e1b      	ldrb	r3, [r3, #24]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_DSI_ConfigHostTimeouts+0x16>
 80050fe:	2302      	movs	r3, #2
 8005100:	e0b4      	b.n	800526c <HAL_DSI_ConfigHostTimeouts+0x180>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	761a      	strb	r2, [r3, #24]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005116:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6899      	ldr	r1, [r3, #8]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	021a      	lsls	r2, r3, #8
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	b292      	uxth	r2, r2
 8005138:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	041a      	lsls	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	0c1b      	lsrs	r3, r3, #16
 800517c:	041b      	lsls	r3, r3, #16
 800517e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	0c1b      	lsrs	r3, r3, #16
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	0c1b      	lsrs	r3, r3, #16
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	695a      	ldr	r2, [r3, #20]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80051f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	0c1b      	lsrs	r3, r3, #16
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	761a      	strb	r2, [r3, #24]

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_GFXMMU_Init>:
  *         GFXMMU_InitTypeDef structure and initialize the associated handle.
  * @param  hgfxmmu GFXMMU handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GFXMMU_Init(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	73fb      	strb	r3, [r7, #15]

  /* Check GFXMMU handle */
  if (hgfxmmu == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <HAL_GFXMMU_Init+0x18>
  {
    status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
 800528e:	e06e      	b.n	800536e <HAL_GFXMMU_Init+0xf6>
      hgfxmmu->MspInitCallback = HAL_GFXMMU_MspInit;
    }
    hgfxmmu->MspInitCallback(hgfxmmu);
#else
    /* Call GFXMMU MSP init function */
    HAL_GFXMMU_MspInit(hgfxmmu);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fd fb73 	bl	800297c <HAL_GFXMMU_MspInit>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */

    /* Configure GFXMMU_CR register */
    hgfxmmu->Instance->CR = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
    hgfxmmu->Instance->CR |= (hgfxmmu->Init.BlocksPerLine);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
#if defined(GFXMMU_CR_CE)
    if (hgfxmmu->Init.CachePrefetch.Activation == ENABLE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	7f1b      	ldrb	r3, [r3, #28]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d12c      	bne.n	8005312 <HAL_GFXMMU_Init+0x9a>
    {
      assert_param(IS_GFXMMU_CACHE_LOCK(hgfxmmu->Init.CachePrefetch.CacheLock));
      assert_param(IS_GFXMMU_PREFETCH(hgfxmmu->Init.CachePrefetch.Prefetch));
      assert_param(IS_GFXMMU_OUTTER_BUFFERABILITY(hgfxmmu->Init.CachePrefetch.OutterBufferability));
      assert_param(IS_GFXMMU_OUTTER_CACHABILITY(hgfxmmu->Init.CachePrefetch.OutterCachability));
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a19      	ldr	r1, [r3, #32]
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                hgfxmmu->Init.CachePrefetch.CacheLock |
 80052c6:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                hgfxmmu->Init.CachePrefetch.Prefetch |
 80052cc:	4319      	orrs	r1, r3
                                hgfxmmu->Init.CachePrefetch.OutterCachability);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                hgfxmmu->Init.CachePrefetch.OutterBufferability |
 80052d2:	430b      	orrs	r3, r1
      hgfxmmu->Instance->CR |= (GFXMMU_CR_CE |
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052de:	601a      	str	r2, [r3, #0]
      if (hgfxmmu->Init.CachePrefetch.CacheLock == GFXMMU_CACHE_LOCK_ENABLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e8:	d10b      	bne.n	8005302 <HAL_GFXMMU_Init+0x8a>
      {
        assert_param(IS_GFXMMU_CACHE_LOCK_BUFFER(hgfxmmu->Init.CachePrefetch.CacheLockBuffer));
        assert_param(IS_GFXMMU_CACHE_FORCE(hgfxmmu->Init.CachePrefetch.CacheForce));
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                  hgfxmmu->Init.CachePrefetch.CacheForce);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        hgfxmmu->Instance->CR |= (hgfxmmu->Init.CachePrefetch.CacheLockBuffer |
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	601a      	str	r2, [r3, #0]
      }

      /* Force invalidate cache if cache is enabled */
      hgfxmmu->Instance->CCR |= GFXMMU_CACHE_FORCE_INVALIDATE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0202 	orr.w	r2, r2, #2
 8005310:	60da      	str	r2, [r3, #12]
      assert_param(IS_GFXMMU_ADDRESSCACHE_LOCK_BUFFER(hgfxmmu->Init.AddressCache.AddressCacheLockBuffer));
      hgfxmmu->Instance->CR |= GFXMMU_CR_ACE |
                               hgfxmmu->Init.AddressCache.AddressCacheLockBuffer;
    }
#endif /* GFXMMU_CR_ACE */
    if (hgfxmmu->Init.Interrupts.Activation == ENABLE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005318:	2b01      	cmp	r3, #1
 800531a:	d108      	bne.n	800532e <HAL_GFXMMU_Init+0xb6>
    {
      assert_param(IS_GFXMMU_INTERRUPTS(hgfxmmu->Init.Interrupts.UsedInterrupts));
      hgfxmmu->Instance->CR |= hgfxmmu->Init.Interrupts.UsedInterrupts;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
    }

    /* Configure default value on GFXMMU_DVR register */
    hgfxmmu->Instance->DVR = hgfxmmu->Init.DefaultValue;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	611a      	str	r2, [r3, #16]

    /* Configure physical buffer addresses on GFXMMU_BxCR registers */
    hgfxmmu->Instance->B0CR = hgfxmmu->Init.Buffers.Buf0Address;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	68d2      	ldr	r2, [r2, #12]
 8005340:	621a      	str	r2, [r3, #32]
    hgfxmmu->Instance->B1CR = hgfxmmu->Init.Buffers.Buf1Address;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6912      	ldr	r2, [r2, #16]
 800534a:	625a      	str	r2, [r3, #36]	; 0x24
    hgfxmmu->Instance->B2CR = hgfxmmu->Init.Buffers.Buf2Address;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6952      	ldr	r2, [r2, #20]
 8005354:	629a      	str	r2, [r3, #40]	; 0x28
    hgfxmmu->Instance->B3CR = hgfxmmu->Init.Buffers.Buf3Address;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6992      	ldr	r2, [r2, #24]
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Reset GFXMMU error code */
    hgfxmmu->ErrorCode = GFXMMU_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set GFXMMU to ready state */
    hgfxmmu->State = HAL_GFXMMU_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  /* Return function status */
  return status;
 800536e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_GFXMMU_ConfigLut>:
  */
HAL_StatusTypeDef HAL_GFXMMU_ConfigLut(GFXMMU_HandleTypeDef *hgfxmmu,
                                       uint32_t FirstLine,
                                       uint32_t LinesNumber,
                                       uint32_t Address)
{
 8005378:	b480      	push	{r7}
 800537a:	b08b      	sub	sp, #44	; 0x2c
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_GFXMMU_ALL_INSTANCE(hgfxmmu->Instance));
  assert_param(IS_GFXMMU_LUT_LINE(FirstLine));
  assert_param(IS_GFXMMU_LUT_LINES_NUMBER(LinesNumber));

  /* Check GFXMMU state and coherent parameters */
  if ((hgfxmmu->State != HAL_GFXMMU_STATE_READY) || ((FirstLine + LinesNumber) > 1024U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005392:	2b01      	cmp	r3, #1
 8005394:	d105      	bne.n	80053a2 <HAL_GFXMMU_ConfigLut+0x2a>
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a0:	d903      	bls.n	80053aa <HAL_GFXMMU_ConfigLut+0x32>
  {
    status = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80053a8:	e032      	b.n	8005410 <HAL_GFXMMU_ConfigLut+0x98>
    uint32_t current_line;
    uint32_t lutxl_address;
    uint32_t lutxh_address;

    /* Initialize local variables */
    current_address = Address;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	623b      	str	r3, [r7, #32]
    current_line    = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
    lutxl_address   = (uint32_t) &(hgfxmmu->Instance->LUT[2U * FirstLine]);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
    lutxh_address   = (uint32_t) &(hgfxmmu->Instance->LUT[(2U * FirstLine) + 1U]);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	3301      	adds	r3, #1
 80053ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

    /* Copy LUT from flash to look up RAM */
    while (current_line < LinesNumber)
 80053d8:	e016      	b.n	8005408 <HAL_GFXMMU_ConfigLut+0x90>
    {
      *((uint32_t *)lutxl_address) = *((uint32_t *)current_address);
 80053da:	6a3a      	ldr	r2, [r7, #32]
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	3304      	adds	r3, #4
 80053e6:	623b      	str	r3, [r7, #32]
      *((uint32_t *)lutxh_address) = *((uint32_t *)current_address);
 80053e8:	6a3a      	ldr	r2, [r7, #32]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	6812      	ldr	r2, [r2, #0]
 80053ee:	601a      	str	r2, [r3, #0]
      current_address += 4U;
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	3304      	adds	r3, #4
 80053f4:	623b      	str	r3, [r7, #32]
      lutxl_address += 8U;
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	3308      	adds	r3, #8
 80053fa:	61bb      	str	r3, [r7, #24]
      lutxh_address += 8U;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3308      	adds	r3, #8
 8005400:	617b      	str	r3, [r7, #20]
      current_line++;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3301      	adds	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
    while (current_line < LinesNumber)
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d3e4      	bcc.n	80053da <HAL_GFXMMU_ConfigLut+0x62>
    }
  }
  /* Return function status */
  return status;
 8005410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005414:	4618      	mov	r0, r3
 8005416:	372c      	adds	r7, #44	; 0x2c
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_GFXMMU_IRQHandler>:
  * @brief  This function handles the GFXMMU interrupts.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
void HAL_GFXMMU_IRQHandler(GFXMMU_HandleTypeDef *hgfxmmu)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t flags, interrupts, error;

  /* Read current flags and interrupts and determine which error occurs */
  flags = hgfxmmu->Instance->SR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	617b      	str	r3, [r7, #20]
  interrupts = (hgfxmmu->Instance->CR & GFXMMU_CR_ITS_MASK);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 031f 	and.w	r3, r3, #31
 800543a:	613b      	str	r3, [r7, #16]
  error = (flags & interrupts);
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <HAL_GFXMMU_IRQHandler+0x44>
  {
    /* Clear flags on GFXMMU_FCR register */
    hgfxmmu->Instance->FCR = error;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	609a      	str	r2, [r3, #8]

    /* Update GFXMMU error code */
    hgfxmmu->ErrorCode |= error;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Call GFXMMU error callback */
#if (USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1)
    hgfxmmu->ErrorCallback(hgfxmmu);
#else
    HAL_GFXMMU_ErrorCallback(hgfxmmu);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f804 	bl	800546c <HAL_GFXMMU_ErrorCallback>
#endif /* USE_HAL_GFXMMU_REGISTER_CALLBACKS == 1 */
  }
}
 8005464:	bf00      	nop
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_GFXMMU_ErrorCallback>:
  * @brief  Error callback.
  * @param  hgfxmmu GFXMMU handle.
  * @retval None.
  */
__weak void HAL_GFXMMU_ErrorCallback(GFXMMU_HandleTypeDef *hgfxmmu)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(hgfxmmu);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_GFXMMU_ErrorCallback could be implemented in the user file.
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005492:	e1ba      	b.n	800580a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	2101      	movs	r1, #1
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 81aa 	beq.w	8005804 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a55      	ldr	r2, [pc, #340]	; (8005608 <HAL_GPIO_Init+0x188>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d15d      	bne.n	8005574 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80054be:	2201      	movs	r2, #1
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	4013      	ands	r3, r2
 80054cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 0201 	and.w	r2, r3, #1
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	4313      	orrs	r3, r2
 80054e0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80054e8:	4a48      	ldr	r2, [pc, #288]	; (800560c <HAL_GPIO_Init+0x18c>)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054f0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80054f2:	4a46      	ldr	r2, [pc, #280]	; (800560c <HAL_GPIO_Init+0x18c>)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	08da      	lsrs	r2, r3, #3
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3208      	adds	r2, #8
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	220f      	movs	r2, #15
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	4013      	ands	r3, r2
 8005520:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	220b      	movs	r2, #11
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	4313      	orrs	r3, r2
 8005534:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	08da      	lsrs	r2, r3, #3
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3208      	adds	r2, #8
 800553e:	69f9      	ldr	r1, [r7, #28]
 8005540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	2203      	movs	r2, #3
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	4013      	ands	r3, r2
 800555a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	2202      	movs	r2, #2
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	4313      	orrs	r3, r2
 800556a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e067      	b.n	8005644 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d003      	beq.n	8005584 <HAL_GPIO_Init+0x104>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b12      	cmp	r3, #18
 8005582:	d145      	bne.n	8005610 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	08da      	lsrs	r2, r3, #3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3208      	adds	r2, #8
 800558c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005590:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	220f      	movs	r2, #15
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 020f 	and.w	r2, r3, #15
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	08da      	lsrs	r2, r3, #3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3208      	adds	r2, #8
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	2203      	movs	r2, #3
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	4013      	ands	r3, r2
 80055e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 0203 	and.w	r2, r3, #3
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e01e      	b.n	8005644 <HAL_GPIO_Init+0x1c4>
 8005606:	bf00      	nop
 8005608:	46020000 	.word	0x46020000
 800560c:	0800e320 	.word	0x0800e320
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	2203      	movs	r2, #3
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	4013      	ands	r3, r2
 8005626:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0203 	and.w	r2, r3, #3
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	4313      	orrs	r3, r2
 800563c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d00b      	beq.n	8005664 <HAL_GPIO_Init+0x1e4>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d007      	beq.n	8005664 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005658:	2b11      	cmp	r3, #17
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b12      	cmp	r3, #18
 8005662:	d130      	bne.n	80056c6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	4013      	ands	r3, r2
 800567a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	4313      	orrs	r3, r2
 800568c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800569a:	2201      	movs	r2, #1
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 0201 	and.w	r2, r3, #1
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d017      	beq.n	80056fe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	2203      	movs	r2, #3
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d07c      	beq.n	8005804 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800570a:	4a47      	ldr	r2, [pc, #284]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	3318      	adds	r3, #24
 8005712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005716:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	220f      	movs	r2, #15
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	4013      	ands	r3, r2
 800572c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0a9a      	lsrs	r2, r3, #10
 8005732:	4b3e      	ldr	r3, [pc, #248]	; (800582c <HAL_GPIO_Init+0x3ac>)
 8005734:	4013      	ands	r3, r2
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	f002 0203 	and.w	r2, r2, #3
 800573c:	00d2      	lsls	r2, r2, #3
 800573e:	4093      	lsls	r3, r2
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	4313      	orrs	r3, r2
 8005744:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005746:	4938      	ldr	r1, [pc, #224]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3318      	adds	r3, #24
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005754:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	43db      	mvns	r3, r3
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	4013      	ands	r3, r2
 8005762:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005778:	4a2b      	ldr	r2, [pc, #172]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800577e:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	43db      	mvns	r3, r3
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	4013      	ands	r3, r2
 800578c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80057a2:	4a21      	ldr	r2, [pc, #132]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 80057aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	4013      	ands	r3, r2
 80057b8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80057d6:	4b14      	ldr	r3, [pc, #80]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 80057d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	4013      	ands	r3, r2
 80057e6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80057fc:	4a0a      	ldr	r2, [pc, #40]	; (8005828 <HAL_GPIO_Init+0x3a8>)
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	3301      	adds	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	f47f ae3d 	bne.w	8005494 <HAL_GPIO_Init+0x14>
  }
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	3724      	adds	r7, #36	; 0x24
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	46022000 	.word	0x46022000
 800582c:	002f7f7f 	.word	0x002f7f7f

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800584c:	e002      	b.n	8005854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e01c      	b.n	80058ac <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	795b      	ldrb	r3, [r3, #5]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fd f8a6 	bl	80029cc <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	791b      	ldrb	r3, [r3, #4]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_GPU2D_Init+0x32>
 800588e:	2302      	movs	r3, #2
 8005890:	e00c      	b.n	80058ac <HAL_GPU2D_Init+0x4c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	33f8      	adds	r3, #248	; 0xf8
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d013      	beq.n	80058f8 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	33f8      	adds	r3, #248	; 0xf8
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f023 0201 	bic.w	r2, r3, #1
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 80058f0:	68f9      	ldr	r1, [r7, #12]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f80f 	bl	8005916 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 80058f8:	bf00      	nop
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f80f 	bl	800592c <HAL_GPU2D_ErrorCallback>
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8005934:	e7fe      	b.n	8005934 <HAL_GPU2D_ErrorCallback+0x8>

08005936 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e08d      	b.n	8005a64 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7fd f875 	bl	8002a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2224      	movs	r2, #36	; 0x24
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005986:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005996:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d107      	bne.n	80059b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ac:	609a      	str	r2, [r3, #8]
 80059ae:	e006      	b.n	80059be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d108      	bne.n	80059d8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d4:	605a      	str	r2, [r3, #4]
 80059d6:	e007      	b.n	80059e8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69d9      	ldr	r1, [r3, #28]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1a      	ldr	r2, [r3, #32]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0201 	orr.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	817b      	strh	r3, [r7, #10]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	813b      	strh	r3, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	f040 80f9 	bne.w	8005c86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_I2C_Mem_Write+0x34>
 8005a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0ed      	b.n	8005c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_I2C_Mem_Write+0x4e>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e0e6      	b.n	8005c88 <HAL_I2C_Mem_Write+0x21c>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ac2:	f7fe f821 	bl	8003b08 <HAL_GetTick>
 8005ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2319      	movs	r3, #25
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fac3 	bl	8006060 <I2C_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0d1      	b.n	8005c88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2221      	movs	r2, #33	; 0x21
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a3a      	ldr	r2, [r7, #32]
 8005afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b0c:	88f8      	ldrh	r0, [r7, #6]
 8005b0e:	893a      	ldrh	r2, [r7, #8]
 8005b10:	8979      	ldrh	r1, [r7, #10]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f9d3 	bl	8005ec8 <I2C_RequestMemoryWrite>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0a9      	b.n	8005c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2bff      	cmp	r3, #255	; 0xff
 8005b3c:	d90e      	bls.n	8005b5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	22ff      	movs	r2, #255	; 0xff
 8005b42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	8979      	ldrh	r1, [r7, #10]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fc3d 	bl	80063d4 <I2C_TransferConfig>
 8005b5a:	e00f      	b.n	8005b7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	8979      	ldrh	r1, [r7, #10]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fc2c 	bl	80063d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fabc 	bl	80060fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e07b      	b.n	8005c88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d034      	beq.n	8005c34 <HAL_I2C_Mem_Write+0x1c8>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d130      	bne.n	8005c34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2180      	movs	r1, #128	; 0x80
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fa3f 	bl	8006060 <I2C_WaitOnFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e04d      	b.n	8005c88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	2bff      	cmp	r3, #255	; 0xff
 8005bf4:	d90e      	bls.n	8005c14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	22ff      	movs	r2, #255	; 0xff
 8005bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	8979      	ldrh	r1, [r7, #10]
 8005c04:	2300      	movs	r3, #0
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fbe1 	bl	80063d4 <I2C_TransferConfig>
 8005c12:	e00f      	b.n	8005c34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	8979      	ldrh	r1, [r7, #10]
 8005c26:	2300      	movs	r3, #0
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fbd0 	bl	80063d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d19e      	bne.n	8005b7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 faa2 	bl	800618c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e01a      	b.n	8005c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2220      	movs	r2, #32
 8005c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6859      	ldr	r1, [r3, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <HAL_I2C_Mem_Write+0x224>)
 8005c66:	400b      	ands	r3, r1
 8005c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	e000      	b.n	8005c88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005c86:	2302      	movs	r3, #2
  }
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	fe00e800 	.word	0xfe00e800

08005c94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	817b      	strh	r3, [r7, #10]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	813b      	strh	r3, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	f040 80fd 	bne.w	8005eb6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_I2C_Mem_Read+0x34>
 8005cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0f1      	b.n	8005eb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2C_Mem_Read+0x4e>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e0ea      	b.n	8005eb8 <HAL_I2C_Mem_Read+0x224>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cea:	f7fd ff0d 	bl	8003b08 <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2319      	movs	r3, #25
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f9af 	bl	8006060 <I2C_WaitOnFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0d5      	b.n	8005eb8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2222      	movs	r2, #34	; 0x22
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2240      	movs	r2, #64	; 0x40
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a3a      	ldr	r2, [r7, #32]
 8005d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d34:	88f8      	ldrh	r0, [r7, #6]
 8005d36:	893a      	ldrh	r2, [r7, #8]
 8005d38:	8979      	ldrh	r1, [r7, #10]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	4603      	mov	r3, r0
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f913 	bl	8005f70 <I2C_RequestMemoryRead>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0ad      	b.n	8005eb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2bff      	cmp	r3, #255	; 0xff
 8005d64:	d90e      	bls.n	8005d84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	22ff      	movs	r2, #255	; 0xff
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	8979      	ldrh	r1, [r7, #10]
 8005d74:	4b52      	ldr	r3, [pc, #328]	; (8005ec0 <HAL_I2C_Mem_Read+0x22c>)
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fb29 	bl	80063d4 <I2C_TransferConfig>
 8005d82:	e00f      	b.n	8005da4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	8979      	ldrh	r1, [r7, #10]
 8005d96:	4b4a      	ldr	r3, [pc, #296]	; (8005ec0 <HAL_I2C_Mem_Read+0x22c>)
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fb18 	bl	80063d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2200      	movs	r2, #0
 8005dac:	2104      	movs	r1, #4
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f956 	bl	8006060 <I2C_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e07c      	b.n	8005eb8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d034      	beq.n	8005e64 <HAL_I2C_Mem_Read+0x1d0>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d130      	bne.n	8005e64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f927 	bl	8006060 <I2C_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e04d      	b.n	8005eb8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2bff      	cmp	r3, #255	; 0xff
 8005e24:	d90e      	bls.n	8005e44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	8979      	ldrh	r1, [r7, #10]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fac9 	bl	80063d4 <I2C_TransferConfig>
 8005e42:	e00f      	b.n	8005e64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	8979      	ldrh	r1, [r7, #10]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fab8 	bl	80063d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d19a      	bne.n	8005da4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f98a 	bl	800618c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e01a      	b.n	8005eb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2220      	movs	r2, #32
 8005e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6859      	ldr	r1, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_I2C_Mem_Read+0x230>)
 8005e96:	400b      	ands	r3, r1
 8005e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	80002400 	.word	0x80002400
 8005ec4:	fe00e800 	.word	0xfe00e800

08005ec8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	817b      	strh	r3, [r7, #10]
 8005eda:	460b      	mov	r3, r1
 8005edc:	813b      	strh	r3, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	8979      	ldrh	r1, [r7, #10]
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <I2C_RequestMemoryWrite+0xa4>)
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 fa6f 	bl	80063d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	69b9      	ldr	r1, [r7, #24]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f8ff 	bl	80060fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e02c      	b.n	8005f64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d105      	bne.n	8005f1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f10:	893b      	ldrh	r3, [r7, #8]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	629a      	str	r2, [r3, #40]	; 0x28
 8005f1a:	e015      	b.n	8005f48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f1c:	893b      	ldrh	r3, [r7, #8]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f8e5 	bl	80060fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e012      	b.n	8005f64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f3e:	893b      	ldrh	r3, [r7, #8]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f884 	bl	8006060 <I2C_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	80002000 	.word	0x80002000

08005f70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	817b      	strh	r3, [r7, #10]
 8005f82:	460b      	mov	r3, r1
 8005f84:	813b      	strh	r3, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	8979      	ldrh	r1, [r7, #10]
 8005f90:	4b20      	ldr	r3, [pc, #128]	; (8006014 <I2C_RequestMemoryRead+0xa4>)
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	2300      	movs	r3, #0
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fa1c 	bl	80063d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	69b9      	ldr	r1, [r7, #24]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f8ac 	bl	80060fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e02c      	b.n	800600a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d105      	bne.n	8005fc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fb6:	893b      	ldrh	r3, [r7, #8]
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc0:	e015      	b.n	8005fee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005fc2:	893b      	ldrh	r3, [r7, #8]
 8005fc4:	0a1b      	lsrs	r3, r3, #8
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	69b9      	ldr	r1, [r7, #24]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f892 	bl	80060fe <I2C_WaitOnTXISFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e012      	b.n	800600a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005fe4:	893b      	ldrh	r3, [r7, #8]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2140      	movs	r1, #64	; 0x40
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f831 	bl	8006060 <I2C_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	80002000 	.word	0x80002000

08006018 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b02      	cmp	r3, #2
 800602c:	d103      	bne.n	8006036 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2200      	movs	r2, #0
 8006034:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d007      	beq.n	8006054 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	619a      	str	r2, [r3, #24]
  }
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	4613      	mov	r3, r2
 800606e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006070:	e031      	b.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d02d      	beq.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607a:	f7fd fd45 	bl	8003b08 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d302      	bcc.n	8006090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d122      	bne.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d113      	bne.n	80060d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	f043 0220 	orr.w	r2, r3, #32
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e00f      	b.n	80060f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4013      	ands	r3, r2
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	bf0c      	ite	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	2300      	movne	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d0be      	beq.n	8006072 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800610a:	e033      	b.n	8006174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f87f 	bl	8006214 <I2C_IsErrorOccurred>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e031      	b.n	8006184 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d025      	beq.n	8006174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006128:	f7fd fcee 	bl	8003b08 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d11a      	bne.n	8006174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b02      	cmp	r3, #2
 800614a:	d013      	beq.n	8006174 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e007      	b.n	8006184 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b02      	cmp	r3, #2
 8006180:	d1c4      	bne.n	800610c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006198:	e02f      	b.n	80061fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f838 	bl	8006214 <I2C_IsErrorOccurred>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e02d      	b.n	800620a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ae:	f7fd fcab 	bl	8003b08 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d302      	bcc.n	80061c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11a      	bne.n	80061fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d013      	beq.n	80061fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e007      	b.n	800620a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b20      	cmp	r3, #32
 8006206:	d1c8      	bne.n	800619a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	; 0x28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b00      	cmp	r3, #0
 800623e:	d068      	beq.n	8006312 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2210      	movs	r2, #16
 8006246:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006248:	e049      	b.n	80062de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d045      	beq.n	80062de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006252:	f7fd fc59 	bl	8003b08 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	d302      	bcc.n	8006268 <I2C_IsErrorOccurred+0x54>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d13a      	bne.n	80062de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006272:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800627a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628a:	d121      	bne.n	80062d0 <I2C_IsErrorOccurred+0xbc>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006292:	d01d      	beq.n	80062d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006294:	7cfb      	ldrb	r3, [r7, #19]
 8006296:	2b20      	cmp	r3, #32
 8006298:	d01a      	beq.n	80062d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80062aa:	f7fd fc2d 	bl	8003b08 <HAL_GetTick>
 80062ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062b0:	e00e      	b.n	80062d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80062b2:	f7fd fc29 	bl	8003b08 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b19      	cmp	r3, #25
 80062be:	d907      	bls.n	80062d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	f043 0320 	orr.w	r3, r3, #32
 80062c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80062ce:	e006      	b.n	80062de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d1e9      	bne.n	80062b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d003      	beq.n	80062f4 <I2C_IsErrorOccurred+0xe0>
 80062ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0aa      	beq.n	800624a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80062f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2220      	movs	r2, #32
 8006302:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	f043 0304 	orr.w	r3, r3, #4
 800630a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	f043 0308 	orr.w	r3, r3, #8
 800634c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006356:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00b      	beq.n	8006380 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	f043 0302 	orr.w	r3, r3, #2
 800636e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006378:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01c      	beq.n	80063c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff fe45 	bl	8006018 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6859      	ldr	r1, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <I2C_IsErrorOccurred+0x1bc>)
 800639a:	400b      	ands	r3, r1
 800639c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80063c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	fe00e800 	.word	0xfe00e800

080063d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	607b      	str	r3, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	817b      	strh	r3, [r7, #10]
 80063e2:	4613      	mov	r3, r2
 80063e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063e6:	897b      	ldrh	r3, [r7, #10]
 80063e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063ec:	7a7b      	ldrb	r3, [r7, #9]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006402:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	0d5b      	lsrs	r3, r3, #21
 800640e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <I2C_TransferConfig+0x60>)
 8006414:	430b      	orrs	r3, r1
 8006416:	43db      	mvns	r3, r3
 8006418:	ea02 0103 	and.w	r1, r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	03ff63ff 	.word	0x03ff63ff

08006438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b20      	cmp	r3, #32
 800644c:	d138      	bne.n	80064c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006458:	2302      	movs	r3, #2
 800645a:	e032      	b.n	80064c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2224      	movs	r2, #36	; 0x24
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0201 	bic.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800648a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
  }
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d139      	bne.n	8006558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e033      	b.n	800655a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2224      	movs	r2, #36	; 0x24
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_ICACHE_Enable+0x1c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a04      	ldr	r2, [pc, #16]	; (8006584 <HAL_ICACHE_Enable+0x1c>)
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	40030400 	.word	0x40030400

08006588 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8006592:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <HAL_ICACHE_Disable+0x5c>)
 8006594:	2202      	movs	r2, #2
 8006596:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006598:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <HAL_ICACHE_Disable+0x5c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a11      	ldr	r2, [pc, #68]	; (80065e4 <HAL_ICACHE_Disable+0x5c>)
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065a4:	f7fd fab0 	bl	8003b08 <HAL_GetTick>
 80065a8:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80065aa:	e00f      	b.n	80065cc <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 80065ac:	f7fd faac 	bl	8003b08 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d908      	bls.n	80065cc <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80065ba:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <HAL_ICACHE_Disable+0x5c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	71fb      	strb	r3, [r7, #7]
        break;
 80065ca:	e005      	b.n	80065d8 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <HAL_ICACHE_Disable+0x5c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e9      	bne.n	80065ac <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 80065d8:	79fb      	ldrb	r3, [r7, #7]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40030400 	.word	0x40030400

080065e8 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80065f6:	4b22      	ldr	r3, [pc, #136]	; (8006680 <HAL_ICACHE_EnableRemapRegion+0x98>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
 8006606:	e034      	b.n	8006672 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	009a      	lsls	r2, r3, #2
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 800660e:	4413      	add	r3, r2
 8006610:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	75fb      	strb	r3, [r7, #23]
 8006622:	e026      	b.n	8006672 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8006630:	4013      	ands	r3, r2
 8006632:	b2db      	uxtb	r3, r3
 8006634:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	425b      	negs	r3, r3
 8006642:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8006644:	401a      	ands	r2, r3
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8006648:	4013      	ands	r3, r2
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	025a      	lsls	r2, r3, #9
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8006660:	4313      	orrs	r3, r2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8006672:	7dfb      	ldrb	r3, [r7, #23]
}
 8006674:	4618      	mov	r0, r3
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	40030400 	.word	0x40030400
 8006684:	40030420 	.word	0x40030420
 8006688:	07ff0000 	.word	0x07ff0000

0800668c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e0bf      	b.n	800681e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fc fd76 	bl	80031a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80066ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6999      	ldr	r1, [r3, #24]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6899      	ldr	r1, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b4a      	ldr	r3, [pc, #296]	; (8006828 <HAL_LTDC_Init+0x19c>)
 8006700:	400b      	ands	r3, r1
 8006702:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6899      	ldr	r1, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68d9      	ldr	r1, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <HAL_LTDC_Init+0x19c>)
 800672e:	400b      	ands	r3, r1
 8006730:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	041b      	lsls	r3, r3, #16
 8006738:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68d9      	ldr	r1, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6919      	ldr	r1, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b33      	ldr	r3, [pc, #204]	; (8006828 <HAL_LTDC_Init+0x19c>)
 800675c:	400b      	ands	r3, r1
 800675e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	041b      	lsls	r3, r3, #16
 8006766:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6919      	ldr	r1, [r3, #16]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6959      	ldr	r1, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	4b27      	ldr	r3, [pc, #156]	; (8006828 <HAL_LTDC_Init+0x19c>)
 800678a:	400b      	ands	r3, r1
 800678c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	041b      	lsls	r3, r3, #16
 8006794:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6959      	ldr	r1, [r3, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80067bc:	041b      	lsls	r3, r3, #16
 80067be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0206 	orr.w	r2, r2, #6
 80067fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	f000f800 	.word	0xf000f800

0800682c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d023      	beq.n	8006896 <HAL_LTDC_IRQHandler+0x6a>
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01e      	beq.n	8006896 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0204 	bic.w	r2, r2, #4
 8006866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2204      	movs	r2, #4
 800686e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006876:	f043 0201 	orr.w	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2204      	movs	r2, #4
 8006884:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f86f 	bl	8006974 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d023      	beq.n	80068e8 <HAL_LTDC_IRQHandler+0xbc>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01e      	beq.n	80068e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0202 	bic.w	r2, r2, #2
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2202      	movs	r2, #2
 80068c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068c8:	f043 0202 	orr.w	r2, r3, #2
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2204      	movs	r2, #4
 80068d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f846 	bl	8006974 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01b      	beq.n	800692a <HAL_LTDC_IRQHandler+0xfe>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d016      	beq.n	800692a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2201      	movs	r2, #1
 8006912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f82f 	bl	8006988 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01b      	beq.n	800696c <HAL_LTDC_IRQHandler+0x140>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d016      	beq.n	800696c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0208 	bic.w	r2, r2, #8
 800694c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2208      	movs	r2, #8
 8006954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f818 	bl	800699c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069b0:	b5b0      	push	{r4, r5, r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_LTDC_ConfigLayer+0x1a>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e02c      	b.n	8006a24 <HAL_LTDC_ConfigLayer+0x74>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2134      	movs	r1, #52	; 0x34
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	4413      	add	r3, r2
 80069e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	4614      	mov	r4, r2
 80069ee:	461d      	mov	r5, r3
 80069f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f811 	bl	8006a2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bdb0      	pop	{r4, r5, r7, pc}

08006a2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	0c1b      	lsrs	r3, r3, #16
 8006a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a48:	4413      	add	r3, r2
 8006a4a:	041b      	lsls	r3, r3, #16
 8006a4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	01db      	lsls	r3, r3, #7
 8006a58:	4413      	add	r3, r2
 8006a5a:	3384      	adds	r3, #132	; 0x84
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	4611      	mov	r1, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	01d2      	lsls	r2, r2, #7
 8006a68:	440a      	add	r2, r1
 8006a6a:	3284      	adds	r2, #132	; 0x84
 8006a6c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006a70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	0c1b      	lsrs	r3, r3, #16
 8006a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	01db      	lsls	r3, r3, #7
 8006a90:	440b      	add	r3, r1
 8006a92:	3384      	adds	r3, #132	; 0x84
 8006a94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aaa:	4413      	add	r3, r2
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	01db      	lsls	r3, r3, #7
 8006aba:	4413      	add	r3, r2
 8006abc:	3384      	adds	r3, #132	; 0x84
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	01d2      	lsls	r2, r2, #7
 8006aca:	440a      	add	r2, r1
 8006acc:	3284      	adds	r2, #132	; 0x84
 8006ace:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8006ad2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae2:	4413      	add	r3, r2
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4619      	mov	r1, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	01db      	lsls	r3, r3, #7
 8006af0:	440b      	add	r3, r1
 8006af2:	3384      	adds	r3, #132	; 0x84
 8006af4:	4619      	mov	r1, r3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	01db      	lsls	r3, r3, #7
 8006b06:	4413      	add	r3, r2
 8006b08:	3384      	adds	r3, #132	; 0x84
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	4611      	mov	r1, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	01d2      	lsls	r2, r2, #7
 8006b16:	440a      	add	r2, r1
 8006b18:	3284      	adds	r2, #132	; 0x84
 8006b1a:	f023 0307 	bic.w	r3, r3, #7
 8006b1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	01db      	lsls	r3, r3, #7
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3384      	adds	r3, #132	; 0x84
 8006b2e:	461a      	mov	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	061b      	lsls	r3, r3, #24
 8006b50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	01db      	lsls	r3, r3, #7
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3384      	adds	r3, #132	; 0x84
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	01db      	lsls	r3, r3, #7
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3384      	adds	r3, #132	; 0x84
 8006b70:	461a      	mov	r2, r3
 8006b72:	2300      	movs	r3, #0
 8006b74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	431a      	orrs	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	01db      	lsls	r3, r3, #7
 8006b90:	440b      	add	r3, r1
 8006b92:	3384      	adds	r3, #132	; 0x84
 8006b94:	4619      	mov	r1, r3
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	01db      	lsls	r3, r3, #7
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3384      	adds	r3, #132	; 0x84
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	01d2      	lsls	r2, r2, #7
 8006bb6:	440a      	add	r2, r1
 8006bb8:	3284      	adds	r2, #132	; 0x84
 8006bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	01db      	lsls	r3, r3, #7
 8006bca:	4413      	add	r3, r2
 8006bcc:	3384      	adds	r3, #132	; 0x84
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	4413      	add	r3, r2
 8006be2:	3384      	adds	r3, #132	; 0x84
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	4611      	mov	r1, r2
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	01d2      	lsls	r2, r2, #7
 8006bf0:	440a      	add	r2, r1
 8006bf2:	3284      	adds	r2, #132	; 0x84
 8006bf4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006bf8:	f023 0307 	bic.w	r3, r3, #7
 8006bfc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	69da      	ldr	r2, [r3, #28]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	6809      	ldr	r1, [r1, #0]
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	01c9      	lsls	r1, r1, #7
 8006c10:	4401      	add	r1, r0
 8006c12:	3184      	adds	r1, #132	; 0x84
 8006c14:	4313      	orrs	r3, r2
 8006c16:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	01db      	lsls	r3, r3, #7
 8006c22:	4413      	add	r3, r2
 8006c24:	3384      	adds	r3, #132	; 0x84
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	01db      	lsls	r3, r3, #7
 8006c32:	4413      	add	r3, r2
 8006c34:	3384      	adds	r3, #132	; 0x84
 8006c36:	461a      	mov	r2, r3
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	01db      	lsls	r3, r3, #7
 8006c46:	4413      	add	r3, r2
 8006c48:	3384      	adds	r3, #132	; 0x84
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d102      	bne.n	8006c60 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006c5a:	2304      	movs	r3, #4
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	e01b      	b.n	8006c98 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d102      	bne.n	8006c6e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	e014      	b.n	8006c98 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d00b      	beq.n	8006c8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d007      	beq.n	8006c8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d003      	beq.n	8006c8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c8a:	2b07      	cmp	r3, #7
 8006c8c:	d102      	bne.n	8006c94 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e001      	b.n	8006c98 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006c94:	2301      	movs	r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	01db      	lsls	r3, r3, #7
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3384      	adds	r3, #132	; 0x84
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	4611      	mov	r1, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	01d2      	lsls	r2, r2, #7
 8006cb2:	440a      	add	r2, r1
 8006cb4:	3284      	adds	r2, #132	; 0x84
 8006cb6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006cba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	fb02 f303 	mul.w	r3, r2, r3
 8006cc6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	6859      	ldr	r1, [r3, #4]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	1acb      	subs	r3, r1, r3
 8006cd2:	69f9      	ldr	r1, [r7, #28]
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006cda:	68f9      	ldr	r1, [r7, #12]
 8006cdc:	6809      	ldr	r1, [r1, #0]
 8006cde:	4608      	mov	r0, r1
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	01c9      	lsls	r1, r1, #7
 8006ce4:	4401      	add	r1, r0
 8006ce6:	3184      	adds	r1, #132	; 0x84
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	01db      	lsls	r3, r3, #7
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3384      	adds	r3, #132	; 0x84
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	6812      	ldr	r2, [r2, #0]
 8006d00:	4611      	mov	r1, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	01d2      	lsls	r2, r2, #7
 8006d06:	440a      	add	r2, r1
 8006d08:	3284      	adds	r2, #132	; 0x84
 8006d0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d0e:	f023 0307 	bic.w	r3, r3, #7
 8006d12:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	01db      	lsls	r3, r3, #7
 8006d1e:	4413      	add	r3, r2
 8006d20:	3384      	adds	r3, #132	; 0x84
 8006d22:	461a      	mov	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	01db      	lsls	r3, r3, #7
 8006d34:	4413      	add	r3, r2
 8006d36:	3384      	adds	r3, #132	; 0x84
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	01d2      	lsls	r2, r2, #7
 8006d44:	440a      	add	r2, r1
 8006d46:	3284      	adds	r2, #132	; 0x84
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	6013      	str	r3, [r2, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	3724      	adds	r7, #36	; 0x24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e141      	b.n	8006ff8 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f947 	bl	800700c <MDF_GetHandleNumberFromInstance>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4a86      	ldr	r2, [pc, #536]	; (8006f9c <HAL_MDF_Init+0x240>)
 8006d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
 8006d8e:	e133      	b.n	8006ff8 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fb fc71 	bl	8002678 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006d96:	4b82      	ldr	r3, [pc, #520]	; (8006fa0 <HAL_MDF_Init+0x244>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d11d      	bne.n	8006dda <HAL_MDF_Init+0x7e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a80      	ldr	r2, [pc, #512]	; (8006fa4 <HAL_MDF_Init+0x248>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d023      	beq.n	8006df0 <HAL_MDF_Init+0x94>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a7e      	ldr	r2, [pc, #504]	; (8006fa8 <HAL_MDF_Init+0x24c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01e      	beq.n	8006df0 <HAL_MDF_Init+0x94>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a7d      	ldr	r2, [pc, #500]	; (8006fac <HAL_MDF_Init+0x250>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d019      	beq.n	8006df0 <HAL_MDF_Init+0x94>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a7b      	ldr	r2, [pc, #492]	; (8006fb0 <HAL_MDF_Init+0x254>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d014      	beq.n	8006df0 <HAL_MDF_Init+0x94>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a7a      	ldr	r2, [pc, #488]	; (8006fb4 <HAL_MDF_Init+0x258>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00f      	beq.n	8006df0 <HAL_MDF_Init+0x94>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a78      	ldr	r2, [pc, #480]	; (8006fb8 <HAL_MDF_Init+0x25c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d00a      	beq.n	8006df0 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006dda:	4b78      	ldr	r3, [pc, #480]	; (8006fbc <HAL_MDF_Init+0x260>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 8090 	bne.w	8006f04 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a75      	ldr	r2, [pc, #468]	; (8006fc0 <HAL_MDF_Init+0x264>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	f040 808a 	bne.w	8006f04 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a72      	ldr	r2, [pc, #456]	; (8006fc0 <HAL_MDF_Init+0x264>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d101      	bne.n	8006dfe <HAL_MDF_Init+0xa2>
 8006dfa:	4b72      	ldr	r3, [pc, #456]	; (8006fc4 <HAL_MDF_Init+0x268>)
 8006dfc:	e000      	b.n	8006e00 <HAL_MDF_Init+0xa4>
 8006dfe:	4b72      	ldr	r3, [pc, #456]	; (8006fc8 <HAL_MDF_Init+0x26c>)
 8006e00:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da02      	bge.n	8006e10 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	73fb      	strb	r3, [r7, #15]
 8006e0e:	e079      	b.n	8006f04 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a63      	ldr	r2, [pc, #396]	; (8006fa4 <HAL_MDF_Init+0x248>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d018      	beq.n	8006e4c <HAL_MDF_Init+0xf0>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a62      	ldr	r2, [pc, #392]	; (8006fa8 <HAL_MDF_Init+0x24c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d013      	beq.n	8006e4c <HAL_MDF_Init+0xf0>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a60      	ldr	r2, [pc, #384]	; (8006fac <HAL_MDF_Init+0x250>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00e      	beq.n	8006e4c <HAL_MDF_Init+0xf0>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a5f      	ldr	r2, [pc, #380]	; (8006fb0 <HAL_MDF_Init+0x254>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d009      	beq.n	8006e4c <HAL_MDF_Init+0xf0>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a5d      	ldr	r2, [pc, #372]	; (8006fb4 <HAL_MDF_Init+0x258>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_MDF_Init+0xf0>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a5c      	ldr	r2, [pc, #368]	; (8006fb8 <HAL_MDF_Init+0x25c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d10d      	bne.n	8006e68 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	431a      	orrs	r2, r3
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	061b      	lsls	r3, r3, #24
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7b1b      	ldrb	r3, [r3, #12]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d137      	bne.n	8006ef8 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006e98:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8006ea0:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7e1b      	ldrb	r3, [r3, #24]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d123      	bne.n	8006ef8 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a3b      	ldr	r2, [pc, #236]	; (8006fa4 <HAL_MDF_Init+0x248>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d012      	beq.n	8006ee0 <HAL_MDF_Init+0x184>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a3a      	ldr	r2, [pc, #232]	; (8006fa8 <HAL_MDF_Init+0x24c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_MDF_Init+0x184>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a38      	ldr	r2, [pc, #224]	; (8006fac <HAL_MDF_Init+0x250>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d008      	beq.n	8006ee0 <HAL_MDF_Init+0x184>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a37      	ldr	r2, [pc, #220]	; (8006fb0 <HAL_MDF_Init+0x254>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <HAL_MDF_Init+0x184>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a35      	ldr	r2, [pc, #212]	; (8006fb4 <HAL_MDF_Init+0x258>)
 8006ede:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006eec:	430b      	orrs	r3, r1
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f043 0210 	orr.w	r2, r3, #16
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f043 0201 	orr.w	r2, r3, #1
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d128      	bne.n	8006f5c <HAL_MDF_Init+0x200>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d123      	bne.n	8006f5c <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	da02      	bge.n	8006f24 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	73fb      	strb	r3, [r7, #15]
 8006f22:	e01b      	b.n	8006f5c <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6819      	ldr	r1, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006f3c:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d14a      	bne.n	8006ff8 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 021f 	bic.w	r2, r2, #31
 8006f70:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6859      	ldr	r1, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a0d      	ldr	r2, [pc, #52]	; (8006fc0 <HAL_MDF_Init+0x264>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d11e      	bne.n	8006fcc <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <HAL_MDF_Init+0x260>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	4a09      	ldr	r2, [pc, #36]	; (8006fbc <HAL_MDF_Init+0x260>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	e01d      	b.n	8006fd6 <HAL_MDF_Init+0x27a>
 8006f9a:	bf00      	nop
 8006f9c:	20000838 	.word	0x20000838
 8006fa0:	20000830 	.word	0x20000830
 8006fa4:	40025080 	.word	0x40025080
 8006fa8:	40025100 	.word	0x40025100
 8006fac:	40025180 	.word	0x40025180
 8006fb0:	40025200 	.word	0x40025200
 8006fb4:	40025280 	.word	0x40025280
 8006fb8:	40025300 	.word	0x40025300
 8006fbc:	20000834 	.word	0x20000834
 8006fc0:	46024080 	.word	0x46024080
 8006fc4:	46024000 	.word	0x46024000
 8006fc8:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <HAL_MDF_Init+0x2a8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	4a0c      	ldr	r2, [pc, #48]	; (8007004 <HAL_MDF_Init+0x2a8>)
 8006fd4:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f816 	bl	800700c <MDF_GetHandleNumberFromInstance>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	4909      	ldr	r1, [pc, #36]	; (8007008 <HAL_MDF_Init+0x2ac>)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000830 	.word	0x20000830
 8007008:	20000838 	.word	0x20000838

0800700c <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a19      	ldr	r2, [pc, #100]	; (800707c <MDF_GetHandleNumberFromInstance+0x70>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d102      	bne.n	8007022 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e024      	b.n	800706c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <MDF_GetHandleNumberFromInstance+0x74>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d102      	bne.n	8007030 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 800702a:	2301      	movs	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e01d      	b.n	800706c <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a14      	ldr	r2, [pc, #80]	; (8007084 <MDF_GetHandleNumberFromInstance+0x78>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d102      	bne.n	800703e <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8007038:	2302      	movs	r3, #2
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	e016      	b.n	800706c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a11      	ldr	r2, [pc, #68]	; (8007088 <MDF_GetHandleNumberFromInstance+0x7c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d102      	bne.n	800704c <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8007046:	2303      	movs	r3, #3
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e00f      	b.n	800706c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0f      	ldr	r2, [pc, #60]	; (800708c <MDF_GetHandleNumberFromInstance+0x80>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d102      	bne.n	800705a <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8007054:	2304      	movs	r3, #4
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e008      	b.n	800706c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a0c      	ldr	r2, [pc, #48]	; (8007090 <MDF_GetHandleNumberFromInstance+0x84>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d102      	bne.n	8007068 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8007062:	2305      	movs	r3, #5
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	e001      	b.n	800706c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8007068:	2306      	movs	r3, #6
 800706a:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 800706c:	68fb      	ldr	r3, [r7, #12]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40025080 	.word	0x40025080
 8007080:	40025100 	.word	0x40025100
 8007084:	40025180 	.word	0x40025180
 8007088:	40025200 	.word	0x40025200
 800708c:	40025280 	.word	0x40025280
 8007090:	40025300 	.word	0x40025300

08007094 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f043 0201 	orr.w	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	601a      	str	r2, [r3, #0]
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80070c0:	f7fc fd22 	bl	8003b08 <HAL_GetTick>
 80070c4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
 80070d0:	e0a5      	b.n	800721e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 809e 	bne.w	800721e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fc f8b4 	bl	8003250 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80070e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f951 	bl	8007394 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	4b4b      	ldr	r3, [pc, #300]	; (8007228 <HAL_OSPI_Init+0x174>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	68d1      	ldr	r1, [r2, #12]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6912      	ldr	r2, [r2, #16]
 8007104:	3a01      	subs	r2, #1
 8007106:	0412      	lsls	r2, r2, #16
 8007108:	4311      	orrs	r1, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6952      	ldr	r2, [r2, #20]
 800710e:	3a01      	subs	r2, #1
 8007110:	0212      	lsls	r2, r2, #8
 8007112:	4311      	orrs	r1, r2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007118:	4311      	orrs	r1, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	69d2      	ldr	r2, [r2, #28]
 800711e:	4311      	orrs	r1, r2
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	430b      	orrs	r3, r1
 8007126:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1a      	ldr	r2, [r3, #32]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007158:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	3b01      	subs	r3, #1
 800716a:	021a      	lsls	r2, r3, #8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2200      	movs	r2, #0
 800717e:	2120      	movs	r1, #32
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fe09 	bl	8007d98 <OSPI_WaitFlagStateUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d146      	bne.n	800721e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	1e5a      	subs	r2, r3, #1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80071c6:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0201 	orr.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d107      	bne.n	8007206 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0202 	orr.w	r2, r2, #2
 8007204:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800720e:	d103      	bne.n	8007218 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	651a      	str	r2, [r3, #80]	; 0x50
 8007216:	e002      	b.n	800721e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	f8e0c0f4 	.word	0xf8e0c0f4

0800722c <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	; 0x28
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8007238:	f7fc fc66 	bl	8003b08 <HAL_GetTick>
 800723c:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007242:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d002      	beq.n	8007250 <HAL_OSPI_HyperbusCfg+0x24>
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d122      	bne.n	8007296 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	2200      	movs	r2, #0
 8007258:	2120      	movs	r1, #32
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 fd9c 	bl	8007d98 <OSPI_WaitFlagStateUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8007264:	7ffb      	ldrb	r3, [r7, #31]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d11a      	bne.n	80072a0 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	041a      	lsls	r2, r3, #16
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	431a      	orrs	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	ea42 0103 	orr.w	r1, r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2202      	movs	r2, #2
 8007292:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 8007294:	e004      	b.n	80072a0 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2210      	movs	r2, #16
 800729e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 80072a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b088      	sub	sp, #32
 80072ae:	af02      	add	r7, sp, #8
 80072b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80072b6:	f7fc fc27 	bl	8003b08 <HAL_GetTick>
 80072ba:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <HAL_OSPI_Abort+0x2c>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d052      	beq.n	800737c <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d014      	beq.n	800730e <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0204 	bic.w	r2, r2, #4
 80072f2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fc feb2 	bl	8004062 <HAL_DMA_Abort>
 80072fe:	4603      	mov	r3, r0
 8007300:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2204      	movs	r2, #4
 800730c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d02b      	beq.n	8007374 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0202 	orr.w	r2, r2, #2
 800732a:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2201      	movs	r2, #1
 8007336:	2102      	movs	r1, #2
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fd2d 	bl	8007d98 <OSPI_WaitFlagStateUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d11f      	bne.n	8007388 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2202      	movs	r2, #2
 800734e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2200      	movs	r2, #0
 800735a:	2120      	movs	r1, #32
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fd1b 	bl	8007d98 <OSPI_WaitFlagStateUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10d      	bne.n	8007388 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007372:	e009      	b.n	8007388 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800737a:	e005      	b.n	8007388 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2210      	movs	r2, #16
 8007384:	655a      	str	r2, [r3, #84]	; 0x54
 8007386:	e000      	b.n	800738a <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007388:	bf00      	nop
  }

  /* Return function status */
  return status;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
	...

080073b4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b094      	sub	sp, #80	; 0x50
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a9d      	ldr	r2, [pc, #628]	; (8007648 <HAL_OSPIM_Config+0x294>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d105      	bne.n	80073e2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80073da:	2301      	movs	r3, #1
 80073dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80073e0:	e004      	b.n	80073ec <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80073e2:	2301      	movs	r3, #1
 80073e4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80073ec:	2300      	movs	r3, #0
 80073ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073f2:	e01d      	b.n	8007430 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80073f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073f8:	3301      	adds	r3, #1
 80073fa:	b2d8      	uxtb	r0, r3
 80073fc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007400:	f107 0114 	add.w	r1, r7, #20
 8007404:	4613      	mov	r3, r2
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	4413      	add	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	440b      	add	r3, r1
 800740e:	4619      	mov	r1, r3
 8007410:	f000 fd02 	bl	8007e18 <OSPIM_GetConfig>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2208      	movs	r2, #8
 8007424:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8007426:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800742a:	3301      	adds	r3, #1
 800742c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007434:	2b01      	cmp	r3, #1
 8007436:	d9dd      	bls.n	80073f4 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8007438:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 849e 	bne.w	8007d7e <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007442:	4b81      	ldr	r3, [pc, #516]	; (8007648 <HAL_OSPIM_Config+0x294>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800744e:	4b7e      	ldr	r3, [pc, #504]	; (8007648 <HAL_OSPIM_Config+0x294>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a7d      	ldr	r2, [pc, #500]	; (8007648 <HAL_OSPIM_Config+0x294>)
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800745a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800745e:	f043 0301 	orr.w	r3, r3, #1
 8007462:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007466:	4b79      	ldr	r3, [pc, #484]	; (800764c <HAL_OSPIM_Config+0x298>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007472:	4b76      	ldr	r3, [pc, #472]	; (800764c <HAL_OSPIM_Config+0x298>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a75      	ldr	r2, [pc, #468]	; (800764c <HAL_OSPIM_Config+0x298>)
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800747e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007482:	f043 0302 	orr.w	r3, r3, #2
 8007486:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800748a:	4971      	ldr	r1, [pc, #452]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 800748c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800748e:	4613      	mov	r3, r2
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	4413      	add	r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	3350      	adds	r3, #80	; 0x50
 8007498:	443b      	add	r3, r7
 800749a:	3b34      	subs	r3, #52	; 0x34
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3b01      	subs	r3, #1
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	486a      	ldr	r0, [pc, #424]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 80074a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074aa:	4613      	mov	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4413      	add	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	3350      	adds	r3, #80	; 0x50
 80074b4:	443b      	add	r3, r7
 80074b6:	3b34      	subs	r3, #52	; 0x34
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4403      	add	r3, r0
 80074c4:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80074c6:	4b62      	ldr	r3, [pc, #392]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80c0 	beq.w	8007654 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80074d4:	4b5e      	ldr	r3, [pc, #376]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a5d      	ldr	r2, [pc, #372]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 80074da:	f023 0301 	bic.w	r3, r3, #1
 80074de:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80074e0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	f040 8162 	bne.w	80077ae <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80074ea:	4959      	ldr	r1, [pc, #356]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 80074ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80074f0:	4613      	mov	r3, r2
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	4413      	add	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	3350      	adds	r3, #80	; 0x50
 80074fa:	443b      	add	r3, r7
 80074fc:	3b3c      	subs	r3, #60	; 0x3c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3b01      	subs	r3, #1
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	6859      	ldr	r1, [r3, #4]
 8007508:	4851      	ldr	r0, [pc, #324]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 800750a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800750e:	4613      	mov	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	3350      	adds	r3, #80	; 0x50
 8007518:	443b      	add	r3, r7
 800751a:	3b3c      	subs	r3, #60	; 0x3c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3b01      	subs	r3, #1
 8007520:	f041 0202 	orr.w	r2, r1, #2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4403      	add	r3, r0
 8007528:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800752a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	3350      	adds	r3, #80	; 0x50
 8007538:	443b      	add	r3, r7
 800753a:	3b38      	subs	r3, #56	; 0x38
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01f      	beq.n	8007582 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8007542:	4943      	ldr	r1, [pc, #268]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 8007544:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007548:	4613      	mov	r3, r2
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	4413      	add	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	3350      	adds	r3, #80	; 0x50
 8007552:	443b      	add	r3, r7
 8007554:	3b38      	subs	r3, #56	; 0x38
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3b01      	subs	r3, #1
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	6859      	ldr	r1, [r3, #4]
 8007560:	483b      	ldr	r0, [pc, #236]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 8007562:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007566:	4613      	mov	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	3350      	adds	r3, #80	; 0x50
 8007570:	443b      	add	r3, r7
 8007572:	3b38      	subs	r3, #56	; 0x38
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3b01      	subs	r3, #1
 8007578:	f041 0220 	orr.w	r2, r1, #32
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4403      	add	r3, r0
 8007580:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007582:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007586:	4613      	mov	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4413      	add	r3, r2
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	3350      	adds	r3, #80	; 0x50
 8007590:	443b      	add	r3, r7
 8007592:	3b30      	subs	r3, #48	; 0x30
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d023      	beq.n	80075e2 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800759a:	492d      	ldr	r1, [pc, #180]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 800759c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80075a0:	4613      	mov	r3, r2
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	4413      	add	r3, r2
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	3350      	adds	r3, #80	; 0x50
 80075aa:	443b      	add	r3, r7
 80075ac:	3b30      	subs	r3, #48	; 0x30
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	440b      	add	r3, r1
 80075ba:	6859      	ldr	r1, [r3, #4]
 80075bc:	4824      	ldr	r0, [pc, #144]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 80075be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80075c2:	4613      	mov	r3, r2
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4413      	add	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	3350      	adds	r3, #80	; 0x50
 80075cc:	443b      	add	r3, r7
 80075ce:	3b30      	subs	r3, #48	; 0x30
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4403      	add	r3, r0
 80075e0:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80075e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80075e6:	4613      	mov	r3, r2
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	4413      	add	r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	3350      	adds	r3, #80	; 0x50
 80075f0:	443b      	add	r3, r7
 80075f2:	3b2c      	subs	r3, #44	; 0x2c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 80d9 	beq.w	80077ae <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80075fc:	4914      	ldr	r1, [pc, #80]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 80075fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007602:	4613      	mov	r3, r2
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	4413      	add	r3, r2
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	3350      	adds	r3, #80	; 0x50
 800760c:	443b      	add	r3, r7
 800760e:	3b2c      	subs	r3, #44	; 0x2c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3b01      	subs	r3, #1
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	6859      	ldr	r1, [r3, #4]
 800761e:	480c      	ldr	r0, [pc, #48]	; (8007650 <HAL_OSPIM_Config+0x29c>)
 8007620:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007624:	4613      	mov	r3, r2
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	4413      	add	r3, r2
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	3350      	adds	r3, #80	; 0x50
 800762e:	443b      	add	r3, r7
 8007630:	3b2c      	subs	r3, #44	; 0x2c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3b01      	subs	r3, #1
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4403      	add	r3, r0
 8007642:	605a      	str	r2, [r3, #4]
 8007644:	e0b3      	b.n	80077ae <HAL_OSPIM_Config+0x3fa>
 8007646:	bf00      	nop
 8007648:	420d1400 	.word	0x420d1400
 800764c:	420d2400 	.word	0x420d2400
 8007650:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8007654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007656:	4613      	mov	r3, r2
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	4413      	add	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	3350      	adds	r3, #80	; 0x50
 8007660:	443b      	add	r3, r7
 8007662:	3b3c      	subs	r3, #60	; 0x3c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80a1 	beq.w	80077ae <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800766c:	4993      	ldr	r1, [pc, #588]	; (80078bc <HAL_OSPIM_Config+0x508>)
 800766e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	3350      	adds	r3, #80	; 0x50
 800767a:	443b      	add	r3, r7
 800767c:	3b3c      	subs	r3, #60	; 0x3c
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3b01      	subs	r3, #1
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	6859      	ldr	r1, [r3, #4]
 8007688:	488c      	ldr	r0, [pc, #560]	; (80078bc <HAL_OSPIM_Config+0x508>)
 800768a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800768c:	4613      	mov	r3, r2
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	3350      	adds	r3, #80	; 0x50
 8007696:	443b      	add	r3, r7
 8007698:	3b3c      	subs	r3, #60	; 0x3c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3b01      	subs	r3, #1
 800769e:	f021 0201 	bic.w	r2, r1, #1
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4403      	add	r3, r0
 80076a6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80076a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076aa:	4613      	mov	r3, r2
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	4413      	add	r3, r2
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	3350      	adds	r3, #80	; 0x50
 80076b4:	443b      	add	r3, r7
 80076b6:	3b38      	subs	r3, #56	; 0x38
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d01d      	beq.n	80076fa <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80076be:	497f      	ldr	r1, [pc, #508]	; (80078bc <HAL_OSPIM_Config+0x508>)
 80076c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c2:	4613      	mov	r3, r2
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	4413      	add	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	3350      	adds	r3, #80	; 0x50
 80076cc:	443b      	add	r3, r7
 80076ce:	3b38      	subs	r3, #56	; 0x38
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	6859      	ldr	r1, [r3, #4]
 80076da:	4878      	ldr	r0, [pc, #480]	; (80078bc <HAL_OSPIM_Config+0x508>)
 80076dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076de:	4613      	mov	r3, r2
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	4413      	add	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	3350      	adds	r3, #80	; 0x50
 80076e8:	443b      	add	r3, r7
 80076ea:	3b38      	subs	r3, #56	; 0x38
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	f021 0210 	bic.w	r2, r1, #16
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4403      	add	r3, r0
 80076f8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80076fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076fc:	4613      	mov	r3, r2
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	4413      	add	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	3350      	adds	r3, #80	; 0x50
 8007706:	443b      	add	r3, r7
 8007708:	3b30      	subs	r3, #48	; 0x30
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d021      	beq.n	8007754 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007710:	496a      	ldr	r1, [pc, #424]	; (80078bc <HAL_OSPIM_Config+0x508>)
 8007712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	3350      	adds	r3, #80	; 0x50
 800771e:	443b      	add	r3, r7
 8007720:	3b30      	subs	r3, #48	; 0x30
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3b01      	subs	r3, #1
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	6859      	ldr	r1, [r3, #4]
 8007730:	4862      	ldr	r0, [pc, #392]	; (80078bc <HAL_OSPIM_Config+0x508>)
 8007732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007734:	4613      	mov	r3, r2
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	4413      	add	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	3350      	adds	r3, #80	; 0x50
 800773e:	443b      	add	r3, r7
 8007740:	3b30      	subs	r3, #48	; 0x30
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3b01      	subs	r3, #1
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4403      	add	r3, r0
 8007752:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007756:	4613      	mov	r3, r2
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	4413      	add	r3, r2
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	3350      	adds	r3, #80	; 0x50
 8007760:	443b      	add	r3, r7
 8007762:	3b2c      	subs	r3, #44	; 0x2c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d021      	beq.n	80077ae <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800776a:	4954      	ldr	r1, [pc, #336]	; (80078bc <HAL_OSPIM_Config+0x508>)
 800776c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800776e:	4613      	mov	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4413      	add	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	3350      	adds	r3, #80	; 0x50
 8007778:	443b      	add	r3, r7
 800777a:	3b2c      	subs	r3, #44	; 0x2c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3b01      	subs	r3, #1
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	6859      	ldr	r1, [r3, #4]
 800778a:	484c      	ldr	r0, [pc, #304]	; (80078bc <HAL_OSPIM_Config+0x508>)
 800778c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800778e:	4613      	mov	r3, r2
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	4413      	add	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	3350      	adds	r3, #80	; 0x50
 8007798:	443b      	add	r3, r7
 800779a:	3b2c      	subs	r3, #44	; 0x2c
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3b01      	subs	r3, #1
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4403      	add	r3, r0
 80077ac:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6819      	ldr	r1, [r3, #0]
 80077b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077b6:	4613      	mov	r3, r2
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	4413      	add	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	3350      	adds	r3, #80	; 0x50
 80077c0:	443b      	add	r3, r7
 80077c2:	3b3c      	subs	r3, #60	; 0x3c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4299      	cmp	r1, r3
 80077c8:	d038      	beq.n	800783c <HAL_OSPIM_Config+0x488>
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077d2:	4613      	mov	r3, r2
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	4413      	add	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	3350      	adds	r3, #80	; 0x50
 80077dc:	443b      	add	r3, r7
 80077de:	3b38      	subs	r3, #56	; 0x38
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4299      	cmp	r1, r3
 80077e4:	d02a      	beq.n	800783c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	6899      	ldr	r1, [r3, #8]
 80077ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80077ee:	4613      	mov	r3, r2
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	4413      	add	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	3350      	adds	r3, #80	; 0x50
 80077f8:	443b      	add	r3, r7
 80077fa:	3b34      	subs	r3, #52	; 0x34
 80077fc:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80077fe:	4299      	cmp	r1, r3
 8007800:	d01c      	beq.n	800783c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	68d9      	ldr	r1, [r3, #12]
 8007806:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800780a:	4613      	mov	r3, r2
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	4413      	add	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	3350      	adds	r3, #80	; 0x50
 8007814:	443b      	add	r3, r7
 8007816:	3b30      	subs	r3, #48	; 0x30
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4299      	cmp	r1, r3
 800781c:	d00e      	beq.n	800783c <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6919      	ldr	r1, [r3, #16]
 8007822:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007826:	4613      	mov	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4413      	add	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	3350      	adds	r3, #80	; 0x50
 8007830:	443b      	add	r3, r7
 8007832:	3b2c      	subs	r3, #44	; 0x2c
 8007834:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007836:	4299      	cmp	r1, r3
 8007838:	f040 810e 	bne.w	8007a58 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6819      	ldr	r1, [r3, #0]
 8007840:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007844:	4613      	mov	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	4413      	add	r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	3350      	adds	r3, #80	; 0x50
 800784e:	443b      	add	r3, r7
 8007850:	3b3c      	subs	r3, #60	; 0x3c
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4299      	cmp	r1, r3
 8007856:	d133      	bne.n	80078c0 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	6859      	ldr	r1, [r3, #4]
 800785c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007860:	4613      	mov	r3, r2
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	4413      	add	r3, r2
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	3350      	adds	r3, #80	; 0x50
 800786a:	443b      	add	r3, r7
 800786c:	3b38      	subs	r3, #56	; 0x38
 800786e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007870:	4299      	cmp	r1, r3
 8007872:	d125      	bne.n	80078c0 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	68d9      	ldr	r1, [r3, #12]
 8007878:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800787c:	4613      	mov	r3, r2
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	4413      	add	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	3350      	adds	r3, #80	; 0x50
 8007886:	443b      	add	r3, r7
 8007888:	3b30      	subs	r3, #48	; 0x30
 800788a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800788c:	4299      	cmp	r1, r3
 800788e:	d117      	bne.n	80078c0 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6919      	ldr	r1, [r3, #16]
 8007894:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007898:	4613      	mov	r3, r2
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	4413      	add	r3, r2
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	3350      	adds	r3, #80	; 0x50
 80078a2:	443b      	add	r3, r7
 80078a4:	3b2c      	subs	r3, #44	; 0x2c
 80078a6:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d109      	bne.n	80078c0 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80078ac:	4b03      	ldr	r3, [pc, #12]	; (80078bc <HAL_OSPIM_Config+0x508>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a02      	ldr	r2, [pc, #8]	; (80078bc <HAL_OSPIM_Config+0x508>)
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e0ce      	b.n	8007a58 <HAL_OSPIM_Config+0x6a4>
 80078ba:	bf00      	nop
 80078bc:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80078c0:	49a4      	ldr	r1, [pc, #656]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 80078c2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078c6:	4613      	mov	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4413      	add	r3, r2
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	3350      	adds	r3, #80	; 0x50
 80078d0:	443b      	add	r3, r7
 80078d2:	3b3c      	subs	r3, #60	; 0x3c
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	440b      	add	r3, r1
 80078dc:	6859      	ldr	r1, [r3, #4]
 80078de:	489d      	ldr	r0, [pc, #628]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 80078e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80078e4:	4613      	mov	r3, r2
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4413      	add	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	3350      	adds	r3, #80	; 0x50
 80078ee:	443b      	add	r3, r7
 80078f0:	3b3c      	subs	r3, #60	; 0x3c
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	f021 0201 	bic.w	r2, r1, #1
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4403      	add	r3, r0
 80078fe:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007900:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007904:	4613      	mov	r3, r2
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	4413      	add	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	3350      	adds	r3, #80	; 0x50
 800790e:	443b      	add	r3, r7
 8007910:	3b38      	subs	r3, #56	; 0x38
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01f      	beq.n	8007958 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007918:	498e      	ldr	r1, [pc, #568]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 800791a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800791e:	4613      	mov	r3, r2
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	4413      	add	r3, r2
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	3350      	adds	r3, #80	; 0x50
 8007928:	443b      	add	r3, r7
 800792a:	3b38      	subs	r3, #56	; 0x38
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3b01      	subs	r3, #1
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	6859      	ldr	r1, [r3, #4]
 8007936:	4887      	ldr	r0, [pc, #540]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007938:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800793c:	4613      	mov	r3, r2
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	4413      	add	r3, r2
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	3350      	adds	r3, #80	; 0x50
 8007946:	443b      	add	r3, r7
 8007948:	3b38      	subs	r3, #56	; 0x38
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3b01      	subs	r3, #1
 800794e:	f021 0210 	bic.w	r2, r1, #16
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4403      	add	r3, r0
 8007956:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007958:	497e      	ldr	r1, [pc, #504]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 800795a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800795e:	4613      	mov	r3, r2
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	4413      	add	r3, r2
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	3350      	adds	r3, #80	; 0x50
 8007968:	443b      	add	r3, r7
 800796a:	3b34      	subs	r3, #52	; 0x34
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3b01      	subs	r3, #1
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	440b      	add	r3, r1
 8007974:	6859      	ldr	r1, [r3, #4]
 8007976:	4877      	ldr	r0, [pc, #476]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007978:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800797c:	4613      	mov	r3, r2
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	4413      	add	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	3350      	adds	r3, #80	; 0x50
 8007986:	443b      	add	r3, r7
 8007988:	3b34      	subs	r3, #52	; 0x34
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3b01      	subs	r3, #1
 800798e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4403      	add	r3, r0
 8007996:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007998:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800799c:	4613      	mov	r3, r2
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	4413      	add	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	3350      	adds	r3, #80	; 0x50
 80079a6:	443b      	add	r3, r7
 80079a8:	3b30      	subs	r3, #48	; 0x30
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d023      	beq.n	80079f8 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80079b0:	4968      	ldr	r1, [pc, #416]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 80079b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	3350      	adds	r3, #80	; 0x50
 80079c0:	443b      	add	r3, r7
 80079c2:	3b30      	subs	r3, #48	; 0x30
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3b01      	subs	r3, #1
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	6859      	ldr	r1, [r3, #4]
 80079d2:	4860      	ldr	r0, [pc, #384]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 80079d4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	3350      	adds	r3, #80	; 0x50
 80079e2:	443b      	add	r3, r7
 80079e4:	3b30      	subs	r3, #48	; 0x30
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4403      	add	r3, r0
 80079f6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80079f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80079fc:	4613      	mov	r3, r2
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	4413      	add	r3, r2
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	3350      	adds	r3, #80	; 0x50
 8007a06:	443b      	add	r3, r7
 8007a08:	3b2c      	subs	r3, #44	; 0x2c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d023      	beq.n	8007a58 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007a10:	4950      	ldr	r1, [pc, #320]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007a12:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007a16:	4613      	mov	r3, r2
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	4413      	add	r3, r2
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	3350      	adds	r3, #80	; 0x50
 8007a20:	443b      	add	r3, r7
 8007a22:	3b2c      	subs	r3, #44	; 0x2c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	6859      	ldr	r1, [r3, #4]
 8007a32:	4848      	ldr	r0, [pc, #288]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007a34:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007a38:	4613      	mov	r3, r2
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	4413      	add	r3, r2
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	3350      	adds	r3, #80	; 0x50
 8007a42:	443b      	add	r3, r7
 8007a44:	3b2c      	subs	r3, #44	; 0x2c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4403      	add	r3, r0
 8007a56:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8007a58:	4a3e      	ldr	r2, [pc, #248]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6c:	025b      	lsls	r3, r3, #9
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	4938      	ldr	r1, [pc, #224]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d018      	beq.n	8007abc <HAL_OSPIM_Config+0x708>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a92:	d813      	bhi.n	8007abc <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	1e5a      	subs	r2, r3, #1
 8007a9a:	4b2e      	ldr	r3, [pc, #184]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	0c1b      	lsrs	r3, r3, #16
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d90a      	bls.n	8007abc <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007aa6:	4b2b      	ldr	r3, [pc, #172]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	4927      	ldr	r1, [pc, #156]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 809a 	beq.w	8007bfe <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007aca:	4a22      	ldr	r2, [pc, #136]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f023 0203 	bic.w	r2, r3, #3
 8007adc:	491d      	ldr	r1, [pc, #116]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d011      	beq.n	8007b1a <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007af6:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b08:	4912      	ldr	r1, [pc, #72]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	f042 0210 	orr.w	r2, r2, #16
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d018      	beq.n	8007b58 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b26:	4a0b      	ldr	r2, [pc, #44]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b3c:	4905      	ldr	r1, [pc, #20]	; (8007b54 <HAL_OSPIM_Config+0x7a0>)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	440b      	add	r3, r1
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	e01b      	b.n	8007b8c <HAL_OSPIM_Config+0x7d8>
 8007b54:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d015      	beq.n	8007b8c <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b60:	4a8a      	ldr	r2, [pc, #552]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b76:	4985      	ldr	r1, [pc, #532]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	440b      	add	r3, r1
 8007b8a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d016      	beq.n	8007bc6 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b98:	4a7c      	ldr	r2, [pc, #496]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007bae:	4977      	ldr	r1, [pc, #476]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	e0c3      	b.n	8007d4e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80bf 	beq.w	8007d4e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bd0:	4a6e      	ldr	r2, [pc, #440]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007be6:	4969      	ldr	r1, [pc, #420]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	605a      	str	r2, [r3, #4]
 8007bfc:	e0a7      	b.n	8007d4e <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007bfe:	4a63      	ldr	r2, [pc, #396]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f023 0203 	bic.w	r2, r3, #3
 8007c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	431a      	orrs	r2, r3
 8007c16:	495d      	ldr	r1, [pc, #372]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	f042 0201 	orr.w	r2, r2, #1
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d014      	beq.n	8007c5a <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007c30:	4a56      	ldr	r2, [pc, #344]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c44:	015b      	lsls	r3, r3, #5
 8007c46:	431a      	orrs	r2, r3
 8007c48:	4950      	ldr	r1, [pc, #320]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	f042 0210 	orr.w	r2, r2, #16
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d019      	beq.n	8007c9a <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007c66:	4a49      	ldr	r2, [pc, #292]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c7e:	049b      	lsls	r3, r3, #18
 8007c80:	431a      	orrs	r2, r3
 8007c82:	4942      	ldr	r1, [pc, #264]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	605a      	str	r2, [r3, #4]
 8007c98:	e01c      	b.n	8007cd4 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d018      	beq.n	8007cd4 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007ca2:	4a3a      	ldr	r2, [pc, #232]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cba:	069b      	lsls	r3, r3, #26
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	4933      	ldr	r1, [pc, #204]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d019      	beq.n	8007d14 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007ce0:	4a2a      	ldr	r2, [pc, #168]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf8:	049b      	lsls	r3, r3, #18
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	4923      	ldr	r1, [pc, #140]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	e01c      	b.n	8007d4e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d018      	beq.n	8007d4e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007d1c:	4a1b      	ldr	r2, [pc, #108]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d34:	069b      	lsls	r3, r3, #26
 8007d36:	431a      	orrs	r2, r3
 8007d38:	4914      	ldr	r1, [pc, #80]	; (8007d8c <HAL_OSPIM_Config+0x9d8>)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	440b      	add	r3, r1
 8007d4c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007d4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d005      	beq.n	8007d66 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <HAL_OSPIM_Config+0x9dc>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a0c      	ldr	r2, [pc, #48]	; (8007d90 <HAL_OSPIM_Config+0x9dc>)
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007d66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d005      	beq.n	8007d7e <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007d72:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <HAL_OSPIM_Config+0x9e0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a07      	ldr	r2, [pc, #28]	; (8007d94 <HAL_OSPIM_Config+0x9e0>)
 8007d78:	f043 0301 	orr.w	r3, r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007d7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3750      	adds	r7, #80	; 0x50
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	420c4000 	.word	0x420c4000
 8007d90:	420d1400 	.word	0x420d1400
 8007d94:	420d2400 	.word	0x420d2400

08007d98 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007da8:	e022      	b.n	8007df0 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d01e      	beq.n	8007df0 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007db2:	f7fb fea9 	bl	8003b08 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d302      	bcc.n	8007dc8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d113      	bne.n	8007df0 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	401a      	ands	r2, r3
 8007dd2:	79fb      	ldrb	r3, [r7, #7]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d00b      	beq.n	8007df0 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dde:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de4:	f043 0201 	orr.w	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e00e      	b.n	8007e0e <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6a1a      	ldr	r2, [r3, #32]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bf14      	ite	ne
 8007dfe:	2301      	movne	r3, #1
 8007e00:	2300      	moveq	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d1ce      	bne.n	8007daa <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <OSPIM_GetConfig+0x26>
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d802      	bhi.n	8007e3e <OSPIM_GetConfig+0x26>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	75fb      	strb	r3, [r7, #23]
 8007e42:	e098      	b.n	8007f76 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d10b      	bne.n	8007e80 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007e68:	4b46      	ldr	r3, [pc, #280]	; (8007f84 <OSPIM_GetConfig+0x16c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007e74:	4b44      	ldr	r3, [pc, #272]	; (8007f88 <OSPIM_GetConfig+0x170>)
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	e002      	b.n	8007e80 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e7e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	e074      	b.n	8007f70 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007e86:	4a3f      	ldr	r2, [pc, #252]	; (8007f84 <OSPIM_GetConfig+0x16c>)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	4053      	eors	r3, r2
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d103      	bne.n	8007eb2 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	4053      	eors	r3, r2
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d103      	bne.n	8007ed2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	4053      	eors	r3, r2
 8007ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d018      	beq.n	8007f2e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	4053      	eors	r3, r2
 8007f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d111      	bne.n	8007f2e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d106      	bne.n	8007f22 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3301      	adds	r3, #1
 8007f18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	60da      	str	r2, [r3, #12]
 8007f20:	e005      	b.n	8007f2e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d018      	beq.n	8007f6a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	4053      	eors	r3, r2
 8007f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d111      	bne.n	8007f6a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d106      	bne.n	8007f5e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	611a      	str	r2, [r3, #16]
 8007f5c:	e005      	b.n	8007f6a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d987      	bls.n	8007e86 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	420c4000 	.word	0x420c4000
 8007f88:	04040222 	.word	0x04040222

08007f8c <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0202 	orr.w	r2, r2, #2
 8007fa8:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2208      	movs	r2, #8
 8007fae:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a15      	ldr	r2, [pc, #84]	; (800800c <HAL_OSPI_DLYB_SetConfig+0x80>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d109      	bne.n	8007fce <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8007fba:	4815      	ldr	r0, [pc, #84]	; (8008010 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007fbc:	f7ff f86a 	bl	8007094 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	4813      	ldr	r0, [pc, #76]	; (8008010 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007fc4:	f006 f928 	bl	800e218 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
 8007fcc:	e00d      	b.n	8007fea <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a10      	ldr	r2, [pc, #64]	; (8008014 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d108      	bne.n	8007fea <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007fd8:	480f      	ldr	r0, [pc, #60]	; (8008018 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007fda:	f7ff f85b 	bl	8007094 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	480d      	ldr	r0, [pc, #52]	; (8008018 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007fe2:	f006 f919 	bl	800e218 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7ff f95d 	bl	80072aa <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0202 	bic.w	r2, r2, #2
 8007ffe:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	420d1400 	.word	0x420d1400
 8008010:	420cf000 	.word	0x420cf000
 8008014:	420d2400 	.word	0x420d2400
 8008018:	420cf400 	.word	0x420cf400

0800801c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008024:	4a04      	ldr	r2, [pc, #16]	; (8008038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008026:	f043 0301 	orr.w	r3, r3, #1
 800802a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800802c:	bf00      	nop
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	46020800 	.word	0x46020800

0800803c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008044:	4b39      	ldr	r3, [pc, #228]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800804c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d10b      	bne.n	800806e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805c:	d905      	bls.n	800806a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800805e:	4b33      	ldr	r3, [pc, #204]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	4a32      	ldr	r2, [pc, #200]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008068:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e057      	b.n	800811e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008074:	d90a      	bls.n	800808c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8008076:	4b2d      	ldr	r3, [pc, #180]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4313      	orrs	r3, r2
 8008082:	4a2a      	ldr	r2, [pc, #168]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008088:	60d3      	str	r3, [r2, #12]
 800808a:	e007      	b.n	800809c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800808c:	4b27      	ldr	r3, [pc, #156]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008094:	4925      	ldr	r1, [pc, #148]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4313      	orrs	r3, r2
 800809a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800809c:	4b24      	ldr	r3, [pc, #144]	; (8008130 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a24      	ldr	r2, [pc, #144]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	2232      	movs	r2, #50	; 0x32
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	4a21      	ldr	r2, [pc, #132]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080b0:	fba2 2303 	umull	r2, r3, r2, r3
 80080b4:	099b      	lsrs	r3, r3, #6
 80080b6:	3301      	adds	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80080ba:	e002      	b.n	80080c2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3b01      	subs	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d102      	bne.n	80080d4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1f3      	bne.n	80080bc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01b      	beq.n	8008112 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80080da:	4b15      	ldr	r3, [pc, #84]	; (8008130 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a15      	ldr	r2, [pc, #84]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080e0:	fba2 2303 	umull	r2, r3, r2, r3
 80080e4:	099b      	lsrs	r3, r3, #6
 80080e6:	2232      	movs	r2, #50	; 0x32
 80080e8:	fb02 f303 	mul.w	r3, r2, r3
 80080ec:	4a11      	ldr	r2, [pc, #68]	; (8008134 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80080ee:	fba2 2303 	umull	r2, r3, r2, r3
 80080f2:	099b      	lsrs	r3, r3, #6
 80080f4:	3301      	adds	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80080f8:	e002      	b.n	8008100 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f3      	bne.n	80080fa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e000      	b.n	800811e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	46020800 	.word	0x46020800
 8008130:	20000000 	.word	0x20000000
 8008134:	10624dd3 	.word	0x10624dd3

08008138 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <HAL_PWREx_GetVoltageRange+0x18>)
 800813e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008144:	4618      	mov	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	46020800 	.word	0x46020800

08008154 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800815c:	4b22      	ldr	r3, [pc, #136]	; (80081e8 <HAL_PWREx_ConfigSupply+0x94>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a22      	ldr	r2, [pc, #136]	; (80081ec <HAL_PWREx_ConfigSupply+0x98>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	099b      	lsrs	r3, r3, #6
 8008168:	2232      	movs	r2, #50	; 0x32
 800816a:	fb02 f303 	mul.w	r3, r2, r3
 800816e:	4a1f      	ldr	r2, [pc, #124]	; (80081ec <HAL_PWREx_ConfigSupply+0x98>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	099b      	lsrs	r3, r3, #6
 8008176:	3301      	adds	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d113      	bne.n	80081a8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8008180:	4b1b      	ldr	r3, [pc, #108]	; (80081f0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	4a1a      	ldr	r2, [pc, #104]	; (80081f0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008186:	f023 0302 	bic.w	r3, r3, #2
 800818a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800818c:	e002      	b.n	8008194 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3b01      	subs	r3, #1
 8008192:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8008194:	4b16      	ldr	r3, [pc, #88]	; (80081f0 <HAL_PWREx_ConfigSupply+0x9c>)
 8008196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b02      	cmp	r3, #2
 800819e:	d116      	bne.n	80081ce <HAL_PWREx_ConfigSupply+0x7a>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f3      	bne.n	800818e <HAL_PWREx_ConfigSupply+0x3a>
 80081a6:	e012      	b.n	80081ce <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80081a8:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <HAL_PWREx_ConfigSupply+0x9c>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	4a10      	ldr	r2, [pc, #64]	; (80081f0 <HAL_PWREx_ConfigSupply+0x9c>)
 80081ae:	f043 0302 	orr.w	r3, r3, #2
 80081b2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081b4:	e002      	b.n	80081bc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80081bc:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <HAL_PWREx_ConfigSupply+0x9c>)
 80081be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <HAL_PWREx_ConfigSupply+0x7a>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1f3      	bne.n	80081b6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e000      	b.n	80081da <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	20000000 	.word	0x20000000
 80081ec:	10624dd3 	.word	0x10624dd3
 80081f0:	46020800 	.word	0x46020800

080081f4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <HAL_PWREx_EnableVddIO2+0x1c>)
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	4a04      	ldr	r2, [pc, #16]	; (8008210 <HAL_PWREx_EnableVddIO2+0x1c>)
 80081fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008202:	6113      	str	r3, [r2, #16]
}
 8008204:	bf00      	nop
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	46020800 	.word	0x46020800

08008214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08e      	sub	sp, #56	; 0x38
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800821c:	2300      	movs	r3, #0
 800821e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f000 bec8 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800822e:	4b99      	ldr	r3, [pc, #612]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	f003 030c 	and.w	r3, r3, #12
 8008236:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008238:	4b96      	ldr	r3, [pc, #600]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 816c 	beq.w	8008528 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <HAL_RCC_OscConfig+0x52>
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	2b0c      	cmp	r3, #12
 800825a:	f040 80de 	bne.w	800841a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008260:	2b01      	cmp	r3, #1
 8008262:	f040 80da 	bne.w	800841a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	f000 bea5 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008278:	4b86      	ldr	r3, [pc, #536]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d004      	beq.n	800828e <HAL_RCC_OscConfig+0x7a>
 8008284:	4b83      	ldr	r3, [pc, #524]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800828c:	e005      	b.n	800829a <HAL_RCC_OscConfig+0x86>
 800828e:	4b81      	ldr	r3, [pc, #516]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008294:	041b      	lsls	r3, r3, #16
 8008296:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800829a:	4293      	cmp	r3, r2
 800829c:	d255      	bcs.n	800834a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fa3d 	bl	8009728 <RCC_SetFlashLatencyFromMSIRange>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	f000 be82 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80082ba:	4b76      	ldr	r3, [pc, #472]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	4a75      	ldr	r2, [pc, #468]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80082c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082c4:	6093      	str	r3, [r2, #8]
 80082c6:	4b73      	ldr	r3, [pc, #460]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	4970      	ldr	r1, [pc, #448]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80082e0:	d309      	bcc.n	80082f6 <HAL_RCC_OscConfig+0xe2>
 80082e2:	4b6c      	ldr	r3, [pc, #432]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f023 021f 	bic.w	r2, r3, #31
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	4969      	ldr	r1, [pc, #420]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60cb      	str	r3, [r1, #12]
 80082f4:	e07e      	b.n	80083f4 <HAL_RCC_OscConfig+0x1e0>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	da0a      	bge.n	8008314 <HAL_RCC_OscConfig+0x100>
 80082fe:	4b65      	ldr	r3, [pc, #404]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	015b      	lsls	r3, r3, #5
 800830c:	4961      	ldr	r1, [pc, #388]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800830e:	4313      	orrs	r3, r2
 8008310:	60cb      	str	r3, [r1, #12]
 8008312:	e06f      	b.n	80083f4 <HAL_RCC_OscConfig+0x1e0>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831c:	d30a      	bcc.n	8008334 <HAL_RCC_OscConfig+0x120>
 800831e:	4b5d      	ldr	r3, [pc, #372]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	029b      	lsls	r3, r3, #10
 800832c:	4959      	ldr	r1, [pc, #356]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800832e:	4313      	orrs	r3, r2
 8008330:	60cb      	str	r3, [r1, #12]
 8008332:	e05f      	b.n	80083f4 <HAL_RCC_OscConfig+0x1e0>
 8008334:	4b57      	ldr	r3, [pc, #348]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	03db      	lsls	r3, r3, #15
 8008342:	4954      	ldr	r1, [pc, #336]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008344:	4313      	orrs	r3, r2
 8008346:	60cb      	str	r3, [r1, #12]
 8008348:	e054      	b.n	80083f4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800834a:	4b52      	ldr	r3, [pc, #328]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	4a51      	ldr	r2, [pc, #324]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008350:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008354:	6093      	str	r3, [r2, #8]
 8008356:	4b4f      	ldr	r3, [pc, #316]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	494c      	ldr	r1, [pc, #304]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008364:	4313      	orrs	r3, r2
 8008366:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008370:	d309      	bcc.n	8008386 <HAL_RCC_OscConfig+0x172>
 8008372:	4b48      	ldr	r3, [pc, #288]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f023 021f 	bic.w	r2, r3, #31
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	4945      	ldr	r1, [pc, #276]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008380:	4313      	orrs	r3, r2
 8008382:	60cb      	str	r3, [r1, #12]
 8008384:	e028      	b.n	80083d8 <HAL_RCC_OscConfig+0x1c4>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	da0a      	bge.n	80083a4 <HAL_RCC_OscConfig+0x190>
 800838e:	4b41      	ldr	r3, [pc, #260]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	015b      	lsls	r3, r3, #5
 800839c:	493d      	ldr	r1, [pc, #244]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	60cb      	str	r3, [r1, #12]
 80083a2:	e019      	b.n	80083d8 <HAL_RCC_OscConfig+0x1c4>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ac:	d30a      	bcc.n	80083c4 <HAL_RCC_OscConfig+0x1b0>
 80083ae:	4b39      	ldr	r3, [pc, #228]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	029b      	lsls	r3, r3, #10
 80083bc:	4935      	ldr	r1, [pc, #212]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	60cb      	str	r3, [r1, #12]
 80083c2:	e009      	b.n	80083d8 <HAL_RCC_OscConfig+0x1c4>
 80083c4:	4b33      	ldr	r3, [pc, #204]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	03db      	lsls	r3, r3, #15
 80083d2:	4930      	ldr	r1, [pc, #192]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 f9a0 	bl	8009728 <RCC_SetFlashLatencyFromMSIRange>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	f000 bde5 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80083f4:	f001 f8de 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80083f8:	4b27      	ldr	r3, [pc, #156]	; (8008498 <HAL_RCC_OscConfig+0x284>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fb f9fb 	bl	80037f8 <HAL_InitTick>
 8008402:	4603      	mov	r3, r0
 8008404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8008408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 808a 	beq.w	8008526 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8008412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008416:	f000 bdd2 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d066      	beq.n	80084f0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8008422:	4b1c      	ldr	r3, [pc, #112]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a1b      	ldr	r2, [pc, #108]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008428:	f043 0301 	orr.w	r3, r3, #1
 800842c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800842e:	f7fb fb6b 	bl	8003b08 <HAL_GetTick>
 8008432:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008434:	e009      	b.n	800844a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008436:	f7fb fb67 	bl	8003b08 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d902      	bls.n	800844a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	f000 bdba 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0ef      	beq.n	8008436 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008456:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	4a0e      	ldr	r2, [pc, #56]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800845c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008460:	6093      	str	r3, [r2, #8]
 8008462:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	4909      	ldr	r1, [pc, #36]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008470:	4313      	orrs	r3, r2
 8008472:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800847c:	d30e      	bcc.n	800849c <HAL_RCC_OscConfig+0x288>
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f023 021f 	bic.w	r2, r3, #31
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	4902      	ldr	r1, [pc, #8]	; (8008494 <HAL_RCC_OscConfig+0x280>)
 800848c:	4313      	orrs	r3, r2
 800848e:	60cb      	str	r3, [r1, #12]
 8008490:	e04a      	b.n	8008528 <HAL_RCC_OscConfig+0x314>
 8008492:	bf00      	nop
 8008494:	46020c00 	.word	0x46020c00
 8008498:	20000004 	.word	0x20000004
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da0a      	bge.n	80084ba <HAL_RCC_OscConfig+0x2a6>
 80084a4:	4b98      	ldr	r3, [pc, #608]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	015b      	lsls	r3, r3, #5
 80084b2:	4995      	ldr	r1, [pc, #596]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60cb      	str	r3, [r1, #12]
 80084b8:	e036      	b.n	8008528 <HAL_RCC_OscConfig+0x314>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c2:	d30a      	bcc.n	80084da <HAL_RCC_OscConfig+0x2c6>
 80084c4:	4b90      	ldr	r3, [pc, #576]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	029b      	lsls	r3, r3, #10
 80084d2:	498d      	ldr	r1, [pc, #564]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60cb      	str	r3, [r1, #12]
 80084d8:	e026      	b.n	8008528 <HAL_RCC_OscConfig+0x314>
 80084da:	4b8b      	ldr	r3, [pc, #556]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	03db      	lsls	r3, r3, #15
 80084e8:	4987      	ldr	r1, [pc, #540]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60cb      	str	r3, [r1, #12]
 80084ee:	e01b      	b.n	8008528 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80084f0:	4b85      	ldr	r3, [pc, #532]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a84      	ldr	r2, [pc, #528]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80084f6:	f023 0301 	bic.w	r3, r3, #1
 80084fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80084fc:	f7fb fb04 	bl	8003b08 <HAL_GetTick>
 8008500:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008502:	e009      	b.n	8008518 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008504:	f7fb fb00 	bl	8003b08 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d902      	bls.n	8008518 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	f000 bd53 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008518:	4b7b      	ldr	r3, [pc, #492]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1ef      	bne.n	8008504 <HAL_RCC_OscConfig+0x2f0>
 8008524:	e000      	b.n	8008528 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008526:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 808b 	beq.w	800864c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	2b08      	cmp	r3, #8
 800853a:	d005      	beq.n	8008548 <HAL_RCC_OscConfig+0x334>
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	2b0c      	cmp	r3, #12
 8008540:	d109      	bne.n	8008556 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	2b03      	cmp	r3, #3
 8008546:	d106      	bne.n	8008556 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d17d      	bne.n	800864c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f000 bd34 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800855e:	d106      	bne.n	800856e <HAL_RCC_OscConfig+0x35a>
 8008560:	4b69      	ldr	r3, [pc, #420]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a68      	ldr	r2, [pc, #416]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	e041      	b.n	80085f2 <HAL_RCC_OscConfig+0x3de>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008576:	d112      	bne.n	800859e <HAL_RCC_OscConfig+0x38a>
 8008578:	4b63      	ldr	r3, [pc, #396]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a62      	ldr	r2, [pc, #392]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 800857e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	4b60      	ldr	r3, [pc, #384]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a5f      	ldr	r2, [pc, #380]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 800858a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	4b5d      	ldr	r3, [pc, #372]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a5c      	ldr	r2, [pc, #368]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	e029      	b.n	80085f2 <HAL_RCC_OscConfig+0x3de>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80085a6:	d112      	bne.n	80085ce <HAL_RCC_OscConfig+0x3ba>
 80085a8:	4b57      	ldr	r3, [pc, #348]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a56      	ldr	r2, [pc, #344]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	4b54      	ldr	r3, [pc, #336]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a53      	ldr	r2, [pc, #332]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	4b51      	ldr	r3, [pc, #324]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a50      	ldr	r2, [pc, #320]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	e011      	b.n	80085f2 <HAL_RCC_OscConfig+0x3de>
 80085ce:	4b4e      	ldr	r3, [pc, #312]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a4d      	ldr	r2, [pc, #308]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	4b4b      	ldr	r3, [pc, #300]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a4a      	ldr	r2, [pc, #296]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4b48      	ldr	r3, [pc, #288]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a47      	ldr	r2, [pc, #284]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80085ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d014      	beq.n	8008624 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80085fa:	f7fb fa85 	bl	8003b08 <HAL_GetTick>
 80085fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008600:	e009      	b.n	8008616 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008602:	f7fb fa81 	bl	8003b08 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b64      	cmp	r3, #100	; 0x64
 800860e:	d902      	bls.n	8008616 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	f000 bcd4 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008616:	4b3c      	ldr	r3, [pc, #240]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0ef      	beq.n	8008602 <HAL_RCC_OscConfig+0x3ee>
 8008622:	e013      	b.n	800864c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008624:	f7fb fa70 	bl	8003b08 <HAL_GetTick>
 8008628:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800862a:	e009      	b.n	8008640 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800862c:	f7fb fa6c 	bl	8003b08 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b64      	cmp	r3, #100	; 0x64
 8008638:	d902      	bls.n	8008640 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	f000 bcbf 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008640:	4b31      	ldr	r3, [pc, #196]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1ef      	bne.n	800862c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b00      	cmp	r3, #0
 8008656:	d05f      	beq.n	8008718 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	2b04      	cmp	r3, #4
 800865c:	d005      	beq.n	800866a <HAL_RCC_OscConfig+0x456>
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	2b0c      	cmp	r3, #12
 8008662:	d114      	bne.n	800868e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	2b02      	cmp	r3, #2
 8008668:	d111      	bne.n	800868e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d102      	bne.n	8008678 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	f000 bca3 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008678:	4b23      	ldr	r3, [pc, #140]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	041b      	lsls	r3, r3, #16
 8008686:	4920      	ldr	r1, [pc, #128]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008688:	4313      	orrs	r3, r2
 800868a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800868c:	e044      	b.n	8008718 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d024      	beq.n	80086e0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8008696:	4b1c      	ldr	r3, [pc, #112]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a1b      	ldr	r2, [pc, #108]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 800869c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80086a2:	f7fb fa31 	bl	8003b08 <HAL_GetTick>
 80086a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086a8:	e009      	b.n	80086be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086aa:	f7fb fa2d 	bl	8003b08 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d902      	bls.n	80086be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	f000 bc80 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086be:	4b12      	ldr	r3, [pc, #72]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0ef      	beq.n	80086aa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80086ca:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	041b      	lsls	r3, r3, #16
 80086d8:	490b      	ldr	r1, [pc, #44]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	610b      	str	r3, [r1, #16]
 80086de:	e01b      	b.n	8008718 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80086e0:	4b09      	ldr	r3, [pc, #36]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a08      	ldr	r2, [pc, #32]	; (8008708 <HAL_RCC_OscConfig+0x4f4>)
 80086e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80086ec:	f7fb fa0c 	bl	8003b08 <HAL_GetTick>
 80086f0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086f2:	e00b      	b.n	800870c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086f4:	f7fb fa08 	bl	8003b08 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d904      	bls.n	800870c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	f000 bc5b 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
 8008708:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800870c:	4baf      	ldr	r3, [pc, #700]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1ed      	bne.n	80086f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0308 	and.w	r3, r3, #8
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 80c8 	beq.w	80088b6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8008726:	2300      	movs	r3, #0
 8008728:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800872c:	4ba7      	ldr	r3, [pc, #668]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800872e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	d111      	bne.n	800875e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800873a:	4ba4      	ldr	r3, [pc, #656]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800873c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008740:	4aa2      	ldr	r2, [pc, #648]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008742:	f043 0304 	orr.w	r3, r3, #4
 8008746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800874a:	4ba0      	ldr	r3, [pc, #640]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800874c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800875e:	4b9c      	ldr	r3, [pc, #624]	; (80089d0 <HAL_RCC_OscConfig+0x7bc>)
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d119      	bne.n	800879e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800876a:	4b99      	ldr	r3, [pc, #612]	; (80089d0 <HAL_RCC_OscConfig+0x7bc>)
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	4a98      	ldr	r2, [pc, #608]	; (80089d0 <HAL_RCC_OscConfig+0x7bc>)
 8008770:	f043 0301 	orr.w	r3, r3, #1
 8008774:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008776:	f7fb f9c7 	bl	8003b08 <HAL_GetTick>
 800877a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800877c:	e009      	b.n	8008792 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800877e:	f7fb f9c3 	bl	8003b08 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d902      	bls.n	8008792 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	f000 bc16 	b.w	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008792:	4b8f      	ldr	r3, [pc, #572]	; (80089d0 <HAL_RCC_OscConfig+0x7bc>)
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0ef      	beq.n	800877e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d05f      	beq.n	8008866 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80087a6:	4b89      	ldr	r3, [pc, #548]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80087a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087ac:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d037      	beq.n	800882c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d006      	beq.n	80087d4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e3f4      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01b      	beq.n	8008816 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80087de:	4b7b      	ldr	r3, [pc, #492]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80087e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087e4:	4a79      	ldr	r2, [pc, #484]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80087e6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80087ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80087ee:	f7fb f98b 	bl	8003b08 <HAL_GetTick>
 80087f2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087f6:	f7fb f987 	bl	8003b08 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b05      	cmp	r3, #5
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e3da      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008808:	4b70      	ldr	r3, [pc, #448]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800880a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800880e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1ef      	bne.n	80087f6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8008816:	4b6d      	ldr	r3, [pc, #436]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800881c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	4969      	ldr	r1, [pc, #420]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800882c:	4b67      	ldr	r3, [pc, #412]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800882e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008832:	4a66      	ldr	r2, [pc, #408]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008838:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800883c:	f7fb f964 	bl	8003b08 <HAL_GetTick>
 8008840:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008844:	f7fb f960 	bl	8003b08 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b05      	cmp	r3, #5
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e3b3      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8008856:	4b5d      	ldr	r3, [pc, #372]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800885c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0ef      	beq.n	8008844 <HAL_RCC_OscConfig+0x630>
 8008864:	e01b      	b.n	800889e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8008866:	4b59      	ldr	r3, [pc, #356]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800886c:	4a57      	ldr	r2, [pc, #348]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800886e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8008872:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8008876:	f7fb f947 	bl	8003b08 <HAL_GetTick>
 800887a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800887c:	e008      	b.n	8008890 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800887e:	f7fb f943 	bl	8003b08 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b05      	cmp	r3, #5
 800888a:	d901      	bls.n	8008890 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e396      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008890:	4b4e      	ldr	r3, [pc, #312]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1ef      	bne.n	800887e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800889e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d107      	bne.n	80088b6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088a6:	4b49      	ldr	r3, [pc, #292]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80088a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ac:	4a47      	ldr	r2, [pc, #284]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80088ae:	f023 0304 	bic.w	r3, r3, #4
 80088b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0304 	and.w	r3, r3, #4
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 8111 	beq.w	8008ae6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088ca:	4b40      	ldr	r3, [pc, #256]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80088cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d111      	bne.n	80088fc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088d8:	4b3c      	ldr	r3, [pc, #240]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80088da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088de:	4a3b      	ldr	r2, [pc, #236]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80088e0:	f043 0304 	orr.w	r3, r3, #4
 80088e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80088e8:	4b38      	ldr	r3, [pc, #224]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 80088ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80088f6:	2301      	movs	r3, #1
 80088f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80088fc:	4b34      	ldr	r3, [pc, #208]	; (80089d0 <HAL_RCC_OscConfig+0x7bc>)
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d118      	bne.n	800893a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008908:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <HAL_RCC_OscConfig+0x7bc>)
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	4a30      	ldr	r2, [pc, #192]	; (80089d0 <HAL_RCC_OscConfig+0x7bc>)
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008914:	f7fb f8f8 	bl	8003b08 <HAL_GetTick>
 8008918:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800891a:	e008      	b.n	800892e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800891c:	f7fb f8f4 	bl	8003b08 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e347      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800892e:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <HAL_RCC_OscConfig+0x7bc>)
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f0      	beq.n	800891c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01f      	beq.n	8008986 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	d010      	beq.n	8008974 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008952:	4b1e      	ldr	r3, [pc, #120]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008958:	4a1c      	ldr	r2, [pc, #112]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800895a:	f043 0304 	orr.w	r3, r3, #4
 800895e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008962:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008968:	4a18      	ldr	r2, [pc, #96]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008972:	e018      	b.n	80089a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008974:	4b15      	ldr	r3, [pc, #84]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800897a:	4a14      	ldr	r2, [pc, #80]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008984:	e00f      	b.n	80089a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008986:	4b11      	ldr	r3, [pc, #68]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800898c:	4a0f      	ldr	r2, [pc, #60]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800898e:	f023 0301 	bic.w	r3, r3, #1
 8008992:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008996:	4b0d      	ldr	r3, [pc, #52]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 8008998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800899c:	4a0b      	ldr	r2, [pc, #44]	; (80089cc <HAL_RCC_OscConfig+0x7b8>)
 800899e:	f023 0304 	bic.w	r3, r3, #4
 80089a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d057      	beq.n	8008a5e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80089ae:	f7fb f8ab 	bl	8003b08 <HAL_GetTick>
 80089b2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089b4:	e00e      	b.n	80089d4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089b6:	f7fb f8a7 	bl	8003b08 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d905      	bls.n	80089d4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e2f8      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
 80089cc:	46020c00 	.word	0x46020c00
 80089d0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089d4:	4b9c      	ldr	r3, [pc, #624]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 80089d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0e9      	beq.n	80089b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01b      	beq.n	8008a26 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80089ee:	4b96      	ldr	r3, [pc, #600]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 80089f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089f4:	4a94      	ldr	r2, [pc, #592]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 80089f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80089fe:	e00a      	b.n	8008a16 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a00:	f7fb f882 	bl	8003b08 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e2d3      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a16:	4b8c      	ldr	r3, [pc, #560]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0ed      	beq.n	8008a00 <HAL_RCC_OscConfig+0x7ec>
 8008a24:	e053      	b.n	8008ace <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a26:	4b88      	ldr	r3, [pc, #544]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a2c:	4a86      	ldr	r2, [pc, #536]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a36:	e00a      	b.n	8008a4e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a38:	f7fb f866 	bl	8003b08 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d901      	bls.n	8008a4e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e2b7      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008a4e:	4b7e      	ldr	r3, [pc, #504]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1ed      	bne.n	8008a38 <HAL_RCC_OscConfig+0x824>
 8008a5c:	e037      	b.n	8008ace <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008a5e:	f7fb f853 	bl	8003b08 <HAL_GetTick>
 8008a62:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a64:	e00a      	b.n	8008a7c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a66:	f7fb f84f 	bl	8003b08 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d901      	bls.n	8008a7c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e2a0      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a7c:	4b72      	ldr	r3, [pc, #456]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1ed      	bne.n	8008a66 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8008a8a:	4b6f      	ldr	r3, [pc, #444]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d01a      	beq.n	8008ace <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a98:	4b6b      	ldr	r3, [pc, #428]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a9e:	4a6a      	ldr	r2, [pc, #424]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008aa8:	e00a      	b.n	8008ac0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aaa:	f7fb f82d 	bl	8003b08 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e27e      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ac0:	4b61      	ldr	r3, [pc, #388]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1ed      	bne.n	8008aaa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ace:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d107      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ad6:	4b5c      	ldr	r3, [pc, #368]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008adc:	4a5a      	ldr	r2, [pc, #360]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008ade:	f023 0304 	bic.w	r3, r3, #4
 8008ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0320 	and.w	r3, r3, #32
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d036      	beq.n	8008b60 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d019      	beq.n	8008b2e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008afa:	4b53      	ldr	r3, [pc, #332]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a52      	ldr	r2, [pc, #328]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b04:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b06:	f7fa ffff 	bl	8003b08 <HAL_GetTick>
 8008b0a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b0c:	e008      	b.n	8008b20 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b0e:	f7fa fffb 	bl	8003b08 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e24e      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008b20:	4b49      	ldr	r3, [pc, #292]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0f0      	beq.n	8008b0e <HAL_RCC_OscConfig+0x8fa>
 8008b2c:	e018      	b.n	8008b60 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008b2e:	4b46      	ldr	r3, [pc, #280]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a45      	ldr	r2, [pc, #276]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b3a:	f7fa ffe5 	bl	8003b08 <HAL_GetTick>
 8008b3e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008b40:	e008      	b.n	8008b54 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b42:	f7fa ffe1 	bl	8003b08 <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d901      	bls.n	8008b54 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e234      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008b54:	4b3c      	ldr	r3, [pc, #240]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1f0      	bne.n	8008b42 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d036      	beq.n	8008bda <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d019      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008b74:	4b34      	ldr	r3, [pc, #208]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a33      	ldr	r2, [pc, #204]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b7e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008b80:	f7fa ffc2 	bl	8003b08 <HAL_GetTick>
 8008b84:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008b86:	e008      	b.n	8008b9a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008b88:	f7fa ffbe 	bl	8003b08 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e211      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008b9a:	4b2b      	ldr	r3, [pc, #172]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f0      	beq.n	8008b88 <HAL_RCC_OscConfig+0x974>
 8008ba6:	e018      	b.n	8008bda <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008ba8:	4b27      	ldr	r3, [pc, #156]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a26      	ldr	r2, [pc, #152]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008bb4:	f7fa ffa8 	bl	8003b08 <HAL_GetTick>
 8008bb8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008bbc:	f7fa ffa4 	bl	8003b08 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e1f7      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008bce:	4b1e      	ldr	r3, [pc, #120]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1f0      	bne.n	8008bbc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d07f      	beq.n	8008ce6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d062      	beq.n	8008cb4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008bee:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008bf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bf8:	6093      	str	r3, [r2, #8]
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	4910      	ldr	r1, [pc, #64]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008c14:	d309      	bcc.n	8008c2a <HAL_RCC_OscConfig+0xa16>
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f023 021f 	bic.w	r2, r3, #31
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	4909      	ldr	r1, [pc, #36]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60cb      	str	r3, [r1, #12]
 8008c28:	e02a      	b.n	8008c80 <HAL_RCC_OscConfig+0xa6c>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da0c      	bge.n	8008c4c <HAL_RCC_OscConfig+0xa38>
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	015b      	lsls	r3, r3, #5
 8008c40:	4901      	ldr	r1, [pc, #4]	; (8008c48 <HAL_RCC_OscConfig+0xa34>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60cb      	str	r3, [r1, #12]
 8008c46:	e01b      	b.n	8008c80 <HAL_RCC_OscConfig+0xa6c>
 8008c48:	46020c00 	.word	0x46020c00
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c54:	d30a      	bcc.n	8008c6c <HAL_RCC_OscConfig+0xa58>
 8008c56:	4ba1      	ldr	r3, [pc, #644]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	029b      	lsls	r3, r3, #10
 8008c64:	499d      	ldr	r1, [pc, #628]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60cb      	str	r3, [r1, #12]
 8008c6a:	e009      	b.n	8008c80 <HAL_RCC_OscConfig+0xa6c>
 8008c6c:	4b9b      	ldr	r3, [pc, #620]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	03db      	lsls	r3, r3, #15
 8008c7a:	4998      	ldr	r1, [pc, #608]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8008c80:	4b96      	ldr	r3, [pc, #600]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a95      	ldr	r2, [pc, #596]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008c86:	f043 0310 	orr.w	r3, r3, #16
 8008c8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008c8c:	f7fa ff3c 	bl	8003b08 <HAL_GetTick>
 8008c90:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008c94:	f7fa ff38 	bl	8003b08 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e18b      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008ca6:	4b8d      	ldr	r3, [pc, #564]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0f0      	beq.n	8008c94 <HAL_RCC_OscConfig+0xa80>
 8008cb2:	e018      	b.n	8008ce6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008cb4:	4b89      	ldr	r3, [pc, #548]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a88      	ldr	r2, [pc, #544]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008cba:	f023 0310 	bic.w	r3, r3, #16
 8008cbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008cc0:	f7fa ff22 	bl	8003b08 <HAL_GetTick>
 8008cc4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008cc8:	f7fa ff1e 	bl	8003b08 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e171      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008cda:	4b80      	ldr	r3, [pc, #512]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0320 	and.w	r3, r3, #32
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1f0      	bne.n	8008cc8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 8166 	beq.w	8008fbc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cf6:	4b79      	ldr	r3, [pc, #484]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f003 030c 	and.w	r3, r3, #12
 8008cfe:	2b0c      	cmp	r3, #12
 8008d00:	f000 80f2 	beq.w	8008ee8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	f040 80c5 	bne.w	8008e98 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008d0e:	4b73      	ldr	r3, [pc, #460]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a72      	ldr	r2, [pc, #456]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d18:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008d1a:	f7fa fef5 	bl	8003b08 <HAL_GetTick>
 8008d1e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d20:	e008      	b.n	8008d34 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d22:	f7fa fef1 	bl	8003b08 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e144      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008d34:	4b69      	ldr	r3, [pc, #420]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1f0      	bne.n	8008d22 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d40:	4b66      	ldr	r3, [pc, #408]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d111      	bne.n	8008d72 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008d4e:	4b63      	ldr	r3, [pc, #396]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d54:	4a61      	ldr	r2, [pc, #388]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008d56:	f043 0304 	orr.w	r3, r3, #4
 8008d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008d5e:	4b5f      	ldr	r3, [pc, #380]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8008d72:	4b5b      	ldr	r3, [pc, #364]	; (8008ee0 <HAL_RCC_OscConfig+0xccc>)
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d7e:	d102      	bne.n	8008d86 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008d86:	4b56      	ldr	r3, [pc, #344]	; (8008ee0 <HAL_RCC_OscConfig+0xccc>)
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	4a55      	ldr	r2, [pc, #340]	; (8008ee0 <HAL_RCC_OscConfig+0xccc>)
 8008d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d90:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008d92:	4b52      	ldr	r3, [pc, #328]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008da6:	3a01      	subs	r2, #1
 8008da8:	0212      	lsls	r2, r2, #8
 8008daa:	4311      	orrs	r1, r2
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008db0:	430a      	orrs	r2, r1
 8008db2:	494a      	ldr	r1, [pc, #296]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	628b      	str	r3, [r1, #40]	; 0x28
 8008db8:	4b48      	ldr	r3, [pc, #288]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dbc:	4b49      	ldr	r3, [pc, #292]	; (8008ee4 <HAL_RCC_OscConfig+0xcd0>)
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008dc4:	3a01      	subs	r2, #1
 8008dc6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008dce:	3a01      	subs	r2, #1
 8008dd0:	0252      	lsls	r2, r2, #9
 8008dd2:	b292      	uxth	r2, r2
 8008dd4:	4311      	orrs	r1, r2
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008dda:	3a01      	subs	r2, #1
 8008ddc:	0412      	lsls	r2, r2, #16
 8008dde:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008de2:	4311      	orrs	r1, r2
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008de8:	3a01      	subs	r2, #1
 8008dea:	0612      	lsls	r2, r2, #24
 8008dec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008df0:	430a      	orrs	r2, r1
 8008df2:	493a      	ldr	r1, [pc, #232]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008df8:	4b38      	ldr	r3, [pc, #224]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfc:	4a37      	ldr	r2, [pc, #220]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008dfe:	f023 0310 	bic.w	r3, r3, #16
 8008e02:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e08:	4a34      	ldr	r2, [pc, #208]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e0a:	00db      	lsls	r3, r3, #3
 8008e0c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008e0e:	4b33      	ldr	r3, [pc, #204]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	4a32      	ldr	r2, [pc, #200]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e14:	f043 0310 	orr.w	r3, r3, #16
 8008e18:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008e1a:	4b30      	ldr	r3, [pc, #192]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1e:	f023 020c 	bic.w	r2, r3, #12
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e26:	492d      	ldr	r1, [pc, #180]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8008e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d105      	bne.n	8008e40 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008e34:	4b2a      	ldr	r3, [pc, #168]	; (8008ee0 <HAL_RCC_OscConfig+0xccc>)
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	4a29      	ldr	r2, [pc, #164]	; (8008ee0 <HAL_RCC_OscConfig+0xccc>)
 8008e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e3e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008e40:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d107      	bne.n	8008e58 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008e48:	4b24      	ldr	r3, [pc, #144]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e4e:	4a23      	ldr	r2, [pc, #140]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e50:	f023 0304 	bic.w	r3, r3, #4
 8008e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e58:	4b20      	ldr	r3, [pc, #128]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	4a1f      	ldr	r2, [pc, #124]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e62:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008e64:	4b1d      	ldr	r3, [pc, #116]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a1c      	ldr	r2, [pc, #112]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008e70:	f7fa fe4a 	bl	8003b08 <HAL_GetTick>
 8008e74:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e78:	f7fa fe46 	bl	8003b08 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e099      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008e8a:	4b14      	ldr	r3, [pc, #80]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0f0      	beq.n	8008e78 <HAL_RCC_OscConfig+0xc64>
 8008e96:	e091      	b.n	8008fbc <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008e98:	4b10      	ldr	r3, [pc, #64]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a0f      	ldr	r2, [pc, #60]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ea2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008ea4:	f7fa fe30 	bl	8003b08 <HAL_GetTick>
 8008ea8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eac:	f7fa fe2c 	bl	8003b08 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e07f      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008ebe:	4b07      	ldr	r3, [pc, #28]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f0      	bne.n	8008eac <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008eca:	4b04      	ldr	r3, [pc, #16]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ece:	4a03      	ldr	r2, [pc, #12]	; (8008edc <HAL_RCC_OscConfig+0xcc8>)
 8008ed0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8008ed4:	f023 0303 	bic.w	r3, r3, #3
 8008ed8:	6293      	str	r3, [r2, #40]	; 0x28
 8008eda:	e06f      	b.n	8008fbc <HAL_RCC_OscConfig+0xda8>
 8008edc:	46020c00 	.word	0x46020c00
 8008ee0:	46020800 	.word	0x46020800
 8008ee4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008ee8:	4b37      	ldr	r3, [pc, #220]	; (8008fc8 <HAL_RCC_OscConfig+0xdb4>)
 8008eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008eee:	4b36      	ldr	r3, [pc, #216]	; (8008fc8 <HAL_RCC_OscConfig+0xdb4>)
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d039      	beq.n	8008f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	f003 0203 	and.w	r2, r3, #3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d132      	bne.n	8008f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	0a1b      	lsrs	r3, r3, #8
 8008f0e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d129      	bne.n	8008f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d122      	bne.n	8008f70 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f34:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d11a      	bne.n	8008f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	0a5b      	lsrs	r3, r3, #9
 8008f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d111      	bne.n	8008f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	0c1b      	lsrs	r3, r3, #16
 8008f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f58:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d108      	bne.n	8008f70 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	0e1b      	lsrs	r3, r3, #24
 8008f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d001      	beq.n	8008f74 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e024      	b.n	8008fbe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f74:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <HAL_RCC_OscConfig+0xdb4>)
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	08db      	lsrs	r3, r3, #3
 8008f7a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d01a      	beq.n	8008fbc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <HAL_RCC_OscConfig+0xdb4>)
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	4a0f      	ldr	r2, [pc, #60]	; (8008fc8 <HAL_RCC_OscConfig+0xdb4>)
 8008f8c:	f023 0310 	bic.w	r3, r3, #16
 8008f90:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f92:	f7fa fdb9 	bl	8003b08 <HAL_GetTick>
 8008f96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008f98:	bf00      	nop
 8008f9a:	f7fa fdb5 	bl	8003b08 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d0f9      	beq.n	8008f9a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008faa:	4a07      	ldr	r2, [pc, #28]	; (8008fc8 <HAL_RCC_OscConfig+0xdb4>)
 8008fac:	00db      	lsls	r3, r3, #3
 8008fae:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008fb0:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <HAL_RCC_OscConfig+0xdb4>)
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	4a04      	ldr	r2, [pc, #16]	; (8008fc8 <HAL_RCC_OscConfig+0xdb4>)
 8008fb6:	f043 0310 	orr.w	r3, r3, #16
 8008fba:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3738      	adds	r7, #56	; 0x38
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	46020c00 	.word	0x46020c00

08008fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e1d9      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fe0:	4b9b      	ldr	r3, [pc, #620]	; (8009250 <HAL_RCC_ClockConfig+0x284>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d910      	bls.n	8009010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fee:	4b98      	ldr	r3, [pc, #608]	; (8009250 <HAL_RCC_ClockConfig+0x284>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f023 020f 	bic.w	r2, r3, #15
 8008ff6:	4996      	ldr	r1, [pc, #600]	; (8009250 <HAL_RCC_ClockConfig+0x284>)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ffe:	4b94      	ldr	r3, [pc, #592]	; (8009250 <HAL_RCC_ClockConfig+0x284>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d001      	beq.n	8009010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e1c1      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0310 	and.w	r3, r3, #16
 8009018:	2b00      	cmp	r3, #0
 800901a:	d010      	beq.n	800903e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	695a      	ldr	r2, [r3, #20]
 8009020:	4b8c      	ldr	r3, [pc, #560]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009028:	429a      	cmp	r2, r3
 800902a:	d908      	bls.n	800903e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800902c:	4b89      	ldr	r3, [pc, #548]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	4986      	ldr	r1, [pc, #536]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 800903a:	4313      	orrs	r3, r2
 800903c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	2b00      	cmp	r3, #0
 8009048:	d012      	beq.n	8009070 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691a      	ldr	r2, [r3, #16]
 800904e:	4b81      	ldr	r3, [pc, #516]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	091b      	lsrs	r3, r3, #4
 8009054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009058:	429a      	cmp	r2, r3
 800905a:	d909      	bls.n	8009070 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800905c:	4b7d      	ldr	r3, [pc, #500]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 800905e:	6a1b      	ldr	r3, [r3, #32]
 8009060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	497a      	ldr	r1, [pc, #488]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 800906c:	4313      	orrs	r3, r2
 800906e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d010      	beq.n	800909e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	4b74      	ldr	r3, [pc, #464]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009088:	429a      	cmp	r2, r3
 800908a:	d908      	bls.n	800909e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800908c:	4b71      	ldr	r3, [pc, #452]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	496e      	ldr	r1, [pc, #440]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 800909a:	4313      	orrs	r3, r2
 800909c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d010      	beq.n	80090cc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	4b69      	ldr	r3, [pc, #420]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d908      	bls.n	80090cc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80090ba:	4b66      	ldr	r3, [pc, #408]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	f023 020f 	bic.w	r2, r3, #15
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	4963      	ldr	r1, [pc, #396]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 80d2 	beq.w	800927e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d143      	bne.n	800916e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090e6:	4b5b      	ldr	r3, [pc, #364]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80090e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d110      	bne.n	8009116 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80090f4:	4b57      	ldr	r3, [pc, #348]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80090f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090fa:	4a56      	ldr	r2, [pc, #344]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80090fc:	f043 0304 	orr.w	r3, r3, #4
 8009100:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009104:	4b53      	ldr	r3, [pc, #332]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	60bb      	str	r3, [r7, #8]
 8009110:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009112:	2301      	movs	r3, #1
 8009114:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8009116:	f7fa fcf7 	bl	8003b08 <HAL_GetTick>
 800911a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800911c:	4b4e      	ldr	r3, [pc, #312]	; (8009258 <HAL_RCC_ClockConfig+0x28c>)
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00f      	beq.n	8009148 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009128:	e008      	b.n	800913c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800912a:	f7fa fced 	bl	8003b08 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d901      	bls.n	800913c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e12b      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800913c:	4b46      	ldr	r3, [pc, #280]	; (8009258 <HAL_RCC_ClockConfig+0x28c>)
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0f0      	beq.n	800912a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009148:	7dfb      	ldrb	r3, [r7, #23]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d107      	bne.n	800915e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800914e:	4b41      	ldr	r3, [pc, #260]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009154:	4a3f      	ldr	r2, [pc, #252]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009156:	f023 0304 	bic.w	r3, r3, #4
 800915a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800915e:	4b3d      	ldr	r3, [pc, #244]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d121      	bne.n	80091ae <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e112      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d107      	bne.n	8009186 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009176:	4b37      	ldr	r3, [pc, #220]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d115      	bne.n	80091ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e106      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d107      	bne.n	800919e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800918e:	4b31      	ldr	r3, [pc, #196]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0304 	and.w	r3, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	d109      	bne.n	80091ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e0fa      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800919e:	4b2d      	ldr	r3, [pc, #180]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e0f2      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80091ae:	4b29      	ldr	r3, [pc, #164]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f023 0203 	bic.w	r2, r3, #3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	4926      	ldr	r1, [pc, #152]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80091bc:	4313      	orrs	r3, r2
 80091be:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80091c0:	f7fa fca2 	bl	8003b08 <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d112      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091ce:	e00a      	b.n	80091e6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091d0:	f7fa fc9a 	bl	8003b08 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	f241 3288 	movw	r2, #5000	; 0x1388
 80091de:	4293      	cmp	r3, r2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e0d6      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091e6:	4b1b      	ldr	r3, [pc, #108]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	f003 030c 	and.w	r3, r3, #12
 80091ee:	2b0c      	cmp	r3, #12
 80091f0:	d1ee      	bne.n	80091d0 <HAL_RCC_ClockConfig+0x204>
 80091f2:	e044      	b.n	800927e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d112      	bne.n	8009222 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80091fc:	e00a      	b.n	8009214 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091fe:	f7fa fc83 	bl	8003b08 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	f241 3288 	movw	r2, #5000	; 0x1388
 800920c:	4293      	cmp	r3, r2
 800920e:	d901      	bls.n	8009214 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e0bf      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009214:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	f003 030c 	and.w	r3, r3, #12
 800921c:	2b08      	cmp	r3, #8
 800921e:	d1ee      	bne.n	80091fe <HAL_RCC_ClockConfig+0x232>
 8009220:	e02d      	b.n	800927e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d123      	bne.n	8009272 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800922a:	e00a      	b.n	8009242 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800922c:	f7fa fc6c 	bl	8003b08 <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	f241 3288 	movw	r2, #5000	; 0x1388
 800923a:	4293      	cmp	r3, r2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e0a8      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009242:	4b04      	ldr	r3, [pc, #16]	; (8009254 <HAL_RCC_ClockConfig+0x288>)
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	f003 030c 	and.w	r3, r3, #12
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1ee      	bne.n	800922c <HAL_RCC_ClockConfig+0x260>
 800924e:	e016      	b.n	800927e <HAL_RCC_ClockConfig+0x2b2>
 8009250:	40022000 	.word	0x40022000
 8009254:	46020c00 	.word	0x46020c00
 8009258:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800925c:	f7fa fc54 	bl	8003b08 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	f241 3288 	movw	r2, #5000	; 0x1388
 800926a:	4293      	cmp	r3, r2
 800926c:	d901      	bls.n	8009272 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e090      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009272:	4b4a      	ldr	r3, [pc, #296]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	f003 030c 	and.w	r3, r3, #12
 800927a:	2b04      	cmp	r3, #4
 800927c:	d1ee      	bne.n	800925c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d010      	beq.n	80092ac <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	4b43      	ldr	r3, [pc, #268]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	429a      	cmp	r2, r3
 8009298:	d208      	bcs.n	80092ac <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800929a:	4b40      	ldr	r3, [pc, #256]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f023 020f 	bic.w	r2, r3, #15
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	493d      	ldr	r1, [pc, #244]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092ac:	4b3c      	ldr	r3, [pc, #240]	; (80093a0 <HAL_RCC_ClockConfig+0x3d4>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d210      	bcs.n	80092dc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ba:	4b39      	ldr	r3, [pc, #228]	; (80093a0 <HAL_RCC_ClockConfig+0x3d4>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f023 020f 	bic.w	r2, r3, #15
 80092c2:	4937      	ldr	r1, [pc, #220]	; (80093a0 <HAL_RCC_ClockConfig+0x3d4>)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ca:	4b35      	ldr	r3, [pc, #212]	; (80093a0 <HAL_RCC_ClockConfig+0x3d4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d001      	beq.n	80092dc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e05b      	b.n	8009394 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d010      	beq.n	800930a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	4b2b      	ldr	r3, [pc, #172]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d208      	bcs.n	800930a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80092f8:	4b28      	ldr	r3, [pc, #160]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	4925      	ldr	r1, [pc, #148]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 8009306:	4313      	orrs	r3, r2
 8009308:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d012      	beq.n	800933c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691a      	ldr	r2, [r3, #16]
 800931a:	4b20      	ldr	r3, [pc, #128]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	091b      	lsrs	r3, r3, #4
 8009320:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009324:	429a      	cmp	r2, r3
 8009326:	d209      	bcs.n	800933c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009328:	4b1c      	ldr	r3, [pc, #112]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	4919      	ldr	r1, [pc, #100]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 8009338:	4313      	orrs	r3, r2
 800933a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b00      	cmp	r3, #0
 8009346:	d010      	beq.n	800936a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	695a      	ldr	r2, [r3, #20]
 800934c:	4b13      	ldr	r3, [pc, #76]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009354:	429a      	cmp	r2, r3
 8009356:	d208      	bcs.n	800936a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009358:	4b10      	ldr	r3, [pc, #64]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	490d      	ldr	r1, [pc, #52]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 8009366:	4313      	orrs	r3, r2
 8009368:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800936a:	f000 f821 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800936e:	4602      	mov	r2, r0
 8009370:	4b0a      	ldr	r3, [pc, #40]	; (800939c <HAL_RCC_ClockConfig+0x3d0>)
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	490a      	ldr	r1, [pc, #40]	; (80093a4 <HAL_RCC_ClockConfig+0x3d8>)
 800937a:	5ccb      	ldrb	r3, [r1, r3]
 800937c:	fa22 f303 	lsr.w	r3, r2, r3
 8009380:	4a09      	ldr	r2, [pc, #36]	; (80093a8 <HAL_RCC_ClockConfig+0x3dc>)
 8009382:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009384:	4b09      	ldr	r3, [pc, #36]	; (80093ac <HAL_RCC_ClockConfig+0x3e0>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4618      	mov	r0, r3
 800938a:	f7fa fa35 	bl	80037f8 <HAL_InitTick>
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]

  return status;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	46020c00 	.word	0x46020c00
 80093a0:	40022000 	.word	0x40022000
 80093a4:	0800e2c8 	.word	0x0800e2c8
 80093a8:	20000000 	.word	0x20000000
 80093ac:	20000004 	.word	0x20000004

080093b0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b08b      	sub	sp, #44	; 0x2c
 80093b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093be:	4b78      	ldr	r3, [pc, #480]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	f003 030c 	and.w	r3, r3, #12
 80093c6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093c8:	4b75      	ldr	r3, [pc, #468]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093cc:	f003 0303 	and.w	r3, r3, #3
 80093d0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d005      	beq.n	80093e4 <HAL_RCC_GetSysClockFreq+0x34>
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	2b0c      	cmp	r3, #12
 80093dc:	d121      	bne.n	8009422 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d11e      	bne.n	8009422 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80093e4:	4b6e      	ldr	r3, [pc, #440]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d107      	bne.n	8009400 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80093f0:	4b6b      	ldr	r3, [pc, #428]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80093f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80093f6:	0b1b      	lsrs	r3, r3, #12
 80093f8:	f003 030f 	and.w	r3, r3, #15
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
 80093fe:	e005      	b.n	800940c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009400:	4b67      	ldr	r3, [pc, #412]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	0f1b      	lsrs	r3, r3, #28
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800940c:	4a65      	ldr	r2, [pc, #404]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009414:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d110      	bne.n	800943e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009420:	e00d      	b.n	800943e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009422:	4b5f      	ldr	r3, [pc, #380]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	f003 030c 	and.w	r3, r3, #12
 800942a:	2b04      	cmp	r3, #4
 800942c:	d102      	bne.n	8009434 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800942e:	4b5e      	ldr	r3, [pc, #376]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009430:	623b      	str	r3, [r7, #32]
 8009432:	e004      	b.n	800943e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	2b08      	cmp	r3, #8
 8009438:	d101      	bne.n	800943e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800943a:	4b5b      	ldr	r3, [pc, #364]	; (80095a8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800943c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b0c      	cmp	r3, #12
 8009442:	f040 80a5 	bne.w	8009590 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009446:	4b56      	ldr	r3, [pc, #344]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944a:	f003 0303 	and.w	r3, r3, #3
 800944e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009450:	4b53      	ldr	r3, [pc, #332]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	0a1b      	lsrs	r3, r3, #8
 8009456:	f003 030f 	and.w	r3, r3, #15
 800945a:	3301      	adds	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800945e:	4b50      	ldr	r3, [pc, #320]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009462:	091b      	lsrs	r3, r3, #4
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800946a:	4b4d      	ldr	r3, [pc, #308]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	08db      	lsrs	r3, r3, #3
 8009470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	fb02 f303 	mul.w	r3, r2, r3
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009482:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d003      	beq.n	8009494 <HAL_RCC_GetSysClockFreq+0xe4>
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	2b03      	cmp	r3, #3
 8009490:	d022      	beq.n	80094d8 <HAL_RCC_GetSysClockFreq+0x128>
 8009492:	e043      	b.n	800951c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949e:	eddf 6a43 	vldr	s13, [pc, #268]	; 80095ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80094a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094a6:	4b3e      	ldr	r3, [pc, #248]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ae:	ee07 3a90 	vmov	s15, r3
 80094b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80094ba:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80095b0 <HAL_RCC_GetSysClockFreq+0x200>
 80094be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094d6:	e046      	b.n	8009566 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e2:	eddf 6a32 	vldr	s13, [pc, #200]	; 80095ac <HAL_RCC_GetSysClockFreq+0x1fc>
 80094e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ea:	4b2d      	ldr	r3, [pc, #180]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80094fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80094fe:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80095b0 <HAL_RCC_GetSysClockFreq+0x200>
 8009502:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009506:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800950a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800950e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800951a:	e024      	b.n	8009566 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	ee07 3a90 	vmov	s15, r3
 800952c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009544:	ed97 6a01 	vldr	s12, [r7, #4]
 8009548:	eddf 5a19 	vldr	s11, [pc, #100]	; 80095b0 <HAL_RCC_GetSysClockFreq+0x200>
 800954c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009550:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009558:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009564:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009566:	4b0e      	ldr	r3, [pc, #56]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956a:	0e1b      	lsrs	r3, r3, #24
 800956c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009570:	3301      	adds	r3, #1
 8009572:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800957e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800958a:	ee17 3a90 	vmov	r3, s15
 800958e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009590:	6a3b      	ldr	r3, [r7, #32]
}
 8009592:	4618      	mov	r0, r3
 8009594:	372c      	adds	r7, #44	; 0x2c
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	46020c00 	.word	0x46020c00
 80095a4:	0800e2e0 	.word	0x0800e2e0
 80095a8:	00f42400 	.word	0x00f42400
 80095ac:	4b742400 	.word	0x4b742400
 80095b0:	46000000 	.word	0x46000000

080095b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80095b8:	f7ff fefa 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 80095bc:	4602      	mov	r2, r0
 80095be:	4b07      	ldr	r3, [pc, #28]	; (80095dc <HAL_RCC_GetHCLKFreq+0x28>)
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	4906      	ldr	r1, [pc, #24]	; (80095e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80095c8:	5ccb      	ldrb	r3, [r1, r3]
 80095ca:	fa22 f303 	lsr.w	r3, r2, r3
 80095ce:	4a05      	ldr	r2, [pc, #20]	; (80095e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80095d0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80095d2:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80095d4:	681b      	ldr	r3, [r3, #0]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	46020c00 	.word	0x46020c00
 80095e0:	0800e2c8 	.word	0x0800e2c8
 80095e4:	20000000 	.word	0x20000000

080095e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80095ec:	f7ff ffe2 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 80095f0:	4602      	mov	r2, r0
 80095f2:	4b05      	ldr	r3, [pc, #20]	; (8009608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	091b      	lsrs	r3, r3, #4
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	4903      	ldr	r1, [pc, #12]	; (800960c <HAL_RCC_GetPCLK1Freq+0x24>)
 80095fe:	5ccb      	ldrb	r3, [r1, r3]
 8009600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009604:	4618      	mov	r0, r3
 8009606:	bd80      	pop	{r7, pc}
 8009608:	46020c00 	.word	0x46020c00
 800960c:	0800e2d8 	.word	0x0800e2d8

08009610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009614:	f7ff ffce 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 8009618:	4602      	mov	r2, r0
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	0a1b      	lsrs	r3, r3, #8
 8009620:	f003 0307 	and.w	r3, r3, #7
 8009624:	4903      	ldr	r1, [pc, #12]	; (8009634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009626:	5ccb      	ldrb	r3, [r1, r3]
 8009628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800962c:	4618      	mov	r0, r3
 800962e:	bd80      	pop	{r7, pc}
 8009630:	46020c00 	.word	0x46020c00
 8009634:	0800e2d8 	.word	0x0800e2d8

08009638 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800963c:	f7ff ffba 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 8009640:	4602      	mov	r2, r0
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <HAL_RCC_GetPCLK3Freq+0x20>)
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	091b      	lsrs	r3, r3, #4
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	4903      	ldr	r1, [pc, #12]	; (800965c <HAL_RCC_GetPCLK3Freq+0x24>)
 800964e:	5ccb      	ldrb	r3, [r1, r3]
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009654:	4618      	mov	r0, r3
 8009656:	bd80      	pop	{r7, pc}
 8009658:	46020c00 	.word	0x46020c00
 800965c:	0800e2d8 	.word	0x0800e2d8

08009660 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	221f      	movs	r2, #31
 800966e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8009670:	4b15      	ldr	r3, [pc, #84]	; (80096c8 <HAL_RCC_GetClockConfig+0x68>)
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	f003 0203 	and.w	r2, r3, #3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800967c:	4b12      	ldr	r3, [pc, #72]	; (80096c8 <HAL_RCC_GetClockConfig+0x68>)
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	f003 020f 	and.w	r2, r3, #15
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8009688:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <HAL_RCC_GetClockConfig+0x68>)
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8009694:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <HAL_RCC_GetClockConfig+0x68>)
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	091b      	lsrs	r3, r3, #4
 800969a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80096a2:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <HAL_RCC_GetClockConfig+0x68>)
 80096a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096ae:	4b07      	ldr	r3, [pc, #28]	; (80096cc <HAL_RCC_GetClockConfig+0x6c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 020f 	and.w	r2, r3, #15
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	601a      	str	r2, [r3, #0]
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	46020c00 	.word	0x46020c00
 80096cc:	40022000 	.word	0x40022000

080096d0 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80096d4:	4b05      	ldr	r3, [pc, #20]	; (80096ec <HAL_RCC_EnableCSS+0x1c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a04      	ldr	r2, [pc, #16]	; (80096ec <HAL_RCC_EnableCSS+0x1c>)
 80096da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096de:	6013      	str	r3, [r2, #0]
}
 80096e0:	bf00      	nop
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	46020c00 	.word	0x46020c00

080096f0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80096f4:	4b07      	ldr	r3, [pc, #28]	; (8009714 <HAL_RCC_NMI_IRQHandler+0x24>)
 80096f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009700:	d105      	bne.n	800970e <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8009702:	f000 f809 	bl	8009718 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009706:	4b03      	ldr	r3, [pc, #12]	; (8009714 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800970c:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800970e:	bf00      	nop
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	46020c00 	.word	0x46020c00

08009718 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800971c:	bf00      	nop
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009730:	4b3e      	ldr	r3, [pc, #248]	; (800982c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800973e:	f7fe fcfb 	bl	8008138 <HAL_PWREx_GetVoltageRange>
 8009742:	6178      	str	r0, [r7, #20]
 8009744:	e019      	b.n	800977a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009746:	4b39      	ldr	r3, [pc, #228]	; (800982c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800974c:	4a37      	ldr	r2, [pc, #220]	; (800982c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800974e:	f043 0304 	orr.w	r3, r3, #4
 8009752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009756:	4b35      	ldr	r3, [pc, #212]	; (800982c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009764:	f7fe fce8 	bl	8008138 <HAL_PWREx_GetVoltageRange>
 8009768:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800976a:	4b30      	ldr	r3, [pc, #192]	; (800982c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800976c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009770:	4a2e      	ldr	r2, [pc, #184]	; (800982c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009772:	f023 0304 	bic.w	r3, r3, #4
 8009776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009780:	d003      	beq.n	800978a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009788:	d109      	bne.n	800979e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009790:	d202      	bcs.n	8009798 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009792:	2301      	movs	r3, #1
 8009794:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009796:	e033      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800979c:	e030      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097a4:	d208      	bcs.n	80097b8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ac:	d102      	bne.n	80097b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80097ae:	2303      	movs	r3, #3
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	e025      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e035      	b.n	8009824 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097be:	d90f      	bls.n	80097e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d109      	bne.n	80097da <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097cc:	d902      	bls.n	80097d4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80097ce:	2300      	movs	r3, #0
 80097d0:	613b      	str	r3, [r7, #16]
 80097d2:	e015      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80097d4:	2301      	movs	r3, #1
 80097d6:	613b      	str	r3, [r7, #16]
 80097d8:	e012      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80097da:	2300      	movs	r3, #0
 80097dc:	613b      	str	r3, [r7, #16]
 80097de:	e00f      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097e6:	d109      	bne.n	80097fc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ee:	d102      	bne.n	80097f6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80097f0:	2301      	movs	r3, #1
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	e004      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80097f6:	2302      	movs	r3, #2
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	e001      	b.n	8009800 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80097fc:	2301      	movs	r3, #1
 80097fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009800:	4b0b      	ldr	r3, [pc, #44]	; (8009830 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f023 020f 	bic.w	r2, r3, #15
 8009808:	4909      	ldr	r1, [pc, #36]	; (8009830 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	4313      	orrs	r3, r2
 800980e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009810:	4b07      	ldr	r3, [pc, #28]	; (8009830 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	429a      	cmp	r2, r3
 800981c:	d001      	beq.n	8009822 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	46020c00 	.word	0x46020c00
 8009830:	40022000 	.word	0x40022000

08009834 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009838:	b0c8      	sub	sp, #288	; 0x120
 800983a:	af00      	add	r7, sp, #0
 800983c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009840:	2300      	movs	r3, #0
 8009842:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009846:	2300      	movs	r3, #0
 8009848:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800984c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	f002 0401 	and.w	r4, r2, #1
 8009858:	2500      	movs	r5, #0
 800985a:	ea54 0305 	orrs.w	r3, r4, r5
 800985e:	d00b      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009860:	4bd5      	ldr	r3, [pc, #852]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009866:	f023 0103 	bic.w	r1, r3, #3
 800986a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800986e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009870:	4ad1      	ldr	r2, [pc, #836]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009872:	430b      	orrs	r3, r1
 8009874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f002 0802 	and.w	r8, r2, #2
 8009884:	f04f 0900 	mov.w	r9, #0
 8009888:	ea58 0309 	orrs.w	r3, r8, r9
 800988c:	d00b      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800988e:	4bca      	ldr	r3, [pc, #808]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009894:	f023 010c 	bic.w	r1, r3, #12
 8009898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800989c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800989e:	4ac6      	ldr	r2, [pc, #792]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098a0:	430b      	orrs	r3, r1
 80098a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80098a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f002 0a04 	and.w	sl, r2, #4
 80098b2:	f04f 0b00 	mov.w	fp, #0
 80098b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80098ba:	d00b      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80098bc:	4bbe      	ldr	r3, [pc, #760]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098c2:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80098c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098cc:	4aba      	ldr	r2, [pc, #744]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098ce:	430b      	orrs	r3, r1
 80098d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80098d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f002 0308 	and.w	r3, r2, #8
 80098e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80098e4:	2300      	movs	r3, #0
 80098e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80098ea:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80098ee:	460b      	mov	r3, r1
 80098f0:	4313      	orrs	r3, r2
 80098f2:	d00b      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80098f4:	4bb0      	ldr	r3, [pc, #704]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80098f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80098fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009904:	4aac      	ldr	r2, [pc, #688]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009906:	430b      	orrs	r3, r1
 8009908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800990c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f002 0310 	and.w	r3, r2, #16
 8009918:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800991c:	2300      	movs	r3, #0
 800991e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009922:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009926:	460b      	mov	r3, r1
 8009928:	4313      	orrs	r3, r2
 800992a:	d00b      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800992c:	4ba2      	ldr	r3, [pc, #648]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800992e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800993a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800993c:	4a9e      	ldr	r2, [pc, #632]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800993e:	430b      	orrs	r3, r1
 8009940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009950:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009954:	2300      	movs	r3, #0
 8009956:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800995a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800995e:	460b      	mov	r3, r1
 8009960:	4313      	orrs	r3, r2
 8009962:	d00b      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8009964:	4b94      	ldr	r3, [pc, #592]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009966:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800996a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800996e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009974:	4a90      	ldr	r2, [pc, #576]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009976:	430b      	orrs	r3, r1
 8009978:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800997c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f002 0320 	and.w	r3, r2, #32
 8009988:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800998c:	2300      	movs	r3, #0
 800998e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009992:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009996:	460b      	mov	r3, r1
 8009998:	4313      	orrs	r3, r2
 800999a:	d00b      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800999c:	4b86      	ldr	r3, [pc, #536]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800999e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80099a2:	f023 0107 	bic.w	r1, r3, #7
 80099a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099ac:	4a82      	ldr	r2, [pc, #520]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099ae:	430b      	orrs	r3, r1
 80099b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80099c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099c4:	2300      	movs	r3, #0
 80099c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4313      	orrs	r3, r2
 80099d2:	d00b      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80099d4:	4b78      	ldr	r3, [pc, #480]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099da:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80099de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099e4:	4a74      	ldr	r2, [pc, #464]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80099e6:	430b      	orrs	r3, r1
 80099e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80099ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80099f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a06:	460b      	mov	r3, r1
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	d00b      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8009a0c:	4b6a      	ldr	r3, [pc, #424]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1c:	4a66      	ldr	r2, [pc, #408]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8009a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a34:	2300      	movs	r3, #0
 8009a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4313      	orrs	r3, r2
 8009a42:	d00b      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009a44:	4b5c      	ldr	r3, [pc, #368]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a54:	4a58      	ldr	r2, [pc, #352]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a56:	430b      	orrs	r3, r1
 8009a58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009a76:	460b      	mov	r3, r1
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	d00b      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009a7c:	4b4e      	ldr	r3, [pc, #312]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a82:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8009a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a8c:	4a4a      	ldr	r2, [pc, #296]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8009a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009aaa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	d00b      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8009ab4:	4b40      	ldr	r3, [pc, #256]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009aba:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8009abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac4:	4a3c      	ldr	r2, [pc, #240]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8009acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009adc:	2300      	movs	r3, #0
 8009ade:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ae2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	d00c      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8009aec:	4b32      	ldr	r3, [pc, #200]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009aee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009af2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009afe:	4a2e      	ldr	r2, [pc, #184]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b00:	430b      	orrs	r3, r1
 8009b02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8009b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b16:	2300      	movs	r3, #0
 8009b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b1c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4313      	orrs	r3, r2
 8009b24:	d00c      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009b26:	4b24      	ldr	r3, [pc, #144]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b2c:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8009b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b38:	4a1f      	ldr	r2, [pc, #124]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b3a:	430b      	orrs	r3, r1
 8009b3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b50:	2300      	movs	r3, #0
 8009b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	d00c      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009b60:	4b15      	ldr	r3, [pc, #84]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b66:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8009b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b72:	4a11      	ldr	r2, [pc, #68]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b74:	430b      	orrs	r3, r1
 8009b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8009b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4313      	orrs	r3, r2
 8009b98:	d010      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8009b9a:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ba0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bac:	4a02      	ldr	r2, [pc, #8]	; (8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009bb4:	e002      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x388>
 8009bb6:	bf00      	nop
 8009bb8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009bd2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	d04c      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009be0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009be4:	2b80      	cmp	r3, #128	; 0x80
 8009be6:	d02d      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009be8:	2b80      	cmp	r3, #128	; 0x80
 8009bea:	d827      	bhi.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bec:	2b60      	cmp	r3, #96	; 0x60
 8009bee:	d02b      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009bf0:	2b60      	cmp	r3, #96	; 0x60
 8009bf2:	d823      	bhi.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bf4:	2b40      	cmp	r3, #64	; 0x40
 8009bf6:	d006      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009bf8:	2b40      	cmp	r3, #64	; 0x40
 8009bfa:	d81f      	bhi.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d009      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d011      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009c04:	e01a      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009c06:	4bc0      	ldr	r3, [pc, #768]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	4abf      	ldr	r2, [pc, #764]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c10:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c12:	e01a      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c18:	3308      	adds	r3, #8
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f002 fce8 	bl	800c5f0 <RCCEx_PLL2_Config>
 8009c20:	4603      	mov	r3, r0
 8009c22:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c26:	e010      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c2c:	332c      	adds	r3, #44	; 0x2c
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f002 fd76 	bl	800c720 <RCCEx_PLL3_Config>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009c3a:	e006      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009c42:	e002      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009c44:	bf00      	nop
 8009c46:	e000      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c4a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10d      	bne.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009c52:	4bad      	ldr	r3, [pc, #692]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c58:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8009c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c64:	4aa8      	ldr	r2, [pc, #672]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009c66:	430b      	orrs	r3, r1
 8009c68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009c6c:	e003      	b.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009c72:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c86:	2300      	movs	r3, #0
 8009c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009c8c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009c90:	460b      	mov	r3, r1
 8009c92:	4313      	orrs	r3, r2
 8009c94:	d053      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca2:	d033      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8009ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca8:	d82c      	bhi.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cae:	d02f      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cb4:	d826      	bhi.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cba:	d008      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc0:	d820      	bhi.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00a      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cca:	d011      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009ccc:	e01a      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009cce:	4b8e      	ldr	r3, [pc, #568]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd2:	4a8d      	ldr	r2, [pc, #564]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cd8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009cda:	e01a      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ce0:	3308      	adds	r3, #8
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f002 fc84 	bl	800c5f0 <RCCEx_PLL2_Config>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009cee:	e010      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cf4:	332c      	adds	r3, #44	; 0x2c
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f002 fd12 	bl	800c720 <RCCEx_PLL3_Config>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009d02:	e006      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009d0a:	e002      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d0c:	bf00      	nop
 8009d0e:	e000      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d12:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10d      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009d1a:	4b7b      	ldr	r3, [pc, #492]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d20:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d2c:	4a76      	ldr	r2, [pc, #472]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009d2e:	430b      	orrs	r3, r1
 8009d30:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009d34:	e003      	b.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d36:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009d3a:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009d54:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	d046      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d66:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009d6a:	d028      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d6c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009d70:	d821      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d76:	d022      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d7c:	d81b      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d82:	d01c      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d88:	d815      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d8e:	d008      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d94:	d80f      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d011      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d9e:	d00e      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009da0:	e009      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009da6:	3308      	adds	r3, #8
 8009da8:	4618      	mov	r0, r3
 8009daa:	f002 fc21 	bl	800c5f0 <RCCEx_PLL2_Config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009db4:	e004      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009dbc:	e000      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10d      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009dc8:	4b4f      	ldr	r3, [pc, #316]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009dce:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009dda:	4a4b      	ldr	r2, [pc, #300]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009de2:	e003      	b.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009de8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009e06:	460b      	mov	r3, r1
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	d03f      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	d81e      	bhi.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009e18:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8009e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1e:	bf00      	nop
 8009e20:	08009e5f 	.word	0x08009e5f
 8009e24:	08009e35 	.word	0x08009e35
 8009e28:	08009e43 	.word	0x08009e43
 8009e2c:	08009e5f 	.word	0x08009e5f
 8009e30:	08009e5f 	.word	0x08009e5f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e34:	4b34      	ldr	r3, [pc, #208]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e38:	4a33      	ldr	r2, [pc, #204]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e3e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009e40:	e00e      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e46:	332c      	adds	r3, #44	; 0x2c
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f002 fc69 	bl	800c720 <RCCEx_PLL3_Config>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009e54:	e004      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009e5c:	e000      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8009e5e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009e60:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10d      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009e68:	4b27      	ldr	r3, [pc, #156]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e6e:	f023 0107 	bic.w	r1, r3, #7
 8009e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e7a:	4a23      	ldr	r2, [pc, #140]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009e82:	e003      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009e88:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009e98:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e9e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	d04c      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009eb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009eb4:	d02a      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009eba:	d821      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ebc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ec0:	d026      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009ec2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ec6:	d81b      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ecc:	d00e      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ed2:	d815      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d01d      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009edc:	d110      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ede:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	4a09      	ldr	r2, [pc, #36]	; (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ee8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009eea:	e014      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ef0:	332c      	adds	r3, #44	; 0x2c
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f002 fc14 	bl	800c720 <RCCEx_PLL3_Config>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009efe:	e00a      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009f06:	e006      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009f08:	46020c00 	.word	0x46020c00
        break;
 8009f0c:	bf00      	nop
 8009f0e:	e002      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f10:	bf00      	nop
 8009f12:	e000      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009f14:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009f16:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10d      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009f1e:	4baf      	ldr	r3, [pc, #700]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f24:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f30:	4aaa      	ldr	r2, [pc, #680]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f32:	430b      	orrs	r3, r1
 8009f34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009f38:	e003      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009f3e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009f4e:	673b      	str	r3, [r7, #112]	; 0x70
 8009f50:	2300      	movs	r3, #0
 8009f52:	677b      	str	r3, [r7, #116]	; 0x74
 8009f54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	f000 80b5 	beq.w	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f60:	2300      	movs	r3, #0
 8009f62:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f66:	4b9d      	ldr	r3, [pc, #628]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d113      	bne.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f74:	4b99      	ldr	r3, [pc, #612]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f7a:	4a98      	ldr	r2, [pc, #608]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f7c:	f043 0304 	orr.w	r3, r3, #4
 8009f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009f84:	4b95      	ldr	r3, [pc, #596]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f8a:	f003 0304 	and.w	r3, r3, #4
 8009f8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
      pwrclkchanged = SET;
 8009f96:	2301      	movs	r3, #1
 8009f98:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009f9c:	4b90      	ldr	r3, [pc, #576]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa0:	4a8f      	ldr	r2, [pc, #572]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fa2:	f043 0301 	orr.w	r3, r3, #1
 8009fa6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fa8:	f7f9 fdae 	bl	8003b08 <HAL_GetTick>
 8009fac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fb0:	e00b      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fb2:	f7f9 fda9 	bl	8003b08 <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d903      	bls.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 8009fc8:	e005      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009fca:	4b85      	ldr	r3, [pc, #532]	; (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0ed      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8009fd6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d165      	bne.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009fde:	4b7f      	ldr	r3, [pc, #508]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fe8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d023      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ff8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8009ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a000:	4293      	cmp	r3, r2
 800a002:	d01b      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a004:	4b75      	ldr	r3, [pc, #468]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a00e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a012:	4b72      	ldr	r3, [pc, #456]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a018:	4a70      	ldr	r2, [pc, #448]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a01a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a01e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a022:	4b6e      	ldr	r3, [pc, #440]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a028:	4a6c      	ldr	r2, [pc, #432]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a02a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a02e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a032:	4a6a      	ldr	r2, [pc, #424]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a034:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a038:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a03c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d019      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a048:	f7f9 fd5e 	bl	8003b08 <HAL_GetTick>
 800a04c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a050:	e00d      	b.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a052:	f7f9 fd59 	bl	8003b08 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a05c:	1ad2      	subs	r2, r2, r3
 800a05e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a062:	429a      	cmp	r2, r3
 800a064:	d903      	bls.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            break;
 800a06c:	e006      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a06e:	4b5b      	ldr	r3, [pc, #364]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d0ea      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 800a07c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10d      	bne.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a084:	4b55      	ldr	r3, [pc, #340]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a08a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a08e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a092:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a096:	4a51      	ldr	r2, [pc, #324]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a098:	430b      	orrs	r3, r1
 800a09a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a09e:	e008      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0a0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a0a4:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 800a0a8:	e003      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0aa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a0ae:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0b2:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d107      	bne.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0ba:	4b48      	ldr	r3, [pc, #288]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0c0:	4a46      	ldr	r2, [pc, #280]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a0c2:	f023 0304 	bic.w	r3, r3, #4
 800a0c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a0ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a0d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0d8:	2300      	movs	r3, #0
 800a0da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	d042      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a0e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a0ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a0f2:	d022      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a0f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a0f8:	d81b      	bhi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a0fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0fe:	d011      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a104:	d815      	bhi.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a106:	2b00      	cmp	r3, #0
 800a108:	d019      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800a10a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a10e:	d110      	bne.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a114:	3308      	adds	r3, #8
 800a116:	4618      	mov	r0, r3
 800a118:	f002 fa6a 	bl	800c5f0 <RCCEx_PLL2_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a122:	e00d      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a124:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a128:	4a2c      	ldr	r2, [pc, #176]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a12a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a12e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a130:	e006      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a138:	e002      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a13a:	bf00      	nop
 800a13c:	e000      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800a13e:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a140:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10d      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a148:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a14a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a14e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800a152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a156:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a15a:	4a20      	ldr	r2, [pc, #128]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a15c:	430b      	orrs	r3, r1
 800a15e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a162:	e003      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a164:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a168:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a178:	663b      	str	r3, [r7, #96]	; 0x60
 800a17a:	2300      	movs	r3, #0
 800a17c:	667b      	str	r3, [r7, #100]	; 0x64
 800a17e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a182:	460b      	mov	r3, r1
 800a184:	4313      	orrs	r3, r2
 800a186:	d031      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a18c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a194:	d00b      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a19a:	d804      	bhi.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d008      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a4:	d007      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a1ac:	e004      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1ae:	bf00      	nop
 800a1b0:	e002      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1b2:	bf00      	nop
 800a1b4:	e000      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800a1b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a1b8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d111      	bne.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a1c0:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a1c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1d2:	4a02      	ldr	r2, [pc, #8]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a1da:	e007      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 800a1dc:	46020c00 	.word	0x46020c00
 800a1e0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a1e8:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a1ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a1f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a202:	460b      	mov	r3, r1
 800a204:	4313      	orrs	r3, r2
 800a206:	d00c      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a208:	4bb2      	ldr	r3, [pc, #712]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a20a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a20e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800a212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a216:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a21a:	4aae      	ldr	r2, [pc, #696]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a21c:	430b      	orrs	r3, r1
 800a21e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a22e:	653b      	str	r3, [r7, #80]	; 0x50
 800a230:	2300      	movs	r3, #0
 800a232:	657b      	str	r3, [r7, #84]	; 0x54
 800a234:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a238:	460b      	mov	r3, r1
 800a23a:	4313      	orrs	r3, r2
 800a23c:	d019      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a24a:	d105      	bne.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a24c:	4ba1      	ldr	r3, [pc, #644]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a250:	4aa0      	ldr	r2, [pc, #640]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a256:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a258:	4b9e      	ldr	r3, [pc, #632]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a25a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a25e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a26a:	4a9a      	ldr	r2, [pc, #616]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a26c:	430b      	orrs	r3, r1
 800a26e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a27e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a280:	2300      	movs	r3, #0
 800a282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a284:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a288:	460b      	mov	r3, r1
 800a28a:	4313      	orrs	r3, r2
 800a28c:	d00c      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a28e:	4b91      	ldr	r3, [pc, #580]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a294:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a29c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a2a0:	4a8c      	ldr	r2, [pc, #560]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a2a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a2b4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a2ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	d00c      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a2c4:	4b83      	ldr	r3, [pc, #524]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a2ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a2d6:	4a7f      	ldr	r2, [pc, #508]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a2ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	d00c      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a2fa:	4b76      	ldr	r3, [pc, #472]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a2fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a300:	f023 0118 	bic.w	r1, r3, #24
 800a304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a308:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800a30c:	4a71      	ldr	r2, [pc, #452]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a30e:	430b      	orrs	r3, r1
 800a310:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800a320:	633b      	str	r3, [r7, #48]	; 0x30
 800a322:	2300      	movs	r3, #0
 800a324:	637b      	str	r3, [r7, #52]	; 0x34
 800a326:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a32a:	460b      	mov	r3, r1
 800a32c:	4313      	orrs	r3, r2
 800a32e:	d032      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800a330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a334:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a33c:	d105      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a33e:	4b65      	ldr	r3, [pc, #404]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a342:	4a64      	ldr	r2, [pc, #400]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a348:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800a34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a34e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a356:	d108      	bne.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a35c:	3308      	adds	r3, #8
 800a35e:	4618      	mov	r0, r3
 800a360:	f002 f946 	bl	800c5f0 <RCCEx_PLL2_Config>
 800a364:	4603      	mov	r3, r0
 800a366:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }
    if (ret == HAL_OK)
 800a36a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10d      	bne.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a372:	4b58      	ldr	r3, [pc, #352]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a374:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a378:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a380:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a384:	4a53      	ldr	r2, [pc, #332]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a386:	430b      	orrs	r3, r1
 800a388:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a38c:	e003      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a38e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a392:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800a396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	2100      	movs	r1, #0
 800a3a0:	62b9      	str	r1, [r7, #40]	; 0x28
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	d04a      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800a3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a3ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a3be:	d01e      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800a3c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a3c4:	d825      	bhi.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a3c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3ca:	d00e      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 800a3cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3d0:	d81f      	bhi.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d021      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800a3d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3da:	d11a      	bne.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3dc:	4b3d      	ldr	r3, [pc, #244]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e0:	4a3c      	ldr	r2, [pc, #240]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a3e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3e6:	6293      	str	r3, [r2, #40]	; 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a3e8:	e018      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f002 f8fd 	bl	800c5f0 <RCCEx_PLL2_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a3fc:	e00e      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a402:	332c      	adds	r3, #44	; 0x2c
 800a404:	4618      	mov	r0, r3
 800a406:	f002 f98b 	bl	800c720 <RCCEx_PLL3_Config>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800a410:	e004      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a418:	e000      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 800a41a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a41c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10d      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800a424:	4b2b      	ldr	r3, [pc, #172]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a426:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a42a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a42e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a432:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a436:	4927      	ldr	r1, [pc, #156]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a43e:	e003      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a440:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a444:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800a448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800a454:	623b      	str	r3, [r7, #32]
 800a456:	2300      	movs	r3, #0
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
 800a45a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a45e:	460b      	mov	r3, r1
 800a460:	4313      	orrs	r3, r2
 800a462:	d03d      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800a464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a470:	d00e      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800a472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a476:	d815      	bhi.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d017      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a47c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a480:	d110      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a482:	4b14      	ldr	r3, [pc, #80]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a486:	4a13      	ldr	r2, [pc, #76]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a48c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a48e:	e00e      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a494:	3308      	adds	r3, #8
 800a496:	4618      	mov	r0, r3
 800a498:	f002 f8aa 	bl	800c5f0 <RCCEx_PLL2_Config>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800a4a2:	e004      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a4aa:	e000      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a4ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a4ae:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d110      	bne.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800a4b6:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4c8:	4902      	ldr	r1, [pc, #8]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a4d0:	e006      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a4d2:	bf00      	nop
 800a4d4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d8:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a4dc:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a4ec:	61bb      	str	r3, [r7, #24]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	61fb      	str	r3, [r7, #28]
 800a4f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	d00c      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a4fc:	4b68      	ldr	r3, [pc, #416]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a4fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a502:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a50a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a50e:	4964      	ldr	r1, [pc, #400]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a510:	4313      	orrs	r3, r2
 800a512:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	2100      	movs	r1, #0
 800a520:	6139      	str	r1, [r7, #16]
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a52c:	460b      	mov	r3, r1
 800a52e:	4313      	orrs	r3, r2
 800a530:	d036      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a536:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00c      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a53e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a542:	d113      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a548:	3308      	adds	r3, #8
 800a54a:	4618      	mov	r0, r3
 800a54c:	f002 f850 	bl	800c5f0 <RCCEx_PLL2_Config>
 800a550:	4603      	mov	r3, r0
 800a552:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a556:	e00d      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a55c:	332c      	adds	r3, #44	; 0x2c
 800a55e:	4618      	mov	r0, r3
 800a560:	f002 f8de 	bl	800c720 <RCCEx_PLL3_Config>
 800a564:	4603      	mov	r3, r0
 800a566:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a56a:	e003      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a572:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a574:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10d      	bne.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a57c:	4b48      	ldr	r3, [pc, #288]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a57e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a582:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a58a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a58e:	4944      	ldr	r1, [pc, #272]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a590:	4313      	orrs	r3, r2
 800a592:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a596:	e003      	b.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a598:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a59c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	d024      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d108      	bne.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5cc:	332c      	adds	r3, #44	; 0x2c
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f002 f8a6 	bl	800c720 <RCCEx_PLL3_Config>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    }

    if (ret == HAL_OK)
 800a5da:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10d      	bne.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a5e2:	4b2f      	ldr	r3, [pc, #188]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a5e8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a5ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a5f4:	492a      	ldr	r1, [pc, #168]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a5fc:	e003      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fe:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a602:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	2100      	movs	r1, #0
 800a610:	6039      	str	r1, [r7, #0]
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	607b      	str	r3, [r7, #4]
 800a618:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a61c:	460b      	mov	r3, r1
 800a61e:	4313      	orrs	r3, r2
 800a620:	d036      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a626:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a62a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a62e:	d00d      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a630:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a634:	d811      	bhi.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a63a:	d012      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a63c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a640:	d80b      	bhi.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00d      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a64a:	d106      	bne.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a64c:	4b14      	ldr	r3, [pc, #80]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a650:	4a13      	ldr	r2, [pc, #76]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a656:	6293      	str	r3, [r2, #40]	; 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a658:	e004      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
        break;
 800a660:	e000      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a662:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a664:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10d      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a66c:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a66e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a672:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a67a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a67e:	4908      	ldr	r1, [pc, #32]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a680:	4313      	orrs	r3, r2
 800a682:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a686:	e003      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800a68c:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a690:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
}
 800a694:	4618      	mov	r0, r3
 800a696:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a69a:	46bd      	mov	sp, r7
 800a69c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6a0:	46020c00 	.word	0x46020c00

0800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b089      	sub	sp, #36	; 0x24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a6ac:	4ba6      	ldr	r3, [pc, #664]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a6b6:	4ba4      	ldr	r3, [pc, #656]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a6c0:	4ba1      	ldr	r3, [pc, #644]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c4:	0a1b      	lsrs	r3, r3, #8
 800a6c6:	f003 030f 	and.w	r3, r3, #15
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a6ce:	4b9e      	ldr	r3, [pc, #632]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	091b      	lsrs	r3, r3, #4
 800a6d4:	f003 0301 	and.w	r3, r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a6da:	4b9b      	ldr	r3, [pc, #620]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6de:	08db      	lsrs	r3, r3, #3
 800a6e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ea:	ee07 3a90 	vmov	s15, r3
 800a6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b03      	cmp	r3, #3
 800a6fa:	d062      	beq.n	800a7c2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	f200 8081 	bhi.w	800a806 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d024      	beq.n	800a754 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d17a      	bne.n	800a806 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	ee07 3a90 	vmov	s15, r3
 800a716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a722:	4b89      	ldr	r3, [pc, #548]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a732:	ed97 6a02 	vldr	s12, [r7, #8]
 800a736:	eddf 5a86 	vldr	s11, [pc, #536]	; 800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a746:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a752:	e08f      	b.n	800a874 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a754:	4b7c      	ldr	r3, [pc, #496]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a760:	4b79      	ldr	r3, [pc, #484]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	0f1b      	lsrs	r3, r3, #28
 800a766:	f003 030f 	and.w	r3, r3, #15
 800a76a:	e006      	b.n	800a77a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a76c:	4b76      	ldr	r3, [pc, #472]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a76e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a772:	041b      	lsls	r3, r3, #16
 800a774:	0f1b      	lsrs	r3, r3, #28
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	4a76      	ldr	r2, [pc, #472]	; (800a954 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a780:	ee07 3a90 	vmov	s15, r3
 800a784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	ee07 3a90 	vmov	s15, r3
 800a79c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7a4:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a7b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7c0:	e058      	b.n	800a874 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	ee07 3a90 	vmov	s15, r3
 800a7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7cc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a94c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a7d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d4:	4b5c      	ldr	r3, [pc, #368]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7dc:	ee07 3a90 	vmov	s15, r3
 800a7e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7e4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7e8:	eddf 5a59 	vldr	s11, [pc, #356]	; 800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a7ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a7fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a800:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a804:	e036      	b.n	800a874 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a806:	4b50      	ldr	r3, [pc, #320]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d005      	beq.n	800a81e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a812:	4b4d      	ldr	r3, [pc, #308]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	0f1b      	lsrs	r3, r3, #28
 800a818:	f003 030f 	and.w	r3, r3, #15
 800a81c:	e006      	b.n	800a82c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a81e:	4b4a      	ldr	r3, [pc, #296]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a824:	041b      	lsls	r3, r3, #16
 800a826:	0f1b      	lsrs	r3, r3, #28
 800a828:	f003 030f 	and.w	r3, r3, #15
 800a82c:	4a49      	ldr	r2, [pc, #292]	; (800a954 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a82e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	ee07 3a90 	vmov	s15, r3
 800a840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a852:	ed97 6a02 	vldr	s12, [r7, #8]
 800a856:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a950 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a866:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a872:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a874:	4b34      	ldr	r3, [pc, #208]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d017      	beq.n	800a8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a880:	4b31      	ldr	r3, [pc, #196]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a884:	0a5b      	lsrs	r3, r3, #9
 800a886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a896:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a89a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a89e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8a6:	ee17 2a90 	vmov	r2, s15
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	e002      	b.n	800a8b6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a8b6:	4b24      	ldr	r3, [pc, #144]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d017      	beq.n	800a8f2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8c2:	4b21      	ldr	r3, [pc, #132]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c6:	0c1b      	lsrs	r3, r3, #16
 800a8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8cc:	ee07 3a90 	vmov	s15, r3
 800a8d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a8d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8d8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e8:	ee17 2a90 	vmov	r2, s15
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	605a      	str	r2, [r3, #4]
 800a8f0:	e002      	b.n	800a8f8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a8f8:	4b13      	ldr	r3, [pc, #76]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d017      	beq.n	800a934 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a904:	4b10      	ldr	r3, [pc, #64]	; (800a948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a908:	0e1b      	lsrs	r3, r3, #24
 800a90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a91a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a91e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a92a:	ee17 2a90 	vmov	r2, s15
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a932:	e002      	b.n	800a93a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	609a      	str	r2, [r3, #8]
}
 800a93a:	bf00      	nop
 800a93c:	3724      	adds	r7, #36	; 0x24
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	46020c00 	.word	0x46020c00
 800a94c:	4b742400 	.word	0x4b742400
 800a950:	46000000 	.word	0x46000000
 800a954:	0800e2e0 	.word	0x0800e2e0

0800a958 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a958:	b480      	push	{r7}
 800a95a:	b089      	sub	sp, #36	; 0x24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a960:	4ba6      	ldr	r3, [pc, #664]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a968:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a96a:	4ba4      	ldr	r3, [pc, #656]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96e:	f003 0303 	and.w	r3, r3, #3
 800a972:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a974:	4ba1      	ldr	r3, [pc, #644]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	0a1b      	lsrs	r3, r3, #8
 800a97a:	f003 030f 	and.w	r3, r3, #15
 800a97e:	3301      	adds	r3, #1
 800a980:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a982:	4b9e      	ldr	r3, [pc, #632]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	091b      	lsrs	r3, r3, #4
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a98e:	4b9b      	ldr	r3, [pc, #620]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a992:	08db      	lsrs	r3, r3, #3
 800a994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	d062      	beq.n	800aa76 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	f200 8081 	bhi.w	800aaba <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d024      	beq.n	800aa08 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d17a      	bne.n	800aaba <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ce:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d6:	4b89      	ldr	r3, [pc, #548]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9de:	ee07 3a90 	vmov	s15, r3
 800a9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9ea:	eddf 5a86 	vldr	s11, [pc, #536]	; 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa06:	e08f      	b.n	800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa08:	4b7c      	ldr	r3, [pc, #496]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d005      	beq.n	800aa20 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800aa14:	4b79      	ldr	r3, [pc, #484]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	0f1b      	lsrs	r3, r3, #28
 800aa1a:	f003 030f 	and.w	r3, r3, #15
 800aa1e:	e006      	b.n	800aa2e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800aa20:	4b76      	ldr	r3, [pc, #472]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aa26:	041b      	lsls	r3, r3, #16
 800aa28:	0f1b      	lsrs	r3, r3, #28
 800aa2a:	f003 030f 	and.w	r3, r3, #15
 800aa2e:	4a76      	ldr	r2, [pc, #472]	; (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aa30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa34:	ee07 3a90 	vmov	s15, r3
 800aa38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	ee07 3a90 	vmov	s15, r3
 800aa50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa54:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa58:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aa5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa68:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aa6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa74:	e058      	b.n	800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	ee07 3a90 	vmov	s15, r3
 800aa7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa80:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800aa84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa88:	4b5c      	ldr	r3, [pc, #368]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aa8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa98:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa9c:	eddf 5a59 	vldr	s11, [pc, #356]	; 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800aaa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aaa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aab8:	e036      	b.n	800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800aaba:	4b50      	ldr	r3, [pc, #320]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d005      	beq.n	800aad2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800aac6:	4b4d      	ldr	r3, [pc, #308]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	0f1b      	lsrs	r3, r3, #28
 800aacc:	f003 030f 	and.w	r3, r3, #15
 800aad0:	e006      	b.n	800aae0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800aad2:	4b4a      	ldr	r3, [pc, #296]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800aad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aad8:	041b      	lsls	r3, r3, #16
 800aada:	0f1b      	lsrs	r3, r3, #28
 800aadc:	f003 030f 	and.w	r3, r3, #15
 800aae0:	4a49      	ldr	r2, [pc, #292]	; (800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800aae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	ee07 3a90 	vmov	s15, r3
 800aaf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab0a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800ab0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800ab1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab26:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800ab28:	4b34      	ldr	r3, [pc, #208]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d017      	beq.n	800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab34:	4b31      	ldr	r3, [pc, #196]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab38:	0a5b      	lsrs	r3, r3, #9
 800ab3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800ab46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab4a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab5a:	ee17 2a90 	vmov	r2, s15
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	e002      	b.n	800ab6a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ab6a:	4b24      	ldr	r3, [pc, #144]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d017      	beq.n	800aba6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab76:	4b21      	ldr	r3, [pc, #132]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800ab78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7a:	0c1b      	lsrs	r3, r3, #16
 800ab7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab80:	ee07 3a90 	vmov	s15, r3
 800ab84:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ab88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab8c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab9c:	ee17 2a90 	vmov	r2, s15
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	605a      	str	r2, [r3, #4]
 800aba4:	e002      	b.n	800abac <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800abac:	4b13      	ldr	r3, [pc, #76]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d017      	beq.n	800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abb8:	4b10      	ldr	r3, [pc, #64]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800abba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbc:	0e1b      	lsrs	r3, r3, #24
 800abbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800abca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800abd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abde:	ee17 2a90 	vmov	r2, s15
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abe6:	e002      	b.n	800abee <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	609a      	str	r2, [r3, #8]
}
 800abee:	bf00      	nop
 800abf0:	3724      	adds	r7, #36	; 0x24
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	46020c00 	.word	0x46020c00
 800ac00:	4b742400 	.word	0x4b742400
 800ac04:	46000000 	.word	0x46000000
 800ac08:	0800e2e0 	.word	0x0800e2e0

0800ac0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b089      	sub	sp, #36	; 0x24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ac14:	4ba6      	ldr	r3, [pc, #664]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ac1e:	4ba4      	ldr	r3, [pc, #656]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	f003 0303 	and.w	r3, r3, #3
 800ac26:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800ac28:	4ba1      	ldr	r3, [pc, #644]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	0a1b      	lsrs	r3, r3, #8
 800ac2e:	f003 030f 	and.w	r3, r3, #15
 800ac32:	3301      	adds	r3, #1
 800ac34:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800ac36:	4b9e      	ldr	r3, [pc, #632]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac3a:	091b      	lsrs	r3, r3, #4
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ac42:	4b9b      	ldr	r3, [pc, #620]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac46:	08db      	lsrs	r3, r3, #3
 800ac48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	fb02 f303 	mul.w	r3, r2, r3
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	d062      	beq.n	800ad2a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	f200 8081 	bhi.w	800ad6e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d024      	beq.n	800acbc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d17a      	bne.n	800ad6e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac82:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ac86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac8a:	4b89      	ldr	r3, [pc, #548]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac9e:	eddf 5a86 	vldr	s11, [pc, #536]	; 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800aca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800aca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800acaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800acb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800acba:	e08f      	b.n	800addc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800acbc:	4b7c      	ldr	r3, [pc, #496]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800acc8:	4b79      	ldr	r3, [pc, #484]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	0f1b      	lsrs	r3, r3, #28
 800acce:	f003 030f 	and.w	r3, r3, #15
 800acd2:	e006      	b.n	800ace2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800acd4:	4b76      	ldr	r3, [pc, #472]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800acd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acda:	041b      	lsls	r3, r3, #16
 800acdc:	0f1b      	lsrs	r3, r3, #28
 800acde:	f003 030f 	and.w	r3, r3, #15
 800ace2:	4a76      	ldr	r2, [pc, #472]	; (800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ace4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	ee07 3a90 	vmov	s15, r3
 800ad04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad08:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad28:	e058      	b.n	800addc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad34:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800ad38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3c:	4b5c      	ldr	r3, [pc, #368]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad4c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad50:	eddf 5a59 	vldr	s11, [pc, #356]	; 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800ad54:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad60:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800ad64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad6c:	e036      	b.n	800addc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800ad6e:	4b50      	ldr	r3, [pc, #320]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d005      	beq.n	800ad86 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800ad7a:	4b4d      	ldr	r3, [pc, #308]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	0f1b      	lsrs	r3, r3, #28
 800ad80:	f003 030f 	and.w	r3, r3, #15
 800ad84:	e006      	b.n	800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800ad86:	4b4a      	ldr	r3, [pc, #296]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ad88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad8c:	041b      	lsls	r3, r3, #16
 800ad8e:	0f1b      	lsrs	r3, r3, #28
 800ad90:	f003 030f 	and.w	r3, r3, #15
 800ad94:	4a49      	ldr	r2, [pc, #292]	; (800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800ad96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad9a:	ee07 3a90 	vmov	s15, r3
 800ad9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	ee07 3a90 	vmov	s15, r3
 800ada8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adba:	ed97 6a02 	vldr	s12, [r7, #8]
 800adbe:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800adc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800add2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adda:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800addc:	4b34      	ldr	r3, [pc, #208]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d017      	beq.n	800ae18 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ade8:	4b31      	ldr	r3, [pc, #196]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800adea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adec:	0a5b      	lsrs	r3, r3, #9
 800adee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800adfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adfe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0e:	ee17 2a90 	vmov	r2, s15
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	e002      	b.n	800ae1e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ae1e:	4b24      	ldr	r3, [pc, #144]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d017      	beq.n	800ae5a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae2a:	4b21      	ldr	r3, [pc, #132]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2e:	0c1b      	lsrs	r3, r3, #16
 800ae30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae34:	ee07 3a90 	vmov	s15, r3
 800ae38:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ae3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae40:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae50:	ee17 2a90 	vmov	r2, s15
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	605a      	str	r2, [r3, #4]
 800ae58:	e002      	b.n	800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ae60:	4b13      	ldr	r3, [pc, #76]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d017      	beq.n	800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae6c:	4b10      	ldr	r3, [pc, #64]	; (800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800ae6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae70:	0e1b      	lsrs	r3, r3, #24
 800ae72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae76:	ee07 3a90 	vmov	s15, r3
 800ae7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800ae7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae82:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae92:	ee17 2a90 	vmov	r2, s15
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae9a:	e002      	b.n	800aea2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	609a      	str	r2, [r3, #8]
}
 800aea2:	bf00      	nop
 800aea4:	3724      	adds	r7, #36	; 0x24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	46020c00 	.word	0x46020c00
 800aeb4:	4b742400 	.word	0x4b742400
 800aeb8:	46000000 	.word	0x46000000
 800aebc:	0800e2e0 	.word	0x0800e2e0

0800aec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b08e      	sub	sp, #56	; 0x38
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800aeca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aece:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800aed2:	430b      	orrs	r3, r1
 800aed4:	d145      	bne.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aed6:	4ba7      	ldr	r3, [pc, #668]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aedc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aee0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800aee2:	4ba4      	ldr	r3, [pc, #656]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d108      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aef6:	d104      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800aef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aefc:	637b      	str	r3, [r7, #52]	; 0x34
 800aefe:	f001 bb5a 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800af02:	4b9c      	ldr	r3, [pc, #624]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af10:	d114      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af18:	d110      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af1a:	4b96      	ldr	r3, [pc, #600]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af28:	d103      	bne.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800af2a:	23fa      	movs	r3, #250	; 0xfa
 800af2c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af2e:	f001 bb42 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800af32:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800af36:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af38:	f001 bb3d 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800af3c:	4b8d      	ldr	r3, [pc, #564]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af48:	d107      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af50:	d103      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800af52:	4b89      	ldr	r3, [pc, #548]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800af54:	637b      	str	r3, [r7, #52]	; 0x34
 800af56:	f001 bb2e 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34
 800af5e:	f001 bb2a 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af66:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800af6a:	430b      	orrs	r3, r1
 800af6c:	d151      	bne.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800af6e:	4b81      	ldr	r3, [pc, #516]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800af70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800af74:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800af78:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	2b80      	cmp	r3, #128	; 0x80
 800af7e:	d035      	beq.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800af80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af82:	2b80      	cmp	r3, #128	; 0x80
 800af84:	d841      	bhi.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af88:	2b60      	cmp	r3, #96	; 0x60
 800af8a:	d02a      	beq.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	2b60      	cmp	r3, #96	; 0x60
 800af90:	d83b      	bhi.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	2b40      	cmp	r3, #64	; 0x40
 800af96:	d009      	beq.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	2b40      	cmp	r3, #64	; 0x40
 800af9c:	d835      	bhi.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00c      	beq.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d012      	beq.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800afaa:	e02e      	b.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7ff fb77 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800afb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afba:	f001 bafc 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afbe:	f107 0318 	add.w	r3, r7, #24
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff fcc8 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afcc:	f001 baf3 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd0:	f107 030c 	add.w	r3, r7, #12
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff fe19 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afde:	f001 baea 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800afe2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800afe6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afe8:	f001 bae5 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800afec:	4b61      	ldr	r3, [pc, #388]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aff8:	d103      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800affa:	4b60      	ldr	r3, [pc, #384]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800affc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800affe:	f001 bada 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b002:	2300      	movs	r3, #0
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b006:	f001 bad6 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b00e:	f001 bad2 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b012:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b016:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b01a:	430b      	orrs	r3, r1
 800b01c:	d158      	bne.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b01e:	4b55      	ldr	r3, [pc, #340]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b020:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b028:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b030:	d03b      	beq.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b038:	d846      	bhi.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b040:	d02e      	beq.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b048:	d83e      	bhi.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b050:	d00b      	beq.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b058:	d836      	bhi.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00d      	beq.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b066:	d012      	beq.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b068:	e02e      	b.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b06a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff fb18 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b078:	f001 ba9d 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b07c:	f107 0318 	add.w	r3, r7, #24
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fc69 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b08a:	f001 ba94 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b08e:	f107 030c 	add.w	r3, r7, #12
 800b092:	4618      	mov	r0, r3
 800b094:	f7ff fdba 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b09c:	f001 ba8b 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b0a0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b0a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0a6:	f001 ba86 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0aa:	4b32      	ldr	r3, [pc, #200]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0b6:	d103      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b0b8:	4b30      	ldr	r3, [pc, #192]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b0ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0bc:	f001 ba7b 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0c4:	f001 ba77 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b0cc:	f001 ba73 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d4:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	d126      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b0dc:	4b25      	ldr	r3, [pc, #148]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b0e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0e6:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b0e8:	4b22      	ldr	r3, [pc, #136]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0f4:	d106      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b0fc:	4b1f      	ldr	r3, [pc, #124]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b0fe:	637b      	str	r3, [r7, #52]	; 0x34
 800b100:	f001 ba59 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b104:	4b1b      	ldr	r3, [pc, #108]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b10c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b110:	d107      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b118:	d103      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b11a:	4b19      	ldr	r3, [pc, #100]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b11c:	637b      	str	r3, [r7, #52]	; 0x34
 800b11e:	f001 ba4a 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b122:	2300      	movs	r3, #0
 800b124:	637b      	str	r3, [r7, #52]	; 0x34
 800b126:	f001 ba46 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b12a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b12e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800b132:	430b      	orrs	r3, r1
 800b134:	d16e      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b136:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b13c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b140:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b148:	d03d      	beq.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b150:	d85c      	bhi.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b158:	d014      	beq.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b160:	d854      	bhi.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01f      	beq.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b16e:	d012      	beq.n	800b196 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b170:	e04c      	b.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b172:	bf00      	nop
 800b174:	46020c00 	.word	0x46020c00
 800b178:	0007a120 	.word	0x0007a120
 800b17c:	00f42400 	.word	0x00f42400
 800b180:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b188:	4618      	mov	r0, r3
 800b18a:	f7ff fa8b 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b190:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b192:	f001 ba10 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b196:	f107 0318 	add.w	r3, r7, #24
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff fbdc 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1a4:	f001 ba07 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b1a8:	4ba7      	ldr	r3, [pc, #668]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1b4:	d103      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b1b6:	4ba5      	ldr	r3, [pc, #660]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1ba:	f001 b9fc 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1c2:	f001 b9f8 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1c6:	4ba0      	ldr	r3, [pc, #640]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0320 	and.w	r3, r3, #32
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	d118      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1d2:	4b9d      	ldr	r3, [pc, #628]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d005      	beq.n	800b1ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b1de:	4b9a      	ldr	r3, [pc, #616]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	0e1b      	lsrs	r3, r3, #24
 800b1e4:	f003 030f 	and.w	r3, r3, #15
 800b1e8:	e006      	b.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b1ea:	4b97      	ldr	r3, [pc, #604]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b1ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1f0:	041b      	lsls	r3, r3, #16
 800b1f2:	0e1b      	lsrs	r3, r3, #24
 800b1f4:	f003 030f 	and.w	r3, r3, #15
 800b1f8:	4a95      	ldr	r2, [pc, #596]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1fe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b200:	f001 b9d9 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b204:	2300      	movs	r3, #0
 800b206:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b208:	f001 b9d5 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b210:	f001 b9d1 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b214:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b218:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800b21c:	430b      	orrs	r3, r1
 800b21e:	d17f      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b220:	4b89      	ldr	r3, [pc, #548]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b222:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b22a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d165      	bne.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b232:	4b85      	ldr	r3, [pc, #532]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b238:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b23c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b244:	d034      	beq.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b24c:	d853      	bhi.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b254:	d00b      	beq.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b25c:	d84b      	bhi.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	2b00      	cmp	r3, #0
 800b262:	d016      	beq.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b26a:	d009      	beq.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b26c:	e043      	b.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b26e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fa16 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b27c:	f001 b99b 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b280:	f107 0318 	add.w	r3, r7, #24
 800b284:	4618      	mov	r0, r3
 800b286:	f7ff fb67 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b28e:	f001 b992 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b292:	4b6d      	ldr	r3, [pc, #436]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b29a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b29e:	d103      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b2a0:	4b6a      	ldr	r3, [pc, #424]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b2a2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b2a4:	f001 b987 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b2ac:	f001 b983 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b2b0:	4b65      	ldr	r3, [pc, #404]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b20      	cmp	r3, #32
 800b2ba:	d118      	bne.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b2bc:	4b62      	ldr	r3, [pc, #392]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d005      	beq.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b2c8:	4b5f      	ldr	r3, [pc, #380]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	0e1b      	lsrs	r3, r3, #24
 800b2ce:	f003 030f 	and.w	r3, r3, #15
 800b2d2:	e006      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b2d4:	4b5c      	ldr	r3, [pc, #368]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b2d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b2da:	041b      	lsls	r3, r3, #16
 800b2dc:	0e1b      	lsrs	r3, r3, #24
 800b2de:	f003 030f 	and.w	r3, r3, #15
 800b2e2:	4a5b      	ldr	r2, [pc, #364]	; (800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2e8:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b2ea:	f001 b964 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b2f2:	f001 b960 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b2fa:	f001 b95c 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b304:	d108      	bne.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff f9ca 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	637b      	str	r3, [r7, #52]	; 0x34
 800b314:	f001 b94f 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	637b      	str	r3, [r7, #52]	; 0x34
 800b31c:	f001 b94b 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b324:	1e51      	subs	r1, r2, #1
 800b326:	430b      	orrs	r3, r1
 800b328:	d136      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b32a:	4b47      	ldr	r3, [pc, #284]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b32c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b330:	f003 0303 	and.w	r3, r3, #3
 800b334:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b33c:	f7fe f968 	bl	8009610 <HAL_RCC_GetPCLK2Freq>
 800b340:	6378      	str	r0, [r7, #52]	; 0x34
 800b342:	f001 b938 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d104      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b34c:	f7fe f830 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b350:	6378      	str	r0, [r7, #52]	; 0x34
 800b352:	f001 b930 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b356:	4b3c      	ldr	r3, [pc, #240]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b35e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b362:	d106      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	2b02      	cmp	r3, #2
 800b368:	d103      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b36a:	4b3a      	ldr	r3, [pc, #232]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b36c:	637b      	str	r3, [r7, #52]	; 0x34
 800b36e:	f001 b922 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b372:	4b35      	ldr	r3, [pc, #212]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b378:	f003 0302 	and.w	r3, r3, #2
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d107      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	2b03      	cmp	r3, #3
 800b384:	d104      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b38a:	637b      	str	r3, [r7, #52]	; 0x34
 800b38c:	f001 b913 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b390:	2300      	movs	r3, #0
 800b392:	637b      	str	r3, [r7, #52]	; 0x34
 800b394:	f001 b90f 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b39c:	1e91      	subs	r1, r2, #2
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	d136      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b3a2:	4b29      	ldr	r3, [pc, #164]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3a8:	f003 030c 	and.w	r3, r3, #12
 800b3ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d104      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b3b4:	f7fe f918 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800b3b8:	6378      	str	r0, [r7, #52]	; 0x34
 800b3ba:	f001 b8fc 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	2b04      	cmp	r3, #4
 800b3c2:	d104      	bne.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b3c4:	f7fd fff4 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b3c8:	6378      	str	r0, [r7, #52]	; 0x34
 800b3ca:	f001 b8f4 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b3ce:	4b1e      	ldr	r3, [pc, #120]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3da:	d106      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	2b08      	cmp	r3, #8
 800b3e0:	d103      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b3e2:	4b1c      	ldr	r3, [pc, #112]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e6:	f001 b8e6 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b3ea:	4b17      	ldr	r3, [pc, #92]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b3ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3f0:	f003 0302 	and.w	r3, r3, #2
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d107      	bne.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fa:	2b0c      	cmp	r3, #12
 800b3fc:	d104      	bne.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b3fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b402:	637b      	str	r3, [r7, #52]	; 0x34
 800b404:	f001 b8d7 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b408:	2300      	movs	r3, #0
 800b40a:	637b      	str	r3, [r7, #52]	; 0x34
 800b40c:	f001 b8d3 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b414:	1f11      	subs	r1, r2, #4
 800b416:	430b      	orrs	r3, r1
 800b418:	d13f      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b41a:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b41c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b420:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b424:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b42c:	f7fe f8dc 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800b430:	6378      	str	r0, [r7, #52]	; 0x34
 800b432:	f001 b8c0 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	2b10      	cmp	r3, #16
 800b43a:	d10d      	bne.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b43c:	f7fd ffb8 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b440:	6378      	str	r0, [r7, #52]	; 0x34
 800b442:	f001 b8b8 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b446:	bf00      	nop
 800b448:	46020c00 	.word	0x46020c00
 800b44c:	02dc6c00 	.word	0x02dc6c00
 800b450:	0800e2e0 	.word	0x0800e2e0
 800b454:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b458:	4ba8      	ldr	r3, [pc, #672]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b464:	d106      	bne.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	2b20      	cmp	r3, #32
 800b46a:	d103      	bne.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b46c:	4ba4      	ldr	r3, [pc, #656]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b46e:	637b      	str	r3, [r7, #52]	; 0x34
 800b470:	f001 b8a1 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b474:	4ba1      	ldr	r3, [pc, #644]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b47a:	f003 0302 	and.w	r3, r3, #2
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d107      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	2b30      	cmp	r3, #48	; 0x30
 800b486:	d104      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b48c:	637b      	str	r3, [r7, #52]	; 0x34
 800b48e:	f001 b892 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	637b      	str	r3, [r7, #52]	; 0x34
 800b496:	f001 b88e 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b49e:	f1a2 0108 	sub.w	r1, r2, #8
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	d136      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b4a6:	4b95      	ldr	r3, [pc, #596]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b4b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d104      	bne.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4b8:	f7fe f896 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800b4bc:	6378      	str	r0, [r7, #52]	; 0x34
 800b4be:	f001 b87a 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	2b40      	cmp	r3, #64	; 0x40
 800b4c6:	d104      	bne.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4c8:	f7fd ff72 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b4cc:	6378      	str	r0, [r7, #52]	; 0x34
 800b4ce:	f001 b872 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b4d2:	4b8a      	ldr	r3, [pc, #552]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4de:	d106      	bne.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	2b80      	cmp	r3, #128	; 0x80
 800b4e4:	d103      	bne.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b4e6:	4b86      	ldr	r3, [pc, #536]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b4e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ea:	f001 b864 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b4ee:	4b83      	ldr	r3, [pc, #524]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b4f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d107      	bne.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	2bc0      	cmp	r3, #192	; 0xc0
 800b500:	d104      	bne.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b506:	637b      	str	r3, [r7, #52]	; 0x34
 800b508:	f001 b855 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b50c:	2300      	movs	r3, #0
 800b50e:	637b      	str	r3, [r7, #52]	; 0x34
 800b510:	f001 b851 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b514:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b518:	f1a2 0110 	sub.w	r1, r2, #16
 800b51c:	430b      	orrs	r3, r1
 800b51e:	d139      	bne.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b520:	4b76      	ldr	r3, [pc, #472]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b52a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d104      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b532:	f7fe f859 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800b536:	6378      	str	r0, [r7, #52]	; 0x34
 800b538:	f001 b83d 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b542:	d104      	bne.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b544:	f7fd ff34 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b548:	6378      	str	r0, [r7, #52]	; 0x34
 800b54a:	f001 b834 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b54e:	4b6b      	ldr	r3, [pc, #428]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b55a:	d107      	bne.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b562:	d103      	bne.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b564:	4b66      	ldr	r3, [pc, #408]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b566:	637b      	str	r3, [r7, #52]	; 0x34
 800b568:	f001 b825 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b56c:	4b63      	ldr	r3, [pc, #396]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b56e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b572:	f003 0302 	and.w	r3, r3, #2
 800b576:	2b02      	cmp	r3, #2
 800b578:	d108      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b580:	d104      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b586:	637b      	str	r3, [r7, #52]	; 0x34
 800b588:	f001 b815 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	637b      	str	r3, [r7, #52]	; 0x34
 800b590:	f001 b811 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b594:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b598:	f102 4160 	add.w	r1, r2, #3758096384	; 0xe0000000
 800b59c:	430b      	orrs	r3, r1
 800b59e:	d139      	bne.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b5a0:	4b56      	ldr	r3, [pc, #344]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b5a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d104      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b5b2:	f7fe f819 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800b5b6:	6378      	str	r0, [r7, #52]	; 0x34
 800b5b8:	f000 bffd 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5c2:	d104      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b5c4:	f7fd fef4 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b5c8:	6378      	str	r0, [r7, #52]	; 0x34
 800b5ca:	f000 bff4 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b5ce:	4b4b      	ldr	r3, [pc, #300]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5da:	d107      	bne.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5e2:	d103      	bne.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b5e4:	4b46      	ldr	r3, [pc, #280]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5e8:	f000 bfe5 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b5ec:	4b43      	ldr	r3, [pc, #268]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b5ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d108      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b600:	d104      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b606:	637b      	str	r3, [r7, #52]	; 0x34
 800b608:	f000 bfd5 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b60c:	2300      	movs	r3, #0
 800b60e:	637b      	str	r3, [r7, #52]	; 0x34
 800b610:	f000 bfd1 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b614:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b618:	f1a2 0120 	sub.w	r1, r2, #32
 800b61c:	430b      	orrs	r3, r1
 800b61e:	d158      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b620:	4b36      	ldr	r3, [pc, #216]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d104      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b632:	f7fe f801 	bl	8009638 <HAL_RCC_GetPCLK3Freq>
 800b636:	6378      	str	r0, [r7, #52]	; 0x34
 800b638:	f000 bfbd 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d104      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b642:	f7fd feb5 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b646:	6378      	str	r0, [r7, #52]	; 0x34
 800b648:	f000 bfb5 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b64c:	4b2b      	ldr	r3, [pc, #172]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b658:	d106      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d103      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b660:	4b27      	ldr	r3, [pc, #156]	; (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b662:	637b      	str	r3, [r7, #52]	; 0x34
 800b664:	f000 bfa7 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b668:	4b24      	ldr	r3, [pc, #144]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b66a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b66e:	f003 0302 	and.w	r3, r3, #2
 800b672:	2b02      	cmp	r3, #2
 800b674:	d107      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	2b03      	cmp	r3, #3
 800b67a:	d104      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b67c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b680:	637b      	str	r3, [r7, #52]	; 0x34
 800b682:	f000 bf98 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b686:	4b1d      	ldr	r3, [pc, #116]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0320 	and.w	r3, r3, #32
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d11b      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	2b04      	cmp	r3, #4
 800b696:	d118      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b698:	4b18      	ldr	r3, [pc, #96]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b6a4:	4b15      	ldr	r3, [pc, #84]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	0e1b      	lsrs	r3, r3, #24
 800b6aa:	f003 030f 	and.w	r3, r3, #15
 800b6ae:	e006      	b.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b6b0:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6b6:	041b      	lsls	r3, r3, #16
 800b6b8:	0e1b      	lsrs	r3, r3, #24
 800b6ba:	f003 030f 	and.w	r3, r3, #15
 800b6be:	4a11      	ldr	r2, [pc, #68]	; (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6c6:	f000 bf76 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ce:	f000 bf72 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b6d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6d6:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	d172      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b6de:	4b07      	ldr	r3, [pc, #28]	; (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b6e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b6e4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b6e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f0:	d10a      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b6f2:	f7fd fe5d 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b6f6:	6378      	str	r0, [r7, #52]	; 0x34
 800b6f8:	f000 bf5d 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b6fc:	46020c00 	.word	0x46020c00
 800b700:	00f42400 	.word	0x00f42400
 800b704:	0800e2e0 	.word	0x0800e2e0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b70e:	d108      	bne.n	800b722 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b710:	f107 0318 	add.w	r3, r7, #24
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff f91f 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	637b      	str	r3, [r7, #52]	; 0x34
 800b71e:	f000 bf4a 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	2b00      	cmp	r3, #0
 800b726:	d104      	bne.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b728:	f7fd ff44 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 800b72c:	6378      	str	r0, [r7, #52]	; 0x34
 800b72e:	f000 bf42 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b738:	d122      	bne.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b73a:	4bb0      	ldr	r3, [pc, #704]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b20      	cmp	r3, #32
 800b744:	d118      	bne.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b746:	4bad      	ldr	r3, [pc, #692]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d005      	beq.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b752:	4baa      	ldr	r3, [pc, #680]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	0e1b      	lsrs	r3, r3, #24
 800b758:	f003 030f 	and.w	r3, r3, #15
 800b75c:	e006      	b.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b75e:	4ba7      	ldr	r3, [pc, #668]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b764:	041b      	lsls	r3, r3, #16
 800b766:	0e1b      	lsrs	r3, r3, #24
 800b768:	f003 030f 	and.w	r3, r3, #15
 800b76c:	4aa4      	ldr	r2, [pc, #656]	; (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b772:	637b      	str	r3, [r7, #52]	; 0x34
 800b774:	f000 bf1f 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	637b      	str	r3, [r7, #52]	; 0x34
 800b77c:	f000 bf1b 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b780:	4b9e      	ldr	r3, [pc, #632]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b78c:	d107      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b790:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b794:	d103      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b796:	4b9b      	ldr	r3, [pc, #620]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b798:	637b      	str	r3, [r7, #52]	; 0x34
 800b79a:	f000 bf0c 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b79e:	4b97      	ldr	r3, [pc, #604]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7aa:	d107      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7b2:	d103      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b7b4:	4b93      	ldr	r3, [pc, #588]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b7b8:	f000 befd 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	637b      	str	r3, [r7, #52]	; 0x34
 800b7c0:	f000 bef9 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b7c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7c8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b7cc:	430b      	orrs	r3, r1
 800b7ce:	d158      	bne.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b7d0:	4b8a      	ldr	r3, [pc, #552]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b7d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b7d6:	f003 0307 	and.w	r3, r3, #7
 800b7da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	d84b      	bhi.n	800b87a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b7e2:	a201      	add	r2, pc, #4	; (adr r2, 800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e8:	0800b821 	.word	0x0800b821
 800b7ec:	0800b7fd 	.word	0x0800b7fd
 800b7f0:	0800b80f 	.word	0x0800b80f
 800b7f4:	0800b82b 	.word	0x0800b82b
 800b7f8:	0800b835 	.word	0x0800b835
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b800:	4618      	mov	r0, r3
 800b802:	f7fe ff4f 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b80a:	f000 bed4 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b80e:	f107 030c 	add.w	r3, r7, #12
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff f9fa 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b81c:	f000 becb 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b820:	f7fd fec8 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 800b824:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b826:	f000 bec6 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b82a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b82e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b830:	f000 bec1 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b834:	4b71      	ldr	r3, [pc, #452]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 0320 	and.w	r3, r3, #32
 800b83c:	2b20      	cmp	r3, #32
 800b83e:	d118      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b840:	4b6e      	ldr	r3, [pc, #440]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d005      	beq.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b84c:	4b6b      	ldr	r3, [pc, #428]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	0e1b      	lsrs	r3, r3, #24
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	e006      	b.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b858:	4b68      	ldr	r3, [pc, #416]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b85a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b85e:	041b      	lsls	r3, r3, #16
 800b860:	0e1b      	lsrs	r3, r3, #24
 800b862:	f003 030f 	and.w	r3, r3, #15
 800b866:	4a66      	ldr	r2, [pc, #408]	; (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b86c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b86e:	f000 bea2 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b876:	f000 be9e 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b87a:	2300      	movs	r3, #0
 800b87c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b87e:	f000 be9a 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b882:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b886:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800b88a:	430b      	orrs	r3, r1
 800b88c:	d167      	bne.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b88e:	4b5b      	ldr	r3, [pc, #364]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b894:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b898:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8a0:	d036      	beq.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b8a8:	d855      	bhi.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8b0:	d029      	beq.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b8b8:	d84d      	bhi.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8c0:	d013      	beq.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8c8:	d845      	bhi.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d015      	beq.n	800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8d6:	d13e      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe fee1 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8e6:	f000 be66 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8ea:	f107 030c 	add.w	r3, r7, #12
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff f98c 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8f8:	f000 be5d 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b8fc:	f7fd fe5a 	bl	80095b4 <HAL_RCC_GetHCLKFreq>
 800b900:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800b902:	f000 be58 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b906:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b90a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b90c:	f000 be53 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b910:	4b3a      	ldr	r3, [pc, #232]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 0320 	and.w	r3, r3, #32
 800b918:	2b20      	cmp	r3, #32
 800b91a:	d118      	bne.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b91c:	4b37      	ldr	r3, [pc, #220]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d005      	beq.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b928:	4b34      	ldr	r3, [pc, #208]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	0e1b      	lsrs	r3, r3, #24
 800b92e:	f003 030f 	and.w	r3, r3, #15
 800b932:	e006      	b.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b934:	4b31      	ldr	r3, [pc, #196]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b93a:	041b      	lsls	r3, r3, #16
 800b93c:	0e1b      	lsrs	r3, r3, #24
 800b93e:	f003 030f 	and.w	r3, r3, #15
 800b942:	4a2f      	ldr	r2, [pc, #188]	; (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b948:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b94a:	f000 be34 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b952:	f000 be30 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b956:	2300      	movs	r3, #0
 800b958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b95a:	f000 be2c 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b962:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800b966:	430b      	orrs	r3, r1
 800b968:	d152      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b96a:	4b24      	ldr	r3, [pc, #144]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b96c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b974:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d104      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b97c:	f7fd fe34 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800b980:	6378      	str	r0, [r7, #52]	; 0x34
 800b982:	f000 be18 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b98c:	d104      	bne.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b98e:	f7fd fd0f 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800b992:	6378      	str	r0, [r7, #52]	; 0x34
 800b994:	f000 be0f 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b998:	4b18      	ldr	r3, [pc, #96]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9a4:	d107      	bne.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ac:	d103      	bne.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b9ae:	4b15      	ldr	r3, [pc, #84]	; (800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9b2:	f000 be00 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b9b6:	4b11      	ldr	r3, [pc, #68]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0320 	and.w	r3, r3, #32
 800b9be:	2b20      	cmp	r3, #32
 800b9c0:	d122      	bne.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9c8:	d11e      	bne.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9ca:	4b0c      	ldr	r3, [pc, #48]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d005      	beq.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b9d6:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	0e1b      	lsrs	r3, r3, #24
 800b9dc:	f003 030f 	and.w	r3, r3, #15
 800b9e0:	e006      	b.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b9e2:	4b06      	ldr	r3, [pc, #24]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b9e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b9e8:	041b      	lsls	r3, r3, #16
 800b9ea:	0e1b      	lsrs	r3, r3, #24
 800b9ec:	f003 030f 	and.w	r3, r3, #15
 800b9f0:	4a03      	ldr	r2, [pc, #12]	; (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f8:	f000 bddd 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b9fc:	46020c00 	.word	0x46020c00
 800ba00:	0800e2e0 	.word	0x0800e2e0
 800ba04:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0c:	f000 bdd3 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ba10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba14:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	d14c      	bne.n	800bab6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ba1c:	4ba8      	ldr	r3, [pc, #672]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ba26:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d104      	bne.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ba2e:	f7fd fddb 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800ba32:	6378      	str	r0, [r7, #52]	; 0x34
 800ba34:	f000 bdbf 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba3e:	d104      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ba40:	f7fd fcb6 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800ba44:	6378      	str	r0, [r7, #52]	; 0x34
 800ba46:	f000 bdb6 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ba4a:	4b9d      	ldr	r3, [pc, #628]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba56:	d107      	bne.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba5e:	d103      	bne.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800ba60:	4b98      	ldr	r3, [pc, #608]	; (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ba62:	637b      	str	r3, [r7, #52]	; 0x34
 800ba64:	f000 bda7 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ba68:	4b95      	ldr	r3, [pc, #596]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 0320 	and.w	r3, r3, #32
 800ba70:	2b20      	cmp	r3, #32
 800ba72:	d11c      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba7a:	d118      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ba7c:	4b90      	ldr	r3, [pc, #576]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d005      	beq.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ba88:	4b8d      	ldr	r3, [pc, #564]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	0e1b      	lsrs	r3, r3, #24
 800ba8e:	f003 030f 	and.w	r3, r3, #15
 800ba92:	e006      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800ba94:	4b8a      	ldr	r3, [pc, #552]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ba96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba9a:	041b      	lsls	r3, r3, #16
 800ba9c:	0e1b      	lsrs	r3, r3, #24
 800ba9e:	f003 030f 	and.w	r3, r3, #15
 800baa2:	4a89      	ldr	r2, [pc, #548]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800baa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baa8:	637b      	str	r3, [r7, #52]	; 0x34
 800baaa:	f000 bd84 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800baae:	2300      	movs	r3, #0
 800bab0:	637b      	str	r3, [r7, #52]	; 0x34
 800bab2:	f000 bd80 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800bab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baba:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800babe:	430b      	orrs	r3, r1
 800bac0:	d158      	bne.n	800bb74 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bac2:	4b7f      	ldr	r3, [pc, #508]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bac8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bacc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	2bc0      	cmp	r3, #192	; 0xc0
 800bad2:	d028      	beq.n	800bb26 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad6:	2bc0      	cmp	r3, #192	; 0xc0
 800bad8:	d848      	bhi.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800badc:	2b80      	cmp	r3, #128	; 0x80
 800bade:	d00e      	beq.n	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	2b80      	cmp	r3, #128	; 0x80
 800bae4:	d842      	bhi.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	2b40      	cmp	r3, #64	; 0x40
 800baf0:	d014      	beq.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800baf2:	e03b      	b.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800baf4:	f7fd fda0 	bl	8009638 <HAL_RCC_GetPCLK3Freq>
 800baf8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bafa:	f000 bd5c 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bafe:	4b70      	ldr	r3, [pc, #448]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb0a:	d103      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800bb0c:	4b6d      	ldr	r3, [pc, #436]	; (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bb0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb10:	f000 bd51 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb14:	2300      	movs	r3, #0
 800bb16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb18:	f000 bd4d 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bb1c:	f7fd fc48 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800bb20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bb22:	f000 bd48 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bb26:	4b66      	ldr	r3, [pc, #408]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	d118      	bne.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb32:	4b63      	ldr	r3, [pc, #396]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d005      	beq.n	800bb4a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800bb3e:	4b60      	ldr	r3, [pc, #384]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	0e1b      	lsrs	r3, r3, #24
 800bb44:	f003 030f 	and.w	r3, r3, #15
 800bb48:	e006      	b.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800bb4a:	4b5d      	ldr	r3, [pc, #372]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb50:	041b      	lsls	r3, r3, #16
 800bb52:	0e1b      	lsrs	r3, r3, #24
 800bb54:	f003 030f 	and.w	r3, r3, #15
 800bb58:	4a5b      	ldr	r2, [pc, #364]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bb5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb5e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bb60:	f000 bd29 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bb64:	2300      	movs	r3, #0
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb68:	f000 bd25 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb70:	f000 bd21 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bb74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb78:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800bb7c:	430b      	orrs	r3, r1
 800bb7e:	d14c      	bne.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bb80:	4b4f      	ldr	r3, [pc, #316]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bb82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bb8a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d104      	bne.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bb92:	f7fd fd29 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800bb96:	6378      	str	r0, [r7, #52]	; 0x34
 800bb98:	f000 bd0d 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bba2:	d104      	bne.n	800bbae <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bba4:	f7fd fc04 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800bba8:	6378      	str	r0, [r7, #52]	; 0x34
 800bbaa:	f000 bd04 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bbae:	4b44      	ldr	r3, [pc, #272]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbba:	d107      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbc2:	d103      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800bbc4:	4b3f      	ldr	r3, [pc, #252]	; (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bbc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bbc8:	f000 bcf5 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800bbcc:	4b3c      	ldr	r3, [pc, #240]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 0320 	and.w	r3, r3, #32
 800bbd4:	2b20      	cmp	r3, #32
 800bbd6:	d11c      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bbde:	d118      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbe0:	4b37      	ldr	r3, [pc, #220]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d005      	beq.n	800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800bbec:	4b34      	ldr	r3, [pc, #208]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	0e1b      	lsrs	r3, r3, #24
 800bbf2:	f003 030f 	and.w	r3, r3, #15
 800bbf6:	e006      	b.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800bbf8:	4b31      	ldr	r3, [pc, #196]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bbfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bbfe:	041b      	lsls	r3, r3, #16
 800bc00:	0e1b      	lsrs	r3, r3, #24
 800bc02:	f003 030f 	and.w	r3, r3, #15
 800bc06:	4a30      	ldr	r2, [pc, #192]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bc08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc0e:	f000 bcd2 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	637b      	str	r3, [r7, #52]	; 0x34
 800bc16:	f000 bcce 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800bc1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc1e:	f102 4140 	add.w	r1, r2, #3221225472	; 0xc0000000
 800bc22:	430b      	orrs	r3, r1
 800bc24:	d152      	bne.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800bc26:	4b26      	ldr	r3, [pc, #152]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc2c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bc30:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d104      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bc38:	f7fd fcd6 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800bc3c:	6378      	str	r0, [r7, #52]	; 0x34
 800bc3e:	f000 bcba 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc48:	d104      	bne.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bc4a:	f7fd fbb1 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800bc4e:	6378      	str	r0, [r7, #52]	; 0x34
 800bc50:	f000 bcb1 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800bc54:	4b1a      	ldr	r3, [pc, #104]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc60:	d107      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc68:	d103      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800bc6a:	4b16      	ldr	r3, [pc, #88]	; (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800bc6c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc6e:	f000 bca2 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800bc72:	4b13      	ldr	r3, [pc, #76]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 0320 	and.w	r3, r3, #32
 800bc7a:	2b20      	cmp	r3, #32
 800bc7c:	d11c      	bne.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc84:	d118      	bne.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bc86:	4b0e      	ldr	r3, [pc, #56]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d005      	beq.n	800bc9e <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800bc92:	4b0b      	ldr	r3, [pc, #44]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	0e1b      	lsrs	r3, r3, #24
 800bc98:	f003 030f 	and.w	r3, r3, #15
 800bc9c:	e006      	b.n	800bcac <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800bc9e:	4b08      	ldr	r3, [pc, #32]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800bca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bca4:	041b      	lsls	r3, r3, #16
 800bca6:	0e1b      	lsrs	r3, r3, #24
 800bca8:	f003 030f 	and.w	r3, r3, #15
 800bcac:	4a06      	ldr	r2, [pc, #24]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800bcae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb4:	f000 bc7f 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	637b      	str	r3, [r7, #52]	; 0x34
 800bcbc:	f000 bc7b 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bcc0:	46020c00 	.word	0x46020c00
 800bcc4:	00f42400 	.word	0x00f42400
 800bcc8:	0800e2e0 	.word	0x0800e2e0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800bccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd0:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 800bcd4:	430b      	orrs	r3, r1
 800bcd6:	d14c      	bne.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800bcd8:	4ba6      	ldr	r3, [pc, #664]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bcda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bcde:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800bce2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d104      	bne.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bcea:	f7fd fc7d 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800bcee:	6378      	str	r0, [r7, #52]	; 0x34
 800bcf0:	f000 bc61 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bcfa:	d104      	bne.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bcfc:	f7fd fb58 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800bd00:	6378      	str	r0, [r7, #52]	; 0x34
 800bd02:	f000 bc58 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800bd06:	4b9b      	ldr	r3, [pc, #620]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd12:	d107      	bne.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd1a:	d103      	bne.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800bd1c:	4b96      	ldr	r3, [pc, #600]	; (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bd1e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd20:	f000 bc49 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800bd24:	4b93      	ldr	r3, [pc, #588]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 0320 	and.w	r3, r3, #32
 800bd2c:	2b20      	cmp	r3, #32
 800bd2e:	d11c      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bd36:	d118      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd38:	4b8e      	ldr	r3, [pc, #568]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d005      	beq.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800bd44:	4b8b      	ldr	r3, [pc, #556]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	0e1b      	lsrs	r3, r3, #24
 800bd4a:	f003 030f 	and.w	r3, r3, #15
 800bd4e:	e006      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800bd50:	4b88      	ldr	r3, [pc, #544]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd56:	041b      	lsls	r3, r3, #16
 800bd58:	0e1b      	lsrs	r3, r3, #24
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	4a87      	ldr	r2, [pc, #540]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd64:	637b      	str	r3, [r7, #52]	; 0x34
 800bd66:	f000 bc26 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd6e:	f000 bc22 	b.w	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800bd72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd76:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bd7a:	430b      	orrs	r3, r1
 800bd7c:	d164      	bne.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800bd7e:	4b7d      	ldr	r3, [pc, #500]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd88:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d120      	bne.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bd90:	4b78      	ldr	r3, [pc, #480]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 0320 	and.w	r3, r3, #32
 800bd98:	2b20      	cmp	r3, #32
 800bd9a:	d117      	bne.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd9c:	4b75      	ldr	r3, [pc, #468]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d005      	beq.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800bda8:	4b72      	ldr	r3, [pc, #456]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	0e1b      	lsrs	r3, r3, #24
 800bdae:	f003 030f 	and.w	r3, r3, #15
 800bdb2:	e006      	b.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800bdb4:	4b6f      	ldr	r3, [pc, #444]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bdba:	041b      	lsls	r3, r3, #16
 800bdbc:	0e1b      	lsrs	r3, r3, #24
 800bdbe:	f003 030f 	and.w	r3, r3, #15
 800bdc2:	4a6e      	ldr	r2, [pc, #440]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800bdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdca:	e3f4      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	637b      	str	r3, [r7, #52]	; 0x34
 800bdd0:	e3f1      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800bdd2:	4b68      	ldr	r3, [pc, #416]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bdd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bde0:	d112      	bne.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bde8:	d10e      	bne.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bdea:	4b62      	ldr	r3, [pc, #392]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bdec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bdf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdf8:	d102      	bne.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800bdfa:	23fa      	movs	r3, #250	; 0xfa
 800bdfc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bdfe:	e3da      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800be00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800be04:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800be06:	e3d6      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800be08:	4b5a      	ldr	r3, [pc, #360]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be14:	d106      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be1c:	d102      	bne.n	800be24 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800be1e:	4b56      	ldr	r3, [pc, #344]	; (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800be20:	637b      	str	r3, [r7, #52]	; 0x34
 800be22:	e3c8      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800be24:	4b53      	ldr	r3, [pc, #332]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be2a:	f003 0302 	and.w	r3, r3, #2
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d107      	bne.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be38:	d103      	bne.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800be3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be3e:	637b      	str	r3, [r7, #52]	; 0x34
 800be40:	e3b9      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	637b      	str	r3, [r7, #52]	; 0x34
 800be46:	e3b6      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800be48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be4c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800be50:	430b      	orrs	r3, r1
 800be52:	d164      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800be54:	4b47      	ldr	r3, [pc, #284]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800be5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be5e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	2b00      	cmp	r3, #0
 800be64:	d120      	bne.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be66:	4b43      	ldr	r3, [pc, #268]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 0320 	and.w	r3, r3, #32
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d117      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be72:	4b40      	ldr	r3, [pc, #256]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d005      	beq.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800be7e:	4b3d      	ldr	r3, [pc, #244]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	0e1b      	lsrs	r3, r3, #24
 800be84:	f003 030f 	and.w	r3, r3, #15
 800be88:	e006      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800be8a:	4b3a      	ldr	r3, [pc, #232]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800be8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	0e1b      	lsrs	r3, r3, #24
 800be94:	f003 030f 	and.w	r3, r3, #15
 800be98:	4a38      	ldr	r2, [pc, #224]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800be9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9e:	637b      	str	r3, [r7, #52]	; 0x34
 800bea0:	e389      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	637b      	str	r3, [r7, #52]	; 0x34
 800bea6:	e386      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800bea8:	4b32      	ldr	r3, [pc, #200]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800beaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800beae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beb6:	d112      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bebe:	d10e      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bec0:	4b2c      	ldr	r3, [pc, #176]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bece:	d102      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800bed0:	23fa      	movs	r3, #250	; 0xfa
 800bed2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bed4:	e36f      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bed6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800beda:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bedc:	e36b      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800bede:	4b25      	ldr	r3, [pc, #148]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beea:	d106      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bef2:	d102      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800bef4:	4b20      	ldr	r3, [pc, #128]	; (800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800bef6:	637b      	str	r3, [r7, #52]	; 0x34
 800bef8:	e35d      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800befa:	4b1e      	ldr	r3, [pc, #120]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800befc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf00:	f003 0302 	and.w	r3, r3, #2
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d107      	bne.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf0e:	d103      	bne.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800bf10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf14:	637b      	str	r3, [r7, #52]	; 0x34
 800bf16:	e34e      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf1c:	e34b      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800bf1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf22:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bf26:	430b      	orrs	r3, r1
 800bf28:	d14e      	bne.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800bf2a:	4b12      	ldr	r3, [pc, #72]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800bf34:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d103      	bne.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bf3c:	f7fd fb54 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800bf40:	6378      	str	r0, [r7, #52]	; 0x34
 800bf42:	e338      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800bf44:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf52:	d119      	bne.n	800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf5a:	d115      	bne.n	800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf5c:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800bf5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf6a:	d109      	bne.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800bf6c:	23fa      	movs	r3, #250	; 0xfa
 800bf6e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf70:	e321      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bf72:	bf00      	nop
 800bf74:	46020c00 	.word	0x46020c00
 800bf78:	00f42400 	.word	0x00f42400
 800bf7c:	0800e2e0 	.word	0x0800e2e0
      }
      else
      {
        frequency = LSI_VALUE;
 800bf80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bf84:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf86:	e316      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bf88:	4ba8      	ldr	r3, [pc, #672]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf94:	d106      	bne.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bf9c:	d102      	bne.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800bf9e:	4ba4      	ldr	r3, [pc, #656]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bfa0:	637b      	str	r3, [r7, #52]	; 0x34
 800bfa2:	e308      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bfa4:	4ba1      	ldr	r3, [pc, #644]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d107      	bne.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bfb8:	d103      	bne.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800bfba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfbe:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc0:	e2f9      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc6:	e2f6      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bfc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfcc:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800bfd0:	430b      	orrs	r3, r1
 800bfd2:	d12d      	bne.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bfd4:	4b95      	ldr	r3, [pc, #596]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfda:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bfde:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bfe0:	4b92      	ldr	r3, [pc, #584]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfec:	d105      	bne.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d102      	bne.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800bff4:	4b8e      	ldr	r3, [pc, #568]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bff6:	637b      	str	r3, [r7, #52]	; 0x34
 800bff8:	e2dd      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c000:	d107      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe fb4c 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00e:	637b      	str	r3, [r7, #52]	; 0x34
 800c010:	e2d1      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c018:	d107      	bne.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c01a:	f107 0318 	add.w	r3, r7, #24
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fc9a 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	637b      	str	r3, [r7, #52]	; 0x34
 800c028:	e2c5      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	637b      	str	r3, [r7, #52]	; 0x34
 800c02e:	e2c2      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c030:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c034:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800c038:	430b      	orrs	r3, r1
 800c03a:	d156      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c03c:	4b7b      	ldr	r3, [pc, #492]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c03e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c042:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c046:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c04e:	d028      	beq.n	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c056:	d845      	bhi.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c05e:	d013      	beq.n	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c066:	d83d      	bhi.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d004      	beq.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c074:	d004      	beq.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800c076:	e035      	b.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c078:	f7fd faca 	bl	8009610 <HAL_RCC_GetPCLK2Freq>
 800c07c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c07e:	e29a      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c080:	f7fd f996 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800c084:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c086:	e296      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c088:	4b68      	ldr	r3, [pc, #416]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c094:	d102      	bne.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800c096:	4b66      	ldr	r3, [pc, #408]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c098:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c09a:	e28c      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c09c:	2300      	movs	r3, #0
 800c09e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0a0:	e289      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c0a2:	4b62      	ldr	r3, [pc, #392]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0320 	and.w	r3, r3, #32
 800c0aa:	2b20      	cmp	r3, #32
 800c0ac:	d117      	bne.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0ae:	4b5f      	ldr	r3, [pc, #380]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d005      	beq.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800c0ba:	4b5c      	ldr	r3, [pc, #368]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	0e1b      	lsrs	r3, r3, #24
 800c0c0:	f003 030f 	and.w	r3, r3, #15
 800c0c4:	e006      	b.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800c0c6:	4b59      	ldr	r3, [pc, #356]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c0cc:	041b      	lsls	r3, r3, #16
 800c0ce:	0e1b      	lsrs	r3, r3, #24
 800c0d0:	f003 030f 	and.w	r3, r3, #15
 800c0d4:	4a57      	ldr	r2, [pc, #348]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0da:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c0dc:	e26b      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0e2:	e268      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0e8:	e265      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c0ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0ee:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800c0f2:	430b      	orrs	r3, r1
 800c0f4:	d156      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c0f6:	4b4d      	ldr	r3, [pc, #308]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c0f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c100:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c108:	d028      	beq.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c110:	d845      	bhi.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c118:	d013      	beq.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c120:	d83d      	bhi.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	2b00      	cmp	r3, #0
 800c126:	d004      	beq.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c12e:	d004      	beq.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800c130:	e035      	b.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c132:	f7fd fa59 	bl	80095e8 <HAL_RCC_GetPCLK1Freq>
 800c136:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c138:	e23d      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c13a:	f7fd f939 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800c13e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c140:	e239      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c142:	4b3a      	ldr	r3, [pc, #232]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c14a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c14e:	d102      	bne.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800c150:	4b37      	ldr	r3, [pc, #220]	; (800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800c152:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c154:	e22f      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c156:	2300      	movs	r3, #0
 800c158:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c15a:	e22c      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c15c:	4b33      	ldr	r3, [pc, #204]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0320 	and.w	r3, r3, #32
 800c164:	2b20      	cmp	r3, #32
 800c166:	d117      	bne.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c168:	4b30      	ldr	r3, [pc, #192]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d005      	beq.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800c174:	4b2d      	ldr	r3, [pc, #180]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	0e1b      	lsrs	r3, r3, #24
 800c17a:	f003 030f 	and.w	r3, r3, #15
 800c17e:	e006      	b.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c180:	4b2a      	ldr	r3, [pc, #168]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c186:	041b      	lsls	r3, r3, #16
 800c188:	0e1b      	lsrs	r3, r3, #24
 800c18a:	f003 030f 	and.w	r3, r3, #15
 800c18e:	4a29      	ldr	r2, [pc, #164]	; (800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800c190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c194:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c196:	e20e      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c198:	2300      	movs	r3, #0
 800c19a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c19c:	e20b      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1a2:	e208      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a8:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800c1ac:	430b      	orrs	r3, r1
 800c1ae:	d17c      	bne.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c1b0:	4b1e      	ldr	r3, [pc, #120]	; (800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800c1b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1b6:	f003 0318 	and.w	r3, r3, #24
 800c1ba:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	2b18      	cmp	r3, #24
 800c1c0:	d870      	bhi.n	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c239 	.word	0x0800c239
 800c1cc:	0800c2a5 	.word	0x0800c2a5
 800c1d0:	0800c2a5 	.word	0x0800c2a5
 800c1d4:	0800c2a5 	.word	0x0800c2a5
 800c1d8:	0800c2a5 	.word	0x0800c2a5
 800c1dc:	0800c2a5 	.word	0x0800c2a5
 800c1e0:	0800c2a5 	.word	0x0800c2a5
 800c1e4:	0800c2a5 	.word	0x0800c2a5
 800c1e8:	0800c241 	.word	0x0800c241
 800c1ec:	0800c2a5 	.word	0x0800c2a5
 800c1f0:	0800c2a5 	.word	0x0800c2a5
 800c1f4:	0800c2a5 	.word	0x0800c2a5
 800c1f8:	0800c2a5 	.word	0x0800c2a5
 800c1fc:	0800c2a5 	.word	0x0800c2a5
 800c200:	0800c2a5 	.word	0x0800c2a5
 800c204:	0800c2a5 	.word	0x0800c2a5
 800c208:	0800c249 	.word	0x0800c249
 800c20c:	0800c2a5 	.word	0x0800c2a5
 800c210:	0800c2a5 	.word	0x0800c2a5
 800c214:	0800c2a5 	.word	0x0800c2a5
 800c218:	0800c2a5 	.word	0x0800c2a5
 800c21c:	0800c2a5 	.word	0x0800c2a5
 800c220:	0800c2a5 	.word	0x0800c2a5
 800c224:	0800c2a5 	.word	0x0800c2a5
 800c228:	0800c263 	.word	0x0800c263
 800c22c:	46020c00 	.word	0x46020c00
 800c230:	00f42400 	.word	0x00f42400
 800c234:	0800e2e0 	.word	0x0800e2e0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c238:	f7fd f9fe 	bl	8009638 <HAL_RCC_GetPCLK3Freq>
 800c23c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c23e:	e1ba      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c240:	f7fd f8b6 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800c244:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c246:	e1b6      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c248:	4b9f      	ldr	r3, [pc, #636]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c254:	d102      	bne.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800c256:	4b9d      	ldr	r3, [pc, #628]	; (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c258:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c25a:	e1ac      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c25c:	2300      	movs	r3, #0
 800c25e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c260:	e1a9      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c262:	4b99      	ldr	r3, [pc, #612]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f003 0320 	and.w	r3, r3, #32
 800c26a:	2b20      	cmp	r3, #32
 800c26c:	d117      	bne.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c26e:	4b96      	ldr	r3, [pc, #600]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d005      	beq.n	800c286 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800c27a:	4b93      	ldr	r3, [pc, #588]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	0e1b      	lsrs	r3, r3, #24
 800c280:	f003 030f 	and.w	r3, r3, #15
 800c284:	e006      	b.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800c286:	4b90      	ldr	r3, [pc, #576]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c28c:	041b      	lsls	r3, r3, #16
 800c28e:	0e1b      	lsrs	r3, r3, #24
 800c290:	f003 030f 	and.w	r3, r3, #15
 800c294:	4a8e      	ldr	r2, [pc, #568]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c29a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c29c:	e18b      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2a2:	e188      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2a8:	e185      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c2aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ae:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800c2b2:	430b      	orrs	r3, r1
 800c2b4:	d155      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c2b6:	4b84      	ldr	r3, [pc, #528]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c2b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c2c0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2c8:	d013      	beq.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2d0:	d844      	bhi.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2d8:	d013      	beq.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800c2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2e0:	d83c      	bhi.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d014      	beq.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2ee:	d014      	beq.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800c2f0:	e034      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f2:	f107 0318 	add.w	r3, r7, #24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fe fb2e 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c300:	e159      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe f9cc 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c310:	e151      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c312:	f7fd f84d 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800c316:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c318:	e14d      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c31a:	4b6b      	ldr	r3, [pc, #428]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 0320 	and.w	r3, r3, #32
 800c322:	2b20      	cmp	r3, #32
 800c324:	d117      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c326:	4b68      	ldr	r3, [pc, #416]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d005      	beq.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800c332:	4b65      	ldr	r3, [pc, #404]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	0e1b      	lsrs	r3, r3, #24
 800c338:	f003 030f 	and.w	r3, r3, #15
 800c33c:	e006      	b.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800c33e:	4b62      	ldr	r3, [pc, #392]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c344:	041b      	lsls	r3, r3, #16
 800c346:	0e1b      	lsrs	r3, r3, #24
 800c348:	f003 030f 	and.w	r3, r3, #15
 800c34c:	4a60      	ldr	r2, [pc, #384]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800c34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c352:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c354:	e12f      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c35a:	e12c      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c35c:	2300      	movs	r3, #0
 800c35e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c360:	e129      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800c362:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c366:	1e59      	subs	r1, r3, #1
 800c368:	ea52 0301 	orrs.w	r3, r2, r1
 800c36c:	d13c      	bne.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800c36e:	4b56      	ldr	r3, [pc, #344]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c374:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c378:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c380:	d027      	beq.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c388:	d82b      	bhi.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c390:	d017      	beq.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c398:	d823      	bhi.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d004      	beq.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3a6:	d004      	beq.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800c3a8:	e01b      	b.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c3aa:	f7fd f801 	bl	80093b0 <HAL_RCC_GetSysClockFreq>
 800c3ae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c3b0:	e101      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe f974 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3c0:	e0f9      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3c2:	f107 0318 	add.w	r3, r7, #24
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe fac6 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3d0:	e0f1      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3d2:	f107 030c 	add.w	r3, r7, #12
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fe fc18 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3e0:	e0e9      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3e6:	e0e6      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ec:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800c3f0:	430b      	orrs	r3, r1
 800c3f2:	d131      	bne.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c3f4:	4b34      	ldr	r3, [pc, #208]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c3f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c3fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3fe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c400:	4b31      	ldr	r3, [pc, #196]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c406:	f003 0302 	and.w	r3, r3, #2
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d106      	bne.n	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800c40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c410:	2b00      	cmp	r3, #0
 800c412:	d103      	bne.n	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800c414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c418:	637b      	str	r3, [r7, #52]	; 0x34
 800c41a:	e0cc      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c41c:	4b2a      	ldr	r3, [pc, #168]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c41e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c42a:	d112      	bne.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c432:	d10e      	bne.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c434:	4b24      	ldr	r3, [pc, #144]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c43a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c43e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c442:	d102      	bne.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800c444:	23fa      	movs	r3, #250	; 0xfa
 800c446:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c448:	e0b5      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800c44a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c44e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c450:	e0b1      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	637b      	str	r3, [r7, #52]	; 0x34
 800c456:	e0ae      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c45c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c460:	430b      	orrs	r3, r1
 800c462:	d13b      	bne.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c464:	4b18      	ldr	r3, [pc, #96]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c46a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c46e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c470:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c47c:	d105      	bne.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	2b00      	cmp	r3, #0
 800c482:	d102      	bne.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800c484:	4b13      	ldr	r3, [pc, #76]	; (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800c486:	637b      	str	r3, [r7, #52]	; 0x34
 800c488:	e095      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c48a:	4b0f      	ldr	r3, [pc, #60]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c496:	d106      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800c498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c49e:	d102      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c4a0:	4b0d      	ldr	r3, [pc, #52]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800c4a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c4a4:	e087      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c4a6:	4b08      	ldr	r3, [pc, #32]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4b2:	d106      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4ba:	d102      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800c4bc:	4b03      	ldr	r3, [pc, #12]	; (800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800c4be:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c0:	e079      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c6:	e076      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c4c8:	46020c00 	.word	0x46020c00
 800c4cc:	00f42400 	.word	0x00f42400
 800c4d0:	0800e2e0 	.word	0x0800e2e0
 800c4d4:	02dc6c00 	.word	0x02dc6c00
 800c4d8:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c4dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e0:	1e99      	subs	r1, r3, #2
 800c4e2:	ea52 0301 	orrs.w	r3, r2, r1
 800c4e6:	d120      	bne.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c4e8:	4b35      	ldr	r3, [pc, #212]	; (800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c4ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c4ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d004      	beq.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c500:	d008      	beq.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c502:	e00f      	b.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c504:	f107 030c 	add.w	r3, r7, #12
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fe fb7f 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c512:	e050      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c514:	f107 0318 	add.w	r3, r7, #24
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fe fa1d 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c522:	e048      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c528:	e045      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c52a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c52e:	f1a3 0108 	sub.w	r1, r3, #8
 800c532:	ea52 0301 	orrs.w	r3, r2, r1
 800c536:	d13c      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c538:	4b21      	ldr	r3, [pc, #132]	; (800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c53a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c53e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c542:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c544:	4b1e      	ldr	r3, [pc, #120]	; (800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c54c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c550:	d105      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	2b00      	cmp	r3, #0
 800c556:	d102      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c558:	4b1a      	ldr	r3, [pc, #104]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c55a:	637b      	str	r3, [r7, #52]	; 0x34
 800c55c:	e02b      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c55e:	4b18      	ldr	r3, [pc, #96]	; (800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c56a:	d106      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c572:	d102      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c574:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c576:	637b      	str	r3, [r7, #52]	; 0x34
 800c578:	e01d      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c580:	d107      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c586:	4618      	mov	r0, r3
 800c588:	f7fe f88c 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	637b      	str	r3, [r7, #52]	; 0x34
 800c590:	e011      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800c598:	d108      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c59a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fe f880 	bl	800a6a4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a6:	085b      	lsrs	r3, r3, #1
 800c5a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5aa:	e004      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b0:	e001      	b.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800c5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3738      	adds	r7, #56	; 0x38
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	46020c00 	.word	0x46020c00
 800c5c4:	00f42400 	.word	0x00f42400
 800c5c8:	007a1200 	.word	0x007a1200

0800c5cc <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c5d0:	4b06      	ldr	r3, [pc, #24]	; (800c5ec <HAL_RCCEx_EnableLSECSS+0x20>)
 800c5d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5d6:	4a05      	ldr	r2, [pc, #20]	; (800c5ec <HAL_RCCEx_EnableLSECSS+0x20>)
 800c5d8:	f043 0320 	orr.w	r3, r3, #32
 800c5dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800c5e0:	bf00      	nop
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	46020c00 	.word	0x46020c00

0800c5f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c5f8:	4b47      	ldr	r3, [pc, #284]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a46      	ldr	r2, [pc, #280]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c5fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c602:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c604:	f7f7 fa80 	bl	8003b08 <HAL_GetTick>
 800c608:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c60a:	e008      	b.n	800c61e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c60c:	f7f7 fa7c 	bl	8003b08 <HAL_GetTick>
 800c610:	4602      	mov	r2, r0
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	2b02      	cmp	r3, #2
 800c618:	d901      	bls.n	800c61e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c61a:	2303      	movs	r3, #3
 800c61c:	e077      	b.n	800c70e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c61e:	4b3e      	ldr	r3, [pc, #248]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1f0      	bne.n	800c60c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c62a:	4b3b      	ldr	r3, [pc, #236]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c632:	f023 0303 	bic.w	r3, r3, #3
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	6811      	ldr	r1, [r2, #0]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	6852      	ldr	r2, [r2, #4]
 800c63e:	3a01      	subs	r2, #1
 800c640:	0212      	lsls	r2, r2, #8
 800c642:	430a      	orrs	r2, r1
 800c644:	4934      	ldr	r1, [pc, #208]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c646:	4313      	orrs	r3, r2
 800c648:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c64a:	4b33      	ldr	r3, [pc, #204]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c64c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c64e:	4b33      	ldr	r3, [pc, #204]	; (800c71c <RCCEx_PLL2_Config+0x12c>)
 800c650:	4013      	ands	r3, r2
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	6892      	ldr	r2, [r2, #8]
 800c656:	3a01      	subs	r2, #1
 800c658:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	68d2      	ldr	r2, [r2, #12]
 800c660:	3a01      	subs	r2, #1
 800c662:	0252      	lsls	r2, r2, #9
 800c664:	b292      	uxth	r2, r2
 800c666:	4311      	orrs	r1, r2
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	6912      	ldr	r2, [r2, #16]
 800c66c:	3a01      	subs	r2, #1
 800c66e:	0412      	lsls	r2, r2, #16
 800c670:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c674:	4311      	orrs	r1, r2
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	6952      	ldr	r2, [r2, #20]
 800c67a:	3a01      	subs	r2, #1
 800c67c:	0612      	lsls	r2, r2, #24
 800c67e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c682:	430a      	orrs	r2, r1
 800c684:	4924      	ldr	r1, [pc, #144]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c686:	4313      	orrs	r3, r2
 800c688:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c68a:	4b23      	ldr	r3, [pc, #140]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68e:	f023 020c 	bic.w	r2, r3, #12
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	4920      	ldr	r1, [pc, #128]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c698:	4313      	orrs	r3, r2
 800c69a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c69c:	4b1e      	ldr	r3, [pc, #120]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	491c      	ldr	r1, [pc, #112]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c6aa:	4b1b      	ldr	r3, [pc, #108]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	4a1a      	ldr	r2, [pc, #104]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6b0:	f023 0310 	bic.w	r3, r3, #16
 800c6b4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6b6:	4b18      	ldr	r3, [pc, #96]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	69d2      	ldr	r2, [r2, #28]
 800c6c6:	00d2      	lsls	r2, r2, #3
 800c6c8:	4913      	ldr	r1, [pc, #76]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c6ce:	4b12      	ldr	r3, [pc, #72]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d2:	4a11      	ldr	r2, [pc, #68]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6d4:	f043 0310 	orr.w	r3, r3, #16
 800c6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c6da:	4b0f      	ldr	r3, [pc, #60]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a0e      	ldr	r2, [pc, #56]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c6e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6e4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c6e6:	f7f7 fa0f 	bl	8003b08 <HAL_GetTick>
 800c6ea:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6ec:	e008      	b.n	800c700 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c6ee:	f7f7 fa0b 	bl	8003b08 <HAL_GetTick>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d901      	bls.n	800c700 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	e006      	b.n	800c70e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c700:	4b05      	ldr	r3, [pc, #20]	; (800c718 <RCCEx_PLL2_Config+0x128>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d0f0      	beq.n	800c6ee <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c70c:	2300      	movs	r3, #0

}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	46020c00 	.word	0x46020c00
 800c71c:	80800000 	.word	0x80800000

0800c720 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c728:	4b47      	ldr	r3, [pc, #284]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a46      	ldr	r2, [pc, #280]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c72e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c732:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c734:	f7f7 f9e8 	bl	8003b08 <HAL_GetTick>
 800c738:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c73a:	e008      	b.n	800c74e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c73c:	f7f7 f9e4 	bl	8003b08 <HAL_GetTick>
 800c740:	4602      	mov	r2, r0
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	2b02      	cmp	r3, #2
 800c748:	d901      	bls.n	800c74e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c74a:	2303      	movs	r3, #3
 800c74c:	e077      	b.n	800c83e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c74e:	4b3e      	ldr	r3, [pc, #248]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1f0      	bne.n	800c73c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c75a:	4b3b      	ldr	r3, [pc, #236]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c75e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c762:	f023 0303 	bic.w	r3, r3, #3
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	6811      	ldr	r1, [r2, #0]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	6852      	ldr	r2, [r2, #4]
 800c76e:	3a01      	subs	r2, #1
 800c770:	0212      	lsls	r2, r2, #8
 800c772:	430a      	orrs	r2, r1
 800c774:	4934      	ldr	r1, [pc, #208]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c776:	4313      	orrs	r3, r2
 800c778:	630b      	str	r3, [r1, #48]	; 0x30
 800c77a:	4b33      	ldr	r3, [pc, #204]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c77e:	4b33      	ldr	r3, [pc, #204]	; (800c84c <RCCEx_PLL3_Config+0x12c>)
 800c780:	4013      	ands	r3, r2
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	6892      	ldr	r2, [r2, #8]
 800c786:	3a01      	subs	r2, #1
 800c788:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	68d2      	ldr	r2, [r2, #12]
 800c790:	3a01      	subs	r2, #1
 800c792:	0252      	lsls	r2, r2, #9
 800c794:	b292      	uxth	r2, r2
 800c796:	4311      	orrs	r1, r2
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	6912      	ldr	r2, [r2, #16]
 800c79c:	3a01      	subs	r2, #1
 800c79e:	0412      	lsls	r2, r2, #16
 800c7a0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c7a4:	4311      	orrs	r1, r2
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	6952      	ldr	r2, [r2, #20]
 800c7aa:	3a01      	subs	r2, #1
 800c7ac:	0612      	lsls	r2, r2, #24
 800c7ae:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c7b2:	430a      	orrs	r2, r1
 800c7b4:	4924      	ldr	r1, [pc, #144]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c7ba:	4b23      	ldr	r3, [pc, #140]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7be:	f023 020c 	bic.w	r2, r3, #12
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	4920      	ldr	r1, [pc, #128]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c7cc:	4b1e      	ldr	r3, [pc, #120]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6a1b      	ldr	r3, [r3, #32]
 800c7d4:	491c      	ldr	r1, [pc, #112]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c7da:	4b1b      	ldr	r3, [pc, #108]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7de:	4a1a      	ldr	r2, [pc, #104]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7e0:	f023 0310 	bic.w	r3, r3, #16
 800c7e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c7e6:	4b18      	ldr	r3, [pc, #96]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	69d2      	ldr	r2, [r2, #28]
 800c7f6:	00d2      	lsls	r2, r2, #3
 800c7f8:	4913      	ldr	r1, [pc, #76]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c7fe:	4b12      	ldr	r3, [pc, #72]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c802:	4a11      	ldr	r2, [pc, #68]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c804:	f043 0310 	orr.w	r3, r3, #16
 800c808:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c80a:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a0e      	ldr	r2, [pc, #56]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c814:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c816:	f7f7 f977 	bl	8003b08 <HAL_GetTick>
 800c81a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c81c:	e008      	b.n	800c830 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c81e:	f7f7 f973 	bl	8003b08 <HAL_GetTick>
 800c822:	4602      	mov	r2, r0
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d901      	bls.n	800c830 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e006      	b.n	800c83e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <RCCEx_PLL3_Config+0x128>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0f0      	beq.n	800c81e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	46020c00 	.word	0x46020c00
 800c84c:	80800000 	.word	0x80800000

0800c850 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d071      	beq.n	800c946 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d106      	bne.n	800c87c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7f6 feca 	bl	8003610 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2202      	movs	r2, #2
 800c880:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c884:	4b32      	ldr	r3, [pc, #200]	; (800c950 <HAL_RTC_Init+0x100>)
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	f003 0310 	and.w	r3, r3, #16
 800c88c:	2b10      	cmp	r3, #16
 800c88e:	d051      	beq.n	800c934 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c890:	4b2f      	ldr	r3, [pc, #188]	; (800c950 <HAL_RTC_Init+0x100>)
 800c892:	22ca      	movs	r2, #202	; 0xca
 800c894:	625a      	str	r2, [r3, #36]	; 0x24
 800c896:	4b2e      	ldr	r3, [pc, #184]	; (800c950 <HAL_RTC_Init+0x100>)
 800c898:	2253      	movs	r2, #83	; 0x53
 800c89a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 f9ad 	bl	800cbfc <RTC_EnterInitMode>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c8a6:	7bfb      	ldrb	r3, [r7, #15]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d13f      	bne.n	800c92c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c8ac:	4b28      	ldr	r3, [pc, #160]	; (800c950 <HAL_RTC_Init+0x100>)
 800c8ae:	699b      	ldr	r3, [r3, #24]
 800c8b0:	4a27      	ldr	r2, [pc, #156]	; (800c950 <HAL_RTC_Init+0x100>)
 800c8b2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800c8b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8ba:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c8bc:	4b24      	ldr	r3, [pc, #144]	; (800c950 <HAL_RTC_Init+0x100>)
 800c8be:	699a      	ldr	r2, [r3, #24]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6859      	ldr	r1, [r3, #4]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	4319      	orrs	r1, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	699b      	ldr	r3, [r3, #24]
 800c8ce:	430b      	orrs	r3, r1
 800c8d0:	491f      	ldr	r1, [pc, #124]	; (800c950 <HAL_RTC_Init+0x100>)
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68da      	ldr	r2, [r3, #12]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	041b      	lsls	r3, r3, #16
 800c8e0:	491b      	ldr	r1, [pc, #108]	; (800c950 <HAL_RTC_Init+0x100>)
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c8e6:	4b1a      	ldr	r3, [pc, #104]	; (800c950 <HAL_RTC_Init+0x100>)
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f6:	430b      	orrs	r3, r1
 800c8f8:	4915      	ldr	r1, [pc, #84]	; (800c950 <HAL_RTC_Init+0x100>)
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f9b8 	bl	800cc74 <RTC_ExitInitMode>
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800c908:	7bfb      	ldrb	r3, [r7, #15]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10e      	bne.n	800c92c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800c90e:	4b10      	ldr	r3, [pc, #64]	; (800c950 <HAL_RTC_Init+0x100>)
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6a19      	ldr	r1, [r3, #32]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	69db      	ldr	r3, [r3, #28]
 800c91e:	4319      	orrs	r1, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	430b      	orrs	r3, r1
 800c926:	490a      	ldr	r1, [pc, #40]	; (800c950 <HAL_RTC_Init+0x100>)
 800c928:	4313      	orrs	r3, r2
 800c92a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c92c:	4b08      	ldr	r3, [pc, #32]	; (800c950 <HAL_RTC_Init+0x100>)
 800c92e:	22ff      	movs	r2, #255	; 0xff
 800c930:	625a      	str	r2, [r3, #36]	; 0x24
 800c932:	e001      	b.n	800c938 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d103      	bne.n	800c946 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	46007800 	.word	0x46007800

0800c954 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c954:	b590      	push	{r4, r7, lr}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c966:	2b01      	cmp	r3, #1
 800c968:	d101      	bne.n	800c96e <HAL_RTC_SetTime+0x1a>
 800c96a:	2302      	movs	r3, #2
 800c96c:	e088      	b.n	800ca80 <HAL_RTC_SetTime+0x12c>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2201      	movs	r2, #1
 800c972:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2202      	movs	r2, #2
 800c97a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c97e:	4b42      	ldr	r3, [pc, #264]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800c980:	22ca      	movs	r2, #202	; 0xca
 800c982:	625a      	str	r2, [r3, #36]	; 0x24
 800c984:	4b40      	ldr	r3, [pc, #256]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800c986:	2253      	movs	r2, #83	; 0x53
 800c988:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f000 f936 	bl	800cbfc <RTC_EnterInitMode>
 800c990:	4603      	mov	r3, r0
 800c992:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c994:	7cfb      	ldrb	r3, [r7, #19]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d163      	bne.n	800ca62 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c99a:	4b3b      	ldr	r3, [pc, #236]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9a6:	d057      	beq.n	800ca58 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d125      	bne.n	800c9fa <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9ae:	4b36      	ldr	r3, [pc, #216]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d102      	bne.n	800c9c0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 f993 	bl	800ccf0 <RTC_ByteToBcd2>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	785b      	ldrb	r3, [r3, #1]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 f98c 	bl	800ccf0 <RTC_ByteToBcd2>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9dc:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	789b      	ldrb	r3, [r3, #2]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 f984 	bl	800ccf0 <RTC_ByteToBcd2>
 800c9e8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9ea:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	78db      	ldrb	r3, [r3, #3]
 800c9f2:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	e017      	b.n	800ca2a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9fa:	4b23      	ldr	r3, [pc, #140]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	785b      	ldrb	r3, [r3, #1]
 800ca16:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca18:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca1e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	78db      	ldrb	r3, [r3, #3]
 800ca24:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca26:	4313      	orrs	r3, r2
 800ca28:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800ca2a:	4a17      	ldr	r2, [pc, #92]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ca32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca36:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ca38:	4b13      	ldr	r3, [pc, #76]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	4a12      	ldr	r2, [pc, #72]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800ca3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca42:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800ca44:	4b10      	ldr	r3, [pc, #64]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800ca46:	699a      	ldr	r2, [r3, #24]
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	68d9      	ldr	r1, [r3, #12]
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	430b      	orrs	r3, r1
 800ca52:	490d      	ldr	r1, [pc, #52]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800ca54:	4313      	orrs	r3, r2
 800ca56:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f000 f90b 	bl	800cc74 <RTC_ExitInitMode>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca62:	4b09      	ldr	r3, [pc, #36]	; (800ca88 <HAL_RTC_SetTime+0x134>)
 800ca64:	22ff      	movs	r2, #255	; 0xff
 800ca66:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ca68:	7cfb      	ldrb	r3, [r7, #19]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d103      	bne.n	800ca76 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2201      	movs	r2, #1
 800ca72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800ca7e:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	371c      	adds	r7, #28
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd90      	pop	{r4, r7, pc}
 800ca88:	46007800 	.word	0x46007800

0800ca8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca8c:	b590      	push	{r4, r7, lr}
 800ca8e:	b087      	sub	sp, #28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d101      	bne.n	800caa6 <HAL_RTC_SetDate+0x1a>
 800caa2:	2302      	movs	r3, #2
 800caa4:	e071      	b.n	800cb8a <HAL_RTC_SetDate+0xfe>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2202      	movs	r2, #2
 800cab2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10e      	bne.n	800cada <HAL_RTC_SetDate+0x4e>
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	f003 0310 	and.w	r3, r3, #16
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d008      	beq.n	800cada <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	785b      	ldrb	r3, [r3, #1]
 800cacc:	f023 0310 	bic.w	r3, r3, #16
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	330a      	adds	r3, #10
 800cad4:	b2da      	uxtb	r2, r3
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d11c      	bne.n	800cb1a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	78db      	ldrb	r3, [r3, #3]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 f903 	bl	800ccf0 <RTC_ByteToBcd2>
 800caea:	4603      	mov	r3, r0
 800caec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	785b      	ldrb	r3, [r3, #1]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f000 f8fc 	bl	800ccf0 <RTC_ByteToBcd2>
 800caf8:	4603      	mov	r3, r0
 800cafa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cafc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	789b      	ldrb	r3, [r3, #2]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f000 f8f4 	bl	800ccf0 <RTC_ByteToBcd2>
 800cb08:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cb0a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cb14:	4313      	orrs	r3, r2
 800cb16:	617b      	str	r3, [r7, #20]
 800cb18:	e00e      	b.n	800cb38 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	78db      	ldrb	r3, [r3, #3]
 800cb1e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	785b      	ldrb	r3, [r3, #1]
 800cb24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb26:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb2c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb34:	4313      	orrs	r3, r2
 800cb36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb38:	4b16      	ldr	r3, [pc, #88]	; (800cb94 <HAL_RTC_SetDate+0x108>)
 800cb3a:	22ca      	movs	r2, #202	; 0xca
 800cb3c:	625a      	str	r2, [r3, #36]	; 0x24
 800cb3e:	4b15      	ldr	r3, [pc, #84]	; (800cb94 <HAL_RTC_SetDate+0x108>)
 800cb40:	2253      	movs	r2, #83	; 0x53
 800cb42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb44:	68f8      	ldr	r0, [r7, #12]
 800cb46:	f000 f859 	bl	800cbfc <RTC_EnterInitMode>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cb4e:	7cfb      	ldrb	r3, [r7, #19]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d10b      	bne.n	800cb6c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800cb54:	4a0f      	ldr	r2, [pc, #60]	; (800cb94 <HAL_RTC_SetDate+0x108>)
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cb60:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f000 f886 	bl	800cc74 <RTC_ExitInitMode>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb6c:	4b09      	ldr	r3, [pc, #36]	; (800cb94 <HAL_RTC_SetDate+0x108>)
 800cb6e:	22ff      	movs	r2, #255	; 0xff
 800cb70:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800cb72:	7cfb      	ldrb	r3, [r7, #19]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d103      	bne.n	800cb80 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800cb88:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	371c      	adds	r7, #28
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd90      	pop	{r4, r7, pc}
 800cb92:	bf00      	nop
 800cb94:	46007800 	.word	0x46007800

0800cb98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cba0:	4b15      	ldr	r3, [pc, #84]	; (800cbf8 <HAL_RTC_WaitForSynchro+0x60>)
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	4a14      	ldr	r2, [pc, #80]	; (800cbf8 <HAL_RTC_WaitForSynchro+0x60>)
 800cba6:	f023 0320 	bic.w	r3, r3, #32
 800cbaa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cbac:	f7f6 ffac 	bl	8003b08 <HAL_GetTick>
 800cbb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbb2:	e013      	b.n	800cbdc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbb4:	f7f6 ffa8 	bl	8003b08 <HAL_GetTick>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbc2:	d90b      	bls.n	800cbdc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbc4:	4b0c      	ldr	r3, [pc, #48]	; (800cbf8 <HAL_RTC_WaitForSynchro+0x60>)
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	f003 0320 	and.w	r3, r3, #32
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10c      	bne.n	800cbea <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800cbd8:	2303      	movs	r3, #3
 800cbda:	e008      	b.n	800cbee <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbdc:	4b06      	ldr	r3, [pc, #24]	; (800cbf8 <HAL_RTC_WaitForSynchro+0x60>)
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	f003 0320 	and.w	r3, r3, #32
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0e5      	beq.n	800cbb4 <HAL_RTC_WaitForSynchro+0x1c>
 800cbe8:	e000      	b.n	800cbec <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cbea:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	46007800 	.word	0x46007800

0800cbfc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc08:	4b19      	ldr	r3, [pc, #100]	; (800cc70 <RTC_EnterInitMode+0x74>)
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d128      	bne.n	800cc66 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc14:	4b16      	ldr	r3, [pc, #88]	; (800cc70 <RTC_EnterInitMode+0x74>)
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	4a15      	ldr	r2, [pc, #84]	; (800cc70 <RTC_EnterInitMode+0x74>)
 800cc1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc1e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cc20:	f7f6 ff72 	bl	8003b08 <HAL_GetTick>
 800cc24:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc26:	e013      	b.n	800cc50 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cc28:	f7f6 ff6e 	bl	8003b08 <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc36:	d90b      	bls.n	800cc50 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc38:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <RTC_EnterInitMode+0x74>)
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10f      	bne.n	800cc64 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cc44:	2303      	movs	r3, #3
 800cc46:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2203      	movs	r2, #3
 800cc4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc50:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <RTC_EnterInitMode+0x74>)
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d104      	bne.n	800cc66 <RTC_EnterInitMode+0x6a>
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d1e2      	bne.n	800cc28 <RTC_EnterInitMode+0x2c>
 800cc62:	e000      	b.n	800cc66 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cc64:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	46007800 	.word	0x46007800

0800cc74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc80:	4b1a      	ldr	r3, [pc, #104]	; (800ccec <RTC_ExitInitMode+0x78>)
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	4a19      	ldr	r2, [pc, #100]	; (800ccec <RTC_ExitInitMode+0x78>)
 800cc86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc8a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc8c:	4b17      	ldr	r3, [pc, #92]	; (800ccec <RTC_ExitInitMode+0x78>)
 800cc8e:	699b      	ldr	r3, [r3, #24]
 800cc90:	f003 0320 	and.w	r3, r3, #32
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10c      	bne.n	800ccb2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f7ff ff7d 	bl	800cb98 <HAL_RTC_WaitForSynchro>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d01e      	beq.n	800cce2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2203      	movs	r2, #3
 800cca8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ccac:	2303      	movs	r3, #3
 800ccae:	73fb      	strb	r3, [r7, #15]
 800ccb0:	e017      	b.n	800cce2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccb2:	4b0e      	ldr	r3, [pc, #56]	; (800ccec <RTC_ExitInitMode+0x78>)
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	4a0d      	ldr	r2, [pc, #52]	; (800ccec <RTC_ExitInitMode+0x78>)
 800ccb8:	f023 0320 	bic.w	r3, r3, #32
 800ccbc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff ff6a 	bl	800cb98 <HAL_RTC_WaitForSynchro>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d005      	beq.n	800ccd6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2203      	movs	r2, #3
 800ccce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccd6:	4b05      	ldr	r3, [pc, #20]	; (800ccec <RTC_ExitInitMode+0x78>)
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	4a04      	ldr	r2, [pc, #16]	; (800ccec <RTC_ExitInitMode+0x78>)
 800ccdc:	f043 0320 	orr.w	r3, r3, #32
 800cce0:	6193      	str	r3, [r2, #24]
  }
  return status;
 800cce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	46007800 	.word	0x46007800

0800ccf0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800cd02:	e005      	b.n	800cd10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	3301      	adds	r3, #1
 800cd08:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800cd0a:	7afb      	ldrb	r3, [r7, #11]
 800cd0c:	3b0a      	subs	r3, #10
 800cd0e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800cd10:	7afb      	ldrb	r3, [r7, #11]
 800cd12:	2b09      	cmp	r3, #9
 800cd14:	d8f6      	bhi.n	800cd04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	011b      	lsls	r3, r3, #4
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	7afb      	ldrb	r3, [r7, #11]
 800cd20:	4313      	orrs	r3, r2
 800cd22:	b2db      	uxtb	r3, r3
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	4910      	ldr	r1, [pc, #64]	; (800cd84 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cd44:	4313      	orrs	r3, r2
 800cd46:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	689a      	ldr	r2, [r3, #8]
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	431a      	orrs	r2, r3
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	699b      	ldr	r3, [r3, #24]
 800cd56:	490c      	ldr	r1, [pc, #48]	; (800cd88 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800cd5c:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd5e:	6a1b      	ldr	r3, [r3, #32]
 800cd60:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	6919      	ldr	r1, [r3, #16]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	041b      	lsls	r3, r3, #16
 800cd6e:	430b      	orrs	r3, r1
 800cd70:	4905      	ldr	r1, [pc, #20]	; (800cd88 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd72:	4313      	orrs	r3, r2
 800cd74:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	46007800 	.word	0x46007800
 800cd88:	46007c00 	.word	0x46007c00

0800cd8c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d101      	bne.n	800cd9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e0fb      	b.n	800cf96 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a7f      	ldr	r2, [pc, #508]	; (800cfa0 <HAL_SPI_Init+0x214>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d004      	beq.n	800cdb2 <HAL_SPI_Init+0x26>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a7d      	ldr	r2, [pc, #500]	; (800cfa4 <HAL_SPI_Init+0x218>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	e000      	b.n	800cdb4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cdb2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a78      	ldr	r2, [pc, #480]	; (800cfa0 <HAL_SPI_Init+0x214>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d004      	beq.n	800cdce <HAL_SPI_Init+0x42>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a76      	ldr	r2, [pc, #472]	; (800cfa4 <HAL_SPI_Init+0x218>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d105      	bne.n	800cdda <HAL_SPI_Init+0x4e>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	2b0f      	cmp	r3, #15
 800cdd4:	d901      	bls.n	800cdda <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e0dd      	b.n	800cf96 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f8ec 	bl	800cfb8 <SPI_GetPacketSize>
 800cde0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a6e      	ldr	r2, [pc, #440]	; (800cfa0 <HAL_SPI_Init+0x214>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d004      	beq.n	800cdf6 <HAL_SPI_Init+0x6a>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a6c      	ldr	r2, [pc, #432]	; (800cfa4 <HAL_SPI_Init+0x218>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d102      	bne.n	800cdfc <HAL_SPI_Init+0x70>
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b08      	cmp	r3, #8
 800cdfa:	d816      	bhi.n	800ce2a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce00:	4a69      	ldr	r2, [pc, #420]	; (800cfa8 <HAL_SPI_Init+0x21c>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d00e      	beq.n	800ce24 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a68      	ldr	r2, [pc, #416]	; (800cfac <HAL_SPI_Init+0x220>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d009      	beq.n	800ce24 <HAL_SPI_Init+0x98>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a66      	ldr	r2, [pc, #408]	; (800cfb0 <HAL_SPI_Init+0x224>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d004      	beq.n	800ce24 <HAL_SPI_Init+0x98>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a65      	ldr	r2, [pc, #404]	; (800cfb4 <HAL_SPI_Init+0x228>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d104      	bne.n	800ce2e <HAL_SPI_Init+0xa2>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b10      	cmp	r3, #16
 800ce28:	d901      	bls.n	800ce2e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e0b3      	b.n	800cf96 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7f6 fc30 	bl	80036a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f022 0201 	bic.w	r2, r2, #1
 800ce5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ce6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	699b      	ldr	r3, [r3, #24]
 800ce70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ce74:	d119      	bne.n	800ceaa <HAL_SPI_Init+0x11e>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce7e:	d103      	bne.n	800ce88 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d008      	beq.n	800ce9a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10c      	bne.n	800ceaa <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce98:	d107      	bne.n	800ceaa <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cea8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00f      	beq.n	800ced6 <HAL_SPI_Init+0x14a>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	2b06      	cmp	r3, #6
 800cebc:	d90b      	bls.n	800ced6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	601a      	str	r2, [r3, #0]
 800ced4:	e007      	b.n	800cee6 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cee4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	69da      	ldr	r2, [r3, #28]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceee:	431a      	orrs	r2, r3
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	431a      	orrs	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef8:	ea42 0103 	orr.w	r1, r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	68da      	ldr	r2, [r3, #12]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	430a      	orrs	r2, r1
 800cf06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf10:	431a      	orrs	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf16:	431a      	orrs	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	431a      	orrs	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	431a      	orrs	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a1b      	ldr	r3, [r3, #32]
 800cf2e:	431a      	orrs	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	431a      	orrs	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf3a:	431a      	orrs	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	431a      	orrs	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf46:	431a      	orrs	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf52:	ea42 0103 	orr.w	r1, r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00a      	beq.n	800cf84 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	430a      	orrs	r2, r1
 800cf82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	46002000 	.word	0x46002000
 800cfa4:	56002000 	.word	0x56002000
 800cfa8:	40013000 	.word	0x40013000
 800cfac:	50013000 	.word	0x50013000
 800cfb0:	40003800 	.word	0x40003800
 800cfb4:	50003800 	.word	0x50003800

0800cfb8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc4:	095b      	lsrs	r3, r3, #5
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	3307      	adds	r3, #7
 800cfd6:	08db      	lsrs	r3, r3, #3
 800cfd8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	fb02 f303 	mul.w	r3, r2, r3
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b083      	sub	sp, #12
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	2b01      	cmp	r3, #1
 800d002:	d12e      	bne.n	800d062 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d101      	bne.n	800d012 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800d00e:	2302      	movs	r3, #2
 800d010:	e028      	b.n	800d064 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2202      	movs	r2, #2
 800d01e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f022 0201 	bic.w	r2, r2, #1
 800d030:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800d03e:	ea42 0103 	orr.w	r1, r2, r3
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	689a      	ldr	r2, [r3, #8]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	430a      	orrs	r2, r1
 800d04c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	e000      	b.n	800d064 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800d062:	2301      	movs	r3, #1
  }
}
 800d064:	4618      	mov	r0, r3
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e049      	b.n	800d116 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f841 	bl	800d11e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2202      	movs	r2, #2
 800d0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	f000 fa58 	bl	800d564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d11e:	b480      	push	{r7}
 800d120:	b083      	sub	sp, #12
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d126:	bf00      	nop
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
	...

0800d134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b01      	cmp	r3, #1
 800d146:	d001      	beq.n	800d14c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	e072      	b.n	800d232 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2202      	movs	r2, #2
 800d150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f042 0201 	orr.w	r2, r2, #1
 800d162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a35      	ldr	r2, [pc, #212]	; (800d240 <HAL_TIM_Base_Start_IT+0x10c>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d040      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a34      	ldr	r2, [pc, #208]	; (800d244 <HAL_TIM_Base_Start_IT+0x110>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d03b      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d180:	d036      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d18a:	d031      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a2d      	ldr	r2, [pc, #180]	; (800d248 <HAL_TIM_Base_Start_IT+0x114>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d02c      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a2c      	ldr	r2, [pc, #176]	; (800d24c <HAL_TIM_Base_Start_IT+0x118>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d027      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a2a      	ldr	r2, [pc, #168]	; (800d250 <HAL_TIM_Base_Start_IT+0x11c>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d022      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a29      	ldr	r2, [pc, #164]	; (800d254 <HAL_TIM_Base_Start_IT+0x120>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d01d      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a27      	ldr	r2, [pc, #156]	; (800d258 <HAL_TIM_Base_Start_IT+0x124>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d018      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a26      	ldr	r2, [pc, #152]	; (800d25c <HAL_TIM_Base_Start_IT+0x128>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d013      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a24      	ldr	r2, [pc, #144]	; (800d260 <HAL_TIM_Base_Start_IT+0x12c>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d00e      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a23      	ldr	r2, [pc, #140]	; (800d264 <HAL_TIM_Base_Start_IT+0x130>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d009      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a21      	ldr	r2, [pc, #132]	; (800d268 <HAL_TIM_Base_Start_IT+0x134>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d004      	beq.n	800d1f0 <HAL_TIM_Base_Start_IT+0xbc>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a20      	ldr	r2, [pc, #128]	; (800d26c <HAL_TIM_Base_Start_IT+0x138>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d115      	bne.n	800d21c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	689a      	ldr	r2, [r3, #8]
 800d1f6:	4b1e      	ldr	r3, [pc, #120]	; (800d270 <HAL_TIM_Base_Start_IT+0x13c>)
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b06      	cmp	r3, #6
 800d200:	d015      	beq.n	800d22e <HAL_TIM_Base_Start_IT+0xfa>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d208:	d011      	beq.n	800d22e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f042 0201 	orr.w	r2, r2, #1
 800d218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21a:	e008      	b.n	800d22e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f042 0201 	orr.w	r2, r2, #1
 800d22a:	601a      	str	r2, [r3, #0]
 800d22c:	e000      	b.n	800d230 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d22e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	40012c00 	.word	0x40012c00
 800d244:	50012c00 	.word	0x50012c00
 800d248:	40000400 	.word	0x40000400
 800d24c:	50000400 	.word	0x50000400
 800d250:	40000800 	.word	0x40000800
 800d254:	50000800 	.word	0x50000800
 800d258:	40000c00 	.word	0x40000c00
 800d25c:	50000c00 	.word	0x50000c00
 800d260:	40013400 	.word	0x40013400
 800d264:	50013400 	.word	0x50013400
 800d268:	40014000 	.word	0x40014000
 800d26c:	50014000 	.word	0x50014000
 800d270:	00010007 	.word	0x00010007

0800d274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	f003 0302 	and.w	r3, r3, #2
 800d292:	2b00      	cmp	r3, #0
 800d294:	d020      	beq.n	800d2d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f003 0302 	and.w	r3, r3, #2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d01b      	beq.n	800d2d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f06f 0202 	mvn.w	r2, #2
 800d2a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	f003 0303 	and.w	r3, r3, #3
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d003      	beq.n	800d2c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f931 	bl	800d526 <HAL_TIM_IC_CaptureCallback>
 800d2c4:	e005      	b.n	800d2d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f923 	bl	800d512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f934 	bl	800d53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	f003 0304 	and.w	r3, r3, #4
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d020      	beq.n	800d324 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f003 0304 	and.w	r3, r3, #4
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d01b      	beq.n	800d324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f06f 0204 	mvn.w	r2, #4
 800d2f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d306:	2b00      	cmp	r3, #0
 800d308:	d003      	beq.n	800d312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f90b 	bl	800d526 <HAL_TIM_IC_CaptureCallback>
 800d310:	e005      	b.n	800d31e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f8fd 	bl	800d512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f000 f90e 	bl	800d53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	f003 0308 	and.w	r3, r3, #8
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d020      	beq.n	800d370 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f003 0308 	and.w	r3, r3, #8
 800d334:	2b00      	cmp	r3, #0
 800d336:	d01b      	beq.n	800d370 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f06f 0208 	mvn.w	r2, #8
 800d340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2204      	movs	r2, #4
 800d346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	f003 0303 	and.w	r3, r3, #3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f8e5 	bl	800d526 <HAL_TIM_IC_CaptureCallback>
 800d35c:	e005      	b.n	800d36a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f8d7 	bl	800d512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f8e8 	bl	800d53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	f003 0310 	and.w	r3, r3, #16
 800d376:	2b00      	cmp	r3, #0
 800d378:	d020      	beq.n	800d3bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f003 0310 	and.w	r3, r3, #16
 800d380:	2b00      	cmp	r3, #0
 800d382:	d01b      	beq.n	800d3bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f06f 0210 	mvn.w	r2, #16
 800d38c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2208      	movs	r2, #8
 800d392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	69db      	ldr	r3, [r3, #28]
 800d39a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 f8bf 	bl	800d526 <HAL_TIM_IC_CaptureCallback>
 800d3a8:	e005      	b.n	800d3b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f8b1 	bl	800d512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 f8c2 	bl	800d53a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00c      	beq.n	800d3e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d007      	beq.n	800d3e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f06f 0201 	mvn.w	r2, #1
 800d3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7f5 f91a 	bl	8002614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d104      	bne.n	800d3f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00c      	beq.n	800d40e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d007      	beq.n	800d40e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 f9af 	bl	800d76c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00c      	beq.n	800d432 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d007      	beq.n	800d432 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 f9a7 	bl	800d780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00c      	beq.n	800d456 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d442:	2b00      	cmp	r3, #0
 800d444:	d007      	beq.n	800d456 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d44e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f87c 	bl	800d54e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	f003 0320 	and.w	r3, r3, #32
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00c      	beq.n	800d47a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f003 0320 	and.w	r3, r3, #32
 800d466:	2b00      	cmp	r3, #0
 800d468:	d007      	beq.n	800d47a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f06f 0220 	mvn.w	r2, #32
 800d472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 f96f 	bl	800d758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d00c      	beq.n	800d49e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d007      	beq.n	800d49e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f97b 	bl	800d794 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00c      	beq.n	800d4c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d007      	beq.n	800d4c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d4ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f973 	bl	800d7a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00c      	beq.n	800d4e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d007      	beq.n	800d4e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d4de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f96b 	bl	800d7bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00c      	beq.n	800d50a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d007      	beq.n	800d50a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 f963 	bl	800d7d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d50a:	bf00      	nop
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d512:	b480      	push	{r7}
 800d514:	b083      	sub	sp, #12
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d51a:	bf00      	nop
 800d51c:	370c      	adds	r7, #12
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr

0800d526 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d526:	b480      	push	{r7}
 800d528:	b083      	sub	sp, #12
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d52e:	bf00      	nop
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr

0800d53a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d542:	bf00      	nop
 800d544:	370c      	adds	r7, #12
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d54e:	b480      	push	{r7}
 800d550:	b083      	sub	sp, #12
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d556:	bf00      	nop
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
	...

0800d564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a68      	ldr	r2, [pc, #416]	; (800d718 <TIM_Base_SetConfig+0x1b4>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d02b      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a67      	ldr	r2, [pc, #412]	; (800d71c <TIM_Base_SetConfig+0x1b8>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d027      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d58a:	d023      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d592:	d01f      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a62      	ldr	r2, [pc, #392]	; (800d720 <TIM_Base_SetConfig+0x1bc>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d01b      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a61      	ldr	r2, [pc, #388]	; (800d724 <TIM_Base_SetConfig+0x1c0>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d017      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a60      	ldr	r2, [pc, #384]	; (800d728 <TIM_Base_SetConfig+0x1c4>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d013      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a5f      	ldr	r2, [pc, #380]	; (800d72c <TIM_Base_SetConfig+0x1c8>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d00f      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a5e      	ldr	r2, [pc, #376]	; (800d730 <TIM_Base_SetConfig+0x1cc>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d00b      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a5d      	ldr	r2, [pc, #372]	; (800d734 <TIM_Base_SetConfig+0x1d0>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d007      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a5c      	ldr	r2, [pc, #368]	; (800d738 <TIM_Base_SetConfig+0x1d4>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d003      	beq.n	800d5d4 <TIM_Base_SetConfig+0x70>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4a5b      	ldr	r2, [pc, #364]	; (800d73c <TIM_Base_SetConfig+0x1d8>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d108      	bne.n	800d5e6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a4b      	ldr	r2, [pc, #300]	; (800d718 <TIM_Base_SetConfig+0x1b4>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d043      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a4a      	ldr	r2, [pc, #296]	; (800d71c <TIM_Base_SetConfig+0x1b8>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d03f      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5fc:	d03b      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d604:	d037      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a45      	ldr	r2, [pc, #276]	; (800d720 <TIM_Base_SetConfig+0x1bc>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d033      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a44      	ldr	r2, [pc, #272]	; (800d724 <TIM_Base_SetConfig+0x1c0>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d02f      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a43      	ldr	r2, [pc, #268]	; (800d728 <TIM_Base_SetConfig+0x1c4>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d02b      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a42      	ldr	r2, [pc, #264]	; (800d72c <TIM_Base_SetConfig+0x1c8>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d027      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a41      	ldr	r2, [pc, #260]	; (800d730 <TIM_Base_SetConfig+0x1cc>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d023      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a40      	ldr	r2, [pc, #256]	; (800d734 <TIM_Base_SetConfig+0x1d0>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d01f      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a3f      	ldr	r2, [pc, #252]	; (800d738 <TIM_Base_SetConfig+0x1d4>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d01b      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a3e      	ldr	r2, [pc, #248]	; (800d73c <TIM_Base_SetConfig+0x1d8>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d017      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a3d      	ldr	r2, [pc, #244]	; (800d740 <TIM_Base_SetConfig+0x1dc>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d013      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a3c      	ldr	r2, [pc, #240]	; (800d744 <TIM_Base_SetConfig+0x1e0>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d00f      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a3b      	ldr	r2, [pc, #236]	; (800d748 <TIM_Base_SetConfig+0x1e4>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d00b      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a3a      	ldr	r2, [pc, #232]	; (800d74c <TIM_Base_SetConfig+0x1e8>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d007      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a39      	ldr	r2, [pc, #228]	; (800d750 <TIM_Base_SetConfig+0x1ec>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d003      	beq.n	800d676 <TIM_Base_SetConfig+0x112>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a38      	ldr	r2, [pc, #224]	; (800d754 <TIM_Base_SetConfig+0x1f0>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d108      	bne.n	800d688 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d67c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	4313      	orrs	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	4313      	orrs	r3, r2
 800d694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	689a      	ldr	r2, [r3, #8]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a1a      	ldr	r2, [pc, #104]	; (800d718 <TIM_Base_SetConfig+0x1b4>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d023      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a19      	ldr	r2, [pc, #100]	; (800d71c <TIM_Base_SetConfig+0x1b8>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d01f      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a1e      	ldr	r2, [pc, #120]	; (800d738 <TIM_Base_SetConfig+0x1d4>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d01b      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a1d      	ldr	r2, [pc, #116]	; (800d73c <TIM_Base_SetConfig+0x1d8>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d017      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a1c      	ldr	r2, [pc, #112]	; (800d740 <TIM_Base_SetConfig+0x1dc>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d013      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4a1b      	ldr	r2, [pc, #108]	; (800d744 <TIM_Base_SetConfig+0x1e0>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d00f      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4a1a      	ldr	r2, [pc, #104]	; (800d748 <TIM_Base_SetConfig+0x1e4>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d00b      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a19      	ldr	r2, [pc, #100]	; (800d74c <TIM_Base_SetConfig+0x1e8>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d007      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a18      	ldr	r2, [pc, #96]	; (800d750 <TIM_Base_SetConfig+0x1ec>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d003      	beq.n	800d6fc <TIM_Base_SetConfig+0x198>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a17      	ldr	r2, [pc, #92]	; (800d754 <TIM_Base_SetConfig+0x1f0>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d103      	bne.n	800d704 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	691a      	ldr	r2, [r3, #16]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	615a      	str	r2, [r3, #20]
}
 800d70a:	bf00      	nop
 800d70c:	3714      	adds	r7, #20
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	40012c00 	.word	0x40012c00
 800d71c:	50012c00 	.word	0x50012c00
 800d720:	40000400 	.word	0x40000400
 800d724:	50000400 	.word	0x50000400
 800d728:	40000800 	.word	0x40000800
 800d72c:	50000800 	.word	0x50000800
 800d730:	40000c00 	.word	0x40000c00
 800d734:	50000c00 	.word	0x50000c00
 800d738:	40013400 	.word	0x40013400
 800d73c:	50013400 	.word	0x50013400
 800d740:	40014000 	.word	0x40014000
 800d744:	50014000 	.word	0x50014000
 800d748:	40014400 	.word	0x40014400
 800d74c:	50014400 	.word	0x50014400
 800d750:	40014800 	.word	0x40014800
 800d754:	50014800 	.word	0x50014800

0800d758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d760:	bf00      	nop
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d774:	bf00      	nop
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d7d8:	bf00      	nop
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e042      	b.n	800d87c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d106      	bne.n	800d80e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f7f5 fb5d 	bl	8002ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2224      	movs	r2, #36	; 0x24
 800d812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f022 0201 	bic.w	r2, r2, #1
 800d824:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f9d6 	bl	800dbe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f825 	bl	800d884 <UART_SetConfig>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d101      	bne.n	800d844 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	e01b      	b.n	800d87c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	685a      	ldr	r2, [r3, #4]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	689a      	ldr	r2, [r3, #8]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f042 0201 	orr.w	r2, r2, #1
 800d872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fa55 	bl	800dd24 <UART_CheckIdleState>
 800d87a:	4603      	mov	r3, r0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d888:	b094      	sub	sp, #80	; 0x50
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	4b83      	ldr	r3, [pc, #524]	; (800daa8 <UART_SetConfig+0x224>)
 800d89a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	689a      	ldr	r2, [r3, #8]
 800d8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	431a      	orrs	r2, r3
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	695b      	ldr	r3, [r3, #20]
 800d8aa:	431a      	orrs	r2, r3
 800d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ae:	69db      	ldr	r3, [r3, #28]
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	497c      	ldr	r1, [pc, #496]	; (800daac <UART_SetConfig+0x228>)
 800d8bc:	4019      	ands	r1, r3
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c4:	430b      	orrs	r3, r1
 800d8c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d4:	68d9      	ldr	r1, [r3, #12]
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	ea40 0301 	orr.w	r3, r0, r1
 800d8de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	4b6f      	ldr	r3, [pc, #444]	; (800daa8 <UART_SetConfig+0x224>)
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d009      	beq.n	800d904 <UART_SetConfig+0x80>
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	4b6e      	ldr	r3, [pc, #440]	; (800dab0 <UART_SetConfig+0x22c>)
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d004      	beq.n	800d904 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fc:	6a1a      	ldr	r2, [r3, #32]
 800d8fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d900:	4313      	orrs	r3, r2
 800d902:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d90e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d918:	430b      	orrs	r3, r1
 800d91a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d922:	f023 000f 	bic.w	r0, r3, #15
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	ea40 0301 	orr.w	r3, r0, r1
 800d932:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	4b5e      	ldr	r3, [pc, #376]	; (800dab4 <UART_SetConfig+0x230>)
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d102      	bne.n	800d944 <UART_SetConfig+0xc0>
 800d93e:	2301      	movs	r3, #1
 800d940:	64bb      	str	r3, [r7, #72]	; 0x48
 800d942:	e032      	b.n	800d9aa <UART_SetConfig+0x126>
 800d944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	4b5b      	ldr	r3, [pc, #364]	; (800dab8 <UART_SetConfig+0x234>)
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d102      	bne.n	800d954 <UART_SetConfig+0xd0>
 800d94e:	2302      	movs	r3, #2
 800d950:	64bb      	str	r3, [r7, #72]	; 0x48
 800d952:	e02a      	b.n	800d9aa <UART_SetConfig+0x126>
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	4b58      	ldr	r3, [pc, #352]	; (800dabc <UART_SetConfig+0x238>)
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d102      	bne.n	800d964 <UART_SetConfig+0xe0>
 800d95e:	2304      	movs	r3, #4
 800d960:	64bb      	str	r3, [r7, #72]	; 0x48
 800d962:	e022      	b.n	800d9aa <UART_SetConfig+0x126>
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	4b55      	ldr	r3, [pc, #340]	; (800dac0 <UART_SetConfig+0x23c>)
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d102      	bne.n	800d974 <UART_SetConfig+0xf0>
 800d96e:	2308      	movs	r3, #8
 800d970:	64bb      	str	r3, [r7, #72]	; 0x48
 800d972:	e01a      	b.n	800d9aa <UART_SetConfig+0x126>
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	4b52      	ldr	r3, [pc, #328]	; (800dac4 <UART_SetConfig+0x240>)
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d102      	bne.n	800d984 <UART_SetConfig+0x100>
 800d97e:	2310      	movs	r3, #16
 800d980:	64bb      	str	r3, [r7, #72]	; 0x48
 800d982:	e012      	b.n	800d9aa <UART_SetConfig+0x126>
 800d984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	4b4f      	ldr	r3, [pc, #316]	; (800dac8 <UART_SetConfig+0x244>)
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d103      	bne.n	800d996 <UART_SetConfig+0x112>
 800d98e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d992:	64bb      	str	r3, [r7, #72]	; 0x48
 800d994:	e009      	b.n	800d9aa <UART_SetConfig+0x126>
 800d996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	4b43      	ldr	r3, [pc, #268]	; (800daa8 <UART_SetConfig+0x224>)
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d102      	bne.n	800d9a6 <UART_SetConfig+0x122>
 800d9a0:	2320      	movs	r3, #32
 800d9a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9a4:	e001      	b.n	800d9aa <UART_SetConfig+0x126>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	4b3e      	ldr	r3, [pc, #248]	; (800daa8 <UART_SetConfig+0x224>)
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d005      	beq.n	800d9c0 <UART_SetConfig+0x13c>
 800d9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	4b3d      	ldr	r3, [pc, #244]	; (800dab0 <UART_SetConfig+0x22c>)
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	f040 8088 	bne.w	800dad0 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d9c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	623b      	str	r3, [r7, #32]
 800d9c6:	627a      	str	r2, [r7, #36]	; 0x24
 800d9c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d9cc:	f7fd fa78 	bl	800aec0 <HAL_RCCEx_GetPeriphCLKFreq>
 800d9d0:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 80eb 	beq.w	800dbb0 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9de:	4a3b      	ldr	r2, [pc, #236]	; (800dacc <UART_SetConfig+0x248>)
 800d9e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9ec:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f0:	685a      	ldr	r2, [r3, #4]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	005b      	lsls	r3, r3, #1
 800d9f6:	4413      	add	r3, r2
 800d9f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d305      	bcc.n	800da0a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da06:	429a      	cmp	r2, r3
 800da08:	d903      	bls.n	800da12 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800da0a:	2301      	movs	r3, #1
 800da0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800da10:	e048      	b.n	800daa4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da14:	2200      	movs	r2, #0
 800da16:	61bb      	str	r3, [r7, #24]
 800da18:	61fa      	str	r2, [r7, #28]
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	4a2b      	ldr	r2, [pc, #172]	; (800dacc <UART_SetConfig+0x248>)
 800da20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da24:	b29b      	uxth	r3, r3
 800da26:	2200      	movs	r2, #0
 800da28:	613b      	str	r3, [r7, #16]
 800da2a:	617a      	str	r2, [r7, #20]
 800da2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800da34:	f7f2 ff42 	bl	80008bc <__aeabi_uldivmod>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4610      	mov	r0, r2
 800da3e:	4619      	mov	r1, r3
 800da40:	f04f 0200 	mov.w	r2, #0
 800da44:	f04f 0300 	mov.w	r3, #0
 800da48:	020b      	lsls	r3, r1, #8
 800da4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da4e:	0202      	lsls	r2, r0, #8
 800da50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da52:	6849      	ldr	r1, [r1, #4]
 800da54:	0849      	lsrs	r1, r1, #1
 800da56:	2000      	movs	r0, #0
 800da58:	460c      	mov	r4, r1
 800da5a:	4605      	mov	r5, r0
 800da5c:	eb12 0804 	adds.w	r8, r2, r4
 800da60:	eb43 0905 	adc.w	r9, r3, r5
 800da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	60bb      	str	r3, [r7, #8]
 800da6c:	60fa      	str	r2, [r7, #12]
 800da6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da72:	4640      	mov	r0, r8
 800da74:	4649      	mov	r1, r9
 800da76:	f7f2 ff21 	bl	80008bc <__aeabi_uldivmod>
 800da7a:	4602      	mov	r2, r0
 800da7c:	460b      	mov	r3, r1
 800da7e:	4613      	mov	r3, r2
 800da80:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da88:	d308      	bcc.n	800da9c <UART_SetConfig+0x218>
 800da8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da90:	d204      	bcs.n	800da9c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800da92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da98:	60da      	str	r2, [r3, #12]
 800da9a:	e003      	b.n	800daa4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
 800da9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800daa2:	e085      	b.n	800dbb0 <UART_SetConfig+0x32c>
 800daa4:	e084      	b.n	800dbb0 <UART_SetConfig+0x32c>
 800daa6:	bf00      	nop
 800daa8:	46002400 	.word	0x46002400
 800daac:	cfff69f3 	.word	0xcfff69f3
 800dab0:	56002400 	.word	0x56002400
 800dab4:	40013800 	.word	0x40013800
 800dab8:	40004400 	.word	0x40004400
 800dabc:	40004800 	.word	0x40004800
 800dac0:	40004c00 	.word	0x40004c00
 800dac4:	40005000 	.word	0x40005000
 800dac8:	40006400 	.word	0x40006400
 800dacc:	0800e3a0 	.word	0x0800e3a0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	69db      	ldr	r3, [r3, #28]
 800dad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dad8:	d13c      	bne.n	800db54 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dadc:	2200      	movs	r2, #0
 800dade:	603b      	str	r3, [r7, #0]
 800dae0:	607a      	str	r2, [r7, #4]
 800dae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dae6:	f7fd f9eb 	bl	800aec0 <HAL_RCCEx_GetPeriphCLKFreq>
 800daea:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800daec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d05e      	beq.n	800dbb0 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf6:	4a39      	ldr	r2, [pc, #228]	; (800dbdc <UART_SetConfig+0x358>)
 800daf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dafc:	461a      	mov	r2, r3
 800dafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db00:	fbb3 f3f2 	udiv	r3, r3, r2
 800db04:	005a      	lsls	r2, r3, #1
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	085b      	lsrs	r3, r3, #1
 800db0c:	441a      	add	r2, r3
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	fbb2 f3f3 	udiv	r3, r2, r3
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db1a:	2b0f      	cmp	r3, #15
 800db1c:	d916      	bls.n	800db4c <UART_SetConfig+0x2c8>
 800db1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db24:	d212      	bcs.n	800db4c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db28:	b29b      	uxth	r3, r3
 800db2a:	f023 030f 	bic.w	r3, r3, #15
 800db2e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db32:	085b      	lsrs	r3, r3, #1
 800db34:	b29b      	uxth	r3, r3
 800db36:	f003 0307 	and.w	r3, r3, #7
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800db3e:	4313      	orrs	r3, r2
 800db40:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800db42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800db48:	60da      	str	r2, [r3, #12]
 800db4a:	e031      	b.n	800dbb0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db52:	e02d      	b.n	800dbb0 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800db54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db56:	2200      	movs	r2, #0
 800db58:	469a      	mov	sl, r3
 800db5a:	4693      	mov	fp, r2
 800db5c:	4650      	mov	r0, sl
 800db5e:	4659      	mov	r1, fp
 800db60:	f7fd f9ae 	bl	800aec0 <HAL_RCCEx_GetPeriphCLKFreq>
 800db64:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800db66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d021      	beq.n	800dbb0 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db70:	4a1a      	ldr	r2, [pc, #104]	; (800dbdc <UART_SetConfig+0x358>)
 800db72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db76:	461a      	mov	r2, r3
 800db78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800db7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	085b      	lsrs	r3, r3, #1
 800db84:	441a      	add	r2, r3
 800db86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db92:	2b0f      	cmp	r3, #15
 800db94:	d909      	bls.n	800dbaa <UART_SetConfig+0x326>
 800db96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db9c:	d205      	bcs.n	800dbaa <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	60da      	str	r2, [r3, #12]
 800dba8:	e002      	b.n	800dbb0 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800dbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc8:	2200      	movs	r2, #0
 800dbca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800dbcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3750      	adds	r7, #80	; 0x50
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbda:	bf00      	nop
 800dbdc:	0800e3a0 	.word	0x0800e3a0

0800dbe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbec:	f003 0308 	and.w	r3, r3, #8
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00a      	beq.n	800dc0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	430a      	orrs	r2, r1
 800dc08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc0e:	f003 0301 	and.w	r3, r3, #1
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00a      	beq.n	800dc2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	430a      	orrs	r2, r1
 800dc2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc30:	f003 0302 	and.w	r3, r3, #2
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00a      	beq.n	800dc4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	430a      	orrs	r2, r1
 800dc4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc52:	f003 0304 	and.w	r3, r3, #4
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00a      	beq.n	800dc70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	430a      	orrs	r2, r1
 800dc6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc74:	f003 0310 	and.w	r3, r3, #16
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00a      	beq.n	800dc92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc96:	f003 0320 	and.w	r3, r3, #32
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00a      	beq.n	800dcb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	430a      	orrs	r2, r1
 800dcb2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d01a      	beq.n	800dcf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	430a      	orrs	r2, r1
 800dcd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcde:	d10a      	bne.n	800dcf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	430a      	orrs	r2, r1
 800dcf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00a      	beq.n	800dd18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	430a      	orrs	r2, r1
 800dd16:	605a      	str	r2, [r3, #4]
  }
}
 800dd18:	bf00      	nop
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b098      	sub	sp, #96	; 0x60
 800dd28:	af02      	add	r7, sp, #8
 800dd2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd34:	f7f5 fee8 	bl	8003b08 <HAL_GetTick>
 800dd38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f003 0308 	and.w	r3, r3, #8
 800dd44:	2b08      	cmp	r3, #8
 800dd46:	d12f      	bne.n	800dda8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd50:	2200      	movs	r2, #0
 800dd52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f88e 	bl	800de78 <UART_WaitOnFlagUntilTimeout>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d022      	beq.n	800dda8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6a:	e853 3f00 	ldrex	r3, [r3]
 800dd6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd76:	653b      	str	r3, [r7, #80]	; 0x50
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd80:	647b      	str	r3, [r7, #68]	; 0x44
 800dd82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd88:	e841 2300 	strex	r3, r2, [r1]
 800dd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1e6      	bne.n	800dd62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2220      	movs	r2, #32
 800dd98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dda4:	2303      	movs	r3, #3
 800dda6:	e063      	b.n	800de70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f003 0304 	and.w	r3, r3, #4
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d149      	bne.n	800de4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 f857 	bl	800de78 <UART_WaitOnFlagUntilTimeout>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d03c      	beq.n	800de4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	e853 3f00 	ldrex	r3, [r3]
 800dddc:	623b      	str	r3, [r7, #32]
   return(result);
 800ddde:	6a3b      	ldr	r3, [r7, #32]
 800dde0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dde4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	461a      	mov	r2, r3
 800ddec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddee:	633b      	str	r3, [r7, #48]	; 0x30
 800ddf0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddf6:	e841 2300 	strex	r3, r2, [r1]
 800ddfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1e6      	bne.n	800ddd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3308      	adds	r3, #8
 800de08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	e853 3f00 	ldrex	r3, [r3]
 800de10:	60fb      	str	r3, [r7, #12]
   return(result);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f023 0301 	bic.w	r3, r3, #1
 800de18:	64bb      	str	r3, [r7, #72]	; 0x48
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3308      	adds	r3, #8
 800de20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de22:	61fa      	str	r2, [r7, #28]
 800de24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de26:	69b9      	ldr	r1, [r7, #24]
 800de28:	69fa      	ldr	r2, [r7, #28]
 800de2a:	e841 2300 	strex	r3, r2, [r1]
 800de2e:	617b      	str	r3, [r7, #20]
   return(result);
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d1e5      	bne.n	800de02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2220      	movs	r2, #32
 800de3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de46:	2303      	movs	r3, #3
 800de48:	e012      	b.n	800de70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2220      	movs	r2, #32
 800de4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2220      	movs	r2, #32
 800de56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3758      	adds	r7, #88	; 0x58
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	603b      	str	r3, [r7, #0]
 800de84:	4613      	mov	r3, r2
 800de86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de88:	e049      	b.n	800df1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de90:	d045      	beq.n	800df1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de92:	f7f5 fe39 	bl	8003b08 <HAL_GetTick>
 800de96:	4602      	mov	r2, r0
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	69ba      	ldr	r2, [r7, #24]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d302      	bcc.n	800dea8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dea8:	2303      	movs	r3, #3
 800deaa:	e048      	b.n	800df3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f003 0304 	and.w	r3, r3, #4
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d031      	beq.n	800df1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	69db      	ldr	r3, [r3, #28]
 800dec0:	f003 0308 	and.w	r3, r3, #8
 800dec4:	2b08      	cmp	r3, #8
 800dec6:	d110      	bne.n	800deea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2208      	movs	r2, #8
 800dece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f000 f838 	bl	800df46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2208      	movs	r2, #8
 800deda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	e029      	b.n	800df3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800def4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800def8:	d111      	bne.n	800df1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 f81e 	bl	800df46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2220      	movs	r2, #32
 800df0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2200      	movs	r2, #0
 800df16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800df1a:	2303      	movs	r3, #3
 800df1c:	e00f      	b.n	800df3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	69da      	ldr	r2, [r3, #28]
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	4013      	ands	r3, r2
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	bf0c      	ite	eq
 800df2e:	2301      	moveq	r3, #1
 800df30:	2300      	movne	r3, #0
 800df32:	b2db      	uxtb	r3, r3
 800df34:	461a      	mov	r2, r3
 800df36:	79fb      	ldrb	r3, [r7, #7]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d0a6      	beq.n	800de8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df46:	b480      	push	{r7}
 800df48:	b095      	sub	sp, #84	; 0x54
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df56:	e853 3f00 	ldrex	r3, [r3]
 800df5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800df5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	461a      	mov	r2, r3
 800df6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df6c:	643b      	str	r3, [r7, #64]	; 0x40
 800df6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df74:	e841 2300 	strex	r3, r2, [r1]
 800df78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1e6      	bne.n	800df4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3308      	adds	r3, #8
 800df86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df88:	6a3b      	ldr	r3, [r7, #32]
 800df8a:	e853 3f00 	ldrex	r3, [r3]
 800df8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df96:	f023 0301 	bic.w	r3, r3, #1
 800df9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3308      	adds	r3, #8
 800dfa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dfa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dfaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfac:	e841 2300 	strex	r3, r2, [r1]
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e3      	bne.n	800df80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d118      	bne.n	800dff2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	e853 3f00 	ldrex	r3, [r3]
 800dfcc:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	f023 0310 	bic.w	r3, r3, #16
 800dfd4:	647b      	str	r3, [r7, #68]	; 0x44
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	461a      	mov	r2, r3
 800dfdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfde:	61bb      	str	r3, [r7, #24]
 800dfe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe2:	6979      	ldr	r1, [r7, #20]
 800dfe4:	69ba      	ldr	r2, [r7, #24]
 800dfe6:	e841 2300 	strex	r3, r2, [r1]
 800dfea:	613b      	str	r3, [r7, #16]
   return(result);
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d1e6      	bne.n	800dfc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2220      	movs	r2, #32
 800dff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e006:	bf00      	nop
 800e008:	3754      	adds	r7, #84	; 0x54
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e012:	b480      	push	{r7}
 800e014:	b085      	sub	sp, #20
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e020:	2b01      	cmp	r3, #1
 800e022:	d101      	bne.n	800e028 <HAL_UARTEx_DisableFifoMode+0x16>
 800e024:	2302      	movs	r3, #2
 800e026:	e027      	b.n	800e078 <HAL_UARTEx_DisableFifoMode+0x66>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2224      	movs	r2, #36	; 0x24
 800e034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f022 0201 	bic.w	r2, r2, #1
 800e04e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2220      	movs	r2, #32
 800e06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e076:	2300      	movs	r3, #0
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3714      	adds	r7, #20
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e094:	2b01      	cmp	r3, #1
 800e096:	d101      	bne.n	800e09c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e098:	2302      	movs	r3, #2
 800e09a:	e02d      	b.n	800e0f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2224      	movs	r2, #36	; 0x24
 800e0a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f022 0201 	bic.w	r2, r2, #1
 800e0c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	683a      	ldr	r2, [r7, #0]
 800e0d4:	430a      	orrs	r2, r1
 800e0d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 f84f 	bl	800e17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2220      	movs	r2, #32
 800e0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e0f6:	2300      	movs	r3, #0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e110:	2b01      	cmp	r3, #1
 800e112:	d101      	bne.n	800e118 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e114:	2302      	movs	r3, #2
 800e116:	e02d      	b.n	800e174 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2224      	movs	r2, #36	; 0x24
 800e124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f022 0201 	bic.w	r2, r2, #1
 800e13e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	689b      	ldr	r3, [r3, #8]
 800e146:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	683a      	ldr	r2, [r7, #0]
 800e150:	430a      	orrs	r2, r1
 800e152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f811 	bl	800e17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2220      	movs	r2, #32
 800e166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e172:	2300      	movs	r3, #0
}
 800e174:	4618      	mov	r0, r3
 800e176:	3710      	adds	r7, #16
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d108      	bne.n	800e19e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2201      	movs	r2, #1
 800e190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e19c:	e031      	b.n	800e202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e19e:	2308      	movs	r3, #8
 800e1a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e1a2:	2308      	movs	r3, #8
 800e1a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	0e5b      	lsrs	r3, r3, #25
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f003 0307 	and.w	r3, r3, #7
 800e1b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	0f5b      	lsrs	r3, r3, #29
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	f003 0307 	and.w	r3, r3, #7
 800e1c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1c6:	7bbb      	ldrb	r3, [r7, #14]
 800e1c8:	7b3a      	ldrb	r2, [r7, #12]
 800e1ca:	4911      	ldr	r1, [pc, #68]	; (800e210 <UARTEx_SetNbDataToProcess+0x94>)
 800e1cc:	5c8a      	ldrb	r2, [r1, r2]
 800e1ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1d2:	7b3a      	ldrb	r2, [r7, #12]
 800e1d4:	490f      	ldr	r1, [pc, #60]	; (800e214 <UARTEx_SetNbDataToProcess+0x98>)
 800e1d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
 800e1e6:	7b7a      	ldrb	r2, [r7, #13]
 800e1e8:	4909      	ldr	r1, [pc, #36]	; (800e210 <UARTEx_SetNbDataToProcess+0x94>)
 800e1ea:	5c8a      	ldrb	r2, [r1, r2]
 800e1ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1f0:	7b7a      	ldrb	r2, [r7, #13]
 800e1f2:	4908      	ldr	r1, [pc, #32]	; (800e214 <UARTEx_SetNbDataToProcess+0x98>)
 800e1f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e202:	bf00      	nop
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	0800e3b8 	.word	0x0800e3b8
 800e214:	0800e3c0 	.word	0x0800e3c0

0800e218 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f043 0202 	orr.w	r2, r3, #2
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	021b      	lsls	r3, r3, #8
 800e238:	431a      	orrs	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f023 0202 	bic.w	r2, r3, #2
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	601a      	str	r2, [r3, #0]
}
 800e24a:	bf00      	nop
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <memset>:
 800e256:	4402      	add	r2, r0
 800e258:	4603      	mov	r3, r0
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d100      	bne.n	800e260 <memset+0xa>
 800e25e:	4770      	bx	lr
 800e260:	f803 1b01 	strb.w	r1, [r3], #1
 800e264:	e7f9      	b.n	800e25a <memset+0x4>
	...

0800e268 <__libc_init_array>:
 800e268:	b570      	push	{r4, r5, r6, lr}
 800e26a:	4d0d      	ldr	r5, [pc, #52]	; (800e2a0 <__libc_init_array+0x38>)
 800e26c:	2600      	movs	r6, #0
 800e26e:	4c0d      	ldr	r4, [pc, #52]	; (800e2a4 <__libc_init_array+0x3c>)
 800e270:	1b64      	subs	r4, r4, r5
 800e272:	10a4      	asrs	r4, r4, #2
 800e274:	42a6      	cmp	r6, r4
 800e276:	d109      	bne.n	800e28c <__libc_init_array+0x24>
 800e278:	4d0b      	ldr	r5, [pc, #44]	; (800e2a8 <__libc_init_array+0x40>)
 800e27a:	2600      	movs	r6, #0
 800e27c:	4c0b      	ldr	r4, [pc, #44]	; (800e2ac <__libc_init_array+0x44>)
 800e27e:	f000 f817 	bl	800e2b0 <_init>
 800e282:	1b64      	subs	r4, r4, r5
 800e284:	10a4      	asrs	r4, r4, #2
 800e286:	42a6      	cmp	r6, r4
 800e288:	d105      	bne.n	800e296 <__libc_init_array+0x2e>
 800e28a:	bd70      	pop	{r4, r5, r6, pc}
 800e28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e290:	3601      	adds	r6, #1
 800e292:	4798      	blx	r3
 800e294:	e7ee      	b.n	800e274 <__libc_init_array+0xc>
 800e296:	f855 3b04 	ldr.w	r3, [r5], #4
 800e29a:	3601      	adds	r6, #1
 800e29c:	4798      	blx	r3
 800e29e:	e7f2      	b.n	800e286 <__libc_init_array+0x1e>
 800e2a0:	0800e3d0 	.word	0x0800e3d0
 800e2a4:	0800e3d0 	.word	0x0800e3d0
 800e2a8:	0800e3d0 	.word	0x0800e3d0
 800e2ac:	0800e3d4 	.word	0x0800e3d4

0800e2b0 <_init>:
 800e2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b2:	bf00      	nop
 800e2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2b6:	bc08      	pop	{r3}
 800e2b8:	469e      	mov	lr, r3
 800e2ba:	4770      	bx	lr

0800e2bc <_fini>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	bf00      	nop
 800e2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2c2:	bc08      	pop	{r3}
 800e2c4:	469e      	mov	lr, r3
 800e2c6:	4770      	bx	lr
